/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 194.0, "minX": 0.0, "maxY": 287768.0, "series": [{"data": [[0.0, 194.0], [0.1, 204.0], [0.2, 207.0], [0.3, 209.0], [0.4, 210.0], [0.5, 211.0], [0.6, 213.0], [0.7, 214.0], [0.8, 215.0], [0.9, 216.0], [1.0, 217.0], [1.1, 219.0], [1.2, 220.0], [1.3, 222.0], [1.4, 224.0], [1.5, 225.0], [1.6, 226.0], [1.7, 226.0], [1.8, 228.0], [1.9, 229.0], [2.0, 229.0], [2.1, 230.0], [2.2, 231.0], [2.3, 232.0], [2.4, 232.0], [2.5, 233.0], [2.6, 234.0], [2.7, 234.0], [2.8, 235.0], [2.9, 236.0], [3.0, 236.0], [3.1, 237.0], [3.2, 237.0], [3.3, 238.0], [3.4, 238.0], [3.5, 238.0], [3.6, 239.0], [3.7, 240.0], [3.8, 240.0], [3.9, 240.0], [4.0, 240.0], [4.1, 241.0], [4.2, 242.0], [4.3, 242.0], [4.4, 243.0], [4.5, 243.0], [4.6, 244.0], [4.7, 244.0], [4.8, 244.0], [4.9, 245.0], [5.0, 245.0], [5.1, 246.0], [5.2, 247.0], [5.3, 247.0], [5.4, 248.0], [5.5, 248.0], [5.6, 248.0], [5.7, 249.0], [5.8, 249.0], [5.9, 250.0], [6.0, 250.0], [6.1, 251.0], [6.2, 251.0], [6.3, 251.0], [6.4, 252.0], [6.5, 252.0], [6.6, 253.0], [6.7, 254.0], [6.8, 255.0], [6.9, 256.0], [7.0, 256.0], [7.1, 257.0], [7.2, 257.0], [7.3, 258.0], [7.4, 259.0], [7.5, 259.0], [7.6, 260.0], [7.7, 261.0], [7.8, 262.0], [7.9, 263.0], [8.0, 263.0], [8.1, 265.0], [8.2, 266.0], [8.3, 267.0], [8.4, 268.0], [8.5, 269.0], [8.6, 270.0], [8.7, 272.0], [8.8, 273.0], [8.9, 274.0], [9.0, 276.0], [9.1, 277.0], [9.2, 279.0], [9.3, 281.0], [9.4, 282.0], [9.5, 284.0], [9.6, 284.0], [9.7, 286.0], [9.8, 286.0], [9.9, 288.0], [10.0, 289.0], [10.1, 290.0], [10.2, 291.0], [10.3, 292.0], [10.4, 293.0], [10.5, 294.0], [10.6, 295.0], [10.7, 296.0], [10.8, 298.0], [10.9, 299.0], [11.0, 300.0], [11.1, 301.0], [11.2, 302.0], [11.3, 303.0], [11.4, 304.0], [11.5, 305.0], [11.6, 306.0], [11.7, 307.0], [11.8, 308.0], [11.9, 309.0], [12.0, 310.0], [12.1, 312.0], [12.2, 313.0], [12.3, 314.0], [12.4, 314.0], [12.5, 315.0], [12.6, 316.0], [12.7, 317.0], [12.8, 318.0], [12.9, 319.0], [13.0, 320.0], [13.1, 321.0], [13.2, 322.0], [13.3, 322.0], [13.4, 324.0], [13.5, 324.0], [13.6, 325.0], [13.7, 326.0], [13.8, 327.0], [13.9, 327.0], [14.0, 329.0], [14.1, 329.0], [14.2, 330.0], [14.3, 331.0], [14.4, 331.0], [14.5, 332.0], [14.6, 332.0], [14.7, 333.0], [14.8, 333.0], [14.9, 333.0], [15.0, 334.0], [15.1, 334.0], [15.2, 335.0], [15.3, 336.0], [15.4, 336.0], [15.5, 337.0], [15.6, 338.0], [15.7, 338.0], [15.8, 339.0], [15.9, 340.0], [16.0, 340.0], [16.1, 340.0], [16.2, 341.0], [16.3, 341.0], [16.4, 342.0], [16.5, 342.0], [16.6, 342.0], [16.7, 343.0], [16.8, 343.0], [16.9, 344.0], [17.0, 345.0], [17.1, 345.0], [17.2, 346.0], [17.3, 347.0], [17.4, 347.0], [17.5, 347.0], [17.6, 348.0], [17.7, 348.0], [17.8, 348.0], [17.9, 349.0], [18.0, 350.0], [18.1, 350.0], [18.2, 351.0], [18.3, 351.0], [18.4, 352.0], [18.5, 352.0], [18.6, 353.0], [18.7, 353.0], [18.8, 354.0], [18.9, 355.0], [19.0, 356.0], [19.1, 357.0], [19.2, 358.0], [19.3, 358.0], [19.4, 358.0], [19.5, 359.0], [19.6, 360.0], [19.7, 360.0], [19.8, 361.0], [19.9, 362.0], [20.0, 362.0], [20.1, 362.0], [20.2, 363.0], [20.3, 363.0], [20.4, 363.0], [20.5, 364.0], [20.6, 366.0], [20.7, 366.0], [20.8, 366.0], [20.9, 367.0], [21.0, 367.0], [21.1, 368.0], [21.2, 370.0], [21.3, 370.0], [21.4, 371.0], [21.5, 372.0], [21.6, 373.0], [21.7, 374.0], [21.8, 375.0], [21.9, 375.0], [22.0, 376.0], [22.1, 377.0], [22.2, 378.0], [22.3, 378.0], [22.4, 379.0], [22.5, 380.0], [22.6, 380.0], [22.7, 381.0], [22.8, 382.0], [22.9, 383.0], [23.0, 384.0], [23.1, 385.0], [23.2, 386.0], [23.3, 387.0], [23.4, 388.0], [23.5, 388.0], [23.6, 389.0], [23.7, 390.0], [23.8, 391.0], [23.9, 391.0], [24.0, 392.0], [24.1, 393.0], [24.2, 394.0], [24.3, 394.0], [24.4, 395.0], [24.5, 395.0], [24.6, 396.0], [24.7, 397.0], [24.8, 398.0], [24.9, 399.0], [25.0, 400.0], [25.1, 402.0], [25.2, 402.0], [25.3, 403.0], [25.4, 404.0], [25.5, 405.0], [25.6, 405.0], [25.7, 406.0], [25.8, 407.0], [25.9, 408.0], [26.0, 410.0], [26.1, 411.0], [26.2, 412.0], [26.3, 412.0], [26.4, 413.0], [26.5, 414.0], [26.6, 415.0], [26.7, 416.0], [26.8, 417.0], [26.9, 419.0], [27.0, 419.0], [27.1, 420.0], [27.2, 421.0], [27.3, 422.0], [27.4, 423.0], [27.5, 424.0], [27.6, 425.0], [27.7, 426.0], [27.8, 426.0], [27.9, 428.0], [28.0, 429.0], [28.1, 430.0], [28.2, 431.0], [28.3, 432.0], [28.4, 433.0], [28.5, 434.0], [28.6, 435.0], [28.7, 436.0], [28.8, 437.0], [28.9, 438.0], [29.0, 439.0], [29.1, 440.0], [29.2, 441.0], [29.3, 441.0], [29.4, 443.0], [29.5, 444.0], [29.6, 447.0], [29.7, 448.0], [29.8, 450.0], [29.9, 450.0], [30.0, 451.0], [30.1, 453.0], [30.2, 455.0], [30.3, 456.0], [30.4, 458.0], [30.5, 459.0], [30.6, 460.0], [30.7, 460.0], [30.8, 462.0], [30.9, 463.0], [31.0, 464.0], [31.1, 465.0], [31.2, 467.0], [31.3, 470.0], [31.4, 471.0], [31.5, 472.0], [31.6, 473.0], [31.7, 474.0], [31.8, 475.0], [31.9, 476.0], [32.0, 478.0], [32.1, 479.0], [32.2, 480.0], [32.3, 481.0], [32.4, 483.0], [32.5, 485.0], [32.6, 485.0], [32.7, 487.0], [32.8, 488.0], [32.9, 488.0], [33.0, 489.0], [33.1, 491.0], [33.2, 493.0], [33.3, 494.0], [33.4, 495.0], [33.5, 496.0], [33.6, 497.0], [33.7, 498.0], [33.8, 499.0], [33.9, 501.0], [34.0, 502.0], [34.1, 503.0], [34.2, 505.0], [34.3, 507.0], [34.4, 509.0], [34.5, 510.0], [34.6, 510.0], [34.7, 511.0], [34.8, 512.0], [34.9, 514.0], [35.0, 514.0], [35.1, 516.0], [35.2, 517.0], [35.3, 518.0], [35.4, 519.0], [35.5, 520.0], [35.6, 522.0], [35.7, 523.0], [35.8, 526.0], [35.9, 527.0], [36.0, 529.0], [36.1, 531.0], [36.2, 532.0], [36.3, 534.0], [36.4, 535.0], [36.5, 536.0], [36.6, 538.0], [36.7, 540.0], [36.8, 541.0], [36.9, 542.0], [37.0, 544.0], [37.1, 545.0], [37.2, 546.0], [37.3, 548.0], [37.4, 550.0], [37.5, 551.0], [37.6, 552.0], [37.7, 555.0], [37.8, 556.0], [37.9, 558.0], [38.0, 559.0], [38.1, 562.0], [38.2, 563.0], [38.3, 565.0], [38.4, 565.0], [38.5, 568.0], [38.6, 570.0], [38.7, 571.0], [38.8, 573.0], [38.9, 575.0], [39.0, 576.0], [39.1, 578.0], [39.2, 580.0], [39.3, 582.0], [39.4, 583.0], [39.5, 584.0], [39.6, 586.0], [39.7, 587.0], [39.8, 588.0], [39.9, 589.0], [40.0, 591.0], [40.1, 593.0], [40.2, 595.0], [40.3, 597.0], [40.4, 598.0], [40.5, 599.0], [40.6, 601.0], [40.7, 602.0], [40.8, 603.0], [40.9, 604.0], [41.0, 606.0], [41.1, 609.0], [41.2, 611.0], [41.3, 612.0], [41.4, 614.0], [41.5, 615.0], [41.6, 617.0], [41.7, 618.0], [41.8, 620.0], [41.9, 622.0], [42.0, 623.0], [42.1, 625.0], [42.2, 626.0], [42.3, 628.0], [42.4, 631.0], [42.5, 633.0], [42.6, 635.0], [42.7, 636.0], [42.8, 638.0], [42.9, 640.0], [43.0, 643.0], [43.1, 644.0], [43.2, 646.0], [43.3, 648.0], [43.4, 652.0], [43.5, 653.0], [43.6, 655.0], [43.7, 658.0], [43.8, 661.0], [43.9, 663.0], [44.0, 663.0], [44.1, 665.0], [44.2, 666.0], [44.3, 668.0], [44.4, 670.0], [44.5, 671.0], [44.6, 672.0], [44.7, 674.0], [44.8, 675.0], [44.9, 677.0], [45.0, 679.0], [45.1, 681.0], [45.2, 682.0], [45.3, 683.0], [45.4, 685.0], [45.5, 687.0], [45.6, 689.0], [45.7, 691.0], [45.8, 692.0], [45.9, 693.0], [46.0, 694.0], [46.1, 696.0], [46.2, 698.0], [46.3, 701.0], [46.4, 702.0], [46.5, 703.0], [46.6, 705.0], [46.7, 708.0], [46.8, 710.0], [46.9, 711.0], [47.0, 712.0], [47.1, 715.0], [47.2, 716.0], [47.3, 717.0], [47.4, 721.0], [47.5, 725.0], [47.6, 726.0], [47.7, 730.0], [47.8, 730.0], [47.9, 732.0], [48.0, 733.0], [48.1, 735.0], [48.2, 737.0], [48.3, 739.0], [48.4, 739.0], [48.5, 742.0], [48.6, 742.0], [48.7, 744.0], [48.8, 745.0], [48.9, 746.0], [49.0, 748.0], [49.1, 751.0], [49.2, 752.0], [49.3, 753.0], [49.4, 756.0], [49.5, 758.0], [49.6, 761.0], [49.7, 762.0], [49.8, 764.0], [49.9, 765.0], [50.0, 766.0], [50.1, 768.0], [50.2, 769.0], [50.3, 770.0], [50.4, 772.0], [50.5, 774.0], [50.6, 776.0], [50.7, 778.0], [50.8, 780.0], [50.9, 782.0], [51.0, 784.0], [51.1, 785.0], [51.2, 787.0], [51.3, 788.0], [51.4, 790.0], [51.5, 792.0], [51.6, 794.0], [51.7, 797.0], [51.8, 799.0], [51.9, 803.0], [52.0, 806.0], [52.1, 808.0], [52.2, 810.0], [52.3, 812.0], [52.4, 815.0], [52.5, 817.0], [52.6, 819.0], [52.7, 822.0], [52.8, 825.0], [52.9, 828.0], [53.0, 831.0], [53.1, 833.0], [53.2, 835.0], [53.3, 836.0], [53.4, 838.0], [53.5, 840.0], [53.6, 842.0], [53.7, 842.0], [53.8, 845.0], [53.9, 847.0], [54.0, 850.0], [54.1, 852.0], [54.2, 856.0], [54.3, 859.0], [54.4, 864.0], [54.5, 866.0], [54.6, 868.0], [54.7, 871.0], [54.8, 873.0], [54.9, 875.0], [55.0, 877.0], [55.1, 880.0], [55.2, 880.0], [55.3, 883.0], [55.4, 886.0], [55.5, 888.0], [55.6, 890.0], [55.7, 891.0], [55.8, 894.0], [55.9, 895.0], [56.0, 899.0], [56.1, 902.0], [56.2, 904.0], [56.3, 908.0], [56.4, 910.0], [56.5, 912.0], [56.6, 916.0], [56.7, 918.0], [56.8, 919.0], [56.9, 923.0], [57.0, 923.0], [57.1, 924.0], [57.2, 926.0], [57.3, 928.0], [57.4, 936.0], [57.5, 938.0], [57.6, 941.0], [57.7, 945.0], [57.8, 946.0], [57.9, 951.0], [58.0, 953.0], [58.1, 955.0], [58.2, 957.0], [58.3, 960.0], [58.4, 968.0], [58.5, 971.0], [58.6, 974.0], [58.7, 977.0], [58.8, 979.0], [58.9, 982.0], [59.0, 986.0], [59.1, 988.0], [59.2, 990.0], [59.3, 992.0], [59.4, 995.0], [59.5, 998.0], [59.6, 1000.0], [59.7, 1001.0], [59.8, 1004.0], [59.9, 1006.0], [60.0, 1011.0], [60.1, 1015.0], [60.2, 1018.0], [60.3, 1023.0], [60.4, 1026.0], [60.5, 1032.0], [60.6, 1034.0], [60.7, 1035.0], [60.8, 1038.0], [60.9, 1042.0], [61.0, 1045.0], [61.1, 1049.0], [61.2, 1053.0], [61.3, 1055.0], [61.4, 1057.0], [61.5, 1059.0], [61.6, 1062.0], [61.7, 1065.0], [61.8, 1067.0], [61.9, 1069.0], [62.0, 1073.0], [62.1, 1075.0], [62.2, 1077.0], [62.3, 1080.0], [62.4, 1083.0], [62.5, 1088.0], [62.6, 1090.0], [62.7, 1093.0], [62.8, 1095.0], [62.9, 1100.0], [63.0, 1102.0], [63.1, 1105.0], [63.2, 1110.0], [63.3, 1114.0], [63.4, 1117.0], [63.5, 1120.0], [63.6, 1123.0], [63.7, 1126.0], [63.8, 1129.0], [63.9, 1133.0], [64.0, 1136.0], [64.1, 1141.0], [64.2, 1144.0], [64.3, 1148.0], [64.4, 1149.0], [64.5, 1153.0], [64.6, 1156.0], [64.7, 1162.0], [64.8, 1166.0], [64.9, 1168.0], [65.0, 1171.0], [65.1, 1173.0], [65.2, 1178.0], [65.3, 1181.0], [65.4, 1185.0], [65.5, 1187.0], [65.6, 1190.0], [65.7, 1195.0], [65.8, 1201.0], [65.9, 1202.0], [66.0, 1205.0], [66.1, 1209.0], [66.2, 1213.0], [66.3, 1217.0], [66.4, 1221.0], [66.5, 1225.0], [66.6, 1229.0], [66.7, 1231.0], [66.8, 1233.0], [66.9, 1235.0], [67.0, 1238.0], [67.1, 1240.0], [67.2, 1241.0], [67.3, 1244.0], [67.4, 1247.0], [67.5, 1251.0], [67.6, 1255.0], [67.7, 1260.0], [67.8, 1264.0], [67.9, 1267.0], [68.0, 1272.0], [68.1, 1275.0], [68.2, 1280.0], [68.3, 1283.0], [68.4, 1290.0], [68.5, 1294.0], [68.6, 1299.0], [68.7, 1301.0], [68.8, 1303.0], [68.9, 1307.0], [69.0, 1310.0], [69.1, 1312.0], [69.2, 1316.0], [69.3, 1320.0], [69.4, 1323.0], [69.5, 1327.0], [69.6, 1333.0], [69.7, 1337.0], [69.8, 1340.0], [69.9, 1343.0], [70.0, 1346.0], [70.1, 1349.0], [70.2, 1353.0], [70.3, 1356.0], [70.4, 1363.0], [70.5, 1368.0], [70.6, 1375.0], [70.7, 1382.0], [70.8, 1383.0], [70.9, 1388.0], [71.0, 1389.0], [71.1, 1392.0], [71.2, 1397.0], [71.3, 1401.0], [71.4, 1410.0], [71.5, 1414.0], [71.6, 1420.0], [71.7, 1422.0], [71.8, 1426.0], [71.9, 1433.0], [72.0, 1436.0], [72.1, 1438.0], [72.2, 1441.0], [72.3, 1444.0], [72.4, 1447.0], [72.5, 1452.0], [72.6, 1457.0], [72.7, 1463.0], [72.8, 1468.0], [72.9, 1477.0], [73.0, 1480.0], [73.1, 1483.0], [73.2, 1491.0], [73.3, 1497.0], [73.4, 1503.0], [73.5, 1509.0], [73.6, 1514.0], [73.7, 1524.0], [73.8, 1528.0], [73.9, 1534.0], [74.0, 1538.0], [74.1, 1543.0], [74.2, 1547.0], [74.3, 1550.0], [74.4, 1557.0], [74.5, 1562.0], [74.6, 1564.0], [74.7, 1571.0], [74.8, 1576.0], [74.9, 1581.0], [75.0, 1587.0], [75.1, 1590.0], [75.2, 1594.0], [75.3, 1602.0], [75.4, 1608.0], [75.5, 1615.0], [75.6, 1620.0], [75.7, 1626.0], [75.8, 1633.0], [75.9, 1637.0], [76.0, 1639.0], [76.1, 1644.0], [76.2, 1647.0], [76.3, 1654.0], [76.4, 1660.0], [76.5, 1664.0], [76.6, 1671.0], [76.7, 1675.0], [76.8, 1678.0], [76.9, 1682.0], [77.0, 1687.0], [77.1, 1696.0], [77.2, 1700.0], [77.3, 1709.0], [77.4, 1713.0], [77.5, 1725.0], [77.6, 1729.0], [77.7, 1738.0], [77.8, 1741.0], [77.9, 1744.0], [78.0, 1751.0], [78.1, 1760.0], [78.2, 1767.0], [78.3, 1775.0], [78.4, 1782.0], [78.5, 1786.0], [78.6, 1795.0], [78.7, 1800.0], [78.8, 1805.0], [78.9, 1817.0], [79.0, 1821.0], [79.1, 1826.0], [79.2, 1830.0], [79.3, 1836.0], [79.4, 1840.0], [79.5, 1849.0], [79.6, 1858.0], [79.7, 1864.0], [79.8, 1870.0], [79.9, 1875.0], [80.0, 1884.0], [80.1, 1890.0], [80.2, 1899.0], [80.3, 1902.0], [80.4, 1906.0], [80.5, 1910.0], [80.6, 1916.0], [80.7, 1921.0], [80.8, 1928.0], [80.9, 1932.0], [81.0, 1945.0], [81.1, 1952.0], [81.2, 1955.0], [81.3, 1960.0], [81.4, 1967.0], [81.5, 1972.0], [81.6, 1983.0], [81.7, 1993.0], [81.8, 1998.0], [81.9, 2002.0], [82.0, 2009.0], [82.1, 2017.0], [82.2, 2032.0], [82.3, 2038.0], [82.4, 2046.0], [82.5, 2055.0], [82.6, 2064.0], [82.7, 2073.0], [82.8, 2084.0], [82.9, 2096.0], [83.0, 2107.0], [83.1, 2118.0], [83.2, 2128.0], [83.3, 2140.0], [83.4, 2146.0], [83.5, 2149.0], [83.6, 2157.0], [83.7, 2164.0], [83.8, 2170.0], [83.9, 2175.0], [84.0, 2183.0], [84.1, 2195.0], [84.2, 2208.0], [84.3, 2222.0], [84.4, 2228.0], [84.5, 2244.0], [84.6, 2249.0], [84.7, 2261.0], [84.8, 2273.0], [84.9, 2304.0], [85.0, 2310.0], [85.1, 2323.0], [85.2, 2332.0], [85.3, 2348.0], [85.4, 2357.0], [85.5, 2363.0], [85.6, 2387.0], [85.7, 2402.0], [85.8, 2427.0], [85.9, 2436.0], [86.0, 2446.0], [86.1, 2452.0], [86.2, 2470.0], [86.3, 2484.0], [86.4, 2503.0], [86.5, 2521.0], [86.6, 2531.0], [86.7, 2540.0], [86.8, 2557.0], [86.9, 2575.0], [87.0, 2592.0], [87.1, 2597.0], [87.2, 2613.0], [87.3, 2635.0], [87.4, 2667.0], [87.5, 2682.0], [87.6, 2696.0], [87.7, 2707.0], [87.8, 2730.0], [87.9, 2746.0], [88.0, 2761.0], [88.1, 2771.0], [88.2, 2782.0], [88.3, 2790.0], [88.4, 2799.0], [88.5, 2819.0], [88.6, 2859.0], [88.7, 2889.0], [88.8, 2916.0], [88.9, 2939.0], [89.0, 2954.0], [89.1, 2975.0], [89.2, 2990.0], [89.3, 3018.0], [89.4, 3028.0], [89.5, 3067.0], [89.6, 3085.0], [89.7, 3106.0], [89.8, 3116.0], [89.9, 3139.0], [90.0, 3169.0], [90.1, 3186.0], [90.2, 3207.0], [90.3, 3245.0], [90.4, 3277.0], [90.5, 3320.0], [90.6, 3373.0], [90.7, 3399.0], [90.8, 3412.0], [90.9, 3444.0], [91.0, 3469.0], [91.1, 3525.0], [91.2, 3568.0], [91.3, 3621.0], [91.4, 3627.0], [91.5, 3649.0], [91.6, 3690.0], [91.7, 3722.0], [91.8, 3754.0], [91.9, 3824.0], [92.0, 3880.0], [92.1, 3930.0], [92.2, 3970.0], [92.3, 4046.0], [92.4, 4114.0], [92.5, 4165.0], [92.6, 4198.0], [92.7, 4253.0], [92.8, 4308.0], [92.9, 4390.0], [93.0, 4442.0], [93.1, 4499.0], [93.2, 4586.0], [93.3, 4665.0], [93.4, 4723.0], [93.5, 4806.0], [93.6, 4860.0], [93.7, 4993.0], [93.8, 5104.0], [93.9, 5271.0], [94.0, 5497.0], [94.1, 5643.0], [94.2, 5767.0], [94.3, 5909.0], [94.4, 6253.0], [94.5, 6715.0], [94.6, 6970.0], [94.7, 7384.0], [94.8, 7786.0], [94.9, 8999.0], [95.0, 10361.0], [95.1, 22132.0], [95.2, 26579.0], [95.3, 50737.0], [95.4, 60603.0], [95.5, 64848.0], [95.6, 67206.0], [95.7, 69394.0], [95.8, 70885.0], [95.9, 71517.0], [96.0, 72095.0], [96.1, 72566.0], [96.2, 73012.0], [96.3, 73308.0], [96.4, 73610.0], [96.5, 73663.0], [96.6, 73909.0], [96.7, 74100.0], [96.8, 74331.0], [96.9, 74622.0], [97.0, 74698.0], [97.1, 74801.0], [97.2, 74922.0], [97.3, 75117.0], [97.4, 75299.0], [97.5, 75512.0], [97.6, 75686.0], [97.7, 75905.0], [97.8, 76436.0], [97.9, 77091.0], [98.0, 77508.0], [98.1, 78332.0], [98.2, 82454.0], [98.3, 87574.0], [98.4, 89215.0], [98.5, 92079.0], [98.6, 93903.0], [98.7, 118708.0], [98.8, 142866.0], [98.9, 143506.0], [99.0, 145044.0], [99.1, 146734.0], [99.2, 148521.0], [99.3, 151832.0], [99.4, 186282.0], [99.5, 210512.0], [99.6, 214375.0], [99.7, 218141.0], [99.8, 222706.0], [99.9, 262183.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 727.0, "series": [{"data": [[287300.0, 1.0], [144800.0, 1.0], [148000.0, 1.0], [157600.0, 1.0], [221600.0, 1.0], [139300.0, 1.0], [145700.0, 1.0], [203300.0, 1.0], [214500.0, 1.0], [232100.0, 1.0], [68300.0, 1.0], [73100.0, 2.0], [71500.0, 1.0], [70700.0, 1.0], [74700.0, 4.0], [73900.0, 2.0], [76300.0, 1.0], [77100.0, 1.0], [75500.0, 2.0], [78700.0, 1.0], [89100.0, 1.0], [87500.0, 1.0], [93900.0, 1.0], [118700.0, 1.0], [117900.0, 1.0], [130700.0, 1.0], [145000.0, 1.0], [287700.0, 1.0], [143400.0, 1.0], [151400.0, 1.0], [213800.0, 1.0], [100.0, 3.0], [131500.0, 1.0], [153900.0, 1.0], [157100.0, 1.0], [41700.0, 1.0], [200.0, 563.0], [222700.0, 1.0], [55300.0, 1.0], [60900.0, 1.0], [64500.0, 1.0], [65300.0, 1.0], [66600.0, 1.0], [73000.0, 2.0], [70600.0, 1.0], [74600.0, 6.0], [300.0, 727.0], [77000.0, 2.0], [73800.0, 1.0], [77800.0, 1.0], [75400.0, 1.0], [87400.0, 1.0], [89000.0, 1.0], [400.0, 462.0], [500.0, 347.0], [146800.0, 1.0], [600.0, 297.0], [700.0, 292.0], [193200.0, 1.0], [800.0, 217.0], [900.0, 185.0], [1000.0, 171.0], [1100.0, 150.0], [1200.0, 149.0], [1300.0, 135.0], [1400.0, 109.0], [1500.0, 100.0], [1600.0, 99.0], [1700.0, 78.0], [1800.0, 79.0], [1900.0, 84.0], [2000.0, 59.0], [2100.0, 59.0], [2300.0, 43.0], [2200.0, 39.0], [286700.0, 1.0], [144500.0, 1.0], [2400.0, 36.0], [2500.0, 39.0], [2600.0, 27.0], [2700.0, 39.0], [2800.0, 17.0], [2900.0, 26.0], [3000.0, 21.0], [3100.0, 28.0], [3200.0, 15.0], [3300.0, 13.0], [3400.0, 16.0], [213300.0, 1.0], [218100.0, 1.0], [3500.0, 12.0], [3600.0, 20.0], [3700.0, 10.0], [3800.0, 10.0], [3900.0, 11.0], [4000.0, 7.0], [4200.0, 9.0], [4100.0, 13.0], [4300.0, 6.0], [4400.0, 10.0], [4500.0, 7.0], [4600.0, 4.0], [73700.0, 3.0], [72900.0, 1.0], [72100.0, 1.0], [4800.0, 8.0], [4700.0, 9.0], [75300.0, 3.0], [76100.0, 1.0], [5000.0, 4.0], [5100.0, 3.0], [4900.0, 4.0], [5200.0, 3.0], [5300.0, 2.0], [5600.0, 4.0], [5500.0, 3.0], [5400.0, 3.0], [5800.0, 4.0], [5700.0, 3.0], [92900.0, 1.0], [6100.0, 3.0], [6000.0, 1.0], [5900.0, 2.0], [6200.0, 1.0], [6300.0, 1.0], [6400.0, 2.0], [6500.0, 1.0], [6900.0, 4.0], [6800.0, 3.0], [6700.0, 1.0], [7000.0, 1.0], [7300.0, 2.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 3.0], [8000.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [9000.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [147000.0, 1.0], [143800.0, 1.0], [9300.0, 1.0], [151800.0, 1.0], [9400.0, 1.0], [10100.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [11500.0, 1.0], [12300.0, 1.0], [217400.0, 1.0], [16800.0, 1.0], [27000.0, 1.0], [28400.0, 1.0], [29000.0, 1.0], [143100.0, 1.0], [144700.0, 1.0], [149500.0, 1.0], [199100.0, 1.0], [231100.0, 1.0], [63200.0, 1.0], [64000.0, 1.0], [64800.0, 1.0], [65600.0, 2.0], [67200.0, 1.0], [73600.0, 7.0], [72800.0, 1.0], [72000.0, 1.0], [70400.0, 1.0], [71200.0, 1.0], [74400.0, 3.0], [75200.0, 4.0], [76800.0, 1.0], [78400.0, 1.0], [84000.0, 1.0], [82400.0, 1.0], [88800.0, 1.0], [92000.0, 1.0], [145600.0, 1.0], [211200.0, 1.0], [219200.0, 1.0], [233600.0, 1.0], [146500.0, 1.0], [143300.0, 2.0], [148100.0, 1.0], [210500.0, 1.0], [216900.0, 1.0], [72700.0, 2.0], [71900.0, 2.0], [73500.0, 2.0], [71100.0, 1.0], [74300.0, 4.0], [75900.0, 4.0], [75100.0, 3.0], [77500.0, 1.0], [78300.0, 1.0], [90300.0, 2.0], [98300.0, 1.0], [146700.0, 1.0], [143500.0, 1.0], [50700.0, 1.0], [215500.0, 1.0], [56300.0, 1.0], [59900.0, 1.0], [68600.0, 1.0], [69400.0, 2.0], [71000.0, 1.0], [71800.0, 2.0], [73400.0, 1.0], [74200.0, 1.0], [75000.0, 2.0], [76600.0, 1.0], [75800.0, 1.0], [77400.0, 1.0], [78200.0, 1.0], [82200.0, 1.0], [87800.0, 1.0], [94200.0, 1.0], [91800.0, 1.0], [142800.0, 1.0], [152400.0, 1.0], [187600.0, 1.0], [197200.0, 1.0], [148500.0, 3.0], [218900.0, 1.0], [262100.0, 1.0], [69300.0, 1.0], [70900.0, 1.0], [72500.0, 2.0], [287400.0, 1.0], [73300.0, 2.0], [74100.0, 3.0], [74900.0, 4.0], [76500.0, 1.0], [77300.0, 1.0], [75700.0, 2.0], [78900.0, 1.0], [78100.0, 1.0], [92500.0, 1.0], [102100.0, 1.0], [146200.0, 1.0], [144600.0, 1.0], [186200.0, 1.0], [211800.0, 1.0], [232600.0, 1.0], [286000.0, 1.0], [22100.0, 1.0], [24900.0, 1.0], [25500.0, 1.0], [25100.0, 1.0], [25700.0, 1.0], [26500.0, 1.0], [134300.0, 1.0], [43800.0, 1.0], [220700.0, 1.0], [214300.0, 1.0], [56200.0, 1.0], [60600.0, 1.0], [67600.0, 1.0], [68400.0, 1.0], [72400.0, 2.0], [73200.0, 1.0], [70800.0, 1.0], [74800.0, 4.0], [74000.0, 3.0], [75600.0, 4.0], [77200.0, 1.0], [76400.0, 2.0], [78000.0, 1.0], [85200.0, 1.0], [86000.0, 1.0], [89200.0, 1.0], [90800.0, 2.0], [92400.0, 1.0], [93200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 287700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1383.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2049.0, "series": [{"data": [[0.0, 1758.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2049.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1383.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.25, "minX": 1.60284624E12, "maxY": 10.0, "series": [{"data": [[1.60284708E12, 10.0], [1.6028493E12, 10.0], [1.6028487E12, 10.0], [1.60284768E12, 10.0], [1.6028475E12, 10.0], [1.60284648E12, 10.0], [1.6028481E12, 10.0], [1.6028463E12, 10.0], [1.60284852E12, 10.0], [1.60284912E12, 10.0], [1.6028469E12, 10.0], [1.60284732E12, 10.0], [1.60284894E12, 10.0], [1.60284792E12, 10.0], [1.60284804E12, 10.0], [1.60284642E12, 10.0], [1.60284864E12, 10.0], [1.60284684E12, 10.0], [1.60284846E12, 10.0], [1.60284744E12, 10.0], [1.60284906E12, 10.0], [1.60284726E12, 10.0], [1.60284624E12, 10.0], [1.60284786E12, 10.0], [1.60284828E12, 10.0], [1.60284666E12, 10.0], [1.60284888E12, 10.0], [1.60284678E12, 10.0], [1.602849E12, 10.0], [1.60284738E12, 10.0], [1.6028478E12, 10.0], [1.6028484E12, 10.0], [1.60284942E12, 3.25], [1.6028466E12, 10.0], [1.60284822E12, 10.0], [1.6028472E12, 10.0], [1.60284882E12, 10.0], [1.60284702E12, 10.0], [1.60284762E12, 10.0], [1.60284924E12, 10.0], [1.60284774E12, 10.0], [1.60284672E12, 10.0], [1.60284834E12, 10.0], [1.60284876E12, 10.0], [1.60284936E12, 9.910828025477706], [1.60284714E12, 10.0], [1.60284756E12, 10.0], [1.60284816E12, 10.0], [1.60284636E12, 10.0], [1.60284798E12, 10.0], [1.60284696E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284942E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 306.0, "minX": 1.0, "maxY": 70885.0, "series": [{"data": [[8.0, 599.0], [4.0, 70837.0], [1.0, 70885.0], [10.0, 6047.264762639904], [5.0, 3107.0], [6.0, 2085.0], [7.0, 306.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992100192678226, 6093.72235067437]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.533333333333333, "minX": 1.60284624E12, "maxY": 2429875.25, "series": [{"data": [[1.60284708E12, 46816.55], [1.6028493E12, 1352565.4], [1.6028487E12, 92942.38333333333], [1.60284768E12, 50268.3], [1.6028475E12, 6823.266666666666], [1.60284648E12, 2177763.6333333333], [1.6028481E12, 2364399.716666667], [1.6028463E12, 139356.08333333334], [1.60284852E12, 878.5666666666667], [1.60284912E12, 143.6], [1.6028469E12, 287.31666666666666], [1.60284732E12, 29157.666666666668], [1.60284894E12, 30746.75], [1.60284792E12, 2429875.25], [1.60284804E12, 1234583.8166666667], [1.60284642E12, 2426663.4833333334], [1.60284864E12, 787.9166666666666], [1.60284684E12, 26190.283333333333], [1.60284846E12, 215.46666666666667], [1.60284744E12, 46466.5], [1.60284906E12, 491588.68333333335], [1.60284726E12, 143.66666666666666], [1.60284624E12, 2076715.5], [1.60284786E12, 1533820.6166666667], [1.60284828E12, 165415.41666666666], [1.60284666E12, 7068.75], [1.60284888E12, 35958.2], [1.60284678E12, 143.6], [1.602849E12, 53285.51666666667], [1.60284738E12, 2465.366666666667], [1.6028478E12, 314363.8], [1.6028484E12, 21665.25], [1.60284942E12, 6084.416666666667], [1.6028466E12, 265726.45], [1.60284822E12, 39024.9], [1.6028472E12, 767.2833333333333], [1.60284882E12, 31000.333333333332], [1.60284702E12, 30009.916666666668], [1.60284762E12, 420014.5], [1.60284924E12, 340933.4166666667], [1.60284774E12, 12108.316666666668], [1.60284672E12, 287.3333333333333], [1.60284834E12, 29397.566666666666], [1.60284876E12, 71.8], [1.60284936E12, 731454.1], [1.60284714E12, 13264.983333333334], [1.60284756E12, 99476.71666666666], [1.60284816E12, 2170498.0833333335], [1.60284636E12, 1099323.1], [1.60284798E12, 650678.6833333333], [1.60284696E12, 1812.9666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60284708E12, 137.1], [1.6028493E12, 2223.1], [1.6028487E12, 254.65], [1.60284768E12, 54.95], [1.6028475E12, 7.983333333333333], [1.60284648E12, 3431.5], [1.6028481E12, 4486.2], [1.6028463E12, 214.46666666666667], [1.60284852E12, 47.61666666666667], [1.60284912E12, 15.833333333333334], [1.6028469E12, 31.733333333333334], [1.60284732E12, 45.583333333333336], [1.60284894E12, 180.15], [1.60284792E12, 3290.6], [1.60284804E12, 2036.3666666666666], [1.60284642E12, 4373.0], [1.60284864E12, 78.51666666666667], [1.60284684E12, 63.233333333333334], [1.60284846E12, 23.8], [1.60284744E12, 141.21666666666667], [1.60284906E12, 796.5], [1.60284726E12, 15.066666666666666], [1.60284624E12, 2871.266666666667], [1.60284786E12, 2454.15], [1.60284828E12, 268.71666666666664], [1.60284666E12, 39.75], [1.60284888E12, 47.0], [1.60284678E12, 15.866666666666667], [1.602849E12, 127.13333333333334], [1.60284738E12, 100.86666666666666], [1.6028478E12, 987.2], [1.6028484E12, 39.4], [1.60284942E12, 31.733333333333334], [1.6028466E12, 395.0], [1.60284822E12, 86.81666666666666], [1.6028472E12, 23.433333333333334], [1.60284882E12, 77.61666666666666], [1.60284702E12, 69.7], [1.60284762E12, 689.9833333333333], [1.60284924E12, 1113.0166666666667], [1.60284774E12, 23.8], [1.60284672E12, 31.733333333333334], [1.60284834E12, 47.68333333333333], [1.60284876E12, 7.533333333333333], [1.60284936E12, 1216.25], [1.60284714E12, 54.083333333333336], [1.60284756E12, 182.06666666666666], [1.60284816E12, 3675.5333333333333], [1.60284636E12, 1942.9333333333334], [1.60284798E12, 1156.6333333333334], [1.60284696E12, 62.266666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284942E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 966.0, "minX": 1.60284624E12, "maxY": 248935.33333333334, "series": [{"data": [[1.60284708E12, 40303.77777777777], [1.6028493E12, 3600.607017543856], [1.6028487E12, 32011.818181818187], [1.60284768E12, 66451.42857142857], [1.6028475E12, 966.0], [1.60284648E12, 1032.2272727272734], [1.6028481E12, 1034.4367622259692], [1.6028463E12, 1144.8000000000002], [1.60284852E12, 248935.33333333334], [1.60284912E12, 74264.5], [1.6028469E12, 93933.5], [1.60284732E12, 164090.83333333334], [1.60284894E12, 61731.95652173915], [1.60284792E12, 1408.200460829493], [1.60284804E12, 3775.0666666666657], [1.60284642E12, 1066.1617391304342], [1.60284864E12, 90297.5], [1.60284684E12, 164853.37499999997], [1.60284846E12, 97028.33333333333], [1.60284744E12, 37088.33333333333], [1.60284906E12, 10881.306930693068], [1.60284726E12, 75337.5], [1.60284624E12, 1351.0620155038757], [1.60284786E12, 3363.5174603174587], [1.60284828E12, 7822.264705882353], [1.60284666E12, 77456.6], [1.60284888E12, 16711.666666666664], [1.60284678E12, 73257.0], [1.602849E12, 28683.75], [1.60284738E12, 87879.53846153845], [1.6028478E12, 6140.598425196853], [1.6028484E12, 60559.6], [1.60284942E12, 70849.0], [1.6028466E12, 19053.199999999993], [1.60284822E12, 47265.36363636364], [1.6028472E12, 66841.0], [1.60284882E12, 49409.900000000016], [1.60284702E12, 132285.55555555556], [1.60284762E12, 17530.758620689663], [1.60284924E12, 9940.503496503485], [1.60284774E12, 120241.66666666667], [1.60284672E12, 92750.5], [1.60284834E12, 74993.0], [1.60284876E12, 75277.0], [1.60284936E12, 1437.5222929936303], [1.60284714E12, 43938.57142857143], [1.60284756E12, 13643.0], [1.60284816E12, 973.4585987261145], [1.60284636E12, 4514.500000000001], [1.60284798E12, 1027.4177215189873], [1.60284696E12, 64952.125]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60284942E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 920.622080679406, "minX": 1.60284624E12, "maxY": 248935.33333333334, "series": [{"data": [[1.60284708E12, 40269.49999999999], [1.6028493E12, 3546.940350877194], [1.6028487E12, 31998.303030303025], [1.60284768E12, 66424.42857142858], [1.6028475E12, 964.0], [1.60284648E12, 979.8931818181819], [1.6028481E12, 992.4755480607092], [1.6028463E12, 1142.8666666666663], [1.60284852E12, 248935.33333333334], [1.60284912E12, 74264.5], [1.6028469E12, 93933.5], [1.60284732E12, 164088.5], [1.60284894E12, 61716.78260869565], [1.60284792E12, 1364.1336405529967], [1.60284804E12, 3739.1148148148122], [1.60284642E12, 1022.725217391304], [1.60284864E12, 90297.5], [1.60284684E12, 164827.0], [1.60284846E12, 97028.33333333333], [1.60284744E12, 37087.277777777774], [1.60284906E12, 10838.86138613862], [1.60284726E12, 75337.5], [1.60284624E12, 1292.9173126615], [1.60284786E12, 3318.292063492065], [1.60284828E12, 7760.382352941179], [1.60284666E12, 77456.0], [1.60284888E12, 16710.166666666664], [1.60284678E12, 73256.5], [1.602849E12, 28682.8125], [1.60284738E12, 87879.46153846152], [1.6028478E12, 6110.685039370082], [1.6028484E12, 60558.4], [1.60284942E12, 70848.25], [1.6028466E12, 19017.700000000004], [1.60284822E12, 47232.818181818184], [1.6028472E12, 66840.33333333333], [1.60284882E12, 49409.1], [1.60284702E12, 132263.44444444444], [1.60284762E12, 17482.425287356327], [1.60284924E12, 9926.79020979021], [1.60284774E12, 120239.66666666667], [1.60284672E12, 92750.5], [1.60284834E12, 74992.33333333333], [1.60284876E12, 75277.0], [1.60284936E12, 1412.101910828025], [1.60284714E12, 43937.428571428565], [1.60284756E12, 13633.26086956522], [1.60284816E12, 920.622080679406], [1.60284636E12, 4490.171875000002], [1.60284798E12, 981.7594936708863], [1.60284696E12, 64951.875]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60284942E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.33333333333333337, "minX": 1.60284624E12, "maxY": 2.0, "series": [{"data": [[1.60284708E12, 0.6666666666666667], [1.6028493E12, 0.6105263157894734], [1.6028487E12, 0.6666666666666665], [1.60284768E12, 0.8571428571428572], [1.6028475E12, 2.0], [1.60284648E12, 0.8022727272727274], [1.6028481E12, 0.5699831365935922], [1.6028463E12, 0.9333333333333332], [1.60284852E12, 0.33333333333333337], [1.60284912E12, 1.0], [1.6028469E12, 0.5], [1.60284732E12, 1.3333333333333333], [1.60284894E12, 0.5217391304347826], [1.60284792E12, 0.5668202764976963], [1.60284804E12, 0.6074074074074073], [1.60284642E12, 0.7843478260869565], [1.60284864E12, 0.6], [1.60284684E12, 0.625], [1.60284846E12, 0.33333333333333337], [1.60284744E12, 0.7777777777777778], [1.60284906E12, 0.594059405940594], [1.60284726E12, 1.0], [1.60284624E12, 1.2093023255813962], [1.60284786E12, 0.5873015873015879], [1.60284828E12, 0.5588235294117646], [1.60284666E12, 0.4], [1.60284888E12, 0.5], [1.60284678E12, 0.5], [1.602849E12, 0.75], [1.60284738E12, 1.4615384615384615], [1.6028478E12, 0.4803149606299213], [1.6028484E12, 1.8], [1.60284942E12, 0.5], [1.6028466E12, 0.68], [1.60284822E12, 0.6363636363636364], [1.6028472E12, 1.0], [1.60284882E12, 1.0], [1.60284702E12, 0.7777777777777778], [1.60284762E12, 0.574712643678161], [1.60284924E12, 0.5174825174825174], [1.60284774E12, 1.0], [1.60284672E12, 1.25], [1.60284834E12, 0.6666666666666666], [1.60284876E12, 1.0], [1.60284936E12, 0.554140127388535], [1.60284714E12, 0.7142857142857143], [1.60284756E12, 0.8695652173913042], [1.60284816E12, 0.5414012738853503], [1.60284636E12, 0.9296875000000004], [1.60284798E12, 0.5696202531645571], [1.60284696E12, 0.75]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60284942E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 194.0, "minX": 1.60284624E12, "maxY": 287768.0, "series": [{"data": [[1.60284708E12, 145751.0], [1.6028493E12, 73630.0], [1.6028487E12, 217496.0], [1.60284768E12, 78744.0], [1.6028475E12, 966.0], [1.60284648E12, 6412.0], [1.6028481E12, 5492.0], [1.6028463E12, 6895.0], [1.60284852E12, 287768.0], [1.60284912E12, 74429.0], [1.6028469E12, 145044.0], [1.60284732E12, 214533.0], [1.60284894E12, 221655.0], [1.60284792E12, 9405.0], [1.60284804E12, 77045.0], [1.60284642E12, 8190.0], [1.60284864E12, 215528.0], [1.60284684E12, 233608.0], [1.60284846E12, 146214.0], [1.60284744E12, 153994.0], [1.60284906E12, 147020.0], [1.60284726E12, 75915.0], [1.60284624E12, 12301.0], [1.60284786E12, 75600.0], [1.60284828E12, 78125.0], [1.60284666E12, 90387.0], [1.60284888E12, 75247.0], [1.60284678E12, 74049.0], [1.602849E12, 76175.0], [1.60284738E12, 287309.0], [1.6028478E12, 151832.0], [1.6028484E12, 76848.0], [1.60284942E12, 71862.0], [1.6028466E12, 92970.0], [1.60284822E12, 75180.0], [1.6028472E12, 75686.0], [1.60284882E12, 143108.0], [1.60284702E12, 222706.0], [1.60284762E12, 216911.0], [1.60284924E12, 148589.0], [1.60284774E12, 146734.0], [1.60284672E12, 148521.0], [1.60284834E12, 75563.0], [1.60284876E12, 75277.0], [1.60284936E12, 6715.0], [1.60284714E12, 102193.0], [1.60284756E12, 76595.0], [1.60284816E12, 4897.0], [1.60284636E12, 94220.0], [1.60284798E12, 6498.0], [1.60284696E12, 148007.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60284708E12, 221.0], [1.6028493E12, 209.5739999318123], [1.6028487E12, 233.0], [1.60284768E12, 799.0], [1.6028475E12, 966.0], [1.60284648E12, 205.9379997897148], [1.6028481E12, 216.69199971675872], [1.6028463E12, 249.0], [1.60284852E12, 134377.0], [1.60284912E12, 74100.0], [1.6028469E12, 74652.0], [1.60284732E12, 1364.0], [1.60284894E12, 308.0], [1.60284792E12, 240.91499989628792], [1.60284804E12, 222.6339996123314], [1.60284642E12, 226.0], [1.60284864E12, 319.0], [1.60284684E12, 73641.0], [1.60284846E12, 71140.0], [1.60284744E12, 293.0], [1.60284906E12, 225.0], [1.60284726E12, 74760.0], [1.60284624E12, 232.0], [1.60284786E12, 204.0], [1.60284828E12, 343.0], [1.60284666E12, 73146.0], [1.60284888E12, 311.0], [1.60284678E12, 72465.0], [1.602849E12, 346.0], [1.60284738E12, 346.0], [1.6028478E12, 225.15199996948243], [1.6028484E12, 1437.0], [1.60284942E12, 69449.0], [1.6028466E12, 291.0], [1.60284822E12, 321.0], [1.6028472E12, 50737.0], [1.60284882E12, 432.0], [1.60284702E12, 245.0], [1.60284762E12, 240.0], [1.60284924E12, 200.51199924468995], [1.60284774E12, 68336.0], [1.60284672E12, 73012.0], [1.60284834E12, 73909.0], [1.60284876E12, 75277.0], [1.60284936E12, 304.2659998869896], [1.60284714E12, 398.0], [1.60284756E12, 288.0], [1.60284816E12, 217.24799988746642], [1.60284636E12, 232.56499969363213], [1.60284798E12, 229.29299988627434], [1.60284696E12, 353.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60284708E12, 221.0], [1.6028493E12, 209.8314000272751], [1.6028487E12, 233.0], [1.60284768E12, 799.0], [1.6028475E12, 966.0], [1.60284648E12, 206.36590004205704], [1.6028481E12, 217.7612001132965], [1.6028463E12, 249.0], [1.60284852E12, 134377.0], [1.60284912E12, 74100.0], [1.6028469E12, 74652.0], [1.60284732E12, 1364.0], [1.60284894E12, 308.0], [1.60284792E12, 241.30650004148484], [1.60284804E12, 224.09740015506745], [1.60284642E12, 226.0], [1.60284864E12, 319.0], [1.60284684E12, 73641.0], [1.60284846E12, 71140.0], [1.60284744E12, 293.0], [1.60284906E12, 225.05880005836488], [1.60284726E12, 74760.0], [1.60284624E12, 232.0], [1.60284786E12, 204.2568000602722], [1.60284828E12, 343.0], [1.60284666E12, 73146.0], [1.60284888E12, 311.0], [1.60284678E12, 72465.0], [1.602849E12, 346.0], [1.60284738E12, 346.0], [1.6028478E12, 225.26720001220704], [1.6028484E12, 1437.0], [1.60284942E12, 69449.0], [1.6028466E12, 291.0], [1.60284822E12, 321.0], [1.6028472E12, 50737.0], [1.60284882E12, 432.0], [1.60284702E12, 245.0], [1.60284762E12, 240.0], [1.60284924E12, 203.36320030212403], [1.60284774E12, 68336.0], [1.60284672E12, 73012.0], [1.60284834E12, 73909.0], [1.60284876E12, 75277.0], [1.60284936E12, 304.6926000452042], [1.60284714E12, 398.0], [1.60284756E12, 288.0], [1.60284816E12, 217.67280004501342], [1.60284636E12, 233.72150012254716], [1.60284798E12, 229.72230004549027], [1.60284696E12, 353.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60284708E12, 221.0], [1.6028493E12, 209.71699996590615], [1.6028487E12, 233.0], [1.60284768E12, 799.0], [1.6028475E12, 966.0], [1.60284648E12, 206.18949994742871], [1.6028481E12, 217.28599985837937], [1.6028463E12, 249.0], [1.60284852E12, 134377.0], [1.60284912E12, 74100.0], [1.6028469E12, 74652.0], [1.60284732E12, 1364.0], [1.60284894E12, 308.0], [1.60284792E12, 241.13249994814396], [1.60284804E12, 223.4469998061657], [1.60284642E12, 226.0], [1.60284864E12, 319.0], [1.60284684E12, 73641.0], [1.60284846E12, 71140.0], [1.60284744E12, 293.0], [1.60284906E12, 225.0], [1.60284726E12, 74760.0], [1.60284624E12, 232.0], [1.60284786E12, 204.00399992465972], [1.60284828E12, 343.0], [1.60284666E12, 73146.0], [1.60284888E12, 311.0], [1.60284678E12, 72465.0], [1.602849E12, 346.0], [1.60284738E12, 346.0], [1.6028478E12, 225.21599998474122], [1.6028484E12, 1437.0], [1.60284942E12, 69449.0], [1.6028466E12, 291.0], [1.60284822E12, 321.0], [1.6028472E12, 50737.0], [1.60284882E12, 432.0], [1.60284702E12, 245.0], [1.60284762E12, 240.0], [1.60284924E12, 202.09599962234498], [1.60284774E12, 68336.0], [1.60284672E12, 73012.0], [1.60284834E12, 73909.0], [1.60284876E12, 75277.0], [1.60284936E12, 304.5029999434948], [1.60284714E12, 398.0], [1.60284756E12, 288.0], [1.60284816E12, 217.4839999437332], [1.60284636E12, 233.20749984681606], [1.60284798E12, 229.53149994313716], [1.60284696E12, 353.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60284708E12, 221.0], [1.6028493E12, 209.0], [1.6028487E12, 233.0], [1.60284768E12, 799.0], [1.6028475E12, 966.0], [1.60284648E12, 194.0], [1.6028481E12, 203.0], [1.6028463E12, 249.0], [1.60284852E12, 134377.0], [1.60284912E12, 74100.0], [1.6028469E12, 74652.0], [1.60284732E12, 1364.0], [1.60284894E12, 308.0], [1.60284792E12, 223.0], [1.60284804E12, 219.0], [1.60284642E12, 214.0], [1.60284864E12, 319.0], [1.60284684E12, 73641.0], [1.60284846E12, 71140.0], [1.60284744E12, 293.0], [1.60284906E12, 225.0], [1.60284726E12, 74760.0], [1.60284624E12, 214.0], [1.60284786E12, 203.0], [1.60284828E12, 343.0], [1.60284666E12, 73146.0], [1.60284888E12, 311.0], [1.60284678E12, 72465.0], [1.602849E12, 346.0], [1.60284738E12, 346.0], [1.6028478E12, 225.0], [1.6028484E12, 1437.0], [1.60284942E12, 69449.0], [1.6028466E12, 291.0], [1.60284822E12, 321.0], [1.6028472E12, 50737.0], [1.60284882E12, 432.0], [1.60284702E12, 245.0], [1.60284762E12, 240.0], [1.60284924E12, 194.0], [1.60284774E12, 68336.0], [1.60284672E12, 73012.0], [1.60284834E12, 73909.0], [1.60284876E12, 75277.0], [1.60284936E12, 303.0], [1.60284714E12, 398.0], [1.60284756E12, 288.0], [1.60284816E12, 214.0], [1.60284636E12, 224.0], [1.60284798E12, 228.0], [1.60284696E12, 353.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60284708E12, 1739.0], [1.6028493E12, 807.0], [1.6028487E12, 1572.0], [1.60284768E12, 77142.0], [1.6028475E12, 966.0], [1.60284648E12, 588.5], [1.6028481E12, 711.0], [1.6028463E12, 619.5], [1.60284852E12, 286395.5], [1.60284912E12, 74264.5], [1.6028469E12, 78019.0], [1.60284732E12, 199043.0], [1.60284894E12, 607.0], [1.60284792E12, 885.5], [1.60284804E12, 775.5], [1.60284642E12, 647.0], [1.60284864E12, 76994.5], [1.60284684E12, 194411.5], [1.60284846E12, 73731.0], [1.60284744E12, 2428.5], [1.60284906E12, 798.0], [1.60284726E12, 75337.5], [1.60284624E12, 879.0], [1.60284786E12, 730.0], [1.60284828E12, 921.5], [1.60284666E12, 74484.0], [1.60284888E12, 1108.5], [1.60284678E12, 73257.0], [1.602849E12, 1434.0], [1.60284738E12, 75901.0], [1.6028478E12, 444.0], [1.6028484E12, 75065.0], [1.60284942E12, 71042.5], [1.6028466E12, 1084.5], [1.60284822E12, 72775.0], [1.6028472E12, 74100.0], [1.60284882E12, 40514.5], [1.60284702E12, 131562.0], [1.60284762E12, 1070.0], [1.60284924E12, 414.0], [1.60284774E12, 145655.0], [1.60284672E12, 74734.5], [1.60284834E12, 75098.0], [1.60284876E12, 75277.0], [1.60284936E12, 987.0], [1.60284714E12, 27083.0], [1.60284756E12, 434.0], [1.60284816E12, 691.0], [1.60284636E12, 689.0], [1.60284798E12, 859.0], [1.60284696E12, 74647.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284942E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 294.0, "minX": 1.0, "maxY": 1494.0, "series": [{"data": [[2.0, 1494.0], [3.0, 1117.0], [4.0, 1095.5], [5.0, 993.5], [6.0, 916.5], [7.0, 868.0], [8.0, 856.5], [9.0, 1065.0], [10.0, 792.5], [11.0, 909.0], [12.0, 710.5], [13.0, 704.0], [14.0, 654.0], [15.0, 618.5], [1.0, 1303.5], [16.0, 483.0], [17.0, 475.5], [18.0, 419.5], [19.0, 453.5], [20.0, 372.5], [21.0, 377.5], [22.0, 414.0], [23.0, 327.5], [24.0, 332.0], [25.0, 294.0], [27.0, 381.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 293.0, "minX": 1.0, "maxY": 1492.0, "series": [{"data": [[2.0, 1492.0], [3.0, 1042.5], [4.0, 1073.0], [5.0, 966.0], [6.0, 895.5], [7.0, 821.0], [8.0, 833.5], [9.0, 1027.0], [10.0, 781.0], [11.0, 892.0], [12.0, 695.5], [13.0, 704.0], [14.0, 624.5], [15.0, 606.5], [1.0, 1274.5], [16.0, 482.0], [17.0, 466.0], [18.0, 419.0], [19.0, 453.0], [20.0, 372.0], [21.0, 377.0], [22.0, 413.5], [23.0, 327.0], [24.0, 332.0], [25.0, 293.0], [27.0, 380.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60284624E12, "maxY": 9.883333333333333, "series": [{"data": [[1.60284708E12, 0.3], [1.6028493E12, 4.75], [1.6028487E12, 0.55], [1.60284768E12, 0.11666666666666667], [1.6028475E12, 0.016666666666666666], [1.60284648E12, 7.333333333333333], [1.6028481E12, 9.883333333333333], [1.6028463E12, 0.5], [1.60284852E12, 0.1], [1.60284912E12, 0.03333333333333333], [1.6028469E12, 0.06666666666666667], [1.60284732E12, 0.1], [1.60284894E12, 0.38333333333333336], [1.60284792E12, 7.233333333333333], [1.60284804E12, 4.5], [1.60284642E12, 9.583333333333334], [1.60284864E12, 0.16666666666666666], [1.60284684E12, 0.13333333333333333], [1.60284846E12, 0.05], [1.60284744E12, 0.3], [1.60284906E12, 1.6833333333333333], [1.60284726E12, 0.03333333333333333], [1.60284624E12, 6.616666666666666], [1.60284786E12, 5.25], [1.60284828E12, 0.5666666666666667], [1.60284666E12, 0.08333333333333333], [1.60284888E12, 0.1], [1.60284678E12, 0.03333333333333333], [1.602849E12, 0.26666666666666666], [1.60284738E12, 0.21666666666666667], [1.6028478E12, 2.1166666666666667], [1.6028484E12, 0.08333333333333333], [1.6028466E12, 0.8333333333333334], [1.60284822E12, 0.18333333333333332], [1.6028472E12, 0.05], [1.60284882E12, 0.16666666666666666], [1.60284702E12, 0.15], [1.60284762E12, 1.45], [1.60284924E12, 2.3833333333333333], [1.60284774E12, 0.05], [1.60284672E12, 0.06666666666666667], [1.60284834E12, 0.1], [1.60284876E12, 0.016666666666666666], [1.60284936E12, 2.5166666666666666], [1.60284714E12, 0.11666666666666667], [1.60284756E12, 0.38333333333333336], [1.60284816E12, 7.85], [1.60284636E12, 4.266666666666667], [1.60284798E12, 2.6333333333333333], [1.60284696E12, 0.13333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284936E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60284624E12, "maxY": 9.883333333333333, "series": [{"data": [[1.60284708E12, 0.3], [1.6028493E12, 4.75], [1.6028487E12, 0.55], [1.60284768E12, 0.11666666666666667], [1.6028475E12, 0.016666666666666666], [1.60284648E12, 7.333333333333333], [1.6028481E12, 9.883333333333333], [1.6028463E12, 0.5], [1.60284852E12, 0.1], [1.60284912E12, 0.03333333333333333], [1.6028469E12, 0.06666666666666667], [1.60284732E12, 0.1], [1.60284894E12, 0.38333333333333336], [1.60284792E12, 7.233333333333333], [1.60284804E12, 4.5], [1.60284642E12, 9.583333333333334], [1.60284864E12, 0.16666666666666666], [1.60284684E12, 0.13333333333333333], [1.60284846E12, 0.05], [1.60284744E12, 0.3], [1.60284906E12, 1.6833333333333333], [1.60284726E12, 0.03333333333333333], [1.60284624E12, 6.45], [1.60284786E12, 5.25], [1.60284828E12, 0.5666666666666667], [1.60284666E12, 0.08333333333333333], [1.60284888E12, 0.1], [1.60284678E12, 0.03333333333333333], [1.602849E12, 0.26666666666666666], [1.60284738E12, 0.21666666666666667], [1.6028478E12, 2.1166666666666667], [1.6028484E12, 0.08333333333333333], [1.60284942E12, 0.06666666666666667], [1.6028466E12, 0.8333333333333334], [1.60284822E12, 0.18333333333333332], [1.6028472E12, 0.05], [1.60284882E12, 0.16666666666666666], [1.60284702E12, 0.15], [1.60284762E12, 1.45], [1.60284924E12, 2.3833333333333333], [1.60284774E12, 0.05], [1.60284672E12, 0.06666666666666667], [1.60284834E12, 0.1], [1.60284876E12, 0.016666666666666666], [1.60284936E12, 2.6166666666666667], [1.60284714E12, 0.11666666666666667], [1.60284756E12, 0.38333333333333336], [1.60284816E12, 7.85], [1.60284636E12, 4.266666666666667], [1.60284798E12, 2.6333333333333333], [1.60284696E12, 0.13333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284942E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60284624E12, "maxY": 9.883333333333333, "series": [{"data": [[1.60284708E12, 0.3], [1.6028493E12, 4.75], [1.6028487E12, 0.55], [1.60284768E12, 0.11666666666666667], [1.6028475E12, 0.016666666666666666], [1.60284648E12, 7.333333333333333], [1.6028481E12, 9.883333333333333], [1.6028463E12, 0.5], [1.60284852E12, 0.1], [1.60284912E12, 0.03333333333333333], [1.6028469E12, 0.06666666666666667], [1.60284732E12, 0.1], [1.60284894E12, 0.38333333333333336], [1.60284792E12, 7.233333333333333], [1.60284804E12, 4.5], [1.60284642E12, 9.583333333333334], [1.60284864E12, 0.16666666666666666], [1.60284684E12, 0.13333333333333333], [1.60284846E12, 0.05], [1.60284744E12, 0.3], [1.60284906E12, 1.6833333333333333], [1.60284726E12, 0.03333333333333333], [1.60284624E12, 6.45], [1.60284786E12, 5.25], [1.60284828E12, 0.5666666666666667], [1.60284666E12, 0.08333333333333333], [1.60284888E12, 0.1], [1.60284678E12, 0.03333333333333333], [1.602849E12, 0.26666666666666666], [1.60284738E12, 0.21666666666666667], [1.6028478E12, 2.1166666666666667], [1.6028484E12, 0.08333333333333333], [1.60284942E12, 0.06666666666666667], [1.6028466E12, 0.8333333333333334], [1.60284822E12, 0.18333333333333332], [1.6028472E12, 0.05], [1.60284882E12, 0.16666666666666666], [1.60284702E12, 0.15], [1.60284762E12, 1.45], [1.60284924E12, 2.3833333333333333], [1.60284774E12, 0.05], [1.60284672E12, 0.06666666666666667], [1.60284834E12, 0.1], [1.60284876E12, 0.016666666666666666], [1.60284936E12, 2.6166666666666667], [1.60284714E12, 0.11666666666666667], [1.60284756E12, 0.38333333333333336], [1.60284816E12, 7.85], [1.60284636E12, 4.266666666666667], [1.60284798E12, 2.6333333333333333], [1.60284696E12, 0.13333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60284942E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60284624E12, "maxY": 9.883333333333333, "series": [{"data": [[1.60284708E12, 0.3], [1.6028493E12, 4.75], [1.6028487E12, 0.55], [1.60284768E12, 0.11666666666666667], [1.6028475E12, 0.016666666666666666], [1.60284648E12, 7.333333333333333], [1.6028481E12, 9.883333333333333], [1.6028463E12, 0.5], [1.60284852E12, 0.1], [1.60284912E12, 0.03333333333333333], [1.6028469E12, 0.06666666666666667], [1.60284732E12, 0.1], [1.60284894E12, 0.38333333333333336], [1.60284792E12, 7.233333333333333], [1.60284804E12, 4.5], [1.60284642E12, 9.583333333333334], [1.60284864E12, 0.16666666666666666], [1.60284684E12, 0.13333333333333333], [1.60284846E12, 0.05], [1.60284744E12, 0.3], [1.60284906E12, 1.6833333333333333], [1.60284726E12, 0.03333333333333333], [1.60284624E12, 6.45], [1.60284786E12, 5.25], [1.60284828E12, 0.5666666666666667], [1.60284666E12, 0.08333333333333333], [1.60284888E12, 0.1], [1.60284678E12, 0.03333333333333333], [1.602849E12, 0.26666666666666666], [1.60284738E12, 0.21666666666666667], [1.6028478E12, 2.1166666666666667], [1.6028484E12, 0.08333333333333333], [1.60284942E12, 0.06666666666666667], [1.6028466E12, 0.8333333333333334], [1.60284822E12, 0.18333333333333332], [1.6028472E12, 0.05], [1.60284882E12, 0.16666666666666666], [1.60284702E12, 0.15], [1.60284762E12, 1.45], [1.60284924E12, 2.3833333333333333], [1.60284774E12, 0.05], [1.60284672E12, 0.06666666666666667], [1.60284834E12, 0.1], [1.60284876E12, 0.016666666666666666], [1.60284936E12, 2.6166666666666667], [1.60284714E12, 0.11666666666666667], [1.60284756E12, 0.38333333333333336], [1.60284816E12, 7.85], [1.60284636E12, 4.266666666666667], [1.60284798E12, 2.6333333333333333], [1.60284696E12, 0.13333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60284942E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

