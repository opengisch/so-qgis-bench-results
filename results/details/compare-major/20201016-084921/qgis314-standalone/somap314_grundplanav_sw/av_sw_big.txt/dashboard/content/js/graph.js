/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "maxY": 291808.0, "series": [{"data": [[0.0, 193.0], [0.1, 201.0], [0.2, 204.0], [0.3, 206.0], [0.4, 208.0], [0.5, 210.0], [0.6, 212.0], [0.7, 213.0], [0.8, 216.0], [0.9, 217.0], [1.0, 218.0], [1.1, 219.0], [1.2, 220.0], [1.3, 222.0], [1.4, 223.0], [1.5, 224.0], [1.6, 225.0], [1.7, 225.0], [1.8, 226.0], [1.9, 228.0], [2.0, 229.0], [2.1, 230.0], [2.2, 230.0], [2.3, 231.0], [2.4, 231.0], [2.5, 232.0], [2.6, 233.0], [2.7, 233.0], [2.8, 234.0], [2.9, 235.0], [3.0, 235.0], [3.1, 235.0], [3.2, 236.0], [3.3, 236.0], [3.4, 237.0], [3.5, 237.0], [3.6, 237.0], [3.7, 238.0], [3.8, 238.0], [3.9, 239.0], [4.0, 240.0], [4.1, 240.0], [4.2, 240.0], [4.3, 241.0], [4.4, 241.0], [4.5, 241.0], [4.6, 242.0], [4.7, 242.0], [4.8, 243.0], [4.9, 243.0], [5.0, 243.0], [5.1, 244.0], [5.2, 244.0], [5.3, 245.0], [5.4, 245.0], [5.5, 245.0], [5.6, 246.0], [5.7, 246.0], [5.8, 246.0], [5.9, 247.0], [6.0, 247.0], [6.1, 247.0], [6.2, 248.0], [6.3, 248.0], [6.4, 249.0], [6.5, 249.0], [6.6, 249.0], [6.7, 250.0], [6.8, 250.0], [6.9, 252.0], [7.0, 252.0], [7.1, 252.0], [7.2, 253.0], [7.3, 253.0], [7.4, 253.0], [7.5, 254.0], [7.6, 255.0], [7.7, 255.0], [7.8, 256.0], [7.9, 257.0], [8.0, 257.0], [8.1, 258.0], [8.2, 259.0], [8.3, 259.0], [8.4, 259.0], [8.5, 261.0], [8.6, 262.0], [8.7, 262.0], [8.8, 263.0], [8.9, 264.0], [9.0, 265.0], [9.1, 266.0], [9.2, 267.0], [9.3, 267.0], [9.4, 268.0], [9.5, 270.0], [9.6, 271.0], [9.7, 272.0], [9.8, 273.0], [9.9, 275.0], [10.0, 276.0], [10.1, 277.0], [10.2, 278.0], [10.3, 280.0], [10.4, 281.0], [10.5, 283.0], [10.6, 286.0], [10.7, 286.0], [10.8, 288.0], [10.9, 290.0], [11.0, 290.0], [11.1, 292.0], [11.2, 293.0], [11.3, 295.0], [11.4, 296.0], [11.5, 299.0], [11.6, 299.0], [11.7, 300.0], [11.8, 301.0], [11.9, 303.0], [12.0, 303.0], [12.1, 305.0], [12.2, 306.0], [12.3, 307.0], [12.4, 308.0], [12.5, 309.0], [12.6, 310.0], [12.7, 311.0], [12.8, 312.0], [12.9, 313.0], [13.0, 313.0], [13.1, 314.0], [13.2, 316.0], [13.3, 317.0], [13.4, 317.0], [13.5, 318.0], [13.6, 319.0], [13.7, 320.0], [13.8, 320.0], [13.9, 321.0], [14.0, 322.0], [14.1, 322.0], [14.2, 323.0], [14.3, 324.0], [14.4, 325.0], [14.5, 326.0], [14.6, 326.0], [14.7, 326.0], [14.8, 327.0], [14.9, 328.0], [15.0, 328.0], [15.1, 329.0], [15.2, 329.0], [15.3, 329.0], [15.4, 330.0], [15.5, 330.0], [15.6, 331.0], [15.7, 331.0], [15.8, 332.0], [15.9, 332.0], [16.0, 333.0], [16.1, 333.0], [16.2, 334.0], [16.3, 335.0], [16.4, 335.0], [16.5, 336.0], [16.6, 337.0], [16.7, 337.0], [16.8, 338.0], [16.9, 339.0], [17.0, 339.0], [17.1, 340.0], [17.2, 340.0], [17.3, 341.0], [17.4, 342.0], [17.5, 342.0], [17.6, 342.0], [17.7, 343.0], [17.8, 343.0], [17.9, 343.0], [18.0, 344.0], [18.1, 344.0], [18.2, 345.0], [18.3, 345.0], [18.4, 346.0], [18.5, 346.0], [18.6, 346.0], [18.7, 347.0], [18.8, 348.0], [18.9, 348.0], [19.0, 349.0], [19.1, 349.0], [19.2, 350.0], [19.3, 351.0], [19.4, 351.0], [19.5, 352.0], [19.6, 353.0], [19.7, 354.0], [19.8, 355.0], [19.9, 356.0], [20.0, 356.0], [20.1, 357.0], [20.2, 358.0], [20.3, 359.0], [20.4, 360.0], [20.5, 361.0], [20.6, 361.0], [20.7, 361.0], [20.8, 362.0], [20.9, 363.0], [21.0, 364.0], [21.1, 365.0], [21.2, 365.0], [21.3, 366.0], [21.4, 366.0], [21.5, 367.0], [21.6, 368.0], [21.7, 369.0], [21.8, 369.0], [21.9, 369.0], [22.0, 370.0], [22.1, 371.0], [22.2, 373.0], [22.3, 373.0], [22.4, 374.0], [22.5, 375.0], [22.6, 375.0], [22.7, 376.0], [22.8, 376.0], [22.9, 377.0], [23.0, 378.0], [23.1, 379.0], [23.2, 380.0], [23.3, 380.0], [23.4, 381.0], [23.5, 382.0], [23.6, 383.0], [23.7, 384.0], [23.8, 385.0], [23.9, 386.0], [24.0, 387.0], [24.1, 390.0], [24.2, 390.0], [24.3, 391.0], [24.4, 392.0], [24.5, 393.0], [24.6, 394.0], [24.7, 395.0], [24.8, 396.0], [24.9, 397.0], [25.0, 399.0], [25.1, 399.0], [25.2, 401.0], [25.3, 402.0], [25.4, 403.0], [25.5, 403.0], [25.6, 404.0], [25.7, 405.0], [25.8, 406.0], [25.9, 406.0], [26.0, 408.0], [26.1, 408.0], [26.2, 409.0], [26.3, 410.0], [26.4, 411.0], [26.5, 412.0], [26.6, 413.0], [26.7, 414.0], [26.8, 415.0], [26.9, 415.0], [27.0, 417.0], [27.1, 417.0], [27.2, 418.0], [27.3, 419.0], [27.4, 420.0], [27.5, 421.0], [27.6, 422.0], [27.7, 423.0], [27.8, 424.0], [27.9, 424.0], [28.0, 425.0], [28.1, 426.0], [28.2, 427.0], [28.3, 429.0], [28.4, 430.0], [28.5, 432.0], [28.6, 432.0], [28.7, 434.0], [28.8, 435.0], [28.9, 437.0], [29.0, 438.0], [29.1, 439.0], [29.2, 441.0], [29.3, 442.0], [29.4, 444.0], [29.5, 446.0], [29.6, 447.0], [29.7, 448.0], [29.8, 449.0], [29.9, 450.0], [30.0, 451.0], [30.1, 452.0], [30.2, 452.0], [30.3, 454.0], [30.4, 455.0], [30.5, 456.0], [30.6, 458.0], [30.7, 459.0], [30.8, 460.0], [30.9, 461.0], [31.0, 461.0], [31.1, 463.0], [31.2, 465.0], [31.3, 466.0], [31.4, 467.0], [31.5, 468.0], [31.6, 470.0], [31.7, 471.0], [31.8, 472.0], [31.9, 473.0], [32.0, 474.0], [32.1, 474.0], [32.2, 477.0], [32.3, 478.0], [32.4, 479.0], [32.5, 480.0], [32.6, 482.0], [32.7, 482.0], [32.8, 484.0], [32.9, 485.0], [33.0, 486.0], [33.1, 487.0], [33.2, 489.0], [33.3, 490.0], [33.4, 492.0], [33.5, 493.0], [33.6, 494.0], [33.7, 495.0], [33.8, 496.0], [33.9, 498.0], [34.0, 500.0], [34.1, 501.0], [34.2, 502.0], [34.3, 504.0], [34.4, 506.0], [34.5, 508.0], [34.6, 508.0], [34.7, 510.0], [34.8, 511.0], [34.9, 512.0], [35.0, 513.0], [35.1, 514.0], [35.2, 515.0], [35.3, 516.0], [35.4, 518.0], [35.5, 518.0], [35.6, 520.0], [35.7, 523.0], [35.8, 525.0], [35.9, 529.0], [36.0, 530.0], [36.1, 531.0], [36.2, 532.0], [36.3, 536.0], [36.4, 537.0], [36.5, 538.0], [36.6, 539.0], [36.7, 541.0], [36.8, 542.0], [36.9, 543.0], [37.0, 545.0], [37.1, 548.0], [37.2, 550.0], [37.3, 551.0], [37.4, 553.0], [37.5, 554.0], [37.6, 555.0], [37.7, 557.0], [37.8, 559.0], [37.9, 561.0], [38.0, 562.0], [38.1, 562.0], [38.2, 563.0], [38.3, 565.0], [38.4, 566.0], [38.5, 566.0], [38.6, 567.0], [38.7, 570.0], [38.8, 571.0], [38.9, 572.0], [39.0, 573.0], [39.1, 574.0], [39.2, 576.0], [39.3, 578.0], [39.4, 580.0], [39.5, 582.0], [39.6, 586.0], [39.7, 586.0], [39.8, 588.0], [39.9, 589.0], [40.0, 590.0], [40.1, 592.0], [40.2, 594.0], [40.3, 595.0], [40.4, 597.0], [40.5, 598.0], [40.6, 601.0], [40.7, 602.0], [40.8, 603.0], [40.9, 604.0], [41.0, 605.0], [41.1, 606.0], [41.2, 607.0], [41.3, 608.0], [41.4, 610.0], [41.5, 611.0], [41.6, 614.0], [41.7, 616.0], [41.8, 617.0], [41.9, 619.0], [42.0, 620.0], [42.1, 622.0], [42.2, 623.0], [42.3, 625.0], [42.4, 626.0], [42.5, 627.0], [42.6, 628.0], [42.7, 630.0], [42.8, 632.0], [42.9, 634.0], [43.0, 636.0], [43.1, 637.0], [43.2, 639.0], [43.3, 641.0], [43.4, 643.0], [43.5, 644.0], [43.6, 645.0], [43.7, 647.0], [43.8, 648.0], [43.9, 649.0], [44.0, 650.0], [44.1, 653.0], [44.2, 655.0], [44.3, 656.0], [44.4, 659.0], [44.5, 660.0], [44.6, 660.0], [44.7, 662.0], [44.8, 664.0], [44.9, 665.0], [45.0, 666.0], [45.1, 667.0], [45.2, 671.0], [45.3, 673.0], [45.4, 674.0], [45.5, 675.0], [45.6, 675.0], [45.7, 676.0], [45.8, 677.0], [45.9, 678.0], [46.0, 679.0], [46.1, 680.0], [46.2, 683.0], [46.3, 685.0], [46.4, 687.0], [46.5, 688.0], [46.6, 689.0], [46.7, 691.0], [46.8, 691.0], [46.9, 694.0], [47.0, 695.0], [47.1, 697.0], [47.2, 699.0], [47.3, 700.0], [47.4, 704.0], [47.5, 705.0], [47.6, 707.0], [47.7, 709.0], [47.8, 710.0], [47.9, 711.0], [48.0, 712.0], [48.1, 713.0], [48.2, 714.0], [48.3, 715.0], [48.4, 716.0], [48.5, 718.0], [48.6, 721.0], [48.7, 722.0], [48.8, 724.0], [48.9, 725.0], [49.0, 727.0], [49.1, 730.0], [49.2, 732.0], [49.3, 734.0], [49.4, 737.0], [49.5, 738.0], [49.6, 741.0], [49.7, 742.0], [49.8, 745.0], [49.9, 746.0], [50.0, 748.0], [50.1, 751.0], [50.2, 752.0], [50.3, 755.0], [50.4, 757.0], [50.5, 761.0], [50.6, 762.0], [50.7, 764.0], [50.8, 765.0], [50.9, 768.0], [51.0, 770.0], [51.1, 772.0], [51.2, 775.0], [51.3, 778.0], [51.4, 779.0], [51.5, 781.0], [51.6, 785.0], [51.7, 788.0], [51.8, 789.0], [51.9, 791.0], [52.0, 793.0], [52.1, 793.0], [52.2, 795.0], [52.3, 797.0], [52.4, 797.0], [52.5, 801.0], [52.6, 806.0], [52.7, 808.0], [52.8, 809.0], [52.9, 811.0], [53.0, 814.0], [53.1, 816.0], [53.2, 822.0], [53.3, 823.0], [53.4, 826.0], [53.5, 827.0], [53.6, 828.0], [53.7, 831.0], [53.8, 835.0], [53.9, 838.0], [54.0, 841.0], [54.1, 846.0], [54.2, 847.0], [54.3, 849.0], [54.4, 851.0], [54.5, 855.0], [54.6, 856.0], [54.7, 858.0], [54.8, 859.0], [54.9, 863.0], [55.0, 866.0], [55.1, 870.0], [55.2, 873.0], [55.3, 879.0], [55.4, 880.0], [55.5, 882.0], [55.6, 888.0], [55.7, 892.0], [55.8, 893.0], [55.9, 896.0], [56.0, 897.0], [56.1, 899.0], [56.2, 903.0], [56.3, 905.0], [56.4, 910.0], [56.5, 911.0], [56.6, 915.0], [56.7, 919.0], [56.8, 922.0], [56.9, 924.0], [57.0, 927.0], [57.1, 928.0], [57.2, 930.0], [57.3, 932.0], [57.4, 935.0], [57.5, 936.0], [57.6, 938.0], [57.7, 939.0], [57.8, 942.0], [57.9, 943.0], [58.0, 945.0], [58.1, 946.0], [58.2, 949.0], [58.3, 954.0], [58.4, 959.0], [58.5, 962.0], [58.6, 967.0], [58.7, 968.0], [58.8, 971.0], [58.9, 976.0], [59.0, 978.0], [59.1, 980.0], [59.2, 983.0], [59.3, 985.0], [59.4, 989.0], [59.5, 991.0], [59.6, 993.0], [59.7, 1000.0], [59.8, 1002.0], [59.9, 1003.0], [60.0, 1006.0], [60.1, 1010.0], [60.2, 1012.0], [60.3, 1015.0], [60.4, 1017.0], [60.5, 1021.0], [60.6, 1024.0], [60.7, 1027.0], [60.8, 1030.0], [60.9, 1032.0], [61.0, 1036.0], [61.1, 1041.0], [61.2, 1043.0], [61.3, 1044.0], [61.4, 1046.0], [61.5, 1047.0], [61.6, 1049.0], [61.7, 1050.0], [61.8, 1053.0], [61.9, 1057.0], [62.0, 1059.0], [62.1, 1062.0], [62.2, 1064.0], [62.3, 1066.0], [62.4, 1067.0], [62.5, 1068.0], [62.6, 1070.0], [62.7, 1071.0], [62.8, 1078.0], [62.9, 1079.0], [63.0, 1080.0], [63.1, 1084.0], [63.2, 1087.0], [63.3, 1089.0], [63.4, 1090.0], [63.5, 1093.0], [63.6, 1095.0], [63.7, 1098.0], [63.8, 1105.0], [63.9, 1109.0], [64.0, 1113.0], [64.1, 1115.0], [64.2, 1121.0], [64.3, 1124.0], [64.4, 1128.0], [64.5, 1129.0], [64.6, 1133.0], [64.7, 1136.0], [64.8, 1141.0], [64.9, 1143.0], [65.0, 1146.0], [65.1, 1150.0], [65.2, 1153.0], [65.3, 1158.0], [65.4, 1160.0], [65.5, 1165.0], [65.6, 1168.0], [65.7, 1172.0], [65.8, 1176.0], [65.9, 1178.0], [66.0, 1186.0], [66.1, 1191.0], [66.2, 1197.0], [66.3, 1201.0], [66.4, 1204.0], [66.5, 1209.0], [66.6, 1212.0], [66.7, 1215.0], [66.8, 1217.0], [66.9, 1225.0], [67.0, 1228.0], [67.1, 1233.0], [67.2, 1237.0], [67.3, 1242.0], [67.4, 1248.0], [67.5, 1250.0], [67.6, 1253.0], [67.7, 1258.0], [67.8, 1263.0], [67.9, 1266.0], [68.0, 1270.0], [68.1, 1273.0], [68.2, 1275.0], [68.3, 1280.0], [68.4, 1289.0], [68.5, 1296.0], [68.6, 1303.0], [68.7, 1306.0], [68.8, 1311.0], [68.9, 1316.0], [69.0, 1319.0], [69.1, 1322.0], [69.2, 1327.0], [69.3, 1331.0], [69.4, 1332.0], [69.5, 1338.0], [69.6, 1343.0], [69.7, 1347.0], [69.8, 1351.0], [69.9, 1356.0], [70.0, 1358.0], [70.1, 1363.0], [70.2, 1366.0], [70.3, 1373.0], [70.4, 1381.0], [70.5, 1384.0], [70.6, 1389.0], [70.7, 1393.0], [70.8, 1398.0], [70.9, 1401.0], [71.0, 1403.0], [71.1, 1406.0], [71.2, 1411.0], [71.3, 1413.0], [71.4, 1417.0], [71.5, 1418.0], [71.6, 1424.0], [71.7, 1426.0], [71.8, 1430.0], [71.9, 1435.0], [72.0, 1438.0], [72.1, 1443.0], [72.2, 1449.0], [72.3, 1456.0], [72.4, 1463.0], [72.5, 1468.0], [72.6, 1471.0], [72.7, 1473.0], [72.8, 1475.0], [72.9, 1478.0], [73.0, 1487.0], [73.1, 1490.0], [73.2, 1493.0], [73.3, 1496.0], [73.4, 1500.0], [73.5, 1503.0], [73.6, 1508.0], [73.7, 1512.0], [73.8, 1517.0], [73.9, 1521.0], [74.0, 1527.0], [74.1, 1531.0], [74.2, 1535.0], [74.3, 1539.0], [74.4, 1549.0], [74.5, 1558.0], [74.6, 1565.0], [74.7, 1567.0], [74.8, 1576.0], [74.9, 1578.0], [75.0, 1582.0], [75.1, 1586.0], [75.2, 1594.0], [75.3, 1598.0], [75.4, 1602.0], [75.5, 1608.0], [75.6, 1611.0], [75.7, 1617.0], [75.8, 1627.0], [75.9, 1630.0], [76.0, 1640.0], [76.1, 1643.0], [76.2, 1646.0], [76.3, 1651.0], [76.4, 1658.0], [76.5, 1664.0], [76.6, 1670.0], [76.7, 1673.0], [76.8, 1678.0], [76.9, 1685.0], [77.0, 1689.0], [77.1, 1691.0], [77.2, 1695.0], [77.3, 1699.0], [77.4, 1707.0], [77.5, 1711.0], [77.6, 1715.0], [77.7, 1719.0], [77.8, 1724.0], [77.9, 1729.0], [78.0, 1745.0], [78.1, 1749.0], [78.2, 1756.0], [78.3, 1759.0], [78.4, 1762.0], [78.5, 1768.0], [78.6, 1773.0], [78.7, 1777.0], [78.8, 1786.0], [78.9, 1789.0], [79.0, 1796.0], [79.1, 1809.0], [79.2, 1815.0], [79.3, 1821.0], [79.4, 1828.0], [79.5, 1844.0], [79.6, 1846.0], [79.7, 1851.0], [79.8, 1856.0], [79.9, 1865.0], [80.0, 1879.0], [80.1, 1881.0], [80.2, 1896.0], [80.3, 1900.0], [80.4, 1908.0], [80.5, 1915.0], [80.6, 1934.0], [80.7, 1937.0], [80.8, 1941.0], [80.9, 1947.0], [81.0, 1954.0], [81.1, 1968.0], [81.2, 1979.0], [81.3, 1982.0], [81.4, 1987.0], [81.5, 1993.0], [81.6, 2011.0], [81.7, 2019.0], [81.8, 2025.0], [81.9, 2046.0], [82.0, 2052.0], [82.1, 2065.0], [82.2, 2080.0], [82.3, 2094.0], [82.4, 2102.0], [82.5, 2108.0], [82.6, 2113.0], [82.7, 2121.0], [82.8, 2137.0], [82.9, 2140.0], [83.0, 2159.0], [83.1, 2169.0], [83.2, 2175.0], [83.3, 2193.0], [83.4, 2201.0], [83.5, 2205.0], [83.6, 2223.0], [83.7, 2232.0], [83.8, 2242.0], [83.9, 2253.0], [84.0, 2263.0], [84.1, 2277.0], [84.2, 2282.0], [84.3, 2292.0], [84.4, 2302.0], [84.5, 2310.0], [84.6, 2320.0], [84.7, 2325.0], [84.8, 2344.0], [84.9, 2353.0], [85.0, 2358.0], [85.1, 2367.0], [85.2, 2386.0], [85.3, 2414.0], [85.4, 2424.0], [85.5, 2433.0], [85.6, 2450.0], [85.7, 2453.0], [85.8, 2481.0], [85.9, 2492.0], [86.0, 2503.0], [86.1, 2511.0], [86.2, 2528.0], [86.3, 2533.0], [86.4, 2550.0], [86.5, 2565.0], [86.6, 2572.0], [86.7, 2598.0], [86.8, 2619.0], [86.9, 2631.0], [87.0, 2638.0], [87.1, 2656.0], [87.2, 2692.0], [87.3, 2710.0], [87.4, 2731.0], [87.5, 2744.0], [87.6, 2759.0], [87.7, 2771.0], [87.8, 2777.0], [87.9, 2792.0], [88.0, 2810.0], [88.1, 2827.0], [88.2, 2843.0], [88.3, 2857.0], [88.4, 2874.0], [88.5, 2900.0], [88.6, 2930.0], [88.7, 2952.0], [88.8, 2982.0], [88.9, 3000.0], [89.0, 3025.0], [89.1, 3050.0], [89.2, 3094.0], [89.3, 3134.0], [89.4, 3156.0], [89.5, 3182.0], [89.6, 3215.0], [89.7, 3248.0], [89.8, 3280.0], [89.9, 3296.0], [90.0, 3321.0], [90.1, 3349.0], [90.2, 3359.0], [90.3, 3410.0], [90.4, 3453.0], [90.5, 3476.0], [90.6, 3515.0], [90.7, 3531.0], [90.8, 3551.0], [90.9, 3608.0], [91.0, 3630.0], [91.1, 3666.0], [91.2, 3723.0], [91.3, 3766.0], [91.4, 3805.0], [91.5, 3840.0], [91.6, 3904.0], [91.7, 3959.0], [91.8, 4011.0], [91.9, 4048.0], [92.0, 4103.0], [92.1, 4139.0], [92.2, 4233.0], [92.3, 4277.0], [92.4, 4330.0], [92.5, 4361.0], [92.6, 4404.0], [92.7, 4483.0], [92.8, 4534.0], [92.9, 4584.0], [93.0, 4653.0], [93.1, 4737.0], [93.2, 4787.0], [93.3, 4855.0], [93.4, 4944.0], [93.5, 5040.0], [93.6, 5141.0], [93.7, 5373.0], [93.8, 5517.0], [93.9, 5812.0], [94.0, 6379.0], [94.1, 6590.0], [94.2, 6825.0], [94.3, 7378.0], [94.4, 8059.0], [94.5, 9216.0], [94.6, 10516.0], [94.7, 12063.0], [94.8, 21638.0], [94.9, 26122.0], [95.0, 29146.0], [95.1, 33068.0], [95.2, 46513.0], [95.3, 62541.0], [95.4, 65310.0], [95.5, 67472.0], [95.6, 69427.0], [95.7, 70260.0], [95.8, 71035.0], [95.9, 71389.0], [96.0, 71915.0], [96.1, 72258.0], [96.2, 72725.0], [96.3, 72845.0], [96.4, 72995.0], [96.5, 73065.0], [96.6, 73206.0], [96.7, 73343.0], [96.8, 73408.0], [96.9, 73676.0], [97.0, 73792.0], [97.1, 73948.0], [97.2, 74133.0], [97.3, 74531.0], [97.4, 74666.0], [97.5, 74921.0], [97.6, 75088.0], [97.7, 75361.0], [97.8, 76141.0], [97.9, 76814.0], [98.0, 77914.0], [98.1, 81322.0], [98.2, 88120.0], [98.3, 89890.0], [98.4, 91308.0], [98.5, 97164.0], [98.6, 114111.0], [98.7, 136318.0], [98.8, 141807.0], [98.9, 143706.0], [99.0, 144125.0], [99.1, 144781.0], [99.2, 145782.0], [99.3, 146799.0], [99.4, 147803.0], [99.5, 171884.0], [99.6, 207352.0], [99.7, 215263.0], [99.8, 230441.0], [99.9, 259807.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 700.0, "series": [{"data": [[143200.0, 1.0], [290500.0, 1.0], [144800.0, 1.0], [149600.0, 1.0], [215200.0, 1.0], [136100.0, 1.0], [145700.0, 1.0], [144100.0, 2.0], [148900.0, 1.0], [184100.0, 1.0], [209700.0, 1.0], [66700.0, 1.0], [73100.0, 3.0], [75500.0, 1.0], [73900.0, 2.0], [77900.0, 3.0], [90700.0, 1.0], [97100.0, 1.0], [141800.0, 1.0], [215400.0, 1.0], [233000.0, 1.0], [290000.0, 1.0], [100.0, 4.0], [136300.0, 1.0], [36100.0, 1.0], [145900.0, 1.0], [35700.0, 1.0], [46500.0, 1.0], [47700.0, 1.0], [200.0, 599.0], [232300.0, 1.0], [62500.0, 1.0], [62100.0, 1.0], [64900.0, 2.0], [63700.0, 1.0], [65300.0, 1.0], [67400.0, 1.0], [73000.0, 5.0], [72200.0, 5.0], [69800.0, 1.0], [291800.0, 1.0], [300.0, 700.0], [74600.0, 3.0], [73800.0, 4.0], [76200.0, 2.0], [77000.0, 1.0], [78600.0, 1.0], [89800.0, 2.0], [97000.0, 1.0], [400.0, 461.0], [113000.0, 1.0], [112200.0, 1.0], [500.0, 340.0], [146800.0, 2.0], [600.0, 346.0], [700.0, 273.0], [800.0, 189.0], [900.0, 186.0], [231600.0, 1.0], [1000.0, 211.0], [1100.0, 129.0], [1200.0, 119.0], [1300.0, 120.0], [1400.0, 131.0], [1500.0, 104.0], [1600.0, 100.0], [1700.0, 91.0], [1800.0, 64.0], [1900.0, 65.0], [2000.0, 43.0], [2100.0, 53.0], [2300.0, 45.0], [2200.0, 52.0], [146100.0, 1.0], [144500.0, 2.0], [2400.0, 38.0], [2500.0, 37.0], [2600.0, 28.0], [2800.0, 29.0], [2700.0, 36.0], [176500.0, 1.0], [2900.0, 20.0], [3000.0, 17.0], [3100.0, 17.0], [3300.0, 20.0], [3200.0, 19.0], [3400.0, 15.0], [3500.0, 15.0], [229300.0, 1.0], [3600.0, 14.0], [3700.0, 11.0], [3800.0, 13.0], [3900.0, 9.0], [4000.0, 11.0], [4100.0, 11.0], [4300.0, 13.0], [4200.0, 7.0], [66500.0, 2.0], [67300.0, 1.0], [4500.0, 12.0], [71300.0, 2.0], [4400.0, 7.0], [4600.0, 6.0], [72900.0, 4.0], [73700.0, 5.0], [69700.0, 1.0], [72100.0, 1.0], [4700.0, 10.0], [4800.0, 4.0], [74500.0, 5.0], [75300.0, 4.0], [76100.0, 1.0], [5000.0, 8.0], [5100.0, 3.0], [4900.0, 5.0], [5300.0, 3.0], [5200.0, 1.0], [5400.0, 4.0], [5500.0, 3.0], [88100.0, 1.0], [5600.0, 1.0], [90500.0, 1.0], [91300.0, 1.0], [5800.0, 1.0], [5700.0, 1.0], [5900.0, 2.0], [6000.0, 1.0], [6300.0, 3.0], [6500.0, 3.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 3.0], [6700.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7200.0, 2.0], [7300.0, 3.0], [7700.0, 1.0], [8000.0, 3.0], [8100.0, 1.0], [8600.0, 1.0], [9100.0, 1.0], [147000.0, 1.0], [9200.0, 1.0], [9900.0, 2.0], [10500.0, 2.0], [10300.0, 1.0], [10400.0, 1.0], [10800.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [13000.0, 1.0], [14700.0, 1.0], [246200.0, 1.0], [20400.0, 1.0], [21600.0, 1.0], [24000.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [28400.0, 1.0], [28000.0, 1.0], [30000.0, 1.0], [31400.0, 1.0], [33600.0, 1.0], [146300.0, 2.0], [144700.0, 1.0], [157500.0, 1.0], [183100.0, 1.0], [68000.0, 1.0], [71200.0, 1.0], [73600.0, 3.0], [72800.0, 6.0], [76800.0, 1.0], [74400.0, 1.0], [85600.0, 1.0], [87200.0, 1.0], [88800.0, 1.0], [117600.0, 1.0], [144000.0, 2.0], [140800.0, 1.0], [171200.0, 1.0], [230400.0, 1.0], [144900.0, 1.0], [143300.0, 1.0], [159300.0, 1.0], [207300.0, 1.0], [215300.0, 1.0], [223300.0, 1.0], [67900.0, 1.0], [71900.0, 3.0], [73500.0, 2.0], [72700.0, 2.0], [71100.0, 1.0], [74300.0, 1.0], [78300.0, 1.0], [89500.0, 1.0], [93500.0, 1.0], [94300.0, 1.0], [116700.0, 1.0], [141000.0, 1.0], [289300.0, 1.0], [143500.0, 1.0], [146700.0, 1.0], [49500.0, 1.0], [212300.0, 1.0], [207500.0, 1.0], [210700.0, 1.0], [57900.0, 1.0], [62300.0, 1.0], [64300.0, 1.0], [69400.0, 2.0], [287000.0, 1.0], [70200.0, 2.0], [71000.0, 4.0], [73400.0, 2.0], [72600.0, 1.0], [71800.0, 1.0], [74200.0, 1.0], [75000.0, 4.0], [75800.0, 1.0], [76600.0, 1.0], [79000.0, 1.0], [88600.0, 1.0], [90200.0, 1.0], [99000.0, 1.0], [123000.0, 1.0], [141200.0, 1.0], [144400.0, 1.0], [143700.0, 3.0], [146900.0, 1.0], [145300.0, 2.0], [186900.0, 1.0], [68500.0, 2.0], [73300.0, 7.0], [71700.0, 2.0], [72500.0, 1.0], [74900.0, 5.0], [74100.0, 2.0], [76500.0, 1.0], [81300.0, 1.0], [90100.0, 1.0], [92500.0, 1.0], [107700.0, 1.0], [114100.0, 1.0], [141400.0, 1.0], [147800.0, 1.0], [171800.0, 1.0], [259800.0, 1.0], [23500.0, 1.0], [26100.0, 1.0], [25900.0, 1.0], [26700.0, 1.0], [29100.0, 2.0], [32500.0, 1.0], [34600.0, 1.0], [33000.0, 1.0], [142300.0, 1.0], [143900.0, 1.0], [73200.0, 4.0], [70800.0, 3.0], [74000.0, 3.0], [75600.0, 2.0], [76400.0, 1.0], [77200.0, 2.0], [74800.0, 1.0], [84400.0, 1.0], [82800.0, 1.0], [91600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 291800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1380.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2042.0, "series": [{"data": [[0.0, 1768.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2042.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1380.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.25, "minX": 1.60284186E12, "maxY": 10.0, "series": [{"data": [[1.60284186E12, 10.0], [1.60284408E12, 10.0], [1.60284348E12, 10.0], [1.60284306E12, 10.0], [1.60284246E12, 10.0], [1.60284468E12, 10.0], [1.60284264E12, 10.0], [1.60284204E12, 10.0], [1.60284366E12, 10.0], [1.60284384E12, 10.0], [1.6028451E12, 5.25], [1.60284324E12, 10.0], [1.60284486E12, 10.0], [1.60284282E12, 10.0], [1.60284222E12, 10.0], [1.60284444E12, 10.0], [1.6028424E12, 10.0], [1.60284402E12, 10.0], [1.6028436E12, 10.0], [1.602843E12, 10.0], [1.60284462E12, 10.0], [1.60284258E12, 10.0], [1.6028448E12, 10.0], [1.60284198E12, 10.0], [1.6028442E12, 10.0], [1.60284216E12, 10.0], [1.60284378E12, 10.0], [1.60284318E12, 10.0], [1.60284336E12, 10.0], [1.60284276E12, 10.0], [1.60284438E12, 10.0], [1.60284456E12, 10.0], [1.60284396E12, 10.0], [1.60284498E12, 9.997695852534562], [1.60284192E12, 10.0], [1.60284354E12, 10.0], [1.60284294E12, 10.0], [1.60284312E12, 10.0], [1.60284474E12, 10.0], [1.60284252E12, 10.0], [1.60284414E12, 10.0], [1.6028421E12, 10.0], [1.60284432E12, 10.0], [1.60284372E12, 10.0], [1.6028433E12, 10.0], [1.6028427E12, 10.0], [1.60284288E12, 10.0], [1.6028445E12, 10.0], [1.60284228E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028451E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2876.0, "minX": 1.0, "maxY": 76517.0, "series": [{"data": [[8.0, 73131.66666666667], [4.0, 74583.0], [1.0, 76517.0], [9.0, 2876.0], [10.0, 6074.635784597571], [5.0, 73848.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992485549132944, 6179.012138728327]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.5, "minX": 1.60284186E12, "maxY": 2960430.8, "series": [{"data": [[1.60284186E12, 1291772.8333333333], [1.60284408E12, 215.46666666666667], [1.60284348E12, 2150974.7], [1.60284306E12, 55899.25], [1.60284246E12, 7923.016666666666], [1.60284468E12, 522998.7166666667], [1.60284264E12, 1242.4666666666667], [1.60284204E12, 1872721.3833333333], [1.60284366E12, 1572314.2333333334], [1.60284384E12, 204439.78333333333], [1.6028451E12, 21742.483333333334], [1.60284324E12, 326785.13333333336], [1.60284486E12, 185170.78333333333], [1.60284282E12, 695.4833333333333], [1.60284222E12, 306797.5], [1.60284444E12, 60602.46666666667], [1.6028424E12, 287.3333333333333], [1.60284402E12, 21737.05], [1.6028436E12, 74655.86666666667], [1.602843E12, 18420.8], [1.60284462E12, 26736.066666666666], [1.60284258E12, 572.5666666666667], [1.6028448E12, 196529.56666666668], [1.60284198E12, 444920.1], [1.6028442E12, 33406.316666666666], [1.60284216E12, 384047.3333333333], [1.60284378E12, 1305269.5], [1.60284318E12, 178426.91666666666], [1.60284336E12, 323564.76666666666], [1.60284276E12, 59366.25], [1.60284438E12, 6427.866666666667], [1.60284456E12, 2237.15], [1.60284396E12, 29397.566666666666], [1.60284498E12, 2027687.6166666667], [1.60284192E12, 924318.1166666667], [1.60284354E12, 2405882.466666667], [1.60284294E12, 11698.666666666666], [1.60284312E12, 21521.716666666667], [1.60284474E12, 143.6], [1.60284252E12, 287.26666666666665], [1.60284414E12, 1022.1666666666666], [1.6028421E12, 2960430.8], [1.60284432E12, 60108.583333333336], [1.60284372E12, 2870009.283333333], [1.6028433E12, 50196.5], [1.6028427E12, 30437.316666666666], [1.60284288E12, 299.8833333333333], [1.6028445E12, 23496.35], [1.60284228E12, 26046.616666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60284186E12, 1416.9833333333333], [1.60284408E12, 23.8], [1.60284348E12, 3361.6666666666665], [1.60284306E12, 196.11666666666667], [1.60284246E12, 63.53333333333333], [1.60284468E12, 709.2], [1.60284264E12, 15.5], [1.60284204E12, 4263.333333333333], [1.60284366E12, 3209.133333333333], [1.60284384E12, 355.53333333333336], [1.6028451E12, 62.21666666666667], [1.60284324E12, 507.6666666666667], [1.60284486E12, 720.8166666666667], [1.60284282E12, 15.9], [1.60284222E12, 355.45], [1.60284444E12, 93.6], [1.6028424E12, 31.733333333333334], [1.60284402E12, 47.333333333333336], [1.6028436E12, 88.53333333333333], [1.602843E12, 46.5], [1.60284462E12, 182.33333333333334], [1.60284258E12, 54.71666666666667], [1.6028448E12, 431.2], [1.60284198E12, 766.1333333333333], [1.6028442E12, 93.78333333333333], [1.60284216E12, 460.55], [1.60284378E12, 2642.4666666666667], [1.60284318E12, 363.8833333333333], [1.60284336E12, 1010.95], [1.60284276E12, 175.85], [1.60284438E12, 38.55], [1.60284456E12, 55.55], [1.60284396E12, 47.68333333333333], [1.60284498E12, 3377.766666666667], [1.60284192E12, 1668.75], [1.60284354E12, 3472.0], [1.60284294E12, 45.666666666666664], [1.60284312E12, 23.5], [1.60284474E12, 15.85], [1.60284252E12, 31.733333333333334], [1.60284414E12, 63.483333333333334], [1.6028421E12, 4289.05], [1.60284432E12, 215.58333333333334], [1.60284372E12, 4325.666666666667], [1.6028433E12, 47.03333333333333], [1.6028427E12, 77.35], [1.60284288E12, 30.55], [1.6028445E12, 148.78333333333333], [1.60284228E12, 47.36666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028451E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 943.029498525074, "minX": 1.60284186E12, "maxY": 216453.5, "series": [{"data": [[1.60284186E12, 1786.89247311828], [1.60284408E12, 73482.0], [1.60284348E12, 2878.445727482676], [1.60284306E12, 34434.520000000004], [1.60284246E12, 163858.00000000003], [1.60284468E12, 1233.0777777777785], [1.60284264E12, 37908.0], [1.60284204E12, 1051.67667844523], [1.60284366E12, 2763.1028037383203], [1.60284384E12, 17245.177777777786], [1.6028451E12, 74188.625], [1.60284324E12, 8421.515625000004], [1.60284486E12, 7799.7741935483855], [1.60284282E12, 59775.5], [1.60284222E12, 20862.77777777778], [1.60284444E12, 36408.25], [1.6028424E12, 74144.5], [1.60284402E12, 61925.00000000001], [1.6028436E12, 3013.4999999999995], [1.602843E12, 56624.66666666667], [1.60284462E12, 55230.652173913026], [1.60284258E12, 102839.85714285714], [1.6028448E12, 24565.92727272728], [1.60284198E12, 9520.999999999993], [1.6028442E12, 49384.91666666667], [1.60284216E12, 1188.7796610169494], [1.60284378E12, 943.029498525074], [1.60284318E12, 27658.369565217392], [1.60284336E12, 9210.54615384616], [1.60284276E12, 44514.78260869565], [1.60284438E12, 44089.4], [1.60284456E12, 42037.57142857143], [1.60284396E12, 73384.33333333333], [1.60284498E12, 2820.6082949308707], [1.60284192E12, 1019.926406926407], [1.60284354E12, 1317.877419354839], [1.60284294E12, 167837.33333333334], [1.60284312E12, 49530.33333333333], [1.60284474E12, 73982.0], [1.60284252E12, 135519.5], [1.60284414E12, 216453.5], [1.6028421E12, 1096.5245901639348], [1.60284432E12, 39148.57142857143], [1.60284372E12, 1055.7269503546095], [1.6028433E12, 62889.333333333336], [1.6028427E12, 83281.8], [1.60284288E12, 102158.0], [1.6028445E12, 64507.84210526317], [1.60284228E12, 73093.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028451E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 898.7050147492629, "minX": 1.60284186E12, "maxY": 216453.5, "series": [{"data": [[1.60284186E12, 1720.9247311827967], [1.60284408E12, 73482.0], [1.60284348E12, 2835.6189376443413], [1.60284306E12, 34421.76], [1.60284246E12, 163855.75], [1.60284468E12, 1152.2888888888892], [1.60284264E12, 37907.5], [1.60284204E12, 1015.1130742049479], [1.60284366E12, 2730.264018691588], [1.60284384E12, 17196.33333333333], [1.6028451E12, 74186.75], [1.60284324E12, 8373.390625000002], [1.60284486E12, 7779.548387096772], [1.60284282E12, 59775.5], [1.60284222E12, 20809.399999999994], [1.60284444E12, 36406.583333333336], [1.6028424E12, 74144.5], [1.60284402E12, 61923.833333333336], [1.6028436E12, 3010.833333333333], [1.602843E12, 56623.0], [1.60284462E12, 55221.782608695634], [1.60284258E12, 102839.57142857142], [1.6028448E12, 24544.52727272727], [1.60284198E12, 9485.19801980198], [1.6028442E12, 49384.0], [1.60284216E12, 1132.2881355932202], [1.60284378E12, 898.7050147492629], [1.60284318E12, 27644.652173913044], [1.60284336E12, 9189.715384615383], [1.60284276E12, 44505.0], [1.60284438E12, 44089.0], [1.60284456E12, 42037.42857142857], [1.60284396E12, 73353.0], [1.60284498E12, 2786.4470046082947], [1.60284192E12, 979.1082251082254], [1.60284354E12, 1275.496774193549], [1.60284294E12, 167803.33333333334], [1.60284312E12, 49528.0], [1.60284474E12, 73981.5], [1.60284252E12, 135519.5], [1.60284414E12, 216453.5], [1.6028421E12, 1045.1329690346097], [1.60284432E12, 39140.75000000001], [1.60284372E12, 1003.299645390071], [1.6028433E12, 62886.50000000001], [1.6028427E12, 83264.70000000001], [1.60284288E12, 102158.0], [1.6028445E12, 64499.0], [1.60284228E12, 73092.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028451E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60284186E12, "maxY": 1.75, "series": [{"data": [[1.60284186E12, 1.5268817204301075], [1.60284408E12, 1.0], [1.60284348E12, 0.7113163972286375], [1.60284306E12, 0.84], [1.60284246E12, 0.375], [1.60284468E12, 0.5111111111111113], [1.60284264E12, 0.0], [1.60284204E12, 0.7985865724381621], [1.60284366E12, 0.5257009345794394], [1.60284384E12, 0.5555555555555555], [1.6028451E12, 0.75], [1.60284324E12, 0.859375], [1.60284486E12, 0.5913978494623657], [1.60284282E12, 1.0], [1.60284222E12, 0.6888888888888888], [1.60284444E12, 0.7499999999999999], [1.6028424E12, 1.75], [1.60284402E12, 0.8333333333333334], [1.6028436E12, 0.8333333333333333], [1.602843E12, 0.6666666666666667], [1.60284462E12, 0.6086956521739132], [1.60284258E12, 0.7142857142857143], [1.6028448E12, 0.5999999999999998], [1.60284198E12, 1.049504950495049], [1.6028442E12, 0.5833333333333333], [1.60284216E12, 0.5593220338983049], [1.60284378E12, 0.5162241887905609], [1.60284318E12, 0.7391304347826086], [1.60284336E12, 0.7384615384615387], [1.60284276E12, 0.9130434782608696], [1.60284438E12, 0.4], [1.60284456E12, 0.4285714285714286], [1.60284396E12, 0.6666666666666666], [1.60284498E12, 0.5829493087557611], [1.60284192E12, 0.9220779220779224], [1.60284354E12, 0.6258064516129035], [1.60284294E12, 0.8333333333333334], [1.60284312E12, 0.6666666666666666], [1.60284474E12, 0.0], [1.60284252E12, 0.5], [1.60284414E12, 0.75], [1.6028421E12, 0.6411657559198546], [1.60284432E12, 0.6071428571428572], [1.60284372E12, 0.5620567375886524], [1.6028433E12, 0.5], [1.6028427E12, 1.0], [1.60284288E12, 1.0], [1.6028445E12, 0.9473684210526315], [1.60284228E12, 0.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028451E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.60284186E12, "maxY": 291808.0, "series": [{"data": [[1.60284186E12, 12690.0], [1.60284408E12, 73837.0], [1.60284348E12, 76814.0], [1.60284306E12, 146799.0], [1.60284246E12, 232359.0], [1.60284468E12, 4988.0], [1.60284264E12, 73792.0], [1.60284204E12, 5456.0], [1.60284366E12, 77273.0], [1.60284384E12, 77914.0], [1.6028451E12, 77089.0], [1.60284324E12, 146965.0], [1.60284486E12, 72974.0], [1.60284282E12, 73038.0], [1.60284222E12, 91671.0], [1.60284444E12, 141807.0], [1.6028424E12, 74942.0], [1.60284402E12, 76205.0], [1.6028436E12, 6841.0], [1.602843E12, 143233.0], [1.60284462E12, 210706.0], [1.60284258E12, 147055.0], [1.6028448E12, 149611.0], [1.60284198E12, 94346.0], [1.6028442E12, 144598.0], [1.60284216E12, 5562.0], [1.60284378E12, 5373.0], [1.60284318E12, 287082.0], [1.60284336E12, 147803.0], [1.60284276E12, 215263.0], [1.60284438E12, 73948.0], [1.60284456E12, 74464.0], [1.60284396E12, 74617.0], [1.60284498E12, 74199.0], [1.60284192E12, 6590.0], [1.60284354E12, 14705.0], [1.60284294E12, 246224.0], [1.60284312E12, 74045.0], [1.60284474E12, 74300.0], [1.60284252E12, 233009.0], [1.60284414E12, 291808.0], [1.6028421E12, 8099.0], [1.60284432E12, 144884.0], [1.60284372E12, 4906.0], [1.6028433E12, 76141.0], [1.6028427E12, 223355.0], [1.60284288E12, 143706.0], [1.6028445E12, 212316.0], [1.60284228E12, 74960.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60284186E12, 235.9279992866516], [1.60284408E12, 72840.0], [1.60284348E12, 222.62399958610536], [1.60284306E12, 299.0], [1.60284246E12, 73110.0], [1.60284468E12, 201.0], [1.60284264E12, 2024.0], [1.60284204E12, 208.10299986481667], [1.60284366E12, 214.72199979543686], [1.60284384E12, 316.0], [1.6028451E12, 70833.0], [1.60284324E12, 250.0], [1.60284486E12, 216.0], [1.60284282E12, 46513.0], [1.60284222E12, 351.0], [1.60284444E12, 329.0], [1.6028424E12, 73369.0], [1.60284402E12, 1782.0], [1.6028436E12, 326.0], [1.602843E12, 419.0], [1.60284462E12, 328.0], [1.60284258E12, 310.0], [1.6028448E12, 222.0], [1.60284198E12, 226.0], [1.6028442E12, 235.0], [1.60284216E12, 213.0], [1.60284378E12, 204.0], [1.60284318E12, 305.0], [1.60284336E12, 211.43199975013732], [1.60284276E12, 236.0], [1.60284438E12, 443.0], [1.60284456E12, 415.0], [1.60284396E12, 72258.0], [1.60284498E12, 205.74499968886374], [1.60284192E12, 236.08799994468689], [1.60284354E12, 227.3579992222786], [1.60284294E12, 97096.0], [1.60284312E12, 1372.0], [1.60284474E12, 73664.0], [1.60284252E12, 74666.0], [1.60284414E12, 69756.0], [1.6028421E12, 207.79999947547913], [1.60284432E12, 218.0], [1.60284372E12, 220.169999730587], [1.6028433E12, 823.0], [1.6028427E12, 223.0], [1.60284288E12, 73609.0], [1.6028445E12, 277.0], [1.60284228E12, 71389.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60284186E12, 238.62080028533936], [1.60284408E12, 72840.0], [1.60284348E12, 223.59320008277894], [1.60284306E12, 299.0], [1.60284246E12, 73110.0], [1.60284468E12, 201.0], [1.60284264E12, 2024.0], [1.60284204E12, 208.61330005407333], [1.60284366E12, 215.24710004091264], [1.60284384E12, 316.0], [1.6028451E12, 70833.0], [1.60284324E12, 250.0], [1.60284486E12, 216.0], [1.60284282E12, 46513.0], [1.60284222E12, 351.0], [1.60284444E12, 329.0], [1.6028424E12, 73369.0], [1.60284402E12, 1782.0], [1.6028436E12, 326.0], [1.602843E12, 419.0], [1.60284462E12, 328.0], [1.60284258E12, 310.0], [1.6028448E12, 222.0], [1.60284198E12, 226.0392000389099], [1.6028442E12, 235.0], [1.60284216E12, 213.0], [1.60284378E12, 204.0], [1.60284318E12, 305.0], [1.60284336E12, 212.37520009994506], [1.60284276E12, 236.0], [1.60284438E12, 443.0], [1.60284456E12, 415.0], [1.60284396E12, 72258.0], [1.60284498E12, 206.30650004148484], [1.60284192E12, 236.29680002212524], [1.60284354E12, 230.29380031108857], [1.60284294E12, 97096.0], [1.60284312E12, 1372.0], [1.60284474E12, 73664.0], [1.60284252E12, 74666.0], [1.60284414E12, 69756.0], [1.6028421E12, 212.0050004720688], [1.60284432E12, 218.0], [1.60284372E12, 221.1870001077652], [1.6028433E12, 823.0], [1.6028427E12, 223.0], [1.60284288E12, 73609.0], [1.6028445E12, 277.0], [1.60284228E12, 71389.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60284186E12, 237.4239996433258], [1.60284408E12, 72840.0], [1.60284348E12, 223.24599989652634], [1.60284306E12, 299.0], [1.60284246E12, 73110.0], [1.60284468E12, 201.0], [1.60284264E12, 2024.0], [1.60284204E12, 208.38649993240833], [1.60284366E12, 215.0754999488592], [1.60284384E12, 316.0], [1.6028451E12, 70833.0], [1.60284324E12, 250.0], [1.60284486E12, 216.0], [1.60284282E12, 46513.0], [1.60284222E12, 351.0], [1.60284444E12, 329.0], [1.6028424E12, 73369.0], [1.60284402E12, 1782.0], [1.6028436E12, 326.0], [1.602843E12, 419.0], [1.60284462E12, 328.0], [1.60284258E12, 310.0], [1.6028448E12, 222.0], [1.60284198E12, 226.0], [1.6028442E12, 235.0], [1.60284216E12, 213.0], [1.60284378E12, 204.0], [1.60284318E12, 305.0], [1.60284336E12, 211.95599987506867], [1.60284276E12, 236.0], [1.60284438E12, 443.0], [1.60284456E12, 415.0], [1.60284396E12, 72258.0], [1.60284498E12, 206.13249994814396], [1.60284192E12, 236.20399997234344], [1.60284354E12, 228.9889996111393], [1.60284294E12, 97096.0], [1.60284312E12, 1372.0], [1.60284474E12, 73664.0], [1.60284252E12, 74666.0], [1.60284414E12, 69756.0], [1.6028421E12, 210.02499940991402], [1.60284432E12, 218.0], [1.60284372E12, 220.7349998652935], [1.6028433E12, 823.0], [1.6028427E12, 223.0], [1.60284288E12, 73609.0], [1.6028445E12, 277.0], [1.60284228E12, 71389.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60284186E12, 225.0], [1.60284408E12, 72840.0], [1.60284348E12, 208.0], [1.60284306E12, 299.0], [1.60284246E12, 73110.0], [1.60284468E12, 201.0], [1.60284264E12, 2024.0], [1.60284204E12, 202.0], [1.60284366E12, 207.0], [1.60284384E12, 316.0], [1.6028451E12, 70833.0], [1.60284324E12, 250.0], [1.60284486E12, 216.0], [1.60284282E12, 46513.0], [1.60284222E12, 351.0], [1.60284444E12, 329.0], [1.6028424E12, 73369.0], [1.60284402E12, 1782.0], [1.6028436E12, 326.0], [1.602843E12, 419.0], [1.60284462E12, 328.0], [1.60284258E12, 310.0], [1.6028448E12, 222.0], [1.60284198E12, 226.0], [1.6028442E12, 235.0], [1.60284216E12, 213.0], [1.60284378E12, 193.0], [1.60284318E12, 305.0], [1.60284336E12, 210.0], [1.60284276E12, 236.0], [1.60284438E12, 443.0], [1.60284456E12, 415.0], [1.60284396E12, 72258.0], [1.60284498E12, 196.0], [1.60284192E12, 224.0], [1.60284354E12, 213.0], [1.60284294E12, 97096.0], [1.60284312E12, 1372.0], [1.60284474E12, 73664.0], [1.60284252E12, 74666.0], [1.60284414E12, 69756.0], [1.6028421E12, 196.0], [1.60284432E12, 218.0], [1.60284372E12, 208.0], [1.6028433E12, 823.0], [1.6028427E12, 223.0], [1.60284288E12, 73609.0], [1.6028445E12, 277.0], [1.60284228E12, 71389.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60284186E12, 926.0], [1.60284408E12, 73769.0], [1.60284348E12, 776.0], [1.60284306E12, 943.0], [1.60284246E12, 193467.5], [1.60284468E12, 956.5], [1.60284264E12, 37908.0], [1.60284204E12, 621.0], [1.60284366E12, 727.5], [1.60284384E12, 726.0], [1.6028451E12, 74343.0], [1.60284324E12, 1168.5], [1.60284486E12, 513.0], [1.60284282E12, 59775.5], [1.60284222E12, 1172.0], [1.60284444E12, 3763.0], [1.6028424E12, 74133.5], [1.60284402E12, 73364.5], [1.6028436E12, 1963.5], [1.602843E12, 60297.5], [1.60284462E12, 1186.0], [1.60284258E12, 136318.0], [1.6028448E12, 529.0], [1.60284198E12, 680.0], [1.6028442E12, 38871.5], [1.60284216E12, 631.0], [1.60284378E12, 527.0], [1.60284318E12, 719.0], [1.60284336E12, 464.0], [1.60284276E12, 26122.0], [1.60284438E12, 72260.0], [1.60284456E12, 72222.0], [1.60284396E12, 73335.5], [1.60284498E12, 821.0], [1.60284192E12, 771.0], [1.60284354E12, 797.0], [1.60284294E12, 171558.0], [1.60284312E12, 73174.0], [1.60284474E12, 73982.0], [1.60284252E12, 117201.5], [1.60284414E12, 252367.5], [1.6028421E12, 647.0], [1.60284432E12, 14447.0], [1.60284372E12, 761.5], [1.6028433E12, 74917.0], [1.6028427E12, 69948.0], [1.60284288E12, 95658.5], [1.6028445E12, 425.0], [1.60284228E12, 73013.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028451E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 282.0, "minX": 1.0, "maxY": 1533.0, "series": [{"data": [[2.0, 1533.0], [3.0, 837.5], [4.0, 868.5], [5.0, 995.0], [6.0, 935.5], [7.0, 827.5], [8.0, 961.0], [9.0, 934.0], [10.0, 936.5], [11.0, 937.0], [12.0, 739.5], [13.0, 644.0], [14.0, 488.5], [15.0, 579.0], [1.0, 1422.5], [16.0, 472.5], [17.0, 403.0], [18.0, 321.5], [19.0, 347.0], [20.0, 286.0], [21.0, 401.5], [22.0, 530.5], [23.0, 290.0], [24.0, 282.0], [25.0, 295.0], [26.0, 385.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 282.0, "minX": 1.0, "maxY": 1529.5, "series": [{"data": [[2.0, 1529.5], [3.0, 834.5], [4.0, 865.0], [5.0, 967.0], [6.0, 927.5], [7.0, 808.0], [8.0, 886.0], [9.0, 885.0], [10.0, 845.5], [11.0, 918.0], [12.0, 711.5], [13.0, 636.0], [14.0, 487.5], [15.0, 573.0], [1.0, 1417.5], [16.0, 471.5], [17.0, 402.5], [18.0, 321.0], [19.0, 347.0], [20.0, 286.0], [21.0, 401.0], [22.0, 530.0], [23.0, 290.0], [24.0, 282.0], [25.0, 295.0], [26.0, 385.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60284186E12, "maxY": 9.433333333333334, "series": [{"data": [[1.60284186E12, 3.25], [1.60284408E12, 0.05], [1.60284216E12, 0.9833333333333333], [1.60284378E12, 5.65], [1.60284348E12, 7.216666666666667], [1.60284318E12, 0.7666666666666667], [1.60284336E12, 2.1666666666666665], [1.60284306E12, 0.4166666666666667], [1.60284246E12, 0.13333333333333333], [1.60284468E12, 1.5], [1.60284276E12, 0.38333333333333336], [1.60284438E12, 0.08333333333333333], [1.60284456E12, 0.11666666666666667], [1.60284264E12, 0.03333333333333333], [1.60284396E12, 0.1], [1.60284498E12, 7.2], [1.60284204E12, 9.433333333333334], [1.60284366E12, 7.133333333333334], [1.60284384E12, 0.75], [1.60284192E12, 3.8666666666666667], [1.60284354E12, 7.75], [1.60284324E12, 1.0666666666666667], [1.60284486E12, 1.55], [1.60284294E12, 0.1], [1.60284312E12, 0.05], [1.60284474E12, 0.03333333333333333], [1.60284282E12, 0.03333333333333333], [1.60284222E12, 0.75], [1.60284444E12, 0.2], [1.60284252E12, 0.06666666666666667], [1.60284414E12, 0.13333333333333333], [1.6028421E12, 9.15], [1.60284432E12, 0.4666666666666667], [1.6028424E12, 0.06666666666666667], [1.60284402E12, 0.1], [1.60284372E12, 9.4], [1.6028436E12, 0.2], [1.6028433E12, 0.1], [1.6028427E12, 0.16666666666666666], [1.602843E12, 0.1], [1.60284462E12, 0.38333333333333336], [1.60284258E12, 0.11666666666666667], [1.6028448E12, 0.9166666666666666], [1.60284288E12, 0.06666666666666667], [1.6028445E12, 0.31666666666666665], [1.60284198E12, 1.6833333333333333], [1.6028442E12, 0.2], [1.60284228E12, 0.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60284498E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60284186E12, "maxY": 9.433333333333334, "series": [{"data": [[1.60284186E12, 3.1], [1.60284408E12, 0.05], [1.60284348E12, 7.216666666666667], [1.60284306E12, 0.4166666666666667], [1.60284246E12, 0.13333333333333333], [1.60284468E12, 1.5], [1.60284264E12, 0.03333333333333333], [1.60284204E12, 9.433333333333334], [1.60284366E12, 7.133333333333334], [1.60284384E12, 0.75], [1.6028451E12, 0.13333333333333333], [1.60284324E12, 1.0666666666666667], [1.60284486E12, 1.55], [1.60284282E12, 0.03333333333333333], [1.60284222E12, 0.75], [1.60284444E12, 0.2], [1.6028424E12, 0.06666666666666667], [1.60284402E12, 0.1], [1.6028436E12, 0.2], [1.602843E12, 0.1], [1.60284462E12, 0.38333333333333336], [1.60284258E12, 0.11666666666666667], [1.6028448E12, 0.9166666666666666], [1.60284198E12, 1.6833333333333333], [1.6028442E12, 0.2], [1.60284216E12, 0.9833333333333333], [1.60284378E12, 5.65], [1.60284318E12, 0.7666666666666667], [1.60284336E12, 2.1666666666666665], [1.60284276E12, 0.38333333333333336], [1.60284438E12, 0.08333333333333333], [1.60284456E12, 0.11666666666666667], [1.60284396E12, 0.1], [1.60284498E12, 7.233333333333333], [1.60284192E12, 3.85], [1.60284354E12, 7.75], [1.60284294E12, 0.1], [1.60284312E12, 0.05], [1.60284474E12, 0.03333333333333333], [1.60284252E12, 0.06666666666666667], [1.60284414E12, 0.13333333333333333], [1.6028421E12, 9.15], [1.60284432E12, 0.4666666666666667], [1.60284372E12, 9.4], [1.6028433E12, 0.1], [1.6028427E12, 0.16666666666666666], [1.60284288E12, 0.06666666666666667], [1.6028445E12, 0.31666666666666665], [1.60284228E12, 0.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028451E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60284186E12, "maxY": 9.433333333333334, "series": [{"data": [[1.60284186E12, 3.1], [1.60284408E12, 0.05], [1.60284348E12, 7.216666666666667], [1.60284306E12, 0.4166666666666667], [1.60284246E12, 0.13333333333333333], [1.60284468E12, 1.5], [1.60284264E12, 0.03333333333333333], [1.60284204E12, 9.433333333333334], [1.60284366E12, 7.133333333333334], [1.60284384E12, 0.75], [1.6028451E12, 0.13333333333333333], [1.60284324E12, 1.0666666666666667], [1.60284486E12, 1.55], [1.60284282E12, 0.03333333333333333], [1.60284222E12, 0.75], [1.60284444E12, 0.2], [1.6028424E12, 0.06666666666666667], [1.60284402E12, 0.1], [1.6028436E12, 0.2], [1.602843E12, 0.1], [1.60284462E12, 0.38333333333333336], [1.60284258E12, 0.11666666666666667], [1.6028448E12, 0.9166666666666666], [1.60284198E12, 1.6833333333333333], [1.6028442E12, 0.2], [1.60284216E12, 0.9833333333333333], [1.60284378E12, 5.65], [1.60284318E12, 0.7666666666666667], [1.60284336E12, 2.1666666666666665], [1.60284276E12, 0.38333333333333336], [1.60284438E12, 0.08333333333333333], [1.60284456E12, 0.11666666666666667], [1.60284396E12, 0.1], [1.60284498E12, 7.233333333333333], [1.60284192E12, 3.85], [1.60284354E12, 7.75], [1.60284294E12, 0.1], [1.60284312E12, 0.05], [1.60284474E12, 0.03333333333333333], [1.60284252E12, 0.06666666666666667], [1.60284414E12, 0.13333333333333333], [1.6028421E12, 9.15], [1.60284432E12, 0.4666666666666667], [1.60284372E12, 9.4], [1.6028433E12, 0.1], [1.6028427E12, 0.16666666666666666], [1.60284288E12, 0.06666666666666667], [1.6028445E12, 0.31666666666666665], [1.60284228E12, 0.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028451E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60284186E12, "maxY": 9.433333333333334, "series": [{"data": [[1.60284186E12, 3.1], [1.60284408E12, 0.05], [1.60284348E12, 7.216666666666667], [1.60284306E12, 0.4166666666666667], [1.60284246E12, 0.13333333333333333], [1.60284468E12, 1.5], [1.60284264E12, 0.03333333333333333], [1.60284204E12, 9.433333333333334], [1.60284366E12, 7.133333333333334], [1.60284384E12, 0.75], [1.6028451E12, 0.13333333333333333], [1.60284324E12, 1.0666666666666667], [1.60284486E12, 1.55], [1.60284282E12, 0.03333333333333333], [1.60284222E12, 0.75], [1.60284444E12, 0.2], [1.6028424E12, 0.06666666666666667], [1.60284402E12, 0.1], [1.6028436E12, 0.2], [1.602843E12, 0.1], [1.60284462E12, 0.38333333333333336], [1.60284258E12, 0.11666666666666667], [1.6028448E12, 0.9166666666666666], [1.60284198E12, 1.6833333333333333], [1.6028442E12, 0.2], [1.60284216E12, 0.9833333333333333], [1.60284378E12, 5.65], [1.60284318E12, 0.7666666666666667], [1.60284336E12, 2.1666666666666665], [1.60284276E12, 0.38333333333333336], [1.60284438E12, 0.08333333333333333], [1.60284456E12, 0.11666666666666667], [1.60284396E12, 0.1], [1.60284498E12, 7.233333333333333], [1.60284192E12, 3.85], [1.60284354E12, 7.75], [1.60284294E12, 0.1], [1.60284312E12, 0.05], [1.60284474E12, 0.03333333333333333], [1.60284252E12, 0.06666666666666667], [1.60284414E12, 0.13333333333333333], [1.6028421E12, 9.15], [1.60284432E12, 0.4666666666666667], [1.60284372E12, 9.4], [1.6028433E12, 0.1], [1.6028427E12, 0.16666666666666666], [1.60284288E12, 0.06666666666666667], [1.6028445E12, 0.31666666666666665], [1.60284228E12, 0.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028451E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

