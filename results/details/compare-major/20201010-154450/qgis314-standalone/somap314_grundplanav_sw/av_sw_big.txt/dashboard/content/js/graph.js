/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 190.0, "minX": 0.0, "maxY": 388882.0, "series": [{"data": [[0.0, 190.0], [0.1, 196.0], [0.2, 198.0], [0.3, 200.0], [0.4, 202.0], [0.5, 202.0], [0.6, 204.0], [0.7, 205.0], [0.8, 206.0], [0.9, 207.0], [1.0, 208.0], [1.1, 209.0], [1.2, 209.0], [1.3, 209.0], [1.4, 210.0], [1.5, 211.0], [1.6, 212.0], [1.7, 213.0], [1.8, 214.0], [1.9, 215.0], [2.0, 216.0], [2.1, 217.0], [2.2, 218.0], [2.3, 219.0], [2.4, 220.0], [2.5, 220.0], [2.6, 221.0], [2.7, 222.0], [2.8, 223.0], [2.9, 225.0], [3.0, 225.0], [3.1, 226.0], [3.2, 227.0], [3.3, 227.0], [3.4, 228.0], [3.5, 228.0], [3.6, 229.0], [3.7, 229.0], [3.8, 230.0], [3.9, 231.0], [4.0, 231.0], [4.1, 231.0], [4.2, 232.0], [4.3, 232.0], [4.4, 232.0], [4.5, 233.0], [4.6, 233.0], [4.7, 233.0], [4.8, 233.0], [4.9, 234.0], [5.0, 234.0], [5.1, 235.0], [5.2, 235.0], [5.3, 235.0], [5.4, 235.0], [5.5, 236.0], [5.6, 236.0], [5.7, 236.0], [5.8, 237.0], [5.9, 237.0], [6.0, 237.0], [6.1, 238.0], [6.2, 238.0], [6.3, 238.0], [6.4, 239.0], [6.5, 239.0], [6.6, 240.0], [6.7, 240.0], [6.8, 241.0], [6.9, 241.0], [7.0, 241.0], [7.1, 242.0], [7.2, 242.0], [7.3, 243.0], [7.4, 243.0], [7.5, 243.0], [7.6, 244.0], [7.7, 244.0], [7.8, 245.0], [7.9, 245.0], [8.0, 246.0], [8.1, 246.0], [8.2, 247.0], [8.3, 247.0], [8.4, 248.0], [8.5, 249.0], [8.6, 249.0], [8.7, 250.0], [8.8, 251.0], [8.9, 252.0], [9.0, 252.0], [9.1, 252.0], [9.2, 253.0], [9.3, 254.0], [9.4, 254.0], [9.5, 255.0], [9.6, 256.0], [9.7, 258.0], [9.8, 259.0], [9.9, 261.0], [10.0, 261.0], [10.1, 262.0], [10.2, 263.0], [10.3, 264.0], [10.4, 264.0], [10.5, 266.0], [10.6, 268.0], [10.7, 268.0], [10.8, 270.0], [10.9, 271.0], [11.0, 273.0], [11.1, 275.0], [11.2, 276.0], [11.3, 278.0], [11.4, 279.0], [11.5, 281.0], [11.6, 282.0], [11.7, 283.0], [11.8, 284.0], [11.9, 285.0], [12.0, 286.0], [12.1, 288.0], [12.2, 288.0], [12.3, 288.0], [12.4, 289.0], [12.5, 291.0], [12.6, 291.0], [12.7, 292.0], [12.8, 293.0], [12.9, 294.0], [13.0, 296.0], [13.1, 297.0], [13.2, 298.0], [13.3, 300.0], [13.4, 301.0], [13.5, 301.0], [13.6, 303.0], [13.7, 304.0], [13.8, 305.0], [13.9, 306.0], [14.0, 307.0], [14.1, 308.0], [14.2, 309.0], [14.3, 310.0], [14.4, 310.0], [14.5, 311.0], [14.6, 312.0], [14.7, 313.0], [14.8, 314.0], [14.9, 315.0], [15.0, 316.0], [15.1, 317.0], [15.2, 317.0], [15.3, 319.0], [15.4, 319.0], [15.5, 319.0], [15.6, 320.0], [15.7, 321.0], [15.8, 322.0], [15.9, 322.0], [16.0, 323.0], [16.1, 324.0], [16.2, 324.0], [16.3, 325.0], [16.4, 326.0], [16.5, 326.0], [16.6, 327.0], [16.7, 328.0], [16.8, 328.0], [16.9, 329.0], [17.0, 329.0], [17.1, 330.0], [17.2, 330.0], [17.3, 330.0], [17.4, 331.0], [17.5, 331.0], [17.6, 331.0], [17.7, 332.0], [17.8, 332.0], [17.9, 333.0], [18.0, 333.0], [18.1, 333.0], [18.2, 334.0], [18.3, 335.0], [18.4, 335.0], [18.5, 336.0], [18.6, 337.0], [18.7, 338.0], [18.8, 338.0], [18.9, 338.0], [19.0, 339.0], [19.1, 339.0], [19.2, 340.0], [19.3, 340.0], [19.4, 341.0], [19.5, 341.0], [19.6, 341.0], [19.7, 342.0], [19.8, 342.0], [19.9, 342.0], [20.0, 343.0], [20.1, 344.0], [20.2, 344.0], [20.3, 345.0], [20.4, 345.0], [20.5, 345.0], [20.6, 346.0], [20.7, 346.0], [20.8, 347.0], [20.9, 347.0], [21.0, 348.0], [21.1, 348.0], [21.2, 350.0], [21.3, 350.0], [21.4, 351.0], [21.5, 351.0], [21.6, 352.0], [21.7, 352.0], [21.8, 353.0], [21.9, 354.0], [22.0, 354.0], [22.1, 355.0], [22.2, 355.0], [22.3, 356.0], [22.4, 357.0], [22.5, 358.0], [22.6, 358.0], [22.7, 359.0], [22.8, 360.0], [22.9, 360.0], [23.0, 360.0], [23.1, 362.0], [23.2, 363.0], [23.3, 363.0], [23.4, 364.0], [23.5, 366.0], [23.6, 367.0], [23.7, 369.0], [23.8, 370.0], [23.9, 370.0], [24.0, 371.0], [24.1, 371.0], [24.2, 372.0], [24.3, 373.0], [24.4, 374.0], [24.5, 375.0], [24.6, 377.0], [24.7, 377.0], [24.8, 379.0], [24.9, 381.0], [25.0, 382.0], [25.1, 382.0], [25.2, 383.0], [25.3, 385.0], [25.4, 385.0], [25.5, 386.0], [25.6, 387.0], [25.7, 388.0], [25.8, 389.0], [25.9, 389.0], [26.0, 390.0], [26.1, 391.0], [26.2, 392.0], [26.3, 393.0], [26.4, 394.0], [26.5, 395.0], [26.6, 395.0], [26.7, 397.0], [26.8, 397.0], [26.9, 398.0], [27.0, 399.0], [27.1, 399.0], [27.2, 401.0], [27.3, 402.0], [27.4, 402.0], [27.5, 402.0], [27.6, 403.0], [27.7, 404.0], [27.8, 406.0], [27.9, 408.0], [28.0, 409.0], [28.1, 410.0], [28.2, 411.0], [28.3, 412.0], [28.4, 413.0], [28.5, 414.0], [28.6, 416.0], [28.7, 416.0], [28.8, 417.0], [28.9, 419.0], [29.0, 420.0], [29.1, 422.0], [29.2, 422.0], [29.3, 423.0], [29.4, 424.0], [29.5, 425.0], [29.6, 426.0], [29.7, 428.0], [29.8, 429.0], [29.9, 430.0], [30.0, 431.0], [30.1, 433.0], [30.2, 435.0], [30.3, 435.0], [30.4, 437.0], [30.5, 438.0], [30.6, 440.0], [30.7, 441.0], [30.8, 442.0], [30.9, 443.0], [31.0, 444.0], [31.1, 445.0], [31.2, 447.0], [31.3, 447.0], [31.4, 448.0], [31.5, 449.0], [31.6, 451.0], [31.7, 452.0], [31.8, 453.0], [31.9, 453.0], [32.0, 454.0], [32.1, 455.0], [32.2, 457.0], [32.3, 458.0], [32.4, 459.0], [32.5, 460.0], [32.6, 461.0], [32.7, 463.0], [32.8, 464.0], [32.9, 465.0], [33.0, 466.0], [33.1, 467.0], [33.2, 469.0], [33.3, 470.0], [33.4, 471.0], [33.5, 471.0], [33.6, 472.0], [33.7, 475.0], [33.8, 476.0], [33.9, 477.0], [34.0, 478.0], [34.1, 479.0], [34.2, 480.0], [34.3, 481.0], [34.4, 482.0], [34.5, 483.0], [34.6, 483.0], [34.7, 484.0], [34.8, 486.0], [34.9, 487.0], [35.0, 490.0], [35.1, 491.0], [35.2, 492.0], [35.3, 494.0], [35.4, 495.0], [35.5, 496.0], [35.6, 498.0], [35.7, 499.0], [35.8, 502.0], [35.9, 503.0], [36.0, 505.0], [36.1, 507.0], [36.2, 508.0], [36.3, 510.0], [36.4, 512.0], [36.5, 515.0], [36.6, 516.0], [36.7, 517.0], [36.8, 518.0], [36.9, 520.0], [37.0, 521.0], [37.1, 522.0], [37.2, 523.0], [37.3, 526.0], [37.4, 527.0], [37.5, 529.0], [37.6, 530.0], [37.7, 531.0], [37.8, 532.0], [37.9, 533.0], [38.0, 535.0], [38.1, 536.0], [38.2, 538.0], [38.3, 541.0], [38.4, 543.0], [38.5, 545.0], [38.6, 546.0], [38.7, 548.0], [38.8, 549.0], [38.9, 550.0], [39.0, 553.0], [39.1, 555.0], [39.2, 556.0], [39.3, 558.0], [39.4, 560.0], [39.5, 560.0], [39.6, 562.0], [39.7, 563.0], [39.8, 565.0], [39.9, 566.0], [40.0, 567.0], [40.1, 570.0], [40.2, 571.0], [40.3, 572.0], [40.4, 572.0], [40.5, 574.0], [40.6, 577.0], [40.7, 578.0], [40.8, 580.0], [40.9, 582.0], [41.0, 583.0], [41.1, 584.0], [41.2, 587.0], [41.3, 588.0], [41.4, 589.0], [41.5, 590.0], [41.6, 591.0], [41.7, 593.0], [41.8, 594.0], [41.9, 594.0], [42.0, 596.0], [42.1, 598.0], [42.2, 600.0], [42.3, 603.0], [42.4, 605.0], [42.5, 606.0], [42.6, 608.0], [42.7, 611.0], [42.8, 612.0], [42.9, 613.0], [43.0, 616.0], [43.1, 618.0], [43.2, 620.0], [43.3, 622.0], [43.4, 624.0], [43.5, 625.0], [43.6, 626.0], [43.7, 628.0], [43.8, 629.0], [43.9, 631.0], [44.0, 632.0], [44.1, 634.0], [44.2, 634.0], [44.3, 636.0], [44.4, 638.0], [44.5, 639.0], [44.6, 640.0], [44.7, 642.0], [44.8, 643.0], [44.9, 644.0], [45.0, 645.0], [45.1, 647.0], [45.2, 648.0], [45.3, 650.0], [45.4, 651.0], [45.5, 653.0], [45.6, 653.0], [45.7, 655.0], [45.8, 657.0], [45.9, 659.0], [46.0, 659.0], [46.1, 661.0], [46.2, 662.0], [46.3, 663.0], [46.4, 664.0], [46.5, 666.0], [46.6, 667.0], [46.7, 668.0], [46.8, 670.0], [46.9, 672.0], [47.0, 674.0], [47.1, 677.0], [47.2, 678.0], [47.3, 680.0], [47.4, 684.0], [47.5, 685.0], [47.6, 688.0], [47.7, 692.0], [47.8, 693.0], [47.9, 695.0], [48.0, 697.0], [48.1, 698.0], [48.2, 700.0], [48.3, 702.0], [48.4, 703.0], [48.5, 704.0], [48.6, 707.0], [48.7, 709.0], [48.8, 711.0], [48.9, 712.0], [49.0, 715.0], [49.1, 716.0], [49.2, 718.0], [49.3, 721.0], [49.4, 723.0], [49.5, 726.0], [49.6, 727.0], [49.7, 730.0], [49.8, 731.0], [49.9, 732.0], [50.0, 733.0], [50.1, 738.0], [50.2, 739.0], [50.3, 741.0], [50.4, 742.0], [50.5, 745.0], [50.6, 746.0], [50.7, 749.0], [50.8, 750.0], [50.9, 752.0], [51.0, 755.0], [51.1, 757.0], [51.2, 759.0], [51.3, 760.0], [51.4, 762.0], [51.5, 764.0], [51.6, 767.0], [51.7, 771.0], [51.8, 772.0], [51.9, 773.0], [52.0, 774.0], [52.1, 776.0], [52.2, 779.0], [52.3, 781.0], [52.4, 783.0], [52.5, 787.0], [52.6, 790.0], [52.7, 792.0], [52.8, 793.0], [52.9, 795.0], [53.0, 797.0], [53.1, 802.0], [53.2, 803.0], [53.3, 805.0], [53.4, 806.0], [53.5, 807.0], [53.6, 810.0], [53.7, 811.0], [53.8, 813.0], [53.9, 816.0], [54.0, 817.0], [54.1, 819.0], [54.2, 822.0], [54.3, 824.0], [54.4, 827.0], [54.5, 829.0], [54.6, 830.0], [54.7, 831.0], [54.8, 833.0], [54.9, 835.0], [55.0, 837.0], [55.1, 840.0], [55.2, 840.0], [55.3, 843.0], [55.4, 846.0], [55.5, 849.0], [55.6, 851.0], [55.7, 853.0], [55.8, 857.0], [55.9, 858.0], [56.0, 861.0], [56.1, 864.0], [56.2, 866.0], [56.3, 870.0], [56.4, 873.0], [56.5, 875.0], [56.6, 879.0], [56.7, 882.0], [56.8, 888.0], [56.9, 891.0], [57.0, 894.0], [57.1, 895.0], [57.2, 897.0], [57.3, 899.0], [57.4, 901.0], [57.5, 904.0], [57.6, 905.0], [57.7, 910.0], [57.8, 911.0], [57.9, 914.0], [58.0, 917.0], [58.1, 920.0], [58.2, 921.0], [58.3, 923.0], [58.4, 925.0], [58.5, 930.0], [58.6, 932.0], [58.7, 935.0], [58.8, 936.0], [58.9, 939.0], [59.0, 947.0], [59.1, 949.0], [59.2, 950.0], [59.3, 950.0], [59.4, 952.0], [59.5, 954.0], [59.6, 956.0], [59.7, 959.0], [59.8, 964.0], [59.9, 965.0], [60.0, 967.0], [60.1, 970.0], [60.2, 972.0], [60.3, 976.0], [60.4, 978.0], [60.5, 981.0], [60.6, 984.0], [60.7, 986.0], [60.8, 987.0], [60.9, 989.0], [61.0, 991.0], [61.1, 994.0], [61.2, 998.0], [61.3, 1002.0], [61.4, 1006.0], [61.5, 1009.0], [61.6, 1014.0], [61.7, 1017.0], [61.8, 1021.0], [61.9, 1022.0], [62.0, 1025.0], [62.1, 1029.0], [62.2, 1035.0], [62.3, 1038.0], [62.4, 1039.0], [62.5, 1041.0], [62.6, 1044.0], [62.7, 1046.0], [62.8, 1049.0], [62.9, 1050.0], [63.0, 1054.0], [63.1, 1057.0], [63.2, 1062.0], [63.3, 1064.0], [63.4, 1066.0], [63.5, 1069.0], [63.6, 1072.0], [63.7, 1074.0], [63.8, 1078.0], [63.9, 1081.0], [64.0, 1085.0], [64.1, 1087.0], [64.2, 1090.0], [64.3, 1093.0], [64.4, 1098.0], [64.5, 1101.0], [64.6, 1105.0], [64.7, 1109.0], [64.8, 1115.0], [64.9, 1120.0], [65.0, 1123.0], [65.1, 1126.0], [65.2, 1132.0], [65.3, 1136.0], [65.4, 1138.0], [65.5, 1141.0], [65.6, 1145.0], [65.7, 1148.0], [65.8, 1151.0], [65.9, 1157.0], [66.0, 1160.0], [66.1, 1161.0], [66.2, 1165.0], [66.3, 1167.0], [66.4, 1170.0], [66.5, 1173.0], [66.6, 1175.0], [66.7, 1177.0], [66.8, 1178.0], [66.9, 1181.0], [67.0, 1183.0], [67.1, 1187.0], [67.2, 1189.0], [67.3, 1191.0], [67.4, 1197.0], [67.5, 1198.0], [67.6, 1201.0], [67.7, 1206.0], [67.8, 1207.0], [67.9, 1210.0], [68.0, 1216.0], [68.1, 1220.0], [68.2, 1222.0], [68.3, 1224.0], [68.4, 1227.0], [68.5, 1232.0], [68.6, 1236.0], [68.7, 1241.0], [68.8, 1247.0], [68.9, 1250.0], [69.0, 1254.0], [69.1, 1256.0], [69.2, 1258.0], [69.3, 1262.0], [69.4, 1265.0], [69.5, 1270.0], [69.6, 1270.0], [69.7, 1273.0], [69.8, 1277.0], [69.9, 1282.0], [70.0, 1287.0], [70.1, 1293.0], [70.2, 1297.0], [70.3, 1300.0], [70.4, 1303.0], [70.5, 1306.0], [70.6, 1311.0], [70.7, 1313.0], [70.8, 1316.0], [70.9, 1320.0], [71.0, 1322.0], [71.1, 1330.0], [71.2, 1332.0], [71.3, 1338.0], [71.4, 1343.0], [71.5, 1346.0], [71.6, 1353.0], [71.7, 1357.0], [71.8, 1360.0], [71.9, 1362.0], [72.0, 1366.0], [72.1, 1369.0], [72.2, 1374.0], [72.3, 1376.0], [72.4, 1379.0], [72.5, 1390.0], [72.6, 1394.0], [72.7, 1403.0], [72.8, 1405.0], [72.9, 1413.0], [73.0, 1421.0], [73.1, 1426.0], [73.2, 1429.0], [73.3, 1431.0], [73.4, 1436.0], [73.5, 1439.0], [73.6, 1441.0], [73.7, 1445.0], [73.8, 1449.0], [73.9, 1458.0], [74.0, 1461.0], [74.1, 1465.0], [74.2, 1468.0], [74.3, 1474.0], [74.4, 1478.0], [74.5, 1485.0], [74.6, 1489.0], [74.7, 1494.0], [74.8, 1499.0], [74.9, 1505.0], [75.0, 1507.0], [75.1, 1514.0], [75.2, 1518.0], [75.3, 1521.0], [75.4, 1530.0], [75.5, 1535.0], [75.6, 1544.0], [75.7, 1549.0], [75.8, 1552.0], [75.9, 1558.0], [76.0, 1568.0], [76.1, 1571.0], [76.2, 1575.0], [76.3, 1580.0], [76.4, 1585.0], [76.5, 1593.0], [76.6, 1602.0], [76.7, 1604.0], [76.8, 1612.0], [76.9, 1619.0], [77.0, 1621.0], [77.1, 1625.0], [77.2, 1630.0], [77.3, 1631.0], [77.4, 1639.0], [77.5, 1646.0], [77.6, 1654.0], [77.7, 1658.0], [77.8, 1659.0], [77.9, 1665.0], [78.0, 1672.0], [78.1, 1677.0], [78.2, 1689.0], [78.3, 1697.0], [78.4, 1699.0], [78.5, 1707.0], [78.6, 1715.0], [78.7, 1721.0], [78.8, 1724.0], [78.9, 1728.0], [79.0, 1745.0], [79.1, 1748.0], [79.2, 1754.0], [79.3, 1759.0], [79.4, 1762.0], [79.5, 1767.0], [79.6, 1778.0], [79.7, 1782.0], [79.8, 1787.0], [79.9, 1795.0], [80.0, 1800.0], [80.1, 1808.0], [80.2, 1815.0], [80.3, 1824.0], [80.4, 1835.0], [80.5, 1846.0], [80.6, 1854.0], [80.7, 1859.0], [80.8, 1860.0], [80.9, 1870.0], [81.0, 1877.0], [81.1, 1886.0], [81.2, 1895.0], [81.3, 1901.0], [81.4, 1907.0], [81.5, 1918.0], [81.6, 1927.0], [81.7, 1935.0], [81.8, 1944.0], [81.9, 1954.0], [82.0, 1966.0], [82.1, 1972.0], [82.2, 1979.0], [82.3, 1986.0], [82.4, 1994.0], [82.5, 2010.0], [82.6, 2019.0], [82.7, 2031.0], [82.8, 2044.0], [82.9, 2062.0], [83.0, 2070.0], [83.1, 2075.0], [83.2, 2081.0], [83.3, 2090.0], [83.4, 2094.0], [83.5, 2106.0], [83.6, 2120.0], [83.7, 2128.0], [83.8, 2138.0], [83.9, 2152.0], [84.0, 2162.0], [84.1, 2173.0], [84.2, 2183.0], [84.3, 2190.0], [84.4, 2203.0], [84.5, 2209.0], [84.6, 2219.0], [84.7, 2234.0], [84.8, 2241.0], [84.9, 2250.0], [85.0, 2266.0], [85.1, 2273.0], [85.2, 2284.0], [85.3, 2303.0], [85.4, 2314.0], [85.5, 2334.0], [85.6, 2349.0], [85.7, 2364.0], [85.8, 2380.0], [85.9, 2393.0], [86.0, 2405.0], [86.1, 2417.0], [86.2, 2421.0], [86.3, 2432.0], [86.4, 2444.0], [86.5, 2451.0], [86.6, 2469.0], [86.7, 2479.0], [86.8, 2491.0], [86.9, 2498.0], [87.0, 2517.0], [87.1, 2534.0], [87.2, 2546.0], [87.3, 2575.0], [87.4, 2594.0], [87.5, 2608.0], [87.6, 2622.0], [87.7, 2653.0], [87.8, 2667.0], [87.9, 2686.0], [88.0, 2701.0], [88.1, 2719.0], [88.2, 2728.0], [88.3, 2747.0], [88.4, 2759.0], [88.5, 2790.0], [88.6, 2808.0], [88.7, 2828.0], [88.8, 2861.0], [88.9, 2881.0], [89.0, 2902.0], [89.1, 2919.0], [89.2, 2942.0], [89.3, 2967.0], [89.4, 3008.0], [89.5, 3018.0], [89.6, 3033.0], [89.7, 3065.0], [89.8, 3084.0], [89.9, 3094.0], [90.0, 3147.0], [90.1, 3180.0], [90.2, 3195.0], [90.3, 3219.0], [90.4, 3267.0], [90.5, 3288.0], [90.6, 3328.0], [90.7, 3376.0], [90.8, 3409.0], [90.9, 3451.0], [91.0, 3474.0], [91.1, 3520.0], [91.2, 3538.0], [91.3, 3584.0], [91.4, 3635.0], [91.5, 3663.0], [91.6, 3708.0], [91.7, 3745.0], [91.8, 3779.0], [91.9, 3863.0], [92.0, 3884.0], [92.1, 3910.0], [92.2, 3975.0], [92.3, 4018.0], [92.4, 4098.0], [92.5, 4126.0], [92.6, 4226.0], [92.7, 4354.0], [92.8, 4449.0], [92.9, 4476.0], [93.0, 4512.0], [93.1, 4595.0], [93.2, 4782.0], [93.3, 4968.0], [93.4, 5037.0], [93.5, 5293.0], [93.6, 5373.0], [93.7, 5607.0], [93.8, 5893.0], [93.9, 6037.0], [94.0, 6122.0], [94.1, 6309.0], [94.2, 6649.0], [94.3, 6887.0], [94.4, 7081.0], [94.5, 7586.0], [94.6, 7883.0], [94.7, 8501.0], [94.8, 10090.0], [94.9, 15860.0], [95.0, 20382.0], [95.1, 27368.0], [95.2, 29415.0], [95.3, 36068.0], [95.4, 46459.0], [95.5, 59507.0], [95.6, 64685.0], [95.7, 66139.0], [95.8, 68035.0], [95.9, 69171.0], [96.0, 69680.0], [96.1, 69957.0], [96.2, 70373.0], [96.3, 70587.0], [96.4, 70789.0], [96.5, 71075.0], [96.6, 71284.0], [96.7, 71527.0], [96.8, 71627.0], [96.9, 71789.0], [97.0, 72028.0], [97.1, 72299.0], [97.2, 72479.0], [97.3, 72756.0], [97.4, 73107.0], [97.5, 73308.0], [97.6, 73500.0], [97.7, 73883.0], [97.8, 74082.0], [97.9, 74974.0], [98.0, 77088.0], [98.1, 82651.0], [98.2, 85740.0], [98.3, 87206.0], [98.4, 87990.0], [98.5, 89676.0], [98.6, 101180.0], [98.7, 109340.0], [98.8, 134869.0], [98.9, 136987.0], [99.0, 138263.0], [99.1, 139124.0], [99.2, 140599.0], [99.3, 140943.0], [99.4, 141529.0], [99.5, 142880.0], [99.6, 199252.0], [99.7, 208073.0], [99.8, 249986.0], [99.9, 276924.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 717.0, "series": [{"data": [[141600.0, 1.0], [199200.0, 1.0], [388800.0, 1.0], [140900.0, 3.0], [69100.0, 2.0], [65900.0, 1.0], [70700.0, 3.0], [71500.0, 4.0], [73100.0, 2.0], [69900.0, 3.0], [72300.0, 2.0], [73900.0, 2.0], [85100.0, 1.0], [87500.0, 1.0], [89900.0, 1.0], [101100.0, 1.0], [104300.0, 1.0], [137000.0, 1.0], [138600.0, 1.0], [100.0, 12.0], [134700.0, 1.0], [38100.0, 1.0], [200.0, 678.0], [53700.0, 1.0], [58100.0, 1.0], [249900.0, 1.0], [65300.0, 1.0], [68200.0, 1.0], [69800.0, 1.0], [70600.0, 4.0], [71400.0, 2.0], [72200.0, 2.0], [73000.0, 2.0], [300.0, 717.0], [73800.0, 2.0], [77000.0, 1.0], [82600.0, 1.0], [88200.0, 1.0], [400.0, 446.0], [111400.0, 1.0], [500.0, 336.0], [138800.0, 1.0], [140400.0, 1.0], [142000.0, 1.0], [600.0, 312.0], [700.0, 251.0], [800.0, 224.0], [214000.0, 1.0], [900.0, 204.0], [1000.0, 165.0], [1100.0, 162.0], [1200.0, 140.0], [1300.0, 126.0], [1400.0, 110.0], [1500.0, 92.0], [1600.0, 94.0], [1700.0, 83.0], [1800.0, 66.0], [1900.0, 60.0], [2000.0, 53.0], [2100.0, 47.0], [2200.0, 47.0], [2300.0, 36.0], [141300.0, 3.0], [2400.0, 50.0], [2500.0, 26.0], [2600.0, 30.0], [2800.0, 21.0], [2700.0, 30.0], [2900.0, 21.0], [3000.0, 27.0], [3100.0, 16.0], [3200.0, 17.0], [3300.0, 13.0], [3400.0, 15.0], [3500.0, 13.0], [3700.0, 12.0], [3600.0, 14.0], [3800.0, 11.0], [3900.0, 11.0], [4000.0, 8.0], [4100.0, 9.0], [66500.0, 1.0], [4200.0, 4.0], [67300.0, 1.0], [4300.0, 4.0], [276200.0, 1.0], [70500.0, 2.0], [4400.0, 11.0], [4600.0, 4.0], [4500.0, 8.0], [72100.0, 1.0], [73700.0, 1.0], [72900.0, 3.0], [71300.0, 2.0], [69700.0, 1.0], [4700.0, 2.0], [4800.0, 3.0], [74500.0, 1.0], [76100.0, 1.0], [5000.0, 6.0], [4900.0, 3.0], [5100.0, 1.0], [85700.0, 1.0], [5200.0, 2.0], [5300.0, 5.0], [5600.0, 2.0], [5500.0, 2.0], [87300.0, 1.0], [88100.0, 1.0], [349800.0, 1.0], [5400.0, 2.0], [5800.0, 4.0], [5700.0, 1.0], [5900.0, 4.0], [6000.0, 5.0], [6100.0, 3.0], [6200.0, 2.0], [6300.0, 2.0], [103300.0, 1.0], [6400.0, 1.0], [6500.0, 2.0], [6600.0, 1.0], [6800.0, 4.0], [6700.0, 2.0], [6900.0, 1.0], [7000.0, 4.0], [7200.0, 1.0], [7400.0, 3.0], [118500.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7900.0, 2.0], [7800.0, 4.0], [8500.0, 2.0], [8400.0, 1.0], [135800.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [8800.0, 1.0], [140600.0, 1.0], [9800.0, 2.0], [10000.0, 1.0], [10300.0, 1.0], [11000.0, 1.0], [11100.0, 1.0], [387700.0, 1.0], [12600.0, 1.0], [15800.0, 1.0], [17400.0, 1.0], [19200.0, 1.0], [26400.0, 1.0], [28000.0, 1.0], [29400.0, 1.0], [29000.0, 1.0], [31000.0, 1.0], [34800.0, 1.0], [138300.0, 1.0], [141500.0, 1.0], [36000.0, 1.0], [181500.0, 1.0], [46400.0, 1.0], [199100.0, 1.0], [207100.0, 1.0], [58400.0, 1.0], [64400.0, 1.0], [69600.0, 1.0], [68000.0, 2.0], [72000.0, 3.0], [70400.0, 3.0], [71200.0, 2.0], [73600.0, 2.0], [77600.0, 1.0], [75200.0, 2.0], [74400.0, 1.0], [318200.0, 1.0], [88000.0, 1.0], [87200.0, 1.0], [88800.0, 1.0], [89600.0, 1.0], [86400.0, 1.0], [91200.0, 2.0], [137600.0, 2.0], [139200.0, 1.0], [136000.0, 1.0], [140800.0, 1.0], [208000.0, 1.0], [275200.0, 1.0], [136900.0, 1.0], [140100.0, 1.0], [69500.0, 1.0], [68700.0, 1.0], [73500.0, 2.0], [70300.0, 3.0], [71100.0, 3.0], [72700.0, 1.0], [71900.0, 3.0], [79900.0, 1.0], [87900.0, 1.0], [104700.0, 1.0], [137800.0, 1.0], [139400.0, 1.0], [177800.0, 1.0], [209800.0, 1.0], [275600.0, 1.0], [37100.0, 1.0], [42700.0, 1.0], [41500.0, 1.0], [58700.0, 1.0], [59500.0, 1.0], [63100.0, 1.0], [61500.0, 1.0], [64700.0, 2.0], [63900.0, 1.0], [71800.0, 1.0], [71000.0, 1.0], [73400.0, 3.0], [72600.0, 2.0], [70200.0, 1.0], [74200.0, 1.0], [79800.0, 1.0], [85400.0, 1.0], [84600.0, 1.0], [89400.0, 1.0], [134800.0, 1.0], [276900.0, 1.0], [138000.0, 1.0], [142800.0, 1.0], [138900.0, 1.0], [142100.0, 1.0], [140500.0, 1.0], [202900.0, 1.0], [201300.0, 1.0], [244500.0, 1.0], [66100.0, 2.0], [69300.0, 1.0], [68500.0, 1.0], [67700.0, 2.0], [73300.0, 2.0], [71700.0, 4.0], [72500.0, 2.0], [70900.0, 2.0], [74900.0, 1.0], [74100.0, 2.0], [319400.0, 1.0], [83700.0, 1.0], [90100.0, 1.0], [86900.0, 2.0], [109300.0, 1.0], [130100.0, 1.0], [138200.0, 1.0], [136600.0, 1.0], [215000.0, 1.0], [16500.0, 1.0], [20300.0, 1.0], [19700.0, 1.0], [23300.0, 1.0], [24500.0, 1.0], [27300.0, 2.0], [28100.0, 1.0], [27900.0, 1.0], [30100.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [139100.0, 1.0], [275900.0, 1.0], [135900.0, 1.0], [143900.0, 1.0], [142300.0, 2.0], [140700.0, 1.0], [207900.0, 1.0], [64600.0, 1.0], [69200.0, 1.0], [73200.0, 3.0], [71600.0, 4.0], [72400.0, 3.0], [70800.0, 1.0], [70000.0, 1.0], [75600.0, 1.0], [74000.0, 2.0], [81200.0, 1.0], [86000.0, 1.0], [87600.0, 2.0], [108400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 388800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1307.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2028.0, "series": [{"data": [[0.0, 1855.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2028.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1307.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.60234836E12, "maxY": 10.0, "series": [{"data": [[1.60234944E12, 10.0], [1.60235148E12, 3.5], [1.60234884E12, 10.0], [1.60235046E12, 10.0], [1.60234986E12, 10.0], [1.60235106E12, 10.0], [1.60234926E12, 10.0], [1.6023507E12, 10.0], [1.60234866E12, 10.0], [1.6023513E12, 10.0], [1.60234968E12, 10.0], [1.60235028E12, 10.0], [1.60234908E12, 10.0], [1.60235088E12, 10.0], [1.60234848E12, 10.0], [1.60235052E12, 10.0], [1.6023495E12, 10.0], [1.60235112E12, 10.0], [1.6023489E12, 10.0], [1.6023501E12, 10.0], [1.60234992E12, 10.0], [1.60234932E12, 10.0], [1.60235034E12, 10.0], [1.60234872E12, 10.0], [1.60235094E12, 10.0], [1.60234974E12, 10.0], [1.60235118E12, 10.0], [1.60234854E12, 10.0], [1.60235016E12, 10.0], [1.60235076E12, 10.0], [1.60235136E12, 10.0], [1.60234896E12, 10.0], [1.602351E12, 10.0], [1.60234836E12, 10.0], [1.60234998E12, 10.0], [1.60235058E12, 10.0], [1.60234878E12, 10.0], [1.60235022E12, 10.0], [1.6023498E12, 10.0], [1.60235082E12, 10.0], [1.6023492E12, 10.0], [1.60235142E12, 9.95679012345679], [1.6023486E12, 10.0], [1.6023504E12, 10.0], [1.60234962E12, 10.0], [1.60235004E12, 10.0], [1.60234902E12, 10.0], [1.60235064E12, 10.0], [1.60235124E12, 10.0], [1.60234842E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60235148E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 334.0, "minX": 2.0, "maxY": 68837.66666666667, "series": [{"data": [[8.0, 334.0], [4.0, 68837.66666666667], [2.0, 68732.0], [10.0, 5900.437089926653], [5.0, 3091.0], [6.0, 2208.0], [7.0, 533.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992292870905587, 5945.563776493242]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.866666666666667, "minX": 1.60234836E12, "maxY": 3208399.85, "series": [{"data": [[1.60234944E12, 287.26666666666665], [1.60235148E12, 6084.416666666667], [1.60234884E12, 54625.11666666667], [1.60235046E12, 287.2], [1.60234986E12, 50268.3], [1.60235106E12, 74663.56666666667], [1.60234926E12, 41153.333333333336], [1.6023507E12, 143.66666666666666], [1.60234866E12, 460762.75], [1.6023513E12, 340933.95], [1.60234968E12, 37208.01666666667], [1.60235028E12, 2965904.6], [1.60234908E12, 287.26666666666665], [1.60235088E12, 6427.866666666667], [1.60234848E12, 20846.8], [1.60235052E12, 143.6], [1.6023495E12, 22912.833333333332], [1.60235112E12, 97730.3], [1.6023489E12, 21593.583333333332], [1.6023501E12, 1615471.95], [1.60234992E12, 323493.88333333336], [1.60234932E12, 14785.483333333334], [1.60235034E12, 17496.533333333333], [1.60234872E12, 243687.0], [1.60235094E12, 32026.0], [1.60234974E12, 260128.73333333334], [1.60235118E12, 372329.4], [1.60234854E12, 1981501.4166666667], [1.60235016E12, 644622.8333333334], [1.60235076E12, 1370.2166666666667], [1.60235136E12, 484409.3], [1.60234896E12, 1304.5], [1.602351E12, 59323.21666666667], [1.60234836E12, 876091.2166666667], [1.60234998E12, 622939.65], [1.60235058E12, 21737.1], [1.60234878E12, 41911.51666666667], [1.60235022E12, 2119734.75], [1.6023498E12, 229325.21666666667], [1.60235082E12, 92216.48333333334], [1.6023492E12, 42918.583333333336], [1.60235142E12, 1599634.95], [1.6023486E12, 3208399.85], [1.6023504E12, 233550.1], [1.60234962E12, 56359.71666666667], [1.60235004E12, 2393538.816666667], [1.60234902E12, 430.8666666666667], [1.60235064E12, 878.5666666666667], [1.60235124E12, 285.25], [1.60234842E12, 1308098.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60234944E12, 30.133333333333333], [1.60235148E12, 31.733333333333334], [1.60234884E12, 87.15], [1.60235046E12, 31.733333333333334], [1.60234986E12, 54.95], [1.60235106E12, 134.8], [1.60234926E12, 90.33333333333333], [1.6023507E12, 15.866666666666667], [1.60234866E12, 645.6666666666666], [1.6023513E12, 1113.0], [1.60234968E12, 47.43333333333333], [1.60235028E12, 4586.483333333334], [1.60234908E12, 30.933333333333334], [1.60235088E12, 38.55], [1.60234848E12, 65.3], [1.60235052E12, 15.866666666666667], [1.6023495E12, 68.75], [1.60235112E12, 277.76666666666665], [1.6023489E12, 31.466666666666665], [1.6023501E12, 2293.8333333333335], [1.60234992E12, 1003.0333333333333], [1.60234932E12, 69.95], [1.60235034E12, 15.916666666666666], [1.60234872E12, 314.9], [1.60235094E12, 77.96666666666667], [1.60234974E12, 618.1833333333333], [1.60235118E12, 503.15], [1.60234854E12, 4586.716666666666], [1.60235016E12, 1073.7833333333333], [1.60235076E12, 86.48333333333333], [1.60235136E12, 924.2666666666667], [1.60234896E12, 47.63333333333333], [1.602351E12, 195.78333333333333], [1.60234836E12, 924.2333333333333], [1.60234998E12, 617.6833333333333], [1.60235058E12, 47.333333333333336], [1.60234878E12, 47.78333333333333], [1.60235022E12, 4501.083333333333], [1.6023498E12, 221.9], [1.60235082E12, 230.81666666666666], [1.6023492E12, 156.01666666666668], [1.60235142E12, 2515.0833333333335], [1.6023486E12, 4480.466666666666], [1.6023504E12, 371.48333333333335], [1.60234962E12, 219.56666666666666], [1.60235004E12, 4010.6833333333334], [1.60234902E12, 47.6], [1.60235064E12, 47.61666666666667], [1.60235124E12, 23.766666666666666], [1.60234842E12, 2115.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60235148E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 964.0843373493976, "minX": 1.60234836E12, "maxY": 229227.5, "series": [{"data": [[1.60234944E12, 97436.5], [1.60235148E12, 68811.25], [1.60234884E12, 66476.63636363635], [1.60235046E12, 72400.0], [1.60234986E12, 64341.28571428571], [1.60235106E12, 25349.0], [1.60234926E12, 28316.833333333332], [1.6023507E12, 102060.0], [1.60234866E12, 964.0843373493976], [1.6023513E12, 9040.937062937062], [1.60234968E12, 24795.833333333336], [1.60235028E12, 1008.2504258943791], [1.60234908E12, 88556.75], [1.60235088E12, 42974.8], [1.60234848E12, 85501.11111111111], [1.60235052E12, 72745.5], [1.6023495E12, 210380.55555555556], [1.60235112E12, 27174.085714285713], [1.6023489E12, 72303.75], [1.6023501E12, 1281.108280254777], [1.60234992E12, 8371.201550387597], [1.60234932E12, 54189.333333333336], [1.60235034E12, 1936.5], [1.60234872E12, 22457.825000000004], [1.60235094E12, 42461.7], [1.60234974E12, 20099.6282051282], [1.60235118E12, 1204.7968750000002], [1.60234854E12, 1116.7852459016385], [1.60235016E12, 5760.797202797197], [1.60235076E12, 66365.45454545454], [1.60235136E12, 6928.440677966101], [1.60234896E12, 116537.66666666667], [1.602351E12, 53279.719999999994], [1.60234836E12, 1437.941666666666], [1.60234998E12, 10357.371794871795], [1.60235058E12, 115564.83333333334], [1.60234878E12, 24056.0], [1.60235022E12, 1011.4090150250408], [1.6023498E12, 2006.428571428571], [1.60235082E12, 28664.700000000004], [1.6023492E12, 94042.5], [1.60235142E12, 1276.2777777777767], [1.6023486E12, 1047.8289703315884], [1.6023504E12, 15930.914893617026], [1.60234962E12, 32677.0], [1.60235004E12, 1125.8397683397682], [1.60234902E12, 95705.66666666667], [1.60235064E12, 229227.5], [1.60235124E12, 71551.0], [1.60234842E12, 1181.0378006872852]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60235148E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 922.1807228915662, "minX": 1.60234836E12, "maxY": 229227.5, "series": [{"data": [[1.60234944E12, 97436.5], [1.60235148E12, 68810.5], [1.60234884E12, 66453.18181818181], [1.60235046E12, 72399.5], [1.60234986E12, 64293.0], [1.60235106E12, 25347.764705882353], [1.60234926E12, 28315.75], [1.6023507E12, 102060.0], [1.60234866E12, 922.1807228915662], [1.6023513E12, 9019.356643356643], [1.60234968E12, 24793.333333333336], [1.60235028E12, 952.6763202725724], [1.60234908E12, 88556.75], [1.60235088E12, 42974.2], [1.60234848E12, 85497.0], [1.60235052E12, 72745.5], [1.6023495E12, 210378.55555555556], [1.60235112E12, 27173.285714285717], [1.6023489E12, 72253.25], [1.6023501E12, 1234.4904458598724], [1.60234992E12, 8347.860465116286], [1.60234932E12, 54189.00000000001], [1.60235034E12, 1935.0], [1.60234872E12, 22418.574999999993], [1.60235094E12, 42460.700000000004], [1.60234974E12, 20084.923076923074], [1.60235118E12, 1136.7500000000002], [1.60234854E12, 1082.5295081967213], [1.60235016E12, 5719.678321678321], [1.60235076E12, 66365.36363636363], [1.60235136E12, 6884.203389830509], [1.60234896E12, 116537.66666666667], [1.602351E12, 53264.0], [1.60234836E12, 1375.5083333333337], [1.60234998E12, 10308.20512820513], [1.60235058E12, 115563.5], [1.60234878E12, 24053.833333333336], [1.60235022E12, 978.3288814691153], [1.6023498E12, 1922.1071428571427], [1.60235082E12, 28663.766666666666], [1.6023492E12, 94041.64999999998], [1.60235142E12, 1246.0308641975307], [1.6023486E12, 990.4799301919729], [1.6023504E12, 15884.53191489362], [1.60234962E12, 32676.035714285717], [1.60235004E12, 1090.700772200772], [1.60234902E12, 95704.83333333333], [1.60235064E12, 229227.5], [1.60235124E12, 71551.0], [1.60234842E12, 1136.429553264605]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60235148E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.60234836E12, "maxY": 1.741666666666667, "series": [{"data": [[1.60234944E12, 0.75], [1.60235148E12, 0.75], [1.60234884E12, 1.0], [1.60235046E12, 1.5], [1.60234986E12, 0.4285714285714286], [1.60235106E12, 0.4705882352941176], [1.60234926E12, 1.0000000000000002], [1.6023507E12, 1.0], [1.60234866E12, 0.6024096385542165], [1.6023513E12, 0.5384615384615383], [1.60234968E12, 1.0], [1.60235028E12, 0.5502555366269161], [1.60234908E12, 0.5], [1.60235088E12, 0.4], [1.60234848E12, 0.8888888888888888], [1.60235052E12, 0.5], [1.6023495E12, 0.6666666666666666], [1.60235112E12, 0.7142857142857143], [1.6023489E12, 0.5], [1.6023501E12, 0.6019108280254771], [1.60234992E12, 0.6124031007751934], [1.60234932E12, 1.1111111111111112], [1.60235034E12, 1.0], [1.60234872E12, 0.8249999999999998], [1.60235094E12, 0.8999999999999999], [1.60234974E12, 0.6410256410256411], [1.60235118E12, 0.484375], [1.60234854E12, 0.7868852459016386], [1.60235016E12, 0.5104895104895107], [1.60235076E12, 0.5454545454545454], [1.60235136E12, 0.5677966101694913], [1.60234896E12, 0.6666666666666666], [1.602351E12, 0.6799999999999999], [1.60234836E12, 1.741666666666667], [1.60234998E12, 0.5256410256410257], [1.60235058E12, 1.0], [1.60234878E12, 0.8333333333333334], [1.60235022E12, 0.47579298831385636], [1.6023498E12, 0.42857142857142855], [1.60235082E12, 0.36666666666666664], [1.6023492E12, 0.85], [1.60235142E12, 0.5061728395061726], [1.6023486E12, 0.5986038394415366], [1.6023504E12, 0.44680851063829796], [1.60234962E12, 0.9642857142857143], [1.60235004E12, 0.5810810810810814], [1.60234902E12, 1.0], [1.60235064E12, 1.0], [1.60235124E12, 0.6666666666666666], [1.60234842E12, 0.8762886597938145]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60235148E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 190.0, "minX": 1.60234836E12, "maxY": 388882.0, "series": [{"data": [[1.60234944E12, 142302.0], [1.60235148E12, 69559.0], [1.60234884E12, 89957.0], [1.60235046E12, 73444.0], [1.60234986E12, 77088.0], [1.60235106E12, 71593.0], [1.60234926E12, 74518.0], [1.6023507E12, 136085.0], [1.60234866E12, 4881.0], [1.6023513E12, 140599.0], [1.60234968E12, 73500.0], [1.60235028E12, 5018.0], [1.60234908E12, 140150.0], [1.60235088E12, 71587.0], [1.60234848E12, 91204.0], [1.60235052E12, 73099.0], [1.6023495E12, 349810.0], [1.60235112E12, 141609.0], [1.6023489E12, 73516.0], [1.6023501E12, 11130.0], [1.60234992E12, 142162.0], [1.60234932E12, 139124.0], [1.60235034E12, 2131.0], [1.60234872E12, 88115.0], [1.60235094E12, 135867.0], [1.60234974E12, 215097.0], [1.60235118E12, 4441.0], [1.60234854E12, 91229.0], [1.60235016E12, 75212.0], [1.60235076E12, 140651.0], [1.60235136E12, 73470.0], [1.60234896E12, 140961.0], [1.602351E12, 208073.0], [1.60234836E12, 4499.0], [1.60234998E12, 75276.0], [1.60235058E12, 207953.0], [1.60234878E12, 70789.0], [1.60235022E12, 7429.0], [1.6023498E12, 6407.0], [1.60235082E12, 138263.0], [1.6023492E12, 388882.0], [1.60235142E12, 7839.0], [1.6023486E12, 5357.0], [1.6023504E12, 72353.0], [1.60234962E12, 140804.0], [1.60235004E12, 7059.0], [1.60234902E12, 141529.0], [1.60235064E12, 276924.0], [1.60235124E12, 71932.0], [1.60234842E12, 11093.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60234944E12, 71260.0], [1.60235148E12, 67707.0], [1.60234884E12, 1280.0], [1.60235046E12, 71618.0], [1.60234986E12, 785.0], [1.60235106E12, 333.0], [1.60234926E12, 217.0], [1.6023507E12, 68035.0], [1.60234866E12, 197.0], [1.6023513E12, 197.25599962234497], [1.60234968E12, 428.0], [1.60235028E12, 204.0], [1.60234908E12, 70473.0], [1.60235088E12, 467.0], [1.60234848E12, 77672.0], [1.60235052E12, 72392.0], [1.6023495E12, 1038.0], [1.60235112E12, 301.0], [1.6023489E12, 70695.0], [1.6023501E12, 204.83499992489814], [1.60234992E12, 198.35999975204467], [1.60234932E12, 333.0], [1.60235034E12, 1742.0], [1.60234872E12, 308.0], [1.60235094E12, 330.0], [1.60234974E12, 261.0], [1.60235118E12, 231.0], [1.60234854E12, 211.9979997086525], [1.60235016E12, 241.29599996566773], [1.60235076E12, 436.0], [1.60235136E12, 201.49699980139732], [1.60234896E12, 69171.0], [1.602351E12, 291.0], [1.60234836E12, 213.26699991345404], [1.60234998E12, 288.0], [1.60235058E12, 1441.0], [1.60234878E12, 469.0], [1.60235022E12, 206.39999985694885], [1.6023498E12, 350.0], [1.60235082E12, 209.0], [1.6023492E12, 308.0], [1.60235142E12, 203.77499976754189], [1.6023486E12, 207.16599986314773], [1.6023504E12, 310.0], [1.60234962E12, 292.0], [1.60235004E12, 199.3419997525215], [1.60234902E12, 72087.0], [1.60235064E12, 68049.0], [1.60235124E12, 70960.0], [1.60234842E12, 229.25599986076355]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60234944E12, 71260.0], [1.60235148E12, 67707.0], [1.60234884E12, 1280.0], [1.60235046E12, 71618.0], [1.60234986E12, 785.0], [1.60235106E12, 333.0], [1.60234926E12, 217.0], [1.6023507E12, 68035.0], [1.60234866E12, 197.0], [1.6023513E12, 198.681600151062], [1.60234968E12, 428.0], [1.60235028E12, 204.0], [1.60234908E12, 70473.0], [1.60235088E12, 467.0], [1.60234848E12, 77672.0], [1.60235052E12, 72392.0], [1.6023495E12, 1038.0], [1.60235112E12, 301.0], [1.6023489E12, 70695.0], [1.6023501E12, 205.11850003004074], [1.60234992E12, 199.29600009918212], [1.60234932E12, 333.0], [1.60235034E12, 1742.0], [1.60234872E12, 308.0], [1.60235094E12, 330.0], [1.60234974E12, 261.0], [1.60235118E12, 231.0], [1.60234854E12, 213.0], [1.60235016E12, 241.42560001373292], [1.60235076E12, 436.0], [1.60235136E12, 202.24670007944107], [1.60234896E12, 69171.0], [1.602351E12, 291.0], [1.60234836E12, 213.59370003461837], [1.60234998E12, 288.0], [1.60235058E12, 1441.0], [1.60234878E12, 469.0], [1.60235022E12, 206.94000005722046], [1.6023498E12, 350.0], [1.60235082E12, 209.0], [1.6023492E12, 308.0], [1.60235142E12, 205.74000024795532], [1.6023486E12, 207.6826000547409], [1.6023504E12, 310.0], [1.60234962E12, 292.0], [1.60235004E12, 200.0], [1.60234902E12, 72087.0], [1.60235064E12, 68049.0], [1.60235124E12, 70960.0], [1.60234842E12, 229.78160005569458]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60234944E12, 71260.0], [1.60235148E12, 67707.0], [1.60234884E12, 1280.0], [1.60235046E12, 71618.0], [1.60234986E12, 785.0], [1.60235106E12, 333.0], [1.60234926E12, 217.0], [1.6023507E12, 68035.0], [1.60234866E12, 197.0], [1.6023513E12, 198.04799981117247], [1.60234968E12, 428.0], [1.60235028E12, 204.0], [1.60234908E12, 70473.0], [1.60235088E12, 467.0], [1.60234848E12, 77672.0], [1.60235052E12, 72392.0], [1.6023495E12, 1038.0], [1.60235112E12, 301.0], [1.6023489E12, 70695.0], [1.6023501E12, 204.99249996244907], [1.60234992E12, 198.87999987602234], [1.60234932E12, 333.0], [1.60235034E12, 1742.0], [1.60234872E12, 308.0], [1.60235094E12, 330.0], [1.60234974E12, 261.0], [1.60235118E12, 231.0], [1.60234854E12, 212.60899985432624], [1.60235016E12, 241.36799998283385], [1.60235076E12, 436.0], [1.60235136E12, 201.91349990069867], [1.60234896E12, 69171.0], [1.602351E12, 291.0], [1.60234836E12, 213.44849995672703], [1.60234998E12, 288.0], [1.60235058E12, 1441.0], [1.60234878E12, 469.0], [1.60235022E12, 206.69999992847443], [1.6023498E12, 350.0], [1.60235082E12, 209.0], [1.6023492E12, 308.0], [1.60235142E12, 204.69999969005585], [1.6023486E12, 207.45299993157386], [1.6023504E12, 310.0], [1.60234962E12, 292.0], [1.60235004E12, 199.86099987626076], [1.60234902E12, 72087.0], [1.60235064E12, 68049.0], [1.60235124E12, 70960.0], [1.60234842E12, 229.54799993038176]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60234944E12, 71260.0], [1.60235148E12, 67707.0], [1.60234884E12, 1280.0], [1.60235046E12, 71618.0], [1.60234986E12, 785.0], [1.60235106E12, 333.0], [1.60234926E12, 217.0], [1.6023507E12, 68035.0], [1.60234866E12, 197.0], [1.6023513E12, 194.0], [1.60234968E12, 428.0], [1.60235028E12, 190.0], [1.60234908E12, 70473.0], [1.60235088E12, 467.0], [1.60234848E12, 77672.0], [1.60235052E12, 72392.0], [1.6023495E12, 1038.0], [1.60235112E12, 301.0], [1.6023489E12, 70695.0], [1.6023501E12, 202.0], [1.60234992E12, 197.0], [1.60234932E12, 333.0], [1.60235034E12, 1742.0], [1.60234872E12, 308.0], [1.60235094E12, 330.0], [1.60234974E12, 261.0], [1.60235118E12, 231.0], [1.60234854E12, 204.0], [1.60235016E12, 241.0], [1.60235076E12, 436.0], [1.60235136E12, 201.0], [1.60234896E12, 69171.0], [1.602351E12, 291.0], [1.60234836E12, 213.0], [1.60234998E12, 288.0], [1.60235058E12, 1441.0], [1.60234878E12, 469.0], [1.60235022E12, 200.0], [1.6023498E12, 350.0], [1.60235082E12, 209.0], [1.6023492E12, 308.0], [1.60235142E12, 198.0], [1.6023486E12, 195.0], [1.6023504E12, 310.0], [1.60234962E12, 292.0], [1.60235004E12, 191.0], [1.60234902E12, 72087.0], [1.60235064E12, 68049.0], [1.60235124E12, 70960.0], [1.60234842E12, 206.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60234944E12, 88092.0], [1.60235148E12, 68989.5], [1.60234884E12, 86488.0], [1.60235046E12, 72269.0], [1.60234986E12, 74974.0], [1.60235106E12, 1261.0], [1.60234926E12, 16200.5], [1.6023507E12, 102060.0], [1.60234866E12, 429.0], [1.6023513E12, 422.0], [1.60234968E12, 1802.5], [1.60235028E12, 697.0], [1.60234908E12, 71802.0], [1.60235088E12, 70797.0], [1.60234848E12, 85740.0], [1.60235052E12, 72745.5], [1.6023495E12, 244505.0], [1.60235112E12, 753.0], [1.6023489E12, 72502.0], [1.6023501E12, 809.0], [1.60234992E12, 452.0], [1.60234932E12, 37165.0], [1.60235034E12, 1936.5], [1.60234872E12, 1086.5], [1.60235094E12, 12081.5], [1.60234974E12, 673.5], [1.60235118E12, 746.0], [1.60234854E12, 590.0], [1.60235016E12, 703.0], [1.60235076E12, 74042.0], [1.60235136E12, 699.5], [1.60234896E12, 138252.5], [1.602351E12, 6887.0], [1.60234836E12, 1037.5], [1.60234998E12, 993.5], [1.60235058E12, 103090.0], [1.60234878E12, 1234.5], [1.60235022E12, 667.0], [1.6023498E12, 1312.5], [1.60235082E12, 8890.0], [1.6023492E12, 51592.5], [1.60235142E12, 887.0], [1.6023486E12, 662.0], [1.6023504E12, 1067.0], [1.60234962E12, 947.0], [1.60235004E12, 730.0], [1.60234902E12, 73595.5], [1.60235064E12, 275589.0], [1.60235124E12, 71761.0], [1.60234842E12, 746.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60235148E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 263.0, "minX": 1.0, "maxY": 1319.0, "series": [{"data": [[2.0, 1055.0], [3.0, 1198.5], [4.0, 804.0], [5.0, 832.0], [6.0, 754.0], [7.0, 984.5], [8.0, 867.0], [9.0, 916.0], [10.0, 908.0], [11.0, 745.5], [12.0, 721.5], [13.0, 793.0], [14.0, 615.0], [15.0, 520.0], [1.0, 1319.0], [16.0, 506.0], [17.0, 428.0], [18.0, 429.0], [19.0, 292.0], [20.0, 347.0], [21.0, 269.0], [22.0, 403.5], [23.0, 263.0], [24.0, 392.0], [27.0, 378.0], [28.0, 284.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 263.0, "minX": 1.0, "maxY": 1314.0, "series": [{"data": [[2.0, 1051.5], [3.0, 1139.0], [4.0, 802.5], [5.0, 801.0], [6.0, 741.0], [7.0, 949.0], [8.0, 835.0], [9.0, 893.0], [10.0, 839.5], [11.0, 731.0], [12.0, 700.0], [13.0, 767.0], [14.0, 589.5], [15.0, 511.0], [1.0, 1314.0], [16.0, 489.0], [17.0, 425.5], [18.0, 429.0], [19.0, 292.0], [20.0, 347.0], [21.0, 269.0], [22.0, 403.5], [23.0, 263.0], [24.0, 392.0], [27.0, 378.0], [28.0, 283.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60234836E12, "maxY": 10.166666666666666, "series": [{"data": [[1.60234944E12, 0.06666666666666667], [1.60234884E12, 0.18333333333333332], [1.60235046E12, 0.06666666666666667], [1.60234986E12, 0.11666666666666667], [1.60235106E12, 0.2833333333333333], [1.60234926E12, 0.2], [1.6023507E12, 0.03333333333333333], [1.60234866E12, 1.3833333333333333], [1.6023513E12, 2.3833333333333333], [1.60234968E12, 0.1], [1.60235028E12, 9.783333333333333], [1.60234908E12, 0.06666666666666667], [1.60235088E12, 0.08333333333333333], [1.60234848E12, 0.15], [1.60235052E12, 0.03333333333333333], [1.6023495E12, 0.15], [1.60235112E12, 0.5833333333333334], [1.6023489E12, 0.06666666666666667], [1.6023501E12, 5.233333333333333], [1.60234992E12, 2.15], [1.60234932E12, 0.15], [1.60235034E12, 0.03333333333333333], [1.60234872E12, 0.6666666666666666], [1.60235094E12, 0.16666666666666666], [1.60234974E12, 1.3], [1.60235118E12, 1.0666666666666667], [1.60234854E12, 10.166666666666666], [1.60235016E12, 2.3833333333333333], [1.60235076E12, 0.18333333333333332], [1.60235136E12, 1.9666666666666666], [1.60234896E12, 0.1], [1.602351E12, 0.4166666666666667], [1.60234836E12, 2.1666666666666665], [1.60234998E12, 1.3], [1.60235058E12, 0.1], [1.60234878E12, 0.1], [1.60235022E12, 9.983333333333333], [1.6023498E12, 0.4666666666666667], [1.60235082E12, 0.5], [1.6023492E12, 0.3333333333333333], [1.60235142E12, 5.3], [1.6023486E12, 9.55], [1.6023504E12, 0.7833333333333333], [1.60234962E12, 0.4666666666666667], [1.60235004E12, 8.633333333333333], [1.60234902E12, 0.1], [1.60235064E12, 0.1], [1.60235124E12, 0.05], [1.60234842E12, 4.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60235142E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60234836E12, "maxY": 10.166666666666666, "series": [{"data": [[1.60234944E12, 0.06666666666666667], [1.60235148E12, 0.06666666666666667], [1.60234884E12, 0.18333333333333332], [1.60235046E12, 0.06666666666666667], [1.60234986E12, 0.11666666666666667], [1.60235106E12, 0.2833333333333333], [1.60234926E12, 0.2], [1.6023507E12, 0.03333333333333333], [1.60234866E12, 1.3833333333333333], [1.6023513E12, 2.3833333333333333], [1.60234968E12, 0.1], [1.60235028E12, 9.783333333333333], [1.60234908E12, 0.06666666666666667], [1.60235088E12, 0.08333333333333333], [1.60234848E12, 0.15], [1.60235052E12, 0.03333333333333333], [1.6023495E12, 0.15], [1.60235112E12, 0.5833333333333334], [1.6023489E12, 0.06666666666666667], [1.6023501E12, 5.233333333333333], [1.60234992E12, 2.15], [1.60234932E12, 0.15], [1.60235034E12, 0.03333333333333333], [1.60234872E12, 0.6666666666666666], [1.60235094E12, 0.16666666666666666], [1.60234974E12, 1.3], [1.60235118E12, 1.0666666666666667], [1.60234854E12, 10.166666666666666], [1.60235016E12, 2.3833333333333333], [1.60235076E12, 0.18333333333333332], [1.60235136E12, 1.9666666666666666], [1.60234896E12, 0.1], [1.602351E12, 0.4166666666666667], [1.60234836E12, 2.0], [1.60234998E12, 1.3], [1.60235058E12, 0.1], [1.60234878E12, 0.1], [1.60235022E12, 9.983333333333333], [1.6023498E12, 0.4666666666666667], [1.60235082E12, 0.5], [1.6023492E12, 0.3333333333333333], [1.60235142E12, 5.4], [1.6023486E12, 9.55], [1.6023504E12, 0.7833333333333333], [1.60234962E12, 0.4666666666666667], [1.60235004E12, 8.633333333333333], [1.60234902E12, 0.1], [1.60235064E12, 0.1], [1.60235124E12, 0.05], [1.60234842E12, 4.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60235148E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60234836E12, "maxY": 10.166666666666666, "series": [{"data": [[1.60234944E12, 0.06666666666666667], [1.60235148E12, 0.06666666666666667], [1.60234884E12, 0.18333333333333332], [1.60235046E12, 0.06666666666666667], [1.60234986E12, 0.11666666666666667], [1.60235106E12, 0.2833333333333333], [1.60234926E12, 0.2], [1.6023507E12, 0.03333333333333333], [1.60234866E12, 1.3833333333333333], [1.6023513E12, 2.3833333333333333], [1.60234968E12, 0.1], [1.60235028E12, 9.783333333333333], [1.60234908E12, 0.06666666666666667], [1.60235088E12, 0.08333333333333333], [1.60234848E12, 0.15], [1.60235052E12, 0.03333333333333333], [1.6023495E12, 0.15], [1.60235112E12, 0.5833333333333334], [1.6023489E12, 0.06666666666666667], [1.6023501E12, 5.233333333333333], [1.60234992E12, 2.15], [1.60234932E12, 0.15], [1.60235034E12, 0.03333333333333333], [1.60234872E12, 0.6666666666666666], [1.60235094E12, 0.16666666666666666], [1.60234974E12, 1.3], [1.60235118E12, 1.0666666666666667], [1.60234854E12, 10.166666666666666], [1.60235016E12, 2.3833333333333333], [1.60235076E12, 0.18333333333333332], [1.60235136E12, 1.9666666666666666], [1.60234896E12, 0.1], [1.602351E12, 0.4166666666666667], [1.60234836E12, 2.0], [1.60234998E12, 1.3], [1.60235058E12, 0.1], [1.60234878E12, 0.1], [1.60235022E12, 9.983333333333333], [1.6023498E12, 0.4666666666666667], [1.60235082E12, 0.5], [1.6023492E12, 0.3333333333333333], [1.60235142E12, 5.4], [1.6023486E12, 9.55], [1.6023504E12, 0.7833333333333333], [1.60234962E12, 0.4666666666666667], [1.60235004E12, 8.633333333333333], [1.60234902E12, 0.1], [1.60235064E12, 0.1], [1.60235124E12, 0.05], [1.60234842E12, 4.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60235148E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60234836E12, "maxY": 10.166666666666666, "series": [{"data": [[1.60234944E12, 0.06666666666666667], [1.60235148E12, 0.06666666666666667], [1.60234884E12, 0.18333333333333332], [1.60235046E12, 0.06666666666666667], [1.60234986E12, 0.11666666666666667], [1.60235106E12, 0.2833333333333333], [1.60234926E12, 0.2], [1.6023507E12, 0.03333333333333333], [1.60234866E12, 1.3833333333333333], [1.6023513E12, 2.3833333333333333], [1.60234968E12, 0.1], [1.60235028E12, 9.783333333333333], [1.60234908E12, 0.06666666666666667], [1.60235088E12, 0.08333333333333333], [1.60234848E12, 0.15], [1.60235052E12, 0.03333333333333333], [1.6023495E12, 0.15], [1.60235112E12, 0.5833333333333334], [1.6023489E12, 0.06666666666666667], [1.6023501E12, 5.233333333333333], [1.60234992E12, 2.15], [1.60234932E12, 0.15], [1.60235034E12, 0.03333333333333333], [1.60234872E12, 0.6666666666666666], [1.60235094E12, 0.16666666666666666], [1.60234974E12, 1.3], [1.60235118E12, 1.0666666666666667], [1.60234854E12, 10.166666666666666], [1.60235016E12, 2.3833333333333333], [1.60235076E12, 0.18333333333333332], [1.60235136E12, 1.9666666666666666], [1.60234896E12, 0.1], [1.602351E12, 0.4166666666666667], [1.60234836E12, 2.0], [1.60234998E12, 1.3], [1.60235058E12, 0.1], [1.60234878E12, 0.1], [1.60235022E12, 9.983333333333333], [1.6023498E12, 0.4666666666666667], [1.60235082E12, 0.5], [1.6023492E12, 0.3333333333333333], [1.60235142E12, 5.4], [1.6023486E12, 9.55], [1.6023504E12, 0.7833333333333333], [1.60234962E12, 0.4666666666666667], [1.60235004E12, 8.633333333333333], [1.60234902E12, 0.1], [1.60235064E12, 0.1], [1.60235124E12, 0.05], [1.60234842E12, 4.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60235148E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

