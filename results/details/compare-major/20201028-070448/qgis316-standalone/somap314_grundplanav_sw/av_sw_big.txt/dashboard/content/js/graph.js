/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 254707.0, "series": [{"data": [[0.0, 8.0], [0.1, 10.0], [0.2, 11.0], [0.3, 12.0], [0.4, 13.0], [0.5, 14.0], [0.6, 14.0], [0.7, 15.0], [0.8, 16.0], [0.9, 16.0], [1.0, 16.0], [1.1, 17.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 22.0], [4.7, 22.0], [4.8, 22.0], [4.9, 22.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 24.0], [5.4, 24.0], [5.5, 24.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 25.0], [6.3, 25.0], [6.4, 25.0], [6.5, 25.0], [6.6, 25.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 26.0], [7.1, 26.0], [7.2, 26.0], [7.3, 26.0], [7.4, 26.0], [7.5, 26.0], [7.6, 26.0], [7.7, 26.0], [7.8, 26.0], [7.9, 26.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 28.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 29.0], [9.1, 29.0], [9.2, 29.0], [9.3, 29.0], [9.4, 30.0], [9.5, 30.0], [9.6, 31.0], [9.7, 31.0], [9.8, 32.0], [9.9, 32.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 34.0], [10.4, 34.0], [10.5, 34.0], [10.6, 35.0], [10.7, 35.0], [10.8, 35.0], [10.9, 35.0], [11.0, 35.0], [11.1, 36.0], [11.2, 37.0], [11.3, 38.0], [11.4, 38.0], [11.5, 39.0], [11.6, 40.0], [11.7, 42.0], [11.8, 45.0], [11.9, 47.0], [12.0, 51.0], [12.1, 53.0], [12.2, 58.0], [12.3, 69.0], [12.4, 73.0], [12.5, 87.0], [12.6, 91.0], [12.7, 96.0], [12.8, 99.0], [12.9, 101.0], [13.0, 102.0], [13.1, 103.0], [13.2, 104.0], [13.3, 105.0], [13.4, 106.0], [13.5, 108.0], [13.6, 110.0], [13.7, 111.0], [13.8, 113.0], [13.9, 114.0], [14.0, 115.0], [14.1, 115.0], [14.2, 116.0], [14.3, 117.0], [14.4, 117.0], [14.5, 117.0], [14.6, 118.0], [14.7, 118.0], [14.8, 118.0], [14.9, 119.0], [15.0, 119.0], [15.1, 119.0], [15.2, 119.0], [15.3, 119.0], [15.4, 120.0], [15.5, 120.0], [15.6, 120.0], [15.7, 120.0], [15.8, 120.0], [15.9, 120.0], [16.0, 121.0], [16.1, 121.0], [16.2, 121.0], [16.3, 121.0], [16.4, 122.0], [16.5, 122.0], [16.6, 122.0], [16.7, 122.0], [16.8, 122.0], [16.9, 123.0], [17.0, 123.0], [17.1, 123.0], [17.2, 123.0], [17.3, 124.0], [17.4, 124.0], [17.5, 124.0], [17.6, 125.0], [17.7, 125.0], [17.8, 125.0], [17.9, 125.0], [18.0, 125.0], [18.1, 126.0], [18.2, 126.0], [18.3, 126.0], [18.4, 127.0], [18.5, 127.0], [18.6, 127.0], [18.7, 128.0], [18.8, 128.0], [18.9, 128.0], [19.0, 129.0], [19.1, 129.0], [19.2, 130.0], [19.3, 130.0], [19.4, 131.0], [19.5, 132.0], [19.6, 133.0], [19.7, 133.0], [19.8, 134.0], [19.9, 134.0], [20.0, 135.0], [20.1, 135.0], [20.2, 136.0], [20.3, 137.0], [20.4, 138.0], [20.5, 138.0], [20.6, 139.0], [20.7, 139.0], [20.8, 140.0], [20.9, 141.0], [21.0, 142.0], [21.1, 142.0], [21.2, 144.0], [21.3, 145.0], [21.4, 145.0], [21.5, 145.0], [21.6, 146.0], [21.7, 147.0], [21.8, 148.0], [21.9, 149.0], [22.0, 150.0], [22.1, 151.0], [22.2, 153.0], [22.3, 155.0], [22.4, 156.0], [22.5, 157.0], [22.6, 157.0], [22.7, 159.0], [22.8, 160.0], [22.9, 163.0], [23.0, 163.0], [23.1, 165.0], [23.2, 167.0], [23.3, 168.0], [23.4, 169.0], [23.5, 170.0], [23.6, 172.0], [23.7, 173.0], [23.8, 174.0], [23.9, 175.0], [24.0, 176.0], [24.1, 177.0], [24.2, 179.0], [24.3, 180.0], [24.4, 181.0], [24.5, 182.0], [24.6, 183.0], [24.7, 185.0], [24.8, 187.0], [24.9, 189.0], [25.0, 191.0], [25.1, 192.0], [25.2, 195.0], [25.3, 198.0], [25.4, 201.0], [25.5, 203.0], [25.6, 204.0], [25.7, 207.0], [25.8, 208.0], [25.9, 211.0], [26.0, 213.0], [26.1, 214.0], [26.2, 215.0], [26.3, 217.0], [26.4, 220.0], [26.5, 223.0], [26.6, 225.0], [26.7, 227.0], [26.8, 228.0], [26.9, 230.0], [27.0, 232.0], [27.1, 234.0], [27.2, 236.0], [27.3, 238.0], [27.4, 240.0], [27.5, 241.0], [27.6, 245.0], [27.7, 248.0], [27.8, 250.0], [27.9, 252.0], [28.0, 257.0], [28.1, 259.0], [28.2, 262.0], [28.3, 262.0], [28.4, 265.0], [28.5, 268.0], [28.6, 270.0], [28.7, 271.0], [28.8, 273.0], [28.9, 274.0], [29.0, 275.0], [29.1, 277.0], [29.2, 278.0], [29.3, 280.0], [29.4, 281.0], [29.5, 283.0], [29.6, 287.0], [29.7, 289.0], [29.8, 290.0], [29.9, 291.0], [30.0, 292.0], [30.1, 294.0], [30.2, 296.0], [30.3, 297.0], [30.4, 299.0], [30.5, 300.0], [30.6, 302.0], [30.7, 305.0], [30.8, 306.0], [30.9, 310.0], [31.0, 314.0], [31.1, 316.0], [31.2, 319.0], [31.3, 321.0], [31.4, 323.0], [31.5, 325.0], [31.6, 326.0], [31.7, 329.0], [31.8, 331.0], [31.9, 333.0], [32.0, 336.0], [32.1, 337.0], [32.2, 341.0], [32.3, 343.0], [32.4, 344.0], [32.5, 346.0], [32.6, 348.0], [32.7, 349.0], [32.8, 351.0], [32.9, 354.0], [33.0, 355.0], [33.1, 359.0], [33.2, 362.0], [33.3, 363.0], [33.4, 364.0], [33.5, 366.0], [33.6, 368.0], [33.7, 370.0], [33.8, 370.0], [33.9, 373.0], [34.0, 376.0], [34.1, 377.0], [34.2, 378.0], [34.3, 381.0], [34.4, 384.0], [34.5, 385.0], [34.6, 389.0], [34.7, 390.0], [34.8, 393.0], [34.9, 397.0], [35.0, 398.0], [35.1, 400.0], [35.2, 403.0], [35.3, 405.0], [35.4, 407.0], [35.5, 408.0], [35.6, 411.0], [35.7, 413.0], [35.8, 414.0], [35.9, 415.0], [36.0, 417.0], [36.1, 419.0], [36.2, 421.0], [36.3, 423.0], [36.4, 425.0], [36.5, 427.0], [36.6, 429.0], [36.7, 430.0], [36.8, 434.0], [36.9, 436.0], [37.0, 440.0], [37.1, 442.0], [37.2, 442.0], [37.3, 445.0], [37.4, 448.0], [37.5, 450.0], [37.6, 453.0], [37.7, 453.0], [37.8, 455.0], [37.9, 458.0], [38.0, 461.0], [38.1, 462.0], [38.2, 463.0], [38.3, 464.0], [38.4, 466.0], [38.5, 468.0], [38.6, 469.0], [38.7, 471.0], [38.8, 472.0], [38.9, 474.0], [39.0, 475.0], [39.1, 478.0], [39.2, 480.0], [39.3, 481.0], [39.4, 484.0], [39.5, 486.0], [39.6, 489.0], [39.7, 490.0], [39.8, 491.0], [39.9, 493.0], [40.0, 496.0], [40.1, 498.0], [40.2, 500.0], [40.3, 503.0], [40.4, 504.0], [40.5, 505.0], [40.6, 508.0], [40.7, 510.0], [40.8, 512.0], [40.9, 514.0], [41.0, 516.0], [41.1, 519.0], [41.2, 522.0], [41.3, 523.0], [41.4, 524.0], [41.5, 525.0], [41.6, 526.0], [41.7, 528.0], [41.8, 530.0], [41.9, 531.0], [42.0, 533.0], [42.1, 535.0], [42.2, 538.0], [42.3, 539.0], [42.4, 542.0], [42.5, 543.0], [42.6, 544.0], [42.7, 546.0], [42.8, 547.0], [42.9, 549.0], [43.0, 552.0], [43.1, 558.0], [43.2, 561.0], [43.3, 564.0], [43.4, 567.0], [43.5, 569.0], [43.6, 574.0], [43.7, 577.0], [43.8, 578.0], [43.9, 581.0], [44.0, 585.0], [44.1, 586.0], [44.2, 588.0], [44.3, 590.0], [44.4, 592.0], [44.5, 595.0], [44.6, 597.0], [44.7, 599.0], [44.8, 601.0], [44.9, 603.0], [45.0, 605.0], [45.1, 607.0], [45.2, 611.0], [45.3, 613.0], [45.4, 618.0], [45.5, 620.0], [45.6, 622.0], [45.7, 625.0], [45.8, 629.0], [45.9, 632.0], [46.0, 633.0], [46.1, 636.0], [46.2, 637.0], [46.3, 638.0], [46.4, 640.0], [46.5, 642.0], [46.6, 644.0], [46.7, 647.0], [46.8, 649.0], [46.9, 651.0], [47.0, 653.0], [47.1, 655.0], [47.2, 658.0], [47.3, 661.0], [47.4, 663.0], [47.5, 665.0], [47.6, 667.0], [47.7, 671.0], [47.8, 674.0], [47.9, 675.0], [48.0, 678.0], [48.1, 681.0], [48.2, 685.0], [48.3, 688.0], [48.4, 691.0], [48.5, 695.0], [48.6, 698.0], [48.7, 700.0], [48.8, 703.0], [48.9, 705.0], [49.0, 707.0], [49.1, 708.0], [49.2, 713.0], [49.3, 717.0], [49.4, 719.0], [49.5, 721.0], [49.6, 724.0], [49.7, 728.0], [49.8, 730.0], [49.9, 734.0], [50.0, 736.0], [50.1, 739.0], [50.2, 740.0], [50.3, 740.0], [50.4, 742.0], [50.5, 746.0], [50.6, 749.0], [50.7, 752.0], [50.8, 754.0], [50.9, 760.0], [51.0, 762.0], [51.1, 767.0], [51.2, 768.0], [51.3, 771.0], [51.4, 773.0], [51.5, 775.0], [51.6, 779.0], [51.7, 782.0], [51.8, 783.0], [51.9, 784.0], [52.0, 790.0], [52.1, 792.0], [52.2, 794.0], [52.3, 796.0], [52.4, 799.0], [52.5, 802.0], [52.6, 803.0], [52.7, 806.0], [52.8, 807.0], [52.9, 809.0], [53.0, 812.0], [53.1, 813.0], [53.2, 819.0], [53.3, 823.0], [53.4, 824.0], [53.5, 826.0], [53.6, 829.0], [53.7, 832.0], [53.8, 833.0], [53.9, 835.0], [54.0, 839.0], [54.1, 844.0], [54.2, 847.0], [54.3, 849.0], [54.4, 850.0], [54.5, 851.0], [54.6, 854.0], [54.7, 856.0], [54.8, 858.0], [54.9, 863.0], [55.0, 865.0], [55.1, 870.0], [55.2, 872.0], [55.3, 877.0], [55.4, 880.0], [55.5, 881.0], [55.6, 886.0], [55.7, 888.0], [55.8, 890.0], [55.9, 891.0], [56.0, 897.0], [56.1, 903.0], [56.2, 908.0], [56.3, 911.0], [56.4, 913.0], [56.5, 917.0], [56.6, 919.0], [56.7, 921.0], [56.8, 925.0], [56.9, 929.0], [57.0, 932.0], [57.1, 935.0], [57.2, 940.0], [57.3, 945.0], [57.4, 950.0], [57.5, 952.0], [57.6, 955.0], [57.7, 956.0], [57.8, 960.0], [57.9, 962.0], [58.0, 964.0], [58.1, 967.0], [58.2, 970.0], [58.3, 972.0], [58.4, 974.0], [58.5, 979.0], [58.6, 982.0], [58.7, 984.0], [58.8, 986.0], [58.9, 988.0], [59.0, 993.0], [59.1, 998.0], [59.2, 1002.0], [59.3, 1005.0], [59.4, 1008.0], [59.5, 1013.0], [59.6, 1015.0], [59.7, 1018.0], [59.8, 1021.0], [59.9, 1029.0], [60.0, 1035.0], [60.1, 1038.0], [60.2, 1040.0], [60.3, 1042.0], [60.4, 1044.0], [60.5, 1050.0], [60.6, 1052.0], [60.7, 1055.0], [60.8, 1061.0], [60.9, 1063.0], [61.0, 1065.0], [61.1, 1067.0], [61.2, 1070.0], [61.3, 1074.0], [61.4, 1079.0], [61.5, 1083.0], [61.6, 1089.0], [61.7, 1093.0], [61.8, 1095.0], [61.9, 1100.0], [62.0, 1104.0], [62.1, 1105.0], [62.2, 1109.0], [62.3, 1112.0], [62.4, 1116.0], [62.5, 1123.0], [62.6, 1126.0], [62.7, 1129.0], [62.8, 1131.0], [62.9, 1134.0], [63.0, 1137.0], [63.1, 1139.0], [63.2, 1143.0], [63.3, 1145.0], [63.4, 1147.0], [63.5, 1153.0], [63.6, 1157.0], [63.7, 1163.0], [63.8, 1167.0], [63.9, 1171.0], [64.0, 1174.0], [64.1, 1177.0], [64.2, 1179.0], [64.3, 1184.0], [64.4, 1185.0], [64.5, 1187.0], [64.6, 1191.0], [64.7, 1193.0], [64.8, 1199.0], [64.9, 1201.0], [65.0, 1206.0], [65.1, 1208.0], [65.2, 1212.0], [65.3, 1214.0], [65.4, 1220.0], [65.5, 1223.0], [65.6, 1227.0], [65.7, 1230.0], [65.8, 1235.0], [65.9, 1237.0], [66.0, 1239.0], [66.1, 1240.0], [66.2, 1242.0], [66.3, 1243.0], [66.4, 1248.0], [66.5, 1252.0], [66.6, 1254.0], [66.7, 1258.0], [66.8, 1261.0], [66.9, 1263.0], [67.0, 1265.0], [67.1, 1267.0], [67.2, 1270.0], [67.3, 1272.0], [67.4, 1276.0], [67.5, 1279.0], [67.6, 1283.0], [67.7, 1285.0], [67.8, 1287.0], [67.9, 1290.0], [68.0, 1292.0], [68.1, 1295.0], [68.2, 1297.0], [68.3, 1299.0], [68.4, 1302.0], [68.5, 1305.0], [68.6, 1309.0], [68.7, 1312.0], [68.8, 1317.0], [68.9, 1320.0], [69.0, 1326.0], [69.1, 1329.0], [69.2, 1332.0], [69.3, 1336.0], [69.4, 1339.0], [69.5, 1345.0], [69.6, 1347.0], [69.7, 1352.0], [69.8, 1358.0], [69.9, 1360.0], [70.0, 1362.0], [70.1, 1368.0], [70.2, 1371.0], [70.3, 1374.0], [70.4, 1376.0], [70.5, 1378.0], [70.6, 1387.0], [70.7, 1389.0], [70.8, 1391.0], [70.9, 1395.0], [71.0, 1396.0], [71.1, 1402.0], [71.2, 1411.0], [71.3, 1420.0], [71.4, 1425.0], [71.5, 1431.0], [71.6, 1436.0], [71.7, 1440.0], [71.8, 1443.0], [71.9, 1443.0], [72.0, 1446.0], [72.1, 1449.0], [72.2, 1453.0], [72.3, 1461.0], [72.4, 1464.0], [72.5, 1471.0], [72.6, 1480.0], [72.7, 1485.0], [72.8, 1489.0], [72.9, 1493.0], [73.0, 1494.0], [73.1, 1499.0], [73.2, 1504.0], [73.3, 1512.0], [73.4, 1524.0], [73.5, 1530.0], [73.6, 1532.0], [73.7, 1546.0], [73.8, 1549.0], [73.9, 1552.0], [74.0, 1559.0], [74.1, 1564.0], [74.2, 1566.0], [74.3, 1571.0], [74.4, 1577.0], [74.5, 1580.0], [74.6, 1582.0], [74.7, 1591.0], [74.8, 1595.0], [74.9, 1603.0], [75.0, 1606.0], [75.1, 1609.0], [75.2, 1620.0], [75.3, 1624.0], [75.4, 1633.0], [75.5, 1635.0], [75.6, 1641.0], [75.7, 1644.0], [75.8, 1651.0], [75.9, 1653.0], [76.0, 1658.0], [76.1, 1666.0], [76.2, 1670.0], [76.3, 1673.0], [76.4, 1681.0], [76.5, 1684.0], [76.6, 1686.0], [76.7, 1693.0], [76.8, 1696.0], [76.9, 1705.0], [77.0, 1713.0], [77.1, 1718.0], [77.2, 1725.0], [77.3, 1730.0], [77.4, 1741.0], [77.5, 1742.0], [77.6, 1750.0], [77.7, 1756.0], [77.8, 1769.0], [77.9, 1776.0], [78.0, 1788.0], [78.1, 1800.0], [78.2, 1804.0], [78.3, 1816.0], [78.4, 1824.0], [78.5, 1836.0], [78.6, 1844.0], [78.7, 1847.0], [78.8, 1856.0], [78.9, 1859.0], [79.0, 1868.0], [79.1, 1881.0], [79.2, 1886.0], [79.3, 1893.0], [79.4, 1898.0], [79.5, 1909.0], [79.6, 1917.0], [79.7, 1922.0], [79.8, 1926.0], [79.9, 1930.0], [80.0, 1940.0], [80.1, 1943.0], [80.2, 1954.0], [80.3, 1958.0], [80.4, 1968.0], [80.5, 1973.0], [80.6, 1979.0], [80.7, 1990.0], [80.8, 1998.0], [80.9, 2002.0], [81.0, 2014.0], [81.1, 2023.0], [81.2, 2029.0], [81.3, 2043.0], [81.4, 2055.0], [81.5, 2065.0], [81.6, 2079.0], [81.7, 2085.0], [81.8, 2098.0], [81.9, 2115.0], [82.0, 2122.0], [82.1, 2134.0], [82.2, 2143.0], [82.3, 2150.0], [82.4, 2160.0], [82.5, 2170.0], [82.6, 2174.0], [82.7, 2179.0], [82.8, 2191.0], [82.9, 2202.0], [83.0, 2205.0], [83.1, 2216.0], [83.2, 2224.0], [83.3, 2237.0], [83.4, 2253.0], [83.5, 2271.0], [83.6, 2285.0], [83.7, 2295.0], [83.8, 2307.0], [83.9, 2312.0], [84.0, 2321.0], [84.1, 2325.0], [84.2, 2331.0], [84.3, 2338.0], [84.4, 2345.0], [84.5, 2356.0], [84.6, 2390.0], [84.7, 2403.0], [84.8, 2415.0], [84.9, 2425.0], [85.0, 2432.0], [85.1, 2443.0], [85.2, 2449.0], [85.3, 2461.0], [85.4, 2467.0], [85.5, 2474.0], [85.6, 2495.0], [85.7, 2505.0], [85.8, 2518.0], [85.9, 2526.0], [86.0, 2540.0], [86.1, 2553.0], [86.2, 2559.0], [86.3, 2584.0], [86.4, 2602.0], [86.5, 2616.0], [86.6, 2639.0], [86.7, 2649.0], [86.8, 2660.0], [86.9, 2684.0], [87.0, 2709.0], [87.1, 2720.0], [87.2, 2738.0], [87.3, 2757.0], [87.4, 2773.0], [87.5, 2792.0], [87.6, 2817.0], [87.7, 2828.0], [87.8, 2848.0], [87.9, 2868.0], [88.0, 2902.0], [88.1, 2912.0], [88.2, 2942.0], [88.3, 2957.0], [88.4, 2964.0], [88.5, 2984.0], [88.6, 3003.0], [88.7, 3029.0], [88.8, 3048.0], [88.9, 3056.0], [89.0, 3082.0], [89.1, 3100.0], [89.2, 3116.0], [89.3, 3137.0], [89.4, 3160.0], [89.5, 3187.0], [89.6, 3233.0], [89.7, 3248.0], [89.8, 3260.0], [89.9, 3278.0], [90.0, 3325.0], [90.1, 3345.0], [90.2, 3371.0], [90.3, 3405.0], [90.4, 3428.0], [90.5, 3446.0], [90.6, 3475.0], [90.7, 3493.0], [90.8, 3509.0], [90.9, 3556.0], [91.0, 3579.0], [91.1, 3638.0], [91.2, 3660.0], [91.3, 3712.0], [91.4, 3745.0], [91.5, 3785.0], [91.6, 3830.0], [91.7, 3875.0], [91.8, 3960.0], [91.9, 4051.0], [92.0, 4125.0], [92.1, 4215.0], [92.2, 4272.0], [92.3, 4460.0], [92.4, 4543.0], [92.5, 4655.0], [92.6, 4736.0], [92.7, 4787.0], [92.8, 4913.0], [92.9, 4994.0], [93.0, 5089.0], [93.1, 5144.0], [93.2, 5200.0], [93.3, 5345.0], [93.4, 5462.0], [93.5, 5613.0], [93.6, 5682.0], [93.7, 5995.0], [93.8, 6082.0], [93.9, 6250.0], [94.0, 6452.0], [94.1, 6700.0], [94.2, 7638.0], [94.3, 8332.0], [94.4, 9441.0], [94.5, 15125.0], [94.6, 19016.0], [94.7, 29566.0], [94.8, 40876.0], [94.9, 62484.0], [95.0, 72323.0], [95.1, 75313.0], [95.2, 80240.0], [95.3, 81716.0], [95.4, 82161.0], [95.5, 82915.0], [95.6, 83062.0], [95.7, 83409.0], [95.8, 83557.0], [95.9, 83649.0], [96.0, 83832.0], [96.1, 84002.0], [96.2, 84158.0], [96.3, 84287.0], [96.4, 84382.0], [96.5, 84662.0], [96.6, 84751.0], [96.7, 84963.0], [96.8, 85161.0], [96.9, 85368.0], [97.0, 85490.0], [97.1, 85789.0], [97.2, 86010.0], [97.3, 86189.0], [97.4, 86591.0], [97.5, 87022.0], [97.6, 87481.0], [97.7, 88301.0], [97.8, 89488.0], [97.9, 90129.0], [98.0, 90595.0], [98.1, 91808.0], [98.2, 93393.0], [98.3, 100376.0], [98.4, 101195.0], [98.5, 103002.0], [98.6, 103635.0], [98.7, 104904.0], [98.8, 107987.0], [98.9, 132311.0], [99.0, 153374.0], [99.1, 154707.0], [99.2, 158858.0], [99.3, 164190.0], [99.4, 166797.0], [99.5, 168993.0], [99.6, 170444.0], [99.7, 171548.0], [99.8, 173703.0], [99.9, 239164.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 665.0, "series": [{"data": [[0.0, 665.0], [138400.0, 1.0], [164000.0, 1.0], [170400.0, 1.0], [173600.0, 1.0], [172900.0, 1.0], [72300.0, 1.0], [81900.0, 1.0], [81100.0, 1.0], [85900.0, 3.0], [85100.0, 5.0], [82700.0, 1.0], [83500.0, 5.0], [84300.0, 6.0], [88300.0, 1.0], [90700.0, 1.0], [96300.0, 1.0], [100300.0, 1.0], [101100.0, 2.0], [103500.0, 1.0], [104300.0, 1.0], [108300.0, 1.0], [133800.0, 1.0], [154600.0, 1.0], [170600.0, 1.0], [169000.0, 1.0], [165800.0, 1.0], [175400.0, 1.0], [188200.0, 1.0], [186600.0, 1.0], [100.0, 651.0], [35700.0, 1.0], [39300.0, 1.0], [171500.0, 1.0], [166700.0, 1.0], [46900.0, 1.0], [200.0, 266.0], [60900.0, 1.0], [254700.0, 1.0], [300.0, 238.0], [81800.0, 2.0], [80200.0, 1.0], [85800.0, 1.0], [83400.0, 4.0], [84200.0, 5.0], [85000.0, 1.0], [89800.0, 1.0], [87400.0, 1.0], [86600.0, 1.0], [91400.0, 1.0], [92200.0, 2.0], [400.0, 265.0], [104200.0, 2.0], [102600.0, 2.0], [105000.0, 1.0], [108200.0, 2.0], [500.0, 239.0], [600.0, 200.0], [170800.0, 1.0], [169200.0, 1.0], [167600.0, 1.0], [700.0, 197.0], [172400.0, 1.0], [800.0, 187.0], [900.0, 161.0], [1000.0, 143.0], [1100.0, 153.0], [1200.0, 180.0], [1300.0, 141.0], [1400.0, 110.0], [1500.0, 89.0], [1600.0, 104.0], [1700.0, 64.0], [1800.0, 69.0], [1900.0, 73.0], [2000.0, 51.0], [2100.0, 56.0], [2300.0, 48.0], [2200.0, 44.0], [2400.0, 50.0], [154100.0, 1.0], [152500.0, 1.0], [2500.0, 39.0], [2600.0, 31.0], [2700.0, 30.0], [2800.0, 23.0], [2900.0, 31.0], [3000.0, 26.0], [3100.0, 24.0], [3300.0, 18.0], [3200.0, 20.0], [3400.0, 25.0], [3500.0, 13.0], [3700.0, 13.0], [3600.0, 14.0], [3800.0, 10.0], [3900.0, 6.0], [4000.0, 6.0], [4100.0, 4.0], [4300.0, 3.0], [4200.0, 10.0], [4500.0, 6.0], [4600.0, 4.0], [4400.0, 2.0], [4700.0, 12.0], [4800.0, 2.0], [74500.0, 1.0], [75300.0, 1.0], [4900.0, 6.0], [5100.0, 8.0], [5000.0, 7.0], [78500.0, 1.0], [81700.0, 1.0], [5300.0, 6.0], [84100.0, 2.0], [84900.0, 3.0], [85700.0, 4.0], [5200.0, 2.0], [83300.0, 1.0], [86500.0, 2.0], [5600.0, 6.0], [5400.0, 3.0], [89700.0, 2.0], [87300.0, 2.0], [88100.0, 1.0], [5500.0, 4.0], [90500.0, 2.0], [5800.0, 2.0], [5700.0, 1.0], [5900.0, 3.0], [6100.0, 4.0], [6000.0, 5.0], [99300.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [102500.0, 1.0], [104900.0, 1.0], [6500.0, 3.0], [6400.0, 3.0], [6600.0, 1.0], [6700.0, 2.0], [7100.0, 1.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 2.0], [7900.0, 1.0], [8300.0, 2.0], [8400.0, 1.0], [8200.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [9400.0, 1.0], [150200.0, 1.0], [10100.0, 1.0], [171000.0, 1.0], [164600.0, 1.0], [10900.0, 1.0], [13300.0, 1.0], [14300.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [15700.0, 1.0], [249400.0, 1.0], [17200.0, 1.0], [19000.0, 1.0], [22600.0, 1.0], [23200.0, 1.0], [26000.0, 1.0], [154300.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [168700.0, 1.0], [239100.0, 1.0], [62400.0, 1.0], [65200.0, 1.0], [84000.0, 5.0], [84800.0, 2.0], [82400.0, 1.0], [88800.0, 1.0], [86400.0, 1.0], [87200.0, 1.0], [90400.0, 1.0], [93600.0, 1.0], [92000.0, 1.0], [100800.0, 2.0], [103200.0, 2.0], [107200.0, 1.0], [122400.0, 1.0], [172800.0, 1.0], [243200.0, 1.0], [149700.0, 1.0], [168900.0, 2.0], [164100.0, 1.0], [173700.0, 1.0], [183300.0, 1.0], [75100.0, 2.0], [78300.0, 1.0], [80700.0, 1.0], [84700.0, 3.0], [83900.0, 3.0], [85500.0, 1.0], [83100.0, 3.0], [82300.0, 1.0], [87100.0, 1.0], [91100.0, 1.0], [91900.0, 1.0], [102300.0, 1.0], [103100.0, 1.0], [107900.0, 1.0], [153800.0, 1.0], [160200.0, 1.0], [132300.0, 1.0], [154700.0, 1.0], [170700.0, 1.0], [44700.0, 1.0], [45100.0, 1.0], [242700.0, 1.0], [253900.0, 1.0], [81400.0, 1.0], [78200.0, 1.0], [80600.0, 1.0], [83000.0, 4.0], [84600.0, 4.0], [83800.0, 2.0], [82200.0, 1.0], [85400.0, 4.0], [88600.0, 1.0], [87800.0, 1.0], [86200.0, 3.0], [89400.0, 1.0], [87000.0, 1.0], [90200.0, 1.0], [91800.0, 1.0], [101400.0, 1.0], [103000.0, 1.0], [103800.0, 1.0], [158800.0, 1.0], [162000.0, 1.0], [157200.0, 1.0], [153300.0, 1.0], [158100.0, 1.0], [156500.0, 1.0], [164500.0, 1.0], [83700.0, 4.0], [84500.0, 2.0], [85300.0, 4.0], [82900.0, 2.0], [82100.0, 1.0], [90100.0, 5.0], [86100.0, 5.0], [86900.0, 1.0], [89300.0, 1.0], [93300.0, 1.0], [98100.0, 1.0], [100500.0, 1.0], [106100.0, 1.0], [107700.0, 1.0], [163800.0, 1.0], [168600.0, 2.0], [170200.0, 1.0], [16900.0, 1.0], [21100.0, 1.0], [29500.0, 1.0], [30500.0, 1.0], [156700.0, 1.0], [169500.0, 1.0], [166300.0, 1.0], [68400.0, 1.0], [69200.0, 1.0], [70000.0, 1.0], [73200.0, 1.0], [76400.0, 1.0], [80400.0, 1.0], [86000.0, 1.0], [85200.0, 2.0], [83600.0, 3.0], [82000.0, 1.0], [87600.0, 2.0], [86800.0, 2.0], [89200.0, 1.0], [103600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 254700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1394.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2087.0, "series": [{"data": [[0.0, 2087.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1709.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1394.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.6038774E12, "maxY": 10.0, "series": [{"data": [[1.60387992E12, 10.0], [1.6038783E12, 10.0], [1.60388052E12, 10.0], [1.6038789E12, 10.0], [1.60387788E12, 10.0], [1.6038795E12, 10.0], [1.60387848E12, 10.0], [1.6038801E12, 10.0], [1.60387908E12, 10.0], [1.6038807E12, 10.0], [1.60387746E12, 10.0], [1.60387968E12, 10.0], [1.60387836E12, 10.0], [1.60387998E12, 10.0], [1.60388058E12, 10.0], [1.60387956E12, 10.0], [1.60387794E12, 10.0], [1.60388016E12, 10.0], [1.60387854E12, 10.0], [1.60388076E12, 9.625], [1.60387752E12, 10.0], [1.60387914E12, 10.0], [1.60387812E12, 10.0], [1.60387974E12, 10.0], [1.60387872E12, 10.0], [1.60388034E12, 10.0], [1.6038774E12, 10.0], [1.60387902E12, 10.0], [1.603878E12, 10.0], [1.60387962E12, 10.0], [1.6038786E12, 10.0], [1.60388022E12, 10.0], [1.6038792E12, 10.0], [1.60388082E12, 2.5], [1.60387758E12, 10.0], [1.6038798E12, 10.0], [1.60387818E12, 10.0], [1.6038804E12, 10.0], [1.60387878E12, 10.0], [1.60387776E12, 10.0], [1.60387938E12, 10.0], [1.60387806E12, 10.0], [1.60387866E12, 10.0], [1.60387764E12, 10.0], [1.60387926E12, 10.0], [1.60387824E12, 10.0], [1.60387884E12, 10.0], [1.60387944E12, 10.0], [1.60388004E12, 10.0], [1.60387842E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60388082E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 453.0, "minX": 1.0, "maxY": 81173.0, "series": [{"data": [[8.0, 1487.0], [4.0, 81173.0], [2.0, 80754.0], [1.0, 80418.0], [9.0, 453.0], [10.0, 6465.583285080101], [5.0, 2963.0], [6.0, 2639.0], [3.0, 80675.0], [7.0, 1532.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.991329479768785, 6518.358574181118]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.933333333333334, "minX": 1.6038774E12, "maxY": 3437543.1333333333, "series": [{"data": [[1.60387992E12, 22187.666666666668], [1.6038783E12, 54361.38333333333], [1.60388052E12, 430.85], [1.6038789E12, 364189.48333333334], [1.60387788E12, 32945.4], [1.6038795E12, 104521.4], [1.60387848E12, 18330.8], [1.6038801E12, 6022.5], [1.60387908E12, 363794.3], [1.6038807E12, 1859075.15], [1.60387746E12, 329326.5], [1.60387968E12, 591.25], [1.60387836E12, 24104.583333333332], [1.60387998E12, 64591.15], [1.60388058E12, 385301.7166666667], [1.60387956E12, 232740.5], [1.60387794E12, 431.0], [1.60388016E12, 62342.166666666664], [1.60387854E12, 430.43333333333334], [1.60388076E12, 181843.78333333333], [1.60387752E12, 553679.6833333333], [1.60387914E12, 35552.23333333333], [1.60387812E12, 430.98333333333335], [1.60387974E12, 21808.133333333335], [1.60387872E12, 190074.56666666668], [1.60388034E12, 58535.566666666666], [1.6038774E12, 1962194.5], [1.60387902E12, 7655.8], [1.603878E12, 71.8], [1.60387962E12, 525.3166666666667], [1.6038786E12, 53344.6], [1.60388022E12, 8113.016666666666], [1.6038792E12, 2734219.8], [1.60388082E12, 6084.416666666667], [1.60387758E12, 2411844.8333333335], [1.6038798E12, 430.8666666666667], [1.60387818E12, 21947.833333333332], [1.6038804E12, 494336.38333333336], [1.60387878E12, 3308.6833333333334], [1.60387776E12, 280170.01666666666], [1.60387938E12, 2205252.15], [1.60387806E12, 359.0], [1.60387866E12, 8901.766666666666], [1.60387764E12, 2648476.5833333335], [1.60387926E12, 1822255.1166666667], [1.60387824E12, 2449.7166666666667], [1.60387884E12, 5830.883333333333], [1.60387944E12, 3437543.1333333333], [1.60388004E12, 20420.55], [1.60387842E12, 851.7666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60387992E12, 70.65], [1.6038783E12, 144.78333333333333], [1.60388052E12, 47.55], [1.6038789E12, 475.3666666666667], [1.60387788E12, 79.18333333333334], [1.6038795E12, 249.58333333333334], [1.60387848E12, 53.18333333333333], [1.6038801E12, 53.96666666666667], [1.60387908E12, 1018.1333333333333], [1.6038807E12, 3081.3333333333335], [1.60387746E12, 431.15], [1.60387968E12, 15.883333333333333], [1.60387836E12, 68.95], [1.60387998E12, 131.45], [1.60388058E12, 1120.3666666666666], [1.60387956E12, 363.51666666666665], [1.60387794E12, 47.6], [1.60388016E12, 108.75], [1.60387854E12, 23.033333333333335], [1.60388076E12, 318.95], [1.60387752E12, 956.8666666666667], [1.60387914E12, 71.16666666666667], [1.60387812E12, 47.6], [1.60387974E12, 55.266666666666666], [1.60387872E12, 356.43333333333334], [1.60388034E12, 150.56666666666666], [1.6038774E12, 2746.6666666666665], [1.60387902E12, 55.483333333333334], [1.603878E12, 7.933333333333334], [1.60387962E12, 55.56666666666667], [1.6038786E12, 125.68333333333334], [1.60388022E12, 133.71666666666667], [1.6038792E12, 4266.516666666666], [1.60388082E12, 31.733333333333334], [1.60387758E12, 4726.766666666666], [1.6038798E12, 47.6], [1.60387818E12, 53.63333333333333], [1.6038804E12, 812.3666666666667], [1.60387878E12, 15.916666666666666], [1.60387776E12, 347.75], [1.60387938E12, 4862.15], [1.60387806E12, 39.666666666666664], [1.60387866E12, 78.35], [1.60387764E12, 4018.9666666666667], [1.60387926E12, 2553.55], [1.60387824E12, 38.65], [1.60387884E12, 47.63333333333333], [1.60387944E12, 5065.533333333334], [1.60388004E12, 83.83333333333333], [1.60387842E12, 31.383333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60388082E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 544.5, "minX": 1.6038774E12, "maxY": 158165.0, "series": [{"data": [[1.60387992E12, 94412.11111111111], [1.6038783E12, 47757.789473684206], [1.60388052E12, 85195.66666666667], [1.6038789E12, 27226.48333333333], [1.60387788E12, 97433.8], [1.6038795E12, 1122.4062499999998], [1.60387848E12, 97427.71428571429], [1.6038801E12, 101687.85714285714], [1.60387908E12, 9707.9465648855], [1.6038807E12, 3186.7052896725463], [1.60387746E12, 1246.2033898305083], [1.60387968E12, 89797.5], [1.60387836E12, 52142.333333333336], [1.60387998E12, 60252.588235294104], [1.60388058E12, 8878.89583333333], [1.60387956E12, 19170.239130434784], [1.60387794E12, 95955.83333333333], [1.60388016E12, 48723.928571428565], [1.60387854E12, 131682.33333333334], [1.60388076E12, 1244.525], [1.60387752E12, 8882.412698412696], [1.60387914E12, 65468.222222222226], [1.60387812E12, 145148.1666666667], [1.60387974E12, 97245.28571428571], [1.60387872E12, 23887.466666666667], [1.60388034E12, 57692.526315789466], [1.6038774E12, 1261.2297297297291], [1.60387902E12, 74815.85714285713], [1.603878E12, 158165.0], [1.60387962E12, 87295.71428571428], [1.6038786E12, 35994.625], [1.60388022E12, 45248.05882352941], [1.6038792E12, 1551.1186131386892], [1.60388082E12, 80755.0], [1.60387758E12, 957.2131410256412], [1.6038798E12, 115019.5], [1.60387818E12, 106320.0], [1.6038804E12, 9548.650485436887], [1.60387878E12, 544.5], [1.60387776E12, 24253.886363636357], [1.60387938E12, 2114.9429892141748], [1.60387806E12, 138998.4], [1.60387866E12, 74046.0], [1.60387764E12, 942.0990291262135], [1.60387926E12, 1223.266475644699], [1.60387824E12, 84171.6], [1.60387884E12, 28697.833333333336], [1.60387944E12, 928.5923076923087], [1.60388004E12, 31368.0], [1.60387842E12, 80894.25]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60388082E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 543.0, "minX": 1.6038774E12, "maxY": 158165.0, "series": [{"data": [[1.60387992E12, 94410.66666666667], [1.6038783E12, 47755.52631578948], [1.60388052E12, 85195.33333333334], [1.6038789E12, 27222.083333333343], [1.60387788E12, 97432.3], [1.6038795E12, 1121.0625], [1.60387848E12, 97425.99999999999], [1.6038801E12, 101687.28571428572], [1.60387908E12, 9705.595419847323], [1.6038807E12, 3182.1183879093205], [1.60387746E12, 1242.8813559322036], [1.60387968E12, 89797.5], [1.60387836E12, 52140.77777777778], [1.60387998E12, 60251.117647058825], [1.60388058E12, 8875.15277777777], [1.60387956E12, 19163.3695652174], [1.60387794E12, 95955.16666666667], [1.60388016E12, 48721.99999999999], [1.60387854E12, 131682.33333333334], [1.60388076E12, 1234.5], [1.60387752E12, 8879.634920634915], [1.60387914E12, 65464.111111111124], [1.60387812E12, 145148.1666666667], [1.60387974E12, 97243.85714285714], [1.60387872E12, 23884.777777777774], [1.60388034E12, 57691.31578947368], [1.6038774E12, 1255.724324324325], [1.60387902E12, 74815.0], [1.603878E12, 158165.0], [1.60387962E12, 87295.42857142857], [1.6038786E12, 35992.87500000001], [1.60388022E12, 45247.64705882354], [1.6038792E12, 1545.113138686133], [1.60388082E12, 80754.25], [1.60387758E12, 949.3028846153844], [1.6038798E12, 115019.33333333333], [1.60387818E12, 106318.0], [1.6038804E12, 9538.504854368935], [1.60387878E12, 543.0], [1.60387776E12, 24246.022727272724], [1.60387938E12, 2111.978428351307], [1.60387806E12, 138998.0], [1.60387866E12, 74045.2], [1.60387764E12, 931.3495145631064], [1.60387926E12, 1219.730659025788], [1.60387824E12, 84171.2], [1.60387884E12, 28696.666666666668], [1.60387944E12, 917.3523076923083], [1.60388004E12, 31367.0], [1.60387842E12, 80893.75]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60388082E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6038774E12, "maxY": 1.6666666666666665, "series": [{"data": [[1.60387992E12, 0.8888888888888888], [1.6038783E12, 0.6842105263157896], [1.60388052E12, 0.33333333333333337], [1.6038789E12, 0.5833333333333334], [1.60387788E12, 0.4000000000000001], [1.6038795E12, 0.5], [1.60387848E12, 0.8571428571428572], [1.6038801E12, 1.0], [1.60387908E12, 0.5877862595419846], [1.6038807E12, 0.5188916876574307], [1.60387746E12, 0.9661016949152542], [1.60387968E12, 1.0], [1.60387836E12, 0.7777777777777778], [1.60387998E12, 0.5882352941176471], [1.60388058E12, 0.5416666666666666], [1.60387956E12, 0.4782608695652176], [1.60387794E12, 1.1666666666666667], [1.60388016E12, 0.42857142857142855], [1.60387854E12, 1.6666666666666665], [1.60388076E12, 0.5250000000000001], [1.60387752E12, 0.8333333333333336], [1.60387914E12, 0.7777777777777778], [1.60387812E12, 0.8333333333333334], [1.60387974E12, 0.7142857142857143], [1.60387872E12, 0.8], [1.60388034E12, 0.47368421052631576], [1.6038774E12, 1.156756756756758], [1.60387902E12, 0.8571428571428572], [1.603878E12, 1.0], [1.60387962E12, 0.7142857142857143], [1.6038786E12, 0.8124999999999999], [1.60388022E12, 0.6470588235294118], [1.6038792E12, 0.5948905109489051], [1.60388082E12, 0.5], [1.60387758E12, 0.841346153846154], [1.6038798E12, 1.0], [1.60387818E12, 1.4285714285714286], [1.6038804E12, 0.6407766990291262], [1.60387878E12, 0.0], [1.60387776E12, 0.6136363636363638], [1.60387938E12, 0.5100154083204929], [1.60387806E12, 0.8], [1.60387866E12, 0.9], [1.60387764E12, 0.700970873786408], [1.60387926E12, 0.6017191977077364], [1.60387824E12, 1.0], [1.60387884E12, 0.8333333333333334], [1.60387944E12, 0.5569230769230775], [1.60388004E12, 0.5454545454545454], [1.60387842E12, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60388082E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6038774E12, "maxY": 254707.0, "series": [{"data": [[1.60387992E12, 254707.0], [1.6038783E12, 168719.0], [1.60388052E12, 89799.0], [1.6038789E12, 239164.0], [1.60387788E12, 108333.0], [1.6038795E12, 3221.0], [1.60387848E12, 157216.0], [1.6038801E12, 249499.0], [1.60387908E12, 170772.0], [1.6038807E12, 85358.0], [1.60387746E12, 5953.0], [1.60387968E12, 90107.0], [1.60387836E12, 92287.0], [1.60387998E12, 253900.0], [1.60388058E12, 166302.0], [1.60387956E12, 86809.0], [1.60387794E12, 107227.0], [1.60388016E12, 86640.0], [1.60387854E12, 183330.0], [1.60388076E12, 3233.0], [1.60387752E12, 104298.0], [1.60387914E12, 84662.0], [1.60387812E12, 173703.0], [1.60387974E12, 173615.0], [1.60387872E12, 242773.0], [1.60388034E12, 164544.0], [1.6038774E12, 10124.0], [1.60387902E12, 88169.0], [1.603878E12, 158165.0], [1.60387962E12, 90106.0], [1.6038786E12, 188205.0], [1.60388022E12, 170444.0], [1.6038792E12, 85108.0], [1.60388082E12, 81173.0], [1.60387758E12, 4964.0], [1.6038798E12, 172916.0], [1.60387818E12, 170661.0], [1.6038804E12, 93393.0], [1.60387878E12, 724.0], [1.60387776E12, 103841.0], [1.60387938E12, 85276.0], [1.60387806E12, 175404.0], [1.60387866E12, 243211.0], [1.60387764E12, 5090.0], [1.60387926E12, 6452.0], [1.60387824E12, 171548.0], [1.60387884E12, 170835.0], [1.60387944E12, 4858.0], [1.60388004E12, 81969.0], [1.60387842E12, 86186.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60387992E12, 97.0], [1.6038783E12, 11.0], [1.60388052E12, 83440.0], [1.6038789E12, 26.0], [1.60387788E12, 89883.0], [1.6038795E12, 18.0], [1.60387848E12, 1133.0], [1.6038801E12, 3124.0], [1.60387908E12, 19.375999937057497], [1.6038807E12, 14.581999905109406], [1.60387746E12, 22.0], [1.60387968E12, 89488.0], [1.60387836E12, 160.0], [1.60387998E12, 9.0], [1.60388058E12, 16.304999965429307], [1.60387956E12, 119.0], [1.60387794E12, 88891.0], [1.60388016E12, 133.0], [1.60387854E12, 73280.0], [1.60388076E12, 111.0], [1.60387752E12, 9.0], [1.60387914E12, 157.0], [1.60387812E12, 92268.0], [1.60387974E12, 83545.0], [1.60387872E12, 109.0], [1.60388034E12, 123.0], [1.6038774E12, 21.0], [1.60387902E12, 2865.0], [1.603878E12, 158165.0], [1.60387962E12, 85705.0], [1.6038786E12, 99.0], [1.60388022E12, 87.0], [1.6038792E12, 14.0], [1.60388082E12, 80418.0], [1.60387758E12, 17.0], [1.6038798E12, 85271.0], [1.60387818E12, 6348.0], [1.6038804E12, 12.0], [1.60387878E12, 365.0], [1.60387776E12, 126.0], [1.60387938E12, 12.699999690055847], [1.60387806E12, 93666.0], [1.60387866E12, 106.0], [1.60387764E12, 16.0], [1.60387926E12, 20.0], [1.60387824E12, 19016.0], [1.60387884E12, 128.0], [1.60387944E12, 18.0], [1.60388004E12, 10.0], [1.60387842E12, 65271.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60387992E12, 97.0], [1.6038783E12, 11.0], [1.60388052E12, 83440.0], [1.6038789E12, 26.0], [1.60387788E12, 89883.0], [1.6038795E12, 18.0], [1.60387848E12, 1133.0], [1.6038801E12, 3124.0], [1.60387908E12, 19.613600025177004], [1.6038807E12, 14.940200037956238], [1.60387746E12, 22.0], [1.60387968E12, 89488.0], [1.60387836E12, 160.0], [1.60387998E12, 9.0], [1.60388058E12, 16.43550001382828], [1.60387956E12, 119.0], [1.60387794E12, 88891.0], [1.60388016E12, 133.0], [1.60387854E12, 73280.0], [1.60388076E12, 111.0], [1.60387752E12, 9.0], [1.60387914E12, 157.0], [1.60387812E12, 92268.0], [1.60387974E12, 83545.0], [1.60387872E12, 109.0], [1.60388034E12, 123.0], [1.6038774E12, 21.0], [1.60387902E12, 2865.0], [1.603878E12, 158165.0], [1.60387962E12, 85705.0], [1.6038786E12, 99.0], [1.60388022E12, 87.0], [1.6038792E12, 14.0], [1.60388082E12, 80418.0], [1.60387758E12, 17.187500059604645], [1.6038798E12, 85271.0], [1.60387818E12, 6348.0], [1.6038804E12, 12.059200019836426], [1.60387878E12, 365.0], [1.60387776E12, 126.0], [1.60387938E12, 13.43500006198883], [1.60387806E12, 93666.0], [1.60387866E12, 106.0], [1.60387764E12, 16.108400049209596], [1.60387926E12, 20.0], [1.60387824E12, 19016.0], [1.60387884E12, 128.0], [1.60387944E12, 18.0], [1.60388004E12, 10.0], [1.60387842E12, 65271.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60387992E12, 97.0], [1.6038783E12, 11.0], [1.60388052E12, 83440.0], [1.6038789E12, 26.0], [1.60387788E12, 89883.0], [1.6038795E12, 18.0], [1.60387848E12, 1133.0], [1.6038801E12, 3124.0], [1.60387908E12, 19.507999968528747], [1.6038807E12, 14.780999952554703], [1.60387746E12, 22.0], [1.60387968E12, 89488.0], [1.60387836E12, 160.0], [1.60387998E12, 9.0], [1.60388058E12, 16.377499982714653], [1.60387956E12, 119.0], [1.60387794E12, 88891.0], [1.60388016E12, 133.0], [1.60387854E12, 73280.0], [1.60388076E12, 111.0], [1.60387752E12, 9.0], [1.60387914E12, 157.0], [1.60387812E12, 92268.0], [1.60387974E12, 83545.0], [1.60387872E12, 109.0], [1.60388034E12, 123.0], [1.6038774E12, 21.0], [1.60387902E12, 2865.0], [1.603878E12, 158165.0], [1.60387962E12, 85705.0], [1.6038786E12, 99.0], [1.60388022E12, 87.0], [1.6038792E12, 14.0], [1.60388082E12, 80418.0], [1.60387758E12, 17.0], [1.6038798E12, 85271.0], [1.60387818E12, 6348.0], [1.6038804E12, 12.0], [1.60387878E12, 365.0], [1.60387776E12, 126.0], [1.60387938E12, 13.174999922513962], [1.60387806E12, 93666.0], [1.60387866E12, 106.0], [1.60387764E12, 16.0], [1.60387926E12, 20.0], [1.60387824E12, 19016.0], [1.60387884E12, 128.0], [1.60387944E12, 18.0], [1.60388004E12, 10.0], [1.60387842E12, 65271.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60387992E12, 97.0], [1.6038783E12, 11.0], [1.60388052E12, 83440.0], [1.6038789E12, 26.0], [1.60387788E12, 89883.0], [1.6038795E12, 18.0], [1.60387848E12, 1133.0], [1.6038801E12, 3124.0], [1.60387908E12, 19.0], [1.6038807E12, 13.0], [1.60387746E12, 22.0], [1.60387968E12, 89488.0], [1.60387836E12, 160.0], [1.60387998E12, 9.0], [1.60388058E12, 16.0], [1.60387956E12, 119.0], [1.60387794E12, 88891.0], [1.60388016E12, 133.0], [1.60387854E12, 73280.0], [1.60388076E12, 111.0], [1.60387752E12, 9.0], [1.60387914E12, 157.0], [1.60387812E12, 92268.0], [1.60387974E12, 83545.0], [1.60387872E12, 109.0], [1.60388034E12, 123.0], [1.6038774E12, 21.0], [1.60387902E12, 2865.0], [1.603878E12, 158165.0], [1.60387962E12, 85705.0], [1.6038786E12, 99.0], [1.60388022E12, 87.0], [1.6038792E12, 10.0], [1.60388082E12, 80418.0], [1.60387758E12, 12.0], [1.6038798E12, 85271.0], [1.60387818E12, 6348.0], [1.6038804E12, 12.0], [1.60387878E12, 365.0], [1.60387776E12, 126.0], [1.60387938E12, 8.0], [1.60387806E12, 93666.0], [1.60387866E12, 106.0], [1.60387764E12, 15.0], [1.60387926E12, 20.0], [1.60387824E12, 19016.0], [1.60387884E12, 128.0], [1.60387944E12, 15.0], [1.60388004E12, 10.0], [1.60387842E12, 65271.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60387992E12, 83713.0], [1.6038783E12, 22639.0], [1.60388052E12, 84375.0], [1.6038789E12, 1269.5], [1.60387788E12, 90689.0], [1.6038795E12, 817.5], [1.60387848E12, 89769.0], [1.6038801E12, 83043.0], [1.60387908E12, 412.0], [1.6038807E12, 770.0], [1.60387746E12, 629.0], [1.60387968E12, 89797.5], [1.60387836E12, 40876.0], [1.60387998E12, 8323.0], [1.60388058E12, 223.5], [1.60387956E12, 953.5], [1.60387794E12, 91634.5], [1.60388016E12, 83021.0], [1.60387854E12, 138437.0], [1.60388076E12, 1101.5], [1.60387752E12, 417.0], [1.60387914E12, 83832.0], [1.60387812E12, 163904.5], [1.60387974E12, 84372.0], [1.60387872E12, 821.0], [1.60388034E12, 81823.0], [1.6038774E12, 850.0], [1.60387902E12, 86585.0], [1.603878E12, 158165.0], [1.60387962E12, 87295.0], [1.6038786E12, 934.5], [1.60388022E12, 5326.0], [1.6038792E12, 773.0], [1.60388082E12, 80714.5], [1.60387758E12, 720.0], [1.6038798E12, 88810.5], [1.60387818E12, 91192.0], [1.6038804E12, 610.0], [1.60387878E12, 544.5], [1.60387776E12, 1345.5], [1.60387938E12, 515.0], [1.60387806E12, 158858.0], [1.60387866E12, 61735.5], [1.60387764E12, 658.0], [1.60387926E12, 656.0], [1.60387824E12, 86189.0], [1.60387884E12, 137.5], [1.60387944E12, 778.5], [1.60388004E12, 30595.0], [1.60387842E12, 86060.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60388082E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 85466.0, "series": [{"data": [[2.0, 70401.0], [35.0, 98.0], [34.0, 36.5], [38.0, 126.0], [42.0, 63.5], [45.0, 32.0], [3.0, 1486.0], [49.0, 26.0], [4.0, 1365.0], [5.0, 1232.5], [6.0, 876.0], [7.0, 969.0], [8.0, 925.0], [9.0, 959.0], [10.0, 782.5], [11.0, 806.0], [12.0, 645.0], [13.0, 696.5], [14.0, 714.5], [15.0, 454.5], [1.0, 85466.0], [16.0, 348.0], [17.0, 589.0], [18.0, 124.0], [19.0, 167.0], [20.0, 301.5], [21.0, 201.0], [22.0, 494.5], [24.0, 274.0], [25.0, 166.5], [27.0, 69.0], [28.0, 193.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 85466.0, "series": [{"data": [[2.0, 70400.0], [35.0, 97.5], [34.0, 36.0], [38.0, 125.5], [42.0, 63.0], [45.0, 32.0], [3.0, 1480.5], [49.0, 26.0], [4.0, 1361.0], [5.0, 1229.5], [6.0, 871.5], [7.0, 964.0], [8.0, 922.5], [9.0, 947.0], [10.0, 781.5], [11.0, 794.0], [12.0, 640.5], [13.0, 696.0], [14.0, 709.5], [15.0, 454.0], [1.0, 85466.0], [16.0, 345.0], [17.0, 585.0], [18.0, 124.0], [19.0, 167.0], [20.0, 301.0], [21.0, 199.0], [22.0, 481.5], [24.0, 274.0], [25.0, 165.0], [27.0, 69.0], [28.0, 193.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038774E12, "maxY": 10.833333333333334, "series": [{"data": [[1.60387992E12, 0.15], [1.6038783E12, 0.31666666666666665], [1.60388052E12, 0.1], [1.6038789E12, 1.0], [1.60387788E12, 0.16666666666666666], [1.6038795E12, 0.5333333333333333], [1.60387848E12, 0.11666666666666667], [1.6038801E12, 0.11666666666666667], [1.60387908E12, 2.183333333333333], [1.6038807E12, 6.616666666666666], [1.60387746E12, 0.9833333333333333], [1.60387968E12, 0.03333333333333333], [1.60387836E12, 0.15], [1.60387998E12, 0.2833333333333333], [1.60388058E12, 2.4], [1.60387956E12, 0.7666666666666667], [1.60387794E12, 0.1], [1.60388016E12, 0.23333333333333334], [1.60387854E12, 0.05], [1.60388076E12, 0.5666666666666667], [1.60387752E12, 2.1], [1.60387914E12, 0.15], [1.60387812E12, 0.1], [1.60387974E12, 0.11666666666666667], [1.60387872E12, 0.75], [1.60388034E12, 0.31666666666666665], [1.6038774E12, 6.333333333333333], [1.60387902E12, 0.11666666666666667], [1.603878E12, 0.016666666666666666], [1.60387962E12, 0.11666666666666667], [1.6038786E12, 0.26666666666666666], [1.60388022E12, 0.2833333333333333], [1.6038792E12, 9.133333333333333], [1.60387758E12, 10.4], [1.6038798E12, 0.1], [1.60387818E12, 0.11666666666666667], [1.6038804E12, 1.7166666666666666], [1.60387878E12, 0.03333333333333333], [1.60387776E12, 0.7333333333333333], [1.60387938E12, 10.816666666666666], [1.60387806E12, 0.08333333333333333], [1.60387866E12, 0.16666666666666666], [1.60387764E12, 8.583333333333334], [1.60387926E12, 5.816666666666666], [1.60387824E12, 0.08333333333333333], [1.60387884E12, 0.1], [1.60387944E12, 10.833333333333334], [1.60388004E12, 0.18333333333333332], [1.60387842E12, 0.06666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60388076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038774E12, "maxY": 10.833333333333334, "series": [{"data": [[1.60387992E12, 0.15], [1.6038783E12, 0.31666666666666665], [1.60388052E12, 0.1], [1.6038789E12, 1.0], [1.60387788E12, 0.16666666666666666], [1.6038795E12, 0.5333333333333333], [1.60387848E12, 0.11666666666666667], [1.6038801E12, 0.11666666666666667], [1.60387908E12, 2.183333333333333], [1.6038807E12, 6.616666666666666], [1.60387746E12, 0.9833333333333333], [1.60387968E12, 0.03333333333333333], [1.60387836E12, 0.15], [1.60387998E12, 0.2833333333333333], [1.60388058E12, 2.4], [1.60387956E12, 0.7666666666666667], [1.60387794E12, 0.1], [1.60388016E12, 0.23333333333333334], [1.60387854E12, 0.05], [1.60388076E12, 0.6666666666666666], [1.60387752E12, 2.1], [1.60387914E12, 0.15], [1.60387812E12, 0.1], [1.60387974E12, 0.11666666666666667], [1.60387872E12, 0.75], [1.60388034E12, 0.31666666666666665], [1.6038774E12, 6.166666666666667], [1.60387902E12, 0.11666666666666667], [1.603878E12, 0.016666666666666666], [1.60387962E12, 0.11666666666666667], [1.6038786E12, 0.26666666666666666], [1.60388022E12, 0.2833333333333333], [1.6038792E12, 9.133333333333333], [1.60388082E12, 0.06666666666666667], [1.60387758E12, 10.4], [1.6038798E12, 0.1], [1.60387818E12, 0.11666666666666667], [1.6038804E12, 1.7166666666666666], [1.60387878E12, 0.03333333333333333], [1.60387776E12, 0.7333333333333333], [1.60387938E12, 10.816666666666666], [1.60387806E12, 0.08333333333333333], [1.60387866E12, 0.16666666666666666], [1.60387764E12, 8.583333333333334], [1.60387926E12, 5.816666666666666], [1.60387824E12, 0.08333333333333333], [1.60387884E12, 0.1], [1.60387944E12, 10.833333333333334], [1.60388004E12, 0.18333333333333332], [1.60387842E12, 0.06666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60388082E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038774E12, "maxY": 10.833333333333334, "series": [{"data": [[1.60387992E12, 0.15], [1.6038783E12, 0.31666666666666665], [1.60388052E12, 0.1], [1.6038789E12, 1.0], [1.60387788E12, 0.16666666666666666], [1.6038795E12, 0.5333333333333333], [1.60387848E12, 0.11666666666666667], [1.6038801E12, 0.11666666666666667], [1.60387908E12, 2.183333333333333], [1.6038807E12, 6.616666666666666], [1.60387746E12, 0.9833333333333333], [1.60387968E12, 0.03333333333333333], [1.60387836E12, 0.15], [1.60387998E12, 0.2833333333333333], [1.60388058E12, 2.4], [1.60387956E12, 0.7666666666666667], [1.60387794E12, 0.1], [1.60388016E12, 0.23333333333333334], [1.60387854E12, 0.05], [1.60388076E12, 0.6666666666666666], [1.60387752E12, 2.1], [1.60387914E12, 0.15], [1.60387812E12, 0.1], [1.60387974E12, 0.11666666666666667], [1.60387872E12, 0.75], [1.60388034E12, 0.31666666666666665], [1.6038774E12, 6.166666666666667], [1.60387902E12, 0.11666666666666667], [1.603878E12, 0.016666666666666666], [1.60387962E12, 0.11666666666666667], [1.6038786E12, 0.26666666666666666], [1.60388022E12, 0.2833333333333333], [1.6038792E12, 9.133333333333333], [1.60388082E12, 0.06666666666666667], [1.60387758E12, 10.4], [1.6038798E12, 0.1], [1.60387818E12, 0.11666666666666667], [1.6038804E12, 1.7166666666666666], [1.60387878E12, 0.03333333333333333], [1.60387776E12, 0.7333333333333333], [1.60387938E12, 10.816666666666666], [1.60387806E12, 0.08333333333333333], [1.60387866E12, 0.16666666666666666], [1.60387764E12, 8.583333333333334], [1.60387926E12, 5.816666666666666], [1.60387824E12, 0.08333333333333333], [1.60387884E12, 0.1], [1.60387944E12, 10.833333333333334], [1.60388004E12, 0.18333333333333332], [1.60387842E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60388082E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038774E12, "maxY": 10.833333333333334, "series": [{"data": [[1.60387992E12, 0.15], [1.6038783E12, 0.31666666666666665], [1.60388052E12, 0.1], [1.6038789E12, 1.0], [1.60387788E12, 0.16666666666666666], [1.6038795E12, 0.5333333333333333], [1.60387848E12, 0.11666666666666667], [1.6038801E12, 0.11666666666666667], [1.60387908E12, 2.183333333333333], [1.6038807E12, 6.616666666666666], [1.60387746E12, 0.9833333333333333], [1.60387968E12, 0.03333333333333333], [1.60387836E12, 0.15], [1.60387998E12, 0.2833333333333333], [1.60388058E12, 2.4], [1.60387956E12, 0.7666666666666667], [1.60387794E12, 0.1], [1.60388016E12, 0.23333333333333334], [1.60387854E12, 0.05], [1.60388076E12, 0.6666666666666666], [1.60387752E12, 2.1], [1.60387914E12, 0.15], [1.60387812E12, 0.1], [1.60387974E12, 0.11666666666666667], [1.60387872E12, 0.75], [1.60388034E12, 0.31666666666666665], [1.6038774E12, 6.166666666666667], [1.60387902E12, 0.11666666666666667], [1.603878E12, 0.016666666666666666], [1.60387962E12, 0.11666666666666667], [1.6038786E12, 0.26666666666666666], [1.60388022E12, 0.2833333333333333], [1.6038792E12, 9.133333333333333], [1.60388082E12, 0.06666666666666667], [1.60387758E12, 10.4], [1.6038798E12, 0.1], [1.60387818E12, 0.11666666666666667], [1.6038804E12, 1.7166666666666666], [1.60387878E12, 0.03333333333333333], [1.60387776E12, 0.7333333333333333], [1.60387938E12, 10.816666666666666], [1.60387806E12, 0.08333333333333333], [1.60387866E12, 0.16666666666666666], [1.60387764E12, 8.583333333333334], [1.60387926E12, 5.816666666666666], [1.60387824E12, 0.08333333333333333], [1.60387884E12, 0.1], [1.60387944E12, 10.833333333333334], [1.60388004E12, 0.18333333333333332], [1.60387842E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60388082E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

