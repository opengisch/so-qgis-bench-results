/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 185.0, "minX": 0.0, "maxY": 299279.0, "series": [{"data": [[0.0, 185.0], [0.1, 204.0], [0.2, 207.0], [0.3, 210.0], [0.4, 212.0], [0.5, 214.0], [0.6, 215.0], [0.7, 218.0], [0.8, 219.0], [0.9, 220.0], [1.0, 222.0], [1.1, 223.0], [1.2, 224.0], [1.3, 225.0], [1.4, 226.0], [1.5, 228.0], [1.6, 229.0], [1.7, 229.0], [1.8, 230.0], [1.9, 231.0], [2.0, 232.0], [2.1, 232.0], [2.2, 234.0], [2.3, 234.0], [2.4, 234.0], [2.5, 235.0], [2.6, 236.0], [2.7, 236.0], [2.8, 237.0], [2.9, 237.0], [3.0, 237.0], [3.1, 237.0], [3.2, 238.0], [3.3, 238.0], [3.4, 239.0], [3.5, 240.0], [3.6, 240.0], [3.7, 241.0], [3.8, 241.0], [3.9, 241.0], [4.0, 242.0], [4.1, 242.0], [4.2, 242.0], [4.3, 243.0], [4.4, 243.0], [4.5, 243.0], [4.6, 244.0], [4.7, 244.0], [4.8, 245.0], [4.9, 245.0], [5.0, 246.0], [5.1, 246.0], [5.2, 246.0], [5.3, 246.0], [5.4, 246.0], [5.5, 247.0], [5.6, 248.0], [5.7, 248.0], [5.8, 249.0], [5.9, 249.0], [6.0, 249.0], [6.1, 250.0], [6.2, 250.0], [6.3, 250.0], [6.4, 250.0], [6.5, 251.0], [6.6, 251.0], [6.7, 252.0], [6.8, 252.0], [6.9, 253.0], [7.0, 254.0], [7.1, 254.0], [7.2, 254.0], [7.3, 255.0], [7.4, 255.0], [7.5, 256.0], [7.6, 257.0], [7.7, 257.0], [7.8, 258.0], [7.9, 258.0], [8.0, 259.0], [8.1, 260.0], [8.2, 260.0], [8.3, 261.0], [8.4, 261.0], [8.5, 262.0], [8.6, 262.0], [8.7, 263.0], [8.8, 264.0], [8.9, 265.0], [9.0, 266.0], [9.1, 267.0], [9.2, 268.0], [9.3, 269.0], [9.4, 269.0], [9.5, 271.0], [9.6, 271.0], [9.7, 273.0], [9.8, 274.0], [9.9, 275.0], [10.0, 277.0], [10.1, 279.0], [10.2, 280.0], [10.3, 281.0], [10.4, 283.0], [10.5, 284.0], [10.6, 285.0], [10.7, 286.0], [10.8, 287.0], [10.9, 288.0], [11.0, 290.0], [11.1, 292.0], [11.2, 293.0], [11.3, 294.0], [11.4, 295.0], [11.5, 295.0], [11.6, 296.0], [11.7, 297.0], [11.8, 298.0], [11.9, 299.0], [12.0, 299.0], [12.1, 300.0], [12.2, 301.0], [12.3, 303.0], [12.4, 303.0], [12.5, 304.0], [12.6, 305.0], [12.7, 308.0], [12.8, 309.0], [12.9, 310.0], [13.0, 310.0], [13.1, 311.0], [13.2, 313.0], [13.3, 314.0], [13.4, 315.0], [13.5, 317.0], [13.6, 317.0], [13.7, 318.0], [13.8, 319.0], [13.9, 321.0], [14.0, 321.0], [14.1, 323.0], [14.2, 324.0], [14.3, 324.0], [14.4, 325.0], [14.5, 326.0], [14.6, 327.0], [14.7, 327.0], [14.8, 328.0], [14.9, 329.0], [15.0, 330.0], [15.1, 331.0], [15.2, 331.0], [15.3, 332.0], [15.4, 332.0], [15.5, 332.0], [15.6, 333.0], [15.7, 334.0], [15.8, 334.0], [15.9, 335.0], [16.0, 335.0], [16.1, 336.0], [16.2, 336.0], [16.3, 337.0], [16.4, 338.0], [16.5, 338.0], [16.6, 339.0], [16.7, 339.0], [16.8, 340.0], [16.9, 340.0], [17.0, 340.0], [17.1, 341.0], [17.2, 342.0], [17.3, 342.0], [17.4, 343.0], [17.5, 343.0], [17.6, 343.0], [17.7, 344.0], [17.8, 344.0], [17.9, 345.0], [18.0, 345.0], [18.1, 346.0], [18.2, 347.0], [18.3, 347.0], [18.4, 347.0], [18.5, 348.0], [18.6, 348.0], [18.7, 348.0], [18.8, 349.0], [18.9, 349.0], [19.0, 350.0], [19.1, 351.0], [19.2, 351.0], [19.3, 351.0], [19.4, 352.0], [19.5, 353.0], [19.6, 353.0], [19.7, 354.0], [19.8, 355.0], [19.9, 356.0], [20.0, 356.0], [20.1, 357.0], [20.2, 357.0], [20.3, 358.0], [20.4, 358.0], [20.5, 358.0], [20.6, 360.0], [20.7, 360.0], [20.8, 361.0], [20.9, 361.0], [21.0, 362.0], [21.1, 362.0], [21.2, 363.0], [21.3, 363.0], [21.4, 364.0], [21.5, 365.0], [21.6, 365.0], [21.7, 366.0], [21.8, 366.0], [21.9, 367.0], [22.0, 367.0], [22.1, 368.0], [22.2, 370.0], [22.3, 370.0], [22.4, 372.0], [22.5, 372.0], [22.6, 373.0], [22.7, 374.0], [22.8, 375.0], [22.9, 376.0], [23.0, 377.0], [23.1, 378.0], [23.2, 379.0], [23.3, 380.0], [23.4, 380.0], [23.5, 381.0], [23.6, 382.0], [23.7, 382.0], [23.8, 384.0], [23.9, 385.0], [24.0, 386.0], [24.1, 387.0], [24.2, 388.0], [24.3, 389.0], [24.4, 390.0], [24.5, 392.0], [24.6, 392.0], [24.7, 394.0], [24.8, 394.0], [24.9, 394.0], [25.0, 396.0], [25.1, 396.0], [25.2, 397.0], [25.3, 398.0], [25.4, 399.0], [25.5, 401.0], [25.6, 402.0], [25.7, 402.0], [25.8, 403.0], [25.9, 404.0], [26.0, 405.0], [26.1, 406.0], [26.2, 407.0], [26.3, 409.0], [26.4, 410.0], [26.5, 411.0], [26.6, 412.0], [26.7, 412.0], [26.8, 413.0], [26.9, 414.0], [27.0, 415.0], [27.1, 416.0], [27.2, 417.0], [27.3, 418.0], [27.4, 419.0], [27.5, 420.0], [27.6, 421.0], [27.7, 422.0], [27.8, 424.0], [27.9, 426.0], [28.0, 427.0], [28.1, 429.0], [28.2, 429.0], [28.3, 430.0], [28.4, 431.0], [28.5, 432.0], [28.6, 433.0], [28.7, 436.0], [28.8, 437.0], [28.9, 438.0], [29.0, 439.0], [29.1, 441.0], [29.2, 443.0], [29.3, 444.0], [29.4, 444.0], [29.5, 445.0], [29.6, 446.0], [29.7, 448.0], [29.8, 449.0], [29.9, 450.0], [30.0, 452.0], [30.1, 453.0], [30.2, 454.0], [30.3, 455.0], [30.4, 456.0], [30.5, 457.0], [30.6, 458.0], [30.7, 458.0], [30.8, 459.0], [30.9, 460.0], [31.0, 462.0], [31.1, 463.0], [31.2, 464.0], [31.3, 466.0], [31.4, 467.0], [31.5, 468.0], [31.6, 468.0], [31.7, 469.0], [31.8, 470.0], [31.9, 471.0], [32.0, 472.0], [32.1, 473.0], [32.2, 475.0], [32.3, 477.0], [32.4, 479.0], [32.5, 480.0], [32.6, 482.0], [32.7, 484.0], [32.8, 485.0], [32.9, 487.0], [33.0, 487.0], [33.1, 489.0], [33.2, 491.0], [33.3, 493.0], [33.4, 494.0], [33.5, 495.0], [33.6, 496.0], [33.7, 497.0], [33.8, 498.0], [33.9, 499.0], [34.0, 501.0], [34.1, 501.0], [34.2, 503.0], [34.3, 505.0], [34.4, 506.0], [34.5, 508.0], [34.6, 509.0], [34.7, 510.0], [34.8, 512.0], [34.9, 513.0], [35.0, 514.0], [35.1, 515.0], [35.2, 517.0], [35.3, 519.0], [35.4, 520.0], [35.5, 521.0], [35.6, 523.0], [35.7, 524.0], [35.8, 525.0], [35.9, 527.0], [36.0, 529.0], [36.1, 529.0], [36.2, 531.0], [36.3, 533.0], [36.4, 535.0], [36.5, 536.0], [36.6, 537.0], [36.7, 538.0], [36.8, 539.0], [36.9, 541.0], [37.0, 542.0], [37.1, 543.0], [37.2, 544.0], [37.3, 546.0], [37.4, 548.0], [37.5, 550.0], [37.6, 552.0], [37.7, 554.0], [37.8, 555.0], [37.9, 557.0], [38.0, 560.0], [38.1, 563.0], [38.2, 564.0], [38.3, 565.0], [38.4, 566.0], [38.5, 567.0], [38.6, 568.0], [38.7, 570.0], [38.8, 571.0], [38.9, 573.0], [39.0, 575.0], [39.1, 576.0], [39.2, 578.0], [39.3, 579.0], [39.4, 582.0], [39.5, 584.0], [39.6, 586.0], [39.7, 587.0], [39.8, 588.0], [39.9, 589.0], [40.0, 592.0], [40.1, 594.0], [40.2, 595.0], [40.3, 598.0], [40.4, 600.0], [40.5, 602.0], [40.6, 602.0], [40.7, 603.0], [40.8, 604.0], [40.9, 606.0], [41.0, 608.0], [41.1, 609.0], [41.2, 610.0], [41.3, 612.0], [41.4, 613.0], [41.5, 615.0], [41.6, 618.0], [41.7, 621.0], [41.8, 622.0], [41.9, 623.0], [42.0, 625.0], [42.1, 626.0], [42.2, 627.0], [42.3, 629.0], [42.4, 630.0], [42.5, 631.0], [42.6, 633.0], [42.7, 634.0], [42.8, 636.0], [42.9, 637.0], [43.0, 640.0], [43.1, 642.0], [43.2, 643.0], [43.3, 645.0], [43.4, 646.0], [43.5, 646.0], [43.6, 648.0], [43.7, 649.0], [43.8, 651.0], [43.9, 652.0], [44.0, 653.0], [44.1, 654.0], [44.2, 655.0], [44.3, 657.0], [44.4, 658.0], [44.5, 660.0], [44.6, 663.0], [44.7, 664.0], [44.8, 666.0], [44.9, 666.0], [45.0, 668.0], [45.1, 668.0], [45.2, 670.0], [45.3, 671.0], [45.4, 672.0], [45.5, 673.0], [45.6, 675.0], [45.7, 677.0], [45.8, 678.0], [45.9, 680.0], [46.0, 682.0], [46.1, 683.0], [46.2, 685.0], [46.3, 686.0], [46.4, 688.0], [46.5, 691.0], [46.6, 692.0], [46.7, 694.0], [46.8, 696.0], [46.9, 698.0], [47.0, 699.0], [47.1, 701.0], [47.2, 703.0], [47.3, 704.0], [47.4, 706.0], [47.5, 707.0], [47.6, 709.0], [47.7, 711.0], [47.8, 713.0], [47.9, 715.0], [48.0, 716.0], [48.1, 718.0], [48.2, 719.0], [48.3, 721.0], [48.4, 723.0], [48.5, 725.0], [48.6, 728.0], [48.7, 729.0], [48.8, 732.0], [48.9, 735.0], [49.0, 736.0], [49.1, 739.0], [49.2, 742.0], [49.3, 743.0], [49.4, 745.0], [49.5, 748.0], [49.6, 749.0], [49.7, 750.0], [49.8, 751.0], [49.9, 752.0], [50.0, 753.0], [50.1, 755.0], [50.2, 758.0], [50.3, 759.0], [50.4, 761.0], [50.5, 762.0], [50.6, 765.0], [50.7, 766.0], [50.8, 769.0], [50.9, 771.0], [51.0, 774.0], [51.1, 775.0], [51.2, 776.0], [51.3, 779.0], [51.4, 783.0], [51.5, 785.0], [51.6, 787.0], [51.7, 789.0], [51.8, 791.0], [51.9, 793.0], [52.0, 795.0], [52.1, 797.0], [52.2, 801.0], [52.3, 803.0], [52.4, 805.0], [52.5, 809.0], [52.6, 810.0], [52.7, 813.0], [52.8, 817.0], [52.9, 819.0], [53.0, 823.0], [53.1, 826.0], [53.2, 829.0], [53.3, 832.0], [53.4, 834.0], [53.5, 836.0], [53.6, 838.0], [53.7, 840.0], [53.8, 843.0], [53.9, 844.0], [54.0, 848.0], [54.1, 851.0], [54.2, 852.0], [54.3, 856.0], [54.4, 860.0], [54.5, 862.0], [54.6, 865.0], [54.7, 869.0], [54.8, 871.0], [54.9, 872.0], [55.0, 875.0], [55.1, 877.0], [55.2, 880.0], [55.3, 883.0], [55.4, 884.0], [55.5, 885.0], [55.6, 889.0], [55.7, 890.0], [55.8, 894.0], [55.9, 895.0], [56.0, 897.0], [56.1, 899.0], [56.2, 903.0], [56.3, 905.0], [56.4, 909.0], [56.5, 910.0], [56.6, 912.0], [56.7, 915.0], [56.8, 916.0], [56.9, 919.0], [57.0, 924.0], [57.1, 926.0], [57.2, 928.0], [57.3, 930.0], [57.4, 932.0], [57.5, 936.0], [57.6, 938.0], [57.7, 940.0], [57.8, 943.0], [57.9, 946.0], [58.0, 948.0], [58.1, 951.0], [58.2, 953.0], [58.3, 958.0], [58.4, 960.0], [58.5, 963.0], [58.6, 964.0], [58.7, 968.0], [58.8, 972.0], [58.9, 976.0], [59.0, 979.0], [59.1, 982.0], [59.2, 984.0], [59.3, 989.0], [59.4, 993.0], [59.5, 996.0], [59.6, 998.0], [59.7, 999.0], [59.8, 1000.0], [59.9, 1002.0], [60.0, 1008.0], [60.1, 1010.0], [60.2, 1011.0], [60.3, 1015.0], [60.4, 1017.0], [60.5, 1022.0], [60.6, 1025.0], [60.7, 1027.0], [60.8, 1030.0], [60.9, 1033.0], [61.0, 1035.0], [61.1, 1039.0], [61.2, 1043.0], [61.3, 1045.0], [61.4, 1050.0], [61.5, 1052.0], [61.6, 1054.0], [61.7, 1056.0], [61.8, 1059.0], [61.9, 1060.0], [62.0, 1064.0], [62.1, 1067.0], [62.2, 1069.0], [62.3, 1071.0], [62.4, 1073.0], [62.5, 1075.0], [62.6, 1079.0], [62.7, 1083.0], [62.8, 1084.0], [62.9, 1087.0], [63.0, 1090.0], [63.1, 1093.0], [63.2, 1095.0], [63.3, 1097.0], [63.4, 1101.0], [63.5, 1106.0], [63.6, 1110.0], [63.7, 1115.0], [63.8, 1121.0], [63.9, 1126.0], [64.0, 1129.0], [64.1, 1131.0], [64.2, 1132.0], [64.3, 1134.0], [64.4, 1137.0], [64.5, 1141.0], [64.6, 1143.0], [64.7, 1146.0], [64.8, 1152.0], [64.9, 1155.0], [65.0, 1160.0], [65.1, 1162.0], [65.2, 1164.0], [65.3, 1168.0], [65.4, 1170.0], [65.5, 1172.0], [65.6, 1174.0], [65.7, 1176.0], [65.8, 1178.0], [65.9, 1183.0], [66.0, 1190.0], [66.1, 1194.0], [66.2, 1201.0], [66.3, 1204.0], [66.4, 1206.0], [66.5, 1210.0], [66.6, 1212.0], [66.7, 1217.0], [66.8, 1222.0], [66.9, 1227.0], [67.0, 1231.0], [67.1, 1236.0], [67.2, 1240.0], [67.3, 1245.0], [67.4, 1252.0], [67.5, 1253.0], [67.6, 1258.0], [67.7, 1262.0], [67.8, 1263.0], [67.9, 1265.0], [68.0, 1269.0], [68.1, 1273.0], [68.2, 1278.0], [68.3, 1281.0], [68.4, 1283.0], [68.5, 1292.0], [68.6, 1296.0], [68.7, 1302.0], [68.8, 1305.0], [68.9, 1312.0], [69.0, 1317.0], [69.1, 1319.0], [69.2, 1322.0], [69.3, 1324.0], [69.4, 1328.0], [69.5, 1337.0], [69.6, 1340.0], [69.7, 1342.0], [69.8, 1347.0], [69.9, 1349.0], [70.0, 1353.0], [70.1, 1357.0], [70.2, 1362.0], [70.3, 1365.0], [70.4, 1370.0], [70.5, 1375.0], [70.6, 1381.0], [70.7, 1383.0], [70.8, 1386.0], [70.9, 1389.0], [71.0, 1390.0], [71.1, 1396.0], [71.2, 1398.0], [71.3, 1403.0], [71.4, 1411.0], [71.5, 1415.0], [71.6, 1420.0], [71.7, 1424.0], [71.8, 1429.0], [71.9, 1434.0], [72.0, 1436.0], [72.1, 1439.0], [72.2, 1444.0], [72.3, 1447.0], [72.4, 1452.0], [72.5, 1456.0], [72.6, 1459.0], [72.7, 1465.0], [72.8, 1470.0], [72.9, 1473.0], [73.0, 1477.0], [73.1, 1480.0], [73.2, 1485.0], [73.3, 1488.0], [73.4, 1493.0], [73.5, 1498.0], [73.6, 1503.0], [73.7, 1509.0], [73.8, 1517.0], [73.9, 1522.0], [74.0, 1527.0], [74.1, 1531.0], [74.2, 1535.0], [74.3, 1539.0], [74.4, 1543.0], [74.5, 1549.0], [74.6, 1551.0], [74.7, 1556.0], [74.8, 1560.0], [74.9, 1566.0], [75.0, 1571.0], [75.1, 1576.0], [75.2, 1581.0], [75.3, 1587.0], [75.4, 1591.0], [75.5, 1595.0], [75.6, 1598.0], [75.7, 1602.0], [75.8, 1605.0], [75.9, 1612.0], [76.0, 1616.0], [76.1, 1620.0], [76.2, 1623.0], [76.3, 1627.0], [76.4, 1634.0], [76.5, 1642.0], [76.6, 1649.0], [76.7, 1652.0], [76.8, 1656.0], [76.9, 1663.0], [77.0, 1668.0], [77.1, 1673.0], [77.2, 1679.0], [77.3, 1688.0], [77.4, 1696.0], [77.5, 1704.0], [77.6, 1709.0], [77.7, 1711.0], [77.8, 1715.0], [77.9, 1721.0], [78.0, 1725.0], [78.1, 1732.0], [78.2, 1737.0], [78.3, 1745.0], [78.4, 1757.0], [78.5, 1771.0], [78.6, 1775.0], [78.7, 1782.0], [78.8, 1790.0], [78.9, 1794.0], [79.0, 1808.0], [79.1, 1813.0], [79.2, 1819.0], [79.3, 1827.0], [79.4, 1832.0], [79.5, 1843.0], [79.6, 1853.0], [79.7, 1858.0], [79.8, 1863.0], [79.9, 1868.0], [80.0, 1883.0], [80.1, 1888.0], [80.2, 1896.0], [80.3, 1903.0], [80.4, 1908.0], [80.5, 1916.0], [80.6, 1925.0], [80.7, 1934.0], [80.8, 1940.0], [80.9, 1947.0], [81.0, 1954.0], [81.1, 1961.0], [81.2, 1965.0], [81.3, 1977.0], [81.4, 1985.0], [81.5, 1996.0], [81.6, 2008.0], [81.7, 2019.0], [81.8, 2033.0], [81.9, 2045.0], [82.0, 2051.0], [82.1, 2059.0], [82.2, 2077.0], [82.3, 2082.0], [82.4, 2101.0], [82.5, 2109.0], [82.6, 2120.0], [82.7, 2133.0], [82.8, 2140.0], [82.9, 2161.0], [83.0, 2166.0], [83.1, 2185.0], [83.2, 2190.0], [83.3, 2193.0], [83.4, 2199.0], [83.5, 2214.0], [83.6, 2233.0], [83.7, 2240.0], [83.8, 2251.0], [83.9, 2259.0], [84.0, 2266.0], [84.1, 2280.0], [84.2, 2292.0], [84.3, 2315.0], [84.4, 2322.0], [84.5, 2329.0], [84.6, 2340.0], [84.7, 2349.0], [84.8, 2365.0], [84.9, 2375.0], [85.0, 2380.0], [85.1, 2383.0], [85.2, 2395.0], [85.3, 2399.0], [85.4, 2416.0], [85.5, 2441.0], [85.6, 2458.0], [85.7, 2464.0], [85.8, 2482.0], [85.9, 2497.0], [86.0, 2510.0], [86.1, 2531.0], [86.2, 2538.0], [86.3, 2546.0], [86.4, 2582.0], [86.5, 2597.0], [86.6, 2607.0], [86.7, 2618.0], [86.8, 2621.0], [86.9, 2637.0], [87.0, 2652.0], [87.1, 2663.0], [87.2, 2673.0], [87.3, 2685.0], [87.4, 2719.0], [87.5, 2738.0], [87.6, 2753.0], [87.7, 2762.0], [87.8, 2776.0], [87.9, 2791.0], [88.0, 2796.0], [88.1, 2812.0], [88.2, 2837.0], [88.3, 2865.0], [88.4, 2886.0], [88.5, 2902.0], [88.6, 2918.0], [88.7, 2931.0], [88.8, 2967.0], [88.9, 2997.0], [89.0, 3031.0], [89.1, 3064.0], [89.2, 3077.0], [89.3, 3102.0], [89.4, 3127.0], [89.5, 3151.0], [89.6, 3165.0], [89.7, 3180.0], [89.8, 3187.0], [89.9, 3219.0], [90.0, 3296.0], [90.1, 3341.0], [90.2, 3377.0], [90.3, 3395.0], [90.4, 3420.0], [90.5, 3458.0], [90.6, 3508.0], [90.7, 3547.0], [90.8, 3584.0], [90.9, 3623.0], [91.0, 3667.0], [91.1, 3696.0], [91.2, 3726.0], [91.3, 3751.0], [91.4, 3775.0], [91.5, 3803.0], [91.6, 3836.0], [91.7, 3881.0], [91.8, 3919.0], [91.9, 3970.0], [92.0, 4043.0], [92.1, 4081.0], [92.2, 4121.0], [92.3, 4200.0], [92.4, 4278.0], [92.5, 4451.0], [92.6, 4486.0], [92.7, 4564.0], [92.8, 4604.0], [92.9, 4694.0], [93.0, 4724.0], [93.1, 4760.0], [93.2, 4906.0], [93.3, 5029.0], [93.4, 5108.0], [93.5, 5274.0], [93.6, 5338.0], [93.7, 5571.0], [93.8, 5736.0], [93.9, 5837.0], [94.0, 6155.0], [94.1, 6380.0], [94.2, 6498.0], [94.3, 6810.0], [94.4, 7218.0], [94.5, 7577.0], [94.6, 8247.0], [94.7, 8955.0], [94.8, 12043.0], [94.9, 15703.0], [95.0, 21131.0], [95.1, 25581.0], [95.2, 30329.0], [95.3, 49353.0], [95.4, 52253.0], [95.5, 64278.0], [95.6, 67133.0], [95.7, 69815.0], [95.8, 71228.0], [95.9, 71535.0], [96.0, 72171.0], [96.1, 72371.0], [96.2, 73005.0], [96.3, 73182.0], [96.4, 73484.0], [96.5, 73658.0], [96.6, 73859.0], [96.7, 73974.0], [96.8, 74157.0], [96.9, 74274.0], [97.0, 74468.0], [97.1, 74918.0], [97.2, 74972.0], [97.3, 75165.0], [97.4, 75354.0], [97.5, 75639.0], [97.6, 75853.0], [97.7, 76081.0], [97.8, 76413.0], [97.9, 76743.0], [98.0, 77043.0], [98.1, 77695.0], [98.2, 79216.0], [98.3, 85734.0], [98.4, 88284.0], [98.5, 89920.0], [98.6, 92232.0], [98.7, 114234.0], [98.8, 127019.0], [98.9, 138466.0], [99.0, 143722.0], [99.1, 145513.0], [99.2, 146167.0], [99.3, 146968.0], [99.4, 147254.0], [99.5, 162393.0], [99.6, 202171.0], [99.7, 216398.0], [99.8, 220916.0], [99.9, 280358.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 695.0, "series": [{"data": [[138400.0, 1.0], [144800.0, 1.0], [299200.0, 1.0], [220900.0, 1.0], [72300.0, 2.0], [71500.0, 2.0], [73100.0, 2.0], [73900.0, 6.0], [75500.0, 1.0], [76300.0, 3.0], [74700.0, 1.0], [78700.0, 1.0], [77900.0, 2.0], [88300.0, 1.0], [89900.0, 2.0], [89100.0, 1.0], [143400.0, 2.0], [145000.0, 1.0], [146600.0, 1.0], [220200.0, 1.0], [217000.0, 1.0], [236200.0, 1.0], [100.0, 2.0], [176300.0, 1.0], [48100.0, 1.0], [50500.0, 1.0], [49300.0, 1.0], [200.0, 623.0], [51700.0, 1.0], [53300.0, 1.0], [216300.0, 1.0], [73000.0, 4.0], [69800.0, 2.0], [72200.0, 2.0], [71400.0, 1.0], [70600.0, 1.0], [300.0, 695.0], [75400.0, 2.0], [77000.0, 2.0], [73800.0, 4.0], [76200.0, 1.0], [79400.0, 1.0], [78600.0, 1.0], [81000.0, 1.0], [88200.0, 1.0], [92200.0, 1.0], [400.0, 442.0], [500.0, 332.0], [137200.0, 1.0], [146800.0, 1.0], [600.0, 346.0], [700.0, 266.0], [800.0, 206.0], [222000.0, 1.0], [900.0, 187.0], [1000.0, 190.0], [1100.0, 146.0], [290400.0, 1.0], [1200.0, 129.0], [1300.0, 133.0], [1400.0, 119.0], [1500.0, 110.0], [1600.0, 95.0], [1700.0, 76.0], [1800.0, 67.0], [1900.0, 67.0], [2000.0, 45.0], [2100.0, 53.0], [2300.0, 55.0], [2200.0, 44.0], [280300.0, 1.0], [146100.0, 4.0], [289900.0, 1.0], [2400.0, 31.0], [2500.0, 31.0], [2600.0, 44.0], [2700.0, 35.0], [2800.0, 22.0], [2900.0, 24.0], [3000.0, 19.0], [3100.0, 27.0], [202100.0, 1.0], [3300.0, 16.0], [3200.0, 11.0], [3400.0, 13.0], [3500.0, 12.0], [3600.0, 16.0], [3700.0, 19.0], [3800.0, 13.0], [3900.0, 11.0], [4000.0, 11.0], [4200.0, 7.0], [4100.0, 7.0], [66500.0, 1.0], [4300.0, 2.0], [4500.0, 9.0], [4400.0, 7.0], [4600.0, 7.0], [73700.0, 2.0], [72100.0, 3.0], [70500.0, 1.0], [72900.0, 1.0], [71300.0, 1.0], [4800.0, 5.0], [4700.0, 10.0], [74500.0, 1.0], [75300.0, 2.0], [76900.0, 1.0], [4900.0, 4.0], [5000.0, 6.0], [5100.0, 4.0], [5200.0, 3.0], [5300.0, 6.0], [85700.0, 2.0], [5600.0, 3.0], [5400.0, 3.0], [87300.0, 1.0], [5500.0, 1.0], [5800.0, 5.0], [5700.0, 3.0], [6100.0, 5.0], [6000.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6600.0, 2.0], [6500.0, 2.0], [6400.0, 5.0], [6800.0, 2.0], [6700.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7000.0, 1.0], [7200.0, 3.0], [7300.0, 2.0], [7600.0, 2.0], [7500.0, 1.0], [7800.0, 1.0], [8000.0, 1.0], [8400.0, 3.0], [8600.0, 1.0], [8200.0, 1.0], [9100.0, 1.0], [8900.0, 1.0], [9700.0, 1.0], [9500.0, 1.0], [10500.0, 1.0], [11100.0, 1.0], [12100.0, 1.0], [12000.0, 1.0], [13300.0, 1.0], [214200.0, 1.0], [217400.0, 1.0], [14000.0, 1.0], [236600.0, 1.0], [235000.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [16800.0, 1.0], [18600.0, 1.0], [21400.0, 1.0], [22800.0, 2.0], [26600.0, 1.0], [28400.0, 1.0], [29800.0, 1.0], [32400.0, 1.0], [143100.0, 1.0], [139900.0, 1.0], [162300.0, 1.0], [54800.0, 1.0], [64400.0, 1.0], [71200.0, 3.0], [73600.0, 4.0], [72000.0, 2.0], [70400.0, 1.0], [74400.0, 4.0], [77600.0, 2.0], [76000.0, 2.0], [75200.0, 3.0], [76800.0, 1.0], [79200.0, 1.0], [100000.0, 1.0], [128000.0, 2.0], [147200.0, 2.0], [148800.0, 1.0], [220800.0, 1.0], [291200.0, 1.0], [67100.0, 2.0], [69500.0, 1.0], [73500.0, 2.0], [76700.0, 3.0], [75900.0, 2.0], [77500.0, 2.0], [75100.0, 3.0], [74300.0, 1.0], [89500.0, 1.0], [91900.0, 1.0], [123900.0, 1.0], [128700.0, 1.0], [146700.0, 1.0], [151500.0, 1.0], [38300.0, 1.0], [46700.0, 1.0], [51100.0, 1.0], [51900.0, 1.0], [53900.0, 1.0], [68600.0, 1.0], [67800.0, 1.0], [72600.0, 2.0], [73400.0, 3.0], [75000.0, 3.0], [75800.0, 3.0], [74200.0, 5.0], [84600.0, 1.0], [88600.0, 1.0], [93400.0, 1.0], [91000.0, 1.0], [95000.0, 1.0], [114200.0, 1.0], [127000.0, 1.0], [144400.0, 1.0], [147600.0, 2.0], [181200.0, 1.0], [190800.0, 1.0], [203600.0, 1.0], [143700.0, 2.0], [146900.0, 2.0], [204500.0, 1.0], [66100.0, 1.0], [70100.0, 1.0], [73300.0, 1.0], [76500.0, 3.0], [74900.0, 6.0], [74100.0, 3.0], [75700.0, 1.0], [77300.0, 1.0], [82900.0, 1.0], [91700.0, 1.0], [115700.0, 1.0], [146200.0, 1.0], [171800.0, 1.0], [215000.0, 1.0], [17500.0, 1.0], [289200.0, 1.0], [18500.0, 1.0], [21100.0, 1.0], [22500.0, 1.0], [25500.0, 1.0], [26100.0, 1.0], [30300.0, 1.0], [145500.0, 2.0], [147100.0, 2.0], [140700.0, 1.0], [155100.0, 1.0], [41400.0, 1.0], [52600.0, 1.0], [52200.0, 1.0], [64200.0, 1.0], [70000.0, 1.0], [73200.0, 2.0], [72400.0, 1.0], [76400.0, 2.0], [75600.0, 4.0], [74800.0, 2.0], [86000.0, 1.0], [89200.0, 1.0], [86800.0, 1.0], [94000.0, 1.0], [122800.0, 1.0], [126000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 299200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1373.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2054.0, "series": [{"data": [[0.0, 1763.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2054.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1373.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.8, "minX": 1.60248942E12, "maxY": 10.0, "series": [{"data": [[1.60249032E12, 10.0], [1.60249194E12, 10.0], [1.60248972E12, 10.0], [1.60249134E12, 10.0], [1.60249152E12, 10.0], [1.60249092E12, 10.0], [1.60249254E12, 3.8], [1.60248954E12, 10.0], [1.60249176E12, 10.0], [1.60249116E12, 10.0], [1.60249074E12, 10.0], [1.60249014E12, 10.0], [1.60249236E12, 10.0], [1.60249098E12, 10.0], [1.60249038E12, 10.0], [1.60249056E12, 10.0], [1.60249218E12, 10.0], [1.60248996E12, 10.0], [1.60249242E12, 10.0], [1.6024902E12, 10.0], [1.60249182E12, 10.0], [1.60248978E12, 10.0], [1.602492E12, 10.0], [1.6024914E12, 10.0], [1.60249002E12, 10.0], [1.60248942E12, 10.0], [1.60249164E12, 10.0], [1.6024896E12, 10.0], [1.60249122E12, 10.0], [1.60249062E12, 10.0], [1.60248984E12, 10.0], [1.60249146E12, 10.0], [1.60249086E12, 10.0], [1.60249104E12, 10.0], [1.60249044E12, 10.0], [1.60249206E12, 10.0], [1.60249128E12, 10.0], [1.60249068E12, 10.0], [1.6024923E12, 10.0], [1.60249026E12, 10.0], [1.60249248E12, 9.972602739726028], [1.60248966E12, 10.0], [1.60249188E12, 10.0], [1.6024905E12, 10.0], [1.6024899E12, 10.0], [1.60249212E12, 10.0], [1.60249008E12, 10.0], [1.6024917E12, 10.0], [1.60248948E12, 10.0], [1.6024911E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60249254E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 343.0, "minX": 2.0, "maxY": 71495.0, "series": [{"data": [[8.0, 343.0], [2.0, 71495.0], [9.0, 548.0], [10.0, 5930.088206909869], [5.0, 71207.0], [6.0, 2795.0], [7.0, 2253.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992100192678228, 5989.660308285169]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.933333333333334, "minX": 1.60248942E12, "maxY": 3157787.033333333, "series": [{"data": [[1.60249032E12, 61706.7], [1.60249194E12, 6427.866666666667], [1.60248972E12, 592807.8166666667], [1.60249134E12, 218862.65], [1.60249152E12, 21665.25], [1.60249092E12, 378869.18333333335], [1.60249254E12, 10128.416666666666], [1.60248954E12, 231106.2], [1.60249176E12, 716.1166666666667], [1.60249116E12, 516990.4], [1.60249074E12, 491870.13333333336], [1.60249014E12, 357.05], [1.60249236E12, 348537.7833333333], [1.60249098E12, 819987.7833333333], [1.60249038E12, 25086.016666666666], [1.60249056E12, 19499.166666666668], [1.60249218E12, 506823.8], [1.60248996E12, 287.2], [1.60249242E12, 411561.1], [1.6024902E12, 1455.9166666666667], [1.60249182E12, 65930.26666666666], [1.60248978E12, 307508.1], [1.602492E12, 60602.46666666667], [1.6024914E12, 194857.11666666667], [1.60249002E12, 7356.15], [1.60248942E12, 1131316.4833333334], [1.60249164E12, 287.2], [1.6024896E12, 1791856.0833333333], [1.60249122E12, 1853800.85], [1.60249062E12, 54977.21666666667], [1.60248984E12, 25974.816666666666], [1.60249146E12, 39050.083333333336], [1.60249086E12, 42899.7], [1.60249104E12, 2289962.6333333333], [1.60249044E12, 215.4], [1.60249206E12, 30746.75], [1.60249128E12, 3157787.033333333], [1.60249068E12, 26788.416666666668], [1.6024923E12, 8432.266666666666], [1.60249026E12, 15119.766666666666], [1.60249248E12, 1668656.3833333333], [1.60248966E12, 3046393.716666667], [1.60249188E12, 27083.983333333334], [1.6024905E12, 143.6], [1.6024899E12, 71.8], [1.60249212E12, 21906.533333333333], [1.60249008E12, 287.31666666666666], [1.6024917E12, 878.5666666666667], [1.60248948E12, 1084778.8166666667], [1.6024911E12, 1481842.1333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60249032E12, 137.03333333333333], [1.60249194E12, 38.55], [1.60248972E12, 923.6833333333333], [1.60249134E12, 414.6333333333333], [1.60249152E12, 39.4], [1.60249092E12, 1065.75], [1.60249254E12, 39.983333333333334], [1.60248954E12, 375.05], [1.60249176E12, 70.58333333333333], [1.60249116E12, 927.9], [1.60249074E12, 840.0833333333334], [1.60249014E12, 31.316666666666666], [1.60249236E12, 1097.65], [1.60249098E12, 1126.7666666666667], [1.60249038E12, 84.58333333333333], [1.60249056E12, 100.85], [1.60249218E12, 780.6], [1.60248996E12, 31.733333333333334], [1.60249242E12, 608.3833333333333], [1.6024902E12, 30.95], [1.60249182E12, 208.86666666666667], [1.60248978E12, 363.3666666666667], [1.602492E12, 93.6], [1.6024914E12, 355.51666666666665], [1.60249002E12, 71.48333333333333], [1.60248942E12, 1129.35], [1.60249164E12, 31.733333333333334], [1.6024896E12, 4316.133333333333], [1.60249122E12, 4292.516666666666], [1.60249062E12, 157.65], [1.60248984E12, 39.43333333333333], [1.60249146E12, 47.68333333333333], [1.60249086E12, 31.183333333333334], [1.60249104E12, 3574.85], [1.60249044E12, 22.6], [1.60249206E12, 180.15], [1.60249128E12, 4534.3], [1.60249068E12, 39.45], [1.6024923E12, 47.6], [1.60249026E12, 69.76666666666667], [1.60249248E12, 2830.2], [1.60248966E12, 4164.2], [1.60249188E12, 53.71666666666667], [1.6024905E12, 15.066666666666666], [1.6024899E12, 7.933333333333334], [1.60249212E12, 119.15], [1.60249008E12, 31.733333333333334], [1.6024917E12, 47.61666666666667], [1.60248948E12, 1956.3833333333334], [1.6024911E12, 2189.616666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60249254E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1021.7793103448276, "minX": 1.60248942E12, "maxY": 252179.66666666666, "series": [{"data": [[1.60249032E12, 66564.38888888888], [1.60249194E12, 45214.4], [1.60248972E12, 1106.319327731092], [1.60249134E12, 1135.5849056603772], [1.60249152E12, 60437.0], [1.60249092E12, 9324.116788321167], [1.60249254E12, 71322.2], [1.60248954E12, 18234.180000000008], [1.60249176E12, 82857.77777777778], [1.60249116E12, 6836.104838709674], [1.60249074E12, 14879.650943396231], [1.60249014E12, 88296.75], [1.60249236E12, 8108.617021276593], [1.60249098E12, 6183.249999999998], [1.60249038E12, 70675.90909090909], [1.60249056E12, 88292.99999999999], [1.60249218E12, 10032.343434343435], [1.60248996E12, 90961.25], [1.60249242E12, 10456.428571428569], [1.6024902E12, 41947.0], [1.60249182E12, 35479.444444444445], [1.60248978E12, 20229.108695652172], [1.602492E12, 36892.75], [1.6024914E12, 17467.06666666667], [1.60249002E12, 154896.33333333334], [1.60248942E12, 1773.1824324324318], [1.60249164E12, 91181.25], [1.6024896E12, 1039.6916376306613], [1.60249122E12, 1050.4956369982551], [1.60249062E12, 23464.999999999993], [1.60248984E12, 74105.8], [1.60249146E12, 74661.83333333334], [1.60249086E12, 75714.25], [1.60249104E12, 1246.7878787878797], [1.60249044E12, 75055.33333333333], [1.60249206E12, 63729.65217391305], [1.60249128E12, 1021.7793103448276], [1.60249068E12, 30137.6], [1.6024923E12, 75114.0], [1.60249026E12, 82495.66666666667], [1.60249248E12, 1270.361643835617], [1.60248966E12, 1111.4078947368414], [1.60249188E12, 34493.428571428565], [1.6024905E12, 140814.0], [1.6024899E12, 91910.0], [1.60249212E12, 29961.333333333336], [1.60249008E12, 93814.5], [1.6024917E12, 252179.66666666666], [1.60248948E12, 1117.8996282527883], [1.6024911E12, 1233.1666666666674]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60249254E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 963.2000000000007, "minX": 1.60248942E12, "maxY": 252179.66666666666, "series": [{"data": [[1.60249032E12, 66550.88888888889], [1.60249194E12, 45213.8], [1.60248972E12, 1058.1680672268906], [1.60249134E12, 1064.1698113207544], [1.60249152E12, 60435.6], [1.60249092E12, 9295.408759124086], [1.60249254E12, 71321.6], [1.60248954E12, 18204.8], [1.60249176E12, 82857.66666666667], [1.60249116E12, 6808.967741935484], [1.60249074E12, 14835.037735849068], [1.60249014E12, 88296.5], [1.60249236E12, 8086.347517730495], [1.60249098E12, 6146.8055555555575], [1.60249038E12, 70656.36363636365], [1.60249056E12, 88291.84615384616], [1.60249218E12, 9978.52525252525], [1.60248996E12, 90961.0], [1.60249242E12, 10410.298701298696], [1.6024902E12, 41946.75], [1.60249182E12, 35478.851851851854], [1.60248978E12, 20196.19565217392], [1.602492E12, 36891.33333333333], [1.6024914E12, 17412.17777777778], [1.60249002E12, 154877.66666666666], [1.60248942E12, 1711.912162162163], [1.60249164E12, 91181.0], [1.6024896E12, 1007.2247386759586], [1.60249122E12, 1016.9598603839443], [1.60249062E12, 23455.750000000007], [1.60248984E12, 74102.2], [1.60249146E12, 74659.83333333333], [1.60249086E12, 75706.5], [1.60249104E12, 1204.5238095238096], [1.60249044E12, 75055.33333333333], [1.60249206E12, 63707.52173913044], [1.60249128E12, 963.2000000000007], [1.60249068E12, 30134.8], [1.6024923E12, 75113.66666666666], [1.60249026E12, 82494.66666666666], [1.60249248E12, 1236.131506849315], [1.60248966E12, 1052.270676691729], [1.60249188E12, 34462.857142857145], [1.6024905E12, 140814.0], [1.6024899E12, 91910.0], [1.60249212E12, 29960.73333333333], [1.60249008E12, 93814.0], [1.6024917E12, 252179.66666666666], [1.60248948E12, 1066.1895910780665], [1.6024911E12, 1175.9533333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60249254E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60248942E12, "maxY": 1.8310810810810807, "series": [{"data": [[1.60249032E12, 1.0], [1.60249194E12, 0.6], [1.60248972E12, 0.5714285714285715], [1.60249134E12, 0.528301886792453], [1.60249152E12, 0.8], [1.60249092E12, 0.6496350364963505], [1.60249254E12, 0.2], [1.60248954E12, 0.7799999999999997], [1.60249176E12, 0.4444444444444444], [1.60249116E12, 0.5241935483870968], [1.60249074E12, 0.6132075471698114], [1.60249014E12, 1.5], [1.60249236E12, 0.5957446808510636], [1.60249098E12, 0.5555555555555558], [1.60249038E12, 1.0], [1.60249056E12, 0.9230769230769231], [1.60249218E12, 0.5252525252525251], [1.60248996E12, 0.75], [1.60249242E12, 0.5454545454545455], [1.6024902E12, 0.25], [1.60249182E12, 0.5925925925925926], [1.60248978E12, 0.6521739130434784], [1.602492E12, 0.49999999999999994], [1.6024914E12, 0.5777777777777776], [1.60249002E12, 1.0000000000000002], [1.60248942E12, 1.8310810810810807], [1.60249164E12, 0.25], [1.6024896E12, 0.810104529616725], [1.60249122E12, 0.5863874345549741], [1.60249062E12, 0.6000000000000001], [1.60248984E12, 0.8], [1.60249146E12, 0.33333333333333337], [1.60249086E12, 0.5], [1.60249104E12, 0.5779220779220783], [1.60249044E12, 0.0], [1.60249206E12, 0.6521739130434784], [1.60249128E12, 0.6086206896551725], [1.60249068E12, 1.2], [1.6024923E12, 0.5], [1.60249026E12, 1.0], [1.60249248E12, 0.504109589041096], [1.60248966E12, 0.719924812030075], [1.60249188E12, 0.8571428571428571], [1.6024905E12, 1.5], [1.6024899E12, 0.0], [1.60249212E12, 0.4], [1.60249008E12, 0.75], [1.6024917E12, 0.8333333333333334], [1.60248948E12, 0.9516728624535317], [1.6024911E12, 0.5500000000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60249254E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 185.0, "minX": 1.60248942E12, "maxY": 299279.0, "series": [{"data": [[1.60249032E12, 299279.0], [1.60249194E12, 75287.0], [1.60248972E12, 6474.0], [1.60249134E12, 3933.0], [1.60249152E12, 76767.0], [1.60249092E12, 148882.0], [1.60249254E12, 72371.0], [1.60248954E12, 95002.0], [1.60249176E12, 147225.0], [1.60249116E12, 79493.0], [1.60249074E12, 214220.0], [1.60249014E12, 147668.0], [1.60249236E12, 146976.0], [1.60249098E12, 76306.0], [1.60249038E12, 146117.0], [1.60249056E12, 222021.0], [1.60249218E12, 146167.0], [1.60248996E12, 143756.0], [1.60249242E12, 75090.0], [1.6024902E12, 76497.0], [1.60249182E12, 220916.0], [1.60248978E12, 91036.0], [1.602492E12, 140726.0], [1.6024914E12, 77956.0], [1.60249002E12, 236603.0], [1.60248942E12, 10567.0], [1.60249164E12, 146164.0], [1.6024896E12, 6663.0], [1.60249122E12, 7654.0], [1.60249062E12, 77029.0], [1.60248984E12, 75494.0], [1.60249146E12, 75304.0], [1.60249086E12, 76580.0], [1.60249104E12, 7218.0], [1.60249044E12, 75872.0], [1.60249206E12, 220866.0], [1.60249128E12, 4335.0], [1.60249068E12, 74210.0], [1.6024923E12, 76743.0], [1.60249026E12, 220268.0], [1.60249248E12, 8054.0], [1.60248966E12, 6054.0], [1.60249188E12, 100027.0], [1.6024905E12, 143162.0], [1.6024899E12, 91910.0], [1.60249212E12, 76304.0], [1.60249008E12, 145513.0], [1.6024917E12, 291201.0], [1.60248948E12, 12161.0], [1.6024911E12, 8247.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60249032E12, 185.0], [1.60249194E12, 494.0], [1.60248972E12, 192.71999974250792], [1.60249134E12, 204.0], [1.60249152E12, 1434.0], [1.60249092E12, 218.0], [1.60249254E12, 69815.0], [1.60248954E12, 207.0], [1.60249176E12, 269.0], [1.60249116E12, 248.24999994039536], [1.60249074E12, 242.0], [1.60249014E12, 360.0], [1.60249236E12, 222.55599993228913], [1.60249098E12, 207.91499989628792], [1.60249038E12, 4484.0], [1.60249056E12, 334.0], [1.60249218E12, 243.0], [1.60248996E12, 71283.0], [1.60249242E12, 250.0], [1.6024902E12, 357.0], [1.60249182E12, 236.0], [1.60248978E12, 297.0], [1.602492E12, 358.0], [1.6024914E12, 337.0], [1.60249002E12, 72171.0], [1.60248942E12, 243.0459997868538], [1.60249164E12, 71483.0], [1.6024896E12, 223.17499986290932], [1.60249122E12, 214.16599986314773], [1.60249062E12, 287.0], [1.60248984E12, 72636.0], [1.60249146E12, 73859.0], [1.60249086E12, 75031.0], [1.60249104E12, 229.50099966883658], [1.60249044E12, 73672.0], [1.60249206E12, 312.0], [1.60249128E12, 213.2289998614788], [1.60249068E12, 355.0], [1.6024923E12, 73327.0], [1.60249026E12, 251.0], [1.60249248E12, 223.0], [1.60248966E12, 221.3909996187687], [1.60249188E12, 759.0], [1.6024905E12, 138466.0], [1.6024899E12, 91910.0], [1.60249212E12, 323.0], [1.60249008E12, 76504.0], [1.6024917E12, 137219.0], [1.60248948E12, 228.85999987125396], [1.6024911E12, 238.08999928236008]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60249032E12, 185.0], [1.60249194E12, 494.0], [1.60248972E12, 193.69200010299681], [1.60249134E12, 204.0], [1.60249152E12, 1434.0], [1.60249092E12, 218.0], [1.60249254E12, 69815.0], [1.60248954E12, 207.0], [1.60249176E12, 269.0], [1.60249116E12, 248.47500002384186], [1.60249074E12, 244.96500051021576], [1.60249014E12, 360.0], [1.60249236E12, 222.81160002708435], [1.60249098E12, 208.30650004148484], [1.60249038E12, 4484.0], [1.60249056E12, 334.0], [1.60249218E12, 243.0], [1.60248996E12, 71283.0], [1.60249242E12, 250.0], [1.6024902E12, 357.0], [1.60249182E12, 236.0], [1.60248978E12, 297.0], [1.602492E12, 358.0], [1.6024914E12, 337.0], [1.60249002E12, 72171.0], [1.60248942E12, 243.8506000852585], [1.60249164E12, 71483.0], [1.6024896E12, 223.69250005483627], [1.60249122E12, 214.6826000547409], [1.60249062E12, 287.0], [1.60248984E12, 72636.0], [1.60249146E12, 73859.0], [1.60249086E12, 75031.0], [1.60249104E12, 230.75110013246535], [1.60249044E12, 73672.0], [1.60249206E12, 312.0], [1.60249128E12, 213.75190005540847], [1.60249068E12, 355.0], [1.6024923E12, 73327.0], [1.60249026E12, 251.0], [1.60249248E12, 223.0], [1.60248966E12, 224.21360040664672], [1.60249188E12, 759.0], [1.6024905E12, 138466.0], [1.6024899E12, 91910.0], [1.60249212E12, 323.0], [1.60249008E12, 76504.0], [1.6024917E12, 137219.0], [1.60248948E12, 229.3460000514984], [1.6024911E12, 240.79900028705597]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60249032E12, 185.0], [1.60249194E12, 494.0], [1.60248972E12, 193.25999987125397], [1.60249134E12, 204.0], [1.60249152E12, 1434.0], [1.60249092E12, 218.0], [1.60249254E12, 69815.0], [1.60248954E12, 207.0], [1.60249176E12, 269.0], [1.60249116E12, 248.37499997019768], [1.60249074E12, 242.8249993622303], [1.60249014E12, 360.0], [1.60249236E12, 222.69799996614455], [1.60249098E12, 208.13249994814396], [1.60249038E12, 4484.0], [1.60249056E12, 334.0], [1.60249218E12, 243.0], [1.60248996E12, 71283.0], [1.60249242E12, 250.0], [1.6024902E12, 357.0], [1.60249182E12, 236.0], [1.60248978E12, 297.0], [1.602492E12, 358.0], [1.6024914E12, 337.0], [1.60249002E12, 72171.0], [1.60248942E12, 243.49299989342688], [1.60249164E12, 71483.0], [1.6024896E12, 223.46249993145466], [1.60249122E12, 214.45299993157386], [1.60249062E12, 287.0], [1.60248984E12, 72636.0], [1.60249146E12, 73859.0], [1.60249086E12, 75031.0], [1.60249104E12, 230.19549983441829], [1.60249044E12, 73672.0], [1.60249206E12, 312.0], [1.60249128E12, 213.5194999307394], [1.60249068E12, 355.0], [1.6024923E12, 73327.0], [1.60249026E12, 251.0], [1.60249248E12, 223.0], [1.60248966E12, 222.50799949169158], [1.60249188E12, 759.0], [1.6024905E12, 138466.0], [1.6024899E12, 91910.0], [1.60249212E12, 323.0], [1.60249008E12, 76504.0], [1.6024917E12, 137219.0], [1.60248948E12, 229.12999993562698], [1.6024911E12, 239.59499964118004]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60249032E12, 185.0], [1.60249194E12, 494.0], [1.60248972E12, 192.0], [1.60249134E12, 204.0], [1.60249152E12, 1434.0], [1.60249092E12, 218.0], [1.60249254E12, 69815.0], [1.60248954E12, 207.0], [1.60249176E12, 269.0], [1.60249116E12, 248.0], [1.60249074E12, 242.0], [1.60249014E12, 360.0], [1.60249236E12, 222.0], [1.60249098E12, 207.0], [1.60249038E12, 4484.0], [1.60249056E12, 334.0], [1.60249218E12, 243.0], [1.60248996E12, 71283.0], [1.60249242E12, 250.0], [1.6024902E12, 357.0], [1.60249182E12, 236.0], [1.60248978E12, 297.0], [1.602492E12, 358.0], [1.6024914E12, 337.0], [1.60249002E12, 72171.0], [1.60248942E12, 241.0], [1.60249164E12, 71483.0], [1.6024896E12, 203.0], [1.60249122E12, 208.0], [1.60249062E12, 287.0], [1.60248984E12, 72636.0], [1.60249146E12, 73859.0], [1.60249086E12, 75031.0], [1.60249104E12, 205.0], [1.60249044E12, 73672.0], [1.60249206E12, 312.0], [1.60249128E12, 204.0], [1.60249068E12, 355.0], [1.6024923E12, 73327.0], [1.60249026E12, 251.0], [1.60249248E12, 212.0], [1.60248966E12, 209.0], [1.60249188E12, 759.0], [1.6024905E12, 138466.0], [1.6024899E12, 91910.0], [1.60249212E12, 323.0], [1.60249008E12, 76504.0], [1.6024917E12, 137219.0], [1.60248948E12, 217.0], [1.6024911E12, 215.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60249032E12, 2929.0], [1.60249194E12, 74331.0], [1.60248972E12, 403.0], [1.60249134E12, 748.0], [1.60249152E12, 74274.0], [1.60249092E12, 517.0], [1.60249254E12, 71535.0], [1.60248954E12, 690.5], [1.60249176E12, 77955.0], [1.60249116E12, 666.0], [1.60249074E12, 818.5], [1.60249014E12, 102579.5], [1.60249236E12, 467.0], [1.60249098E12, 715.0], [1.60249038E12, 73093.0], [1.60249056E12, 74895.0], [1.60249218E12, 781.0], [1.60248996E12, 74403.0], [1.60249242E12, 918.0], [1.6024902E12, 45467.0], [1.60249182E12, 976.0], [1.60248978E12, 1202.0], [1.602492E12, 1078.0], [1.6024914E12, 918.0], [1.60249002E12, 146840.0], [1.60248942E12, 1027.0], [1.60249164E12, 73539.0], [1.6024896E12, 599.0], [1.60249122E12, 663.0], [1.60249062E12, 946.0], [1.60248984E12, 73998.0], [1.60249146E12, 74604.0], [1.60249086E12, 75623.0], [1.60249104E12, 782.5], [1.60249044E12, 75622.0], [1.60249206E12, 22883.0], [1.60249128E12, 763.0], [1.60249068E12, 1435.0], [1.6024923E12, 75412.5], [1.60249026E12, 53338.0], [1.60249248E12, 821.0], [1.60248966E12, 730.5], [1.60249188E12, 26614.0], [1.6024905E12, 140814.0], [1.6024899E12, 91910.0], [1.60249212E12, 18614.0], [1.60249008E12, 76620.5], [1.6024917E12, 289602.5], [1.60248948E12, 745.0], [1.6024911E12, 848.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60249254E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 286.0, "minX": 1.0, "maxY": 1557.0, "series": [{"data": [[2.0, 862.0], [3.0, 1557.0], [4.0, 1043.0], [5.0, 1057.5], [6.0, 1000.5], [7.0, 833.0], [8.0, 923.5], [9.0, 923.0], [10.0, 815.0], [11.0, 806.0], [12.0, 701.5], [13.0, 835.0], [14.0, 733.0], [15.0, 514.5], [1.0, 1328.0], [16.0, 425.0], [17.0, 413.0], [18.0, 440.0], [19.0, 389.0], [20.0, 319.0], [21.0, 382.0], [22.0, 331.0], [23.0, 380.0], [24.0, 286.0], [25.0, 312.0], [27.0, 286.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 285.0, "minX": 1.0, "maxY": 1449.0, "series": [{"data": [[2.0, 859.0], [3.0, 1449.0], [4.0, 1023.0], [5.0, 1026.0], [6.0, 968.5], [7.0, 792.0], [8.0, 889.5], [9.0, 886.0], [10.0, 762.5], [11.0, 771.0], [12.0, 701.0], [13.0, 827.0], [14.0, 720.5], [15.0, 489.5], [1.0, 1318.0], [16.0, 416.0], [17.0, 413.0], [18.0, 440.0], [19.0, 389.0], [20.0, 318.5], [21.0, 381.0], [22.0, 330.5], [23.0, 380.0], [24.0, 286.0], [25.0, 312.0], [27.0, 285.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60248942E12, "maxY": 9.666666666666666, "series": [{"data": [[1.60249032E12, 0.3], [1.60249194E12, 0.08333333333333333], [1.60248972E12, 1.9833333333333334], [1.60249134E12, 0.8833333333333333], [1.60249152E12, 0.08333333333333333], [1.60249092E12, 2.283333333333333], [1.60248954E12, 0.8333333333333334], [1.60249176E12, 0.15], [1.60249116E12, 2.066666666666667], [1.60249074E12, 1.7666666666666666], [1.60249014E12, 0.06666666666666667], [1.60249236E12, 2.35], [1.60249098E12, 2.4], [1.60249038E12, 0.18333333333333332], [1.60249056E12, 0.21666666666666667], [1.60249218E12, 1.65], [1.60248996E12, 0.06666666666666667], [1.60249242E12, 1.2833333333333334], [1.6024902E12, 0.06666666666666667], [1.60249182E12, 0.45], [1.60248978E12, 0.7666666666666667], [1.602492E12, 0.2], [1.6024914E12, 0.75], [1.60249002E12, 0.15], [1.60248942E12, 2.6333333333333333], [1.60249164E12, 0.06666666666666667], [1.6024896E12, 9.566666666666666], [1.60249122E12, 9.55], [1.60249062E12, 0.3333333333333333], [1.60248984E12, 0.08333333333333333], [1.60249146E12, 0.1], [1.60249086E12, 0.06666666666666667], [1.60249104E12, 7.7], [1.60249044E12, 0.05], [1.60249206E12, 0.38333333333333336], [1.60249128E12, 9.666666666666666], [1.60249068E12, 0.08333333333333333], [1.6024923E12, 0.1], [1.60249026E12, 0.15], [1.60249248E12, 6.0], [1.60248966E12, 8.866666666666667], [1.60249188E12, 0.11666666666666667], [1.6024905E12, 0.03333333333333333], [1.6024899E12, 0.016666666666666666], [1.60249212E12, 0.25], [1.60249008E12, 0.06666666666666667], [1.6024917E12, 0.1], [1.60248948E12, 4.483333333333333], [1.6024911E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60249248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60248942E12, "maxY": 9.666666666666666, "series": [{"data": [[1.60249032E12, 0.3], [1.60249194E12, 0.08333333333333333], [1.60248972E12, 1.9833333333333334], [1.60249134E12, 0.8833333333333333], [1.60249152E12, 0.08333333333333333], [1.60249092E12, 2.283333333333333], [1.60249254E12, 0.08333333333333333], [1.60248954E12, 0.8333333333333334], [1.60249176E12, 0.15], [1.60249116E12, 2.066666666666667], [1.60249074E12, 1.7666666666666666], [1.60249014E12, 0.06666666666666667], [1.60249236E12, 2.35], [1.60249098E12, 2.4], [1.60249038E12, 0.18333333333333332], [1.60249056E12, 0.21666666666666667], [1.60249218E12, 1.65], [1.60248996E12, 0.06666666666666667], [1.60249242E12, 1.2833333333333334], [1.6024902E12, 0.06666666666666667], [1.60249182E12, 0.45], [1.60248978E12, 0.7666666666666667], [1.602492E12, 0.2], [1.6024914E12, 0.75], [1.60249002E12, 0.15], [1.60248942E12, 2.466666666666667], [1.60249164E12, 0.06666666666666667], [1.6024896E12, 9.566666666666666], [1.60249122E12, 9.55], [1.60249062E12, 0.3333333333333333], [1.60248984E12, 0.08333333333333333], [1.60249146E12, 0.1], [1.60249086E12, 0.06666666666666667], [1.60249104E12, 7.7], [1.60249044E12, 0.05], [1.60249206E12, 0.38333333333333336], [1.60249128E12, 9.666666666666666], [1.60249068E12, 0.08333333333333333], [1.6024923E12, 0.1], [1.60249026E12, 0.15], [1.60249248E12, 6.083333333333333], [1.60248966E12, 8.866666666666667], [1.60249188E12, 0.11666666666666667], [1.6024905E12, 0.03333333333333333], [1.6024899E12, 0.016666666666666666], [1.60249212E12, 0.25], [1.60249008E12, 0.06666666666666667], [1.6024917E12, 0.1], [1.60248948E12, 4.483333333333333], [1.6024911E12, 5.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60249254E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60248942E12, "maxY": 9.666666666666666, "series": [{"data": [[1.60249032E12, 0.3], [1.60249194E12, 0.08333333333333333], [1.60248972E12, 1.9833333333333334], [1.60249134E12, 0.8833333333333333], [1.60249152E12, 0.08333333333333333], [1.60249092E12, 2.283333333333333], [1.60249254E12, 0.08333333333333333], [1.60248954E12, 0.8333333333333334], [1.60249176E12, 0.15], [1.60249116E12, 2.066666666666667], [1.60249074E12, 1.7666666666666666], [1.60249014E12, 0.06666666666666667], [1.60249236E12, 2.35], [1.60249098E12, 2.4], [1.60249038E12, 0.18333333333333332], [1.60249056E12, 0.21666666666666667], [1.60249218E12, 1.65], [1.60248996E12, 0.06666666666666667], [1.60249242E12, 1.2833333333333334], [1.6024902E12, 0.06666666666666667], [1.60249182E12, 0.45], [1.60248978E12, 0.7666666666666667], [1.602492E12, 0.2], [1.6024914E12, 0.75], [1.60249002E12, 0.15], [1.60248942E12, 2.466666666666667], [1.60249164E12, 0.06666666666666667], [1.6024896E12, 9.566666666666666], [1.60249122E12, 9.55], [1.60249062E12, 0.3333333333333333], [1.60248984E12, 0.08333333333333333], [1.60249146E12, 0.1], [1.60249086E12, 0.06666666666666667], [1.60249104E12, 7.7], [1.60249044E12, 0.05], [1.60249206E12, 0.38333333333333336], [1.60249128E12, 9.666666666666666], [1.60249068E12, 0.08333333333333333], [1.6024923E12, 0.1], [1.60249026E12, 0.15], [1.60249248E12, 6.083333333333333], [1.60248966E12, 8.866666666666667], [1.60249188E12, 0.11666666666666667], [1.6024905E12, 0.03333333333333333], [1.6024899E12, 0.016666666666666666], [1.60249212E12, 0.25], [1.60249008E12, 0.06666666666666667], [1.6024917E12, 0.1], [1.60248948E12, 4.483333333333333], [1.6024911E12, 5.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60249254E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60248942E12, "maxY": 9.666666666666666, "series": [{"data": [[1.60249032E12, 0.3], [1.60249194E12, 0.08333333333333333], [1.60248972E12, 1.9833333333333334], [1.60249134E12, 0.8833333333333333], [1.60249152E12, 0.08333333333333333], [1.60249092E12, 2.283333333333333], [1.60249254E12, 0.08333333333333333], [1.60248954E12, 0.8333333333333334], [1.60249176E12, 0.15], [1.60249116E12, 2.066666666666667], [1.60249074E12, 1.7666666666666666], [1.60249014E12, 0.06666666666666667], [1.60249236E12, 2.35], [1.60249098E12, 2.4], [1.60249038E12, 0.18333333333333332], [1.60249056E12, 0.21666666666666667], [1.60249218E12, 1.65], [1.60248996E12, 0.06666666666666667], [1.60249242E12, 1.2833333333333334], [1.6024902E12, 0.06666666666666667], [1.60249182E12, 0.45], [1.60248978E12, 0.7666666666666667], [1.602492E12, 0.2], [1.6024914E12, 0.75], [1.60249002E12, 0.15], [1.60248942E12, 2.466666666666667], [1.60249164E12, 0.06666666666666667], [1.6024896E12, 9.566666666666666], [1.60249122E12, 9.55], [1.60249062E12, 0.3333333333333333], [1.60248984E12, 0.08333333333333333], [1.60249146E12, 0.1], [1.60249086E12, 0.06666666666666667], [1.60249104E12, 7.7], [1.60249044E12, 0.05], [1.60249206E12, 0.38333333333333336], [1.60249128E12, 9.666666666666666], [1.60249068E12, 0.08333333333333333], [1.6024923E12, 0.1], [1.60249026E12, 0.15], [1.60249248E12, 6.083333333333333], [1.60248966E12, 8.866666666666667], [1.60249188E12, 0.11666666666666667], [1.6024905E12, 0.03333333333333333], [1.6024899E12, 0.016666666666666666], [1.60249212E12, 0.25], [1.60249008E12, 0.06666666666666667], [1.6024917E12, 0.1], [1.60248948E12, 4.483333333333333], [1.6024911E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60249254E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

