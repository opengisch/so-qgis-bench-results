/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 263726.0, "series": [{"data": [[0.0, 8.0], [0.1, 10.0], [0.2, 11.0], [0.3, 12.0], [0.4, 13.0], [0.5, 15.0], [0.6, 15.0], [0.7, 16.0], [0.8, 16.0], [0.9, 16.0], [1.0, 16.0], [1.1, 17.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 18.0], [2.1, 18.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 22.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 24.0], [5.5, 24.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 25.0], [6.3, 25.0], [6.4, 25.0], [6.5, 25.0], [6.6, 25.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 26.0], [7.2, 26.0], [7.3, 26.0], [7.4, 26.0], [7.5, 26.0], [7.6, 26.0], [7.7, 26.0], [7.8, 27.0], [7.9, 27.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 27.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 28.0], [9.1, 28.0], [9.2, 29.0], [9.3, 29.0], [9.4, 30.0], [9.5, 30.0], [9.6, 30.0], [9.7, 31.0], [9.8, 31.0], [9.9, 32.0], [10.0, 32.0], [10.1, 33.0], [10.2, 34.0], [10.3, 34.0], [10.4, 35.0], [10.5, 35.0], [10.6, 36.0], [10.7, 36.0], [10.8, 37.0], [10.9, 37.0], [11.0, 38.0], [11.1, 38.0], [11.2, 39.0], [11.3, 41.0], [11.4, 42.0], [11.5, 43.0], [11.6, 45.0], [11.7, 47.0], [11.8, 49.0], [11.9, 51.0], [12.0, 54.0], [12.1, 60.0], [12.2, 68.0], [12.3, 78.0], [12.4, 83.0], [12.5, 92.0], [12.6, 94.0], [12.7, 98.0], [12.8, 100.0], [12.9, 102.0], [13.0, 104.0], [13.1, 104.0], [13.2, 105.0], [13.3, 106.0], [13.4, 107.0], [13.5, 107.0], [13.6, 108.0], [13.7, 110.0], [13.8, 111.0], [13.9, 112.0], [14.0, 113.0], [14.1, 114.0], [14.2, 115.0], [14.3, 116.0], [14.4, 116.0], [14.5, 117.0], [14.6, 117.0], [14.7, 118.0], [14.8, 118.0], [14.9, 118.0], [15.0, 118.0], [15.1, 118.0], [15.2, 119.0], [15.3, 119.0], [15.4, 119.0], [15.5, 119.0], [15.6, 119.0], [15.7, 119.0], [15.8, 120.0], [15.9, 120.0], [16.0, 120.0], [16.1, 120.0], [16.2, 120.0], [16.3, 120.0], [16.4, 121.0], [16.5, 121.0], [16.6, 121.0], [16.7, 121.0], [16.8, 122.0], [16.9, 122.0], [17.0, 122.0], [17.1, 122.0], [17.2, 122.0], [17.3, 123.0], [17.4, 123.0], [17.5, 123.0], [17.6, 123.0], [17.7, 124.0], [17.8, 124.0], [17.9, 124.0], [18.0, 125.0], [18.1, 125.0], [18.2, 126.0], [18.3, 126.0], [18.4, 126.0], [18.5, 127.0], [18.6, 127.0], [18.7, 127.0], [18.8, 127.0], [18.9, 128.0], [19.0, 128.0], [19.1, 129.0], [19.2, 130.0], [19.3, 130.0], [19.4, 131.0], [19.5, 131.0], [19.6, 132.0], [19.7, 132.0], [19.8, 132.0], [19.9, 133.0], [20.0, 133.0], [20.1, 134.0], [20.2, 135.0], [20.3, 136.0], [20.4, 136.0], [20.5, 137.0], [20.6, 138.0], [20.7, 138.0], [20.8, 139.0], [20.9, 140.0], [21.0, 142.0], [21.1, 142.0], [21.2, 143.0], [21.3, 144.0], [21.4, 144.0], [21.5, 145.0], [21.6, 146.0], [21.7, 147.0], [21.8, 149.0], [21.9, 150.0], [22.0, 151.0], [22.1, 151.0], [22.2, 153.0], [22.3, 154.0], [22.4, 155.0], [22.5, 156.0], [22.6, 157.0], [22.7, 159.0], [22.8, 160.0], [22.9, 162.0], [23.0, 164.0], [23.1, 164.0], [23.2, 166.0], [23.3, 167.0], [23.4, 169.0], [23.5, 170.0], [23.6, 171.0], [23.7, 173.0], [23.8, 177.0], [23.9, 177.0], [24.0, 179.0], [24.1, 182.0], [24.2, 183.0], [24.3, 185.0], [24.4, 187.0], [24.5, 189.0], [24.6, 192.0], [24.7, 194.0], [24.8, 196.0], [24.9, 198.0], [25.0, 200.0], [25.1, 201.0], [25.2, 203.0], [25.3, 205.0], [25.4, 207.0], [25.5, 208.0], [25.6, 210.0], [25.7, 212.0], [25.8, 215.0], [25.9, 216.0], [26.0, 217.0], [26.1, 222.0], [26.2, 224.0], [26.3, 226.0], [26.4, 228.0], [26.5, 233.0], [26.6, 236.0], [26.7, 238.0], [26.8, 242.0], [26.9, 247.0], [27.0, 249.0], [27.1, 250.0], [27.2, 255.0], [27.3, 257.0], [27.4, 257.0], [27.5, 260.0], [27.6, 262.0], [27.7, 266.0], [27.8, 269.0], [27.9, 273.0], [28.0, 277.0], [28.1, 278.0], [28.2, 280.0], [28.3, 282.0], [28.4, 283.0], [28.5, 286.0], [28.6, 287.0], [28.7, 289.0], [28.8, 290.0], [28.9, 293.0], [29.0, 295.0], [29.1, 296.0], [29.2, 298.0], [29.3, 303.0], [29.4, 305.0], [29.5, 308.0], [29.6, 310.0], [29.7, 312.0], [29.8, 313.0], [29.9, 315.0], [30.0, 318.0], [30.1, 322.0], [30.2, 323.0], [30.3, 325.0], [30.4, 329.0], [30.5, 330.0], [30.6, 333.0], [30.7, 334.0], [30.8, 334.0], [30.9, 337.0], [31.0, 338.0], [31.1, 340.0], [31.2, 343.0], [31.3, 345.0], [31.4, 346.0], [31.5, 347.0], [31.6, 349.0], [31.7, 352.0], [31.8, 355.0], [31.9, 356.0], [32.0, 358.0], [32.1, 360.0], [32.2, 362.0], [32.3, 365.0], [32.4, 368.0], [32.5, 369.0], [32.6, 371.0], [32.7, 374.0], [32.8, 375.0], [32.9, 377.0], [33.0, 378.0], [33.1, 380.0], [33.2, 384.0], [33.3, 386.0], [33.4, 387.0], [33.5, 388.0], [33.6, 391.0], [33.7, 394.0], [33.8, 396.0], [33.9, 397.0], [34.0, 400.0], [34.1, 402.0], [34.2, 405.0], [34.3, 408.0], [34.4, 410.0], [34.5, 411.0], [34.6, 413.0], [34.7, 417.0], [34.8, 421.0], [34.9, 422.0], [35.0, 424.0], [35.1, 427.0], [35.2, 428.0], [35.3, 430.0], [35.4, 432.0], [35.5, 434.0], [35.6, 434.0], [35.7, 436.0], [35.8, 438.0], [35.9, 440.0], [36.0, 441.0], [36.1, 443.0], [36.2, 446.0], [36.3, 449.0], [36.4, 453.0], [36.5, 454.0], [36.6, 455.0], [36.7, 457.0], [36.8, 459.0], [36.9, 462.0], [37.0, 464.0], [37.1, 465.0], [37.2, 467.0], [37.3, 470.0], [37.4, 472.0], [37.5, 473.0], [37.6, 475.0], [37.7, 477.0], [37.8, 479.0], [37.9, 482.0], [38.0, 483.0], [38.1, 486.0], [38.2, 487.0], [38.3, 488.0], [38.4, 491.0], [38.5, 493.0], [38.6, 495.0], [38.7, 497.0], [38.8, 499.0], [38.9, 500.0], [39.0, 503.0], [39.1, 504.0], [39.2, 505.0], [39.3, 506.0], [39.4, 508.0], [39.5, 509.0], [39.6, 510.0], [39.7, 512.0], [39.8, 515.0], [39.9, 516.0], [40.0, 518.0], [40.1, 520.0], [40.2, 522.0], [40.3, 525.0], [40.4, 527.0], [40.5, 529.0], [40.6, 532.0], [40.7, 533.0], [40.8, 534.0], [40.9, 536.0], [41.0, 539.0], [41.1, 540.0], [41.2, 543.0], [41.3, 544.0], [41.4, 547.0], [41.5, 548.0], [41.6, 552.0], [41.7, 553.0], [41.8, 557.0], [41.9, 559.0], [42.0, 560.0], [42.1, 563.0], [42.2, 568.0], [42.3, 569.0], [42.4, 571.0], [42.5, 573.0], [42.6, 575.0], [42.7, 577.0], [42.8, 580.0], [42.9, 581.0], [43.0, 583.0], [43.1, 586.0], [43.2, 589.0], [43.3, 590.0], [43.4, 591.0], [43.5, 593.0], [43.6, 596.0], [43.7, 598.0], [43.8, 599.0], [43.9, 601.0], [44.0, 602.0], [44.1, 605.0], [44.2, 608.0], [44.3, 609.0], [44.4, 612.0], [44.5, 614.0], [44.6, 616.0], [44.7, 620.0], [44.8, 622.0], [44.9, 624.0], [45.0, 628.0], [45.1, 631.0], [45.2, 633.0], [45.3, 639.0], [45.4, 641.0], [45.5, 644.0], [45.6, 646.0], [45.7, 647.0], [45.8, 651.0], [45.9, 653.0], [46.0, 655.0], [46.1, 659.0], [46.2, 660.0], [46.3, 665.0], [46.4, 669.0], [46.5, 670.0], [46.6, 672.0], [46.7, 673.0], [46.8, 675.0], [46.9, 678.0], [47.0, 680.0], [47.1, 683.0], [47.2, 684.0], [47.3, 689.0], [47.4, 691.0], [47.5, 695.0], [47.6, 698.0], [47.7, 701.0], [47.8, 711.0], [47.9, 713.0], [48.0, 717.0], [48.1, 719.0], [48.2, 720.0], [48.3, 723.0], [48.4, 725.0], [48.5, 730.0], [48.6, 735.0], [48.7, 738.0], [48.8, 742.0], [48.9, 744.0], [49.0, 748.0], [49.1, 750.0], [49.2, 752.0], [49.3, 755.0], [49.4, 757.0], [49.5, 760.0], [49.6, 765.0], [49.7, 767.0], [49.8, 769.0], [49.9, 772.0], [50.0, 774.0], [50.1, 782.0], [50.2, 784.0], [50.3, 785.0], [50.4, 789.0], [50.5, 790.0], [50.6, 792.0], [50.7, 795.0], [50.8, 797.0], [50.9, 798.0], [51.0, 799.0], [51.1, 802.0], [51.2, 803.0], [51.3, 806.0], [51.4, 808.0], [51.5, 811.0], [51.6, 813.0], [51.7, 815.0], [51.8, 818.0], [51.9, 820.0], [52.0, 823.0], [52.1, 825.0], [52.2, 828.0], [52.3, 831.0], [52.4, 832.0], [52.5, 835.0], [52.6, 837.0], [52.7, 838.0], [52.8, 840.0], [52.9, 840.0], [53.0, 843.0], [53.1, 846.0], [53.2, 850.0], [53.3, 852.0], [53.4, 856.0], [53.5, 861.0], [53.6, 865.0], [53.7, 868.0], [53.8, 870.0], [53.9, 874.0], [54.0, 878.0], [54.1, 880.0], [54.2, 883.0], [54.3, 889.0], [54.4, 891.0], [54.5, 894.0], [54.6, 898.0], [54.7, 901.0], [54.8, 903.0], [54.9, 906.0], [55.0, 910.0], [55.1, 911.0], [55.2, 917.0], [55.3, 920.0], [55.4, 924.0], [55.5, 928.0], [55.6, 929.0], [55.7, 933.0], [55.8, 936.0], [55.9, 938.0], [56.0, 944.0], [56.1, 947.0], [56.2, 948.0], [56.3, 950.0], [56.4, 953.0], [56.5, 954.0], [56.6, 957.0], [56.7, 958.0], [56.8, 959.0], [56.9, 965.0], [57.0, 967.0], [57.1, 969.0], [57.2, 971.0], [57.3, 974.0], [57.4, 980.0], [57.5, 984.0], [57.6, 987.0], [57.7, 990.0], [57.8, 993.0], [57.9, 997.0], [58.0, 1001.0], [58.1, 1002.0], [58.2, 1009.0], [58.3, 1012.0], [58.4, 1017.0], [58.5, 1021.0], [58.6, 1025.0], [58.7, 1028.0], [58.8, 1029.0], [58.9, 1035.0], [59.0, 1037.0], [59.1, 1040.0], [59.2, 1045.0], [59.3, 1047.0], [59.4, 1049.0], [59.5, 1052.0], [59.6, 1055.0], [59.7, 1059.0], [59.8, 1062.0], [59.9, 1066.0], [60.0, 1070.0], [60.1, 1071.0], [60.2, 1074.0], [60.3, 1076.0], [60.4, 1080.0], [60.5, 1082.0], [60.6, 1087.0], [60.7, 1094.0], [60.8, 1097.0], [60.9, 1099.0], [61.0, 1103.0], [61.1, 1106.0], [61.2, 1109.0], [61.3, 1110.0], [61.4, 1115.0], [61.5, 1120.0], [61.6, 1125.0], [61.7, 1128.0], [61.8, 1134.0], [61.9, 1136.0], [62.0, 1139.0], [62.1, 1143.0], [62.2, 1146.0], [62.3, 1148.0], [62.4, 1151.0], [62.5, 1152.0], [62.6, 1155.0], [62.7, 1158.0], [62.8, 1161.0], [62.9, 1165.0], [63.0, 1167.0], [63.1, 1168.0], [63.2, 1171.0], [63.3, 1174.0], [63.4, 1179.0], [63.5, 1181.0], [63.6, 1187.0], [63.7, 1190.0], [63.8, 1192.0], [63.9, 1194.0], [64.0, 1198.0], [64.1, 1199.0], [64.2, 1203.0], [64.3, 1206.0], [64.4, 1210.0], [64.5, 1212.0], [64.6, 1214.0], [64.7, 1218.0], [64.8, 1221.0], [64.9, 1225.0], [65.0, 1227.0], [65.1, 1229.0], [65.2, 1229.0], [65.3, 1232.0], [65.4, 1233.0], [65.5, 1235.0], [65.6, 1236.0], [65.7, 1240.0], [65.8, 1242.0], [65.9, 1246.0], [66.0, 1248.0], [66.1, 1249.0], [66.2, 1251.0], [66.3, 1255.0], [66.4, 1259.0], [66.5, 1260.0], [66.6, 1264.0], [66.7, 1266.0], [66.8, 1268.0], [66.9, 1269.0], [67.0, 1273.0], [67.1, 1274.0], [67.2, 1275.0], [67.3, 1276.0], [67.4, 1278.0], [67.5, 1282.0], [67.6, 1284.0], [67.7, 1288.0], [67.8, 1291.0], [67.9, 1298.0], [68.0, 1301.0], [68.1, 1305.0], [68.2, 1307.0], [68.3, 1309.0], [68.4, 1312.0], [68.5, 1313.0], [68.6, 1317.0], [68.7, 1321.0], [68.8, 1323.0], [68.9, 1324.0], [69.0, 1328.0], [69.1, 1330.0], [69.2, 1334.0], [69.3, 1337.0], [69.4, 1343.0], [69.5, 1345.0], [69.6, 1349.0], [69.7, 1352.0], [69.8, 1355.0], [69.9, 1358.0], [70.0, 1359.0], [70.1, 1362.0], [70.2, 1365.0], [70.3, 1367.0], [70.4, 1373.0], [70.5, 1377.0], [70.6, 1381.0], [70.7, 1385.0], [70.8, 1389.0], [70.9, 1391.0], [71.0, 1394.0], [71.1, 1399.0], [71.2, 1401.0], [71.3, 1413.0], [71.4, 1418.0], [71.5, 1423.0], [71.6, 1426.0], [71.7, 1431.0], [71.8, 1434.0], [71.9, 1438.0], [72.0, 1445.0], [72.1, 1447.0], [72.2, 1454.0], [72.3, 1459.0], [72.4, 1465.0], [72.5, 1469.0], [72.6, 1473.0], [72.7, 1477.0], [72.8, 1482.0], [72.9, 1486.0], [73.0, 1489.0], [73.1, 1493.0], [73.2, 1497.0], [73.3, 1501.0], [73.4, 1510.0], [73.5, 1520.0], [73.6, 1523.0], [73.7, 1531.0], [73.8, 1538.0], [73.9, 1541.0], [74.0, 1546.0], [74.1, 1551.0], [74.2, 1557.0], [74.3, 1567.0], [74.4, 1570.0], [74.5, 1573.0], [74.6, 1579.0], [74.7, 1584.0], [74.8, 1586.0], [74.9, 1588.0], [75.0, 1594.0], [75.1, 1601.0], [75.2, 1607.0], [75.3, 1612.0], [75.4, 1614.0], [75.5, 1619.0], [75.6, 1625.0], [75.7, 1627.0], [75.8, 1638.0], [75.9, 1640.0], [76.0, 1645.0], [76.1, 1650.0], [76.2, 1657.0], [76.3, 1665.0], [76.4, 1671.0], [76.5, 1674.0], [76.6, 1676.0], [76.7, 1681.0], [76.8, 1687.0], [76.9, 1691.0], [77.0, 1698.0], [77.1, 1704.0], [77.2, 1709.0], [77.3, 1726.0], [77.4, 1740.0], [77.5, 1745.0], [77.6, 1754.0], [77.7, 1761.0], [77.8, 1762.0], [77.9, 1768.0], [78.0, 1773.0], [78.1, 1783.0], [78.2, 1788.0], [78.3, 1798.0], [78.4, 1806.0], [78.5, 1817.0], [78.6, 1822.0], [78.7, 1825.0], [78.8, 1831.0], [78.9, 1836.0], [79.0, 1846.0], [79.1, 1858.0], [79.2, 1863.0], [79.3, 1866.0], [79.4, 1869.0], [79.5, 1878.0], [79.6, 1887.0], [79.7, 1892.0], [79.8, 1896.0], [79.9, 1900.0], [80.0, 1916.0], [80.1, 1923.0], [80.2, 1931.0], [80.3, 1934.0], [80.4, 1940.0], [80.5, 1948.0], [80.6, 1958.0], [80.7, 1970.0], [80.8, 1976.0], [80.9, 1981.0], [81.0, 1986.0], [81.1, 1993.0], [81.2, 2001.0], [81.3, 2009.0], [81.4, 2021.0], [81.5, 2028.0], [81.6, 2036.0], [81.7, 2046.0], [81.8, 2051.0], [81.9, 2057.0], [82.0, 2070.0], [82.1, 2077.0], [82.2, 2081.0], [82.3, 2086.0], [82.4, 2097.0], [82.5, 2102.0], [82.6, 2106.0], [82.7, 2112.0], [82.8, 2121.0], [82.9, 2131.0], [83.0, 2139.0], [83.1, 2140.0], [83.2, 2162.0], [83.3, 2167.0], [83.4, 2172.0], [83.5, 2183.0], [83.6, 2189.0], [83.7, 2200.0], [83.8, 2204.0], [83.9, 2215.0], [84.0, 2238.0], [84.1, 2252.0], [84.2, 2259.0], [84.3, 2273.0], [84.4, 2277.0], [84.5, 2281.0], [84.6, 2286.0], [84.7, 2294.0], [84.8, 2315.0], [84.9, 2323.0], [85.0, 2340.0], [85.1, 2346.0], [85.2, 2356.0], [85.3, 2377.0], [85.4, 2387.0], [85.5, 2406.0], [85.6, 2417.0], [85.7, 2427.0], [85.8, 2437.0], [85.9, 2446.0], [86.0, 2470.0], [86.1, 2482.0], [86.2, 2487.0], [86.3, 2497.0], [86.4, 2511.0], [86.5, 2520.0], [86.6, 2529.0], [86.7, 2532.0], [86.8, 2552.0], [86.9, 2567.0], [87.0, 2577.0], [87.1, 2583.0], [87.2, 2612.0], [87.3, 2642.0], [87.4, 2654.0], [87.5, 2669.0], [87.6, 2676.0], [87.7, 2693.0], [87.8, 2712.0], [87.9, 2730.0], [88.0, 2742.0], [88.1, 2753.0], [88.2, 2776.0], [88.3, 2801.0], [88.4, 2822.0], [88.5, 2863.0], [88.6, 2877.0], [88.7, 2902.0], [88.8, 2926.0], [88.9, 2931.0], [89.0, 2968.0], [89.1, 2990.0], [89.2, 3002.0], [89.3, 3010.0], [89.4, 3033.0], [89.5, 3052.0], [89.6, 3059.0], [89.7, 3069.0], [89.8, 3081.0], [89.9, 3119.0], [90.0, 3143.0], [90.1, 3173.0], [90.2, 3201.0], [90.3, 3207.0], [90.4, 3228.0], [90.5, 3279.0], [90.6, 3309.0], [90.7, 3327.0], [90.8, 3347.0], [90.9, 3371.0], [91.0, 3397.0], [91.1, 3429.0], [91.2, 3447.0], [91.3, 3489.0], [91.4, 3516.0], [91.5, 3562.0], [91.6, 3628.0], [91.7, 3652.0], [91.8, 3755.0], [91.9, 3777.0], [92.0, 3814.0], [92.1, 3916.0], [92.2, 3974.0], [92.3, 4019.0], [92.4, 4044.0], [92.5, 4134.0], [92.6, 4190.0], [92.7, 4286.0], [92.8, 4317.0], [92.9, 4513.0], [93.0, 4565.0], [93.1, 4633.0], [93.2, 4847.0], [93.3, 4918.0], [93.4, 4958.0], [93.5, 5076.0], [93.6, 5134.0], [93.7, 5228.0], [93.8, 5416.0], [93.9, 5556.0], [94.0, 5973.0], [94.1, 6230.0], [94.2, 7130.0], [94.3, 8522.0], [94.4, 9178.0], [94.5, 12368.0], [94.6, 17311.0], [94.7, 35520.0], [94.8, 45400.0], [94.9, 50535.0], [95.0, 71487.0], [95.1, 76849.0], [95.2, 80296.0], [95.3, 82124.0], [95.4, 82502.0], [95.5, 82748.0], [95.6, 83258.0], [95.7, 83513.0], [95.8, 83872.0], [95.9, 84100.0], [96.0, 84340.0], [96.1, 84527.0], [96.2, 84741.0], [96.3, 84913.0], [96.4, 85182.0], [96.5, 85288.0], [96.6, 85504.0], [96.7, 85657.0], [96.8, 85755.0], [96.9, 85922.0], [97.0, 85989.0], [97.1, 86230.0], [97.2, 86406.0], [97.3, 86730.0], [97.4, 87130.0], [97.5, 87385.0], [97.6, 87749.0], [97.7, 87925.0], [97.8, 88385.0], [97.9, 89047.0], [98.0, 89581.0], [98.1, 92703.0], [98.2, 96427.0], [98.3, 98417.0], [98.4, 99490.0], [98.5, 100166.0], [98.6, 100532.0], [98.7, 101397.0], [98.8, 102996.0], [98.9, 136015.0], [99.0, 154768.0], [99.1, 160515.0], [99.2, 162915.0], [99.3, 168669.0], [99.4, 170624.0], [99.5, 171795.0], [99.6, 173280.0], [99.7, 174417.0], [99.8, 177492.0], [99.9, 256882.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 664.0, "series": [{"data": [[0.0, 664.0], [162400.0, 1.0], [168800.0, 1.0], [176800.0, 1.0], [175200.0, 1.0], [256800.0, 1.0], [155300.0, 1.0], [169700.0, 1.0], [172900.0, 1.0], [68300.0, 1.0], [74700.0, 1.0], [85900.0, 8.0], [82700.0, 2.0], [85100.0, 2.0], [83500.0, 4.0], [84300.0, 3.0], [88300.0, 2.0], [86700.0, 1.0], [89100.0, 2.0], [90700.0, 1.0], [101100.0, 1.0], [138600.0, 1.0], [162600.0, 1.0], [170600.0, 2.0], [173800.0, 1.0], [175400.0, 1.0], [100.0, 631.0], [153900.0, 1.0], [168300.0, 1.0], [50500.0, 1.0], [200.0, 221.0], [71400.0, 1.0], [300.0, 246.0], [81800.0, 2.0], [79400.0, 1.0], [80200.0, 1.0], [85000.0, 3.0], [85800.0, 2.0], [84200.0, 1.0], [82600.0, 2.0], [83400.0, 1.0], [87400.0, 3.0], [89000.0, 1.0], [86600.0, 1.0], [88200.0, 1.0], [97800.0, 1.0], [99400.0, 2.0], [100200.0, 1.0], [101800.0, 1.0], [400.0, 255.0], [500.0, 259.0], [600.0, 199.0], [700.0, 173.0], [178800.0, 1.0], [800.0, 186.0], [900.0, 174.0], [1000.0, 155.0], [1100.0, 164.0], [1200.0, 199.0], [1300.0, 165.0], [1400.0, 111.0], [1500.0, 94.0], [1600.0, 102.0], [1700.0, 67.0], [1800.0, 81.0], [1900.0, 68.0], [2000.0, 66.0], [2100.0, 64.0], [2200.0, 55.0], [2300.0, 37.0], [2400.0, 44.0], [2500.0, 43.0], [160500.0, 1.0], [2600.0, 30.0], [171700.0, 2.0], [2800.0, 21.0], [2700.0, 29.0], [2900.0, 26.0], [3000.0, 33.0], [3100.0, 19.0], [3300.0, 25.0], [3200.0, 17.0], [3400.0, 18.0], [3500.0, 11.0], [3600.0, 10.0], [3700.0, 9.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 10.0], [4200.0, 5.0], [4100.0, 8.0], [4300.0, 7.0], [4500.0, 7.0], [4600.0, 5.0], [4400.0, 2.0], [4700.0, 1.0], [4800.0, 7.0], [5100.0, 6.0], [5000.0, 6.0], [4900.0, 7.0], [79300.0, 1.0], [80900.0, 1.0], [5200.0, 4.0], [5300.0, 4.0], [84900.0, 2.0], [85700.0, 6.0], [84100.0, 3.0], [83300.0, 3.0], [82500.0, 3.0], [5400.0, 4.0], [87300.0, 3.0], [86500.0, 3.0], [5500.0, 3.0], [88100.0, 1.0], [88900.0, 1.0], [5800.0, 1.0], [5700.0, 1.0], [95300.0, 1.0], [5900.0, 2.0], [6100.0, 2.0], [6000.0, 1.0], [100100.0, 4.0], [6300.0, 2.0], [98500.0, 1.0], [99300.0, 1.0], [6200.0, 2.0], [6900.0, 2.0], [7100.0, 1.0], [7400.0, 1.0], [7500.0, 1.0], [7800.0, 1.0], [7700.0, 1.0], [8600.0, 2.0], [8500.0, 2.0], [262900.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [9700.0, 1.0], [171000.0, 2.0], [10600.0, 1.0], [10700.0, 1.0], [177400.0, 1.0], [11200.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [13100.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [17600.0, 1.0], [30000.0, 1.0], [36400.0, 1.0], [38400.0, 1.0], [46000.0, 1.0], [48800.0, 1.0], [71200.0, 1.0], [74400.0, 1.0], [76800.0, 1.0], [81600.0, 1.0], [85600.0, 3.0], [83200.0, 1.0], [84800.0, 1.0], [87200.0, 1.0], [89600.0, 1.0], [86400.0, 1.0], [88000.0, 1.0], [100000.0, 1.0], [99200.0, 1.0], [98400.0, 1.0], [102400.0, 1.0], [136000.0, 1.0], [142400.0, 1.0], [153600.0, 1.0], [169600.0, 1.0], [168000.0, 1.0], [174400.0, 1.0], [172800.0, 1.0], [170500.0, 1.0], [172100.0, 1.0], [178500.0, 1.0], [71100.0, 1.0], [74300.0, 1.0], [85500.0, 4.0], [84700.0, 6.0], [83900.0, 2.0], [83100.0, 1.0], [82300.0, 1.0], [86300.0, 2.0], [87100.0, 3.0], [87900.0, 2.0], [88700.0, 1.0], [89500.0, 2.0], [93500.0, 1.0], [91100.0, 1.0], [92700.0, 1.0], [97500.0, 1.0], [94300.0, 2.0], [99900.0, 1.0], [100700.0, 1.0], [101500.0, 1.0], [263700.0, 1.0], [160200.0, 1.0], [174600.0, 1.0], [179400.0, 1.0], [35500.0, 1.0], [35100.0, 2.0], [154700.0, 1.0], [40700.0, 1.0], [161100.0, 1.0], [173900.0, 1.0], [49100.0, 1.0], [50300.0, 1.0], [55100.0, 1.0], [85400.0, 2.0], [82200.0, 1.0], [83800.0, 3.0], [83000.0, 2.0], [84600.0, 1.0], [87800.0, 4.0], [86200.0, 4.0], [87000.0, 4.0], [88600.0, 1.0], [97400.0, 1.0], [96600.0, 1.0], [102200.0, 1.0], [103000.0, 1.0], [155600.0, 1.0], [162000.0, 1.0], [173200.0, 3.0], [263200.0, 1.0], [162900.0, 1.0], [156500.0, 1.0], [170900.0, 1.0], [186900.0, 1.0], [258900.0, 2.0], [75700.0, 1.0], [78100.0, 1.0], [82100.0, 2.0], [83700.0, 1.0], [84500.0, 2.0], [82900.0, 1.0], [85300.0, 1.0], [86100.0, 1.0], [87700.0, 2.0], [101300.0, 1.0], [99700.0, 1.0], [100500.0, 1.0], [102900.0, 1.0], [103700.0, 1.0], [163800.0, 1.0], [168600.0, 1.0], [173400.0, 1.0], [17300.0, 1.0], [36600.0, 1.0], [143900.0, 1.0], [39800.0, 1.0], [167900.0, 1.0], [45400.0, 1.0], [78800.0, 1.0], [85200.0, 6.0], [86000.0, 1.0], [84400.0, 3.0], [83600.0, 1.0], [82000.0, 1.0], [88400.0, 1.0], [89200.0, 1.0], [90000.0, 1.0], [96400.0, 1.0], [101200.0, 2.0], [100400.0, 2.0], [122000.0, 1.0], [119600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 263700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1387.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2020.0, "series": [{"data": [[0.0, 2020.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1783.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1387.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.60403082E12, "maxY": 10.0, "series": [{"data": [[1.60403148E12, 10.0], [1.6040337E12, 10.0], [1.60403208E12, 10.0], [1.6040331E12, 10.0], [1.60403328E12, 10.0], [1.60403106E12, 10.0], [1.60403268E12, 10.0], [1.6040343E12, 2.5], [1.60403352E12, 10.0], [1.6040313E12, 10.0], [1.60403292E12, 10.0], [1.6040325E12, 10.0], [1.60403088E12, 10.0], [1.6040319E12, 10.0], [1.60403412E12, 10.0], [1.60403274E12, 10.0], [1.60403112E12, 10.0], [1.60403214E12, 10.0], [1.60403172E12, 10.0], [1.60403394E12, 10.0], [1.60403232E12, 10.0], [1.60403334E12, 10.0], [1.60403256E12, 10.0], [1.60403418E12, 9.963855421686748], [1.60403358E12, 10.0], [1.60403196E12, 10.0], [1.60403376E12, 10.0], [1.60403154E12, 10.0], [1.60403316E12, 10.0], [1.604034E12, 10.0], [1.60403118E12, 10.0], [1.60403178E12, 10.0], [1.60403298E12, 10.0], [1.60403136E12, 10.0], [1.60403238E12, 10.0], [1.604031E12, 10.0], [1.60403262E12, 10.0], [1.6040328E12, 10.0], [1.60403382E12, 10.0], [1.6040322E12, 10.0], [1.60403304E12, 10.0], [1.60403082E12, 10.0], [1.60403244E12, 10.0], [1.60403406E12, 10.0], [1.60403202E12, 10.0], [1.60403364E12, 10.0], [1.60403226E12, 10.0], [1.60403166E12, 10.0], [1.60403388E12, 10.0], [1.60403346E12, 10.0], [1.60403184E12, 10.0], [1.60403286E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040343E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 249.0, "minX": 1.0, "maxY": 82500.0, "series": [{"data": [[8.0, 249.0], [4.0, 82366.0], [2.0, 82500.0], [1.0, 81645.0], [9.0, 1569.0], [10.0, 6491.481953290873], [5.0, 3059.0], [6.0, 2251.0], [3.0, 82030.0], [7.0, 1613.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.991329479768785, 6545.2119460501]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.533333333333333, "minX": 1.60403082E12, "maxY": 3257960.3333333335, "series": [{"data": [[1.60403148E12, 430.8], [1.6040337E12, 8113.016666666666], [1.60403208E12, 8901.766666666666], [1.6040331E12, 1116.5666666666666], [1.60403328E12, 430.8666666666667], [1.60403106E12, 3257960.3333333335], [1.60403268E12, 2616745.1333333333], [1.6040343E12, 6084.416666666667], [1.60403352E12, 25722.766666666666], [1.6040313E12, 32945.4], [1.60403292E12, 1825246.9833333334], [1.6040325E12, 176889.15], [1.60403088E12, 1367650.1166666667], [1.6040319E12, 18259.0], [1.60403412E12, 112563.93333333333], [1.60403274E12, 503405.43333333335], [1.60403112E12, 582345.55], [1.60403214E12, 70844.56666666667], [1.60403172E12, 54361.38333333333], [1.60403394E12, 359.05], [1.60403232E12, 157546.36666666667], [1.60403334E12, 22187.666666666668], [1.60403256E12, 186917.91666666666], [1.60403418E12, 1928438.2666666666], [1.60403358E12, 2910.4166666666665], [1.60403196E12, 71.8], [1.60403376E12, 27147.3], [1.60403154E12, 430.98333333333335], [1.60403316E12, 21808.133333333335], [1.604034E12, 71.8], [1.60403118E12, 280170.01666666666], [1.60403178E12, 12834.433333333332], [1.60403298E12, 21208.75], [1.60403136E12, 431.0], [1.60403238E12, 206643.11666666667], [1.604031E12, 1773649.7333333334], [1.60403262E12, 1472172.05], [1.6040328E12, 1085605.5166666666], [1.60403382E12, 31388.266666666666], [1.6040322E12, 122538.68333333333], [1.60403304E12, 211531.75], [1.60403082E12, 924020.6], [1.60403244E12, 7655.8], [1.60403406E12, 385320.98333333334], [1.60403202E12, 53775.03333333333], [1.60403364E12, 59431.75], [1.60403226E12, 5830.883333333333], [1.60403166E12, 24397.55], [1.60403388E12, 494340.36666666664], [1.60403346E12, 65311.433333333334], [1.60403184E12, 12121.916666666666], [1.60403286E12, 2836396.3833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60403148E12, 47.6], [1.6040337E12, 133.71666666666667], [1.60403208E12, 78.35], [1.6040331E12, 71.45], [1.60403328E12, 47.6], [1.60403106E12, 4739.633333333333], [1.60403268E12, 3694.616666666667], [1.6040343E12, 31.733333333333334], [1.60403352E12, 84.5], [1.6040313E12, 79.18333333333334], [1.60403292E12, 3370.7833333333333], [1.6040325E12, 315.1666666666667], [1.60403088E12, 2200.366666666667], [1.6040319E12, 45.65], [1.60403412E12, 174.1], [1.60403274E12, 811.9166666666666], [1.60403112E12, 870.2166666666667], [1.60403214E12, 134.61666666666667], [1.60403172E12, 144.78333333333333], [1.60403394E12, 39.61666666666667], [1.60403232E12, 245.71666666666667], [1.60403334E12, 70.65], [1.60403256E12, 702.9666666666667], [1.60403418E12, 3226.1833333333334], [1.60403358E12, 30.966666666666665], [1.60403196E12, 7.533333333333333], [1.60403376E12, 142.58333333333334], [1.60403154E12, 47.6], [1.60403316E12, 55.266666666666666], [1.604034E12, 7.933333333333334], [1.60403118E12, 347.75], [1.60403178E12, 38.483333333333334], [1.60403298E12, 101.96666666666667], [1.60403136E12, 47.6], [1.60403238E12, 229.65], [1.604031E12, 4092.75], [1.60403262E12, 2384.7], [1.6040328E12, 1837.9166666666667], [1.60403382E12, 7.983333333333333], [1.6040322E12, 237.73333333333332], [1.60403304E12, 261.55], [1.60403082E12, 977.45], [1.60403244E12, 55.483333333333334], [1.60403406E12, 1120.3666666666666], [1.60403202E12, 148.71666666666667], [1.60403364E12, 77.78333333333333], [1.60403226E12, 47.63333333333333], [1.60403166E12, 92.28333333333333], [1.60403388E12, 812.3666666666667], [1.60403346E12, 184.75], [1.60403184E12, 61.85], [1.60403286E12, 4968.566666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040343E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 539.5604395604392, "minX": 1.60403082E12, "maxY": 144722.83333333334, "series": [{"data": [[1.60403148E12, 138418.16666666666], [1.6040337E12, 44543.64705882353], [1.60403208E12, 70667.70000000001], [1.6040331E12, 86344.0], [1.60403328E12, 113436.5], [1.60403106E12, 955.6644951140065], [1.60403268E12, 1233.3381147540974], [1.6040343E12, 82135.25], [1.60403352E12, 93880.63636363637], [1.6040313E12, 91533.90000000001], [1.60403292E12, 842.9814814814819], [1.6040325E12, 30623.649999999994], [1.60403088E12, 1147.6688741721844], [1.6040319E12, 95915.66666666667], [1.60403412E12, 38597.454545454544], [1.60403274E12, 1147.6964285714284], [1.60403112E12, 963.4642857142862], [1.60403214E12, 20306.588235294123], [1.60403172E12, 47203.05263157894], [1.60403394E12, 86609.4], [1.60403232E12, 53962.709677419356], [1.60403334E12, 94034.44444444444], [1.60403256E12, 539.5604395604392], [1.60403418E12, 1132.1999999999998], [1.60403358E12, 83047.0], [1.60403196E12, 122046.0], [1.60403376E12, 61936.77777777778], [1.60403154E12, 144722.83333333334], [1.60403316E12, 96909.0], [1.604034E12, 88969.0], [1.60403118E12, 23525.477272727265], [1.60403178E12, 41721.4], [1.60403298E12, 51549.0], [1.60403136E12, 91242.83333333333], [1.60403238E12, 4837.068965517241], [1.604031E12, 2703.079777365488], [1.60403262E12, 3766.1078431372553], [1.6040328E12, 4408.477366255138], [1.60403382E12, 1212.0], [1.6040322E12, 24696.799999999996], [1.60403304E12, 6495.030303030303], [1.60403082E12, 1398.1102362204722], [1.60403244E12, 74559.57142857143], [1.60403406E12, 9035.902777777783], [1.60403202E12, 49842.05263157893], [1.60403364E12, 36458.5], [1.60403226E12, 30138.166666666664], [1.60403166E12, 97759.08333333333], [1.60403388E12, 9525.747572815533], [1.60403346E12, 46358.083333333336], [1.60403184E12, 80069.5], [1.60403286E12, 912.0838414634143]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040343E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 537.7252747252746, "minX": 1.60403082E12, "maxY": 144722.5, "series": [{"data": [[1.60403148E12, 138417.66666666666], [1.6040337E12, 44543.05882352942], [1.60403208E12, 70667.0], [1.6040331E12, 86343.88888888889], [1.60403328E12, 113436.33333333333], [1.60403106E12, 941.9999999999997], [1.60403268E12, 1228.256147540984], [1.6040343E12, 82134.5], [1.60403352E12, 93879.63636363637], [1.6040313E12, 91532.7], [1.60403292E12, 837.212962962963], [1.6040325E12, 30620.97499999999], [1.60403088E12, 1143.7549668874167], [1.6040319E12, 95914.0], [1.60403412E12, 38594.54545454546], [1.60403274E12, 1143.3571428571431], [1.60403112E12, 958.6964285714286], [1.60403214E12, 20304.23529411765], [1.60403172E12, 47200.631578947374], [1.60403394E12, 86609.2], [1.60403232E12, 53959.645161290326], [1.60403334E12, 94033.33333333333], [1.60403256E12, 537.7252747252746], [1.60403418E12, 1128.1325301204813], [1.60403358E12, 83045.75], [1.60403196E12, 122045.0], [1.60403376E12, 61935.944444444445], [1.60403154E12, 144722.5], [1.60403316E12, 96907.57142857143], [1.604034E12, 88968.0], [1.60403118E12, 23521.295454545445], [1.60403178E12, 41718.4], [1.60403298E12, 51548.153846153844], [1.60403136E12, 91242.66666666667], [1.60403238E12, 4834.55172413793], [1.604031E12, 2698.2560296846023], [1.60403262E12, 3762.13398692811], [1.6040328E12, 4405.316872427983], [1.60403382E12, 1203.0], [1.6040322E12, 24690.73333333333], [1.60403304E12, 6484.333333333335], [1.60403082E12, 1389.511811023622], [1.60403244E12, 74558.85714285714], [1.60403406E12, 9033.71527777778], [1.60403202E12, 49840.631578947374], [1.60403364E12, 36455.9], [1.60403226E12, 30137.333333333332], [1.60403166E12, 97758.16666666667], [1.60403388E12, 9515.281553398054], [1.60403346E12, 46357.04166666667], [1.60403184E12, 80069.00000000001], [1.60403286E12, 903.0853658536573]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040343E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60403082E12, "maxY": 1.6062992125984248, "series": [{"data": [[1.60403148E12, 0.8333333333333334], [1.6040337E12, 0.7647058823529411], [1.60403208E12, 0.8999999999999999], [1.6040331E12, 0.6666666666666666], [1.60403328E12, 0.5], [1.60403106E12, 0.7833876221498379], [1.60403268E12, 0.5573770491803284], [1.6040343E12, 0.5], [1.60403352E12, 0.9090909090909091], [1.6040313E12, 0.5], [1.60403292E12, 0.5555555555555559], [1.6040325E12, 0.6249999999999998], [1.60403088E12, 0.8642384105960261], [1.6040319E12, 0.6666666666666666], [1.60403412E12, 0.8181818181818182], [1.60403274E12, 0.5267857142857144], [1.60403112E12, 0.669642857142857], [1.60403214E12, 0.8235294117647057], [1.60403172E12, 0.5789473684210528], [1.60403394E12, 0.8], [1.60403232E12, 0.7096774193548386], [1.60403334E12, 0.6666666666666666], [1.60403256E12, 0.5494505494505495], [1.60403418E12, 0.5060240963855417], [1.60403358E12, 1.5], [1.60403196E12, 0.0], [1.60403376E12, 0.4444444444444444], [1.60403154E12, 0.8333333333333334], [1.60403316E12, 0.5714285714285714], [1.604034E12, 1.0], [1.60403118E12, 0.45454545454545453], [1.60403178E12, 0.8], [1.60403298E12, 0.6923076923076923], [1.60403136E12, 0.6666666666666666], [1.60403238E12, 0.6551724137931034], [1.604031E12, 0.8181818181818173], [1.60403262E12, 0.5588235294117652], [1.6040328E12, 0.5514403292181066], [1.60403382E12, 0.0], [1.6040322E12, 0.6666666666666667], [1.60403304E12, 0.5454545454545455], [1.60403082E12, 1.6062992125984248], [1.60403244E12, 1.0], [1.60403406E12, 0.6180555555555558], [1.60403202E12, 0.6842105263157895], [1.60403364E12, 0.8999999999999999], [1.60403226E12, 0.8333333333333334], [1.60403166E12, 0.9166666666666666], [1.60403388E12, 0.640776699029126], [1.60403346E12, 0.75], [1.60403184E12, 0.75], [1.60403286E12, 0.5350609756097566]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040343E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.60403082E12, "maxY": 263726.0, "series": [{"data": [[1.60403148E12, 170512.0], [1.6040337E12, 161101.0], [1.60403208E12, 263726.0], [1.6040331E12, 89643.0], [1.60403328E12, 174417.0], [1.60403106E12, 4839.0], [1.60403268E12, 6947.0], [1.6040343E12, 82500.0], [1.60403352E12, 258955.0], [1.6040313E12, 101872.0], [1.60403292E12, 4800.0], [1.6040325E12, 172909.0], [1.60403088E12, 9778.0], [1.6040319E12, 174635.0], [1.60403412E12, 85255.0], [1.60403274E12, 6125.0], [1.60403112E12, 5007.0], [1.60403214E12, 85969.0], [1.60403172E12, 171049.0], [1.60403394E12, 88177.0], [1.60403232E12, 263274.0], [1.60403334E12, 256882.0], [1.60403256E12, 5109.0], [1.60403418E12, 5114.0], [1.60403358E12, 85346.0], [1.60403196E12, 122046.0], [1.60403376E12, 170636.0], [1.60403154E12, 172145.0], [1.60403316E12, 173247.0], [1.604034E12, 88969.0], [1.60403118E12, 100787.0], [1.60403178E12, 87343.0], [1.60403298E12, 85048.0], [1.60403136E12, 102272.0], [1.60403238E12, 89203.0], [1.604031E12, 101397.0], [1.60403262E12, 89151.0], [1.6040328E12, 85712.0], [1.60403382E12, 1212.0], [1.6040322E12, 262973.0], [1.60403304E12, 87385.0], [1.60403082E12, 4543.0], [1.60403244E12, 89175.0], [1.60403406E12, 173280.0], [1.60403202E12, 186970.0], [1.60403364E12, 87949.0], [1.60403226E12, 179488.0], [1.60403166E12, 171795.0], [1.60403388E12, 96660.0], [1.60403346E12, 258936.0], [1.60403184E12, 103727.0], [1.60403286E12, 4631.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60403148E12, 94338.0], [1.6040337E12, 78.0], [1.60403208E12, 110.0], [1.6040331E12, 83373.0], [1.60403328E12, 83258.0], [1.60403106E12, 19.0], [1.60403268E12, 21.0], [1.6040343E12, 81645.0], [1.60403352E12, 10627.0], [1.6040313E12, 83934.0], [1.60403292E12, 17.0], [1.6040325E12, 20.0], [1.60403088E12, 22.45399985551834], [1.6040319E12, 1123.0], [1.60403412E12, 340.0], [1.60403274E12, 21.016999973058702], [1.60403112E12, 15.0169999730587], [1.60403214E12, 113.0], [1.60403172E12, 12.0], [1.60403394E12, 85288.0], [1.60403232E12, 28.0], [1.60403334E12, 238.0], [1.60403256E12, 18.0], [1.60403418E12, 16.0], [1.60403358E12, 76849.0], [1.60403196E12, 122046.0], [1.60403376E12, 107.0], [1.60403154E12, 97430.0], [1.60403316E12, 82672.0], [1.604034E12, 88969.0], [1.60403118E12, 116.0], [1.60403178E12, 173.0], [1.60403298E12, 114.0], [1.60403136E12, 84963.0], [1.60403238E12, 127.0], [1.604031E12, 10.859999871253967], [1.60403262E12, 14.0], [1.6040328E12, 25.391999883651735], [1.60403382E12, 1212.0], [1.6040322E12, 111.0], [1.60403304E12, 127.0], [1.60403082E12, 27.607999877929686], [1.60403244E12, 2787.0], [1.60403406E12, 20.304999965429307], [1.60403202E12, 92.0], [1.60403364E12, 692.0], [1.60403226E12, 126.0], [1.60403166E12, 14285.0], [1.60403388E12, 11.0], [1.60403346E12, 9.0], [1.60403184E12, 40717.0], [1.60403286E12, 15.912999843358993]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60403148E12, 94338.0], [1.6040337E12, 78.0], [1.60403208E12, 110.0], [1.6040331E12, 83373.0], [1.60403328E12, 83258.0], [1.60403106E12, 19.088500058650972], [1.60403268E12, 21.0], [1.6040343E12, 81645.0], [1.60403352E12, 10627.0], [1.6040313E12, 83934.0], [1.60403292E12, 17.286700041294097], [1.6040325E12, 20.0], [1.60403088E12, 22.999400057792663], [1.6040319E12, 1123.0], [1.60403412E12, 340.0], [1.60403274E12, 21.11870001077652], [1.60403112E12, 15.11870001077652], [1.60403214E12, 113.0], [1.60403172E12, 12.0], [1.60403394E12, 85288.0], [1.60403232E12, 28.0], [1.60403334E12, 238.0], [1.60403256E12, 18.0], [1.60403418E12, 16.0], [1.60403358E12, 76849.0], [1.60403196E12, 122046.0], [1.60403376E12, 107.0], [1.60403154E12, 97430.0], [1.60403316E12, 82672.0], [1.604034E12, 88969.0], [1.60403118E12, 116.0], [1.60403178E12, 173.0], [1.60403298E12, 114.0], [1.60403136E12, 84963.0], [1.60403238E12, 127.0], [1.604031E12, 11.346000051498413], [1.60403262E12, 14.0], [1.6040328E12, 25.83120004653931], [1.60403382E12, 1212.0], [1.6040322E12, 111.0], [1.60403304E12, 127.0], [1.60403082E12, 28.068800048828123], [1.60403244E12, 2787.0], [1.60403406E12, 20.43550001382828], [1.60403202E12, 92.0], [1.60403364E12, 692.0], [1.60403226E12, 126.0], [1.60403166E12, 14285.0], [1.60403388E12, 11.029600009918212], [1.60403346E12, 9.0], [1.60403184E12, 40717.0], [1.60403286E12, 16.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60403148E12, 94338.0], [1.6040337E12, 78.0], [1.60403208E12, 110.0], [1.6040331E12, 83373.0], [1.60403328E12, 83258.0], [1.60403106E12, 19.0], [1.60403268E12, 21.0], [1.6040343E12, 81645.0], [1.60403352E12, 10627.0], [1.6040313E12, 83934.0], [1.60403292E12, 17.113499948382376], [1.6040325E12, 20.0], [1.60403088E12, 22.75699992775917], [1.6040319E12, 1123.0], [1.60403412E12, 340.0], [1.60403274E12, 21.07349998652935], [1.60403112E12, 15.07349998652935], [1.60403214E12, 113.0], [1.60403172E12, 12.0], [1.60403394E12, 85288.0], [1.60403232E12, 28.0], [1.60403334E12, 238.0], [1.60403256E12, 18.0], [1.60403418E12, 16.0], [1.60403358E12, 76849.0], [1.60403196E12, 122046.0], [1.60403376E12, 107.0], [1.60403154E12, 97430.0], [1.60403316E12, 82672.0], [1.604034E12, 88969.0], [1.60403118E12, 116.0], [1.60403178E12, 173.0], [1.60403298E12, 114.0], [1.60403136E12, 84963.0], [1.60403238E12, 127.0], [1.604031E12, 11.129999935626984], [1.60403262E12, 14.0], [1.6040328E12, 25.635999941825865], [1.60403382E12, 1212.0], [1.6040322E12, 111.0], [1.60403304E12, 127.0], [1.60403082E12, 27.863999938964845], [1.60403244E12, 2787.0], [1.60403406E12, 20.377499982714653], [1.60403202E12, 92.0], [1.60403364E12, 692.0], [1.60403226E12, 126.0], [1.60403166E12, 14285.0], [1.60403388E12, 11.0], [1.60403346E12, 9.0], [1.60403184E12, 40717.0], [1.60403286E12, 16.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60403148E12, 94338.0], [1.6040337E12, 78.0], [1.60403208E12, 110.0], [1.6040331E12, 83373.0], [1.60403328E12, 83258.0], [1.60403106E12, 11.0], [1.60403268E12, 19.0], [1.6040343E12, 81645.0], [1.60403352E12, 10627.0], [1.6040313E12, 83934.0], [1.60403292E12, 15.0], [1.6040325E12, 20.0], [1.60403088E12, 21.0], [1.6040319E12, 1123.0], [1.60403412E12, 340.0], [1.60403274E12, 21.0], [1.60403112E12, 15.0], [1.60403214E12, 113.0], [1.60403172E12, 12.0], [1.60403394E12, 85288.0], [1.60403232E12, 28.0], [1.60403334E12, 238.0], [1.60403256E12, 18.0], [1.60403418E12, 15.0], [1.60403358E12, 76849.0], [1.60403196E12, 122046.0], [1.60403376E12, 107.0], [1.60403154E12, 97430.0], [1.60403316E12, 82672.0], [1.604034E12, 88969.0], [1.60403118E12, 116.0], [1.60403178E12, 173.0], [1.60403298E12, 114.0], [1.60403136E12, 84963.0], [1.60403238E12, 127.0], [1.604031E12, 9.0], [1.60403262E12, 11.0], [1.6040328E12, 11.0], [1.60403382E12, 1212.0], [1.6040322E12, 111.0], [1.60403304E12, 127.0], [1.60403082E12, 27.0], [1.60403244E12, 2787.0], [1.60403406E12, 20.0], [1.60403202E12, 92.0], [1.60403364E12, 692.0], [1.60403226E12, 126.0], [1.60403166E12, 14285.0], [1.60403388E12, 11.0], [1.60403346E12, 9.0], [1.60403184E12, 40717.0], [1.60403286E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60403148E12, 153779.5], [1.6040337E12, 7466.0], [1.60403208E12, 49594.0], [1.6040331E12, 85572.0], [1.60403328E12, 87020.0], [1.60403106E12, 755.5], [1.60403268E12, 770.5], [1.6040343E12, 82198.0], [1.60403352E12, 82601.0], [1.6040313E12, 85488.5], [1.60403292E12, 591.5], [1.6040325E12, 1087.5], [1.60403088E12, 738.0], [1.6040319E12, 87259.0], [1.60403412E12, 2082.5], [1.60403274E12, 652.5], [1.60403112E12, 534.0], [1.60403214E12, 225.0], [1.60403172E12, 17311.0], [1.60403394E12, 86406.0], [1.60403232E12, 886.0], [1.60403334E12, 86230.0], [1.60403256E12, 182.0], [1.60403418E12, 840.0], [1.60403358E12, 84996.5], [1.60403196E12, 122046.0], [1.60403376E12, 84885.0], [1.60403154E12, 162571.0], [1.60403316E12, 84541.0], [1.604034E12, 88969.0], [1.60403118E12, 1248.5], [1.60403178E12, 36432.0], [1.60403298E12, 82505.0], [1.60403136E12, 87380.0], [1.60403238E12, 1833.0], [1.604031E12, 526.0], [1.60403262E12, 787.5], [1.6040328E12, 610.0], [1.60403382E12, 1212.0], [1.6040322E12, 570.0], [1.60403304E12, 870.0], [1.60403082E12, 1235.0], [1.60403244E12, 85907.0], [1.60403406E12, 208.5], [1.60403202E12, 1055.0], [1.60403364E12, 7785.5], [1.60403226E12, 165.0], [1.60403166E12, 92724.0], [1.60403388E12, 1080.0], [1.60403346E12, 7631.5], [1.60403184E12, 86672.5], [1.60403286E12, 747.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040343E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 85296.0, "series": [{"data": [[2.0, 5262.0], [32.0, 109.5], [34.0, 158.5], [46.0, 94.0], [3.0, 1697.0], [60.0, 29.5], [4.0, 1210.5], [5.0, 1274.5], [6.0, 1047.0], [7.0, 1127.0], [8.0, 1069.0], [9.0, 821.0], [10.0, 836.0], [11.0, 793.0], [12.0, 726.5], [13.0, 791.5], [14.0, 558.5], [15.0, 337.5], [1.0, 85296.0], [16.0, 372.0], [17.0, 220.5], [18.0, 427.5], [19.0, 215.0], [20.0, 540.0], [21.0, 336.0], [22.0, 146.5], [23.0, 221.5], [24.0, 28.0], [25.0, 35.0], [26.0, 135.0], [27.0, 27.0], [29.0, 125.0], [30.0, 57.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 85295.0, "series": [{"data": [[2.0, 5257.0], [32.0, 109.5], [34.0, 158.5], [46.0, 94.0], [3.0, 1691.5], [60.0, 29.5], [4.0, 1192.5], [5.0, 1242.0], [6.0, 1045.5], [7.0, 1113.5], [8.0, 1060.5], [9.0, 810.0], [10.0, 834.5], [11.0, 790.0], [12.0, 715.0], [13.0, 791.5], [14.0, 549.0], [15.0, 337.5], [1.0, 85295.0], [16.0, 369.5], [17.0, 220.5], [18.0, 424.5], [19.0, 214.0], [20.0, 540.0], [21.0, 334.0], [22.0, 146.0], [23.0, 220.0], [24.0, 28.0], [25.0, 35.0], [26.0, 134.5], [27.0, 27.0], [29.0, 125.0], [30.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60403082E12, "maxY": 10.933333333333334, "series": [{"data": [[1.60403148E12, 0.1], [1.6040337E12, 0.2833333333333333], [1.60403208E12, 0.16666666666666666], [1.6040331E12, 0.15], [1.60403328E12, 0.1], [1.60403106E12, 10.233333333333333], [1.60403268E12, 8.133333333333333], [1.60403352E12, 0.18333333333333332], [1.6040313E12, 0.16666666666666666], [1.60403292E12, 7.2], [1.6040325E12, 0.6666666666666666], [1.60403088E12, 5.033333333333333], [1.6040319E12, 0.1], [1.60403412E12, 0.36666666666666664], [1.60403274E12, 1.8666666666666667], [1.60403112E12, 1.8666666666666667], [1.60403214E12, 0.2833333333333333], [1.60403172E12, 0.31666666666666665], [1.60403394E12, 0.08333333333333333], [1.60403232E12, 0.5166666666666667], [1.60403334E12, 0.15], [1.60403256E12, 1.5166666666666666], [1.60403418E12, 6.816666666666666], [1.60403358E12, 0.06666666666666667], [1.60403196E12, 0.016666666666666666], [1.60403376E12, 0.3], [1.60403154E12, 0.1], [1.60403316E12, 0.11666666666666667], [1.604034E12, 0.016666666666666666], [1.60403118E12, 0.7333333333333333], [1.60403178E12, 0.08333333333333333], [1.60403298E12, 0.21666666666666667], [1.60403136E12, 0.1], [1.60403238E12, 0.48333333333333334], [1.604031E12, 8.983333333333333], [1.60403262E12, 5.1], [1.6040328E12, 4.05], [1.60403382E12, 0.016666666666666666], [1.6040322E12, 0.5], [1.60403304E12, 0.55], [1.60403082E12, 2.283333333333333], [1.60403244E12, 0.11666666666666667], [1.60403406E12, 2.4], [1.60403202E12, 0.31666666666666665], [1.60403364E12, 0.16666666666666666], [1.60403226E12, 0.1], [1.60403166E12, 0.2], [1.60403388E12, 1.7166666666666666], [1.60403346E12, 0.4], [1.60403184E12, 0.13333333333333333], [1.60403286E12, 10.933333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403418E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60403082E12, "maxY": 10.933333333333334, "series": [{"data": [[1.60403148E12, 0.1], [1.6040337E12, 0.2833333333333333], [1.60403208E12, 0.16666666666666666], [1.6040331E12, 0.15], [1.60403328E12, 0.1], [1.60403106E12, 10.233333333333333], [1.60403268E12, 8.133333333333333], [1.6040343E12, 0.06666666666666667], [1.60403352E12, 0.18333333333333332], [1.6040313E12, 0.16666666666666666], [1.60403292E12, 7.2], [1.6040325E12, 0.6666666666666666], [1.60403088E12, 5.033333333333333], [1.6040319E12, 0.1], [1.60403412E12, 0.36666666666666664], [1.60403274E12, 1.8666666666666667], [1.60403112E12, 1.8666666666666667], [1.60403214E12, 0.2833333333333333], [1.60403172E12, 0.31666666666666665], [1.60403394E12, 0.08333333333333333], [1.60403232E12, 0.5166666666666667], [1.60403334E12, 0.15], [1.60403256E12, 1.5166666666666666], [1.60403418E12, 6.916666666666667], [1.60403358E12, 0.06666666666666667], [1.60403196E12, 0.016666666666666666], [1.60403376E12, 0.3], [1.60403154E12, 0.1], [1.60403316E12, 0.11666666666666667], [1.604034E12, 0.016666666666666666], [1.60403118E12, 0.7333333333333333], [1.60403178E12, 0.08333333333333333], [1.60403298E12, 0.21666666666666667], [1.60403136E12, 0.1], [1.60403238E12, 0.48333333333333334], [1.604031E12, 8.983333333333333], [1.60403262E12, 5.1], [1.6040328E12, 4.05], [1.60403382E12, 0.016666666666666666], [1.6040322E12, 0.5], [1.60403304E12, 0.55], [1.60403082E12, 2.1166666666666667], [1.60403244E12, 0.11666666666666667], [1.60403406E12, 2.4], [1.60403202E12, 0.31666666666666665], [1.60403364E12, 0.16666666666666666], [1.60403226E12, 0.1], [1.60403166E12, 0.2], [1.60403388E12, 1.7166666666666666], [1.60403346E12, 0.4], [1.60403184E12, 0.13333333333333333], [1.60403286E12, 10.933333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040343E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60403082E12, "maxY": 10.933333333333334, "series": [{"data": [[1.60403148E12, 0.1], [1.6040337E12, 0.2833333333333333], [1.60403208E12, 0.16666666666666666], [1.6040331E12, 0.15], [1.60403328E12, 0.1], [1.60403106E12, 10.233333333333333], [1.60403268E12, 8.133333333333333], [1.6040343E12, 0.06666666666666667], [1.60403352E12, 0.18333333333333332], [1.6040313E12, 0.16666666666666666], [1.60403292E12, 7.2], [1.6040325E12, 0.6666666666666666], [1.60403088E12, 5.033333333333333], [1.6040319E12, 0.1], [1.60403412E12, 0.36666666666666664], [1.60403274E12, 1.8666666666666667], [1.60403112E12, 1.8666666666666667], [1.60403214E12, 0.2833333333333333], [1.60403172E12, 0.31666666666666665], [1.60403394E12, 0.08333333333333333], [1.60403232E12, 0.5166666666666667], [1.60403334E12, 0.15], [1.60403256E12, 1.5166666666666666], [1.60403418E12, 6.916666666666667], [1.60403358E12, 0.06666666666666667], [1.60403196E12, 0.016666666666666666], [1.60403376E12, 0.3], [1.60403154E12, 0.1], [1.60403316E12, 0.11666666666666667], [1.604034E12, 0.016666666666666666], [1.60403118E12, 0.7333333333333333], [1.60403178E12, 0.08333333333333333], [1.60403298E12, 0.21666666666666667], [1.60403136E12, 0.1], [1.60403238E12, 0.48333333333333334], [1.604031E12, 8.983333333333333], [1.60403262E12, 5.1], [1.6040328E12, 4.05], [1.60403382E12, 0.016666666666666666], [1.6040322E12, 0.5], [1.60403304E12, 0.55], [1.60403082E12, 2.1166666666666667], [1.60403244E12, 0.11666666666666667], [1.60403406E12, 2.4], [1.60403202E12, 0.31666666666666665], [1.60403364E12, 0.16666666666666666], [1.60403226E12, 0.1], [1.60403166E12, 0.2], [1.60403388E12, 1.7166666666666666], [1.60403346E12, 0.4], [1.60403184E12, 0.13333333333333333], [1.60403286E12, 10.933333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040343E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60403082E12, "maxY": 10.933333333333334, "series": [{"data": [[1.60403148E12, 0.1], [1.6040337E12, 0.2833333333333333], [1.60403208E12, 0.16666666666666666], [1.6040331E12, 0.15], [1.60403328E12, 0.1], [1.60403106E12, 10.233333333333333], [1.60403268E12, 8.133333333333333], [1.6040343E12, 0.06666666666666667], [1.60403352E12, 0.18333333333333332], [1.6040313E12, 0.16666666666666666], [1.60403292E12, 7.2], [1.6040325E12, 0.6666666666666666], [1.60403088E12, 5.033333333333333], [1.6040319E12, 0.1], [1.60403412E12, 0.36666666666666664], [1.60403274E12, 1.8666666666666667], [1.60403112E12, 1.8666666666666667], [1.60403214E12, 0.2833333333333333], [1.60403172E12, 0.31666666666666665], [1.60403394E12, 0.08333333333333333], [1.60403232E12, 0.5166666666666667], [1.60403334E12, 0.15], [1.60403256E12, 1.5166666666666666], [1.60403418E12, 6.916666666666667], [1.60403358E12, 0.06666666666666667], [1.60403196E12, 0.016666666666666666], [1.60403376E12, 0.3], [1.60403154E12, 0.1], [1.60403316E12, 0.11666666666666667], [1.604034E12, 0.016666666666666666], [1.60403118E12, 0.7333333333333333], [1.60403178E12, 0.08333333333333333], [1.60403298E12, 0.21666666666666667], [1.60403136E12, 0.1], [1.60403238E12, 0.48333333333333334], [1.604031E12, 8.983333333333333], [1.60403262E12, 5.1], [1.6040328E12, 4.05], [1.60403382E12, 0.016666666666666666], [1.6040322E12, 0.5], [1.60403304E12, 0.55], [1.60403082E12, 2.1166666666666667], [1.60403244E12, 0.11666666666666667], [1.60403406E12, 2.4], [1.60403202E12, 0.31666666666666665], [1.60403364E12, 0.16666666666666666], [1.60403226E12, 0.1], [1.60403166E12, 0.2], [1.60403388E12, 1.7166666666666666], [1.60403346E12, 0.4], [1.60403184E12, 0.13333333333333333], [1.60403286E12, 10.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040343E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

