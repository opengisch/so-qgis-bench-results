/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 191.0, "minX": 0.0, "maxY": 363374.0, "series": [{"data": [[0.0, 191.0], [0.1, 196.0], [0.2, 198.0], [0.3, 202.0], [0.4, 204.0], [0.5, 205.0], [0.6, 207.0], [0.7, 208.0], [0.8, 209.0], [0.9, 210.0], [1.0, 211.0], [1.1, 212.0], [1.2, 213.0], [1.3, 214.0], [1.4, 215.0], [1.5, 216.0], [1.6, 217.0], [1.7, 217.0], [1.8, 218.0], [1.9, 219.0], [2.0, 220.0], [2.1, 220.0], [2.2, 221.0], [2.3, 222.0], [2.4, 223.0], [2.5, 223.0], [2.6, 224.0], [2.7, 224.0], [2.8, 225.0], [2.9, 225.0], [3.0, 226.0], [3.1, 226.0], [3.2, 227.0], [3.3, 227.0], [3.4, 227.0], [3.5, 228.0], [3.6, 228.0], [3.7, 228.0], [3.8, 229.0], [3.9, 229.0], [4.0, 230.0], [4.1, 230.0], [4.2, 230.0], [4.3, 231.0], [4.4, 231.0], [4.5, 231.0], [4.6, 232.0], [4.7, 233.0], [4.8, 233.0], [4.9, 234.0], [5.0, 234.0], [5.1, 235.0], [5.2, 235.0], [5.3, 236.0], [5.4, 237.0], [5.5, 238.0], [5.6, 238.0], [5.7, 238.0], [5.8, 239.0], [5.9, 239.0], [6.0, 240.0], [6.1, 240.0], [6.2, 240.0], [6.3, 241.0], [6.4, 241.0], [6.5, 242.0], [6.6, 242.0], [6.7, 242.0], [6.8, 243.0], [6.9, 243.0], [7.0, 244.0], [7.1, 245.0], [7.2, 246.0], [7.3, 246.0], [7.4, 247.0], [7.5, 247.0], [7.6, 248.0], [7.7, 248.0], [7.8, 249.0], [7.9, 249.0], [8.0, 249.0], [8.1, 250.0], [8.2, 250.0], [8.3, 250.0], [8.4, 251.0], [8.5, 252.0], [8.6, 253.0], [8.7, 253.0], [8.8, 254.0], [8.9, 255.0], [9.0, 256.0], [9.1, 256.0], [9.2, 257.0], [9.3, 257.0], [9.4, 258.0], [9.5, 259.0], [9.6, 260.0], [9.7, 261.0], [9.8, 261.0], [9.9, 262.0], [10.0, 264.0], [10.1, 265.0], [10.2, 266.0], [10.3, 269.0], [10.4, 271.0], [10.5, 272.0], [10.6, 274.0], [10.7, 276.0], [10.8, 277.0], [10.9, 278.0], [11.0, 279.0], [11.1, 281.0], [11.2, 281.0], [11.3, 283.0], [11.4, 284.0], [11.5, 285.0], [11.6, 286.0], [11.7, 287.0], [11.8, 288.0], [11.9, 288.0], [12.0, 289.0], [12.1, 290.0], [12.2, 292.0], [12.3, 292.0], [12.4, 293.0], [12.5, 294.0], [12.6, 295.0], [12.7, 296.0], [12.8, 297.0], [12.9, 298.0], [13.0, 298.0], [13.1, 300.0], [13.2, 301.0], [13.3, 303.0], [13.4, 304.0], [13.5, 304.0], [13.6, 305.0], [13.7, 306.0], [13.8, 307.0], [13.9, 308.0], [14.0, 309.0], [14.1, 310.0], [14.2, 311.0], [14.3, 312.0], [14.4, 313.0], [14.5, 314.0], [14.6, 314.0], [14.7, 315.0], [14.8, 316.0], [14.9, 317.0], [15.0, 318.0], [15.1, 319.0], [15.2, 319.0], [15.3, 321.0], [15.4, 322.0], [15.5, 322.0], [15.6, 323.0], [15.7, 324.0], [15.8, 324.0], [15.9, 324.0], [16.0, 325.0], [16.1, 326.0], [16.2, 326.0], [16.3, 327.0], [16.4, 327.0], [16.5, 328.0], [16.6, 328.0], [16.7, 328.0], [16.8, 328.0], [16.9, 329.0], [17.0, 330.0], [17.1, 330.0], [17.2, 331.0], [17.3, 332.0], [17.4, 332.0], [17.5, 332.0], [17.6, 333.0], [17.7, 333.0], [17.8, 334.0], [17.9, 334.0], [18.0, 335.0], [18.1, 335.0], [18.2, 335.0], [18.3, 335.0], [18.4, 336.0], [18.5, 336.0], [18.6, 337.0], [18.7, 337.0], [18.8, 338.0], [18.9, 338.0], [19.0, 339.0], [19.1, 339.0], [19.2, 339.0], [19.3, 340.0], [19.4, 340.0], [19.5, 341.0], [19.6, 341.0], [19.7, 342.0], [19.8, 343.0], [19.9, 343.0], [20.0, 344.0], [20.1, 344.0], [20.2, 345.0], [20.3, 346.0], [20.4, 346.0], [20.5, 347.0], [20.6, 348.0], [20.7, 349.0], [20.8, 349.0], [20.9, 349.0], [21.0, 350.0], [21.1, 350.0], [21.2, 351.0], [21.3, 351.0], [21.4, 352.0], [21.5, 352.0], [21.6, 354.0], [21.7, 354.0], [21.8, 355.0], [21.9, 355.0], [22.0, 356.0], [22.1, 356.0], [22.2, 357.0], [22.3, 358.0], [22.4, 359.0], [22.5, 360.0], [22.6, 360.0], [22.7, 361.0], [22.8, 361.0], [22.9, 362.0], [23.0, 363.0], [23.1, 364.0], [23.2, 364.0], [23.3, 365.0], [23.4, 366.0], [23.5, 367.0], [23.6, 368.0], [23.7, 369.0], [23.8, 370.0], [23.9, 370.0], [24.0, 371.0], [24.1, 371.0], [24.2, 372.0], [24.3, 373.0], [24.4, 374.0], [24.5, 376.0], [24.6, 377.0], [24.7, 377.0], [24.8, 379.0], [24.9, 380.0], [25.0, 381.0], [25.1, 381.0], [25.2, 382.0], [25.3, 383.0], [25.4, 384.0], [25.5, 385.0], [25.6, 386.0], [25.7, 386.0], [25.8, 387.0], [25.9, 388.0], [26.0, 388.0], [26.1, 389.0], [26.2, 389.0], [26.3, 391.0], [26.4, 391.0], [26.5, 392.0], [26.6, 392.0], [26.7, 393.0], [26.8, 394.0], [26.9, 396.0], [27.0, 396.0], [27.1, 398.0], [27.2, 399.0], [27.3, 399.0], [27.4, 400.0], [27.5, 402.0], [27.6, 404.0], [27.7, 405.0], [27.8, 406.0], [27.9, 407.0], [28.0, 408.0], [28.1, 409.0], [28.2, 410.0], [28.3, 411.0], [28.4, 412.0], [28.5, 413.0], [28.6, 417.0], [28.7, 417.0], [28.8, 418.0], [28.9, 419.0], [29.0, 421.0], [29.1, 421.0], [29.2, 422.0], [29.3, 424.0], [29.4, 425.0], [29.5, 427.0], [29.6, 428.0], [29.7, 429.0], [29.8, 429.0], [29.9, 430.0], [30.0, 432.0], [30.1, 433.0], [30.2, 434.0], [30.3, 435.0], [30.4, 436.0], [30.5, 437.0], [30.6, 438.0], [30.7, 439.0], [30.8, 440.0], [30.9, 442.0], [31.0, 442.0], [31.1, 444.0], [31.2, 445.0], [31.3, 447.0], [31.4, 447.0], [31.5, 448.0], [31.6, 451.0], [31.7, 452.0], [31.8, 453.0], [31.9, 455.0], [32.0, 456.0], [32.1, 457.0], [32.2, 460.0], [32.3, 462.0], [32.4, 463.0], [32.5, 464.0], [32.6, 465.0], [32.7, 466.0], [32.8, 466.0], [32.9, 467.0], [33.0, 468.0], [33.1, 470.0], [33.2, 471.0], [33.3, 473.0], [33.4, 474.0], [33.5, 475.0], [33.6, 477.0], [33.7, 478.0], [33.8, 479.0], [33.9, 480.0], [34.0, 481.0], [34.1, 482.0], [34.2, 483.0], [34.3, 485.0], [34.4, 487.0], [34.5, 487.0], [34.6, 488.0], [34.7, 488.0], [34.8, 490.0], [34.9, 490.0], [35.0, 492.0], [35.1, 494.0], [35.2, 496.0], [35.3, 496.0], [35.4, 498.0], [35.5, 500.0], [35.6, 501.0], [35.7, 503.0], [35.8, 507.0], [35.9, 508.0], [36.0, 510.0], [36.1, 511.0], [36.2, 513.0], [36.3, 514.0], [36.4, 515.0], [36.5, 517.0], [36.6, 518.0], [36.7, 520.0], [36.8, 521.0], [36.9, 522.0], [37.0, 524.0], [37.1, 526.0], [37.2, 527.0], [37.3, 528.0], [37.4, 530.0], [37.5, 532.0], [37.6, 533.0], [37.7, 535.0], [37.8, 536.0], [37.9, 538.0], [38.0, 539.0], [38.1, 540.0], [38.2, 541.0], [38.3, 543.0], [38.4, 544.0], [38.5, 546.0], [38.6, 547.0], [38.7, 548.0], [38.8, 550.0], [38.9, 551.0], [39.0, 552.0], [39.1, 553.0], [39.2, 554.0], [39.3, 554.0], [39.4, 555.0], [39.5, 556.0], [39.6, 558.0], [39.7, 559.0], [39.8, 560.0], [39.9, 561.0], [40.0, 562.0], [40.1, 564.0], [40.2, 565.0], [40.3, 566.0], [40.4, 567.0], [40.5, 568.0], [40.6, 570.0], [40.7, 571.0], [40.8, 573.0], [40.9, 574.0], [41.0, 576.0], [41.1, 577.0], [41.2, 578.0], [41.3, 579.0], [41.4, 581.0], [41.5, 582.0], [41.6, 583.0], [41.7, 585.0], [41.8, 586.0], [41.9, 587.0], [42.0, 588.0], [42.1, 589.0], [42.2, 590.0], [42.3, 592.0], [42.4, 593.0], [42.5, 594.0], [42.6, 596.0], [42.7, 598.0], [42.8, 599.0], [42.9, 601.0], [43.0, 604.0], [43.1, 605.0], [43.2, 607.0], [43.3, 610.0], [43.4, 611.0], [43.5, 612.0], [43.6, 615.0], [43.7, 616.0], [43.8, 618.0], [43.9, 619.0], [44.0, 620.0], [44.1, 622.0], [44.2, 623.0], [44.3, 624.0], [44.4, 626.0], [44.5, 628.0], [44.6, 630.0], [44.7, 631.0], [44.8, 633.0], [44.9, 633.0], [45.0, 635.0], [45.1, 636.0], [45.2, 638.0], [45.3, 639.0], [45.4, 641.0], [45.5, 643.0], [45.6, 645.0], [45.7, 646.0], [45.8, 648.0], [45.9, 649.0], [46.0, 650.0], [46.1, 652.0], [46.2, 653.0], [46.3, 655.0], [46.4, 658.0], [46.5, 659.0], [46.6, 659.0], [46.7, 661.0], [46.8, 664.0], [46.9, 665.0], [47.0, 666.0], [47.1, 670.0], [47.2, 671.0], [47.3, 672.0], [47.4, 673.0], [47.5, 675.0], [47.6, 676.0], [47.7, 678.0], [47.8, 678.0], [47.9, 682.0], [48.0, 683.0], [48.1, 684.0], [48.2, 685.0], [48.3, 686.0], [48.4, 689.0], [48.5, 693.0], [48.6, 696.0], [48.7, 697.0], [48.8, 699.0], [48.9, 704.0], [49.0, 708.0], [49.1, 709.0], [49.2, 711.0], [49.3, 712.0], [49.4, 714.0], [49.5, 715.0], [49.6, 718.0], [49.7, 720.0], [49.8, 721.0], [49.9, 722.0], [50.0, 724.0], [50.1, 725.0], [50.2, 728.0], [50.3, 730.0], [50.4, 732.0], [50.5, 734.0], [50.6, 737.0], [50.7, 738.0], [50.8, 739.0], [50.9, 743.0], [51.0, 745.0], [51.1, 747.0], [51.2, 750.0], [51.3, 752.0], [51.4, 754.0], [51.5, 756.0], [51.6, 758.0], [51.7, 760.0], [51.8, 761.0], [51.9, 763.0], [52.0, 765.0], [52.1, 767.0], [52.2, 769.0], [52.3, 772.0], [52.4, 774.0], [52.5, 775.0], [52.6, 778.0], [52.7, 780.0], [52.8, 781.0], [52.9, 783.0], [53.0, 786.0], [53.1, 789.0], [53.2, 792.0], [53.3, 794.0], [53.4, 795.0], [53.5, 796.0], [53.6, 799.0], [53.7, 803.0], [53.8, 804.0], [53.9, 805.0], [54.0, 808.0], [54.1, 812.0], [54.2, 815.0], [54.3, 818.0], [54.4, 819.0], [54.5, 824.0], [54.6, 827.0], [54.7, 830.0], [54.8, 835.0], [54.9, 836.0], [55.0, 837.0], [55.1, 838.0], [55.2, 841.0], [55.3, 844.0], [55.4, 847.0], [55.5, 848.0], [55.6, 851.0], [55.7, 854.0], [55.8, 856.0], [55.9, 857.0], [56.0, 863.0], [56.1, 864.0], [56.2, 867.0], [56.3, 870.0], [56.4, 871.0], [56.5, 876.0], [56.6, 879.0], [56.7, 880.0], [56.8, 883.0], [56.9, 886.0], [57.0, 888.0], [57.1, 892.0], [57.2, 895.0], [57.3, 897.0], [57.4, 902.0], [57.5, 905.0], [57.6, 910.0], [57.7, 912.0], [57.8, 915.0], [57.9, 917.0], [58.0, 921.0], [58.1, 922.0], [58.2, 924.0], [58.3, 926.0], [58.4, 930.0], [58.5, 934.0], [58.6, 936.0], [58.7, 937.0], [58.8, 938.0], [58.9, 942.0], [59.0, 946.0], [59.1, 950.0], [59.2, 953.0], [59.3, 955.0], [59.4, 956.0], [59.5, 959.0], [59.6, 962.0], [59.7, 969.0], [59.8, 971.0], [59.9, 971.0], [60.0, 975.0], [60.1, 979.0], [60.2, 981.0], [60.3, 984.0], [60.4, 986.0], [60.5, 987.0], [60.6, 992.0], [60.7, 999.0], [60.8, 1001.0], [60.9, 1002.0], [61.0, 1005.0], [61.1, 1009.0], [61.2, 1011.0], [61.3, 1013.0], [61.4, 1014.0], [61.5, 1017.0], [61.6, 1020.0], [61.7, 1022.0], [61.8, 1024.0], [61.9, 1025.0], [62.0, 1026.0], [62.1, 1028.0], [62.2, 1034.0], [62.3, 1037.0], [62.4, 1041.0], [62.5, 1042.0], [62.6, 1047.0], [62.7, 1049.0], [62.8, 1051.0], [62.9, 1053.0], [63.0, 1055.0], [63.1, 1058.0], [63.2, 1061.0], [63.3, 1064.0], [63.4, 1068.0], [63.5, 1070.0], [63.6, 1073.0], [63.7, 1075.0], [63.8, 1076.0], [63.9, 1077.0], [64.0, 1080.0], [64.1, 1084.0], [64.2, 1088.0], [64.3, 1093.0], [64.4, 1095.0], [64.5, 1098.0], [64.6, 1101.0], [64.7, 1102.0], [64.8, 1107.0], [64.9, 1113.0], [65.0, 1116.0], [65.1, 1119.0], [65.2, 1122.0], [65.3, 1130.0], [65.4, 1132.0], [65.5, 1137.0], [65.6, 1141.0], [65.7, 1146.0], [65.8, 1149.0], [65.9, 1152.0], [66.0, 1153.0], [66.1, 1159.0], [66.2, 1162.0], [66.3, 1163.0], [66.4, 1166.0], [66.5, 1170.0], [66.6, 1173.0], [66.7, 1177.0], [66.8, 1181.0], [66.9, 1184.0], [67.0, 1186.0], [67.1, 1190.0], [67.2, 1196.0], [67.3, 1199.0], [67.4, 1202.0], [67.5, 1206.0], [67.6, 1207.0], [67.7, 1212.0], [67.8, 1215.0], [67.9, 1222.0], [68.0, 1225.0], [68.1, 1229.0], [68.2, 1231.0], [68.3, 1238.0], [68.4, 1243.0], [68.5, 1248.0], [68.6, 1253.0], [68.7, 1255.0], [68.8, 1258.0], [68.9, 1261.0], [69.0, 1265.0], [69.1, 1267.0], [69.2, 1273.0], [69.3, 1280.0], [69.4, 1283.0], [69.5, 1285.0], [69.6, 1288.0], [69.7, 1291.0], [69.8, 1292.0], [69.9, 1295.0], [70.0, 1300.0], [70.1, 1303.0], [70.2, 1305.0], [70.3, 1307.0], [70.4, 1313.0], [70.5, 1318.0], [70.6, 1326.0], [70.7, 1332.0], [70.8, 1334.0], [70.9, 1337.0], [71.0, 1341.0], [71.1, 1347.0], [71.2, 1350.0], [71.3, 1354.0], [71.4, 1357.0], [71.5, 1361.0], [71.6, 1366.0], [71.7, 1369.0], [71.8, 1372.0], [71.9, 1380.0], [72.0, 1383.0], [72.1, 1389.0], [72.2, 1391.0], [72.3, 1393.0], [72.4, 1401.0], [72.5, 1405.0], [72.6, 1408.0], [72.7, 1413.0], [72.8, 1419.0], [72.9, 1422.0], [73.0, 1424.0], [73.1, 1428.0], [73.2, 1430.0], [73.3, 1433.0], [73.4, 1441.0], [73.5, 1448.0], [73.6, 1452.0], [73.7, 1455.0], [73.8, 1458.0], [73.9, 1463.0], [74.0, 1469.0], [74.1, 1477.0], [74.2, 1480.0], [74.3, 1485.0], [74.4, 1489.0], [74.5, 1497.0], [74.6, 1503.0], [74.7, 1507.0], [74.8, 1509.0], [74.9, 1515.0], [75.0, 1519.0], [75.1, 1524.0], [75.2, 1529.0], [75.3, 1535.0], [75.4, 1541.0], [75.5, 1547.0], [75.6, 1548.0], [75.7, 1558.0], [75.8, 1564.0], [75.9, 1572.0], [76.0, 1579.0], [76.1, 1588.0], [76.2, 1596.0], [76.3, 1601.0], [76.4, 1606.0], [76.5, 1610.0], [76.6, 1615.0], [76.7, 1622.0], [76.8, 1628.0], [76.9, 1635.0], [77.0, 1639.0], [77.1, 1648.0], [77.2, 1653.0], [77.3, 1658.0], [77.4, 1666.0], [77.5, 1669.0], [77.6, 1674.0], [77.7, 1678.0], [77.8, 1683.0], [77.9, 1688.0], [78.0, 1700.0], [78.1, 1708.0], [78.2, 1712.0], [78.3, 1718.0], [78.4, 1728.0], [78.5, 1732.0], [78.6, 1733.0], [78.7, 1737.0], [78.8, 1741.0], [78.9, 1750.0], [79.0, 1758.0], [79.1, 1771.0], [79.2, 1777.0], [79.3, 1782.0], [79.4, 1789.0], [79.5, 1794.0], [79.6, 1806.0], [79.7, 1814.0], [79.8, 1822.0], [79.9, 1833.0], [80.0, 1840.0], [80.1, 1848.0], [80.2, 1858.0], [80.3, 1866.0], [80.4, 1871.0], [80.5, 1885.0], [80.6, 1890.0], [80.7, 1897.0], [80.8, 1901.0], [80.9, 1915.0], [81.0, 1921.0], [81.1, 1926.0], [81.2, 1932.0], [81.3, 1942.0], [81.4, 1957.0], [81.5, 1973.0], [81.6, 1988.0], [81.7, 1993.0], [81.8, 2006.0], [81.9, 2016.0], [82.0, 2026.0], [82.1, 2031.0], [82.2, 2043.0], [82.3, 2053.0], [82.4, 2059.0], [82.5, 2067.0], [82.6, 2082.0], [82.7, 2098.0], [82.8, 2105.0], [82.9, 2111.0], [83.0, 2116.0], [83.1, 2120.0], [83.2, 2130.0], [83.3, 2133.0], [83.4, 2137.0], [83.5, 2164.0], [83.6, 2168.0], [83.7, 2187.0], [83.8, 2195.0], [83.9, 2201.0], [84.0, 2223.0], [84.1, 2230.0], [84.2, 2241.0], [84.3, 2252.0], [84.4, 2268.0], [84.5, 2276.0], [84.6, 2281.0], [84.7, 2291.0], [84.8, 2308.0], [84.9, 2318.0], [85.0, 2328.0], [85.1, 2337.0], [85.2, 2353.0], [85.3, 2359.0], [85.4, 2371.0], [85.5, 2386.0], [85.6, 2400.0], [85.7, 2410.0], [85.8, 2421.0], [85.9, 2432.0], [86.0, 2445.0], [86.1, 2465.0], [86.2, 2469.0], [86.3, 2489.0], [86.4, 2504.0], [86.5, 2514.0], [86.6, 2523.0], [86.7, 2541.0], [86.8, 2559.0], [86.9, 2580.0], [87.0, 2590.0], [87.1, 2605.0], [87.2, 2622.0], [87.3, 2644.0], [87.4, 2672.0], [87.5, 2688.0], [87.6, 2704.0], [87.7, 2718.0], [87.8, 2728.0], [87.9, 2735.0], [88.0, 2752.0], [88.1, 2774.0], [88.2, 2785.0], [88.3, 2801.0], [88.4, 2822.0], [88.5, 2851.0], [88.6, 2873.0], [88.7, 2891.0], [88.8, 2913.0], [88.9, 2925.0], [89.0, 2959.0], [89.1, 2978.0], [89.2, 2985.0], [89.3, 3000.0], [89.4, 3038.0], [89.5, 3057.0], [89.6, 3080.0], [89.7, 3100.0], [89.8, 3133.0], [89.9, 3177.0], [90.0, 3202.0], [90.1, 3241.0], [90.2, 3258.0], [90.3, 3282.0], [90.4, 3346.0], [90.5, 3373.0], [90.6, 3389.0], [90.7, 3416.0], [90.8, 3440.0], [90.9, 3472.0], [91.0, 3496.0], [91.1, 3598.0], [91.2, 3636.0], [91.3, 3674.0], [91.4, 3692.0], [91.5, 3744.0], [91.6, 3825.0], [91.7, 3867.0], [91.8, 3932.0], [91.9, 3980.0], [92.0, 4013.0], [92.1, 4054.0], [92.2, 4104.0], [92.3, 4122.0], [92.4, 4187.0], [92.5, 4266.0], [92.6, 4368.0], [92.7, 4478.0], [92.8, 4561.0], [92.9, 4609.0], [93.0, 4661.0], [93.1, 4707.0], [93.2, 4883.0], [93.3, 4992.0], [93.4, 5064.0], [93.5, 5225.0], [93.6, 5340.0], [93.7, 5591.0], [93.8, 5799.0], [93.9, 5984.0], [94.0, 6270.0], [94.1, 6615.0], [94.2, 6881.0], [94.3, 7471.0], [94.4, 8485.0], [94.5, 10887.0], [94.6, 12892.0], [94.7, 20665.0], [94.8, 30167.0], [94.9, 39985.0], [95.0, 50124.0], [95.1, 56588.0], [95.2, 59848.0], [95.3, 63117.0], [95.4, 64999.0], [95.5, 66984.0], [95.6, 68078.0], [95.7, 68663.0], [95.8, 69248.0], [95.9, 69472.0], [96.0, 69793.0], [96.1, 70297.0], [96.2, 70628.0], [96.3, 70732.0], [96.4, 70951.0], [96.5, 71018.0], [96.6, 71242.0], [96.7, 71328.0], [96.8, 71447.0], [96.9, 71548.0], [97.0, 71647.0], [97.1, 71724.0], [97.2, 71845.0], [97.3, 71955.0], [97.4, 72126.0], [97.5, 72281.0], [97.6, 72596.0], [97.7, 72806.0], [97.8, 72873.0], [97.9, 72975.0], [98.0, 73175.0], [98.1, 73749.0], [98.2, 74705.0], [98.3, 79427.0], [98.4, 82840.0], [98.5, 87621.0], [98.6, 88945.0], [98.7, 89762.0], [98.8, 94084.0], [98.9, 118245.0], [99.0, 136117.0], [99.1, 137201.0], [99.2, 138761.0], [99.3, 139138.0], [99.4, 139912.0], [99.5, 143969.0], [99.6, 155410.0], [99.7, 177294.0], [99.8, 267313.0], [99.9, 279801.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 742.0, "series": [{"data": [[136800.0, 1.0], [144800.0, 1.0], [156000.0, 1.0], [273600.0, 1.0], [137700.0, 1.0], [136100.0, 1.0], [340300.0, 1.0], [68300.0, 1.0], [67500.0, 2.0], [71500.0, 7.0], [70700.0, 4.0], [73100.0, 2.0], [69900.0, 1.0], [74700.0, 2.0], [73900.0, 1.0], [83500.0, 1.0], [90700.0, 1.0], [127500.0, 1.0], [137000.0, 1.0], [100.0, 12.0], [50100.0, 1.0], [200.0, 664.0], [208300.0, 1.0], [54900.0, 1.0], [56500.0, 1.0], [62100.0, 1.0], [64900.0, 1.0], [68200.0, 2.0], [72200.0, 5.0], [73000.0, 3.0], [70600.0, 5.0], [69800.0, 1.0], [71400.0, 3.0], [300.0, 742.0], [74600.0, 1.0], [79400.0, 1.0], [89000.0, 1.0], [94600.0, 1.0], [101800.0, 1.0], [400.0, 424.0], [500.0, 382.0], [127400.0, 1.0], [137200.0, 1.0], [140400.0, 1.0], [600.0, 310.0], [700.0, 248.0], [172400.0, 1.0], [177200.0, 1.0], [800.0, 192.0], [900.0, 178.0], [1000.0, 197.0], [1100.0, 145.0], [1200.0, 138.0], [1300.0, 123.0], [1400.0, 115.0], [1500.0, 89.0], [1600.0, 89.0], [1700.0, 81.0], [1800.0, 63.0], [1900.0, 50.0], [2000.0, 52.0], [2100.0, 58.0], [2200.0, 47.0], [2300.0, 43.0], [2400.0, 42.0], [2500.0, 35.0], [2600.0, 27.0], [2700.0, 35.0], [2800.0, 24.0], [2900.0, 29.0], [3000.0, 21.0], [3100.0, 16.0], [3300.0, 17.0], [3200.0, 16.0], [3400.0, 19.0], [3500.0, 6.0], [3700.0, 6.0], [3600.0, 15.0], [3800.0, 11.0], [3900.0, 13.0], [4000.0, 11.0], [4100.0, 11.0], [4300.0, 8.0], [4200.0, 5.0], [67300.0, 2.0], [68900.0, 1.0], [71300.0, 6.0], [4500.0, 8.0], [4600.0, 9.0], [4400.0, 4.0], [69700.0, 2.0], [70500.0, 1.0], [72900.0, 4.0], [73700.0, 1.0], [72100.0, 1.0], [76900.0, 1.0], [4800.0, 3.0], [4700.0, 5.0], [4900.0, 5.0], [5000.0, 7.0], [5100.0, 2.0], [5300.0, 3.0], [5200.0, 4.0], [5500.0, 3.0], [88100.0, 2.0], [88900.0, 1.0], [89700.0, 1.0], [5600.0, 1.0], [5400.0, 2.0], [92100.0, 1.0], [5700.0, 4.0], [6000.0, 1.0], [5900.0, 6.0], [6100.0, 1.0], [6200.0, 3.0], [6300.0, 2.0], [99300.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6700.0, 2.0], [6800.0, 2.0], [6900.0, 2.0], [7300.0, 1.0], [7400.0, 2.0], [7200.0, 1.0], [7700.0, 1.0], [7900.0, 1.0], [128900.0, 1.0], [128100.0, 1.0], [8000.0, 1.0], [139000.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [8900.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [153400.0, 1.0], [9900.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11600.0, 1.0], [12200.0, 1.0], [12800.0, 1.0], [14900.0, 1.0], [17400.0, 1.0], [16600.0, 1.0], [294000.0, 1.0], [18200.0, 1.0], [20600.0, 1.0], [22800.0, 1.0], [30600.0, 1.0], [138300.0, 1.0], [136700.0, 1.0], [139900.0, 1.0], [40800.0, 1.0], [171900.0, 1.0], [52400.0, 1.0], [61600.0, 1.0], [63200.0, 1.0], [64800.0, 1.0], [64400.0, 1.0], [65600.0, 2.0], [68800.0, 1.0], [69600.0, 1.0], [68000.0, 1.0], [71200.0, 3.0], [72000.0, 4.0], [72800.0, 8.0], [279800.0, 1.0], [73600.0, 2.0], [70400.0, 1.0], [88800.0, 1.0], [95200.0, 1.0], [124800.0, 1.0], [272900.0, 1.0], [139200.0, 1.0], [195200.0, 1.0], [136900.0, 1.0], [154500.0, 1.0], [245700.0, 1.0], [68700.0, 2.0], [69500.0, 2.0], [71900.0, 4.0], [71100.0, 2.0], [280200.0, 1.0], [72700.0, 2.0], [70300.0, 1.0], [74300.0, 1.0], [83900.0, 1.0], [84700.0, 1.0], [89500.0, 1.0], [90300.0, 1.0], [142600.0, 1.0], [155400.0, 1.0], [272400.0, 1.0], [34700.0, 1.0], [138700.0, 1.0], [39900.0, 1.0], [41100.0, 1.0], [51100.0, 1.0], [199500.0, 1.0], [57500.0, 1.0], [59900.0, 1.0], [63100.0, 1.0], [63500.0, 1.0], [69400.0, 1.0], [274200.0, 1.0], [68600.0, 1.0], [72600.0, 1.0], [71800.0, 3.0], [71000.0, 4.0], [70200.0, 2.0], [87000.0, 1.0], [118200.0, 1.0], [267300.0, 1.0], [138000.0, 1.0], [139600.0, 2.0], [142800.0, 1.0], [363300.0, 1.0], [138900.0, 3.0], [137300.0, 1.0], [142100.0, 1.0], [154900.0, 1.0], [69300.0, 1.0], [66900.0, 1.0], [70900.0, 6.0], [73300.0, 2.0], [72500.0, 4.0], [71700.0, 6.0], [70100.0, 1.0], [79700.0, 2.0], [89300.0, 1.0], [345000.0, 1.0], [91700.0, 1.0], [139800.0, 1.0], [167000.0, 1.0], [24300.0, 1.0], [26900.0, 1.0], [27900.0, 1.0], [29100.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [32100.0, 1.0], [139100.0, 1.0], [140700.0, 1.0], [143900.0, 1.0], [41400.0, 2.0], [56200.0, 1.0], [56600.0, 2.0], [57800.0, 1.0], [59800.0, 1.0], [62200.0, 1.0], [62600.0, 1.0], [65000.0, 1.0], [69200.0, 5.0], [66000.0, 1.0], [68400.0, 1.0], [72400.0, 2.0], [71600.0, 6.0], [70800.0, 1.0], [74000.0, 1.0], [74800.0, 2.0], [81200.0, 1.0], [79600.0, 1.0], [86000.0, 1.0], [82800.0, 1.0], [87600.0, 2.0], [89200.0, 1.0], [94000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 363300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1320.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2025.0, "series": [{"data": [[0.0, 1845.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2025.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1320.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.25, "minX": 1.6023891E12, "maxY": 10.0, "series": [{"data": [[1.60238922E12, 10.0], [1.60239144E12, 10.0], [1.60239222E12, 3.25], [1.60238952E12, 10.0], [1.60239114E12, 10.0], [1.60239084E12, 10.0], [1.60239054E12, 10.0], [1.60239072E12, 10.0], [1.60239042E12, 10.0], [1.60239012E12, 10.0], [1.60239174E12, 10.0], [1.60238982E12, 10.0], [1.60239096E12, 10.0], [1.60239036E12, 10.0], [1.60239006E12, 10.0], [1.60239024E12, 10.0], [1.60239186E12, 10.0], [1.60238994E12, 10.0], [1.60238934E12, 10.0], [1.60239156E12, 10.0], [1.6023921E12, 10.0], [1.60238964E12, 10.0], [1.60239048E12, 10.0], [1.60239018E12, 10.0], [1.6023918E12, 10.0], [1.60238988E12, 10.0], [1.6023915E12, 10.0], [1.60239216E12, 9.923076923076923], [1.60238946E12, 10.0], [1.60239168E12, 10.0], [1.60239198E12, 10.0], [1.60238976E12, 10.0], [1.60239108E12, 10.0], [1.60238916E12, 10.0], [1.60239078E12, 10.0], [1.6023897E12, 10.0], [1.60239E12, 10.0], [1.60239162E12, 10.0], [1.60239204E12, 10.0], [1.6023891E12, 10.0], [1.60239132E12, 10.0], [1.6023894E12, 10.0], [1.60239102E12, 10.0], [1.6023912E12, 10.0], [1.60238928E12, 10.0], [1.6023909E12, 10.0], [1.6023906E12, 10.0], [1.6023903E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60239222E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 364.0, "minX": 1.0, "maxY": 68784.66666666667, "series": [{"data": [[8.0, 364.0], [4.0, 68784.66666666667], [1.0, 68733.0], [10.0, 5874.625434195313], [5.0, 2889.0], [6.0, 2000.0], [7.0, 2258.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992100192678226, 5920.020616570349]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.85, "minX": 1.6023891E12, "maxY": 3168934.15, "series": [{"data": [[1.60238922E12, 109023.6], [1.60239144E12, 23548.666666666668], [1.60239222E12, 6084.416666666667], [1.60238952E12, 25974.816666666666], [1.60239114E12, 29325.766666666666], [1.60239084E12, 45585.76666666667], [1.60239054E12, 50268.3], [1.60239072E12, 2435591.0166666666], [1.60239042E12, 173181.61666666667], [1.60239012E12, 299.95], [1.60239174E12, 23159.966666666667], [1.60238982E12, 1884.7666666666667], [1.60239096E12, 3111881.45], [1.60239036E12, 27381.883333333335], [1.60239006E12, 695.4833333333333], [1.60239024E12, 35096.316666666666], [1.60239186E12, 143.6], [1.60238994E12, 40273.01666666667], [1.60238934E12, 3168934.15], [1.60239156E12, 6427.866666666667], [1.6023921E12, 1187768.8], [1.60238964E12, 7994.883333333333], [1.60239048E12, 330076.5], [1.60239018E12, 18103.866666666665], [1.6023918E12, 521619.25], [1.60238988E12, 30859.55], [1.6023915E12, 70109.83333333333], [1.60239216E12, 851556.5], [1.60238946E12, 306797.5], [1.60239168E12, 22829.116666666665], [1.60239198E12, 177957.61666666667], [1.60238976E12, 430.98333333333335], [1.60239108E12, 204439.78333333333], [1.60238916E12, 1242368.5333333334], [1.60239078E12, 2201036.066666667], [1.6023897E12, 215.4], [1.60239E12, 18601.266666666666], [1.60239162E12, 60602.46666666667], [1.60239204E12, 215645.76666666666], [1.6023891E12, 973668.55], [1.60239132E12, 1165.8333333333333], [1.6023894E12, 482779.0333333333], [1.60239102E12, 446019.36666666664], [1.6023912E12, 21737.05], [1.60238928E12, 1901307.9333333333], [1.6023909E12, 2144485.6666666665], [1.6023906E12, 318474.36666666664], [1.6023903E12, 28840.383333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60238922E12, 197.0], [1.60239144E12, 133.16666666666666], [1.60239222E12, 31.733333333333334], [1.60238952E12, 39.43333333333333], [1.60239114E12, 39.75], [1.60239084E12, 86.88333333333334], [1.60239054E12, 54.95], [1.60239072E12, 3781.8333333333335], [1.60239042E12, 333.0], [1.60239012E12, 30.55], [1.60239174E12, 110.8], [1.60238982E12, 69.8], [1.60239096E12, 4366.266666666666], [1.60239036E12, 62.88333333333333], [1.60239006E12, 15.9], [1.60239024E12, 139.15], [1.60239186E12, 15.85], [1.60238994E12, 76.45], [1.60238934E12, 4404.25], [1.60239156E12, 38.55], [1.6023921E12, 1992.3666666666666], [1.60238964E12, 71.46666666666667], [1.60239048E12, 499.65], [1.60239018E12, 38.11666666666667], [1.6023918E12, 844.15], [1.60238988E12, 85.58333333333333], [1.6023915E12, 192.06666666666666], [1.60239216E12, 1407.9166666666667], [1.60238946E12, 355.45], [1.60239168E12, 140.85], [1.60239198E12, 431.26666666666665], [1.60238976E12, 47.6], [1.60239108E12, 355.53333333333336], [1.60238916E12, 2048.0833333333335], [1.60239078E12, 3140.383333333333], [1.6023897E12, 23.8], [1.60239E12, 91.58333333333333], [1.60239162E12, 93.6], [1.60239204E12, 728.7833333333333], [1.6023891E12, 1037.65], [1.60239132E12, 79.35], [1.6023894E12, 707.3666666666667], [1.60239102E12, 1051.5666666666666], [1.6023912E12, 47.333333333333336], [1.60238928E12, 4470.45], [1.6023909E12, 4672.55], [1.6023906E12, 1003.0166666666667], [1.6023903E12, 102.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60239222E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 928.9703703703701, "minX": 1.6023891E12, "maxY": 170583.30000000002, "series": [{"data": [[1.60238922E12, 33640.57692307694], [1.60239144E12, 62166.76470588235], [1.60239222E12, 68771.75], [1.60238952E12, 71157.8], [1.60239114E12, 72419.6], [1.60239084E12, 46779.749999999985], [1.60239054E12, 62837.28571428571], [1.60239072E12, 2617.489711934157], [1.60239042E12, 11049.785714285712], [1.60239012E12, 100668.0], [1.60239174E12, 38288.78571428571], [1.60238982E12, 57621.555555555555], [1.60239096E12, 1067.8563829787238], [1.60239036E12, 49807.125], [1.60239006E12, 60995.5], [1.60239024E12, 107387.88888888886], [1.60239186E12, 70257.0], [1.60238994E12, 26966.0], [1.60238934E12, 1076.163410301954], [1.60239156E12, 42923.2], [1.6023921E12, 3716.7686274509842], [1.60238964E12, 117085.44444444444], [1.60239048E12, 15055.904761904763], [1.60239018E12, 57740.4], [1.6023918E12, 9491.60747663551], [1.60238988E12, 135177.7272727273], [1.6023915E12, 25630.680000000004], [1.60239216E12, 1399.5934065934064], [1.60238946E12, 20643.777777777777], [1.60239168E12, 57769.88888888888], [1.60239198E12, 23331.27272727274], [1.60238976E12, 112639.5], [1.60239108E12, 16543.68888888889], [1.60238916E12, 1200.989361702127], [1.60239078E12, 1176.9221698113224], [1.6023897E12, 72331.33333333333], [1.60239E12, 37353.416666666664], [1.60239162E12, 35739.833333333336], [1.60239204E12, 7708.638297872339], [1.6023891E12, 1424.792592592592], [1.60239132E12, 170583.30000000002], [1.6023894E12, 1042.4945054945065], [1.60239102E12, 928.9703703703701], [1.6023912E12, 71954.66666666667], [1.60238928E12, 987.1411764705892], [1.6023909E12, 1185.8935483870964], [1.6023906E12, 8376.736434108518], [1.6023903E12, 30798.230769230766]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60239222E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 880.4814814814814, "minX": 1.6023891E12, "maxY": 170583.30000000002, "series": [{"data": [[1.60238922E12, 33588.73076923077], [1.60239144E12, 62166.411764705874], [1.60239222E12, 68771.5], [1.60238952E12, 71155.8], [1.60239114E12, 72387.2], [1.60239084E12, 46745.66666666667], [1.60239054E12, 62780.0], [1.60239072E12, 2580.4938271604924], [1.60239042E12, 11036.452380952385], [1.60239012E12, 100667.75], [1.60239174E12, 38287.28571428571], [1.60238982E12, 57621.333333333336], [1.60239096E12, 1017.1578014184383], [1.60239036E12, 49786.74999999999], [1.60239006E12, 60995.5], [1.60239024E12, 107375.88888888888], [1.60239186E12, 70257.0], [1.60238994E12, 26964.8], [1.60238934E12, 1016.4813499111907], [1.60239156E12, 42922.4], [1.6023921E12, 3676.7450980392136], [1.60238964E12, 117067.55555555556], [1.60239048E12, 15009.444444444443], [1.60239018E12, 57739.4], [1.6023918E12, 9459.663551401867], [1.60238988E12, 135176.9090909091], [1.6023915E12, 25621.399999999998], [1.60239216E12, 1385.9670329670332], [1.60238946E12, 20596.711111111115], [1.60239168E12, 57748.38888888888], [1.60239198E12, 23310.436363636363], [1.60238976E12, 112639.33333333333], [1.60239108E12, 16493.688888888883], [1.60238916E12, 1154.9964539007087], [1.60239078E12, 1127.0778301886787], [1.6023897E12, 72331.33333333333], [1.60239E12, 37352.75], [1.60239162E12, 35738.00000000001], [1.60239204E12, 7688.489361702133], [1.6023891E12, 1348.9629629629633], [1.60239132E12, 170583.30000000002], [1.6023894E12, 1002.7802197802198], [1.60239102E12, 880.4814814814814], [1.6023912E12, 71953.83333333334], [1.60238928E12, 958.8504201680669], [1.6023909E12, 1153.5258064516133], [1.6023906E12, 8352.782945736431], [1.6023903E12, 30797.23076923077]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60239222E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6023891E12, "maxY": 1.7111111111111115, "series": [{"data": [[1.60238922E12, 0.7307692307692307], [1.60239144E12, 0.5882352941176471], [1.60239222E12, 0.5], [1.60238952E12, 0.6], [1.60239114E12, 0.6], [1.60239084E12, 0.8333333333333333], [1.60239054E12, 0.28571428571428575], [1.60239072E12, 0.5370370370370361], [1.60239042E12, 0.7380952380952379], [1.60239012E12, 0.75], [1.60239174E12, 0.6428571428571428], [1.60238982E12, 0.7777777777777778], [1.60239096E12, 0.476950354609929], [1.60239036E12, 0.5000000000000001], [1.60239006E12, 0.5], [1.60239024E12, 1.1111111111111112], [1.60239186E12, 0.5], [1.60238994E12, 0.8999999999999999], [1.60238934E12, 0.6838365896980457], [1.60239156E12, 0.2], [1.6023921E12, 0.47450980392156866], [1.60238964E12, 0.6666666666666666], [1.60239048E12, 0.6031746031746031], [1.60239018E12, 0.6], [1.6023918E12, 0.5420560747663551], [1.60238988E12, 0.3636363636363636], [1.6023915E12, 0.6000000000000001], [1.60239216E12, 0.49450549450549447], [1.60238946E12, 0.6444444444444443], [1.60239168E12, 0.7222222222222223], [1.60239198E12, 0.4363636363636364], [1.60238976E12, 0.5], [1.60239108E12, 0.5555555555555556], [1.60238916E12, 0.9645390070921988], [1.60239078E12, 0.5094339622641508], [1.6023897E12, 0.0], [1.60239E12, 0.5], [1.60239162E12, 0.7499999999999999], [1.60239204E12, 0.6276595744680851], [1.6023891E12, 1.7111111111111115], [1.60239132E12, 0.5000000000000001], [1.6023894E12, 0.6263736263736263], [1.60239102E12, 0.4962962962962964], [1.6023912E12, 1.1666666666666665], [1.60238928E12, 0.8571428571428571], [1.6023909E12, 0.520967741935485], [1.6023906E12, 0.4961240310077519], [1.6023903E12, 0.6153846153846154]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60239222E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 191.0, "minX": 1.6023891E12, "maxY": 363374.0, "series": [{"data": [[1.60238922E12, 92186.0], [1.60239144E12, 139138.0], [1.60239222E12, 69590.0], [1.60238952E12, 72676.0], [1.60239114E12, 73623.0], [1.60239084E12, 74893.0], [1.60239054E12, 74819.0], [1.60239072E12, 73749.0], [1.60239042E12, 71931.0], [1.60239012E12, 139875.0], [1.60239174E12, 71380.0], [1.60238982E12, 140712.0], [1.60239096E12, 5104.0], [1.60239036E12, 138761.0], [1.60239006E12, 71867.0], [1.60239024E12, 345079.0], [1.60239186E12, 70297.0], [1.60238994E12, 73012.0], [1.60238934E12, 6220.0], [1.60239156E12, 71722.0], [1.6023921E12, 72897.0], [1.60238964E12, 156060.0], [1.60239048E12, 143969.0], [1.60239018E12, 72246.0], [1.6023918E12, 142601.0], [1.60238988E12, 363374.0], [1.6023915E12, 74749.0], [1.60239216E12, 7938.0], [1.60238946E12, 90333.0], [1.60239168E12, 208358.0], [1.60239198E12, 140416.0], [1.60238976E12, 139912.0], [1.60239108E12, 71856.0], [1.60238916E12, 11653.0], [1.60239078E12, 8010.0], [1.6023897E12, 72906.0], [1.60239E12, 99352.0], [1.60239162E12, 137715.0], [1.60239204E12, 72776.0], [1.6023891E12, 4939.0], [1.60239132E12, 274205.0], [1.6023894E12, 5345.0], [1.60239102E12, 4900.0], [1.6023912E12, 144821.0], [1.60238928E12, 6316.0], [1.6023909E12, 73947.0], [1.6023906E12, 142819.0], [1.6023903E12, 73175.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60238922E12, 380.0], [1.60239144E12, 411.0], [1.60239222E12, 67554.0], [1.60238952E12, 69742.0], [1.60239114E12, 71310.0], [1.60239084E12, 531.0], [1.60239054E12, 795.0], [1.60239072E12, 216.38299988389016], [1.60239042E12, 300.0], [1.60239012E12, 71647.0], [1.60239174E12, 324.0], [1.60238982E12, 376.0], [1.60239096E12, 212.0849998652935], [1.60239036E12, 418.0], [1.60239006E12, 50124.0], [1.60239024E12, 304.0], [1.60239186E12, 70217.0], [1.60238994E12, 214.0], [1.60238934E12, 209.15199973106385], [1.60239156E12, 457.0], [1.6023921E12, 196.30399993896484], [1.60238964E12, 68323.0], [1.60239048E12, 217.0], [1.60239018E12, 985.0], [1.6023918E12, 210.0], [1.60238988E12, 258.0], [1.6023915E12, 204.0], [1.60239216E12, 232.5879998254776], [1.60238946E12, 289.0], [1.60239168E12, 260.0], [1.60239198E12, 196.0], [1.60238976E12, 71949.0], [1.60239108E12, 326.0], [1.60238916E12, 217.92299939274787], [1.60239078E12, 222.89999878406525], [1.6023897E12, 71542.0], [1.60239E12, 238.0], [1.60239162E12, 280.0], [1.60239204E12, 213.0], [1.6023891E12, 218.04799912452697], [1.60239132E12, 70644.0], [1.6023894E12, 206.0], [1.60239102E12, 192.34399980545044], [1.6023912E12, 1339.0], [1.60238928E12, 214.0], [1.6023909E12, 205.0], [1.6023906E12, 203.50999990701675], [1.6023903E12, 304.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60238922E12, 380.0], [1.60239144E12, 411.0], [1.60239222E12, 67554.0], [1.60238952E12, 69742.0], [1.60239114E12, 71310.0], [1.60239084E12, 531.0], [1.60239054E12, 795.0], [1.60239072E12, 216.82130004644395], [1.60239042E12, 300.0], [1.60239012E12, 71647.0], [1.60239174E12, 324.0], [1.60238982E12, 376.0], [1.60239096E12, 212.5935000538826], [1.60239036E12, 418.0], [1.60239006E12, 50124.0], [1.60239024E12, 304.0], [1.60239186E12, 70217.0], [1.60238994E12, 214.0], [1.60238934E12, 210.16720010757447], [1.60239156E12, 457.0], [1.6023921E12, 196.53440002441405], [1.60238964E12, 68323.0], [1.60239048E12, 217.0], [1.60239018E12, 985.0], [1.6023918E12, 210.62280009269713], [1.60238988E12, 258.0], [1.6023915E12, 204.0], [1.60239216E12, 233.24680006980896], [1.60238946E12, 289.0], [1.60239168E12, 260.0], [1.60239198E12, 196.0], [1.60238976E12, 71949.0], [1.60239108E12, 326.0], [1.60238916E12, 220.21530024290084], [1.60239078E12, 225.20750004053116], [1.6023897E12, 71542.0], [1.60239E12, 238.0], [1.60239162E12, 280.0], [1.60239204E12, 213.0], [1.6023891E12, 221.3528003501892], [1.60239132E12, 70644.0], [1.6023894E12, 206.0], [1.60239102E12, 193.07840007781982], [1.6023912E12, 1339.0], [1.60238928E12, 214.0], [1.6023909E12, 205.29580011844635], [1.6023906E12, 203.8610000371933], [1.6023903E12, 304.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60238922E12, 380.0], [1.60239144E12, 411.0], [1.60239222E12, 67554.0], [1.60238952E12, 69742.0], [1.60239114E12, 71310.0], [1.60239084E12, 531.0], [1.60239054E12, 795.0], [1.60239072E12, 216.62649994194507], [1.60239042E12, 300.0], [1.60239012E12, 71647.0], [1.60239174E12, 324.0], [1.60238982E12, 376.0], [1.60239096E12, 212.36749993264675], [1.60239036E12, 418.0], [1.60239006E12, 50124.0], [1.60239024E12, 304.0], [1.60239186E12, 70217.0], [1.60238994E12, 214.0], [1.60238934E12, 209.71599986553193], [1.60239156E12, 457.0], [1.6023921E12, 196.43199996948243], [1.60238964E12, 68323.0], [1.60239048E12, 217.0], [1.60239018E12, 985.0], [1.6023918E12, 210.23399988412856], [1.60238988E12, 258.0], [1.6023915E12, 204.0], [1.60239216E12, 232.9539999127388], [1.60238946E12, 289.0], [1.60239168E12, 260.0], [1.60239198E12, 196.0], [1.60238976E12, 71949.0], [1.60239108E12, 326.0], [1.60238916E12, 219.19649969637393], [1.60239078E12, 225.03749994933605], [1.6023897E12, 71542.0], [1.60239E12, 238.0], [1.60239162E12, 280.0], [1.60239204E12, 213.0], [1.6023891E12, 219.88399956226348], [1.60239132E12, 70644.0], [1.6023894E12, 206.0], [1.60239102E12, 192.75199990272523], [1.6023912E12, 1339.0], [1.60238928E12, 214.0], [1.6023909E12, 205.0], [1.6023906E12, 203.70499995350838], [1.6023903E12, 304.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60238922E12, 380.0], [1.60239144E12, 411.0], [1.60239222E12, 67554.0], [1.60238952E12, 69742.0], [1.60239114E12, 71310.0], [1.60239084E12, 531.0], [1.60239054E12, 795.0], [1.60239072E12, 208.0], [1.60239042E12, 300.0], [1.60239012E12, 71647.0], [1.60239174E12, 324.0], [1.60238982E12, 376.0], [1.60239096E12, 198.0], [1.60239036E12, 418.0], [1.60239006E12, 50124.0], [1.60239024E12, 304.0], [1.60239186E12, 70217.0], [1.60238994E12, 214.0], [1.60238934E12, 198.0], [1.60239156E12, 457.0], [1.6023921E12, 191.0], [1.60238964E12, 68323.0], [1.60239048E12, 217.0], [1.60239018E12, 985.0], [1.6023918E12, 210.0], [1.60238988E12, 258.0], [1.6023915E12, 204.0], [1.60239216E12, 230.0], [1.60238946E12, 289.0], [1.60239168E12, 260.0], [1.60239198E12, 196.0], [1.60238976E12, 71949.0], [1.60239108E12, 326.0], [1.60238916E12, 208.0], [1.60239078E12, 192.0], [1.6023897E12, 71542.0], [1.60239E12, 238.0], [1.60239162E12, 280.0], [1.60239204E12, 213.0], [1.6023891E12, 212.0], [1.60239132E12, 70644.0], [1.6023894E12, 206.0], [1.60239102E12, 191.0], [1.6023912E12, 1339.0], [1.60238928E12, 197.0], [1.6023909E12, 194.0], [1.6023906E12, 203.0], [1.6023903E12, 304.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60238922E12, 934.0], [1.60239144E12, 72596.0], [1.60239222E12, 68971.5], [1.60238952E12, 70959.0], [1.60239114E12, 72281.0], [1.60239084E12, 68628.0], [1.60239054E12, 73049.0], [1.60239072E12, 793.0], [1.60239042E12, 661.0], [1.60239012E12, 95575.0], [1.60239174E12, 41145.5], [1.60238982E12, 72094.0], [1.60239096E12, 783.0], [1.60239036E12, 42710.0], [1.60239006E12, 60995.5], [1.60239024E12, 45235.5], [1.60239186E12, 70257.0], [1.60238994E12, 1102.5], [1.60238934E12, 648.0], [1.60239156E12, 70486.0], [1.6023921E12, 668.0], [1.60238964E12, 138945.0], [1.60239048E12, 1062.0], [1.60239018E12, 71786.0], [1.6023918E12, 707.0], [1.60238988E12, 72806.0], [1.6023915E12, 4706.0], [1.60239216E12, 920.5], [1.60238946E12, 1109.0], [1.60239168E12, 486.5], [1.60239198E12, 621.0], [1.60238976E12, 126140.5], [1.60239108E12, 1182.0], [1.60238916E12, 752.0], [1.60239078E12, 810.0], [1.6023897E12, 72546.0], [1.60239E12, 30075.0], [1.60239162E12, 1644.5], [1.60239204E12, 422.0], [1.6023891E12, 1017.0], [1.60239132E12, 163538.5], [1.6023894E12, 498.0], [1.60239102E12, 445.0], [1.6023912E12, 71329.5], [1.60238928E12, 544.0], [1.6023909E12, 625.5], [1.6023906E12, 434.0], [1.6023903E12, 2329.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60239222E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 259.5, "minX": 1.0, "maxY": 1304.5, "series": [{"data": [[2.0, 1203.0], [3.0, 723.0], [4.0, 1007.0], [5.0, 967.0], [6.0, 973.0], [7.0, 851.5], [8.0, 804.0], [9.0, 992.0], [10.0, 809.5], [11.0, 802.0], [12.0, 685.0], [13.0, 693.0], [14.0, 714.0], [15.0, 537.5], [1.0, 1304.5], [16.0, 516.5], [17.0, 622.5], [18.0, 408.0], [19.0, 400.0], [21.0, 320.0], [22.0, 336.5], [23.0, 405.5], [25.0, 259.5], [26.0, 294.5], [27.0, 286.5], [29.0, 370.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 259.5, "minX": 1.0, "maxY": 1298.5, "series": [{"data": [[2.0, 1197.5], [3.0, 722.0], [4.0, 996.0], [5.0, 934.0], [6.0, 926.5], [7.0, 847.5], [8.0, 757.0], [9.0, 929.0], [10.0, 766.5], [11.0, 775.0], [12.0, 680.0], [13.0, 670.5], [14.0, 681.0], [15.0, 516.5], [1.0, 1298.5], [16.0, 483.5], [17.0, 586.0], [18.0, 408.0], [19.0, 400.0], [21.0, 320.0], [22.0, 336.5], [23.0, 405.5], [25.0, 259.5], [26.0, 294.0], [27.0, 286.5], [29.0, 370.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6023891E12, "maxY": 10.333333333333334, "series": [{"data": [[1.60238922E12, 0.43333333333333335], [1.60239144E12, 0.2833333333333333], [1.60238952E12, 0.08333333333333333], [1.60239114E12, 0.08333333333333333], [1.60239084E12, 0.2], [1.60239054E12, 0.11666666666666667], [1.60239072E12, 8.1], [1.60239042E12, 0.7], [1.60239012E12, 0.06666666666666667], [1.60239174E12, 0.23333333333333334], [1.60238982E12, 0.15], [1.60239096E12, 9.4], [1.60239036E12, 0.13333333333333333], [1.60239006E12, 0.03333333333333333], [1.60239024E12, 0.3], [1.60239186E12, 0.03333333333333333], [1.60238994E12, 0.16666666666666666], [1.60238934E12, 9.383333333333333], [1.60239156E12, 0.08333333333333333], [1.6023921E12, 4.25], [1.60238964E12, 0.15], [1.60239048E12, 1.05], [1.60239018E12, 0.08333333333333333], [1.6023918E12, 1.7833333333333334], [1.60238988E12, 0.18333333333333332], [1.6023915E12, 0.4166666666666667], [1.60239216E12, 2.933333333333333], [1.60238946E12, 0.75], [1.60239168E12, 0.3], [1.60239198E12, 0.9166666666666666], [1.60238976E12, 0.1], [1.60239108E12, 0.75], [1.60238916E12, 4.7], [1.60239078E12, 7.066666666666666], [1.6023897E12, 0.05], [1.60239E12, 0.2], [1.60239162E12, 0.2], [1.60239204E12, 1.5666666666666667], [1.6023891E12, 2.4166666666666665], [1.60239132E12, 0.16666666666666666], [1.6023894E12, 1.5166666666666666], [1.60239102E12, 2.25], [1.6023912E12, 0.1], [1.60238928E12, 9.916666666666666], [1.6023909E12, 10.333333333333334], [1.6023906E12, 2.15], [1.6023903E12, 0.21666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60239216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6023891E12, "maxY": 10.333333333333334, "series": [{"data": [[1.60238922E12, 0.43333333333333335], [1.60239144E12, 0.2833333333333333], [1.60239222E12, 0.06666666666666667], [1.60238952E12, 0.08333333333333333], [1.60239114E12, 0.08333333333333333], [1.60239084E12, 0.2], [1.60239054E12, 0.11666666666666667], [1.60239072E12, 8.1], [1.60239042E12, 0.7], [1.60239012E12, 0.06666666666666667], [1.60239174E12, 0.23333333333333334], [1.60238982E12, 0.15], [1.60239096E12, 9.4], [1.60239036E12, 0.13333333333333333], [1.60239006E12, 0.03333333333333333], [1.60239024E12, 0.3], [1.60239186E12, 0.03333333333333333], [1.60238994E12, 0.16666666666666666], [1.60238934E12, 9.383333333333333], [1.60239156E12, 0.08333333333333333], [1.6023921E12, 4.25], [1.60238964E12, 0.15], [1.60239048E12, 1.05], [1.60239018E12, 0.08333333333333333], [1.6023918E12, 1.7833333333333334], [1.60238988E12, 0.18333333333333332], [1.6023915E12, 0.4166666666666667], [1.60239216E12, 3.033333333333333], [1.60238946E12, 0.75], [1.60239168E12, 0.3], [1.60239198E12, 0.9166666666666666], [1.60238976E12, 0.1], [1.60239108E12, 0.75], [1.60238916E12, 4.7], [1.60239078E12, 7.066666666666666], [1.6023897E12, 0.05], [1.60239E12, 0.2], [1.60239162E12, 0.2], [1.60239204E12, 1.5666666666666667], [1.6023891E12, 2.25], [1.60239132E12, 0.16666666666666666], [1.6023894E12, 1.5166666666666666], [1.60239102E12, 2.25], [1.6023912E12, 0.1], [1.60238928E12, 9.916666666666666], [1.6023909E12, 10.333333333333334], [1.6023906E12, 2.15], [1.6023903E12, 0.21666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60239222E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6023891E12, "maxY": 10.333333333333334, "series": [{"data": [[1.60238922E12, 0.43333333333333335], [1.60239144E12, 0.2833333333333333], [1.60239222E12, 0.06666666666666667], [1.60238952E12, 0.08333333333333333], [1.60239114E12, 0.08333333333333333], [1.60239084E12, 0.2], [1.60239054E12, 0.11666666666666667], [1.60239072E12, 8.1], [1.60239042E12, 0.7], [1.60239012E12, 0.06666666666666667], [1.60239174E12, 0.23333333333333334], [1.60238982E12, 0.15], [1.60239096E12, 9.4], [1.60239036E12, 0.13333333333333333], [1.60239006E12, 0.03333333333333333], [1.60239024E12, 0.3], [1.60239186E12, 0.03333333333333333], [1.60238994E12, 0.16666666666666666], [1.60238934E12, 9.383333333333333], [1.60239156E12, 0.08333333333333333], [1.6023921E12, 4.25], [1.60238964E12, 0.15], [1.60239048E12, 1.05], [1.60239018E12, 0.08333333333333333], [1.6023918E12, 1.7833333333333334], [1.60238988E12, 0.18333333333333332], [1.6023915E12, 0.4166666666666667], [1.60239216E12, 3.033333333333333], [1.60238946E12, 0.75], [1.60239168E12, 0.3], [1.60239198E12, 0.9166666666666666], [1.60238976E12, 0.1], [1.60239108E12, 0.75], [1.60238916E12, 4.7], [1.60239078E12, 7.066666666666666], [1.6023897E12, 0.05], [1.60239E12, 0.2], [1.60239162E12, 0.2], [1.60239204E12, 1.5666666666666667], [1.6023891E12, 2.25], [1.60239132E12, 0.16666666666666666], [1.6023894E12, 1.5166666666666666], [1.60239102E12, 2.25], [1.6023912E12, 0.1], [1.60238928E12, 9.916666666666666], [1.6023909E12, 10.333333333333334], [1.6023906E12, 2.15], [1.6023903E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60239222E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6023891E12, "maxY": 10.333333333333334, "series": [{"data": [[1.60238922E12, 0.43333333333333335], [1.60239144E12, 0.2833333333333333], [1.60239222E12, 0.06666666666666667], [1.60238952E12, 0.08333333333333333], [1.60239114E12, 0.08333333333333333], [1.60239084E12, 0.2], [1.60239054E12, 0.11666666666666667], [1.60239072E12, 8.1], [1.60239042E12, 0.7], [1.60239012E12, 0.06666666666666667], [1.60239174E12, 0.23333333333333334], [1.60238982E12, 0.15], [1.60239096E12, 9.4], [1.60239036E12, 0.13333333333333333], [1.60239006E12, 0.03333333333333333], [1.60239024E12, 0.3], [1.60239186E12, 0.03333333333333333], [1.60238994E12, 0.16666666666666666], [1.60238934E12, 9.383333333333333], [1.60239156E12, 0.08333333333333333], [1.6023921E12, 4.25], [1.60238964E12, 0.15], [1.60239048E12, 1.05], [1.60239018E12, 0.08333333333333333], [1.6023918E12, 1.7833333333333334], [1.60238988E12, 0.18333333333333332], [1.6023915E12, 0.4166666666666667], [1.60239216E12, 3.033333333333333], [1.60238946E12, 0.75], [1.60239168E12, 0.3], [1.60239198E12, 0.9166666666666666], [1.60238976E12, 0.1], [1.60239108E12, 0.75], [1.60238916E12, 4.7], [1.60239078E12, 7.066666666666666], [1.6023897E12, 0.05], [1.60239E12, 0.2], [1.60239162E12, 0.2], [1.60239204E12, 1.5666666666666667], [1.6023891E12, 2.25], [1.60239132E12, 0.16666666666666666], [1.6023894E12, 1.5166666666666666], [1.60239102E12, 2.25], [1.6023912E12, 0.1], [1.60238928E12, 9.916666666666666], [1.6023909E12, 10.333333333333334], [1.6023906E12, 2.15], [1.6023903E12, 0.21666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60239222E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

