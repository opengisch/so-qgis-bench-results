/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3246.0, "minX": 0.0, "maxY": 45503.0, "series": [{"data": [[0.0, 3246.0], [0.1, 3246.0], [0.2, 6234.0], [0.3, 8445.0], [0.4, 8445.0], [0.5, 11456.0], [0.6, 14064.0], [0.7, 16750.0], [0.8, 16750.0], [0.9, 16908.0], [1.0, 16913.0], [1.1, 16937.0], [1.2, 16937.0], [1.3, 16979.0], [1.4, 17269.0], [1.5, 17294.0], [1.6, 17294.0], [1.7, 17310.0], [1.8, 17371.0], [1.9, 17371.0], [2.0, 17400.0], [2.1, 17430.0], [2.2, 17448.0], [2.3, 17448.0], [2.4, 17470.0], [2.5, 17561.0], [2.6, 17645.0], [2.7, 17645.0], [2.8, 17682.0], [2.9, 17748.0], [3.0, 17788.0], [3.1, 17788.0], [3.2, 17817.0], [3.3, 17824.0], [3.4, 17824.0], [3.5, 17830.0], [3.6, 17833.0], [3.7, 17846.0], [3.8, 17846.0], [3.9, 17861.0], [4.0, 17878.0], [4.1, 17884.0], [4.2, 17884.0], [4.3, 17888.0], [4.4, 17915.0], [4.5, 17932.0], [4.6, 17932.0], [4.7, 17937.0], [4.8, 17942.0], [4.9, 17958.0], [5.0, 17958.0], [5.1, 17970.0], [5.2, 17979.0], [5.3, 17979.0], [5.4, 17982.0], [5.5, 17984.0], [5.6, 17996.0], [5.7, 17996.0], [5.8, 18017.0], [5.9, 18020.0], [6.0, 18024.0], [6.1, 18024.0], [6.2, 18054.0], [6.3, 18105.0], [6.4, 18136.0], [6.5, 18136.0], [6.6, 18174.0], [6.7, 18178.0], [6.8, 18178.0], [6.9, 18240.0], [7.0, 18245.0], [7.1, 18259.0], [7.2, 18259.0], [7.3, 18286.0], [7.4, 18322.0], [7.5, 18344.0], [7.6, 18344.0], [7.7, 18349.0], [7.8, 18456.0], [7.9, 18462.0], [8.0, 18462.0], [8.1, 18484.0], [8.2, 18500.0], [8.3, 18512.0], [8.4, 18512.0], [8.5, 18540.0], [8.6, 18561.0], [8.7, 18561.0], [8.8, 18612.0], [8.9, 18635.0], [9.0, 18635.0], [9.1, 18635.0], [9.2, 18643.0], [9.3, 18679.0], [9.4, 18780.0], [9.5, 18780.0], [9.6, 18877.0], [9.7, 18893.0], [9.8, 18959.0], [9.9, 18959.0], [10.0, 19020.0], [10.1, 19069.0], [10.2, 19069.0], [10.3, 19081.0], [10.4, 19150.0], [10.5, 19155.0], [10.6, 19155.0], [10.7, 19191.0], [10.8, 19219.0], [10.9, 19282.0], [11.0, 19282.0], [11.1, 19286.0], [11.2, 19298.0], [11.3, 19404.0], [11.4, 19404.0], [11.5, 19485.0], [11.6, 19486.0], [11.7, 19486.0], [11.8, 19494.0], [11.9, 19591.0], [12.0, 19628.0], [12.1, 19628.0], [12.2, 19685.0], [12.3, 19688.0], [12.4, 19713.0], [12.5, 19713.0], [12.6, 19749.0], [12.7, 19796.0], [12.8, 19892.0], [12.9, 19892.0], [13.0, 19935.0], [13.1, 19950.0], [13.2, 20016.0], [13.3, 20016.0], [13.4, 20038.0], [13.5, 20055.0], [13.6, 20055.0], [13.7, 20063.0], [13.8, 20110.0], [13.9, 20121.0], [14.0, 20121.0], [14.1, 20137.0], [14.2, 20146.0], [14.3, 20152.0], [14.4, 20152.0], [14.5, 20161.0], [14.6, 20165.0], [14.7, 20185.0], [14.8, 20185.0], [14.9, 20192.0], [15.0, 20210.0], [15.1, 20210.0], [15.2, 20216.0], [15.3, 20427.0], [15.4, 20551.0], [15.5, 20551.0], [15.6, 20559.0], [15.7, 20615.0], [15.8, 20632.0], [15.9, 20632.0], [16.0, 20704.0], [16.1, 20745.0], [16.2, 20789.0], [16.3, 20789.0], [16.4, 20794.0], [16.5, 20826.0], [16.6, 20910.0], [16.7, 20910.0], [16.8, 20945.0], [16.9, 20946.0], [17.0, 20946.0], [17.1, 21178.0], [17.2, 21256.0], [17.3, 21410.0], [17.4, 21410.0], [17.5, 21489.0], [17.6, 21495.0], [17.7, 21500.0], [17.8, 21500.0], [17.9, 21613.0], [18.0, 21639.0], [18.1, 21682.0], [18.2, 21682.0], [18.3, 21700.0], [18.4, 21742.0], [18.5, 21742.0], [18.6, 21756.0], [18.7, 21759.0], [18.8, 21781.0], [18.9, 21781.0], [19.0, 21832.0], [19.1, 21836.0], [19.2, 21886.0], [19.3, 21886.0], [19.4, 21994.0], [19.5, 22001.0], [19.6, 22014.0], [19.7, 22014.0], [19.8, 22095.0], [19.9, 22236.0], [20.0, 22261.0], [20.1, 22261.0], [20.2, 22310.0], [20.3, 22351.0], [20.4, 22351.0], [20.5, 22394.0], [20.6, 22396.0], [20.7, 22413.0], [20.8, 22413.0], [20.9, 22462.0], [21.0, 22484.0], [21.1, 22495.0], [21.2, 22495.0], [21.3, 22524.0], [21.4, 22560.0], [21.5, 22565.0], [21.6, 22565.0], [21.7, 22586.0], [21.8, 22615.0], [21.9, 22615.0], [22.0, 22619.0], [22.1, 22664.0], [22.2, 22698.0], [22.3, 22698.0], [22.4, 22724.0], [22.5, 22751.0], [22.6, 22769.0], [22.7, 22769.0], [22.8, 22840.0], [22.9, 22860.0], [23.0, 22861.0], [23.1, 22861.0], [23.2, 22880.0], [23.3, 22907.0], [23.4, 22907.0], [23.5, 22925.0], [23.6, 22928.0], [23.7, 22957.0], [23.8, 22957.0], [23.9, 22972.0], [24.0, 23028.0], [24.1, 23038.0], [24.2, 23038.0], [24.3, 23064.0], [24.4, 23159.0], [24.5, 23225.0], [24.6, 23225.0], [24.7, 23268.0], [24.8, 23270.0], [24.9, 23324.0], [25.0, 23324.0], [25.1, 23380.0], [25.2, 23394.0], [25.3, 23394.0], [25.4, 23423.0], [25.5, 23440.0], [25.6, 23443.0], [25.7, 23443.0], [25.8, 23465.0], [25.9, 23471.0], [26.0, 23479.0], [26.1, 23479.0], [26.2, 23479.0], [26.3, 23488.0], [26.4, 23505.0], [26.5, 23505.0], [26.6, 23521.0], [26.7, 23554.0], [26.8, 23554.0], [26.9, 23617.0], [27.0, 23658.0], [27.1, 23671.0], [27.2, 23671.0], [27.3, 23707.0], [27.4, 23728.0], [27.5, 23729.0], [27.6, 23729.0], [27.7, 23741.0], [27.8, 23791.0], [27.9, 23805.0], [28.0, 23805.0], [28.1, 23813.0], [28.2, 23829.0], [28.3, 23839.0], [28.4, 23839.0], [28.5, 23843.0], [28.6, 23889.0], [28.7, 23889.0], [28.8, 23924.0], [28.9, 23926.0], [29.0, 23945.0], [29.1, 23945.0], [29.2, 23986.0], [29.3, 24025.0], [29.4, 24038.0], [29.5, 24038.0], [29.6, 24051.0], [29.7, 24055.0], [29.8, 24123.0], [29.9, 24123.0], [30.0, 24139.0], [30.1, 24152.0], [30.2, 24152.0], [30.3, 24203.0], [30.4, 24208.0], [30.5, 24220.0], [30.6, 24220.0], [30.7, 24225.0], [30.8, 24229.0], [30.9, 24236.0], [31.0, 24236.0], [31.1, 24241.0], [31.2, 24242.0], [31.3, 24266.0], [31.4, 24266.0], [31.5, 24274.0], [31.6, 24328.0], [31.7, 24328.0], [31.8, 24329.0], [31.9, 24335.0], [32.0, 24339.0], [32.1, 24339.0], [32.2, 24344.0], [32.3, 24351.0], [32.4, 24401.0], [32.5, 24401.0], [32.6, 24423.0], [32.7, 24425.0], [32.8, 24476.0], [32.9, 24476.0], [33.0, 24477.0], [33.1, 24483.0], [33.2, 24521.0], [33.3, 24521.0], [33.4, 24528.0], [33.5, 24535.0], [33.6, 24535.0], [33.7, 24535.0], [33.8, 24574.0], [33.9, 24677.0], [34.0, 24677.0], [34.1, 24684.0], [34.2, 24705.0], [34.3, 24739.0], [34.4, 24739.0], [34.5, 24780.0], [34.6, 24790.0], [34.7, 24808.0], [34.8, 24808.0], [34.9, 24808.0], [35.0, 24811.0], [35.1, 24811.0], [35.2, 24839.0], [35.3, 24850.0], [35.4, 24850.0], [35.5, 24850.0], [35.6, 24887.0], [35.7, 24953.0], [35.8, 24957.0], [35.9, 24957.0], [36.0, 24968.0], [36.1, 25019.0], [36.2, 25026.0], [36.3, 25026.0], [36.4, 25036.0], [36.5, 25055.0], [36.6, 25058.0], [36.7, 25058.0], [36.8, 25060.0], [36.9, 25074.0], [37.0, 25074.0], [37.1, 25082.0], [37.2, 25095.0], [37.3, 25102.0], [37.4, 25102.0], [37.5, 25157.0], [37.6, 25174.0], [37.7, 25175.0], [37.8, 25175.0], [37.9, 25177.0], [38.0, 25214.0], [38.1, 25221.0], [38.2, 25221.0], [38.3, 25223.0], [38.4, 25331.0], [38.5, 25331.0], [38.6, 25391.0], [38.7, 25393.0], [38.8, 25398.0], [38.9, 25398.0], [39.0, 25413.0], [39.1, 25462.0], [39.2, 25545.0], [39.3, 25545.0], [39.4, 25549.0], [39.5, 25575.0], [39.6, 25583.0], [39.7, 25583.0], [39.8, 25589.0], [39.9, 25596.0], [40.0, 25611.0], [40.1, 25611.0], [40.2, 25621.0], [40.3, 25630.0], [40.4, 25630.0], [40.5, 25659.0], [40.6, 25677.0], [40.7, 25685.0], [40.8, 25685.0], [40.9, 25726.0], [41.0, 25729.0], [41.1, 25739.0], [41.2, 25739.0], [41.3, 25780.0], [41.4, 25786.0], [41.5, 25829.0], [41.6, 25829.0], [41.7, 25842.0], [41.8, 25861.0], [41.9, 25861.0], [42.0, 25868.0], [42.1, 25874.0], [42.2, 25916.0], [42.3, 25916.0], [42.4, 25918.0], [42.5, 25933.0], [42.6, 25965.0], [42.7, 25965.0], [42.8, 25972.0], [42.9, 25976.0], [43.0, 26010.0], [43.1, 26010.0], [43.2, 26044.0], [43.3, 26098.0], [43.4, 26098.0], [43.5, 26121.0], [43.6, 26134.0], [43.7, 26196.0], [43.8, 26196.0], [43.9, 26246.0], [44.0, 26250.0], [44.1, 26258.0], [44.2, 26258.0], [44.3, 26273.0], [44.4, 26283.0], [44.5, 26290.0], [44.6, 26290.0], [44.7, 26329.0], [44.8, 26351.0], [44.9, 26356.0], [45.0, 26356.0], [45.1, 26360.0], [45.2, 26369.0], [45.3, 26369.0], [45.4, 26399.0], [45.5, 26414.0], [45.6, 26433.0], [45.7, 26433.0], [45.8, 26458.0], [45.9, 26485.0], [46.0, 26488.0], [46.1, 26488.0], [46.2, 26504.0], [46.3, 26509.0], [46.4, 26511.0], [46.5, 26511.0], [46.6, 26544.0], [46.7, 26596.0], [46.8, 26596.0], [46.9, 26625.0], [47.0, 26719.0], [47.1, 26719.0], [47.2, 26719.0], [47.3, 26723.0], [47.4, 26734.0], [47.5, 26762.0], [47.6, 26762.0], [47.7, 26898.0], [47.8, 26933.0], [47.9, 27006.0], [48.0, 27006.0], [48.1, 27008.0], [48.2, 27034.0], [48.3, 27041.0], [48.4, 27041.0], [48.5, 27065.0], [48.6, 27072.0], [48.7, 27072.0], [48.8, 27075.0], [48.9, 27092.0], [49.0, 27129.0], [49.1, 27129.0], [49.2, 27136.0], [49.3, 27179.0], [49.4, 27211.0], [49.5, 27211.0], [49.6, 27222.0], [49.7, 27237.0], [49.8, 27306.0], [49.9, 27306.0], [50.0, 27365.0], [50.1, 27372.0], [50.2, 27372.0], [50.3, 27376.0], [50.4, 27387.0], [50.5, 27399.0], [50.6, 27399.0], [50.7, 27431.0], [50.8, 27440.0], [50.9, 27463.0], [51.0, 27463.0], [51.1, 27471.0], [51.2, 27473.0], [51.3, 27487.0], [51.4, 27487.0], [51.5, 27541.0], [51.6, 27545.0], [51.7, 27545.0], [51.8, 27572.0], [51.9, 27613.0], [52.0, 27622.0], [52.1, 27622.0], [52.2, 27624.0], [52.3, 27678.0], [52.4, 27678.0], [52.5, 27678.0], [52.6, 27700.0], [52.7, 27783.0], [52.8, 27783.0], [52.9, 27783.0], [53.0, 27784.0], [53.1, 27803.0], [53.2, 27805.0], [53.3, 27805.0], [53.4, 27810.0], [53.5, 27861.0], [53.6, 27861.0], [53.7, 27897.0], [53.8, 27924.0], [53.9, 27944.0], [54.0, 27944.0], [54.1, 27950.0], [54.2, 27956.0], [54.3, 27966.0], [54.4, 27966.0], [54.5, 27969.0], [54.6, 27978.0], [54.7, 27996.0], [54.8, 27996.0], [54.9, 28007.0], [55.0, 28011.0], [55.1, 28011.0], [55.2, 28065.0], [55.3, 28082.0], [55.4, 28155.0], [55.5, 28155.0], [55.6, 28199.0], [55.7, 28223.0], [55.8, 28235.0], [55.9, 28235.0], [56.0, 28249.0], [56.1, 28256.0], [56.2, 28262.0], [56.3, 28262.0], [56.4, 28349.0], [56.5, 28354.0], [56.6, 28356.0], [56.7, 28356.0], [56.8, 28357.0], [56.9, 28360.0], [57.0, 28360.0], [57.1, 28397.0], [57.2, 28406.0], [57.3, 28411.0], [57.4, 28411.0], [57.5, 28425.0], [57.6, 28447.0], [57.7, 28470.0], [57.8, 28470.0], [57.9, 28494.0], [58.0, 28502.0], [58.1, 28523.0], [58.2, 28523.0], [58.3, 28533.0], [58.4, 28535.0], [58.5, 28535.0], [58.6, 28562.0], [58.7, 28575.0], [58.8, 28598.0], [58.9, 28598.0], [59.0, 28633.0], [59.1, 28696.0], [59.2, 28697.0], [59.3, 28697.0], [59.4, 28700.0], [59.5, 28713.0], [59.6, 28724.0], [59.7, 28724.0], [59.8, 28740.0], [59.9, 28757.0], [60.0, 28767.0], [60.1, 28767.0], [60.2, 28779.0], [60.3, 28789.0], [60.4, 28789.0], [60.5, 28793.0], [60.6, 28802.0], [60.7, 28820.0], [60.8, 28820.0], [60.9, 28822.0], [61.0, 28834.0], [61.1, 28854.0], [61.2, 28854.0], [61.3, 28860.0], [61.4, 28878.0], [61.5, 28879.0], [61.6, 28879.0], [61.7, 28893.0], [61.8, 28905.0], [61.9, 28905.0], [62.0, 28908.0], [62.1, 28910.0], [62.2, 28924.0], [62.3, 28924.0], [62.4, 28928.0], [62.5, 28936.0], [62.6, 28942.0], [62.7, 28942.0], [62.8, 28948.0], [62.9, 28950.0], [63.0, 28969.0], [63.1, 28969.0], [63.2, 29022.0], [63.3, 29024.0], [63.4, 29024.0], [63.5, 29026.0], [63.6, 29032.0], [63.7, 29040.0], [63.8, 29040.0], [63.9, 29041.0], [64.0, 29084.0], [64.1, 29090.0], [64.2, 29090.0], [64.3, 29096.0], [64.4, 29125.0], [64.5, 29129.0], [64.6, 29129.0], [64.7, 29143.0], [64.8, 29146.0], [64.9, 29166.0], [65.0, 29166.0], [65.1, 29169.0], [65.2, 29170.0], [65.3, 29170.0], [65.4, 29182.0], [65.5, 29183.0], [65.6, 29184.0], [65.7, 29184.0], [65.8, 29188.0], [65.9, 29219.0], [66.0, 29219.0], [66.1, 29219.0], [66.2, 29231.0], [66.3, 29233.0], [66.4, 29246.0], [66.5, 29246.0], [66.6, 29251.0], [66.7, 29253.0], [66.8, 29253.0], [66.9, 29259.0], [67.0, 29260.0], [67.1, 29273.0], [67.2, 29273.0], [67.3, 29295.0], [67.4, 29301.0], [67.5, 29302.0], [67.6, 29302.0], [67.7, 29303.0], [67.8, 29310.0], [67.9, 29312.0], [68.0, 29312.0], [68.1, 29336.0], [68.2, 29336.0], [68.3, 29337.0], [68.4, 29337.0], [68.5, 29344.0], [68.6, 29344.0], [68.7, 29344.0], [68.8, 29345.0], [68.9, 29348.0], [69.0, 29352.0], [69.1, 29352.0], [69.2, 29355.0], [69.3, 29357.0], [69.4, 29359.0], [69.5, 29359.0], [69.6, 29362.0], [69.7, 29368.0], [69.8, 29369.0], [69.9, 29369.0], [70.0, 29374.0], [70.1, 29405.0], [70.2, 29405.0], [70.3, 29416.0], [70.4, 29420.0], [70.5, 29422.0], [70.6, 29422.0], [70.7, 29426.0], [70.8, 29428.0], [70.9, 29431.0], [71.0, 29431.0], [71.1, 29431.0], [71.2, 29439.0], [71.3, 29444.0], [71.4, 29444.0], [71.5, 29448.0], [71.6, 29450.0], [71.7, 29450.0], [71.8, 29456.0], [71.9, 29457.0], [72.0, 29457.0], [72.1, 29457.0], [72.2, 29464.0], [72.3, 29469.0], [72.4, 29469.0], [72.5, 29469.0], [72.6, 29470.0], [72.7, 29471.0], [72.8, 29486.0], [72.9, 29486.0], [73.0, 29496.0], [73.1, 29505.0], [73.2, 29507.0], [73.3, 29507.0], [73.4, 29507.0], [73.5, 29509.0], [73.6, 29509.0], [73.7, 29513.0], [73.8, 29517.0], [73.9, 29524.0], [74.0, 29524.0], [74.1, 29537.0], [74.2, 29538.0], [74.3, 29542.0], [74.4, 29542.0], [74.5, 29544.0], [74.6, 29549.0], [74.7, 29550.0], [74.8, 29550.0], [74.9, 29550.0], [75.0, 29555.0], [75.1, 29555.0], [75.2, 29560.0], [75.3, 29564.0], [75.4, 29564.0], [75.5, 29564.0], [75.6, 29569.0], [75.7, 29575.0], [75.8, 29586.0], [75.9, 29586.0], [76.0, 29605.0], [76.1, 29609.0], [76.2, 29610.0], [76.3, 29610.0], [76.4, 29615.0], [76.5, 29623.0], [76.6, 29627.0], [76.7, 29627.0], [76.8, 29628.0], [76.9, 29639.0], [77.0, 29639.0], [77.1, 29642.0], [77.2, 29643.0], [77.3, 29655.0], [77.4, 29655.0], [77.5, 29673.0], [77.6, 29678.0], [77.7, 29680.0], [77.8, 29680.0], [77.9, 29685.0], [78.0, 29685.0], [78.1, 29690.0], [78.2, 29690.0], [78.3, 29692.0], [78.4, 29692.0], [78.5, 29692.0], [78.6, 29693.0], [78.7, 29695.0], [78.8, 29696.0], [78.9, 29696.0], [79.0, 29696.0], [79.1, 29699.0], [79.2, 29700.0], [79.3, 29700.0], [79.4, 29704.0], [79.5, 29713.0], [79.6, 29715.0], [79.7, 29715.0], [79.8, 29718.0], [79.9, 29719.0], [80.0, 29728.0], [80.1, 29728.0], [80.2, 29729.0], [80.3, 29735.0], [80.4, 29735.0], [80.5, 29746.0], [80.6, 29750.0], [80.7, 29751.0], [80.8, 29751.0], [80.9, 29753.0], [81.0, 29764.0], [81.1, 29765.0], [81.2, 29765.0], [81.3, 29765.0], [81.4, 29772.0], [81.5, 29797.0], [81.6, 29797.0], [81.7, 29799.0], [81.8, 29806.0], [81.9, 29806.0], [82.0, 29809.0], [82.1, 29810.0], [82.2, 29810.0], [82.3, 29810.0], [82.4, 29812.0], [82.5, 29818.0], [82.6, 29821.0], [82.7, 29821.0], [82.8, 29830.0], [82.9, 29832.0], [83.0, 29834.0], [83.1, 29834.0], [83.2, 29837.0], [83.3, 29850.0], [83.4, 29850.0], [83.5, 29853.0], [83.6, 29862.0], [83.7, 29863.0], [83.8, 29863.0], [83.9, 29876.0], [84.0, 29877.0], [84.1, 29898.0], [84.2, 29898.0], [84.3, 29899.0], [84.4, 29899.0], [84.5, 29914.0], [84.6, 29914.0], [84.7, 29941.0], [84.8, 29968.0], [84.9, 29972.0], [85.0, 29972.0], [85.1, 29974.0], [85.2, 29978.0], [85.3, 29978.0], [85.4, 29982.0], [85.5, 29982.0], [85.6, 29983.0], [85.7, 29983.0], [85.8, 29985.0], [85.9, 29994.0], [86.0, 29996.0], [86.1, 29996.0], [86.2, 29998.0], [86.3, 30001.0], [86.4, 30009.0], [86.5, 30009.0], [86.6, 30011.0], [86.7, 30017.0], [86.8, 30017.0], [86.9, 30026.0], [87.0, 30030.0], [87.1, 30037.0], [87.2, 30037.0], [87.3, 30058.0], [87.4, 30065.0], [87.5, 30067.0], [87.6, 30067.0], [87.7, 30069.0], [87.8, 30070.0], [87.9, 30072.0], [88.0, 30072.0], [88.1, 30073.0], [88.2, 30079.0], [88.3, 30101.0], [88.4, 30101.0], [88.5, 30102.0], [88.6, 30113.0], [88.7, 30113.0], [88.8, 30114.0], [88.9, 30122.0], [89.0, 30126.0], [89.1, 30126.0], [89.2, 30141.0], [89.3, 30143.0], [89.4, 30152.0], [89.5, 30152.0], [89.6, 30153.0], [89.7, 30161.0], [89.8, 30169.0], [89.9, 30169.0], [90.0, 30172.0], [90.1, 30180.0], [90.2, 30180.0], [90.3, 30186.0], [90.4, 30204.0], [90.5, 30212.0], [90.6, 30212.0], [90.7, 30214.0], [90.8, 30218.0], [90.9, 30219.0], [91.0, 30219.0], [91.1, 30229.0], [91.2, 30233.0], [91.3, 30238.0], [91.4, 30238.0], [91.5, 30252.0], [91.6, 30266.0], [91.7, 30266.0], [91.8, 30283.0], [91.9, 30289.0], [92.0, 30309.0], [92.1, 30309.0], [92.2, 30330.0], [92.3, 30350.0], [92.4, 30352.0], [92.5, 30352.0], [92.6, 30352.0], [92.7, 30369.0], [92.8, 30585.0], [92.9, 30585.0], [93.0, 30682.0], [93.1, 30845.0], [93.2, 30926.0], [93.3, 30926.0], [93.4, 30989.0], [93.5, 31059.0], [93.6, 31059.0], [93.7, 31143.0], [93.8, 31387.0], [93.9, 31754.0], [94.0, 31754.0], [94.1, 31967.0], [94.2, 32020.0], [94.3, 32532.0], [94.4, 32532.0], [94.5, 32550.0], [94.6, 32568.0], [94.7, 32642.0], [94.8, 32642.0], [94.9, 32649.0], [95.0, 32661.0], [95.1, 32661.0], [95.2, 32674.0], [95.3, 32711.0], [95.4, 32737.0], [95.5, 32737.0], [95.6, 32789.0], [95.7, 33068.0], [95.8, 33486.0], [95.9, 33486.0], [96.0, 33854.0], [96.1, 34066.0], [96.2, 34207.0], [96.3, 34207.0], [96.4, 34221.0], [96.5, 34433.0], [96.6, 35270.0], [96.7, 35270.0], [96.8, 35377.0], [96.9, 35387.0], [97.0, 35387.0], [97.1, 35706.0], [97.2, 36751.0], [97.3, 36902.0], [97.4, 36902.0], [97.5, 37702.0], [97.6, 37950.0], [97.7, 38430.0], [97.8, 38430.0], [97.9, 38509.0], [98.0, 39279.0], [98.1, 40374.0], [98.2, 40374.0], [98.3, 40566.0], [98.4, 41354.0], [98.5, 41354.0], [98.6, 41661.0], [98.7, 42190.0], [98.8, 42226.0], [98.9, 42226.0], [99.0, 42839.0], [99.1, 43631.0], [99.2, 43765.0], [99.3, 43765.0], [99.4, 43954.0], [99.5, 44538.0], [99.6, 44934.0], [99.7, 44934.0], [99.8, 45063.0], [99.9, 45503.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 24.0, "series": [{"data": [[35300.0, 2.0], [35700.0, 1.0], [36700.0, 1.0], [37700.0, 1.0], [38500.0, 1.0], [37900.0, 1.0], [36900.0, 1.0], [40300.0, 1.0], [40500.0, 1.0], [42100.0, 1.0], [41300.0, 1.0], [43900.0, 1.0], [44500.0, 1.0], [44900.0, 1.0], [43700.0, 1.0], [45500.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8400.0, 1.0], [11400.0, 1.0], [14000.0, 1.0], [16700.0, 1.0], [17200.0, 2.0], [17300.0, 2.0], [16900.0, 4.0], [17400.0, 4.0], [18300.0, 3.0], [18100.0, 4.0], [17800.0, 9.0], [18200.0, 4.0], [17900.0, 10.0], [18400.0, 3.0], [18000.0, 4.0], [17700.0, 2.0], [17600.0, 2.0], [17500.0, 1.0], [19200.0, 4.0], [18900.0, 1.0], [19400.0, 4.0], [18700.0, 1.0], [18500.0, 4.0], [19100.0, 3.0], [19000.0, 3.0], [18600.0, 5.0], [18800.0, 2.0], [20400.0, 1.0], [20100.0, 9.0], [19600.0, 3.0], [20000.0, 4.0], [19900.0, 2.0], [19500.0, 1.0], [19700.0, 3.0], [20200.0, 2.0], [19800.0, 1.0], [20600.0, 2.0], [21500.0, 1.0], [20900.0, 3.0], [20700.0, 4.0], [20800.0, 1.0], [21400.0, 3.0], [21100.0, 1.0], [21200.0, 1.0], [20500.0, 2.0], [22300.0, 4.0], [21900.0, 1.0], [22000.0, 3.0], [22500.0, 4.0], [22400.0, 4.0], [22200.0, 2.0], [21800.0, 3.0], [21600.0, 3.0], [21700.0, 5.0], [22700.0, 3.0], [23400.0, 8.0], [22800.0, 4.0], [23500.0, 3.0], [23100.0, 1.0], [23200.0, 3.0], [22900.0, 5.0], [23000.0, 3.0], [22600.0, 4.0], [23300.0, 3.0], [24400.0, 6.0], [24300.0, 6.0], [23900.0, 4.0], [24200.0, 10.0], [23700.0, 5.0], [23600.0, 3.0], [24000.0, 4.0], [24100.0, 3.0], [23800.0, 6.0], [24500.0, 5.0], [24800.0, 7.0], [25500.0, 6.0], [25100.0, 5.0], [24900.0, 3.0], [25000.0, 9.0], [25300.0, 4.0], [25400.0, 2.0], [25200.0, 3.0], [24700.0, 4.0], [24600.0, 2.0], [26400.0, 5.0], [26500.0, 5.0], [26600.0, 1.0], [26200.0, 6.0], [26300.0, 6.0], [25700.0, 5.0], [25600.0, 6.0], [26100.0, 3.0], [25900.0, 6.0], [26000.0, 3.0], [25800.0, 5.0], [27400.0, 6.0], [27000.0, 8.0], [27300.0, 6.0], [27200.0, 3.0], [27600.0, 5.0], [26900.0, 1.0], [26700.0, 5.0], [27100.0, 3.0], [27500.0, 3.0], [26800.0, 1.0], [28500.0, 7.0], [28400.0, 6.0], [27800.0, 5.0], [27700.0, 4.0], [28600.0, 3.0], [28300.0, 6.0], [28200.0, 5.0], [27900.0, 8.0], [28100.0, 2.0], [28000.0, 4.0], [28800.0, 9.0], [29500.0, 21.0], [28900.0, 10.0], [28700.0, 9.0], [29100.0, 11.0], [29600.0, 24.0], [29400.0, 22.0], [29200.0, 11.0], [29300.0, 20.0], [29000.0, 9.0], [29800.0, 20.0], [30300.0, 6.0], [30600.0, 1.0], [29900.0, 13.0], [30000.0, 15.0], [30100.0, 15.0], [30200.0, 12.0], [29700.0, 19.0], [30500.0, 1.0], [31700.0, 1.0], [31100.0, 1.0], [30900.0, 2.0], [31300.0, 1.0], [31000.0, 1.0], [30800.0, 1.0], [32000.0, 1.0], [32600.0, 4.0], [32700.0, 3.0], [32500.0, 3.0], [31900.0, 1.0], [34400.0, 1.0], [33800.0, 1.0], [33400.0, 1.0], [33000.0, 1.0], [34200.0, 2.0], [34000.0, 1.0], [35200.0, 1.0], [38400.0, 1.0], [39200.0, 1.0], [42200.0, 1.0], [41600.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [45000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.60424718E12, "maxY": 10.0, "series": [{"data": [[1.60424892E12, 10.0], [1.60424862E12, 10.0], [1.6042473E12, 10.0], [1.6042476E12, 10.0], [1.6042482E12, 10.0], [1.6042479E12, 10.0], [1.6042488E12, 10.0], [1.6042485E12, 10.0], [1.60424718E12, 10.0], [1.60424748E12, 10.0], [1.6042491E12, 10.0], [1.60424778E12, 10.0], [1.60424808E12, 10.0], [1.60424868E12, 10.0], [1.60424838E12, 10.0], [1.60424736E12, 10.0], [1.60424898E12, 10.0], [1.60424766E12, 10.0], [1.60424796E12, 10.0], [1.60424856E12, 10.0], [1.60424826E12, 10.0], [1.60424916E12, 5.0], [1.60424724E12, 10.0], [1.60424886E12, 10.0], [1.60424754E12, 10.0], [1.60424784E12, 10.0], [1.60424844E12, 10.0], [1.60424814E12, 10.0], [1.60424904E12, 10.0], [1.60424874E12, 10.0], [1.60424742E12, 10.0], [1.60424772E12, 10.0], [1.60424832E12, 10.0], [1.60424802E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424916E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17294.0, "minX": 1.0, "maxY": 26461.713498622565, "series": [{"data": [[8.0, 17371.0], [4.0, 17470.0], [2.0, 17430.0], [1.0, 17932.0], [9.0, 17294.0], [10.0, 26461.713498622565], [5.0, 17645.0], [6.0, 17561.0], [3.0, 17448.0], [7.0, 17400.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26352.047619047597]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.95, "minX": 1.60424718E12, "maxY": 199845.53333333333, "series": [{"data": [[1.60424892E12, 26025.483333333334], [1.60424862E12, 45637.183333333334], [1.6042473E12, 66859.66666666667], [1.6042476E12, 45941.433333333334], [1.6042482E12, 117463.86666666667], [1.6042479E12, 34014.566666666666], [1.6042488E12, 47680.0], [1.6042485E12, 46713.166666666664], [1.60424718E12, 37759.666666666664], [1.60424748E12, 54531.23333333333], [1.6042491E12, 69419.9], [1.60424778E12, 41653.05], [1.60424808E12, 64397.48333333333], [1.60424868E12, 57487.35], [1.60424838E12, 67932.95], [1.60424736E12, 140670.35], [1.60424898E12, 37250.566666666666], [1.60424766E12, 48464.63333333333], [1.60424796E12, 38305.36666666667], [1.60424856E12, 50691.316666666666], [1.60424826E12, 73515.4], [1.60424916E12, 10217.85], [1.60424724E12, 199845.53333333333], [1.60424886E12, 39896.15], [1.60424754E12, 49102.21666666667], [1.60424784E12, 44656.86666666667], [1.60424844E12, 34220.63333333333], [1.60424814E12, 191243.8], [1.60424904E12, 150794.91666666666], [1.60424874E12, 43466.28333333333], [1.60424742E12, 61406.36666666667], [1.60424772E12, 59399.51666666667], [1.60424832E12, 58880.51666666667], [1.60424802E12, 167936.76666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60424892E12, 175.11666666666667], [1.60424862E12, 146.13333333333333], [1.6042473E12, 215.11666666666667], [1.6042476E12, 146.13333333333333], [1.6042482E12, 195.81666666666666], [1.6042479E12, 160.66666666666666], [1.6042488E12, 146.06666666666666], [1.6042485E12, 146.15], [1.60424718E12, 21.95], [1.60424748E12, 169.31666666666666], [1.6042491E12, 184.11666666666667], [1.60424778E12, 146.01666666666668], [1.60424808E12, 161.5], [1.60424868E12, 161.71666666666667], [1.60424838E12, 161.91666666666666], [1.60424736E12, 113.46666666666667], [1.60424898E12, 190.13333333333333], [1.60424766E12, 146.11666666666667], [1.60424796E12, 190.6], [1.60424856E12, 153.43333333333334], [1.60424826E12, 183.18333333333334], [1.60424916E12, 61.03333333333333], [1.60424724E12, 169.21666666666667], [1.60424886E12, 167.78333333333333], [1.60424754E12, 153.4], [1.60424784E12, 146.01666666666668], [1.60424844E12, 131.48333333333332], [1.60424814E12, 187.06666666666666], [1.60424904E12, 164.15], [1.60424874E12, 146.08333333333334], [1.60424742E12, 153.43333333333334], [1.60424772E12, 153.76666666666668], [1.60424832E12, 177.53333333333333], [1.60424802E12, 213.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424916E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5975.0, "minX": 1.60424718E12, "maxY": 35812.88888888889, "series": [{"data": [[1.60424892E12, 25499.54166666667], [1.60424862E12, 29080.0], [1.6042473E12, 20148.833333333332], [1.6042476E12, 29910.7], [1.6042482E12, 22724.888888888887], [1.6042479E12, 28409.863636363636], [1.6042488E12, 30015.45], [1.6042485E12, 28978.899999999994], [1.60424718E12, 5975.0], [1.60424748E12, 25497.869565217396], [1.6042491E12, 26101.26923076923], [1.60424778E12, 29039.75], [1.60424808E12, 25018.47826086956], [1.60424868E12, 27985.681818181816], [1.60424838E12, 24327.09090909091], [1.60424736E12, 32444.4], [1.60424898E12, 23515.269230769234], [1.60424766E12, 29889.649999999998], [1.60424796E12, 24682.692307692305], [1.60424856E12, 29394.80952380952], [1.60424826E12, 21011.346153846156], [1.60424916E12, 17505.66666666667], [1.60424724E12, 24470.826086956524], [1.60424886E12, 27352.304347826084], [1.60424754E12, 28351.523809523806], [1.60424784E12, 29562.199999999997], [1.60424844E12, 35812.88888888889], [1.60424814E12, 23503.03846153846], [1.60424904E12, 23628.17391304348], [1.60424874E12, 29596.949999999997], [1.60424742E12, 32696.04761904762], [1.60424772E12, 29620.23809523809], [1.60424832E12, 26405.91666666667], [1.60424802E12, 19770.600000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424916E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5970.0, "minX": 1.60424718E12, "maxY": 35812.16666666667, "series": [{"data": [[1.60424892E12, 25499.166666666668], [1.60424862E12, 29078.85], [1.6042473E12, 20147.4], [1.6042476E12, 29909.15], [1.6042482E12, 22722.703703703704], [1.6042479E12, 28409.045454545452], [1.6042488E12, 30014.149999999998], [1.6042485E12, 28977.85], [1.60424718E12, 5970.0], [1.60424748E12, 25496.739130434784], [1.6042491E12, 26098.92307692308], [1.60424778E12, 29038.55], [1.60424808E12, 25016.130434782604], [1.60424868E12, 27983.772727272728], [1.60424838E12, 24325.636363636364], [1.60424736E12, 32439.73333333333], [1.60424898E12, 23514.461538461543], [1.60424766E12, 29888.4], [1.60424796E12, 24681.884615384617], [1.60424856E12, 29393.52380952381], [1.60424826E12, 21009.153846153844], [1.60424916E12, 17503.55555555556], [1.60424724E12, 24467.08695652174], [1.60424886E12, 27351.30434782609], [1.60424754E12, 28350.333333333332], [1.60424784E12, 29561.050000000003], [1.60424844E12, 35812.16666666667], [1.60424814E12, 23498.846153846152], [1.60424904E12, 23624.217391304344], [1.60424874E12, 29595.65], [1.60424742E12, 32694.5238095238], [1.60424772E12, 29618.7619047619], [1.60424832E12, 26404.83333333334], [1.60424802E12, 19766.600000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424916E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60424718E12, "maxY": 25.333333333333336, "series": [{"data": [[1.60424892E12, 0.5833333333333335], [1.60424862E12, 0.35], [1.6042473E12, 0.46666666666666684], [1.6042476E12, 0.7000000000000001], [1.6042482E12, 0.4444444444444444], [1.6042479E12, 0.5], [1.6042488E12, 0.5], [1.6042485E12, 0.5], [1.60424718E12, 25.333333333333336], [1.60424748E12, 0.17391304347826086], [1.6042491E12, 0.5384615384615384], [1.60424778E12, 0.45], [1.60424808E12, 0.5217391304347828], [1.60424868E12, 0.3636363636363636], [1.60424838E12, 0.4545454545454546], [1.60424736E12, 0.7999999999999999], [1.60424898E12, 0.42307692307692313], [1.60424766E12, 0.35], [1.60424796E12, 0.6153846153846155], [1.60424856E12, 0.6190476190476191], [1.60424826E12, 0.15384615384615388], [1.60424916E12, 0.0], [1.60424724E12, 0.5652173913043481], [1.60424886E12, 0.21739130434782608], [1.60424754E12, 0.33333333333333337], [1.60424784E12, 0.4], [1.60424844E12, 0.33333333333333337], [1.60424814E12, 0.46153846153846145], [1.60424904E12, 0.5217391304347826], [1.60424874E12, 0.55], [1.60424742E12, 0.7142857142857144], [1.60424772E12, 0.5238095238095238], [1.60424832E12, 0.5000000000000001], [1.60424802E12, 0.29999999999999993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424916E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3246.0, "minX": 1.60424718E12, "maxY": 45503.0, "series": [{"data": [[1.60424892E12, 28928.0], [1.60424862E12, 29704.0], [1.6042473E12, 23945.0], [1.6042476E12, 30352.0], [1.6042482E12, 28262.0], [1.6042479E12, 29983.0], [1.6042488E12, 30369.0], [1.6042485E12, 30058.0], [1.60424718E12, 8445.0], [1.60424748E12, 30682.0], [1.6042491E12, 38430.0], [1.60424778E12, 29693.0], [1.60424808E12, 32737.0], [1.60424868E12, 29125.0], [1.60424838E12, 27622.0], [1.60424736E12, 44538.0], [1.60424898E12, 27805.0], [1.60424766E12, 30229.0], [1.60424796E12, 28878.0], [1.60424856E12, 29746.0], [1.60424826E12, 32532.0], [1.60424916E12, 17932.0], [1.60424724E12, 28822.0], [1.60424886E12, 29834.0], [1.60424754E12, 30330.0], [1.60424784E12, 29994.0], [1.60424844E12, 43765.0], [1.60424814E12, 26010.0], [1.60424904E12, 29231.0], [1.60424874E12, 30283.0], [1.60424742E12, 45503.0], [1.60424772E12, 30289.0], [1.60424832E12, 32550.0], [1.60424802E12, 22925.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60424892E12, 21781.0], [1.60424862E12, 28470.0], [1.6042473E12, 17817.0], [1.6042476E12, 29431.0], [1.6042482E12, 18877.0], [1.6042479E12, 25918.0], [1.6042488E12, 29431.0], [1.6042485E12, 25589.0], [1.60424718E12, 3246.0], [1.60424748E12, 22861.0], [1.6042491E12, 16908.0], [1.60424778E12, 28235.0], [1.60424808E12, 17888.0], [1.60424868E12, 27075.0], [1.60424838E12, 22396.0], [1.60424736E12, 24274.0], [1.60424898E12, 20910.0], [1.60424766E12, 29524.0], [1.60424796E12, 19298.0], [1.60424856E12, 28936.0], [1.60424826E12, 17682.0], [1.60424916E12, 17294.0], [1.60424724E12, 11456.0], [1.60424886E12, 23986.0], [1.60424754E12, 25019.0], [1.60424784E12, 29096.0], [1.60424844E12, 27613.0], [1.60424814E12, 19282.0], [1.60424904E12, 18635.0], [1.60424874E12, 28879.0], [1.60424742E12, 25055.0], [1.60424772E12, 28696.0], [1.60424832E12, 22751.0], [1.60424802E12, 17830.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60424892E12, 21781.0], [1.60424862E12, 28470.0], [1.6042473E12, 17817.0], [1.6042476E12, 29431.0], [1.6042482E12, 18877.0], [1.6042479E12, 25918.0], [1.6042488E12, 29431.0], [1.6042485E12, 25589.0], [1.60424718E12, 3246.0], [1.60424748E12, 22861.0], [1.6042491E12, 16908.0], [1.60424778E12, 28235.0], [1.60424808E12, 17888.0], [1.60424868E12, 27075.0], [1.60424838E12, 22396.0], [1.60424736E12, 24274.0], [1.60424898E12, 20910.0], [1.60424766E12, 29524.0], [1.60424796E12, 19298.0], [1.60424856E12, 28936.0], [1.60424826E12, 17682.0], [1.60424916E12, 17294.0], [1.60424724E12, 11456.0], [1.60424886E12, 23986.0], [1.60424754E12, 25019.0], [1.60424784E12, 29096.0], [1.60424844E12, 27613.0], [1.60424814E12, 19282.0], [1.60424904E12, 18635.0], [1.60424874E12, 28879.0], [1.60424742E12, 25055.0], [1.60424772E12, 28696.0], [1.60424832E12, 22751.0], [1.60424802E12, 17830.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60424892E12, 21781.0], [1.60424862E12, 28470.0], [1.6042473E12, 17817.0], [1.6042476E12, 29431.0], [1.6042482E12, 18877.0], [1.6042479E12, 25918.0], [1.6042488E12, 29431.0], [1.6042485E12, 25589.0], [1.60424718E12, 3246.0], [1.60424748E12, 22861.0], [1.6042491E12, 16908.0], [1.60424778E12, 28235.0], [1.60424808E12, 17888.0], [1.60424868E12, 27075.0], [1.60424838E12, 22396.0], [1.60424736E12, 24274.0], [1.60424898E12, 20910.0], [1.60424766E12, 29524.0], [1.60424796E12, 19298.0], [1.60424856E12, 28936.0], [1.60424826E12, 17682.0], [1.60424916E12, 17294.0], [1.60424724E12, 11456.0], [1.60424886E12, 23986.0], [1.60424754E12, 25019.0], [1.60424784E12, 29096.0], [1.60424844E12, 27613.0], [1.60424814E12, 19282.0], [1.60424904E12, 18635.0], [1.60424874E12, 28879.0], [1.60424742E12, 25055.0], [1.60424772E12, 28696.0], [1.60424832E12, 22751.0], [1.60424802E12, 17830.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60424892E12, 21781.0], [1.60424862E12, 28470.0], [1.6042473E12, 17817.0], [1.6042476E12, 29431.0], [1.6042482E12, 18877.0], [1.6042479E12, 25918.0], [1.6042488E12, 29431.0], [1.6042485E12, 25589.0], [1.60424718E12, 3246.0], [1.60424748E12, 22861.0], [1.6042491E12, 16908.0], [1.60424778E12, 28235.0], [1.60424808E12, 17888.0], [1.60424868E12, 27075.0], [1.60424838E12, 22396.0], [1.60424736E12, 24274.0], [1.60424898E12, 20910.0], [1.60424766E12, 29524.0], [1.60424796E12, 19298.0], [1.60424856E12, 28936.0], [1.60424826E12, 17682.0], [1.60424916E12, 17294.0], [1.60424724E12, 11456.0], [1.60424886E12, 23986.0], [1.60424754E12, 25019.0], [1.60424784E12, 29096.0], [1.60424844E12, 27613.0], [1.60424814E12, 19282.0], [1.60424904E12, 18635.0], [1.60424874E12, 28879.0], [1.60424742E12, 25055.0], [1.60424772E12, 28696.0], [1.60424832E12, 22751.0], [1.60424802E12, 17830.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60424892E12, 25824.0], [1.60424862E12, 29066.5], [1.6042473E12, 20309.5], [1.6042476E12, 29973.0], [1.6042482E12, 21256.0], [1.6042479E12, 29249.5], [1.6042488E12, 30087.5], [1.6042485E12, 29244.5], [1.60424718E12, 6234.0], [1.60424748E12, 25214.0], [1.6042491E12, 28243.5], [1.60424778E12, 29340.0], [1.60424808E12, 23064.0], [1.60424868E12, 27978.5], [1.60424838E12, 24245.5], [1.60424736E12, 27810.0], [1.60424898E12, 23216.0], [1.60424766E12, 29826.5], [1.60424796E12, 25006.5], [1.60424856E12, 29369.0], [1.60424826E12, 18035.5], [1.60424916E12, 17448.0], [1.60424724E12, 26544.0], [1.60424886E12, 27978.0], [1.60424754E12, 28425.0], [1.60424784E12, 29641.0], [1.60424844E12, 35546.5], [1.60424814E12, 23934.0], [1.60424904E12, 21759.0], [1.60424874E12, 29531.5], [1.60424742E12, 31754.0], [1.60424772E12, 29457.0], [1.60424832E12, 26648.0], [1.60424802E12, 19184.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424916E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27365.0, "minX": 1.0, "maxY": 27365.0, "series": [{"data": [[1.0, 27365.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27362.0, "minX": 1.0, "maxY": 27362.0, "series": [{"data": [[1.0, 27362.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60424718E12, "maxY": 0.5, "series": [{"data": [[1.60424892E12, 0.4], [1.60424862E12, 0.3333333333333333], [1.6042473E12, 0.5], [1.6042476E12, 0.3333333333333333], [1.6042482E12, 0.45], [1.6042479E12, 0.36666666666666664], [1.6042488E12, 0.3333333333333333], [1.6042485E12, 0.3333333333333333], [1.60424718E12, 0.21666666666666667], [1.60424748E12, 0.38333333333333336], [1.6042491E12, 0.4166666666666667], [1.60424778E12, 0.3333333333333333], [1.60424808E12, 0.38333333333333336], [1.60424868E12, 0.36666666666666664], [1.60424838E12, 0.36666666666666664], [1.60424736E12, 0.25], [1.60424898E12, 0.43333333333333335], [1.60424766E12, 0.3333333333333333], [1.60424796E12, 0.43333333333333335], [1.60424856E12, 0.35], [1.60424826E12, 0.43333333333333335], [1.60424724E12, 0.38333333333333336], [1.60424886E12, 0.38333333333333336], [1.60424754E12, 0.35], [1.60424784E12, 0.3333333333333333], [1.60424844E12, 0.3], [1.60424814E12, 0.43333333333333335], [1.60424904E12, 0.38333333333333336], [1.60424874E12, 0.3333333333333333], [1.60424742E12, 0.35], [1.60424772E12, 0.35], [1.60424832E12, 0.4], [1.60424802E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042491E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424718E12, "maxY": 0.5, "series": [{"data": [[1.60424892E12, 0.4], [1.60424862E12, 0.3333333333333333], [1.6042473E12, 0.5], [1.6042476E12, 0.3333333333333333], [1.6042482E12, 0.45], [1.6042479E12, 0.36666666666666664], [1.6042488E12, 0.3333333333333333], [1.6042485E12, 0.3333333333333333], [1.60424718E12, 0.05], [1.60424748E12, 0.38333333333333336], [1.6042491E12, 0.43333333333333335], [1.60424778E12, 0.3333333333333333], [1.60424808E12, 0.38333333333333336], [1.60424868E12, 0.36666666666666664], [1.60424838E12, 0.36666666666666664], [1.60424736E12, 0.25], [1.60424898E12, 0.43333333333333335], [1.60424766E12, 0.3333333333333333], [1.60424796E12, 0.43333333333333335], [1.60424856E12, 0.35], [1.60424826E12, 0.43333333333333335], [1.60424916E12, 0.15], [1.60424724E12, 0.38333333333333336], [1.60424886E12, 0.38333333333333336], [1.60424754E12, 0.35], [1.60424784E12, 0.3333333333333333], [1.60424844E12, 0.3], [1.60424814E12, 0.43333333333333335], [1.60424904E12, 0.38333333333333336], [1.60424874E12, 0.3333333333333333], [1.60424742E12, 0.35], [1.60424772E12, 0.35], [1.60424832E12, 0.4], [1.60424802E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424916E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424718E12, "maxY": 0.5, "series": [{"data": [[1.60424892E12, 0.4], [1.60424862E12, 0.3333333333333333], [1.6042473E12, 0.5], [1.6042476E12, 0.3333333333333333], [1.6042482E12, 0.45], [1.6042479E12, 0.36666666666666664], [1.6042488E12, 0.3333333333333333], [1.6042485E12, 0.3333333333333333], [1.60424718E12, 0.05], [1.60424748E12, 0.38333333333333336], [1.6042491E12, 0.43333333333333335], [1.60424778E12, 0.3333333333333333], [1.60424808E12, 0.38333333333333336], [1.60424868E12, 0.36666666666666664], [1.60424838E12, 0.36666666666666664], [1.60424736E12, 0.25], [1.60424898E12, 0.43333333333333335], [1.60424766E12, 0.3333333333333333], [1.60424796E12, 0.43333333333333335], [1.60424856E12, 0.35], [1.60424826E12, 0.43333333333333335], [1.60424916E12, 0.15], [1.60424724E12, 0.38333333333333336], [1.60424886E12, 0.38333333333333336], [1.60424754E12, 0.35], [1.60424784E12, 0.3333333333333333], [1.60424844E12, 0.3], [1.60424814E12, 0.43333333333333335], [1.60424904E12, 0.38333333333333336], [1.60424874E12, 0.3333333333333333], [1.60424742E12, 0.35], [1.60424772E12, 0.35], [1.60424832E12, 0.4], [1.60424802E12, 0.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424916E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424718E12, "maxY": 0.5, "series": [{"data": [[1.60424892E12, 0.4], [1.60424862E12, 0.3333333333333333], [1.6042473E12, 0.5], [1.6042476E12, 0.3333333333333333], [1.6042482E12, 0.45], [1.6042479E12, 0.36666666666666664], [1.6042488E12, 0.3333333333333333], [1.6042485E12, 0.3333333333333333], [1.60424718E12, 0.05], [1.60424748E12, 0.38333333333333336], [1.6042491E12, 0.43333333333333335], [1.60424778E12, 0.3333333333333333], [1.60424808E12, 0.38333333333333336], [1.60424868E12, 0.36666666666666664], [1.60424838E12, 0.36666666666666664], [1.60424736E12, 0.25], [1.60424898E12, 0.43333333333333335], [1.60424766E12, 0.3333333333333333], [1.60424796E12, 0.43333333333333335], [1.60424856E12, 0.35], [1.60424826E12, 0.43333333333333335], [1.60424916E12, 0.15], [1.60424724E12, 0.38333333333333336], [1.60424886E12, 0.38333333333333336], [1.60424754E12, 0.35], [1.60424784E12, 0.3333333333333333], [1.60424844E12, 0.3], [1.60424814E12, 0.43333333333333335], [1.60424904E12, 0.38333333333333336], [1.60424874E12, 0.3333333333333333], [1.60424742E12, 0.35], [1.60424772E12, 0.35], [1.60424832E12, 0.4], [1.60424802E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424916E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

