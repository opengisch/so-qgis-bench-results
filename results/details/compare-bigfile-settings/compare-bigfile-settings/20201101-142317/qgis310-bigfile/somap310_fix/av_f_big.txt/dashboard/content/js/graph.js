/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3231.0, "minX": 0.0, "maxY": 44980.0, "series": [{"data": [[0.0, 3231.0], [0.1, 3231.0], [0.2, 6291.0], [0.3, 8484.0], [0.4, 8484.0], [0.5, 11408.0], [0.6, 14106.0], [0.7, 16716.0], [0.8, 16716.0], [0.9, 17145.0], [1.0, 17211.0], [1.1, 17219.0], [1.2, 17219.0], [1.3, 17247.0], [1.4, 17338.0], [1.5, 17404.0], [1.6, 17404.0], [1.7, 17418.0], [1.8, 17464.0], [1.9, 17464.0], [2.0, 17479.0], [2.1, 17519.0], [2.2, 17519.0], [2.3, 17519.0], [2.4, 17531.0], [2.5, 17554.0], [2.6, 17610.0], [2.7, 17610.0], [2.8, 17630.0], [2.9, 17688.0], [3.0, 17700.0], [3.1, 17700.0], [3.2, 17709.0], [3.3, 17710.0], [3.4, 17710.0], [3.5, 17756.0], [3.6, 17783.0], [3.7, 17808.0], [3.8, 17808.0], [3.9, 17825.0], [4.0, 17832.0], [4.1, 17847.0], [4.2, 17847.0], [4.3, 17875.0], [4.4, 17926.0], [4.5, 17964.0], [4.6, 17964.0], [4.7, 18018.0], [4.8, 18047.0], [4.9, 18050.0], [5.0, 18050.0], [5.1, 18055.0], [5.2, 18110.0], [5.3, 18110.0], [5.4, 18130.0], [5.5, 18149.0], [5.6, 18167.0], [5.7, 18167.0], [5.8, 18209.0], [5.9, 18260.0], [6.0, 18293.0], [6.1, 18293.0], [6.2, 18310.0], [6.3, 18374.0], [6.4, 18416.0], [6.5, 18416.0], [6.6, 18445.0], [6.7, 18450.0], [6.8, 18450.0], [6.9, 18469.0], [7.0, 18470.0], [7.1, 18481.0], [7.2, 18481.0], [7.3, 18499.0], [7.4, 18520.0], [7.5, 18575.0], [7.6, 18575.0], [7.7, 18585.0], [7.8, 18715.0], [7.9, 18776.0], [8.0, 18776.0], [8.1, 18783.0], [8.2, 18839.0], [8.3, 18930.0], [8.4, 18930.0], [8.5, 18940.0], [8.6, 18966.0], [8.7, 18966.0], [8.8, 19001.0], [8.9, 19015.0], [9.0, 19056.0], [9.1, 19056.0], [9.2, 19084.0], [9.3, 19088.0], [9.4, 19104.0], [9.5, 19104.0], [9.6, 19117.0], [9.7, 19180.0], [9.8, 19261.0], [9.9, 19261.0], [10.0, 19304.0], [10.1, 19439.0], [10.2, 19439.0], [10.3, 19511.0], [10.4, 19525.0], [10.5, 19584.0], [10.6, 19584.0], [10.7, 19633.0], [10.8, 19701.0], [10.9, 19718.0], [11.0, 19718.0], [11.1, 19744.0], [11.2, 19758.0], [11.3, 19778.0], [11.4, 19778.0], [11.5, 19791.0], [11.6, 19813.0], [11.7, 19813.0], [11.8, 19830.0], [11.9, 19837.0], [12.0, 19840.0], [12.1, 19840.0], [12.2, 19878.0], [12.3, 19901.0], [12.4, 19961.0], [12.5, 19961.0], [12.6, 19984.0], [12.7, 19987.0], [12.8, 20036.0], [12.9, 20036.0], [13.0, 20038.0], [13.1, 20043.0], [13.2, 20069.0], [13.3, 20069.0], [13.4, 20107.0], [13.5, 20119.0], [13.6, 20119.0], [13.7, 20149.0], [13.8, 20156.0], [13.9, 20204.0], [14.0, 20204.0], [14.1, 20211.0], [14.2, 20285.0], [14.3, 20307.0], [14.4, 20307.0], [14.5, 20324.0], [14.6, 20327.0], [14.7, 20342.0], [14.8, 20342.0], [14.9, 20461.0], [15.0, 20470.0], [15.1, 20470.0], [15.2, 20485.0], [15.3, 20534.0], [15.4, 20541.0], [15.5, 20541.0], [15.6, 20582.0], [15.7, 20648.0], [15.8, 20654.0], [15.9, 20654.0], [16.0, 20678.0], [16.1, 20760.0], [16.2, 20973.0], [16.3, 20973.0], [16.4, 20982.0], [16.5, 21074.0], [16.6, 21146.0], [16.7, 21146.0], [16.8, 21146.0], [16.9, 21216.0], [17.0, 21216.0], [17.1, 21379.0], [17.2, 21432.0], [17.3, 21516.0], [17.4, 21516.0], [17.5, 21537.0], [17.6, 21554.0], [17.7, 21618.0], [17.8, 21618.0], [17.9, 21677.0], [18.0, 21781.0], [18.1, 21787.0], [18.2, 21787.0], [18.3, 21791.0], [18.4, 21846.0], [18.5, 21846.0], [18.6, 21884.0], [18.7, 21892.0], [18.8, 21902.0], [18.9, 21902.0], [19.0, 21918.0], [19.1, 21932.0], [19.2, 21955.0], [19.3, 21955.0], [19.4, 21961.0], [19.5, 22024.0], [19.6, 22033.0], [19.7, 22033.0], [19.8, 22045.0], [19.9, 22163.0], [20.0, 22188.0], [20.1, 22188.0], [20.2, 22226.0], [20.3, 22231.0], [20.4, 22231.0], [20.5, 22310.0], [20.6, 22323.0], [20.7, 22342.0], [20.8, 22342.0], [20.9, 22369.0], [21.0, 22437.0], [21.1, 22440.0], [21.2, 22440.0], [21.3, 22460.0], [21.4, 22518.0], [21.5, 22520.0], [21.6, 22520.0], [21.7, 22534.0], [21.8, 22554.0], [21.9, 22554.0], [22.0, 22554.0], [22.1, 22625.0], [22.2, 22661.0], [22.3, 22661.0], [22.4, 22757.0], [22.5, 22760.0], [22.6, 22781.0], [22.7, 22781.0], [22.8, 22822.0], [22.9, 22867.0], [23.0, 22870.0], [23.1, 22870.0], [23.2, 22915.0], [23.3, 22953.0], [23.4, 22953.0], [23.5, 22979.0], [23.6, 22995.0], [23.7, 23077.0], [23.8, 23077.0], [23.9, 23088.0], [24.0, 23162.0], [24.1, 23254.0], [24.2, 23254.0], [24.3, 23357.0], [24.4, 23402.0], [24.5, 23419.0], [24.6, 23419.0], [24.7, 23443.0], [24.8, 23504.0], [24.9, 23572.0], [25.0, 23572.0], [25.1, 23613.0], [25.2, 23625.0], [25.3, 23625.0], [25.4, 23644.0], [25.5, 23654.0], [25.6, 23656.0], [25.7, 23656.0], [25.8, 23694.0], [25.9, 23720.0], [26.0, 23739.0], [26.1, 23739.0], [26.2, 23755.0], [26.3, 23766.0], [26.4, 23794.0], [26.5, 23794.0], [26.6, 23796.0], [26.7, 23828.0], [26.8, 23828.0], [26.9, 23830.0], [27.0, 23964.0], [27.1, 23990.0], [27.2, 23990.0], [27.3, 23998.0], [27.4, 24013.0], [27.5, 24033.0], [27.6, 24033.0], [27.7, 24099.0], [27.8, 24117.0], [27.9, 24135.0], [28.0, 24135.0], [28.1, 24144.0], [28.2, 24168.0], [28.3, 24170.0], [28.4, 24170.0], [28.5, 24182.0], [28.6, 24185.0], [28.7, 24185.0], [28.8, 24187.0], [28.9, 24238.0], [29.0, 24263.0], [29.1, 24263.0], [29.2, 24268.0], [29.3, 24274.0], [29.4, 24281.0], [29.5, 24281.0], [29.6, 24283.0], [29.7, 24291.0], [29.8, 24301.0], [29.9, 24301.0], [30.0, 24318.0], [30.1, 24320.0], [30.2, 24320.0], [30.3, 24341.0], [30.4, 24345.0], [30.5, 24355.0], [30.6, 24355.0], [30.7, 24367.0], [30.8, 24429.0], [30.9, 24521.0], [31.0, 24521.0], [31.1, 24522.0], [31.2, 24533.0], [31.3, 24573.0], [31.4, 24573.0], [31.5, 24610.0], [31.6, 24620.0], [31.7, 24620.0], [31.8, 24624.0], [31.9, 24630.0], [32.0, 24662.0], [32.1, 24662.0], [32.2, 24667.0], [32.3, 24687.0], [32.4, 24705.0], [32.5, 24705.0], [32.6, 24711.0], [32.7, 24711.0], [32.8, 24711.0], [32.9, 24711.0], [33.0, 24717.0], [33.1, 24729.0], [33.2, 24744.0], [33.3, 24744.0], [33.4, 24749.0], [33.5, 24752.0], [33.6, 24752.0], [33.7, 24756.0], [33.8, 24791.0], [33.9, 24798.0], [34.0, 24798.0], [34.1, 24822.0], [34.2, 24831.0], [34.3, 24871.0], [34.4, 24871.0], [34.5, 24872.0], [34.6, 24929.0], [34.7, 24974.0], [34.8, 24974.0], [34.9, 24977.0], [35.0, 24978.0], [35.1, 24978.0], [35.2, 24991.0], [35.3, 24999.0], [35.4, 25019.0], [35.5, 25019.0], [35.6, 25041.0], [35.7, 25042.0], [35.8, 25049.0], [35.9, 25049.0], [36.0, 25058.0], [36.1, 25079.0], [36.2, 25101.0], [36.3, 25101.0], [36.4, 25122.0], [36.5, 25132.0], [36.6, 25139.0], [36.7, 25139.0], [36.8, 25161.0], [36.9, 25187.0], [37.0, 25187.0], [37.1, 25190.0], [37.2, 25208.0], [37.3, 25209.0], [37.4, 25209.0], [37.5, 25211.0], [37.6, 25211.0], [37.7, 25264.0], [37.8, 25264.0], [37.9, 25344.0], [38.0, 25376.0], [38.1, 25412.0], [38.2, 25412.0], [38.3, 25428.0], [38.4, 25450.0], [38.5, 25450.0], [38.6, 25454.0], [38.7, 25467.0], [38.8, 25499.0], [38.9, 25499.0], [39.0, 25609.0], [39.1, 25614.0], [39.2, 25651.0], [39.3, 25651.0], [39.4, 25676.0], [39.5, 25708.0], [39.6, 25710.0], [39.7, 25710.0], [39.8, 25733.0], [39.9, 25775.0], [40.0, 25807.0], [40.1, 25807.0], [40.2, 25836.0], [40.3, 25844.0], [40.4, 25844.0], [40.5, 25860.0], [40.6, 25877.0], [40.7, 25906.0], [40.8, 25906.0], [40.9, 25906.0], [41.0, 25955.0], [41.1, 26001.0], [41.2, 26001.0], [41.3, 26016.0], [41.4, 26073.0], [41.5, 26131.0], [41.6, 26131.0], [41.7, 26148.0], [41.8, 26164.0], [41.9, 26164.0], [42.0, 26179.0], [42.1, 26180.0], [42.2, 26192.0], [42.3, 26192.0], [42.4, 26223.0], [42.5, 26249.0], [42.6, 26285.0], [42.7, 26285.0], [42.8, 26307.0], [42.9, 26312.0], [43.0, 26353.0], [43.1, 26353.0], [43.2, 26366.0], [43.3, 26383.0], [43.4, 26383.0], [43.5, 26390.0], [43.6, 26429.0], [43.7, 26435.0], [43.8, 26435.0], [43.9, 26503.0], [44.0, 26514.0], [44.1, 26515.0], [44.2, 26515.0], [44.3, 26525.0], [44.4, 26537.0], [44.5, 26549.0], [44.6, 26549.0], [44.7, 26561.0], [44.8, 26604.0], [44.9, 26606.0], [45.0, 26606.0], [45.1, 26607.0], [45.2, 26608.0], [45.3, 26608.0], [45.4, 26634.0], [45.5, 26637.0], [45.6, 26675.0], [45.7, 26675.0], [45.8, 26705.0], [45.9, 26730.0], [46.0, 26732.0], [46.1, 26732.0], [46.2, 26761.0], [46.3, 26791.0], [46.4, 26847.0], [46.5, 26847.0], [46.6, 26852.0], [46.7, 26870.0], [46.8, 26870.0], [46.9, 26904.0], [47.0, 26912.0], [47.1, 27022.0], [47.2, 27022.0], [47.3, 27026.0], [47.4, 27039.0], [47.5, 27048.0], [47.6, 27048.0], [47.7, 27088.0], [47.8, 27149.0], [47.9, 27162.0], [48.0, 27162.0], [48.1, 27164.0], [48.2, 27171.0], [48.3, 27174.0], [48.4, 27174.0], [48.5, 27176.0], [48.6, 27202.0], [48.7, 27202.0], [48.8, 27240.0], [48.9, 27241.0], [49.0, 27355.0], [49.1, 27355.0], [49.2, 27371.0], [49.3, 27372.0], [49.4, 27379.0], [49.5, 27379.0], [49.6, 27429.0], [49.7, 27464.0], [49.8, 27474.0], [49.9, 27474.0], [50.0, 27527.0], [50.1, 27581.0], [50.2, 27581.0], [50.3, 27612.0], [50.4, 27621.0], [50.5, 27629.0], [50.6, 27629.0], [50.7, 27660.0], [50.8, 27680.0], [50.9, 27687.0], [51.0, 27687.0], [51.1, 27734.0], [51.2, 27763.0], [51.3, 27783.0], [51.4, 27783.0], [51.5, 27847.0], [51.6, 27858.0], [51.7, 27858.0], [51.8, 27876.0], [51.9, 27895.0], [52.0, 27923.0], [52.1, 27923.0], [52.2, 28002.0], [52.3, 28008.0], [52.4, 28055.0], [52.5, 28055.0], [52.6, 28128.0], [52.7, 28153.0], [52.8, 28162.0], [52.9, 28162.0], [53.0, 28171.0], [53.1, 28189.0], [53.2, 28199.0], [53.3, 28199.0], [53.4, 28206.0], [53.5, 28217.0], [53.6, 28217.0], [53.7, 28231.0], [53.8, 28233.0], [53.9, 28241.0], [54.0, 28241.0], [54.1, 28252.0], [54.2, 28256.0], [54.3, 28262.0], [54.4, 28262.0], [54.5, 28266.0], [54.6, 28269.0], [54.7, 28270.0], [54.8, 28270.0], [54.9, 28290.0], [55.0, 28297.0], [55.1, 28297.0], [55.2, 28327.0], [55.3, 28353.0], [55.4, 28355.0], [55.5, 28355.0], [55.6, 28371.0], [55.7, 28375.0], [55.8, 28386.0], [55.9, 28386.0], [56.0, 28392.0], [56.1, 28414.0], [56.2, 28500.0], [56.3, 28500.0], [56.4, 28561.0], [56.5, 28592.0], [56.6, 28600.0], [56.7, 28600.0], [56.8, 28636.0], [56.9, 28655.0], [57.0, 28655.0], [57.1, 28679.0], [57.2, 28682.0], [57.3, 28692.0], [57.4, 28692.0], [57.5, 28727.0], [57.6, 28736.0], [57.7, 28776.0], [57.8, 28776.0], [57.9, 28787.0], [58.0, 28797.0], [58.1, 28828.0], [58.2, 28828.0], [58.3, 28832.0], [58.4, 28860.0], [58.5, 28860.0], [58.6, 28877.0], [58.7, 28889.0], [58.8, 28909.0], [58.9, 28909.0], [59.0, 28939.0], [59.1, 28958.0], [59.2, 28959.0], [59.3, 28959.0], [59.4, 28959.0], [59.5, 28969.0], [59.6, 28971.0], [59.7, 28971.0], [59.8, 28982.0], [59.9, 28984.0], [60.0, 29009.0], [60.1, 29009.0], [60.2, 29068.0], [60.3, 29073.0], [60.4, 29073.0], [60.5, 29086.0], [60.6, 29104.0], [60.7, 29150.0], [60.8, 29150.0], [60.9, 29152.0], [61.0, 29162.0], [61.1, 29165.0], [61.2, 29165.0], [61.3, 29184.0], [61.4, 29195.0], [61.5, 29197.0], [61.6, 29197.0], [61.7, 29199.0], [61.8, 29203.0], [61.9, 29203.0], [62.0, 29211.0], [62.1, 29214.0], [62.2, 29216.0], [62.3, 29216.0], [62.4, 29228.0], [62.5, 29232.0], [62.6, 29233.0], [62.7, 29233.0], [62.8, 29241.0], [62.9, 29244.0], [63.0, 29246.0], [63.1, 29246.0], [63.2, 29263.0], [63.3, 29272.0], [63.4, 29272.0], [63.5, 29274.0], [63.6, 29278.0], [63.7, 29289.0], [63.8, 29289.0], [63.9, 29292.0], [64.0, 29309.0], [64.1, 29311.0], [64.2, 29311.0], [64.3, 29335.0], [64.4, 29337.0], [64.5, 29338.0], [64.6, 29338.0], [64.7, 29342.0], [64.8, 29349.0], [64.9, 29358.0], [65.0, 29358.0], [65.1, 29367.0], [65.2, 29370.0], [65.3, 29370.0], [65.4, 29372.0], [65.5, 29380.0], [65.6, 29387.0], [65.7, 29387.0], [65.8, 29390.0], [65.9, 29396.0], [66.0, 29403.0], [66.1, 29403.0], [66.2, 29404.0], [66.3, 29410.0], [66.4, 29413.0], [66.5, 29413.0], [66.6, 29414.0], [66.7, 29414.0], [66.8, 29414.0], [66.9, 29416.0], [67.0, 29431.0], [67.1, 29431.0], [67.2, 29431.0], [67.3, 29433.0], [67.4, 29443.0], [67.5, 29444.0], [67.6, 29444.0], [67.7, 29445.0], [67.8, 29447.0], [67.9, 29447.0], [68.0, 29447.0], [68.1, 29449.0], [68.2, 29459.0], [68.3, 29463.0], [68.4, 29463.0], [68.5, 29467.0], [68.6, 29473.0], [68.7, 29473.0], [68.8, 29473.0], [68.9, 29478.0], [69.0, 29510.0], [69.1, 29510.0], [69.2, 29520.0], [69.3, 29550.0], [69.4, 29564.0], [69.5, 29564.0], [69.6, 29566.0], [69.7, 29575.0], [69.8, 29591.0], [69.9, 29591.0], [70.0, 29591.0], [70.1, 29593.0], [70.2, 29593.0], [70.3, 29596.0], [70.4, 29599.0], [70.5, 29607.0], [70.6, 29607.0], [70.7, 29610.0], [70.8, 29611.0], [70.9, 29619.0], [71.0, 29619.0], [71.1, 29625.0], [71.2, 29627.0], [71.3, 29630.0], [71.4, 29630.0], [71.5, 29630.0], [71.6, 29634.0], [71.7, 29634.0], [71.8, 29641.0], [71.9, 29642.0], [72.0, 29642.0], [72.1, 29642.0], [72.2, 29650.0], [72.3, 29674.0], [72.4, 29683.0], [72.5, 29683.0], [72.6, 29684.0], [72.7, 29685.0], [72.8, 29687.0], [72.9, 29687.0], [73.0, 29693.0], [73.1, 29697.0], [73.2, 29701.0], [73.3, 29701.0], [73.4, 29722.0], [73.5, 29730.0], [73.6, 29730.0], [73.7, 29732.0], [73.8, 29732.0], [73.9, 29739.0], [74.0, 29739.0], [74.1, 29741.0], [74.2, 29744.0], [74.3, 29750.0], [74.4, 29750.0], [74.5, 29758.0], [74.6, 29760.0], [74.7, 29763.0], [74.8, 29763.0], [74.9, 29770.0], [75.0, 29780.0], [75.1, 29780.0], [75.2, 29790.0], [75.3, 29791.0], [75.4, 29793.0], [75.5, 29793.0], [75.6, 29799.0], [75.7, 29804.0], [75.8, 29812.0], [75.9, 29812.0], [76.0, 29832.0], [76.1, 29840.0], [76.2, 29840.0], [76.3, 29840.0], [76.4, 29840.0], [76.5, 29841.0], [76.6, 29848.0], [76.7, 29848.0], [76.8, 29868.0], [76.9, 29878.0], [77.0, 29878.0], [77.1, 29880.0], [77.2, 29886.0], [77.3, 29887.0], [77.4, 29887.0], [77.5, 29890.0], [77.6, 29907.0], [77.7, 29910.0], [77.8, 29910.0], [77.9, 29912.0], [78.0, 29915.0], [78.1, 29915.0], [78.2, 29915.0], [78.3, 29926.0], [78.4, 29927.0], [78.5, 29927.0], [78.6, 29931.0], [78.7, 29932.0], [78.8, 29933.0], [78.9, 29933.0], [79.0, 29936.0], [79.1, 29938.0], [79.2, 29939.0], [79.3, 29939.0], [79.4, 29941.0], [79.5, 29946.0], [79.6, 29947.0], [79.7, 29947.0], [79.8, 29952.0], [79.9, 29965.0], [80.0, 29969.0], [80.1, 29969.0], [80.2, 29970.0], [80.3, 29986.0], [80.4, 29986.0], [80.5, 29993.0], [80.6, 29994.0], [80.7, 30005.0], [80.8, 30005.0], [80.9, 30009.0], [81.0, 30017.0], [81.1, 30018.0], [81.2, 30018.0], [81.3, 30019.0], [81.4, 30021.0], [81.5, 30034.0], [81.6, 30034.0], [81.7, 30036.0], [81.8, 30042.0], [81.9, 30042.0], [82.0, 30044.0], [82.1, 30053.0], [82.2, 30062.0], [82.3, 30062.0], [82.4, 30067.0], [82.5, 30077.0], [82.6, 30083.0], [82.7, 30083.0], [82.8, 30087.0], [82.9, 30098.0], [83.0, 30112.0], [83.1, 30112.0], [83.2, 30113.0], [83.3, 30120.0], [83.4, 30120.0], [83.5, 30142.0], [83.6, 30151.0], [83.7, 30152.0], [83.8, 30152.0], [83.9, 30153.0], [84.0, 30153.0], [84.1, 30155.0], [84.2, 30155.0], [84.3, 30155.0], [84.4, 30162.0], [84.5, 30163.0], [84.6, 30163.0], [84.7, 30168.0], [84.8, 30175.0], [84.9, 30181.0], [85.0, 30181.0], [85.1, 30183.0], [85.2, 30184.0], [85.3, 30184.0], [85.4, 30185.0], [85.5, 30185.0], [85.6, 30186.0], [85.7, 30186.0], [85.8, 30188.0], [85.9, 30190.0], [86.0, 30190.0], [86.1, 30190.0], [86.2, 30199.0], [86.3, 30206.0], [86.4, 30206.0], [86.5, 30206.0], [86.6, 30208.0], [86.7, 30219.0], [86.8, 30219.0], [86.9, 30226.0], [87.0, 30244.0], [87.1, 30256.0], [87.2, 30256.0], [87.3, 30275.0], [87.4, 30293.0], [87.5, 30298.0], [87.6, 30298.0], [87.7, 30327.0], [87.8, 30330.0], [87.9, 30339.0], [88.0, 30339.0], [88.1, 30340.0], [88.2, 30342.0], [88.3, 30350.0], [88.4, 30350.0], [88.5, 30355.0], [88.6, 30364.0], [88.7, 30364.0], [88.8, 30380.0], [88.9, 30384.0], [89.0, 30392.0], [89.1, 30392.0], [89.2, 30405.0], [89.3, 30409.0], [89.4, 30410.0], [89.5, 30410.0], [89.6, 30432.0], [89.7, 30436.0], [89.8, 30438.0], [89.9, 30438.0], [90.0, 30441.0], [90.1, 30468.0], [90.2, 30468.0], [90.3, 30473.0], [90.4, 30485.0], [90.5, 30488.0], [90.6, 30488.0], [90.7, 30492.0], [90.8, 30493.0], [90.9, 30501.0], [91.0, 30501.0], [91.1, 30516.0], [91.2, 30529.0], [91.3, 30545.0], [91.4, 30545.0], [91.5, 30604.0], [91.6, 30610.0], [91.7, 30610.0], [91.8, 30624.0], [91.9, 30633.0], [92.0, 30647.0], [92.1, 30647.0], [92.2, 30650.0], [92.3, 30655.0], [92.4, 30660.0], [92.5, 30660.0], [92.6, 30666.0], [92.7, 30700.0], [92.8, 30736.0], [92.9, 30736.0], [93.0, 30745.0], [93.1, 30835.0], [93.2, 30846.0], [93.3, 30846.0], [93.4, 30890.0], [93.5, 30901.0], [93.6, 30901.0], [93.7, 30904.0], [93.8, 31175.0], [93.9, 31830.0], [94.0, 31830.0], [94.1, 31895.0], [94.2, 31933.0], [94.3, 31973.0], [94.4, 31973.0], [94.5, 32005.0], [94.6, 32015.0], [94.7, 32172.0], [94.8, 32172.0], [94.9, 32323.0], [95.0, 32376.0], [95.1, 32376.0], [95.2, 32710.0], [95.3, 32799.0], [95.4, 32874.0], [95.5, 32874.0], [95.6, 33049.0], [95.7, 33524.0], [95.8, 33607.0], [95.9, 33607.0], [96.0, 33959.0], [96.1, 34042.0], [96.2, 34080.0], [96.3, 34080.0], [96.4, 34270.0], [96.5, 34914.0], [96.6, 35061.0], [96.7, 35061.0], [96.8, 35478.0], [96.9, 36273.0], [97.0, 36273.0], [97.1, 36422.0], [97.2, 36749.0], [97.3, 36958.0], [97.4, 36958.0], [97.5, 37848.0], [97.6, 37989.0], [97.7, 38147.0], [97.8, 38147.0], [97.9, 38713.0], [98.0, 39228.0], [98.1, 40421.0], [98.2, 40421.0], [98.3, 41304.0], [98.4, 41536.0], [98.5, 41536.0], [98.6, 42043.0], [98.7, 42589.0], [98.8, 42666.0], [98.9, 42666.0], [99.0, 42796.0], [99.1, 43259.0], [99.2, 43661.0], [99.3, 43661.0], [99.4, 43780.0], [99.5, 44145.0], [99.6, 44289.0], [99.7, 44289.0], [99.8, 44650.0], [99.9, 44980.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 24.0, "series": [{"data": [[33500.0, 1.0], [33900.0, 1.0], [34900.0, 1.0], [36700.0, 1.0], [37900.0, 1.0], [38700.0, 1.0], [36900.0, 1.0], [38100.0, 1.0], [41300.0, 1.0], [42700.0, 1.0], [41500.0, 1.0], [42500.0, 1.0], [44100.0, 1.0], [43700.0, 1.0], [44900.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8400.0, 1.0], [11400.0, 1.0], [14100.0, 1.0], [16700.0, 1.0], [17400.0, 4.0], [17100.0, 1.0], [17200.0, 3.0], [17300.0, 1.0], [18200.0, 3.0], [18400.0, 7.0], [18300.0, 2.0], [18000.0, 4.0], [18100.0, 4.0], [17800.0, 5.0], [17900.0, 2.0], [17600.0, 3.0], [17500.0, 4.0], [17700.0, 5.0], [18500.0, 3.0], [18800.0, 1.0], [19100.0, 3.0], [19000.0, 5.0], [18700.0, 3.0], [18900.0, 3.0], [19200.0, 1.0], [19400.0, 1.0], [19300.0, 1.0], [19700.0, 6.0], [20000.0, 4.0], [19500.0, 3.0], [20300.0, 4.0], [20400.0, 3.0], [20200.0, 3.0], [20100.0, 4.0], [19800.0, 5.0], [19600.0, 1.0], [19900.0, 4.0], [21300.0, 1.0], [20900.0, 2.0], [20500.0, 3.0], [20600.0, 3.0], [21100.0, 2.0], [21200.0, 1.0], [20700.0, 1.0], [21500.0, 3.0], [21000.0, 1.0], [21400.0, 1.0], [22300.0, 4.0], [22100.0, 2.0], [21800.0, 3.0], [22200.0, 2.0], [22000.0, 3.0], [21900.0, 5.0], [22400.0, 3.0], [22500.0, 5.0], [21600.0, 2.0], [21700.0, 3.0], [22700.0, 3.0], [22800.0, 3.0], [23000.0, 2.0], [22900.0, 4.0], [23500.0, 2.0], [22600.0, 2.0], [23300.0, 1.0], [23400.0, 3.0], [23100.0, 1.0], [23200.0, 1.0], [23800.0, 2.0], [24100.0, 8.0], [24000.0, 3.0], [24300.0, 7.0], [24500.0, 4.0], [24400.0, 1.0], [23900.0, 3.0], [24200.0, 7.0], [23600.0, 6.0], [23700.0, 6.0], [24700.0, 12.0], [25200.0, 5.0], [24600.0, 7.0], [24800.0, 4.0], [25400.0, 6.0], [24900.0, 6.0], [25100.0, 7.0], [25300.0, 2.0], [25000.0, 6.0], [25800.0, 5.0], [26300.0, 6.0], [26200.0, 3.0], [26600.0, 7.0], [26500.0, 7.0], [25900.0, 3.0], [26000.0, 3.0], [26400.0, 2.0], [26100.0, 6.0], [25600.0, 4.0], [25700.0, 4.0], [26700.0, 5.0], [27300.0, 4.0], [27000.0, 5.0], [27100.0, 6.0], [27600.0, 6.0], [26800.0, 3.0], [26900.0, 2.0], [27400.0, 3.0], [27500.0, 2.0], [27200.0, 3.0], [27800.0, 4.0], [28100.0, 6.0], [28600.0, 6.0], [28200.0, 13.0], [27700.0, 3.0], [28300.0, 7.0], [28400.0, 1.0], [28000.0, 3.0], [27900.0, 1.0], [28500.0, 3.0], [28900.0, 9.0], [29600.0, 20.0], [29200.0, 16.0], [29300.0, 15.0], [29400.0, 22.0], [29500.0, 11.0], [29000.0, 4.0], [29100.0, 9.0], [28800.0, 5.0], [28700.0, 5.0], [29900.0, 23.0], [30100.0, 24.0], [30700.0, 3.0], [30000.0, 17.0], [29700.0, 18.0], [29800.0, 14.0], [30200.0, 10.0], [30400.0, 13.0], [30300.0, 11.0], [30600.0, 9.0], [30500.0, 4.0], [31100.0, 1.0], [30800.0, 3.0], [30900.0, 2.0], [32100.0, 1.0], [32000.0, 2.0], [31900.0, 2.0], [31800.0, 2.0], [32700.0, 2.0], [32300.0, 2.0], [34000.0, 2.0], [33000.0, 1.0], [32800.0, 1.0], [34200.0, 1.0], [33600.0, 1.0], [36400.0, 1.0], [36200.0, 1.0], [35400.0, 1.0], [35000.0, 1.0], [37800.0, 1.0], [39200.0, 1.0], [40400.0, 1.0], [42000.0, 1.0], [42600.0, 1.0], [43200.0, 1.0], [43600.0, 1.0], [44600.0, 1.0], [44200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.352941176470588, "minX": 1.6042407E12, "maxY": 10.0, "series": [{"data": [[1.60424112E12, 10.0], [1.60424214E12, 10.0], [1.60424082E12, 10.0], [1.60424244E12, 10.0], [1.60424124E12, 10.0], [1.60424094E12, 10.0], [1.60424184E12, 10.0], [1.60424154E12, 10.0], [1.604241E12, 10.0], [1.6042407E12, 10.0], [1.6042416E12, 10.0], [1.60424262E12, 10.0], [1.6042413E12, 10.0], [1.60424202E12, 10.0], [1.60424142E12, 10.0], [1.60424232E12, 10.0], [1.60424172E12, 10.0], [1.60424148E12, 10.0], [1.60424178E12, 10.0], [1.60424118E12, 10.0], [1.60424208E12, 10.0], [1.6042425E12, 10.0], [1.60424088E12, 10.0], [1.6042419E12, 10.0], [1.6042422E12, 10.0], [1.60424226E12, 10.0], [1.60424256E12, 10.0], [1.60424166E12, 10.0], [1.60424196E12, 10.0], [1.60424076E12, 10.0], [1.60424136E12, 10.0], [1.60424238E12, 10.0], [1.60424106E12, 10.0], [1.60424268E12, 7.352941176470588]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424268E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17338.0, "minX": 1.0, "maxY": 26657.09779614325, "series": [{"data": [[8.0, 17519.0], [4.0, 17338.0], [2.0, 17404.0], [1.0, 17808.0], [9.0, 17610.0], [10.0, 26657.09779614325], [5.0, 17464.0], [6.0, 17531.0], [3.0, 17418.0], [7.0, 17519.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26545.121088435375]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.95, "minX": 1.6042407E12, "maxY": 205243.96666666667, "series": [{"data": [[1.60424112E12, 45941.433333333334], [1.60424214E12, 45127.46666666667], [1.60424082E12, 61422.65], [1.60424244E12, 25752.916666666668], [1.60424124E12, 59399.51666666667], [1.60424094E12, 66454.13333333333], [1.60424184E12, 69278.15], [1.60424154E12, 169706.41666666666], [1.604241E12, 51595.2], [1.6042407E12, 37759.666666666664], [1.6042416E12, 65265.916666666664], [1.60424262E12, 75910.58333333333], [1.6042413E12, 41653.05], [1.60424202E12, 44120.48333333333], [1.60424142E12, 33147.066666666666], [1.60424232E12, 49117.35], [1.60424172E12, 134791.8], [1.60424148E12, 36534.78333333333], [1.60424178E12, 64369.833333333336], [1.60424118E12, 43885.53333333333], [1.60424208E12, 49737.75], [1.6042425E12, 28062.133333333335], [1.60424088E12, 142357.53333333333], [1.6042419E12, 69116.76666666666], [1.6042422E12, 55610.45], [1.60424226E12, 46749.9], [1.60424256E12, 155302.66666666666], [1.60424166E12, 169767.26666666666], [1.60424196E12, 29651.166666666668], [1.60424076E12, 205243.96666666667], [1.60424136E12, 44656.86666666667], [1.60424238E12, 43275.15], [1.60424106E12, 49881.38333333333], [1.60424268E12, 12796.966666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60424112E12, 146.13333333333333], [1.60424214E12, 146.11666666666667], [1.60424082E12, 207.81666666666666], [1.60424244E12, 175.01666666666668], [1.60424124E12, 153.76666666666668], [1.60424094E12, 153.41666666666666], [1.60424184E12, 177.85], [1.60424154E12, 215.76666666666668], [1.604241E12, 176.61666666666667], [1.6042407E12, 21.95], [1.6042416E12, 174.63333333333333], [1.60424262E12, 158.95], [1.6042413E12, 146.01666666666668], [1.60424202E12, 146.11666666666667], [1.60424142E12, 153.38333333333333], [1.60424232E12, 146.1], [1.60424172E12, 189.45], [1.60424148E12, 182.63333333333333], [1.60424178E12, 189.25], [1.60424118E12, 138.8], [1.60424208E12, 146.15], [1.6042425E12, 175.38333333333333], [1.60424088E12, 120.78333333333333], [1.6042419E12, 169.21666666666667], [1.6042422E12, 161.7], [1.60424226E12, 146.11666666666667], [1.60424256E12, 188.06666666666666], [1.60424166E12, 172.43333333333334], [1.60424196E12, 116.9], [1.60424076E12, 176.51666666666668], [1.60424136E12, 146.01666666666668], [1.60424238E12, 160.58333333333334], [1.60424106E12, 146.11666666666667], [1.60424268E12, 113.51666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424268E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6002.0, "minX": 1.6042407E12, "maxY": 37521.5, "series": [{"data": [[1.60424112E12, 30347.550000000003], [1.60424214E12, 29397.899999999998], [1.60424082E12, 20148.379310344833], [1.60424244E12, 25514.375], [1.60424124E12, 29764.761904761912], [1.60424094E12, 31370.857142857138], [1.60424184E12, 27450.625], [1.60424154E12, 20030.700000000004], [1.604241E12, 25596.0], [1.6042407E12, 6002.0], [1.6042416E12, 24482.399999999998], [1.60424262E12, 29696.0], [1.6042413E12, 29725.75], [1.60424202E12, 29978.7], [1.60424142E12, 28601.142857142862], [1.60424232E12, 29641.699999999997], [1.60424172E12, 23591.538461538457], [1.60424148E12, 25526.000000000004], [1.60424178E12, 19885.74074074074], [1.60424118E12, 30103.842105263157], [1.60424208E12, 30008.500000000004], [1.6042425E12, 24320.041666666668], [1.60424088E12, 32636.0625], [1.6042419E12, 24721.043478260868], [1.6042422E12, 28350.090909090908], [1.60424226E12, 29365.7], [1.60424256E12, 22665.73076923077], [1.60424166E12, 23924.791666666664], [1.60424196E12, 37521.5], [1.60424076E12, 24311.54166666667], [1.60424136E12, 29988.25], [1.60424238E12, 28396.0], [1.60424106E12, 28721.699999999997], [1.60424268E12, 17530.117647058825]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424268E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5997.0, "minX": 1.6042407E12, "maxY": 37520.75, "series": [{"data": [[1.60424112E12, 30346.4], [1.60424214E12, 29396.800000000003], [1.60424082E12, 20146.793103448275], [1.60424244E12, 25514.041666666668], [1.60424124E12, 29763.38095238095], [1.60424094E12, 31369.095238095237], [1.60424184E12, 27449.083333333336], [1.60424154E12, 20027.033333333333], [1.604241E12, 25594.749999999996], [1.6042407E12, 5997.0], [1.6042416E12, 24479.800000000007], [1.60424262E12, 29693.454545454544], [1.6042413E12, 29724.75], [1.60424202E12, 29977.649999999998], [1.60424142E12, 28600.333333333336], [1.60424232E12, 29640.35], [1.60424172E12, 23589.076923076922], [1.60424148E12, 25525.159999999996], [1.60424178E12, 19883.92592592593], [1.60424118E12, 30102.736842105263], [1.60424208E12, 30007.05], [1.6042425E12, 24319.41666666667], [1.60424088E12, 32631.562499999996], [1.6042419E12, 24719.608695652172], [1.6042422E12, 28348.68181818182], [1.60424226E12, 29364.350000000002], [1.60424256E12, 22661.69230769231], [1.60424166E12, 23920.958333333332], [1.60424196E12, 37520.75], [1.60424076E12, 24308.333333333332], [1.60424136E12, 29987.0], [1.60424238E12, 28395.272727272724], [1.60424106E12, 28720.399999999998], [1.60424268E12, 17527.941176470587]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424268E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1875, "minX": 1.6042407E12, "maxY": 45.666666666666664, "series": [{"data": [[1.60424112E12, 0.6], [1.60424214E12, 0.25], [1.60424082E12, 0.5517241379310345], [1.60424244E12, 0.625], [1.60424124E12, 0.6666666666666667], [1.60424094E12, 0.6666666666666667], [1.60424184E12, 0.375], [1.60424154E12, 0.3333333333333333], [1.604241E12, 0.3333333333333333], [1.6042407E12, 45.666666666666664], [1.6042416E12, 0.36], [1.60424262E12, 0.5], [1.6042413E12, 0.39999999999999997], [1.60424202E12, 0.7000000000000001], [1.60424142E12, 0.6666666666666667], [1.60424232E12, 0.19999999999999998], [1.60424172E12, 0.30769230769230765], [1.60424148E12, 0.6], [1.60424178E12, 0.5185185185185187], [1.60424118E12, 0.6315789473684212], [1.60424208E12, 0.65], [1.6042425E12, 0.5], [1.60424088E12, 0.8749999999999999], [1.6042419E12, 0.4782608695652174], [1.6042422E12, 0.45454545454545453], [1.60424226E12, 0.7000000000000001], [1.60424256E12, 0.26923076923076933], [1.60424166E12, 0.25], [1.60424196E12, 0.1875], [1.60424076E12, 0.6666666666666667], [1.60424136E12, 0.3], [1.60424238E12, 0.45454545454545453], [1.60424106E12, 0.35000000000000003], [1.60424268E12, 0.41176470588235303]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424268E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3231.0, "minX": 1.6042407E12, "maxY": 44980.0, "series": [{"data": [[1.60424112E12, 30890.0], [1.60424214E12, 29674.0], [1.60424082E12, 23077.0], [1.60424244E12, 29104.0], [1.60424124E12, 30256.0], [1.60424094E12, 44289.0], [1.60424184E12, 32799.0], [1.60424154E12, 22625.0], [1.604241E12, 30745.0], [1.6042407E12, 8484.0], [1.6042416E12, 32015.0], [1.60424262E12, 38147.0], [1.6042413E12, 30384.0], [1.60424202E12, 32376.0], [1.60424142E12, 30409.0], [1.60424232E12, 29939.0], [1.60424172E12, 28787.0], [1.60424148E12, 28860.0], [1.60424178E12, 30432.0], [1.60424118E12, 30405.0], [1.60424208E12, 30545.0], [1.6042425E12, 28392.0], [1.60424088E12, 44650.0], [1.6042419E12, 26353.0], [1.6042422E12, 29550.0], [1.60424226E12, 29970.0], [1.60424256E12, 28636.0], [1.60424166E12, 26604.0], [1.60424196E12, 44980.0], [1.60424076E12, 28600.0], [1.60424136E12, 30516.0], [1.60424238E12, 29447.0], [1.60424106E12, 30293.0], [1.60424268E12, 18520.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60424112E12, 29697.0], [1.60424214E12, 29152.0], [1.60424082E12, 18018.0], [1.60424244E12, 21537.0], [1.60424124E12, 29311.0], [1.60424094E12, 24573.0], [1.60424184E12, 23162.0], [1.60424154E12, 18374.0], [1.604241E12, 22760.0], [1.6042407E12, 3231.0], [1.6042416E12, 18050.0], [1.60424262E12, 19961.0], [1.6042413E12, 29068.0], [1.60424202E12, 26608.0], [1.60424142E12, 26390.0], [1.60424232E12, 29338.0], [1.60424172E12, 19511.0], [1.60424148E12, 22231.0], [1.60424178E12, 17479.0], [1.60424118E12, 29693.0], [1.60424208E12, 29214.0], [1.6042425E12, 21216.0], [1.60424088E12, 23990.0], [1.6042419E12, 22915.0], [1.6042422E12, 27474.0], [1.60424226E12, 28561.0], [1.60424256E12, 18930.0], [1.60424166E12, 19878.0], [1.60424196E12, 28290.0], [1.60424076E12, 11408.0], [1.60424136E12, 29593.0], [1.60424238E12, 25450.0], [1.60424106E12, 25428.0], [1.60424268E12, 17145.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60424112E12, 29697.0], [1.60424214E12, 29152.0], [1.60424082E12, 18018.0], [1.60424244E12, 21537.0], [1.60424124E12, 29311.0], [1.60424094E12, 24573.0], [1.60424184E12, 23162.0], [1.60424154E12, 18374.0], [1.604241E12, 22760.0], [1.6042407E12, 3231.0], [1.6042416E12, 18050.0], [1.60424262E12, 19961.0], [1.6042413E12, 29068.0], [1.60424202E12, 26608.0], [1.60424142E12, 26390.0], [1.60424232E12, 29338.0], [1.60424172E12, 19511.0], [1.60424148E12, 22231.0], [1.60424178E12, 17479.0], [1.60424118E12, 29693.0], [1.60424208E12, 29214.0], [1.6042425E12, 21216.0], [1.60424088E12, 23990.0], [1.6042419E12, 22915.0], [1.6042422E12, 27474.0], [1.60424226E12, 28561.0], [1.60424256E12, 18930.0], [1.60424166E12, 19878.0], [1.60424196E12, 28290.0], [1.60424076E12, 11408.0], [1.60424136E12, 29593.0], [1.60424238E12, 25450.0], [1.60424106E12, 25428.0], [1.60424268E12, 17145.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60424112E12, 29697.0], [1.60424214E12, 29152.0], [1.60424082E12, 18018.0], [1.60424244E12, 21537.0], [1.60424124E12, 29311.0], [1.60424094E12, 24573.0], [1.60424184E12, 23162.0], [1.60424154E12, 18374.0], [1.604241E12, 22760.0], [1.6042407E12, 3231.0], [1.6042416E12, 18050.0], [1.60424262E12, 19961.0], [1.6042413E12, 29068.0], [1.60424202E12, 26608.0], [1.60424142E12, 26390.0], [1.60424232E12, 29338.0], [1.60424172E12, 19511.0], [1.60424148E12, 22231.0], [1.60424178E12, 17479.0], [1.60424118E12, 29693.0], [1.60424208E12, 29214.0], [1.6042425E12, 21216.0], [1.60424088E12, 23990.0], [1.6042419E12, 22915.0], [1.6042422E12, 27474.0], [1.60424226E12, 28561.0], [1.60424256E12, 18930.0], [1.60424166E12, 19878.0], [1.60424196E12, 28290.0], [1.60424076E12, 11408.0], [1.60424136E12, 29593.0], [1.60424238E12, 25450.0], [1.60424106E12, 25428.0], [1.60424268E12, 17145.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60424112E12, 29697.0], [1.60424214E12, 29152.0], [1.60424082E12, 18018.0], [1.60424244E12, 21537.0], [1.60424124E12, 29311.0], [1.60424094E12, 24573.0], [1.60424184E12, 23162.0], [1.60424154E12, 18374.0], [1.604241E12, 22760.0], [1.6042407E12, 3231.0], [1.6042416E12, 18050.0], [1.60424262E12, 19961.0], [1.6042413E12, 29068.0], [1.60424202E12, 26608.0], [1.60424142E12, 26390.0], [1.60424232E12, 29338.0], [1.60424172E12, 19511.0], [1.60424148E12, 22231.0], [1.60424178E12, 17479.0], [1.60424118E12, 29693.0], [1.60424208E12, 29214.0], [1.6042425E12, 21216.0], [1.60424088E12, 23990.0], [1.6042419E12, 22915.0], [1.6042422E12, 27474.0], [1.60424226E12, 28561.0], [1.60424256E12, 18930.0], [1.60424166E12, 19878.0], [1.60424196E12, 28290.0], [1.60424076E12, 11408.0], [1.60424136E12, 29593.0], [1.60424238E12, 25450.0], [1.60424106E12, 25428.0], [1.60424268E12, 17145.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60424112E12, 30424.0], [1.60424214E12, 29408.5], [1.60424082E12, 20036.0], [1.60424244E12, 25701.5], [1.60424124E12, 29832.0], [1.60424094E12, 30098.0], [1.60424184E12, 27562.0], [1.60424154E12, 19810.5], [1.604241E12, 24993.5], [1.6042407E12, 6291.0], [1.6042416E12, 22520.0], [1.60424262E12, 29583.0], [1.6042413E12, 29769.0], [1.60424202E12, 30189.0], [1.60424142E12, 29770.0], [1.60424232E12, 29642.0], [1.60424172E12, 24040.5], [1.60424148E12, 25609.0], [1.60424178E12, 18149.0], [1.60424118E12, 30153.0], [1.60424208E12, 30023.5], [1.6042425E12, 24203.5], [1.60424088E12, 28953.5], [1.6042419E12, 24711.0], [1.6042422E12, 28265.5], [1.60424226E12, 29386.0], [1.60424256E12, 21818.5], [1.60424166E12, 24576.0], [1.60424196E12, 37403.0], [1.60424076E12, 26094.5], [1.60424136E12, 29915.0], [1.60424238E12, 29111.5], [1.60424106E12, 29834.0], [1.60424268E12, 17519.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424268E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27527.0, "minX": 1.0, "maxY": 27527.0, "series": [{"data": [[1.0, 27527.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27526.0, "minX": 1.0, "maxY": 27526.0, "series": [{"data": [[1.0, 27526.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.6042407E12, "maxY": 0.5, "series": [{"data": [[1.60424112E12, 0.3333333333333333], [1.60424214E12, 0.3333333333333333], [1.60424082E12, 0.48333333333333334], [1.60424244E12, 0.4], [1.60424124E12, 0.35], [1.60424094E12, 0.35], [1.60424184E12, 0.4], [1.60424154E12, 0.5], [1.604241E12, 0.4], [1.6042407E12, 0.21666666666666667], [1.6042416E12, 0.4166666666666667], [1.60424262E12, 0.36666666666666664], [1.6042413E12, 0.3333333333333333], [1.60424202E12, 0.3333333333333333], [1.60424142E12, 0.35], [1.60424232E12, 0.3333333333333333], [1.60424172E12, 0.43333333333333335], [1.60424148E12, 0.4166666666666667], [1.60424178E12, 0.45], [1.60424118E12, 0.31666666666666665], [1.60424208E12, 0.3333333333333333], [1.6042425E12, 0.4], [1.60424088E12, 0.26666666666666666], [1.6042419E12, 0.38333333333333336], [1.6042422E12, 0.36666666666666664], [1.60424226E12, 0.3333333333333333], [1.60424256E12, 0.43333333333333335], [1.60424166E12, 0.4], [1.60424196E12, 0.26666666666666666], [1.60424076E12, 0.4], [1.60424136E12, 0.3333333333333333], [1.60424238E12, 0.36666666666666664], [1.60424106E12, 0.3333333333333333], [1.60424268E12, 0.11666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424268E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6042407E12, "maxY": 0.5, "series": [{"data": [[1.60424112E12, 0.3333333333333333], [1.60424214E12, 0.3333333333333333], [1.60424082E12, 0.48333333333333334], [1.60424244E12, 0.4], [1.60424124E12, 0.35], [1.60424094E12, 0.35], [1.60424184E12, 0.4], [1.60424154E12, 0.5], [1.604241E12, 0.4], [1.6042407E12, 0.05], [1.6042416E12, 0.4166666666666667], [1.60424262E12, 0.36666666666666664], [1.6042413E12, 0.3333333333333333], [1.60424202E12, 0.3333333333333333], [1.60424142E12, 0.35], [1.60424232E12, 0.3333333333333333], [1.60424172E12, 0.43333333333333335], [1.60424148E12, 0.4166666666666667], [1.60424178E12, 0.45], [1.60424118E12, 0.31666666666666665], [1.60424208E12, 0.3333333333333333], [1.6042425E12, 0.4], [1.60424088E12, 0.26666666666666666], [1.6042419E12, 0.38333333333333336], [1.6042422E12, 0.36666666666666664], [1.60424226E12, 0.3333333333333333], [1.60424256E12, 0.43333333333333335], [1.60424166E12, 0.4], [1.60424196E12, 0.26666666666666666], [1.60424076E12, 0.4], [1.60424136E12, 0.3333333333333333], [1.60424238E12, 0.36666666666666664], [1.60424106E12, 0.3333333333333333], [1.60424268E12, 0.2833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60424268E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6042407E12, "maxY": 0.5, "series": [{"data": [[1.60424112E12, 0.3333333333333333], [1.60424214E12, 0.3333333333333333], [1.60424082E12, 0.48333333333333334], [1.60424244E12, 0.4], [1.60424124E12, 0.35], [1.60424094E12, 0.35], [1.60424184E12, 0.4], [1.60424154E12, 0.5], [1.604241E12, 0.4], [1.6042407E12, 0.05], [1.6042416E12, 0.4166666666666667], [1.60424262E12, 0.36666666666666664], [1.6042413E12, 0.3333333333333333], [1.60424202E12, 0.3333333333333333], [1.60424142E12, 0.35], [1.60424232E12, 0.3333333333333333], [1.60424172E12, 0.43333333333333335], [1.60424148E12, 0.4166666666666667], [1.60424178E12, 0.45], [1.60424118E12, 0.31666666666666665], [1.60424208E12, 0.3333333333333333], [1.6042425E12, 0.4], [1.60424088E12, 0.26666666666666666], [1.6042419E12, 0.38333333333333336], [1.6042422E12, 0.36666666666666664], [1.60424226E12, 0.3333333333333333], [1.60424256E12, 0.43333333333333335], [1.60424166E12, 0.4], [1.60424196E12, 0.26666666666666666], [1.60424076E12, 0.4], [1.60424136E12, 0.3333333333333333], [1.60424238E12, 0.36666666666666664], [1.60424106E12, 0.3333333333333333], [1.60424268E12, 0.2833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424268E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6042407E12, "maxY": 0.5, "series": [{"data": [[1.60424112E12, 0.3333333333333333], [1.60424214E12, 0.3333333333333333], [1.60424082E12, 0.48333333333333334], [1.60424244E12, 0.4], [1.60424124E12, 0.35], [1.60424094E12, 0.35], [1.60424184E12, 0.4], [1.60424154E12, 0.5], [1.604241E12, 0.4], [1.6042407E12, 0.05], [1.6042416E12, 0.4166666666666667], [1.60424262E12, 0.36666666666666664], [1.6042413E12, 0.3333333333333333], [1.60424202E12, 0.3333333333333333], [1.60424142E12, 0.35], [1.60424232E12, 0.3333333333333333], [1.60424172E12, 0.43333333333333335], [1.60424148E12, 0.4166666666666667], [1.60424178E12, 0.45], [1.60424118E12, 0.31666666666666665], [1.60424208E12, 0.3333333333333333], [1.6042425E12, 0.4], [1.60424088E12, 0.26666666666666666], [1.6042419E12, 0.38333333333333336], [1.6042422E12, 0.36666666666666664], [1.60424226E12, 0.3333333333333333], [1.60424256E12, 0.43333333333333335], [1.60424166E12, 0.4], [1.60424196E12, 0.26666666666666666], [1.60424076E12, 0.4], [1.60424136E12, 0.3333333333333333], [1.60424238E12, 0.36666666666666664], [1.60424106E12, 0.3333333333333333], [1.60424268E12, 0.2833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60424268E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

