/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3258.0, "minX": 0.0, "maxY": 45347.0, "series": [{"data": [[0.0, 3258.0], [0.1, 3258.0], [0.2, 6157.0], [0.3, 8266.0], [0.4, 8266.0], [0.5, 11041.0], [0.6, 13425.0], [0.7, 16043.0], [0.8, 16043.0], [0.9, 17156.0], [1.0, 17245.0], [1.1, 17269.0], [1.2, 17269.0], [1.3, 17287.0], [1.4, 17303.0], [1.5, 17328.0], [1.6, 17328.0], [1.7, 17345.0], [1.8, 17353.0], [1.9, 17353.0], [2.0, 17367.0], [2.1, 17374.0], [2.2, 17404.0], [2.3, 17404.0], [2.4, 17431.0], [2.5, 17434.0], [2.6, 17445.0], [2.7, 17445.0], [2.8, 17459.0], [2.9, 17509.0], [3.0, 17522.0], [3.1, 17522.0], [3.2, 17527.0], [3.3, 17586.0], [3.4, 17586.0], [3.5, 17600.0], [3.6, 17656.0], [3.7, 17664.0], [3.8, 17664.0], [3.9, 17668.0], [4.0, 17682.0], [4.1, 17691.0], [4.2, 17691.0], [4.3, 17712.0], [4.4, 17737.0], [4.5, 17750.0], [4.6, 17750.0], [4.7, 17763.0], [4.8, 17773.0], [4.9, 17774.0], [5.0, 17774.0], [5.1, 17844.0], [5.2, 17851.0], [5.3, 17851.0], [5.4, 17853.0], [5.5, 17856.0], [5.6, 17871.0], [5.7, 17871.0], [5.8, 17887.0], [5.9, 17932.0], [6.0, 17944.0], [6.1, 17944.0], [6.2, 17985.0], [6.3, 18008.0], [6.4, 18013.0], [6.5, 18013.0], [6.6, 18027.0], [6.7, 18060.0], [6.8, 18060.0], [6.9, 18062.0], [7.0, 18076.0], [7.1, 18078.0], [7.2, 18078.0], [7.3, 18086.0], [7.4, 18086.0], [7.5, 18090.0], [7.6, 18090.0], [7.7, 18114.0], [7.8, 18165.0], [7.9, 18195.0], [8.0, 18195.0], [8.1, 18298.0], [8.2, 18316.0], [8.3, 18340.0], [8.4, 18340.0], [8.5, 18391.0], [8.6, 18420.0], [8.7, 18420.0], [8.8, 18421.0], [8.9, 18485.0], [9.0, 18501.0], [9.1, 18501.0], [9.2, 18587.0], [9.3, 18671.0], [9.4, 18678.0], [9.5, 18678.0], [9.6, 18712.0], [9.7, 18761.0], [9.8, 18832.0], [9.9, 18832.0], [10.0, 18888.0], [10.1, 18941.0], [10.2, 18941.0], [10.3, 19008.0], [10.4, 19064.0], [10.5, 19088.0], [10.6, 19088.0], [10.7, 19130.0], [10.8, 19158.0], [10.9, 19249.0], [11.0, 19249.0], [11.1, 19251.0], [11.2, 19308.0], [11.3, 19380.0], [11.4, 19380.0], [11.5, 19409.0], [11.6, 19438.0], [11.7, 19438.0], [11.8, 19446.0], [11.9, 19465.0], [12.0, 19531.0], [12.1, 19531.0], [12.2, 19552.0], [12.3, 19559.0], [12.4, 19576.0], [12.5, 19576.0], [12.6, 19724.0], [12.7, 19746.0], [12.8, 19775.0], [12.9, 19775.0], [13.0, 19824.0], [13.1, 19830.0], [13.2, 19948.0], [13.3, 19948.0], [13.4, 19956.0], [13.5, 19967.0], [13.6, 19967.0], [13.7, 20068.0], [13.8, 20078.0], [13.9, 20233.0], [14.0, 20233.0], [14.1, 20317.0], [14.2, 20319.0], [14.3, 20328.0], [14.4, 20328.0], [14.5, 20407.0], [14.6, 20416.0], [14.7, 20520.0], [14.8, 20520.0], [14.9, 20545.0], [15.0, 20561.0], [15.1, 20561.0], [15.2, 20593.0], [15.3, 20615.0], [15.4, 20635.0], [15.5, 20635.0], [15.6, 20635.0], [15.7, 20638.0], [15.8, 20656.0], [15.9, 20656.0], [16.0, 20674.0], [16.1, 20693.0], [16.2, 20730.0], [16.3, 20730.0], [16.4, 20741.0], [16.5, 20743.0], [16.6, 20774.0], [16.7, 20774.0], [16.8, 20818.0], [16.9, 20888.0], [17.0, 20888.0], [17.1, 20934.0], [17.2, 21012.0], [17.3, 21086.0], [17.4, 21086.0], [17.5, 21235.0], [17.6, 21320.0], [17.7, 21321.0], [17.8, 21321.0], [17.9, 21538.0], [18.0, 21593.0], [18.1, 21626.0], [18.2, 21626.0], [18.3, 21667.0], [18.4, 21668.0], [18.5, 21668.0], [18.6, 21729.0], [18.7, 21730.0], [18.8, 21747.0], [18.9, 21747.0], [19.0, 21815.0], [19.1, 21827.0], [19.2, 21840.0], [19.3, 21840.0], [19.4, 21864.0], [19.5, 21884.0], [19.6, 21885.0], [19.7, 21885.0], [19.8, 21894.0], [19.9, 21906.0], [20.0, 21945.0], [20.1, 21945.0], [20.2, 21964.0], [20.3, 22058.0], [20.4, 22058.0], [20.5, 22069.0], [20.6, 22095.0], [20.7, 22104.0], [20.8, 22104.0], [20.9, 22145.0], [21.0, 22220.0], [21.1, 22236.0], [21.2, 22236.0], [21.3, 22263.0], [21.4, 22284.0], [21.5, 22312.0], [21.6, 22312.0], [21.7, 22351.0], [21.8, 22361.0], [21.9, 22361.0], [22.0, 22377.0], [22.1, 22383.0], [22.2, 22414.0], [22.3, 22414.0], [22.4, 22436.0], [22.5, 22443.0], [22.6, 22494.0], [22.7, 22494.0], [22.8, 22551.0], [22.9, 22713.0], [23.0, 22727.0], [23.1, 22727.0], [23.2, 22788.0], [23.3, 22837.0], [23.4, 22837.0], [23.5, 22902.0], [23.6, 22916.0], [23.7, 22952.0], [23.8, 22952.0], [23.9, 22956.0], [24.0, 22991.0], [24.1, 23002.0], [24.2, 23002.0], [24.3, 23044.0], [24.4, 23090.0], [24.5, 23106.0], [24.6, 23106.0], [24.7, 23113.0], [24.8, 23138.0], [24.9, 23158.0], [25.0, 23158.0], [25.1, 23223.0], [25.2, 23229.0], [25.3, 23229.0], [25.4, 23284.0], [25.5, 23336.0], [25.6, 23416.0], [25.7, 23416.0], [25.8, 23453.0], [25.9, 23458.0], [26.0, 23460.0], [26.1, 23460.0], [26.2, 23470.0], [26.3, 23487.0], [26.4, 23506.0], [26.5, 23506.0], [26.6, 23506.0], [26.7, 23527.0], [26.8, 23527.0], [26.9, 23565.0], [27.0, 23590.0], [27.1, 23618.0], [27.2, 23618.0], [27.3, 23631.0], [27.4, 23672.0], [27.5, 23720.0], [27.6, 23720.0], [27.7, 23739.0], [27.8, 23764.0], [27.9, 23792.0], [28.0, 23792.0], [28.1, 23808.0], [28.2, 23816.0], [28.3, 23822.0], [28.4, 23822.0], [28.5, 23887.0], [28.6, 23894.0], [28.7, 23894.0], [28.8, 23913.0], [28.9, 23948.0], [29.0, 23969.0], [29.1, 23969.0], [29.2, 23973.0], [29.3, 23990.0], [29.4, 23992.0], [29.5, 23992.0], [29.6, 23997.0], [29.7, 24007.0], [29.8, 24022.0], [29.9, 24022.0], [30.0, 24032.0], [30.1, 24036.0], [30.2, 24036.0], [30.3, 24071.0], [30.4, 24101.0], [30.5, 24115.0], [30.6, 24115.0], [30.7, 24152.0], [30.8, 24161.0], [30.9, 24193.0], [31.0, 24193.0], [31.1, 24199.0], [31.2, 24240.0], [31.3, 24257.0], [31.4, 24257.0], [31.5, 24298.0], [31.6, 24337.0], [31.7, 24337.0], [31.8, 24385.0], [31.9, 24387.0], [32.0, 24423.0], [32.1, 24423.0], [32.2, 24439.0], [32.3, 24462.0], [32.4, 24488.0], [32.5, 24488.0], [32.6, 24525.0], [32.7, 24527.0], [32.8, 24530.0], [32.9, 24530.0], [33.0, 24531.0], [33.1, 24535.0], [33.2, 24542.0], [33.3, 24542.0], [33.4, 24545.0], [33.5, 24553.0], [33.6, 24553.0], [33.7, 24554.0], [33.8, 24557.0], [33.9, 24600.0], [34.0, 24600.0], [34.1, 24623.0], [34.2, 24632.0], [34.3, 24639.0], [34.4, 24639.0], [34.5, 24639.0], [34.6, 24664.0], [34.7, 24664.0], [34.8, 24664.0], [34.9, 24673.0], [35.0, 24678.0], [35.1, 24678.0], [35.2, 24682.0], [35.3, 24689.0], [35.4, 24704.0], [35.5, 24704.0], [35.6, 24792.0], [35.7, 24810.0], [35.8, 24858.0], [35.9, 24858.0], [36.0, 24908.0], [36.1, 24913.0], [36.2, 24915.0], [36.3, 24915.0], [36.4, 24918.0], [36.5, 24918.0], [36.6, 24933.0], [36.7, 24933.0], [36.8, 24934.0], [36.9, 24952.0], [37.0, 24952.0], [37.1, 24974.0], [37.2, 25008.0], [37.3, 25073.0], [37.4, 25073.0], [37.5, 25124.0], [37.6, 25153.0], [37.7, 25158.0], [37.8, 25158.0], [37.9, 25168.0], [38.0, 25181.0], [38.1, 25183.0], [38.2, 25183.0], [38.3, 25189.0], [38.4, 25195.0], [38.5, 25195.0], [38.6, 25206.0], [38.7, 25212.0], [38.8, 25275.0], [38.9, 25275.0], [39.0, 25299.0], [39.1, 25313.0], [39.2, 25369.0], [39.3, 25369.0], [39.4, 25373.0], [39.5, 25420.0], [39.6, 25474.0], [39.7, 25474.0], [39.8, 25522.0], [39.9, 25525.0], [40.0, 25581.0], [40.1, 25581.0], [40.2, 25587.0], [40.3, 25595.0], [40.4, 25595.0], [40.5, 25601.0], [40.6, 25635.0], [40.7, 25668.0], [40.8, 25668.0], [40.9, 25702.0], [41.0, 25740.0], [41.1, 25741.0], [41.2, 25741.0], [41.3, 25806.0], [41.4, 25823.0], [41.5, 25846.0], [41.6, 25846.0], [41.7, 25890.0], [41.8, 25895.0], [41.9, 25895.0], [42.0, 25902.0], [42.1, 25913.0], [42.2, 25915.0], [42.3, 25915.0], [42.4, 25940.0], [42.5, 25943.0], [42.6, 25989.0], [42.7, 25989.0], [42.8, 25998.0], [42.9, 26010.0], [43.0, 26011.0], [43.1, 26011.0], [43.2, 26026.0], [43.3, 26055.0], [43.4, 26055.0], [43.5, 26067.0], [43.6, 26089.0], [43.7, 26111.0], [43.8, 26111.0], [43.9, 26190.0], [44.0, 26209.0], [44.1, 26231.0], [44.2, 26231.0], [44.3, 26236.0], [44.4, 26249.0], [44.5, 26257.0], [44.6, 26257.0], [44.7, 26283.0], [44.8, 26337.0], [44.9, 26339.0], [45.0, 26339.0], [45.1, 26386.0], [45.2, 26434.0], [45.3, 26434.0], [45.4, 26471.0], [45.5, 26483.0], [45.6, 26507.0], [45.7, 26507.0], [45.8, 26539.0], [45.9, 26547.0], [46.0, 26559.0], [46.1, 26559.0], [46.2, 26566.0], [46.3, 26583.0], [46.4, 26598.0], [46.5, 26598.0], [46.6, 26614.0], [46.7, 26615.0], [46.8, 26615.0], [46.9, 26617.0], [47.0, 26628.0], [47.1, 26669.0], [47.2, 26669.0], [47.3, 26698.0], [47.4, 26708.0], [47.5, 26766.0], [47.6, 26766.0], [47.7, 26788.0], [47.8, 26844.0], [47.9, 26848.0], [48.0, 26848.0], [48.1, 26888.0], [48.2, 26944.0], [48.3, 26950.0], [48.4, 26950.0], [48.5, 26964.0], [48.6, 26968.0], [48.7, 26968.0], [48.8, 26980.0], [48.9, 27031.0], [49.0, 27064.0], [49.1, 27064.0], [49.2, 27068.0], [49.3, 27227.0], [49.4, 27253.0], [49.5, 27253.0], [49.6, 27268.0], [49.7, 27279.0], [49.8, 27287.0], [49.9, 27287.0], [50.0, 27324.0], [50.1, 27335.0], [50.2, 27335.0], [50.3, 27349.0], [50.4, 27366.0], [50.5, 27418.0], [50.6, 27418.0], [50.7, 27442.0], [50.8, 27468.0], [50.9, 27506.0], [51.0, 27506.0], [51.1, 27514.0], [51.2, 27549.0], [51.3, 27554.0], [51.4, 27554.0], [51.5, 27558.0], [51.6, 27596.0], [51.7, 27596.0], [51.8, 27597.0], [51.9, 27663.0], [52.0, 27679.0], [52.1, 27679.0], [52.2, 27693.0], [52.3, 27707.0], [52.4, 27710.0], [52.5, 27710.0], [52.6, 27716.0], [52.7, 27717.0], [52.8, 27720.0], [52.9, 27720.0], [53.0, 27756.0], [53.1, 27774.0], [53.2, 27833.0], [53.3, 27833.0], [53.4, 27857.0], [53.5, 27859.0], [53.6, 27859.0], [53.7, 27874.0], [53.8, 27942.0], [53.9, 27963.0], [54.0, 27963.0], [54.1, 27972.0], [54.2, 27994.0], [54.3, 27996.0], [54.4, 27996.0], [54.5, 28001.0], [54.6, 28016.0], [54.7, 28034.0], [54.8, 28034.0], [54.9, 28052.0], [55.0, 28059.0], [55.1, 28059.0], [55.2, 28061.0], [55.3, 28078.0], [55.4, 28106.0], [55.5, 28106.0], [55.6, 28130.0], [55.7, 28130.0], [55.8, 28133.0], [55.9, 28133.0], [56.0, 28139.0], [56.1, 28148.0], [56.2, 28161.0], [56.3, 28161.0], [56.4, 28176.0], [56.5, 28189.0], [56.6, 28217.0], [56.7, 28217.0], [56.8, 28230.0], [56.9, 28239.0], [57.0, 28239.0], [57.1, 28267.0], [57.2, 28297.0], [57.3, 28361.0], [57.4, 28361.0], [57.5, 28364.0], [57.6, 28371.0], [57.7, 28383.0], [57.8, 28383.0], [57.9, 28438.0], [58.0, 28504.0], [58.1, 28533.0], [58.2, 28533.0], [58.3, 28653.0], [58.4, 28657.0], [58.5, 28657.0], [58.6, 28661.0], [58.7, 28673.0], [58.8, 28676.0], [58.9, 28676.0], [59.0, 28718.0], [59.1, 28756.0], [59.2, 28790.0], [59.3, 28790.0], [59.4, 28794.0], [59.5, 28802.0], [59.6, 28809.0], [59.7, 28809.0], [59.8, 28814.0], [59.9, 28831.0], [60.0, 28832.0], [60.1, 28832.0], [60.2, 28852.0], [60.3, 28854.0], [60.4, 28854.0], [60.5, 28860.0], [60.6, 28902.0], [60.7, 28905.0], [60.8, 28905.0], [60.9, 28914.0], [61.0, 28927.0], [61.1, 28929.0], [61.2, 28929.0], [61.3, 28929.0], [61.4, 28982.0], [61.5, 28987.0], [61.6, 28987.0], [61.7, 28994.0], [61.8, 29011.0], [61.9, 29011.0], [62.0, 29043.0], [62.1, 29063.0], [62.2, 29066.0], [62.3, 29066.0], [62.4, 29067.0], [62.5, 29069.0], [62.6, 29093.0], [62.7, 29093.0], [62.8, 29108.0], [62.9, 29110.0], [63.0, 29124.0], [63.1, 29124.0], [63.2, 29147.0], [63.3, 29150.0], [63.4, 29150.0], [63.5, 29153.0], [63.6, 29159.0], [63.7, 29163.0], [63.8, 29163.0], [63.9, 29170.0], [64.0, 29177.0], [64.1, 29202.0], [64.2, 29202.0], [64.3, 29207.0], [64.4, 29228.0], [64.5, 29231.0], [64.6, 29231.0], [64.7, 29240.0], [64.8, 29249.0], [64.9, 29256.0], [65.0, 29256.0], [65.1, 29259.0], [65.2, 29261.0], [65.3, 29261.0], [65.4, 29266.0], [65.5, 29268.0], [65.6, 29274.0], [65.7, 29274.0], [65.8, 29279.0], [65.9, 29287.0], [66.0, 29290.0], [66.1, 29290.0], [66.2, 29294.0], [66.3, 29301.0], [66.4, 29324.0], [66.5, 29324.0], [66.6, 29325.0], [66.7, 29328.0], [66.8, 29328.0], [66.9, 29331.0], [67.0, 29333.0], [67.1, 29333.0], [67.2, 29333.0], [67.3, 29347.0], [67.4, 29352.0], [67.5, 29361.0], [67.6, 29361.0], [67.7, 29364.0], [67.8, 29369.0], [67.9, 29370.0], [68.0, 29370.0], [68.1, 29375.0], [68.2, 29382.0], [68.3, 29382.0], [68.4, 29382.0], [68.5, 29382.0], [68.6, 29385.0], [68.7, 29385.0], [68.8, 29389.0], [68.9, 29402.0], [69.0, 29406.0], [69.1, 29406.0], [69.2, 29412.0], [69.3, 29413.0], [69.4, 29414.0], [69.5, 29414.0], [69.6, 29421.0], [69.7, 29422.0], [69.8, 29422.0], [69.9, 29422.0], [70.0, 29430.0], [70.1, 29434.0], [70.2, 29434.0], [70.3, 29446.0], [70.4, 29449.0], [70.5, 29453.0], [70.6, 29453.0], [70.7, 29453.0], [70.8, 29454.0], [70.9, 29456.0], [71.0, 29456.0], [71.1, 29460.0], [71.2, 29460.0], [71.3, 29465.0], [71.4, 29465.0], [71.5, 29466.0], [71.6, 29475.0], [71.7, 29475.0], [71.8, 29478.0], [71.9, 29478.0], [72.0, 29481.0], [72.1, 29481.0], [72.2, 29483.0], [72.3, 29489.0], [72.4, 29496.0], [72.5, 29496.0], [72.6, 29501.0], [72.7, 29504.0], [72.8, 29514.0], [72.9, 29514.0], [73.0, 29520.0], [73.1, 29520.0], [73.2, 29521.0], [73.3, 29521.0], [73.4, 29526.0], [73.5, 29526.0], [73.6, 29526.0], [73.7, 29528.0], [73.8, 29530.0], [73.9, 29535.0], [74.0, 29535.0], [74.1, 29541.0], [74.2, 29541.0], [74.3, 29547.0], [74.4, 29547.0], [74.5, 29551.0], [74.6, 29552.0], [74.7, 29557.0], [74.8, 29557.0], [74.9, 29557.0], [75.0, 29560.0], [75.1, 29560.0], [75.2, 29562.0], [75.3, 29564.0], [75.4, 29566.0], [75.5, 29566.0], [75.6, 29566.0], [75.7, 29571.0], [75.8, 29574.0], [75.9, 29574.0], [76.0, 29575.0], [76.1, 29578.0], [76.2, 29578.0], [76.3, 29578.0], [76.4, 29582.0], [76.5, 29591.0], [76.6, 29591.0], [76.7, 29591.0], [76.8, 29592.0], [76.9, 29602.0], [77.0, 29602.0], [77.1, 29605.0], [77.2, 29606.0], [77.3, 29606.0], [77.4, 29606.0], [77.5, 29609.0], [77.6, 29611.0], [77.7, 29613.0], [77.8, 29613.0], [77.9, 29616.0], [78.0, 29618.0], [78.1, 29620.0], [78.2, 29620.0], [78.3, 29635.0], [78.4, 29639.0], [78.5, 29639.0], [78.6, 29641.0], [78.7, 29642.0], [78.8, 29643.0], [78.9, 29643.0], [79.0, 29644.0], [79.1, 29645.0], [79.2, 29651.0], [79.3, 29651.0], [79.4, 29653.0], [79.5, 29660.0], [79.6, 29660.0], [79.7, 29660.0], [79.8, 29662.0], [79.9, 29663.0], [80.0, 29666.0], [80.1, 29666.0], [80.2, 29667.0], [80.3, 29667.0], [80.4, 29667.0], [80.5, 29673.0], [80.6, 29675.0], [80.7, 29680.0], [80.8, 29680.0], [80.9, 29685.0], [81.0, 29686.0], [81.1, 29688.0], [81.2, 29688.0], [81.3, 29690.0], [81.4, 29693.0], [81.5, 29698.0], [81.6, 29698.0], [81.7, 29702.0], [81.8, 29704.0], [81.9, 29704.0], [82.0, 29704.0], [82.1, 29706.0], [82.2, 29708.0], [82.3, 29708.0], [82.4, 29714.0], [82.5, 29718.0], [82.6, 29722.0], [82.7, 29722.0], [82.8, 29726.0], [82.9, 29734.0], [83.0, 29735.0], [83.1, 29735.0], [83.2, 29735.0], [83.3, 29737.0], [83.4, 29737.0], [83.5, 29738.0], [83.6, 29747.0], [83.7, 29752.0], [83.8, 29752.0], [83.9, 29759.0], [84.0, 29762.0], [84.1, 29764.0], [84.2, 29764.0], [84.3, 29766.0], [84.4, 29769.0], [84.5, 29777.0], [84.6, 29777.0], [84.7, 29777.0], [84.8, 29778.0], [84.9, 29779.0], [85.0, 29779.0], [85.1, 29781.0], [85.2, 29782.0], [85.3, 29782.0], [85.4, 29785.0], [85.5, 29786.0], [85.6, 29792.0], [85.7, 29792.0], [85.8, 29794.0], [85.9, 29810.0], [86.0, 29817.0], [86.1, 29817.0], [86.2, 29817.0], [86.3, 29828.0], [86.4, 29830.0], [86.5, 29830.0], [86.6, 29830.0], [86.7, 29831.0], [86.8, 29831.0], [86.9, 29831.0], [87.0, 29849.0], [87.1, 29850.0], [87.2, 29850.0], [87.3, 29863.0], [87.4, 29870.0], [87.5, 29879.0], [87.6, 29879.0], [87.7, 29889.0], [87.8, 29896.0], [87.9, 29899.0], [88.0, 29899.0], [88.1, 29928.0], [88.2, 29932.0], [88.3, 29932.0], [88.4, 29932.0], [88.5, 29940.0], [88.6, 29942.0], [88.7, 29942.0], [88.8, 29965.0], [88.9, 29970.0], [89.0, 29979.0], [89.1, 29979.0], [89.2, 29991.0], [89.3, 30004.0], [89.4, 30005.0], [89.5, 30005.0], [89.6, 30010.0], [89.7, 30011.0], [89.8, 30012.0], [89.9, 30012.0], [90.0, 30013.0], [90.1, 30015.0], [90.2, 30015.0], [90.3, 30023.0], [90.4, 30033.0], [90.5, 30041.0], [90.6, 30041.0], [90.7, 30048.0], [90.8, 30051.0], [90.9, 30053.0], [91.0, 30053.0], [91.1, 30053.0], [91.2, 30068.0], [91.3, 30078.0], [91.4, 30078.0], [91.5, 30094.0], [91.6, 30097.0], [91.7, 30097.0], [91.8, 30106.0], [91.9, 30117.0], [92.0, 30141.0], [92.1, 30141.0], [92.2, 30151.0], [92.3, 30153.0], [92.4, 30201.0], [92.5, 30201.0], [92.6, 30218.0], [92.7, 30238.0], [92.8, 30345.0], [92.9, 30345.0], [93.0, 30477.0], [93.1, 30591.0], [93.2, 30597.0], [93.3, 30597.0], [93.4, 30674.0], [93.5, 30786.0], [93.6, 30786.0], [93.7, 31135.0], [93.8, 31207.0], [93.9, 31314.0], [94.0, 31314.0], [94.1, 31424.0], [94.2, 31460.0], [94.3, 31490.0], [94.4, 31490.0], [94.5, 31616.0], [94.6, 31650.0], [94.7, 31738.0], [94.8, 31738.0], [94.9, 31942.0], [95.0, 32108.0], [95.1, 32108.0], [95.2, 32350.0], [95.3, 32539.0], [95.4, 32793.0], [95.5, 32793.0], [95.6, 32857.0], [95.7, 33490.0], [95.8, 33571.0], [95.9, 33571.0], [96.0, 33650.0], [96.1, 33961.0], [96.2, 34500.0], [96.3, 34500.0], [96.4, 34750.0], [96.5, 35082.0], [96.6, 35197.0], [96.7, 35197.0], [96.8, 35202.0], [96.9, 35678.0], [97.0, 35678.0], [97.1, 36444.0], [97.2, 36682.0], [97.3, 36703.0], [97.4, 36703.0], [97.5, 37693.0], [97.6, 37790.0], [97.7, 38190.0], [97.8, 38190.0], [97.9, 39039.0], [98.0, 39280.0], [98.1, 39902.0], [98.2, 39902.0], [98.3, 40616.0], [98.4, 41464.0], [98.5, 41464.0], [98.6, 41846.0], [98.7, 41974.0], [98.8, 43040.0], [98.9, 43040.0], [99.0, 43066.0], [99.1, 43126.0], [99.2, 43570.0], [99.3, 43570.0], [99.4, 44055.0], [99.5, 44377.0], [99.6, 45214.0], [99.7, 45214.0], [99.8, 45278.0], [99.9, 45347.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 35.0, "series": [{"data": [[34700.0, 1.0], [33900.0, 1.0], [33500.0, 1.0], [34500.0, 1.0], [35100.0, 1.0], [36700.0, 1.0], [37700.0, 1.0], [38100.0, 1.0], [39900.0, 1.0], [41900.0, 1.0], [43500.0, 1.0], [43100.0, 1.0], [44300.0, 1.0], [45300.0, 1.0], [3200.0, 1.0], [6100.0, 1.0], [8200.0, 1.0], [11000.0, 1.0], [13400.0, 1.0], [16000.0, 1.0], [17400.0, 5.0], [17300.0, 6.0], [17100.0, 1.0], [17200.0, 3.0], [18300.0, 3.0], [18000.0, 10.0], [18200.0, 1.0], [17800.0, 6.0], [17900.0, 3.0], [18100.0, 3.0], [18400.0, 3.0], [17600.0, 6.0], [17500.0, 4.0], [17700.0, 6.0], [19200.0, 2.0], [18500.0, 2.0], [19100.0, 2.0], [18700.0, 2.0], [19000.0, 3.0], [18800.0, 2.0], [18600.0, 2.0], [18900.0, 1.0], [19400.0, 4.0], [19300.0, 2.0], [20400.0, 2.0], [19900.0, 3.0], [19700.0, 3.0], [19500.0, 4.0], [19800.0, 2.0], [20300.0, 3.0], [20200.0, 1.0], [20000.0, 2.0], [20600.0, 7.0], [21000.0, 2.0], [20900.0, 1.0], [21200.0, 1.0], [20500.0, 4.0], [21300.0, 2.0], [20700.0, 4.0], [21500.0, 2.0], [20800.0, 2.0], [21700.0, 3.0], [22200.0, 4.0], [22100.0, 2.0], [22000.0, 3.0], [21800.0, 7.0], [21900.0, 3.0], [22500.0, 1.0], [21600.0, 3.0], [22300.0, 5.0], [22400.0, 4.0], [23400.0, 6.0], [23200.0, 3.0], [23100.0, 4.0], [23500.0, 5.0], [22900.0, 5.0], [22700.0, 3.0], [23000.0, 3.0], [23300.0, 1.0], [22800.0, 1.0], [23700.0, 4.0], [24500.0, 10.0], [24000.0, 5.0], [23600.0, 3.0], [23900.0, 7.0], [24100.0, 6.0], [23800.0, 5.0], [24300.0, 3.0], [24200.0, 3.0], [24400.0, 4.0], [25500.0, 5.0], [25300.0, 3.0], [25400.0, 2.0], [24700.0, 2.0], [24900.0, 9.0], [25100.0, 8.0], [25200.0, 4.0], [24600.0, 11.0], [25000.0, 2.0], [24800.0, 2.0], [26400.0, 3.0], [25900.0, 7.0], [26500.0, 7.0], [26600.0, 6.0], [26200.0, 6.0], [25700.0, 3.0], [25800.0, 5.0], [26000.0, 6.0], [26300.0, 3.0], [25600.0, 3.0], [26100.0, 2.0], [27400.0, 3.0], [26900.0, 5.0], [26700.0, 3.0], [27200.0, 5.0], [26800.0, 3.0], [27000.0, 3.0], [27300.0, 4.0], [27500.0, 7.0], [27600.0, 3.0], [27800.0, 4.0], [28200.0, 5.0], [28100.0, 9.0], [27900.0, 5.0], [28600.0, 5.0], [28500.0, 2.0], [27700.0, 7.0], [28300.0, 4.0], [28400.0, 1.0], [28000.0, 7.0], [29600.0, 35.0], [28800.0, 8.0], [29000.0, 7.0], [29300.0, 19.0], [29400.0, 27.0], [29500.0, 32.0], [28900.0, 9.0], [29100.0, 10.0], [29200.0, 16.0], [28700.0, 4.0], [29800.0, 16.0], [30600.0, 1.0], [30700.0, 1.0], [29700.0, 31.0], [30500.0, 2.0], [29900.0, 9.0], [30000.0, 18.0], [30100.0, 5.0], [30200.0, 3.0], [30400.0, 1.0], [30300.0, 1.0], [31200.0, 1.0], [31700.0, 1.0], [31600.0, 2.0], [31400.0, 3.0], [31300.0, 1.0], [31100.0, 1.0], [32100.0, 1.0], [32300.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [33400.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [36600.0, 1.0], [35200.0, 1.0], [35000.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [39000.0, 1.0], [40600.0, 1.0], [41400.0, 1.0], [43000.0, 2.0], [41800.0, 1.0], [44000.0, 1.0], [45200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60424934E12, "maxY": 10.0, "series": [{"data": [[1.60425114E12, 10.0], [1.60424952E12, 10.0], [1.60425054E12, 10.0], [1.60425084E12, 10.0], [1.60425042E12, 10.0], [1.60424982E12, 10.0], [1.60425072E12, 10.0], [1.60425012E12, 10.0], [1.6042494E12, 10.0], [1.60425E12, 10.0], [1.60425102E12, 10.0], [1.6042497E12, 10.0], [1.60425132E12, 2.0], [1.6042509E12, 10.0], [1.6042512E12, 10.0], [1.6042503E12, 10.0], [1.6042506E12, 10.0], [1.60424988E12, 10.0], [1.60425018E12, 10.0], [1.60424958E12, 10.0], [1.60425048E12, 10.0], [1.60424976E12, 10.0], [1.60425078E12, 10.0], [1.60424946E12, 10.0], [1.60425108E12, 10.0], [1.60425066E12, 10.0], [1.60425096E12, 10.0], [1.60425006E12, 10.0], [1.60425036E12, 10.0], [1.60424964E12, 10.0], [1.60424934E12, 10.0], [1.60425024E12, 10.0], [1.60425126E12, 9.275862068965518], [1.60424994E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425132E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17245.0, "minX": 1.0, "maxY": 26405.836088154287, "series": [{"data": [[8.0, 17586.0], [4.0, 17374.0], [2.0, 17245.0], [1.0, 17750.0], [9.0, 17600.0], [10.0, 26405.836088154287], [5.0, 17431.0], [6.0, 17509.0], [3.0, 17353.0], [7.0, 17522.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26296.608163265326]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.616666666666667, "minX": 1.60424934E12, "maxY": 193799.13333333333, "series": [{"data": [[1.60425114E12, 51796.46666666667], [1.60424952E12, 125482.81666666667], [1.60425054E12, 57049.53333333333], [1.60425084E12, 47447.583333333336], [1.60425042E12, 86738.95], [1.60424982E12, 49729.86666666667], [1.60425072E12, 50152.816666666666], [1.60425012E12, 37548.2], [1.6042494E12, 186119.3], [1.60425E12, 45997.666666666664], [1.60425102E12, 35751.86666666667], [1.6042497E12, 54810.35], [1.60425132E12, 1177.1833333333334], [1.6042509E12, 43789.833333333336], [1.6042512E12, 153574.43333333332], [1.6042503E12, 193799.13333333333], [1.6042506E12, 34834.75], [1.60424988E12, 53231.63333333333], [1.60425018E12, 166914.7], [1.60424958E12, 75838.31666666667], [1.60425048E12, 57088.13333333333], [1.60424976E12, 43729.566666666666], [1.60425078E12, 53498.35], [1.60424946E12, 70416.23333333334], [1.60425108E12, 29141.733333333334], [1.60425066E12, 49056.4], [1.60425096E12, 48568.35], [1.60425006E12, 34101.46666666667], [1.60425036E12, 91353.68333333333], [1.60424964E12, 41575.933333333334], [1.60424934E12, 68107.03333333334], [1.60425024E12, 87402.9], [1.60425126E12, 55564.63333333333], [1.60424994E12, 42060.183333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60425114E12, 195.13333333333333], [1.60424952E12, 112.85], [1.60425054E12, 154.66666666666666], [1.60425084E12, 153.75], [1.60425042E12, 181.16666666666666], [1.60424982E12, 146.13333333333333], [1.60425072E12, 146.15], [1.60425012E12, 197.36666666666667], [1.6042494E12, 183.81666666666666], [1.60425E12, 153.31666666666666], [1.60425102E12, 160.48333333333332], [1.6042497E12, 153.46666666666667], [1.60425132E12, 19.616666666666667], [1.6042509E12, 146.1], [1.6042512E12, 145.51666666666668], [1.6042503E12, 178.83333333333334], [1.6042506E12, 131.45], [1.60424988E12, 146.41666666666666], [1.60425018E12, 206.03333333333333], [1.60424958E12, 160.7], [1.60425048E12, 168.65], [1.60424976E12, 146.1], [1.60425078E12, 154.06666666666666], [1.60424946E12, 208.45], [1.60425108E12, 189.71666666666667], [1.60425066E12, 153.45], [1.60425096E12, 153.33333333333334], [1.60425006E12, 160.66666666666666], [1.60425036E12, 213.66666666666666], [1.60424964E12, 169.28333333333333], [1.60424934E12, 36.583333333333336], [1.60425024E12, 163.63333333333333], [1.60425126E12, 202.68333333333334], [1.60424994E12, 146.03333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425132E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8429.4, "minX": 1.60424934E12, "maxY": 35918.73333333334, "series": [{"data": [[1.60425114E12, 22876.40740740741], [1.60424952E12, 35918.73333333334], [1.60425054E12, 25294.809523809523], [1.60425084E12, 28079.238095238095], [1.60425042E12, 22984.44], [1.60424982E12, 29608.25], [1.60425072E12, 29626.0], [1.60425012E12, 23156.185185185186], [1.6042494E12, 24534.960000000003], [1.60425E12, 29631.190476190477], [1.60425102E12, 26797.818181818187], [1.6042497E12, 28740.285714285714], [1.60425132E12, 17449.333333333332], [1.6042509E12, 29197.050000000007], [1.6042512E12, 25390.4], [1.6042503E12, 23644.28], [1.6042506E12, 35545.833333333336], [1.60424988E12, 29686.549999999996], [1.60425018E12, 20108.413793103453], [1.60424958E12, 29543.5], [1.60425048E12, 25460.173913043483], [1.60424976E12, 29927.100000000002], [1.60425078E12, 29223.809523809523], [1.60424946E12, 20121.93103448276], [1.60425108E12, 24547.42307692308], [1.60425066E12, 29436.428571428572], [1.60425096E12, 29659.52380952381], [1.60425006E12, 28123.590909090915], [1.60425036E12, 22033.03333333333], [1.60424964E12, 25637.869565217392], [1.60424934E12, 8429.4], [1.60425024E12, 24868.608695652172], [1.60425126E12, 24143.034482758627], [1.60424994E12, 29567.150000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425132E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8423.2, "minX": 1.60424934E12, "maxY": 35914.26666666667, "series": [{"data": [[1.60425114E12, 22874.59259259259], [1.60424952E12, 35914.26666666667], [1.60425054E12, 25293.476190476194], [1.60425084E12, 28078.142857142855], [1.60425042E12, 22982.399999999998], [1.60424982E12, 29606.649999999998], [1.60425072E12, 29624.799999999996], [1.60425012E12, 23154.888888888887], [1.6042494E12, 24531.96], [1.60425E12, 29630.0], [1.60425102E12, 26797.227272727276], [1.6042497E12, 28738.90476190476], [1.60425132E12, 17447.666666666668], [1.6042509E12, 29195.9], [1.6042512E12, 25385.600000000006], [1.6042503E12, 23640.119999999995], [1.6042506E12, 35545.0], [1.60424988E12, 29685.299999999996], [1.60425018E12, 20104.310344827587], [1.60424958E12, 29541.63636363636], [1.60425048E12, 25459.086956521744], [1.60424976E12, 29926.05], [1.60425078E12, 29222.619047619046], [1.60424946E12, 20120.344827586214], [1.60425108E12, 24546.61538461539], [1.60425066E12, 29435.285714285714], [1.60425096E12, 29658.380952380954], [1.60425006E12, 28121.772727272728], [1.60425036E12, 22031.166666666664], [1.60424964E12, 25637.000000000004], [1.60424934E12, 8423.2], [1.60425024E12, 24865.956521739132], [1.60425126E12, 24140.96551724138], [1.60424994E12, 29565.949999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425132E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60424934E12, "maxY": 16.0, "series": [{"data": [[1.60425114E12, 0.5185185185185185], [1.60424952E12, 1.0000000000000002], [1.60425054E12, 0.5714285714285715], [1.60425084E12, 0.19047619047619052], [1.60425042E12, 0.0], [1.60424982E12, 0.5], [1.60425072E12, 0.5], [1.60425012E12, 0.40740740740740744], [1.6042494E12, 0.36], [1.60425E12, 0.619047619047619], [1.60425102E12, 0.27272727272727276], [1.6042497E12, 0.2857142857142857], [1.60425132E12, 0.0], [1.6042509E12, 0.5], [1.6042512E12, 0.45], [1.6042503E12, 0.48], [1.6042506E12, 0.4444444444444444], [1.60424988E12, 0.30000000000000004], [1.60425018E12, 0.37931034482758624], [1.60424958E12, 0.7727272727272726], [1.60425048E12, 0.4782608695652174], [1.60424976E12, 0.7499999999999999], [1.60425078E12, 0.5238095238095238], [1.60424946E12, 0.4482758620689657], [1.60425108E12, 0.42307692307692313], [1.60425066E12, 0.38095238095238093], [1.60425096E12, 0.6666666666666667], [1.60425006E12, 0.3181818181818182], [1.60425036E12, 0.4666666666666667], [1.60424964E12, 0.47826086956521735], [1.60424934E12, 16.0], [1.60425024E12, 0.608695652173913], [1.60425126E12, 0.7586206896551725], [1.60424994E12, 0.6000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425132E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3258.0, "minX": 1.60424934E12, "maxY": 45347.0, "series": [{"data": [[1.60425114E12, 27418.0], [1.60424952E12, 45347.0], [1.60425054E12, 32793.0], [1.60425084E12, 29766.0], [1.60425042E12, 32539.0], [1.60424982E12, 29899.0], [1.60425072E12, 30117.0], [1.60425012E12, 26614.0], [1.6042494E12, 28267.0], [1.60425E12, 29817.0], [1.60425102E12, 29108.0], [1.6042497E12, 29940.0], [1.60425132E12, 17750.0], [1.6042509E12, 30041.0], [1.6042512E12, 29782.0], [1.6042503E12, 26257.0], [1.6042506E12, 44055.0], [1.60424988E12, 30591.0], [1.60425018E12, 22991.0], [1.60424958E12, 43066.0], [1.60425048E12, 28994.0], [1.60424976E12, 30153.0], [1.60425078E12, 29616.0], [1.60424946E12, 24115.0], [1.60425108E12, 28718.0], [1.60425066E12, 29578.0], [1.60425096E12, 30345.0], [1.60425006E12, 29932.0], [1.60425036E12, 28831.0], [1.60424964E12, 30597.0], [1.60424934E12, 13425.0], [1.60425024E12, 31738.0], [1.60425126E12, 38190.0], [1.60424994E12, 29889.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60425114E12, 19008.0], [1.60424952E12, 23487.0], [1.60425054E12, 22095.0], [1.60425084E12, 27227.0], [1.60425042E12, 17156.0], [1.60424982E12, 29177.0], [1.60425072E12, 28987.0], [1.60425012E12, 17668.0], [1.6042494E12, 16043.0], [1.60425E12, 29412.0], [1.60425102E12, 23992.0], [1.6042497E12, 25522.0], [1.60425132E12, 17245.0], [1.6042509E12, 28653.0], [1.6042512E12, 19956.0], [1.6042503E12, 19380.0], [1.6042506E12, 26111.0], [1.60424988E12, 29274.0], [1.60425018E12, 17664.0], [1.60424958E12, 24792.0], [1.60425048E12, 23044.0], [1.60424976E12, 29602.0], [1.60425078E12, 27554.0], [1.60424946E12, 17856.0], [1.60425108E12, 20741.0], [1.60425066E12, 29279.0], [1.60425096E12, 28982.0], [1.60425006E12, 26337.0], [1.60425036E12, 17774.0], [1.60424964E12, 22551.0], [1.60424934E12, 3258.0], [1.60425024E12, 17656.0], [1.60425126E12, 17269.0], [1.60424994E12, 29170.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60425114E12, 19008.0], [1.60424952E12, 23487.0], [1.60425054E12, 22095.0], [1.60425084E12, 27227.0], [1.60425042E12, 17156.0], [1.60424982E12, 29177.0], [1.60425072E12, 28987.0], [1.60425012E12, 17668.0], [1.6042494E12, 16043.0], [1.60425E12, 29412.0], [1.60425102E12, 23992.0], [1.6042497E12, 25522.0], [1.60425132E12, 17245.0], [1.6042509E12, 28653.0], [1.6042512E12, 19956.0], [1.6042503E12, 19380.0], [1.6042506E12, 26111.0], [1.60424988E12, 29274.0], [1.60425018E12, 17664.0], [1.60424958E12, 24792.0], [1.60425048E12, 23044.0], [1.60424976E12, 29602.0], [1.60425078E12, 27554.0], [1.60424946E12, 17856.0], [1.60425108E12, 20741.0], [1.60425066E12, 29279.0], [1.60425096E12, 28982.0], [1.60425006E12, 26337.0], [1.60425036E12, 17774.0], [1.60424964E12, 22551.0], [1.60424934E12, 3258.0], [1.60425024E12, 17656.0], [1.60425126E12, 17269.0], [1.60424994E12, 29170.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60425114E12, 19008.0], [1.60424952E12, 23487.0], [1.60425054E12, 22095.0], [1.60425084E12, 27227.0], [1.60425042E12, 17156.0], [1.60424982E12, 29177.0], [1.60425072E12, 28987.0], [1.60425012E12, 17668.0], [1.6042494E12, 16043.0], [1.60425E12, 29412.0], [1.60425102E12, 23992.0], [1.6042497E12, 25522.0], [1.60425132E12, 17245.0], [1.6042509E12, 28653.0], [1.6042512E12, 19956.0], [1.6042503E12, 19380.0], [1.6042506E12, 26111.0], [1.60424988E12, 29274.0], [1.60425018E12, 17664.0], [1.60424958E12, 24792.0], [1.60425048E12, 23044.0], [1.60424976E12, 29602.0], [1.60425078E12, 27554.0], [1.60424946E12, 17856.0], [1.60425108E12, 20741.0], [1.60425066E12, 29279.0], [1.60425096E12, 28982.0], [1.60425006E12, 26337.0], [1.60425036E12, 17774.0], [1.60424964E12, 22551.0], [1.60424934E12, 3258.0], [1.60425024E12, 17656.0], [1.60425126E12, 17269.0], [1.60424994E12, 29170.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60425114E12, 19008.0], [1.60424952E12, 23487.0], [1.60425054E12, 22095.0], [1.60425084E12, 27227.0], [1.60425042E12, 17156.0], [1.60424982E12, 29177.0], [1.60425072E12, 28987.0], [1.60425012E12, 17668.0], [1.6042494E12, 16043.0], [1.60425E12, 29412.0], [1.60425102E12, 23992.0], [1.6042497E12, 25522.0], [1.60425132E12, 17245.0], [1.6042509E12, 28653.0], [1.6042512E12, 19956.0], [1.6042503E12, 19380.0], [1.6042506E12, 26111.0], [1.60424988E12, 29274.0], [1.60425018E12, 17664.0], [1.60424958E12, 24792.0], [1.60425048E12, 23044.0], [1.60424976E12, 29602.0], [1.60425078E12, 27554.0], [1.60424946E12, 17856.0], [1.60425108E12, 20741.0], [1.60425066E12, 29279.0], [1.60425096E12, 28982.0], [1.60425006E12, 26337.0], [1.60425036E12, 17774.0], [1.60424964E12, 22551.0], [1.60424934E12, 3258.0], [1.60425024E12, 17656.0], [1.60425126E12, 17269.0], [1.60424994E12, 29170.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60425114E12, 22312.0], [1.60424952E12, 39280.0], [1.60425054E12, 24632.0], [1.60425084E12, 28078.0], [1.60425042E12, 21906.0], [1.60424982E12, 29623.0], [1.60425072E12, 29692.5], [1.60425012E12, 23997.0], [1.6042494E12, 25420.0], [1.60425E12, 29620.0], [1.60425102E12, 26317.5], [1.6042497E12, 29454.0], [1.60425132E12, 17353.0], [1.6042509E12, 29120.0], [1.6042512E12, 27733.5], [1.6042503E12, 24535.0], [1.6042506E12, 35942.0], [1.60424988E12, 29586.5], [1.60425018E12, 19465.0], [1.60424958E12, 27636.5], [1.60425048E12, 24678.0], [1.60424976E12, 29997.5], [1.60425078E12, 29385.0], [1.60424946E12, 19948.0], [1.60425108E12, 24423.5], [1.60425066E12, 29453.0], [1.60425096E12, 29653.0], [1.60425006E12, 27824.5], [1.60425036E12, 20625.0], [1.60424964E12, 24664.0], [1.60424934E12, 8266.0], [1.60425024E12, 25212.0], [1.60425126E12, 20328.0], [1.60424994E12, 29627.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425132E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27324.0, "minX": 1.0, "maxY": 27324.0, "series": [{"data": [[1.0, 27324.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27322.0, "minX": 1.0, "maxY": 27322.0, "series": [{"data": [[1.0, 27322.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60424934E12, "maxY": 0.5, "series": [{"data": [[1.60425114E12, 0.45], [1.60424952E12, 0.25], [1.60425054E12, 0.35], [1.60425084E12, 0.35], [1.60425042E12, 0.4166666666666667], [1.60424982E12, 0.3333333333333333], [1.60425072E12, 0.3333333333333333], [1.60425012E12, 0.45], [1.6042494E12, 0.4166666666666667], [1.60425E12, 0.35], [1.60425102E12, 0.36666666666666664], [1.6042497E12, 0.35], [1.6042509E12, 0.3333333333333333], [1.6042512E12, 0.3333333333333333], [1.6042503E12, 0.4166666666666667], [1.6042506E12, 0.3], [1.60424988E12, 0.3333333333333333], [1.60425018E12, 0.48333333333333334], [1.60424958E12, 0.36666666666666664], [1.60425048E12, 0.38333333333333336], [1.60424976E12, 0.3333333333333333], [1.60425078E12, 0.35], [1.60424946E12, 0.48333333333333334], [1.60425108E12, 0.43333333333333335], [1.60425066E12, 0.35], [1.60425096E12, 0.35], [1.60425006E12, 0.36666666666666664], [1.60425036E12, 0.5], [1.60424964E12, 0.38333333333333336], [1.60424934E12, 0.25], [1.60425024E12, 0.38333333333333336], [1.60425126E12, 0.36666666666666664], [1.60424994E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425126E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424934E12, "maxY": 0.5, "series": [{"data": [[1.60425114E12, 0.45], [1.60424952E12, 0.25], [1.60425054E12, 0.35], [1.60425084E12, 0.35], [1.60425042E12, 0.4166666666666667], [1.60424982E12, 0.3333333333333333], [1.60425072E12, 0.3333333333333333], [1.60425012E12, 0.45], [1.6042494E12, 0.4166666666666667], [1.60425E12, 0.35], [1.60425102E12, 0.36666666666666664], [1.6042497E12, 0.35], [1.60425132E12, 0.05], [1.6042509E12, 0.3333333333333333], [1.6042512E12, 0.3333333333333333], [1.6042503E12, 0.4166666666666667], [1.6042506E12, 0.3], [1.60424988E12, 0.3333333333333333], [1.60425018E12, 0.48333333333333334], [1.60424958E12, 0.36666666666666664], [1.60425048E12, 0.38333333333333336], [1.60424976E12, 0.3333333333333333], [1.60425078E12, 0.35], [1.60424946E12, 0.48333333333333334], [1.60425108E12, 0.43333333333333335], [1.60425066E12, 0.35], [1.60425096E12, 0.35], [1.60425006E12, 0.36666666666666664], [1.60425036E12, 0.5], [1.60424964E12, 0.38333333333333336], [1.60424934E12, 0.08333333333333333], [1.60425024E12, 0.38333333333333336], [1.60425126E12, 0.48333333333333334], [1.60424994E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425132E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424934E12, "maxY": 0.5, "series": [{"data": [[1.60425114E12, 0.45], [1.60424952E12, 0.25], [1.60425054E12, 0.35], [1.60425084E12, 0.35], [1.60425042E12, 0.4166666666666667], [1.60424982E12, 0.3333333333333333], [1.60425072E12, 0.3333333333333333], [1.60425012E12, 0.45], [1.6042494E12, 0.4166666666666667], [1.60425E12, 0.35], [1.60425102E12, 0.36666666666666664], [1.6042497E12, 0.35], [1.60425132E12, 0.05], [1.6042509E12, 0.3333333333333333], [1.6042512E12, 0.3333333333333333], [1.6042503E12, 0.4166666666666667], [1.6042506E12, 0.3], [1.60424988E12, 0.3333333333333333], [1.60425018E12, 0.48333333333333334], [1.60424958E12, 0.36666666666666664], [1.60425048E12, 0.38333333333333336], [1.60424976E12, 0.3333333333333333], [1.60425078E12, 0.35], [1.60424946E12, 0.48333333333333334], [1.60425108E12, 0.43333333333333335], [1.60425066E12, 0.35], [1.60425096E12, 0.35], [1.60425006E12, 0.36666666666666664], [1.60425036E12, 0.5], [1.60424964E12, 0.38333333333333336], [1.60424934E12, 0.08333333333333333], [1.60425024E12, 0.38333333333333336], [1.60425126E12, 0.48333333333333334], [1.60424994E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425132E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424934E12, "maxY": 0.5, "series": [{"data": [[1.60425114E12, 0.45], [1.60424952E12, 0.25], [1.60425054E12, 0.35], [1.60425084E12, 0.35], [1.60425042E12, 0.4166666666666667], [1.60424982E12, 0.3333333333333333], [1.60425072E12, 0.3333333333333333], [1.60425012E12, 0.45], [1.6042494E12, 0.4166666666666667], [1.60425E12, 0.35], [1.60425102E12, 0.36666666666666664], [1.6042497E12, 0.35], [1.60425132E12, 0.05], [1.6042509E12, 0.3333333333333333], [1.6042512E12, 0.3333333333333333], [1.6042503E12, 0.4166666666666667], [1.6042506E12, 0.3], [1.60424988E12, 0.3333333333333333], [1.60425018E12, 0.48333333333333334], [1.60424958E12, 0.36666666666666664], [1.60425048E12, 0.38333333333333336], [1.60424976E12, 0.3333333333333333], [1.60425078E12, 0.35], [1.60424946E12, 0.48333333333333334], [1.60425108E12, 0.43333333333333335], [1.60425066E12, 0.35], [1.60425096E12, 0.35], [1.60425006E12, 0.36666666666666664], [1.60425036E12, 0.5], [1.60424964E12, 0.38333333333333336], [1.60424934E12, 0.08333333333333333], [1.60425024E12, 0.38333333333333336], [1.60425126E12, 0.48333333333333334], [1.60424994E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425132E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

