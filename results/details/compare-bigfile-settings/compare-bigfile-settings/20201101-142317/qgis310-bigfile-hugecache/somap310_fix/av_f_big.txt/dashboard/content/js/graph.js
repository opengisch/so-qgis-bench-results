/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3286.0, "minX": 0.0, "maxY": 44561.0, "series": [{"data": [[0.0, 3286.0], [0.1, 3286.0], [0.2, 6191.0], [0.3, 8347.0], [0.4, 8347.0], [0.5, 11123.0], [0.6, 13670.0], [0.7, 16312.0], [0.8, 16312.0], [0.9, 17185.0], [1.0, 17227.0], [1.1, 17255.0], [1.2, 17255.0], [1.3, 17273.0], [1.4, 17364.0], [1.5, 17388.0], [1.6, 17388.0], [1.7, 17452.0], [1.8, 17542.0], [1.9, 17542.0], [2.0, 17547.0], [2.1, 17626.0], [2.2, 17707.0], [2.3, 17707.0], [2.4, 17774.0], [2.5, 17777.0], [2.6, 17777.0], [2.7, 17777.0], [2.8, 17796.0], [2.9, 17808.0], [3.0, 17819.0], [3.1, 17819.0], [3.2, 17828.0], [3.3, 17850.0], [3.4, 17850.0], [3.5, 17859.0], [3.6, 17863.0], [3.7, 17871.0], [3.8, 17871.0], [3.9, 17879.0], [4.0, 17904.0], [4.1, 17906.0], [4.2, 17906.0], [4.3, 17923.0], [4.4, 17936.0], [4.5, 17948.0], [4.6, 17948.0], [4.7, 17971.0], [4.8, 17988.0], [4.9, 17992.0], [5.0, 17992.0], [5.1, 17993.0], [5.2, 18007.0], [5.3, 18007.0], [5.4, 18011.0], [5.5, 18044.0], [5.6, 18047.0], [5.7, 18047.0], [5.8, 18048.0], [5.9, 18057.0], [6.0, 18061.0], [6.1, 18061.0], [6.2, 18091.0], [6.3, 18127.0], [6.4, 18148.0], [6.5, 18148.0], [6.6, 18182.0], [6.7, 18232.0], [6.8, 18232.0], [6.9, 18255.0], [7.0, 18290.0], [7.1, 18297.0], [7.2, 18297.0], [7.3, 18297.0], [7.4, 18379.0], [7.5, 18382.0], [7.6, 18382.0], [7.7, 18422.0], [7.8, 18424.0], [7.9, 18435.0], [8.0, 18435.0], [8.1, 18453.0], [8.2, 18489.0], [8.3, 18536.0], [8.4, 18536.0], [8.5, 18539.0], [8.6, 18540.0], [8.7, 18540.0], [8.8, 18542.0], [8.9, 18552.0], [9.0, 18555.0], [9.1, 18555.0], [9.2, 18562.0], [9.3, 18677.0], [9.4, 18687.0], [9.5, 18687.0], [9.6, 18693.0], [9.7, 18732.0], [9.8, 18756.0], [9.9, 18756.0], [10.0, 18757.0], [10.1, 18836.0], [10.2, 18836.0], [10.3, 18861.0], [10.4, 18947.0], [10.5, 18990.0], [10.6, 18990.0], [10.7, 19170.0], [10.8, 19193.0], [10.9, 19203.0], [11.0, 19203.0], [11.1, 19275.0], [11.2, 19325.0], [11.3, 19371.0], [11.4, 19371.0], [11.5, 19440.0], [11.6, 19454.0], [11.7, 19454.0], [11.8, 19488.0], [11.9, 19506.0], [12.0, 19529.0], [12.1, 19529.0], [12.2, 19550.0], [12.3, 19563.0], [12.4, 19617.0], [12.5, 19617.0], [12.6, 19624.0], [12.7, 19656.0], [12.8, 19671.0], [12.9, 19671.0], [13.0, 19682.0], [13.1, 19711.0], [13.2, 19745.0], [13.3, 19745.0], [13.4, 19780.0], [13.5, 19822.0], [13.6, 19822.0], [13.7, 19852.0], [13.8, 19856.0], [13.9, 19882.0], [14.0, 19882.0], [14.1, 19901.0], [14.2, 19902.0], [14.3, 19971.0], [14.4, 19971.0], [14.5, 19983.0], [14.6, 20067.0], [14.7, 20067.0], [14.8, 20067.0], [14.9, 20119.0], [15.0, 20120.0], [15.1, 20120.0], [15.2, 20195.0], [15.3, 20202.0], [15.4, 20429.0], [15.5, 20429.0], [15.6, 20474.0], [15.7, 20549.0], [15.8, 20783.0], [15.9, 20783.0], [16.0, 20828.0], [16.1, 20855.0], [16.2, 20912.0], [16.3, 20912.0], [16.4, 20943.0], [16.5, 20986.0], [16.6, 21010.0], [16.7, 21010.0], [16.8, 21041.0], [16.9, 21211.0], [17.0, 21211.0], [17.1, 21357.0], [17.2, 21408.0], [17.3, 21452.0], [17.4, 21452.0], [17.5, 21469.0], [17.6, 21480.0], [17.7, 21499.0], [17.8, 21499.0], [17.9, 21592.0], [18.0, 21696.0], [18.1, 21719.0], [18.2, 21719.0], [18.3, 21758.0], [18.4, 21759.0], [18.5, 21759.0], [18.6, 21799.0], [18.7, 21851.0], [18.8, 21895.0], [18.9, 21895.0], [19.0, 21910.0], [19.1, 21951.0], [19.2, 21974.0], [19.3, 21974.0], [19.4, 21988.0], [19.5, 22034.0], [19.6, 22118.0], [19.7, 22118.0], [19.8, 22276.0], [19.9, 22333.0], [20.0, 22335.0], [20.1, 22335.0], [20.2, 22354.0], [20.3, 22356.0], [20.4, 22356.0], [20.5, 22383.0], [20.6, 22383.0], [20.7, 22392.0], [20.8, 22392.0], [20.9, 22433.0], [21.0, 22440.0], [21.1, 22449.0], [21.2, 22449.0], [21.3, 22474.0], [21.4, 22483.0], [21.5, 22503.0], [21.6, 22503.0], [21.7, 22503.0], [21.8, 22570.0], [21.9, 22570.0], [22.0, 22610.0], [22.1, 22634.0], [22.2, 22646.0], [22.3, 22646.0], [22.4, 22650.0], [22.5, 22652.0], [22.6, 22726.0], [22.7, 22726.0], [22.8, 22763.0], [22.9, 22763.0], [23.0, 22873.0], [23.1, 22873.0], [23.2, 22881.0], [23.3, 22937.0], [23.4, 22937.0], [23.5, 23013.0], [23.6, 23053.0], [23.7, 23069.0], [23.8, 23069.0], [23.9, 23111.0], [24.0, 23144.0], [24.1, 23171.0], [24.2, 23171.0], [24.3, 23186.0], [24.4, 23284.0], [24.5, 23337.0], [24.6, 23337.0], [24.7, 23338.0], [24.8, 23377.0], [24.9, 23396.0], [25.0, 23396.0], [25.1, 23401.0], [25.2, 23413.0], [25.3, 23413.0], [25.4, 23463.0], [25.5, 23584.0], [25.6, 23647.0], [25.7, 23647.0], [25.8, 23668.0], [25.9, 23740.0], [26.0, 23745.0], [26.1, 23745.0], [26.2, 23752.0], [26.3, 23753.0], [26.4, 23777.0], [26.5, 23777.0], [26.6, 23781.0], [26.7, 23783.0], [26.8, 23783.0], [26.9, 23819.0], [27.0, 23854.0], [27.1, 23859.0], [27.2, 23859.0], [27.3, 23872.0], [27.4, 23906.0], [27.5, 23914.0], [27.6, 23914.0], [27.7, 23944.0], [27.8, 23971.0], [27.9, 24008.0], [28.0, 24008.0], [28.1, 24023.0], [28.2, 24036.0], [28.3, 24058.0], [28.4, 24058.0], [28.5, 24065.0], [28.6, 24077.0], [28.7, 24077.0], [28.8, 24077.0], [28.9, 24096.0], [29.0, 24132.0], [29.1, 24132.0], [29.2, 24137.0], [29.3, 24157.0], [29.4, 24182.0], [29.5, 24182.0], [29.6, 24187.0], [29.7, 24196.0], [29.8, 24206.0], [29.9, 24206.0], [30.0, 24210.0], [30.1, 24236.0], [30.2, 24236.0], [30.3, 24264.0], [30.4, 24266.0], [30.5, 24299.0], [30.6, 24299.0], [30.7, 24305.0], [30.8, 24309.0], [30.9, 24320.0], [31.0, 24320.0], [31.1, 24335.0], [31.2, 24337.0], [31.3, 24372.0], [31.4, 24372.0], [31.5, 24379.0], [31.6, 24440.0], [31.7, 24440.0], [31.8, 24513.0], [31.9, 24522.0], [32.0, 24523.0], [32.1, 24523.0], [32.2, 24529.0], [32.3, 24537.0], [32.4, 24543.0], [32.5, 24543.0], [32.6, 24551.0], [32.7, 24562.0], [32.8, 24583.0], [32.9, 24583.0], [33.0, 24617.0], [33.1, 24641.0], [33.2, 24653.0], [33.3, 24653.0], [33.4, 24659.0], [33.5, 24678.0], [33.6, 24678.0], [33.7, 24694.0], [33.8, 24699.0], [33.9, 24743.0], [34.0, 24743.0], [34.1, 24752.0], [34.2, 24781.0], [34.3, 24781.0], [34.4, 24781.0], [34.5, 24792.0], [34.6, 24794.0], [34.7, 24801.0], [34.8, 24801.0], [34.9, 24805.0], [35.0, 24809.0], [35.1, 24809.0], [35.2, 24823.0], [35.3, 24914.0], [35.4, 24928.0], [35.5, 24928.0], [35.6, 24929.0], [35.7, 24999.0], [35.8, 25004.0], [35.9, 25004.0], [36.0, 25016.0], [36.1, 25020.0], [36.2, 25023.0], [36.3, 25023.0], [36.4, 25026.0], [36.5, 25042.0], [36.6, 25063.0], [36.7, 25063.0], [36.8, 25068.0], [36.9, 25089.0], [37.0, 25089.0], [37.1, 25093.0], [37.2, 25094.0], [37.3, 25129.0], [37.4, 25129.0], [37.5, 25129.0], [37.6, 25143.0], [37.7, 25176.0], [37.8, 25176.0], [37.9, 25182.0], [38.0, 25186.0], [38.1, 25194.0], [38.2, 25194.0], [38.3, 25195.0], [38.4, 25200.0], [38.5, 25200.0], [38.6, 25231.0], [38.7, 25291.0], [38.8, 25309.0], [38.9, 25309.0], [39.0, 25320.0], [39.1, 25366.0], [39.2, 25373.0], [39.3, 25373.0], [39.4, 25402.0], [39.5, 25409.0], [39.6, 25414.0], [39.7, 25414.0], [39.8, 25444.0], [39.9, 25448.0], [40.0, 25485.0], [40.1, 25485.0], [40.2, 25499.0], [40.3, 25663.0], [40.4, 25663.0], [40.5, 25703.0], [40.6, 25711.0], [40.7, 25758.0], [40.8, 25758.0], [40.9, 25783.0], [41.0, 25834.0], [41.1, 25847.0], [41.2, 25847.0], [41.3, 25852.0], [41.4, 25864.0], [41.5, 25884.0], [41.6, 25884.0], [41.7, 25904.0], [41.8, 25906.0], [41.9, 25906.0], [42.0, 25910.0], [42.1, 25947.0], [42.2, 25952.0], [42.3, 25952.0], [42.4, 25955.0], [42.5, 25970.0], [42.6, 25973.0], [42.7, 25973.0], [42.8, 25995.0], [42.9, 25999.0], [43.0, 26028.0], [43.1, 26028.0], [43.2, 26032.0], [43.3, 26036.0], [43.4, 26036.0], [43.5, 26062.0], [43.6, 26122.0], [43.7, 26131.0], [43.8, 26131.0], [43.9, 26154.0], [44.0, 26188.0], [44.1, 26195.0], [44.2, 26195.0], [44.3, 26206.0], [44.4, 26210.0], [44.5, 26213.0], [44.6, 26213.0], [44.7, 26232.0], [44.8, 26260.0], [44.9, 26304.0], [45.0, 26304.0], [45.1, 26331.0], [45.2, 26358.0], [45.3, 26358.0], [45.4, 26395.0], [45.5, 26396.0], [45.6, 26406.0], [45.7, 26406.0], [45.8, 26415.0], [45.9, 26435.0], [46.0, 26509.0], [46.1, 26509.0], [46.2, 26582.0], [46.3, 26593.0], [46.4, 26691.0], [46.5, 26691.0], [46.6, 26769.0], [46.7, 26776.0], [46.8, 26776.0], [46.9, 26782.0], [47.0, 26819.0], [47.1, 26946.0], [47.2, 26946.0], [47.3, 27022.0], [47.4, 27031.0], [47.5, 27037.0], [47.6, 27037.0], [47.7, 27096.0], [47.8, 27103.0], [47.9, 27114.0], [48.0, 27114.0], [48.1, 27128.0], [48.2, 27140.0], [48.3, 27143.0], [48.4, 27143.0], [48.5, 27168.0], [48.6, 27189.0], [48.7, 27189.0], [48.8, 27221.0], [48.9, 27278.0], [49.0, 27291.0], [49.1, 27291.0], [49.2, 27315.0], [49.3, 27344.0], [49.4, 27353.0], [49.5, 27353.0], [49.6, 27359.0], [49.7, 27366.0], [49.8, 27382.0], [49.9, 27382.0], [50.0, 27395.0], [50.1, 27444.0], [50.2, 27444.0], [50.3, 27544.0], [50.4, 27553.0], [50.5, 27554.0], [50.6, 27554.0], [50.7, 27583.0], [50.8, 27612.0], [50.9, 27659.0], [51.0, 27659.0], [51.1, 27665.0], [51.2, 27678.0], [51.3, 27686.0], [51.4, 27686.0], [51.5, 27690.0], [51.6, 27754.0], [51.7, 27754.0], [51.8, 27761.0], [51.9, 27764.0], [52.0, 27768.0], [52.1, 27768.0], [52.2, 27773.0], [52.3, 27791.0], [52.4, 27807.0], [52.5, 27807.0], [52.6, 27868.0], [52.7, 27878.0], [52.8, 27888.0], [52.9, 27888.0], [53.0, 27899.0], [53.1, 27982.0], [53.2, 28060.0], [53.3, 28060.0], [53.4, 28079.0], [53.5, 28089.0], [53.6, 28089.0], [53.7, 28104.0], [53.8, 28106.0], [53.9, 28119.0], [54.0, 28119.0], [54.1, 28132.0], [54.2, 28161.0], [54.3, 28177.0], [54.4, 28177.0], [54.5, 28209.0], [54.6, 28230.0], [54.7, 28253.0], [54.8, 28253.0], [54.9, 28265.0], [55.0, 28276.0], [55.1, 28276.0], [55.2, 28336.0], [55.3, 28371.0], [55.4, 28374.0], [55.5, 28374.0], [55.6, 28394.0], [55.7, 28408.0], [55.8, 28435.0], [55.9, 28435.0], [56.0, 28513.0], [56.1, 28533.0], [56.2, 28559.0], [56.3, 28559.0], [56.4, 28570.0], [56.5, 28609.0], [56.6, 28610.0], [56.7, 28610.0], [56.8, 28625.0], [56.9, 28649.0], [57.0, 28649.0], [57.1, 28657.0], [57.2, 28680.0], [57.3, 28681.0], [57.4, 28681.0], [57.5, 28682.0], [57.6, 28705.0], [57.7, 28706.0], [57.8, 28706.0], [57.9, 28717.0], [58.0, 28727.0], [58.1, 28765.0], [58.2, 28765.0], [58.3, 28786.0], [58.4, 28816.0], [58.5, 28816.0], [58.6, 28888.0], [58.7, 28898.0], [58.8, 28902.0], [58.9, 28902.0], [59.0, 28909.0], [59.1, 28911.0], [59.2, 28934.0], [59.3, 28934.0], [59.4, 28938.0], [59.5, 28950.0], [59.6, 29001.0], [59.7, 29001.0], [59.8, 29005.0], [59.9, 29008.0], [60.0, 29031.0], [60.1, 29031.0], [60.2, 29048.0], [60.3, 29054.0], [60.4, 29054.0], [60.5, 29056.0], [60.6, 29066.0], [60.7, 29090.0], [60.8, 29090.0], [60.9, 29101.0], [61.0, 29102.0], [61.1, 29103.0], [61.2, 29103.0], [61.3, 29124.0], [61.4, 29126.0], [61.5, 29137.0], [61.6, 29137.0], [61.7, 29153.0], [61.8, 29155.0], [61.9, 29155.0], [62.0, 29165.0], [62.1, 29174.0], [62.2, 29175.0], [62.3, 29175.0], [62.4, 29181.0], [62.5, 29182.0], [62.6, 29196.0], [62.7, 29196.0], [62.8, 29203.0], [62.9, 29204.0], [63.0, 29229.0], [63.1, 29229.0], [63.2, 29230.0], [63.3, 29238.0], [63.4, 29238.0], [63.5, 29251.0], [63.6, 29263.0], [63.7, 29266.0], [63.8, 29266.0], [63.9, 29277.0], [64.0, 29280.0], [64.1, 29281.0], [64.2, 29281.0], [64.3, 29283.0], [64.4, 29307.0], [64.5, 29312.0], [64.6, 29312.0], [64.7, 29314.0], [64.8, 29319.0], [64.9, 29337.0], [65.0, 29337.0], [65.1, 29357.0], [65.2, 29363.0], [65.3, 29363.0], [65.4, 29365.0], [65.5, 29370.0], [65.6, 29372.0], [65.7, 29372.0], [65.8, 29382.0], [65.9, 29391.0], [66.0, 29393.0], [66.1, 29393.0], [66.2, 29396.0], [66.3, 29399.0], [66.4, 29400.0], [66.5, 29400.0], [66.6, 29404.0], [66.7, 29419.0], [66.8, 29419.0], [66.9, 29419.0], [67.0, 29424.0], [67.1, 29425.0], [67.2, 29425.0], [67.3, 29428.0], [67.4, 29444.0], [67.5, 29444.0], [67.6, 29444.0], [67.7, 29444.0], [67.8, 29446.0], [67.9, 29448.0], [68.0, 29448.0], [68.1, 29456.0], [68.2, 29464.0], [68.3, 29475.0], [68.4, 29475.0], [68.5, 29479.0], [68.6, 29483.0], [68.7, 29483.0], [68.8, 29485.0], [68.9, 29487.0], [69.0, 29499.0], [69.1, 29499.0], [69.2, 29512.0], [69.3, 29512.0], [69.4, 29514.0], [69.5, 29514.0], [69.6, 29517.0], [69.7, 29519.0], [69.8, 29526.0], [69.9, 29526.0], [70.0, 29527.0], [70.1, 29530.0], [70.2, 29530.0], [70.3, 29537.0], [70.4, 29539.0], [70.5, 29539.0], [70.6, 29539.0], [70.7, 29554.0], [70.8, 29556.0], [70.9, 29558.0], [71.0, 29558.0], [71.1, 29559.0], [71.2, 29563.0], [71.3, 29568.0], [71.4, 29568.0], [71.5, 29573.0], [71.6, 29580.0], [71.7, 29580.0], [71.8, 29582.0], [71.9, 29590.0], [72.0, 29598.0], [72.1, 29598.0], [72.2, 29605.0], [72.3, 29607.0], [72.4, 29608.0], [72.5, 29608.0], [72.6, 29613.0], [72.7, 29615.0], [72.8, 29616.0], [72.9, 29616.0], [73.0, 29618.0], [73.1, 29628.0], [73.2, 29637.0], [73.3, 29637.0], [73.4, 29641.0], [73.5, 29645.0], [73.6, 29645.0], [73.7, 29648.0], [73.8, 29649.0], [73.9, 29654.0], [74.0, 29654.0], [74.1, 29659.0], [74.2, 29670.0], [74.3, 29674.0], [74.4, 29674.0], [74.5, 29674.0], [74.6, 29678.0], [74.7, 29678.0], [74.8, 29678.0], [74.9, 29681.0], [75.0, 29681.0], [75.1, 29681.0], [75.2, 29688.0], [75.3, 29692.0], [75.4, 29692.0], [75.5, 29692.0], [75.6, 29699.0], [75.7, 29702.0], [75.8, 29705.0], [75.9, 29705.0], [76.0, 29707.0], [76.1, 29710.0], [76.2, 29713.0], [76.3, 29713.0], [76.4, 29715.0], [76.5, 29719.0], [76.6, 29723.0], [76.7, 29723.0], [76.8, 29728.0], [76.9, 29729.0], [77.0, 29729.0], [77.1, 29731.0], [77.2, 29735.0], [77.3, 29735.0], [77.4, 29735.0], [77.5, 29737.0], [77.6, 29742.0], [77.7, 29747.0], [77.8, 29747.0], [77.9, 29748.0], [78.0, 29758.0], [78.1, 29762.0], [78.2, 29762.0], [78.3, 29767.0], [78.4, 29770.0], [78.5, 29770.0], [78.6, 29773.0], [78.7, 29780.0], [78.8, 29787.0], [78.9, 29787.0], [79.0, 29788.0], [79.1, 29794.0], [79.2, 29797.0], [79.3, 29797.0], [79.4, 29799.0], [79.5, 29802.0], [79.6, 29806.0], [79.7, 29806.0], [79.8, 29809.0], [79.9, 29814.0], [80.0, 29824.0], [80.1, 29824.0], [80.2, 29841.0], [80.3, 29849.0], [80.4, 29849.0], [80.5, 29851.0], [80.6, 29857.0], [80.7, 29858.0], [80.8, 29858.0], [80.9, 29860.0], [81.0, 29863.0], [81.1, 29873.0], [81.2, 29873.0], [81.3, 29874.0], [81.4, 29886.0], [81.5, 29889.0], [81.6, 29889.0], [81.7, 29894.0], [81.8, 29898.0], [81.9, 29898.0], [82.0, 29899.0], [82.1, 29904.0], [82.2, 29904.0], [82.3, 29904.0], [82.4, 29913.0], [82.5, 29914.0], [82.6, 29918.0], [82.7, 29918.0], [82.8, 29918.0], [82.9, 29931.0], [83.0, 29936.0], [83.1, 29936.0], [83.2, 29937.0], [83.3, 29939.0], [83.4, 29939.0], [83.5, 29947.0], [83.6, 29950.0], [83.7, 29958.0], [83.8, 29958.0], [83.9, 29975.0], [84.0, 29980.0], [84.1, 29981.0], [84.2, 29981.0], [84.3, 29983.0], [84.4, 29991.0], [84.5, 29991.0], [84.6, 29991.0], [84.7, 29992.0], [84.8, 29994.0], [84.9, 30005.0], [85.0, 30005.0], [85.1, 30006.0], [85.2, 30025.0], [85.3, 30025.0], [85.4, 30036.0], [85.5, 30047.0], [85.6, 30050.0], [85.7, 30050.0], [85.8, 30055.0], [85.9, 30057.0], [86.0, 30061.0], [86.1, 30061.0], [86.2, 30099.0], [86.3, 30104.0], [86.4, 30107.0], [86.5, 30107.0], [86.6, 30132.0], [86.7, 30135.0], [86.8, 30135.0], [86.9, 30161.0], [87.0, 30163.0], [87.1, 30170.0], [87.2, 30170.0], [87.3, 30189.0], [87.4, 30189.0], [87.5, 30199.0], [87.6, 30199.0], [87.7, 30211.0], [87.8, 30213.0], [87.9, 30223.0], [88.0, 30223.0], [88.1, 30229.0], [88.2, 30237.0], [88.3, 30241.0], [88.4, 30241.0], [88.5, 30247.0], [88.6, 30248.0], [88.7, 30248.0], [88.8, 30250.0], [88.9, 30258.0], [89.0, 30278.0], [89.1, 30278.0], [89.2, 30282.0], [89.3, 30308.0], [89.4, 30319.0], [89.5, 30319.0], [89.6, 30321.0], [89.7, 30327.0], [89.8, 30333.0], [89.9, 30333.0], [90.0, 30348.0], [90.1, 30349.0], [90.2, 30349.0], [90.3, 30351.0], [90.4, 30352.0], [90.5, 30353.0], [90.6, 30353.0], [90.7, 30355.0], [90.8, 30379.0], [90.9, 30397.0], [91.0, 30397.0], [91.1, 30405.0], [91.2, 30409.0], [91.3, 30412.0], [91.4, 30412.0], [91.5, 30419.0], [91.6, 30448.0], [91.7, 30448.0], [91.8, 30451.0], [91.9, 30453.0], [92.0, 30461.0], [92.1, 30461.0], [92.2, 30465.0], [92.3, 30465.0], [92.4, 30468.0], [92.5, 30468.0], [92.6, 30474.0], [92.7, 30475.0], [92.8, 30513.0], [92.9, 30513.0], [93.0, 30559.0], [93.1, 30591.0], [93.2, 30691.0], [93.3, 30691.0], [93.4, 30888.0], [93.5, 30935.0], [93.6, 30935.0], [93.7, 31207.0], [93.8, 31278.0], [93.9, 31337.0], [94.0, 31337.0], [94.1, 31507.0], [94.2, 31581.0], [94.3, 31608.0], [94.4, 31608.0], [94.5, 31662.0], [94.6, 31704.0], [94.7, 31919.0], [94.8, 31919.0], [94.9, 32059.0], [95.0, 32129.0], [95.1, 32129.0], [95.2, 32161.0], [95.3, 32182.0], [95.4, 32547.0], [95.5, 32547.0], [95.6, 32947.0], [95.7, 33081.0], [95.8, 33179.0], [95.9, 33179.0], [96.0, 33425.0], [96.1, 33667.0], [96.2, 34012.0], [96.3, 34012.0], [96.4, 34183.0], [96.5, 34392.0], [96.6, 34965.0], [96.7, 34965.0], [96.8, 35136.0], [96.9, 35519.0], [97.0, 35519.0], [97.1, 35827.0], [97.2, 36461.0], [97.3, 36796.0], [97.4, 36796.0], [97.5, 36909.0], [97.6, 37852.0], [97.7, 38042.0], [97.8, 38042.0], [97.9, 38260.0], [98.0, 39098.0], [98.1, 39555.0], [98.2, 39555.0], [98.3, 40543.0], [98.4, 41380.0], [98.5, 41380.0], [98.6, 41528.0], [98.7, 41732.0], [98.8, 42394.0], [98.9, 42394.0], [99.0, 42806.0], [99.1, 42985.0], [99.2, 43310.0], [99.3, 43310.0], [99.4, 43592.0], [99.5, 43703.0], [99.6, 44361.0], [99.7, 44361.0], [99.8, 44416.0], [99.9, 44561.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 28.0, "series": [{"data": [[34100.0, 1.0], [33100.0, 1.0], [34300.0, 1.0], [32900.0, 1.0], [34900.0, 1.0], [35500.0, 1.0], [36700.0, 1.0], [35100.0, 1.0], [36900.0, 1.0], [39500.0, 1.0], [40500.0, 1.0], [41500.0, 1.0], [42900.0, 1.0], [42300.0, 1.0], [41700.0, 1.0], [41300.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [44500.0, 1.0], [44300.0, 1.0], [43500.0, 1.0], [3200.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11100.0, 1.0], [13600.0, 1.0], [16300.0, 1.0], [17400.0, 1.0], [17200.0, 3.0], [17300.0, 2.0], [17100.0, 1.0], [17600.0, 1.0], [18200.0, 5.0], [17800.0, 8.0], [17900.0, 9.0], [18100.0, 3.0], [18000.0, 8.0], [18400.0, 5.0], [17700.0, 5.0], [17500.0, 2.0], [18300.0, 2.0], [18600.0, 3.0], [18500.0, 7.0], [19400.0, 3.0], [19100.0, 2.0], [18800.0, 2.0], [18700.0, 3.0], [19200.0, 2.0], [18900.0, 2.0], [19300.0, 2.0], [20400.0, 2.0], [20200.0, 1.0], [19600.0, 5.0], [19500.0, 4.0], [19700.0, 3.0], [19900.0, 4.0], [19800.0, 4.0], [20000.0, 2.0], [20100.0, 3.0], [21300.0, 1.0], [21200.0, 1.0], [21400.0, 5.0], [21000.0, 2.0], [20800.0, 2.0], [20900.0, 3.0], [20700.0, 1.0], [20500.0, 1.0], [21500.0, 1.0], [22300.0, 7.0], [22400.0, 5.0], [21700.0, 4.0], [21600.0, 1.0], [21900.0, 4.0], [22000.0, 1.0], [22100.0, 1.0], [22200.0, 1.0], [22500.0, 3.0], [21800.0, 2.0], [23400.0, 3.0], [23000.0, 3.0], [23100.0, 4.0], [22800.0, 2.0], [22900.0, 1.0], [22700.0, 3.0], [23200.0, 1.0], [23500.0, 1.0], [23300.0, 4.0], [22600.0, 5.0], [24500.0, 9.0], [23700.0, 7.0], [24000.0, 8.0], [24300.0, 7.0], [23900.0, 4.0], [24200.0, 6.0], [24100.0, 6.0], [23800.0, 4.0], [24400.0, 1.0], [23600.0, 2.0], [25100.0, 8.0], [25300.0, 4.0], [24700.0, 6.0], [25400.0, 7.0], [24600.0, 7.0], [25000.0, 11.0], [24800.0, 4.0], [24900.0, 4.0], [25200.0, 3.0], [26500.0, 3.0], [26200.0, 5.0], [25900.0, 10.0], [26300.0, 5.0], [25600.0, 1.0], [25700.0, 4.0], [26600.0, 1.0], [25800.0, 5.0], [26400.0, 3.0], [26000.0, 4.0], [26100.0, 5.0], [27500.0, 4.0], [27200.0, 3.0], [27300.0, 7.0], [26700.0, 3.0], [27000.0, 4.0], [26800.0, 1.0], [27400.0, 1.0], [27600.0, 6.0], [27100.0, 7.0], [26900.0, 1.0], [27800.0, 5.0], [28100.0, 6.0], [28300.0, 4.0], [28000.0, 3.0], [27900.0, 1.0], [28200.0, 5.0], [27700.0, 6.0], [28400.0, 2.0], [28500.0, 4.0], [28600.0, 8.0], [28900.0, 6.0], [29000.0, 9.0], [29400.0, 20.0], [29100.0, 14.0], [29300.0, 15.0], [29600.0, 26.0], [29500.0, 22.0], [29200.0, 12.0], [28800.0, 3.0], [28700.0, 6.0], [29800.0, 19.0], [30200.0, 12.0], [30100.0, 10.0], [29900.0, 21.0], [29700.0, 28.0], [30000.0, 10.0], [30400.0, 13.0], [30300.0, 13.0], [30500.0, 3.0], [30600.0, 1.0], [31300.0, 1.0], [31200.0, 2.0], [30900.0, 1.0], [31600.0, 2.0], [31500.0, 2.0], [31700.0, 1.0], [30800.0, 1.0], [32100.0, 3.0], [31900.0, 1.0], [32000.0, 1.0], [32500.0, 1.0], [33600.0, 1.0], [33000.0, 1.0], [34000.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [36400.0, 1.0], [38200.0, 1.0], [37800.0, 1.0], [38000.0, 1.0], [39000.0, 1.0], [42800.0, 1.0], [44400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.538461538461538, "minX": 1.60424502E12, "maxY": 10.0, "series": [{"data": [[1.6042467E12, 10.0], [1.604247E12, 6.538461538461538], [1.60424568E12, 10.0], [1.60424598E12, 10.0], [1.60424538E12, 10.0], [1.60424628E12, 10.0], [1.60424508E12, 10.0], [1.60424658E12, 10.0], [1.60424688E12, 10.0], [1.60424544E12, 10.0], [1.60424514E12, 10.0], [1.60424586E12, 10.0], [1.60424616E12, 10.0], [1.60424646E12, 10.0], [1.60424676E12, 10.0], [1.60424556E12, 10.0], [1.60424526E12, 10.0], [1.60424562E12, 10.0], [1.60424604E12, 10.0], [1.60424532E12, 10.0], [1.60424634E12, 10.0], [1.60424502E12, 10.0], [1.60424664E12, 10.0], [1.60424694E12, 10.0], [1.60424574E12, 10.0], [1.60424592E12, 10.0], [1.60424622E12, 10.0], [1.60424652E12, 10.0], [1.60424682E12, 10.0], [1.6042455E12, 10.0], [1.6042452E12, 10.0], [1.6042458E12, 10.0], [1.6042461E12, 10.0], [1.6042464E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.604247E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17808.0, "minX": 1.0, "maxY": 26516.687327823685, "series": [{"data": [[8.0, 17904.0], [4.0, 18057.0], [2.0, 18007.0], [1.0, 18297.0], [9.0, 17808.0], [10.0, 26516.687327823685], [5.0, 18091.0], [6.0, 18044.0], [3.0, 17936.0], [7.0, 18048.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26412.662585034006]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.633333333333333, "minX": 1.60424502E12, "maxY": 207186.26666666666, "series": [{"data": [[1.6042467E12, 40932.73333333333], [1.604247E12, 11365.05], [1.60424568E12, 44656.86666666667], [1.60424598E12, 191243.8], [1.60424538E12, 49102.21666666667], [1.60424628E12, 32724.083333333332], [1.60424508E12, 207186.26666666666], [1.60424658E12, 41455.48333333333], [1.60424688E12, 143324.81666666668], [1.60424544E12, 45941.433333333334], [1.60424514E12, 65989.8], [1.60424586E12, 167435.31666666668], [1.60424616E12, 70169.03333333334], [1.60424646E12, 45070.666666666664], [1.60424676E12, 24917.0], [1.60424556E12, 46902.11666666667], [1.60424526E12, 61407.05], [1.60424562E12, 51756.9], [1.60424604E12, 117464.05], [1.60424532E12, 54530.8], [1.60424634E12, 43630.61666666667], [1.60424502E12, 30397.35], [1.60424664E12, 51196.0], [1.60424694E12, 76323.0], [1.60424574E12, 35540.61666666667], [1.60424592E12, 64918.316666666666], [1.60424622E12, 68994.5], [1.60424652E12, 57852.8], [1.60424682E12, 39450.71666666667], [1.6042455E12, 48464.63333333333], [1.6042452E12, 141540.21666666667], [1.6042458E12, 39153.48333333333], [1.6042461E12, 61167.316666666666], [1.6042464E12, 51257.833333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6042467E12, 167.8], [1.604247E12, 87.26666666666667], [1.60424568E12, 146.01666666666668], [1.60424598E12, 187.06666666666666], [1.60424538E12, 153.4], [1.60424628E12, 124.18333333333334], [1.60424508E12, 176.53333333333333], [1.60424658E12, 146.06666666666666], [1.60424688E12, 177.25], [1.60424544E12, 146.13333333333333], [1.60424514E12, 207.51666666666668], [1.60424586E12, 214.7], [1.60424616E12, 177.53333333333333], [1.60424646E12, 153.41666666666666], [1.60424676E12, 167.8], [1.60424556E12, 146.13333333333333], [1.60424526E12, 153.43333333333334], [1.60424562E12, 146.35], [1.60424604E12, 195.81666666666666], [1.60424532E12, 169.31666666666666], [1.60424634E12, 146.13333333333333], [1.60424502E12, 14.633333333333333], [1.60424664E12, 146.11666666666667], [1.60424694E12, 165.5], [1.60424574E12, 160.68333333333334], [1.60424592E12, 168.06666666666666], [1.60424622E12, 169.23333333333332], [1.60424652E12, 154.41666666666666], [1.60424682E12, 191.3], [1.6042455E12, 146.11666666666667], [1.6042452E12, 121.06666666666666], [1.6042458E12, 190.26666666666668], [1.6042461E12, 175.86666666666667], [1.6042464E12, 146.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.604247E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4738.5, "minX": 1.60424502E12, "maxY": 36382.705882352944, "series": [{"data": [[1.6042467E12, 27769.0], [1.604247E12, 17787.769230769234], [1.60424568E12, 29547.800000000003], [1.60424598E12, 23483.115384615387], [1.60424538E12, 28571.190476190477], [1.60424628E12, 36382.705882352944], [1.60424508E12, 23607.375], [1.60424658E12, 29349.949999999997], [1.60424688E12, 23229.480000000007], [1.60424544E12, 29966.3], [1.60424514E12, 20320.06896551724], [1.60424586E12, 19286.566666666666], [1.60424616E12, 27171.833333333332], [1.60424646E12, 29530.619047619046], [1.60424676E12, 25272.173913043483], [1.60424556E12, 30015.550000000003], [1.60424526E12, 32278.7619047619], [1.60424562E12, 29670.499999999996], [1.60424604E12, 22991.59259259259], [1.60424532E12, 25628.73913043478], [1.60424634E12, 29371.0], [1.60424502E12, 4738.5], [1.60424664E12, 29906.9], [1.60424694E12, 27787.043478260868], [1.60424574E12, 28256.954545454548], [1.60424592E12, 24637.916666666664], [1.60424622E12, 24521.04347826087], [1.60424652E12, 28199.33333333333], [1.60424682E12, 23975.03846153846], [1.6042455E12, 29923.65], [1.6042452E12, 31674.937500000004], [1.6042458E12, 24793.269230769234], [1.6042461E12, 20375.040000000005], [1.6042464E12, 30030.649999999994]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.604247E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4732.0, "minX": 1.60424502E12, "maxY": 36381.94117647058, "series": [{"data": [[1.6042467E12, 27768.130434782608], [1.604247E12, 17785.76923076923], [1.60424568E12, 29546.6], [1.60424598E12, 23479.115384615387], [1.60424538E12, 28569.952380952378], [1.60424628E12, 36381.94117647058], [1.60424508E12, 23603.833333333336], [1.60424658E12, 29349.049999999996], [1.60424688E12, 23225.48], [1.60424544E12, 29965.25], [1.60424514E12, 20318.620689655178], [1.60424586E12, 19282.933333333334], [1.60424616E12, 27170.458333333332], [1.60424646E12, 29529.38095238095], [1.60424676E12, 25271.478260869568], [1.60424556E12, 30014.249999999996], [1.60424526E12, 32277.19047619048], [1.60424562E12, 29669.0], [1.60424604E12, 22989.259259259255], [1.60424532E12, 25627.60869565217], [1.60424634E12, 29370.05], [1.60424502E12, 4732.0], [1.60424664E12, 29905.5], [1.60424694E12, 27784.565217391304], [1.60424574E12, 28256.27272727273], [1.60424592E12, 24635.25], [1.60424622E12, 24519.478260869564], [1.60424652E12, 28197.999999999996], [1.60424682E12, 23974.076923076926], [1.6042455E12, 29922.3], [1.6042452E12, 31669.562499999996], [1.6042458E12, 24792.230769230777], [1.6042461E12, 20372.88], [1.6042464E12, 30029.35]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.604247E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.12, "minX": 1.60424502E12, "maxY": 39.0, "series": [{"data": [[1.6042467E12, 0.4782608695652174], [1.604247E12, 0.15384615384615385], [1.60424568E12, 0.6], [1.60424598E12, 0.42307692307692313], [1.60424538E12, 0.38095238095238093], [1.60424628E12, 0.23529411764705882], [1.60424508E12, 0.5], [1.60424658E12, 0.25], [1.60424688E12, 0.36], [1.60424544E12, 0.7000000000000001], [1.60424514E12, 0.4482758620689655], [1.60424586E12, 0.4], [1.60424616E12, 0.5416666666666667], [1.60424646E12, 0.6666666666666667], [1.60424676E12, 0.391304347826087], [1.60424556E12, 0.65], [1.60424526E12, 0.8095238095238096], [1.60424562E12, 0.55], [1.60424604E12, 0.4074074074074074], [1.60424532E12, 0.2608695652173913], [1.60424634E12, 0.55], [1.60424502E12, 39.0], [1.60424664E12, 0.6999999999999998], [1.60424694E12, 0.6521739130434784], [1.60424574E12, 0.4545454545454545], [1.60424592E12, 0.5416666666666667], [1.60424622E12, 0.5217391304347826], [1.60424652E12, 0.33333333333333337], [1.60424682E12, 0.5384615384615384], [1.6042455E12, 0.35], [1.6042452E12, 0.8749999999999998], [1.6042458E12, 0.3461538461538461], [1.6042461E12, 0.12], [1.6042464E12, 0.65]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.604247E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3286.0, "minX": 1.60424502E12, "maxY": 44561.0, "series": [{"data": [[1.6042467E12, 29983.0], [1.604247E12, 18297.0], [1.60424568E12, 29899.0], [1.60424598E12, 26028.0], [1.60424538E12, 30237.0], [1.60424628E12, 43592.0], [1.60424508E12, 28374.0], [1.60424658E12, 29886.0], [1.60424688E12, 28938.0], [1.60424544E12, 30412.0], [1.60424514E12, 24335.0], [1.60424586E12, 22383.0], [1.60424616E12, 32182.0], [1.60424646E12, 30189.0], [1.60424676E12, 28533.0], [1.60424556E12, 30513.0], [1.60424526E12, 44561.0], [1.60424562E12, 30465.0], [1.60424604E12, 29182.0], [1.60424532E12, 30935.0], [1.60424634E12, 30055.0], [1.60424502E12, 6191.0], [1.60424664E12, 30591.0], [1.60424694E12, 38042.0], [1.60424574E12, 29937.0], [1.60424592E12, 32059.0], [1.60424622E12, 27444.0], [1.60424652E12, 29312.0], [1.60424682E12, 27888.0], [1.6042455E12, 30319.0], [1.6042452E12, 43703.0], [1.6042458E12, 28570.0], [1.6042461E12, 31278.0], [1.6042464E12, 30474.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6042467E12, 24065.0], [1.604247E12, 17185.0], [1.60424568E12, 29153.0], [1.60424598E12, 19506.0], [1.60424538E12, 25758.0], [1.60424628E12, 29770.0], [1.60424508E12, 8347.0], [1.60424658E12, 28610.0], [1.60424688E12, 18540.0], [1.60424544E12, 29615.0], [1.60424514E12, 17828.0], [1.60424586E12, 17255.0], [1.60424616E12, 23745.0], [1.60424646E12, 28680.0], [1.60424676E12, 21895.0], [1.60424556E12, 29382.0], [1.60424526E12, 24523.0], [1.60424562E12, 29031.0], [1.60424604E12, 18677.0], [1.60424532E12, 23284.0], [1.60424634E12, 26395.0], [1.60424502E12, 3286.0], [1.60424664E12, 29137.0], [1.60424694E12, 17388.0], [1.60424574E12, 25834.0], [1.60424592E12, 17707.0], [1.60424622E12, 22354.0], [1.60424652E12, 27189.0], [1.60424682E12, 20986.0], [1.6042455E12, 29419.0], [1.6042452E12, 22763.0], [1.6042458E12, 20783.0], [1.6042461E12, 17774.0], [1.6042464E12, 29554.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6042467E12, 24065.0], [1.604247E12, 17185.0], [1.60424568E12, 29153.0], [1.60424598E12, 19506.0], [1.60424538E12, 25758.0], [1.60424628E12, 29770.0], [1.60424508E12, 8347.0], [1.60424658E12, 28610.0], [1.60424688E12, 18540.0], [1.60424544E12, 29615.0], [1.60424514E12, 17828.0], [1.60424586E12, 17255.0], [1.60424616E12, 23745.0], [1.60424646E12, 28680.0], [1.60424676E12, 21895.0], [1.60424556E12, 29382.0], [1.60424526E12, 24523.0], [1.60424562E12, 29031.0], [1.60424604E12, 18677.0], [1.60424532E12, 23284.0], [1.60424634E12, 26395.0], [1.60424502E12, 3286.0], [1.60424664E12, 29137.0], [1.60424694E12, 17388.0], [1.60424574E12, 25834.0], [1.60424592E12, 17707.0], [1.60424622E12, 22354.0], [1.60424652E12, 27189.0], [1.60424682E12, 20986.0], [1.6042455E12, 29419.0], [1.6042452E12, 22763.0], [1.6042458E12, 20783.0], [1.6042461E12, 17774.0], [1.6042464E12, 29554.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6042467E12, 24065.0], [1.604247E12, 17185.0], [1.60424568E12, 29153.0], [1.60424598E12, 19506.0], [1.60424538E12, 25758.0], [1.60424628E12, 29770.0], [1.60424508E12, 8347.0], [1.60424658E12, 28610.0], [1.60424688E12, 18540.0], [1.60424544E12, 29615.0], [1.60424514E12, 17828.0], [1.60424586E12, 17255.0], [1.60424616E12, 23745.0], [1.60424646E12, 28680.0], [1.60424676E12, 21895.0], [1.60424556E12, 29382.0], [1.60424526E12, 24523.0], [1.60424562E12, 29031.0], [1.60424604E12, 18677.0], [1.60424532E12, 23284.0], [1.60424634E12, 26395.0], [1.60424502E12, 3286.0], [1.60424664E12, 29137.0], [1.60424694E12, 17388.0], [1.60424574E12, 25834.0], [1.60424592E12, 17707.0], [1.60424622E12, 22354.0], [1.60424652E12, 27189.0], [1.60424682E12, 20986.0], [1.6042455E12, 29419.0], [1.6042452E12, 22763.0], [1.6042458E12, 20783.0], [1.6042461E12, 17774.0], [1.6042464E12, 29554.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6042467E12, 24065.0], [1.604247E12, 17185.0], [1.60424568E12, 29153.0], [1.60424598E12, 19506.0], [1.60424538E12, 25758.0], [1.60424628E12, 29770.0], [1.60424508E12, 8347.0], [1.60424658E12, 28610.0], [1.60424688E12, 18540.0], [1.60424544E12, 29615.0], [1.60424514E12, 17828.0], [1.60424586E12, 17255.0], [1.60424616E12, 23745.0], [1.60424646E12, 28680.0], [1.60424676E12, 21895.0], [1.60424556E12, 29382.0], [1.60424526E12, 24523.0], [1.60424562E12, 29031.0], [1.60424604E12, 18677.0], [1.60424532E12, 23284.0], [1.60424634E12, 26395.0], [1.60424502E12, 3286.0], [1.60424664E12, 29137.0], [1.60424694E12, 17388.0], [1.60424574E12, 25834.0], [1.60424592E12, 17707.0], [1.60424622E12, 22354.0], [1.60424652E12, 27189.0], [1.60424682E12, 20986.0], [1.6042455E12, 29419.0], [1.6042452E12, 22763.0], [1.6042458E12, 20783.0], [1.6042461E12, 17774.0], [1.6042464E12, 29554.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6042467E12, 28950.0], [1.604247E12, 17936.0], [1.60424568E12, 29532.5], [1.60424598E12, 23976.0], [1.60424538E12, 29124.0], [1.60424628E12, 35827.0], [1.60424508E12, 26089.5], [1.60424658E12, 29345.5], [1.60424688E12, 21758.0], [1.60424544E12, 29934.0], [1.60424514E12, 20429.0], [1.60424586E12, 18838.5], [1.60424616E12, 27435.5], [1.60424646E12, 29742.0], [1.60424676E12, 25499.0], [1.60424556E12, 30048.5], [1.60424526E12, 31207.0], [1.60424562E12, 29526.5], [1.60424604E12, 21480.0], [1.60424532E12, 25016.0], [1.60424634E12, 29726.0], [1.60424502E12, 4738.5], [1.60424664E12, 29916.0], [1.60424694E12, 29485.0], [1.60424574E12, 29304.0], [1.60424592E12, 22648.0], [1.60424622E12, 24617.0], [1.60424652E12, 28230.0], [1.60424682E12, 23826.5], [1.6042455E12, 29895.5], [1.6042452E12, 27087.0], [1.6042458E12, 24739.5], [1.6042461E12, 18127.0], [1.6042464E12, 30002.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.604247E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27395.0, "minX": 1.0, "maxY": 27395.0, "series": [{"data": [[1.0, 27395.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27394.0, "minX": 1.0, "maxY": 27394.0, "series": [{"data": [[1.0, 27394.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60424502E12, "maxY": 0.5, "series": [{"data": [[1.6042467E12, 0.38333333333333336], [1.604247E12, 0.05], [1.60424568E12, 0.3333333333333333], [1.60424598E12, 0.43333333333333335], [1.60424538E12, 0.35], [1.60424628E12, 0.2833333333333333], [1.60424508E12, 0.4], [1.60424658E12, 0.3333333333333333], [1.60424688E12, 0.4166666666666667], [1.60424544E12, 0.3333333333333333], [1.60424514E12, 0.48333333333333334], [1.60424586E12, 0.5], [1.60424616E12, 0.4], [1.60424646E12, 0.35], [1.60424676E12, 0.38333333333333336], [1.60424556E12, 0.3333333333333333], [1.60424526E12, 0.35], [1.60424562E12, 0.3333333333333333], [1.60424604E12, 0.45], [1.60424532E12, 0.38333333333333336], [1.60424634E12, 0.3333333333333333], [1.60424502E12, 0.2], [1.60424664E12, 0.3333333333333333], [1.60424694E12, 0.38333333333333336], [1.60424574E12, 0.36666666666666664], [1.60424592E12, 0.4], [1.60424622E12, 0.38333333333333336], [1.60424652E12, 0.35], [1.60424682E12, 0.43333333333333335], [1.6042455E12, 0.3333333333333333], [1.6042452E12, 0.26666666666666666], [1.6042458E12, 0.43333333333333335], [1.6042461E12, 0.4166666666666667], [1.6042464E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.604247E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60424502E12, "maxY": 0.5, "series": [{"data": [[1.6042467E12, 0.38333333333333336], [1.604247E12, 0.21666666666666667], [1.60424568E12, 0.3333333333333333], [1.60424598E12, 0.43333333333333335], [1.60424538E12, 0.35], [1.60424628E12, 0.2833333333333333], [1.60424508E12, 0.4], [1.60424658E12, 0.3333333333333333], [1.60424688E12, 0.4166666666666667], [1.60424544E12, 0.3333333333333333], [1.60424514E12, 0.48333333333333334], [1.60424586E12, 0.5], [1.60424616E12, 0.4], [1.60424646E12, 0.35], [1.60424676E12, 0.38333333333333336], [1.60424556E12, 0.3333333333333333], [1.60424526E12, 0.35], [1.60424562E12, 0.3333333333333333], [1.60424604E12, 0.45], [1.60424532E12, 0.38333333333333336], [1.60424634E12, 0.3333333333333333], [1.60424502E12, 0.03333333333333333], [1.60424664E12, 0.3333333333333333], [1.60424694E12, 0.38333333333333336], [1.60424574E12, 0.36666666666666664], [1.60424592E12, 0.4], [1.60424622E12, 0.38333333333333336], [1.60424652E12, 0.35], [1.60424682E12, 0.43333333333333335], [1.6042455E12, 0.3333333333333333], [1.6042452E12, 0.26666666666666666], [1.6042458E12, 0.43333333333333335], [1.6042461E12, 0.4166666666666667], [1.6042464E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.604247E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60424502E12, "maxY": 0.5, "series": [{"data": [[1.6042467E12, 0.38333333333333336], [1.604247E12, 0.21666666666666667], [1.60424568E12, 0.3333333333333333], [1.60424598E12, 0.43333333333333335], [1.60424538E12, 0.35], [1.60424628E12, 0.2833333333333333], [1.60424508E12, 0.4], [1.60424658E12, 0.3333333333333333], [1.60424688E12, 0.4166666666666667], [1.60424544E12, 0.3333333333333333], [1.60424514E12, 0.48333333333333334], [1.60424586E12, 0.5], [1.60424616E12, 0.4], [1.60424646E12, 0.35], [1.60424676E12, 0.38333333333333336], [1.60424556E12, 0.3333333333333333], [1.60424526E12, 0.35], [1.60424562E12, 0.3333333333333333], [1.60424604E12, 0.45], [1.60424532E12, 0.38333333333333336], [1.60424634E12, 0.3333333333333333], [1.60424502E12, 0.03333333333333333], [1.60424664E12, 0.3333333333333333], [1.60424694E12, 0.38333333333333336], [1.60424574E12, 0.36666666666666664], [1.60424592E12, 0.4], [1.60424622E12, 0.38333333333333336], [1.60424652E12, 0.35], [1.60424682E12, 0.43333333333333335], [1.6042455E12, 0.3333333333333333], [1.6042452E12, 0.26666666666666666], [1.6042458E12, 0.43333333333333335], [1.6042461E12, 0.4166666666666667], [1.6042464E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.604247E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60424502E12, "maxY": 0.5, "series": [{"data": [[1.6042467E12, 0.38333333333333336], [1.604247E12, 0.21666666666666667], [1.60424568E12, 0.3333333333333333], [1.60424598E12, 0.43333333333333335], [1.60424538E12, 0.35], [1.60424628E12, 0.2833333333333333], [1.60424508E12, 0.4], [1.60424658E12, 0.3333333333333333], [1.60424688E12, 0.4166666666666667], [1.60424544E12, 0.3333333333333333], [1.60424514E12, 0.48333333333333334], [1.60424586E12, 0.5], [1.60424616E12, 0.4], [1.60424646E12, 0.35], [1.60424676E12, 0.38333333333333336], [1.60424556E12, 0.3333333333333333], [1.60424526E12, 0.35], [1.60424562E12, 0.3333333333333333], [1.60424604E12, 0.45], [1.60424532E12, 0.38333333333333336], [1.60424634E12, 0.3333333333333333], [1.60424502E12, 0.03333333333333333], [1.60424664E12, 0.3333333333333333], [1.60424694E12, 0.38333333333333336], [1.60424574E12, 0.36666666666666664], [1.60424592E12, 0.4], [1.60424622E12, 0.38333333333333336], [1.60424652E12, 0.35], [1.60424682E12, 0.43333333333333335], [1.6042455E12, 0.3333333333333333], [1.6042452E12, 0.26666666666666666], [1.6042458E12, 0.43333333333333335], [1.6042461E12, 0.4166666666666667], [1.6042464E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.604247E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

