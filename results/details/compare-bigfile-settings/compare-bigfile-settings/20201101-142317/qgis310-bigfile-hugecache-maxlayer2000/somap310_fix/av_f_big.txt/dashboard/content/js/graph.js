/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3270.0, "minX": 0.0, "maxY": 45563.0, "series": [{"data": [[0.0, 3270.0], [0.1, 3270.0], [0.2, 6249.0], [0.3, 8540.0], [0.4, 8540.0], [0.5, 11370.0], [0.6, 13967.0], [0.7, 16578.0], [0.8, 16578.0], [0.9, 16917.0], [1.0, 16925.0], [1.1, 16945.0], [1.2, 16945.0], [1.3, 16959.0], [1.4, 17088.0], [1.5, 17094.0], [1.6, 17094.0], [1.7, 17105.0], [1.8, 17139.0], [1.9, 17139.0], [2.0, 17141.0], [2.1, 17150.0], [2.2, 17162.0], [2.3, 17162.0], [2.4, 17185.0], [2.5, 17256.0], [2.6, 17266.0], [2.7, 17266.0], [2.8, 17292.0], [2.9, 17324.0], [3.0, 17326.0], [3.1, 17326.0], [3.2, 17329.0], [3.3, 17348.0], [3.4, 17348.0], [3.5, 17356.0], [3.6, 17358.0], [3.7, 17377.0], [3.8, 17377.0], [3.9, 17396.0], [4.0, 17413.0], [4.1, 17427.0], [4.2, 17427.0], [4.3, 17443.0], [4.4, 17499.0], [4.5, 17549.0], [4.6, 17549.0], [4.7, 17590.0], [4.8, 17730.0], [4.9, 17766.0], [5.0, 17766.0], [5.1, 17806.0], [5.2, 17822.0], [5.3, 17822.0], [5.4, 17832.0], [5.5, 17891.0], [5.6, 17915.0], [5.7, 17915.0], [5.8, 17934.0], [5.9, 17959.0], [6.0, 17980.0], [6.1, 17980.0], [6.2, 17995.0], [6.3, 18014.0], [6.4, 18046.0], [6.5, 18046.0], [6.6, 18084.0], [6.7, 18123.0], [6.8, 18123.0], [6.9, 18224.0], [7.0, 18273.0], [7.1, 18279.0], [7.2, 18279.0], [7.3, 18330.0], [7.4, 18385.0], [7.5, 18392.0], [7.6, 18392.0], [7.7, 18429.0], [7.8, 18430.0], [7.9, 18446.0], [8.0, 18446.0], [8.1, 18463.0], [8.2, 18525.0], [8.3, 18591.0], [8.4, 18591.0], [8.5, 18605.0], [8.6, 18652.0], [8.7, 18652.0], [8.8, 18655.0], [8.9, 18685.0], [9.0, 18696.0], [9.1, 18696.0], [9.2, 18700.0], [9.3, 18709.0], [9.4, 18782.0], [9.5, 18782.0], [9.6, 18845.0], [9.7, 18897.0], [9.8, 18900.0], [9.9, 18900.0], [10.0, 18949.0], [10.1, 19024.0], [10.2, 19024.0], [10.3, 19066.0], [10.4, 19109.0], [10.5, 19120.0], [10.6, 19120.0], [10.7, 19207.0], [10.8, 19208.0], [10.9, 19213.0], [11.0, 19213.0], [11.1, 19293.0], [11.2, 19303.0], [11.3, 19463.0], [11.4, 19463.0], [11.5, 19510.0], [11.6, 19516.0], [11.7, 19516.0], [11.8, 19556.0], [11.9, 19623.0], [12.0, 19638.0], [12.1, 19638.0], [12.2, 19655.0], [12.3, 19690.0], [12.4, 19758.0], [12.5, 19758.0], [12.6, 19767.0], [12.7, 19778.0], [12.8, 19800.0], [12.9, 19800.0], [13.0, 19820.0], [13.1, 19837.0], [13.2, 19838.0], [13.3, 19838.0], [13.4, 19840.0], [13.5, 19876.0], [13.6, 19876.0], [13.7, 19880.0], [13.8, 19886.0], [13.9, 19909.0], [14.0, 19909.0], [14.1, 19986.0], [14.2, 20000.0], [14.3, 20079.0], [14.4, 20079.0], [14.5, 20152.0], [14.6, 20384.0], [14.7, 20451.0], [14.8, 20451.0], [14.9, 20471.0], [15.0, 20477.0], [15.1, 20477.0], [15.2, 20504.0], [15.3, 20526.0], [15.4, 20533.0], [15.5, 20533.0], [15.6, 20533.0], [15.7, 20548.0], [15.8, 20580.0], [15.9, 20580.0], [16.0, 20621.0], [16.1, 20730.0], [16.2, 20834.0], [16.3, 20834.0], [16.4, 20836.0], [16.5, 20850.0], [16.6, 20891.0], [16.7, 20891.0], [16.8, 21085.0], [16.9, 21090.0], [17.0, 21090.0], [17.1, 21130.0], [17.2, 21233.0], [17.3, 21367.0], [17.4, 21367.0], [17.5, 21383.0], [17.6, 21477.0], [17.7, 21604.0], [17.8, 21604.0], [17.9, 21629.0], [18.0, 21689.0], [18.1, 21707.0], [18.2, 21707.0], [18.3, 21837.0], [18.4, 21910.0], [18.5, 21910.0], [18.6, 21952.0], [18.7, 21986.0], [18.8, 22042.0], [18.9, 22042.0], [19.0, 22071.0], [19.1, 22079.0], [19.2, 22190.0], [19.3, 22190.0], [19.4, 22202.0], [19.5, 22271.0], [19.6, 22274.0], [19.7, 22274.0], [19.8, 22296.0], [19.9, 22321.0], [20.0, 22345.0], [20.1, 22345.0], [20.2, 22360.0], [20.3, 22529.0], [20.4, 22529.0], [20.5, 22532.0], [20.6, 22547.0], [20.7, 22588.0], [20.8, 22588.0], [20.9, 22635.0], [21.0, 22641.0], [21.1, 22657.0], [21.2, 22657.0], [21.3, 22663.0], [21.4, 22677.0], [21.5, 22700.0], [21.6, 22700.0], [21.7, 22720.0], [21.8, 22728.0], [21.9, 22728.0], [22.0, 22762.0], [22.1, 22788.0], [22.2, 22790.0], [22.3, 22790.0], [22.4, 22886.0], [22.5, 22892.0], [22.6, 22902.0], [22.7, 22902.0], [22.8, 22908.0], [22.9, 22919.0], [23.0, 22921.0], [23.1, 22921.0], [23.2, 22934.0], [23.3, 23016.0], [23.4, 23016.0], [23.5, 23024.0], [23.6, 23060.0], [23.7, 23081.0], [23.8, 23081.0], [23.9, 23092.0], [24.0, 23150.0], [24.1, 23152.0], [24.2, 23152.0], [24.3, 23195.0], [24.4, 23212.0], [24.5, 23323.0], [24.6, 23323.0], [24.7, 23332.0], [24.8, 23393.0], [24.9, 23410.0], [25.0, 23410.0], [25.1, 23448.0], [25.2, 23454.0], [25.3, 23454.0], [25.4, 23478.0], [25.5, 23485.0], [25.6, 23520.0], [25.7, 23520.0], [25.8, 23577.0], [25.9, 23602.0], [26.0, 23642.0], [26.1, 23642.0], [26.2, 23645.0], [26.3, 23695.0], [26.4, 23704.0], [26.5, 23704.0], [26.6, 23707.0], [26.7, 23727.0], [26.8, 23727.0], [26.9, 23728.0], [27.0, 23747.0], [27.1, 23755.0], [27.2, 23755.0], [27.3, 23759.0], [27.4, 23761.0], [27.5, 23787.0], [27.6, 23787.0], [27.7, 23787.0], [27.8, 23827.0], [27.9, 23834.0], [28.0, 23834.0], [28.1, 23836.0], [28.2, 23839.0], [28.3, 23856.0], [28.4, 23856.0], [28.5, 23885.0], [28.6, 23940.0], [28.7, 23940.0], [28.8, 23941.0], [28.9, 23957.0], [29.0, 23961.0], [29.1, 23961.0], [29.2, 23992.0], [29.3, 24007.0], [29.4, 24031.0], [29.5, 24031.0], [29.6, 24041.0], [29.7, 24042.0], [29.8, 24045.0], [29.9, 24045.0], [30.0, 24083.0], [30.1, 24122.0], [30.2, 24122.0], [30.3, 24148.0], [30.4, 24172.0], [30.5, 24180.0], [30.6, 24180.0], [30.7, 24184.0], [30.8, 24217.0], [30.9, 24244.0], [31.0, 24244.0], [31.1, 24261.0], [31.2, 24281.0], [31.3, 24282.0], [31.4, 24282.0], [31.5, 24286.0], [31.6, 24294.0], [31.7, 24294.0], [31.8, 24297.0], [31.9, 24315.0], [32.0, 24331.0], [32.1, 24331.0], [32.2, 24358.0], [32.3, 24362.0], [32.4, 24431.0], [32.5, 24431.0], [32.6, 24457.0], [32.7, 24490.0], [32.8, 24498.0], [32.9, 24498.0], [33.0, 24502.0], [33.1, 24502.0], [33.2, 24513.0], [33.3, 24513.0], [33.4, 24521.0], [33.5, 24533.0], [33.6, 24533.0], [33.7, 24549.0], [33.8, 24607.0], [33.9, 24622.0], [34.0, 24622.0], [34.1, 24648.0], [34.2, 24681.0], [34.3, 24692.0], [34.4, 24692.0], [34.5, 24693.0], [34.6, 24702.0], [34.7, 24720.0], [34.8, 24720.0], [34.9, 24740.0], [35.0, 24752.0], [35.1, 24752.0], [35.2, 24773.0], [35.3, 24787.0], [35.4, 24812.0], [35.5, 24812.0], [35.6, 24824.0], [35.7, 24839.0], [35.8, 24857.0], [35.9, 24857.0], [36.0, 24865.0], [36.1, 24923.0], [36.2, 24958.0], [36.3, 24958.0], [36.4, 24961.0], [36.5, 24968.0], [36.6, 24975.0], [36.7, 24975.0], [36.8, 24985.0], [36.9, 24996.0], [37.0, 24996.0], [37.1, 25017.0], [37.2, 25026.0], [37.3, 25065.0], [37.4, 25065.0], [37.5, 25080.0], [37.6, 25082.0], [37.7, 25089.0], [37.8, 25089.0], [37.9, 25091.0], [38.0, 25097.0], [38.1, 25108.0], [38.2, 25108.0], [38.3, 25139.0], [38.4, 25156.0], [38.5, 25156.0], [38.6, 25159.0], [38.7, 25185.0], [38.8, 25207.0], [38.9, 25207.0], [39.0, 25213.0], [39.1, 25267.0], [39.2, 25330.0], [39.3, 25330.0], [39.4, 25365.0], [39.5, 25415.0], [39.6, 25499.0], [39.7, 25499.0], [39.8, 25558.0], [39.9, 25565.0], [40.0, 25613.0], [40.1, 25613.0], [40.2, 25640.0], [40.3, 25677.0], [40.4, 25677.0], [40.5, 25696.0], [40.6, 25700.0], [40.7, 25716.0], [40.8, 25716.0], [40.9, 25724.0], [41.0, 25748.0], [41.1, 25760.0], [41.2, 25760.0], [41.3, 25775.0], [41.4, 25796.0], [41.5, 25797.0], [41.6, 25797.0], [41.7, 25811.0], [41.8, 25816.0], [41.9, 25816.0], [42.0, 25857.0], [42.1, 25917.0], [42.2, 25936.0], [42.3, 25936.0], [42.4, 25955.0], [42.5, 26004.0], [42.6, 26042.0], [42.7, 26042.0], [42.8, 26069.0], [42.9, 26115.0], [43.0, 26139.0], [43.1, 26139.0], [43.2, 26152.0], [43.3, 26178.0], [43.4, 26178.0], [43.5, 26212.0], [43.6, 26239.0], [43.7, 26240.0], [43.8, 26240.0], [43.9, 26267.0], [44.0, 26276.0], [44.1, 26287.0], [44.2, 26287.0], [44.3, 26288.0], [44.4, 26301.0], [44.5, 26311.0], [44.6, 26311.0], [44.7, 26313.0], [44.8, 26318.0], [44.9, 26390.0], [45.0, 26390.0], [45.1, 26394.0], [45.2, 26419.0], [45.3, 26419.0], [45.4, 26440.0], [45.5, 26467.0], [45.6, 26503.0], [45.7, 26503.0], [45.8, 26513.0], [45.9, 26517.0], [46.0, 26521.0], [46.1, 26521.0], [46.2, 26555.0], [46.3, 26567.0], [46.4, 26596.0], [46.5, 26596.0], [46.6, 26696.0], [46.7, 26702.0], [46.8, 26702.0], [46.9, 26717.0], [47.0, 26814.0], [47.1, 26818.0], [47.2, 26818.0], [47.3, 26839.0], [47.4, 26843.0], [47.5, 26857.0], [47.6, 26857.0], [47.7, 26868.0], [47.8, 26903.0], [47.9, 26932.0], [48.0, 26932.0], [48.1, 27011.0], [48.2, 27043.0], [48.3, 27045.0], [48.4, 27045.0], [48.5, 27091.0], [48.6, 27119.0], [48.7, 27119.0], [48.8, 27134.0], [48.9, 27166.0], [49.0, 27168.0], [49.1, 27168.0], [49.2, 27197.0], [49.3, 27233.0], [49.4, 27236.0], [49.5, 27236.0], [49.6, 27238.0], [49.7, 27261.0], [49.8, 27313.0], [49.9, 27313.0], [50.0, 27326.0], [50.1, 27356.0], [50.2, 27356.0], [50.3, 27369.0], [50.4, 27387.0], [50.5, 27395.0], [50.6, 27395.0], [50.7, 27420.0], [50.8, 27479.0], [50.9, 27489.0], [51.0, 27489.0], [51.1, 27492.0], [51.2, 27537.0], [51.3, 27622.0], [51.4, 27622.0], [51.5, 27632.0], [51.6, 27660.0], [51.7, 27660.0], [51.8, 27684.0], [51.9, 27694.0], [52.0, 27702.0], [52.1, 27702.0], [52.2, 27776.0], [52.3, 27783.0], [52.4, 27793.0], [52.5, 27793.0], [52.6, 27818.0], [52.7, 27829.0], [52.8, 27873.0], [52.9, 27873.0], [53.0, 27877.0], [53.1, 27929.0], [53.2, 27930.0], [53.3, 27930.0], [53.4, 27939.0], [53.5, 27949.0], [53.6, 27949.0], [53.7, 27951.0], [53.8, 27958.0], [53.9, 27967.0], [54.0, 27967.0], [54.1, 27995.0], [54.2, 27996.0], [54.3, 28007.0], [54.4, 28007.0], [54.5, 28010.0], [54.6, 28056.0], [54.7, 28100.0], [54.8, 28100.0], [54.9, 28113.0], [55.0, 28131.0], [55.1, 28131.0], [55.2, 28142.0], [55.3, 28211.0], [55.4, 28238.0], [55.5, 28238.0], [55.6, 28242.0], [55.7, 28277.0], [55.8, 28294.0], [55.9, 28294.0], [56.0, 28388.0], [56.1, 28401.0], [56.2, 28417.0], [56.3, 28417.0], [56.4, 28423.0], [56.5, 28439.0], [56.6, 28440.0], [56.7, 28440.0], [56.8, 28457.0], [56.9, 28471.0], [57.0, 28471.0], [57.1, 28482.0], [57.2, 28489.0], [57.3, 28523.0], [57.4, 28523.0], [57.5, 28558.0], [57.6, 28633.0], [57.7, 28656.0], [57.8, 28656.0], [57.9, 28672.0], [58.0, 28683.0], [58.1, 28695.0], [58.2, 28695.0], [58.3, 28706.0], [58.4, 28710.0], [58.5, 28710.0], [58.6, 28742.0], [58.7, 28746.0], [58.8, 28750.0], [58.9, 28750.0], [59.0, 28751.0], [59.1, 28756.0], [59.2, 28803.0], [59.3, 28803.0], [59.4, 28832.0], [59.5, 28853.0], [59.6, 28871.0], [59.7, 28871.0], [59.8, 28920.0], [59.9, 28928.0], [60.0, 28951.0], [60.1, 28951.0], [60.2, 28977.0], [60.3, 28996.0], [60.4, 28996.0], [60.5, 28999.0], [60.6, 29008.0], [60.7, 29014.0], [60.8, 29014.0], [60.9, 29015.0], [61.0, 29021.0], [61.1, 29027.0], [61.2, 29027.0], [61.3, 29037.0], [61.4, 29049.0], [61.5, 29069.0], [61.6, 29069.0], [61.7, 29074.0], [61.8, 29097.0], [61.9, 29097.0], [62.0, 29100.0], [62.1, 29103.0], [62.2, 29107.0], [62.3, 29107.0], [62.4, 29115.0], [62.5, 29115.0], [62.6, 29118.0], [62.7, 29118.0], [62.8, 29131.0], [62.9, 29150.0], [63.0, 29152.0], [63.1, 29152.0], [63.2, 29156.0], [63.3, 29164.0], [63.4, 29164.0], [63.5, 29165.0], [63.6, 29195.0], [63.7, 29201.0], [63.8, 29201.0], [63.9, 29203.0], [64.0, 29206.0], [64.1, 29218.0], [64.2, 29218.0], [64.3, 29222.0], [64.4, 29227.0], [64.5, 29228.0], [64.6, 29228.0], [64.7, 29239.0], [64.8, 29246.0], [64.9, 29249.0], [65.0, 29249.0], [65.1, 29251.0], [65.2, 29253.0], [65.3, 29253.0], [65.4, 29254.0], [65.5, 29258.0], [65.6, 29263.0], [65.7, 29263.0], [65.8, 29265.0], [65.9, 29266.0], [66.0, 29274.0], [66.1, 29274.0], [66.2, 29275.0], [66.3, 29275.0], [66.4, 29279.0], [66.5, 29279.0], [66.6, 29281.0], [66.7, 29283.0], [66.8, 29283.0], [66.9, 29289.0], [67.0, 29293.0], [67.1, 29294.0], [67.2, 29294.0], [67.3, 29303.0], [67.4, 29318.0], [67.5, 29322.0], [67.6, 29322.0], [67.7, 29325.0], [67.8, 29326.0], [67.9, 29329.0], [68.0, 29329.0], [68.1, 29329.0], [68.2, 29330.0], [68.3, 29330.0], [68.4, 29330.0], [68.5, 29331.0], [68.6, 29331.0], [68.7, 29331.0], [68.8, 29334.0], [68.9, 29336.0], [69.0, 29340.0], [69.1, 29340.0], [69.2, 29341.0], [69.3, 29345.0], [69.4, 29367.0], [69.5, 29367.0], [69.6, 29372.0], [69.7, 29379.0], [69.8, 29381.0], [69.9, 29381.0], [70.0, 29386.0], [70.1, 29388.0], [70.2, 29388.0], [70.3, 29389.0], [70.4, 29389.0], [70.5, 29389.0], [70.6, 29389.0], [70.7, 29391.0], [70.8, 29395.0], [70.9, 29397.0], [71.0, 29397.0], [71.1, 29406.0], [71.2, 29411.0], [71.3, 29423.0], [71.4, 29423.0], [71.5, 29423.0], [71.6, 29428.0], [71.7, 29428.0], [71.8, 29429.0], [71.9, 29429.0], [72.0, 29436.0], [72.1, 29436.0], [72.2, 29440.0], [72.3, 29442.0], [72.4, 29450.0], [72.5, 29450.0], [72.6, 29454.0], [72.7, 29458.0], [72.8, 29471.0], [72.9, 29471.0], [73.0, 29471.0], [73.1, 29477.0], [73.2, 29479.0], [73.3, 29479.0], [73.4, 29481.0], [73.5, 29485.0], [73.6, 29485.0], [73.7, 29491.0], [73.8, 29492.0], [73.9, 29492.0], [74.0, 29492.0], [74.1, 29495.0], [74.2, 29496.0], [74.3, 29505.0], [74.4, 29505.0], [74.5, 29506.0], [74.6, 29507.0], [74.7, 29517.0], [74.8, 29517.0], [74.9, 29518.0], [75.0, 29520.0], [75.1, 29520.0], [75.2, 29522.0], [75.3, 29522.0], [75.4, 29529.0], [75.5, 29529.0], [75.6, 29535.0], [75.7, 29536.0], [75.8, 29537.0], [75.9, 29537.0], [76.0, 29537.0], [76.1, 29549.0], [76.2, 29553.0], [76.3, 29553.0], [76.4, 29557.0], [76.5, 29561.0], [76.6, 29562.0], [76.7, 29562.0], [76.8, 29564.0], [76.9, 29566.0], [77.0, 29566.0], [77.1, 29573.0], [77.2, 29579.0], [77.3, 29580.0], [77.4, 29580.0], [77.5, 29583.0], [77.6, 29590.0], [77.7, 29590.0], [77.8, 29590.0], [77.9, 29594.0], [78.0, 29597.0], [78.1, 29601.0], [78.2, 29601.0], [78.3, 29603.0], [78.4, 29605.0], [78.5, 29605.0], [78.6, 29612.0], [78.7, 29623.0], [78.8, 29626.0], [78.9, 29626.0], [79.0, 29627.0], [79.1, 29641.0], [79.2, 29642.0], [79.3, 29642.0], [79.4, 29648.0], [79.5, 29651.0], [79.6, 29660.0], [79.7, 29660.0], [79.8, 29664.0], [79.9, 29666.0], [80.0, 29666.0], [80.1, 29666.0], [80.2, 29666.0], [80.3, 29667.0], [80.4, 29667.0], [80.5, 29671.0], [80.6, 29674.0], [80.7, 29677.0], [80.8, 29677.0], [80.9, 29687.0], [81.0, 29689.0], [81.1, 29692.0], [81.2, 29692.0], [81.3, 29693.0], [81.4, 29694.0], [81.5, 29694.0], [81.6, 29694.0], [81.7, 29699.0], [81.8, 29708.0], [81.9, 29708.0], [82.0, 29712.0], [82.1, 29712.0], [82.2, 29721.0], [82.3, 29721.0], [82.4, 29726.0], [82.5, 29732.0], [82.6, 29742.0], [82.7, 29742.0], [82.8, 29753.0], [82.9, 29754.0], [83.0, 29755.0], [83.1, 29755.0], [83.2, 29757.0], [83.3, 29762.0], [83.4, 29762.0], [83.5, 29762.0], [83.6, 29767.0], [83.7, 29771.0], [83.8, 29771.0], [83.9, 29775.0], [84.0, 29783.0], [84.1, 29787.0], [84.2, 29787.0], [84.3, 29789.0], [84.4, 29795.0], [84.5, 29795.0], [84.6, 29795.0], [84.7, 29796.0], [84.8, 29797.0], [84.9, 29800.0], [85.0, 29800.0], [85.1, 29804.0], [85.2, 29817.0], [85.3, 29817.0], [85.4, 29818.0], [85.5, 29827.0], [85.6, 29832.0], [85.7, 29832.0], [85.8, 29842.0], [85.9, 29843.0], [86.0, 29847.0], [86.1, 29847.0], [86.2, 29848.0], [86.3, 29851.0], [86.4, 29852.0], [86.5, 29852.0], [86.6, 29855.0], [86.7, 29858.0], [86.8, 29858.0], [86.9, 29858.0], [87.0, 29859.0], [87.1, 29865.0], [87.2, 29865.0], [87.3, 29871.0], [87.4, 29884.0], [87.5, 29885.0], [87.6, 29885.0], [87.7, 29886.0], [87.8, 29894.0], [87.9, 29894.0], [88.0, 29894.0], [88.1, 29900.0], [88.2, 29900.0], [88.3, 29900.0], [88.4, 29900.0], [88.5, 29902.0], [88.6, 29908.0], [88.7, 29908.0], [88.8, 29912.0], [88.9, 29920.0], [89.0, 29929.0], [89.1, 29929.0], [89.2, 29933.0], [89.3, 29933.0], [89.4, 29934.0], [89.5, 29934.0], [89.6, 29935.0], [89.7, 29937.0], [89.8, 29940.0], [89.9, 29940.0], [90.0, 29942.0], [90.1, 29947.0], [90.2, 29947.0], [90.3, 29960.0], [90.4, 29964.0], [90.5, 29972.0], [90.6, 29972.0], [90.7, 29980.0], [90.8, 29982.0], [90.9, 29989.0], [91.0, 29989.0], [91.1, 30003.0], [91.2, 30009.0], [91.3, 30011.0], [91.4, 30011.0], [91.5, 30011.0], [91.6, 30015.0], [91.7, 30015.0], [91.8, 30031.0], [91.9, 30036.0], [92.0, 30074.0], [92.1, 30074.0], [92.2, 30076.0], [92.3, 30106.0], [92.4, 30128.0], [92.5, 30128.0], [92.6, 30460.0], [92.7, 30483.0], [92.8, 30631.0], [92.9, 30631.0], [93.0, 30649.0], [93.1, 30664.0], [93.2, 31051.0], [93.3, 31051.0], [93.4, 31135.0], [93.5, 31255.0], [93.6, 31255.0], [93.7, 31383.0], [93.8, 31404.0], [93.9, 31596.0], [94.0, 31596.0], [94.1, 31613.0], [94.2, 31690.0], [94.3, 31703.0], [94.4, 31703.0], [94.5, 31705.0], [94.6, 32383.0], [94.7, 32560.0], [94.8, 32560.0], [94.9, 32646.0], [95.0, 32694.0], [95.1, 32694.0], [95.2, 33131.0], [95.3, 33151.0], [95.4, 33217.0], [95.5, 33217.0], [95.6, 33527.0], [95.7, 33699.0], [95.8, 34051.0], [95.9, 34051.0], [96.0, 34368.0], [96.1, 34481.0], [96.2, 34692.0], [96.3, 34692.0], [96.4, 34967.0], [96.5, 35207.0], [96.6, 35320.0], [96.7, 35320.0], [96.8, 35461.0], [96.9, 36209.0], [97.0, 36209.0], [97.1, 36351.0], [97.2, 36387.0], [97.3, 36733.0], [97.4, 36733.0], [97.5, 37148.0], [97.6, 38498.0], [97.7, 38900.0], [97.8, 38900.0], [97.9, 39110.0], [98.0, 39204.0], [98.1, 39424.0], [98.2, 39424.0], [98.3, 41332.0], [98.4, 41425.0], [98.5, 41425.0], [98.6, 41533.0], [98.7, 42415.0], [98.8, 43207.0], [98.9, 43207.0], [99.0, 43359.0], [99.1, 43606.0], [99.2, 43615.0], [99.3, 43615.0], [99.4, 43813.0], [99.5, 44409.0], [99.6, 45123.0], [99.7, 45123.0], [99.8, 45366.0], [99.9, 45563.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 28.0, "series": [{"data": [[34300.0, 1.0], [33500.0, 1.0], [33100.0, 2.0], [36300.0, 2.0], [34900.0, 1.0], [36700.0, 1.0], [35300.0, 1.0], [38900.0, 1.0], [37100.0, 1.0], [39100.0, 1.0], [41300.0, 1.0], [41500.0, 1.0], [43300.0, 1.0], [45300.0, 1.0], [45100.0, 1.0], [45500.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8500.0, 1.0], [11300.0, 1.0], [13900.0, 1.0], [16500.0, 1.0], [17400.0, 4.0], [17300.0, 8.0], [17000.0, 2.0], [17200.0, 3.0], [17100.0, 6.0], [16900.0, 4.0], [18200.0, 3.0], [18400.0, 4.0], [17900.0, 5.0], [18000.0, 3.0], [18300.0, 3.0], [18100.0, 1.0], [17800.0, 4.0], [17700.0, 2.0], [17500.0, 2.0], [19200.0, 4.0], [18600.0, 5.0], [19000.0, 2.0], [18700.0, 3.0], [18500.0, 2.0], [18800.0, 2.0], [18900.0, 2.0], [19100.0, 2.0], [19400.0, 1.0], [19300.0, 1.0], [20400.0, 3.0], [20000.0, 2.0], [19800.0, 8.0], [20300.0, 1.0], [19500.0, 3.0], [19600.0, 4.0], [20100.0, 1.0], [19700.0, 3.0], [19900.0, 2.0], [21300.0, 2.0], [20800.0, 4.0], [20500.0, 6.0], [20700.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [21000.0, 2.0], [21100.0, 1.0], [20600.0, 1.0], [21600.0, 3.0], [21900.0, 3.0], [22300.0, 3.0], [22500.0, 4.0], [22200.0, 4.0], [22000.0, 3.0], [21700.0, 1.0], [21800.0, 1.0], [22100.0, 1.0], [22700.0, 6.0], [23100.0, 3.0], [22800.0, 2.0], [23000.0, 5.0], [22900.0, 5.0], [22600.0, 5.0], [23400.0, 5.0], [23300.0, 3.0], [23500.0, 2.0], [23200.0, 1.0], [23700.0, 10.0], [24100.0, 5.0], [23900.0, 5.0], [24500.0, 6.0], [23600.0, 4.0], [24400.0, 4.0], [24300.0, 4.0], [24200.0, 8.0], [23800.0, 6.0], [24000.0, 6.0], [25500.0, 2.0], [24600.0, 6.0], [25300.0, 2.0], [24900.0, 7.0], [24800.0, 5.0], [25400.0, 2.0], [25000.0, 8.0], [25100.0, 5.0], [24700.0, 6.0], [25200.0, 3.0], [26400.0, 3.0], [26300.0, 6.0], [25600.0, 4.0], [26500.0, 7.0], [26600.0, 1.0], [26200.0, 7.0], [25900.0, 3.0], [25800.0, 3.0], [25700.0, 8.0], [26100.0, 4.0], [26000.0, 3.0], [26800.0, 6.0], [27000.0, 4.0], [27200.0, 4.0], [27100.0, 5.0], [26900.0, 2.0], [27300.0, 6.0], [27400.0, 4.0], [26700.0, 2.0], [27500.0, 1.0], [27600.0, 5.0], [27900.0, 9.0], [28200.0, 5.0], [27700.0, 4.0], [28300.0, 1.0], [27800.0, 4.0], [28400.0, 9.0], [28600.0, 5.0], [28500.0, 2.0], [28100.0, 4.0], [28000.0, 3.0], [28700.0, 7.0], [29100.0, 13.0], [29300.0, 28.0], [29500.0, 28.0], [29600.0, 27.0], [29400.0, 24.0], [29200.0, 26.0], [28800.0, 4.0], [28900.0, 6.0], [29000.0, 10.0], [30600.0, 3.0], [30000.0, 9.0], [29700.0, 23.0], [29800.0, 23.0], [29900.0, 22.0], [30100.0, 2.0], [30400.0, 2.0], [31400.0, 1.0], [31000.0, 1.0], [31500.0, 1.0], [31700.0, 2.0], [31600.0, 2.0], [31100.0, 1.0], [31300.0, 1.0], [31200.0, 1.0], [32500.0, 1.0], [32300.0, 1.0], [32600.0, 2.0], [33200.0, 1.0], [34400.0, 1.0], [34000.0, 1.0], [34600.0, 1.0], [33600.0, 1.0], [36200.0, 1.0], [35400.0, 1.0], [35200.0, 1.0], [38400.0, 1.0], [39200.0, 1.0], [39400.0, 1.0], [41400.0, 1.0], [42400.0, 1.0], [43600.0, 2.0], [44400.0, 1.0], [43200.0, 1.0], [43800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.500000000000002, "minX": 1.6042515E12, "maxY": 10.0, "series": [{"data": [[1.60425336E12, 10.0], [1.60425306E12, 10.0], [1.60425276E12, 10.0], [1.60425246E12, 10.0], [1.60425264E12, 10.0], [1.60425234E12, 10.0], [1.60425174E12, 10.0], [1.60425204E12, 10.0], [1.60425162E12, 10.0], [1.60425192E12, 10.0], [1.60425324E12, 10.0], [1.60425294E12, 10.0], [1.60425312E12, 10.0], [1.60425282E12, 10.0], [1.60425252E12, 10.0], [1.60425222E12, 10.0], [1.6042524E12, 10.0], [1.6042521E12, 10.0], [1.6042515E12, 10.0], [1.6042518E12, 10.0], [1.60425342E12, 8.500000000000002], [1.60425168E12, 10.0], [1.6042533E12, 10.0], [1.604253E12, 10.0], [1.6042527E12, 10.0], [1.60425288E12, 10.0], [1.60425258E12, 10.0], [1.60425198E12, 10.0], [1.60425228E12, 10.0], [1.60425186E12, 10.0], [1.60425216E12, 10.0], [1.60425156E12, 10.0], [1.60425318E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425342E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17094.0, "minX": 1.0, "maxY": 26466.78787878788, "series": [{"data": [[8.0, 17329.0], [4.0, 17141.0], [2.0, 17185.0], [1.0, 17590.0], [9.0, 17377.0], [10.0, 26466.78787878788], [5.0, 17139.0], [6.0, 17094.0], [3.0, 17150.0], [7.0, 17162.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26353.81632653061]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 65.85, "minX": 1.6042515E12, "maxY": 225141.85, "series": [{"data": [[1.60425336E12, 117759.65], [1.60425306E12, 51139.36666666667], [1.60425276E12, 37084.5], [1.60425246E12, 225141.85], [1.60425264E12, 70981.06666666667], [1.60425234E12, 167209.1], [1.60425174E12, 76703.8], [1.60425204E12, 52623.433333333334], [1.60425162E12, 111019.66666666667], [1.60425192E12, 44421.35], [1.60425324E12, 30005.316666666666], [1.60425294E12, 55425.566666666666], [1.60425312E12, 42400.46666666667], [1.60425282E12, 49673.23333333333], [1.60425252E12, 61415.8], [1.60425222E12, 35250.416666666664], [1.6042524E12, 70686.78333333334], [1.6042521E12, 43493.21666666667], [1.6042515E12, 121364.3], [1.6042518E12, 48046.933333333334], [1.60425342E12, 55125.5], [1.60425168E12, 80835.93333333333], [1.6042533E12, 85814.2], [1.604253E12, 43487.78333333333], [1.6042527E12, 42934.6], [1.60425288E12, 48282.166666666664], [1.60425258E12, 85973.35], [1.60425198E12, 51142.833333333336], [1.60425228E12, 53128.566666666666], [1.60425186E12, 47761.05], [1.60425216E12, 42171.083333333336], [1.60425156E12, 140268.55], [1.60425318E12, 34696.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60425336E12, 145.81666666666666], [1.60425306E12, 153.46666666666667], [1.60425276E12, 138.75], [1.60425246E12, 173.63333333333333], [1.60425264E12, 175.33333333333334], [1.60425234E12, 179.8], [1.60425174E12, 168.03333333333333], [1.60425204E12, 146.38333333333333], [1.60425162E12, 194.83333333333334], [1.60425192E12, 146.13333333333333], [1.60425324E12, 182.46666666666667], [1.60425294E12, 154.08333333333334], [1.60425312E12, 145.98333333333332], [1.60425282E12, 146.16666666666666], [1.60425252E12, 225.36666666666667], [1.60425222E12, 167.96666666666667], [1.6042524E12, 183.23333333333332], [1.6042521E12, 146.06666666666666], [1.6042515E12, 65.85], [1.6042518E12, 169.26666666666668], [1.60425342E12, 207.08333333333334], [1.60425168E12, 104.58333333333333], [1.6042533E12, 195.41666666666666], [1.604253E12, 146.4], [1.6042527E12, 140.06666666666666], [1.60425288E12, 153.41666666666666], [1.60425258E12, 169.96666666666667], [1.60425198E12, 153.43333333333334], [1.60425228E12, 209.35], [1.60425186E12, 146.11666666666667], [1.60425216E12, 145.98333333333332], [1.60425156E12, 191.05], [1.60425318E12, 167.78333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425342E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13798.222222222223, "minX": 1.6042515E12, "maxY": 39318.78571428572, "series": [{"data": [[1.60425336E12, 26739.85], [1.60425306E12, 29268.523809523813], [1.60425276E12, 34295.210526315794], [1.60425246E12, 23745.666666666668], [1.60425264E12, 25445.374999999996], [1.60425234E12, 20952.92], [1.60425174E12, 28467.652173913044], [1.60425204E12, 29375.4], [1.60425162E12, 20834.85185185185], [1.60425192E12, 29622.0], [1.60425324E12, 24045.520000000004], [1.60425294E12, 29008.09523809524], [1.60425312E12, 29558.2], [1.60425282E12, 29655.050000000003], [1.60425252E12, 20421.968749999996], [1.60425222E12, 27357.478260869564], [1.6042524E12, 25344.96153846154], [1.6042521E12, 29287.25], [1.6042515E12, 13798.222222222223], [1.6042518E12, 26249.956521739132], [1.60425342E12, 22800.8], [1.60425168E12, 39318.78571428572], [1.6042533E12, 23185.51851851852], [1.604253E12, 28430.85], [1.6042527E12, 27233.78947368421], [1.60425288E12, 29412.38095238095], [1.60425258E12, 24496.91304347826], [1.60425198E12, 29636.428571428572], [1.60425228E12, 21890.793103448275], [1.60425186E12, 29038.550000000003], [1.60425216E12, 29935.95], [1.60425156E12, 24588.07692307692], [1.60425318E12, 26686.52173913044]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425342E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13792.555555555557, "minX": 1.6042515E12, "maxY": 39315.21428571428, "series": [{"data": [[1.60425336E12, 26736.3], [1.60425306E12, 29267.142857142855], [1.60425276E12, 34294.15789473685], [1.60425246E12, 23740.791666666668], [1.60425264E12, 25443.958333333332], [1.60425234E12, 20948.76], [1.60425174E12, 28465.782608695656], [1.60425204E12, 29374.0], [1.60425162E12, 20832.148148148142], [1.60425192E12, 29620.8], [1.60425324E12, 24045.039999999997], [1.60425294E12, 29006.714285714286], [1.60425312E12, 29557.1], [1.60425282E12, 29653.800000000003], [1.60425252E12, 20420.65625], [1.60425222E12, 27356.391304347828], [1.6042524E12, 25342.653846153848], [1.6042521E12, 29286.2], [1.6042515E12, 13792.555555555557], [1.6042518E12, 26248.652173913044], [1.60425342E12, 22798.7], [1.60425168E12, 39315.21428571428], [1.6042533E12, 23183.222222222226], [1.604253E12, 28429.799999999996], [1.6042527E12, 27232.73684210526], [1.60425288E12, 29411.19047619048], [1.60425258E12, 24494.82608695652], [1.60425198E12, 29635.000000000004], [1.60425228E12, 21889.27586206896], [1.60425186E12, 29037.1], [1.60425216E12, 29934.550000000003], [1.60425156E12, 24585.423076923078], [1.60425318E12, 26685.91304347826]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425342E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6042515E12, "maxY": 8.777777777777779, "series": [{"data": [[1.60425336E12, 0.35000000000000003], [1.60425306E12, 0.6190476190476191], [1.60425276E12, 0.6842105263157896], [1.60425246E12, 0.5833333333333335], [1.60425264E12, 0.33333333333333326], [1.60425234E12, 0.31999999999999995], [1.60425174E12, 0.608695652173913], [1.60425204E12, 0.1], [1.60425162E12, 0.40740740740740744], [1.60425192E12, 0.6000000000000002], [1.60425324E12, 0.2800000000000001], [1.60425294E12, 0.47619047619047616], [1.60425312E12, 0.5], [1.60425282E12, 0.15000000000000002], [1.60425252E12, 0.40625], [1.60425222E12, 0.34782608695652173], [1.6042524E12, 0.5384615384615387], [1.6042521E12, 0.55], [1.6042515E12, 8.777777777777779], [1.6042518E12, 0.7391304347826086], [1.60425342E12, 0.4], [1.60425168E12, 1.0714285714285714], [1.6042533E12, 0.5925925925925927], [1.604253E12, 0.25], [1.6042527E12, 0.631578947368421], [1.60425288E12, 0.7619047619047619], [1.60425258E12, 0.17391304347826086], [1.60425198E12, 0.5714285714285714], [1.60425228E12, 0.37931034482758624], [1.60425186E12, 0.0], [1.60425216E12, 0.6500000000000001], [1.60425156E12, 0.34615384615384615], [1.60425318E12, 0.47826086956521735]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425342E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3270.0, "minX": 1.6042515E12, "maxY": 45563.0, "series": [{"data": [[1.60425336E12, 31255.0], [1.60425306E12, 29583.0], [1.60425276E12, 43813.0], [1.60425246E12, 29150.0], [1.60425264E12, 29014.0], [1.60425234E12, 24490.0], [1.60425174E12, 36209.0], [1.60425204E12, 29972.0], [1.60425162E12, 24692.0], [1.60425192E12, 30031.0], [1.60425324E12, 28482.0], [1.60425294E12, 29660.0], [1.60425312E12, 30011.0], [1.60425282E12, 29947.0], [1.60425252E12, 28242.0], [1.60425222E12, 29942.0], [1.6042524E12, 31705.0], [1.6042521E12, 29666.0], [1.6042515E12, 24172.0], [1.6042518E12, 31051.0], [1.60425342E12, 38498.0], [1.60425168E12, 45563.0], [1.6042533E12, 27694.0], [1.604253E12, 29851.0], [1.6042527E12, 38900.0], [1.60425288E12, 29677.0], [1.60425258E12, 33217.0], [1.60425198E12, 30036.0], [1.60425228E12, 26702.0], [1.60425186E12, 29940.0], [1.60425216E12, 30128.0], [1.60425156E12, 28277.0], [1.60425318E12, 29495.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60425336E12, 20504.0], [1.60425306E12, 28977.0], [1.60425276E12, 26390.0], [1.60425246E12, 19638.0], [1.60425264E12, 23454.0], [1.60425234E12, 18273.0], [1.60425174E12, 24431.0], [1.60425204E12, 28742.0], [1.60425162E12, 17934.0], [1.60425192E12, 29251.0], [1.60425324E12, 21090.0], [1.60425294E12, 27783.0], [1.60425312E12, 28996.0], [1.60425282E12, 29218.0], [1.60425252E12, 17324.0], [1.60425222E12, 24865.0], [1.6042524E12, 18224.0], [1.6042521E12, 28457.0], [1.6042515E12, 3270.0], [1.6042518E12, 23152.0], [1.60425342E12, 16917.0], [1.60425168E12, 25558.0], [1.6042533E12, 19516.0], [1.604253E12, 27479.0], [1.6042527E12, 22635.0], [1.60425288E12, 29165.0], [1.60425258E12, 17088.0], [1.60425198E12, 29203.0], [1.60425228E12, 17499.0], [1.60425186E12, 25207.0], [1.60425216E12, 29757.0], [1.60425156E12, 20079.0], [1.60425318E12, 23827.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60425336E12, 20504.0], [1.60425306E12, 28977.0], [1.60425276E12, 26390.0], [1.60425246E12, 19638.0], [1.60425264E12, 23454.0], [1.60425234E12, 18273.0], [1.60425174E12, 24431.0], [1.60425204E12, 28742.0], [1.60425162E12, 17934.0], [1.60425192E12, 29251.0], [1.60425324E12, 21090.0], [1.60425294E12, 27783.0], [1.60425312E12, 28996.0], [1.60425282E12, 29218.0], [1.60425252E12, 17324.0], [1.60425222E12, 24865.0], [1.6042524E12, 18224.0], [1.6042521E12, 28457.0], [1.6042515E12, 3270.0], [1.6042518E12, 23152.0], [1.60425342E12, 16917.0], [1.60425168E12, 25558.0], [1.6042533E12, 19516.0], [1.604253E12, 27479.0], [1.6042527E12, 22635.0], [1.60425288E12, 29165.0], [1.60425258E12, 17088.0], [1.60425198E12, 29203.0], [1.60425228E12, 17499.0], [1.60425186E12, 25207.0], [1.60425216E12, 29757.0], [1.60425156E12, 20079.0], [1.60425318E12, 23827.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60425336E12, 20504.0], [1.60425306E12, 28977.0], [1.60425276E12, 26390.0], [1.60425246E12, 19638.0], [1.60425264E12, 23454.0], [1.60425234E12, 18273.0], [1.60425174E12, 24431.0], [1.60425204E12, 28742.0], [1.60425162E12, 17934.0], [1.60425192E12, 29251.0], [1.60425324E12, 21090.0], [1.60425294E12, 27783.0], [1.60425312E12, 28996.0], [1.60425282E12, 29218.0], [1.60425252E12, 17324.0], [1.60425222E12, 24865.0], [1.6042524E12, 18224.0], [1.6042521E12, 28457.0], [1.6042515E12, 3270.0], [1.6042518E12, 23152.0], [1.60425342E12, 16917.0], [1.60425168E12, 25558.0], [1.6042533E12, 19516.0], [1.604253E12, 27479.0], [1.6042527E12, 22635.0], [1.60425288E12, 29165.0], [1.60425258E12, 17088.0], [1.60425198E12, 29203.0], [1.60425228E12, 17499.0], [1.60425186E12, 25207.0], [1.60425216E12, 29757.0], [1.60425156E12, 20079.0], [1.60425318E12, 23827.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60425336E12, 20504.0], [1.60425306E12, 28977.0], [1.60425276E12, 26390.0], [1.60425246E12, 19638.0], [1.60425264E12, 23454.0], [1.60425234E12, 18273.0], [1.60425174E12, 24431.0], [1.60425204E12, 28742.0], [1.60425162E12, 17934.0], [1.60425192E12, 29251.0], [1.60425324E12, 21090.0], [1.60425294E12, 27783.0], [1.60425312E12, 28996.0], [1.60425282E12, 29218.0], [1.60425252E12, 17324.0], [1.60425222E12, 24865.0], [1.6042524E12, 18224.0], [1.6042521E12, 28457.0], [1.6042515E12, 3270.0], [1.6042518E12, 23152.0], [1.60425342E12, 16917.0], [1.60425168E12, 25558.0], [1.6042533E12, 19516.0], [1.604253E12, 27479.0], [1.6042527E12, 22635.0], [1.60425288E12, 29165.0], [1.60425258E12, 17088.0], [1.60425198E12, 29203.0], [1.60425228E12, 17499.0], [1.60425186E12, 25207.0], [1.60425216E12, 29757.0], [1.60425156E12, 20079.0], [1.60425318E12, 23827.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60425336E12, 28136.5], [1.60425306E12, 29249.0], [1.60425276E12, 32646.0], [1.60425246E12, 24220.5], [1.60425264E12, 24567.5], [1.60425234E12, 20152.0], [1.60425174E12, 26521.0], [1.60425204E12, 29396.5], [1.60425162E12, 19837.0], [1.60425192E12, 29678.0], [1.60425324E12, 23695.0], [1.60425294E12, 29275.0], [1.60425312E12, 29585.0], [1.60425282E12, 29699.5], [1.60425252E12, 19589.5], [1.60425222E12, 27045.0], [1.6042524E12, 25786.0], [1.6042521E12, 29450.0], [1.6042515E12, 13967.0], [1.6042518E12, 25955.0], [1.60425342E12, 17740.5], [1.60425168E12, 42345.5], [1.6042533E12, 22934.0], [1.604253E12, 28169.0], [1.6042527E12, 24857.0], [1.60425288E12, 29345.0], [1.60425258E12, 23992.0], [1.60425198E12, 29648.0], [1.60425228E12, 23016.0], [1.60425186E12, 29528.5], [1.60425216E12, 29950.5], [1.60425156E12, 26064.5], [1.60425318E12, 26287.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425342E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27326.0, "minX": 1.0, "maxY": 27326.0, "series": [{"data": [[1.0, 27326.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27326.0, "minX": 1.0, "maxY": 27326.0, "series": [{"data": [[1.0, 27326.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.6042515E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60425336E12, 0.3333333333333333], [1.60425306E12, 0.35], [1.60425276E12, 0.31666666666666665], [1.60425246E12, 0.4], [1.60425264E12, 0.4], [1.60425234E12, 0.4166666666666667], [1.60425174E12, 0.38333333333333336], [1.60425204E12, 0.3333333333333333], [1.60425162E12, 0.45], [1.60425192E12, 0.3333333333333333], [1.60425324E12, 0.4166666666666667], [1.60425294E12, 0.35], [1.60425312E12, 0.3333333333333333], [1.60425282E12, 0.3333333333333333], [1.60425252E12, 0.5333333333333333], [1.60425222E12, 0.38333333333333336], [1.6042524E12, 0.43333333333333335], [1.6042521E12, 0.3333333333333333], [1.6042515E12, 0.31666666666666665], [1.6042518E12, 0.38333333333333336], [1.60425342E12, 0.3333333333333333], [1.60425168E12, 0.23333333333333334], [1.6042533E12, 0.45], [1.604253E12, 0.3333333333333333], [1.6042527E12, 0.31666666666666665], [1.60425288E12, 0.35], [1.60425258E12, 0.38333333333333336], [1.60425198E12, 0.35], [1.60425228E12, 0.48333333333333334], [1.60425186E12, 0.3333333333333333], [1.60425216E12, 0.3333333333333333], [1.60425156E12, 0.43333333333333335], [1.60425318E12, 0.38333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425342E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6042515E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60425336E12, 0.3333333333333333], [1.60425306E12, 0.35], [1.60425276E12, 0.31666666666666665], [1.60425246E12, 0.4], [1.60425264E12, 0.4], [1.60425234E12, 0.4166666666666667], [1.60425174E12, 0.38333333333333336], [1.60425204E12, 0.3333333333333333], [1.60425162E12, 0.45], [1.60425192E12, 0.3333333333333333], [1.60425324E12, 0.4166666666666667], [1.60425294E12, 0.35], [1.60425312E12, 0.3333333333333333], [1.60425282E12, 0.3333333333333333], [1.60425252E12, 0.5333333333333333], [1.60425222E12, 0.38333333333333336], [1.6042524E12, 0.43333333333333335], [1.6042521E12, 0.3333333333333333], [1.6042515E12, 0.15], [1.6042518E12, 0.38333333333333336], [1.60425342E12, 0.5], [1.60425168E12, 0.23333333333333334], [1.6042533E12, 0.45], [1.604253E12, 0.3333333333333333], [1.6042527E12, 0.31666666666666665], [1.60425288E12, 0.35], [1.60425258E12, 0.38333333333333336], [1.60425198E12, 0.35], [1.60425228E12, 0.48333333333333334], [1.60425186E12, 0.3333333333333333], [1.60425216E12, 0.3333333333333333], [1.60425156E12, 0.43333333333333335], [1.60425318E12, 0.38333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60425342E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6042515E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60425336E12, 0.3333333333333333], [1.60425306E12, 0.35], [1.60425276E12, 0.31666666666666665], [1.60425246E12, 0.4], [1.60425264E12, 0.4], [1.60425234E12, 0.4166666666666667], [1.60425174E12, 0.38333333333333336], [1.60425204E12, 0.3333333333333333], [1.60425162E12, 0.45], [1.60425192E12, 0.3333333333333333], [1.60425324E12, 0.4166666666666667], [1.60425294E12, 0.35], [1.60425312E12, 0.3333333333333333], [1.60425282E12, 0.3333333333333333], [1.60425252E12, 0.5333333333333333], [1.60425222E12, 0.38333333333333336], [1.6042524E12, 0.43333333333333335], [1.6042521E12, 0.3333333333333333], [1.6042515E12, 0.15], [1.6042518E12, 0.38333333333333336], [1.60425342E12, 0.5], [1.60425168E12, 0.23333333333333334], [1.6042533E12, 0.45], [1.604253E12, 0.3333333333333333], [1.6042527E12, 0.31666666666666665], [1.60425288E12, 0.35], [1.60425258E12, 0.38333333333333336], [1.60425198E12, 0.35], [1.60425228E12, 0.48333333333333334], [1.60425186E12, 0.3333333333333333], [1.60425216E12, 0.3333333333333333], [1.60425156E12, 0.43333333333333335], [1.60425318E12, 0.38333333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425342E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6042515E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60425336E12, 0.3333333333333333], [1.60425306E12, 0.35], [1.60425276E12, 0.31666666666666665], [1.60425246E12, 0.4], [1.60425264E12, 0.4], [1.60425234E12, 0.4166666666666667], [1.60425174E12, 0.38333333333333336], [1.60425204E12, 0.3333333333333333], [1.60425162E12, 0.45], [1.60425192E12, 0.3333333333333333], [1.60425324E12, 0.4166666666666667], [1.60425294E12, 0.35], [1.60425312E12, 0.3333333333333333], [1.60425282E12, 0.3333333333333333], [1.60425252E12, 0.5333333333333333], [1.60425222E12, 0.38333333333333336], [1.6042524E12, 0.43333333333333335], [1.6042521E12, 0.3333333333333333], [1.6042515E12, 0.15], [1.6042518E12, 0.38333333333333336], [1.60425342E12, 0.5], [1.60425168E12, 0.23333333333333334], [1.6042533E12, 0.45], [1.604253E12, 0.3333333333333333], [1.6042527E12, 0.31666666666666665], [1.60425288E12, 0.35], [1.60425258E12, 0.38333333333333336], [1.60425198E12, 0.35], [1.60425228E12, 0.48333333333333334], [1.60425186E12, 0.3333333333333333], [1.60425216E12, 0.3333333333333333], [1.60425156E12, 0.43333333333333335], [1.60425318E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60425342E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

