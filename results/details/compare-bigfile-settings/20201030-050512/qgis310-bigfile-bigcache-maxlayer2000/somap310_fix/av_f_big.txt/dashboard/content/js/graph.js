/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3184.0, "minX": 0.0, "maxY": 45692.0, "series": [{"data": [[0.0, 3184.0], [0.1, 3184.0], [0.2, 6347.0], [0.3, 8678.0], [0.4, 8678.0], [0.5, 11461.0], [0.6, 13938.0], [0.7, 16404.0], [0.8, 16404.0], [0.9, 17107.0], [1.0, 17182.0], [1.1, 17216.0], [1.2, 17216.0], [1.3, 17243.0], [1.4, 17271.0], [1.5, 17381.0], [1.6, 17381.0], [1.7, 17400.0], [1.8, 17411.0], [1.9, 17411.0], [2.0, 17421.0], [2.1, 17437.0], [2.2, 17439.0], [2.3, 17439.0], [2.4, 17462.0], [2.5, 17481.0], [2.6, 17486.0], [2.7, 17486.0], [2.8, 17490.0], [2.9, 17500.0], [3.0, 17504.0], [3.1, 17504.0], [3.2, 17517.0], [3.3, 17525.0], [3.4, 17525.0], [3.5, 17539.0], [3.6, 17551.0], [3.7, 17557.0], [3.8, 17557.0], [3.9, 17565.0], [4.0, 17584.0], [4.1, 17588.0], [4.2, 17588.0], [4.3, 17593.0], [4.4, 17620.0], [4.5, 17627.0], [4.6, 17627.0], [4.7, 17668.0], [4.8, 17674.0], [4.9, 17687.0], [5.0, 17687.0], [5.1, 17702.0], [5.2, 17709.0], [5.3, 17709.0], [5.4, 17762.0], [5.5, 17796.0], [5.6, 17810.0], [5.7, 17810.0], [5.8, 17922.0], [5.9, 17955.0], [6.0, 17999.0], [6.1, 17999.0], [6.2, 18023.0], [6.3, 18112.0], [6.4, 18143.0], [6.5, 18143.0], [6.6, 18144.0], [6.7, 18169.0], [6.8, 18169.0], [6.9, 18204.0], [7.0, 18207.0], [7.1, 18221.0], [7.2, 18221.0], [7.3, 18287.0], [7.4, 18289.0], [7.5, 18311.0], [7.6, 18311.0], [7.7, 18471.0], [7.8, 18508.0], [7.9, 18517.0], [8.0, 18517.0], [8.1, 18528.0], [8.2, 18531.0], [8.3, 18538.0], [8.4, 18538.0], [8.5, 18540.0], [8.6, 18546.0], [8.7, 18546.0], [8.8, 18548.0], [8.9, 18555.0], [9.0, 18606.0], [9.1, 18606.0], [9.2, 18637.0], [9.3, 18805.0], [9.4, 18842.0], [9.5, 18842.0], [9.6, 18842.0], [9.7, 18872.0], [9.8, 18886.0], [9.9, 18886.0], [10.0, 18888.0], [10.1, 18894.0], [10.2, 18894.0], [10.3, 18924.0], [10.4, 19027.0], [10.5, 19049.0], [10.6, 19049.0], [10.7, 19143.0], [10.8, 19151.0], [10.9, 19154.0], [11.0, 19154.0], [11.1, 19215.0], [11.2, 19259.0], [11.3, 19284.0], [11.4, 19284.0], [11.5, 19407.0], [11.6, 19455.0], [11.7, 19455.0], [11.8, 19558.0], [11.9, 19610.0], [12.0, 19654.0], [12.1, 19654.0], [12.2, 19656.0], [12.3, 19748.0], [12.4, 19822.0], [12.5, 19822.0], [12.6, 19840.0], [12.7, 19967.0], [12.8, 19990.0], [12.9, 19990.0], [13.0, 20077.0], [13.1, 20087.0], [13.2, 20096.0], [13.3, 20096.0], [13.4, 20107.0], [13.5, 20110.0], [13.6, 20110.0], [13.7, 20132.0], [13.8, 20163.0], [13.9, 20178.0], [14.0, 20178.0], [14.1, 20193.0], [14.2, 20239.0], [14.3, 20244.0], [14.4, 20244.0], [14.5, 20256.0], [14.6, 20279.0], [14.7, 20379.0], [14.8, 20379.0], [14.9, 20406.0], [15.0, 20463.0], [15.1, 20463.0], [15.2, 20518.0], [15.3, 20566.0], [15.4, 20610.0], [15.5, 20610.0], [15.6, 20624.0], [15.7, 20634.0], [15.8, 20637.0], [15.9, 20637.0], [16.0, 20650.0], [16.1, 20673.0], [16.2, 20823.0], [16.3, 20823.0], [16.4, 20827.0], [16.5, 20836.0], [16.6, 20840.0], [16.7, 20840.0], [16.8, 20914.0], [16.9, 20983.0], [17.0, 20983.0], [17.1, 21002.0], [17.2, 21071.0], [17.3, 21184.0], [17.4, 21184.0], [17.5, 21520.0], [17.6, 21543.0], [17.7, 21570.0], [17.8, 21570.0], [17.9, 21593.0], [18.0, 21700.0], [18.1, 21714.0], [18.2, 21714.0], [18.3, 21747.0], [18.4, 21777.0], [18.5, 21777.0], [18.6, 21922.0], [18.7, 21937.0], [18.8, 21988.0], [18.9, 21988.0], [19.0, 21989.0], [19.1, 21993.0], [19.2, 22008.0], [19.3, 22008.0], [19.4, 22052.0], [19.5, 22057.0], [19.6, 22059.0], [19.7, 22059.0], [19.8, 22062.0], [19.9, 22227.0], [20.0, 22272.0], [20.1, 22272.0], [20.2, 22330.0], [20.3, 22339.0], [20.4, 22339.0], [20.5, 22349.0], [20.6, 22440.0], [20.7, 22460.0], [20.8, 22460.0], [20.9, 22519.0], [21.0, 22527.0], [21.1, 22533.0], [21.2, 22533.0], [21.3, 22546.0], [21.4, 22581.0], [21.5, 22582.0], [21.6, 22582.0], [21.7, 22614.0], [21.8, 22663.0], [21.9, 22663.0], [22.0, 22663.0], [22.1, 22719.0], [22.2, 22732.0], [22.3, 22732.0], [22.4, 22748.0], [22.5, 22772.0], [22.6, 22780.0], [22.7, 22780.0], [22.8, 22808.0], [22.9, 22840.0], [23.0, 22860.0], [23.1, 22860.0], [23.2, 22901.0], [23.3, 22903.0], [23.4, 22903.0], [23.5, 22918.0], [23.6, 22964.0], [23.7, 22980.0], [23.8, 22980.0], [23.9, 23039.0], [24.0, 23055.0], [24.1, 23086.0], [24.2, 23086.0], [24.3, 23185.0], [24.4, 23200.0], [24.5, 23205.0], [24.6, 23205.0], [24.7, 23250.0], [24.8, 23260.0], [24.9, 23308.0], [25.0, 23308.0], [25.1, 23391.0], [25.2, 23435.0], [25.3, 23435.0], [25.4, 23455.0], [25.5, 23480.0], [25.6, 23500.0], [25.7, 23500.0], [25.8, 23502.0], [25.9, 23533.0], [26.0, 23571.0], [26.1, 23571.0], [26.2, 23582.0], [26.3, 23607.0], [26.4, 23645.0], [26.5, 23645.0], [26.6, 23673.0], [26.7, 23673.0], [26.8, 23673.0], [26.9, 23678.0], [27.0, 23681.0], [27.1, 23696.0], [27.2, 23696.0], [27.3, 23759.0], [27.4, 23767.0], [27.5, 23796.0], [27.6, 23796.0], [27.7, 23854.0], [27.8, 23855.0], [27.9, 23901.0], [28.0, 23901.0], [28.1, 23906.0], [28.2, 23908.0], [28.3, 23929.0], [28.4, 23929.0], [28.5, 23937.0], [28.6, 23984.0], [28.7, 23984.0], [28.8, 24042.0], [28.9, 24072.0], [29.0, 24079.0], [29.1, 24079.0], [29.2, 24095.0], [29.3, 24105.0], [29.4, 24107.0], [29.5, 24107.0], [29.6, 24109.0], [29.7, 24134.0], [29.8, 24157.0], [29.9, 24157.0], [30.0, 24175.0], [30.1, 24179.0], [30.2, 24179.0], [30.3, 24182.0], [30.4, 24190.0], [30.5, 24242.0], [30.6, 24242.0], [30.7, 24244.0], [30.8, 24262.0], [30.9, 24277.0], [31.0, 24277.0], [31.1, 24280.0], [31.2, 24310.0], [31.3, 24315.0], [31.4, 24315.0], [31.5, 24317.0], [31.6, 24320.0], [31.7, 24320.0], [31.8, 24354.0], [31.9, 24371.0], [32.0, 24377.0], [32.1, 24377.0], [32.2, 24386.0], [32.3, 24413.0], [32.4, 24428.0], [32.5, 24428.0], [32.6, 24428.0], [32.7, 24486.0], [32.8, 24487.0], [32.9, 24487.0], [33.0, 24487.0], [33.1, 24492.0], [33.2, 24535.0], [33.3, 24535.0], [33.4, 24549.0], [33.5, 24554.0], [33.6, 24554.0], [33.7, 24612.0], [33.8, 24613.0], [33.9, 24650.0], [34.0, 24650.0], [34.1, 24681.0], [34.2, 24690.0], [34.3, 24695.0], [34.4, 24695.0], [34.5, 24743.0], [34.6, 24773.0], [34.7, 24780.0], [34.8, 24780.0], [34.9, 24821.0], [35.0, 24849.0], [35.1, 24849.0], [35.2, 24861.0], [35.3, 24879.0], [35.4, 24881.0], [35.5, 24881.0], [35.6, 24910.0], [35.7, 24918.0], [35.8, 24929.0], [35.9, 24929.0], [36.0, 24950.0], [36.1, 24972.0], [36.2, 24973.0], [36.3, 24973.0], [36.4, 24981.0], [36.5, 24988.0], [36.6, 25003.0], [36.7, 25003.0], [36.8, 25020.0], [36.9, 25027.0], [37.0, 25027.0], [37.1, 25046.0], [37.2, 25072.0], [37.3, 25080.0], [37.4, 25080.0], [37.5, 25092.0], [37.6, 25131.0], [37.7, 25132.0], [37.8, 25132.0], [37.9, 25182.0], [38.0, 25306.0], [38.1, 25316.0], [38.2, 25316.0], [38.3, 25366.0], [38.4, 25415.0], [38.5, 25415.0], [38.6, 25424.0], [38.7, 25435.0], [38.8, 25469.0], [38.9, 25469.0], [39.0, 25474.0], [39.1, 25477.0], [39.2, 25495.0], [39.3, 25495.0], [39.4, 25498.0], [39.5, 25512.0], [39.6, 25528.0], [39.7, 25528.0], [39.8, 25535.0], [39.9, 25568.0], [40.0, 25576.0], [40.1, 25576.0], [40.2, 25616.0], [40.3, 25694.0], [40.4, 25694.0], [40.5, 25720.0], [40.6, 25732.0], [40.7, 25744.0], [40.8, 25744.0], [40.9, 25782.0], [41.0, 25787.0], [41.1, 25803.0], [41.2, 25803.0], [41.3, 25831.0], [41.4, 25837.0], [41.5, 25838.0], [41.6, 25838.0], [41.7, 25862.0], [41.8, 25905.0], [41.9, 25905.0], [42.0, 25935.0], [42.1, 26012.0], [42.2, 26098.0], [42.3, 26098.0], [42.4, 26127.0], [42.5, 26133.0], [42.6, 26143.0], [42.7, 26143.0], [42.8, 26158.0], [42.9, 26165.0], [43.0, 26175.0], [43.1, 26175.0], [43.2, 26191.0], [43.3, 26193.0], [43.4, 26193.0], [43.5, 26228.0], [43.6, 26240.0], [43.7, 26243.0], [43.8, 26243.0], [43.9, 26255.0], [44.0, 26288.0], [44.1, 26288.0], [44.2, 26288.0], [44.3, 26342.0], [44.4, 26386.0], [44.5, 26398.0], [44.6, 26398.0], [44.7, 26408.0], [44.8, 26429.0], [44.9, 26436.0], [45.0, 26436.0], [45.1, 26467.0], [45.2, 26508.0], [45.3, 26508.0], [45.4, 26514.0], [45.5, 26520.0], [45.6, 26525.0], [45.7, 26525.0], [45.8, 26530.0], [45.9, 26577.0], [46.0, 26591.0], [46.1, 26591.0], [46.2, 26620.0], [46.3, 26641.0], [46.4, 26649.0], [46.5, 26649.0], [46.6, 26675.0], [46.7, 26682.0], [46.8, 26682.0], [46.9, 26688.0], [47.0, 26695.0], [47.1, 26706.0], [47.2, 26706.0], [47.3, 26709.0], [47.4, 26757.0], [47.5, 26773.0], [47.6, 26773.0], [47.7, 26842.0], [47.8, 26847.0], [47.9, 26898.0], [48.0, 26898.0], [48.1, 26905.0], [48.2, 26916.0], [48.3, 26942.0], [48.4, 26942.0], [48.5, 27005.0], [48.6, 27019.0], [48.7, 27019.0], [48.8, 27074.0], [48.9, 27102.0], [49.0, 27112.0], [49.1, 27112.0], [49.2, 27155.0], [49.3, 27162.0], [49.4, 27234.0], [49.5, 27234.0], [49.6, 27244.0], [49.7, 27283.0], [49.8, 27323.0], [49.9, 27323.0], [50.0, 27336.0], [50.1, 27354.0], [50.2, 27354.0], [50.3, 27366.0], [50.4, 27382.0], [50.5, 27395.0], [50.6, 27395.0], [50.7, 27433.0], [50.8, 27469.0], [50.9, 27528.0], [51.0, 27528.0], [51.1, 27569.0], [51.2, 27570.0], [51.3, 27604.0], [51.4, 27604.0], [51.5, 27634.0], [51.6, 27666.0], [51.7, 27666.0], [51.8, 27666.0], [51.9, 27698.0], [52.0, 27758.0], [52.1, 27758.0], [52.2, 27765.0], [52.3, 27766.0], [52.4, 27786.0], [52.5, 27786.0], [52.6, 27787.0], [52.7, 27811.0], [52.8, 27858.0], [52.9, 27858.0], [53.0, 27915.0], [53.1, 27923.0], [53.2, 27932.0], [53.3, 27932.0], [53.4, 27952.0], [53.5, 28004.0], [53.6, 28004.0], [53.7, 28010.0], [53.8, 28011.0], [53.9, 28015.0], [54.0, 28015.0], [54.1, 28032.0], [54.2, 28035.0], [54.3, 28057.0], [54.4, 28057.0], [54.5, 28084.0], [54.6, 28205.0], [54.7, 28217.0], [54.8, 28217.0], [54.9, 28226.0], [55.0, 28245.0], [55.1, 28245.0], [55.2, 28343.0], [55.3, 28389.0], [55.4, 28391.0], [55.5, 28391.0], [55.6, 28395.0], [55.7, 28413.0], [55.8, 28425.0], [55.9, 28425.0], [56.0, 28435.0], [56.1, 28448.0], [56.2, 28456.0], [56.3, 28456.0], [56.4, 28457.0], [56.5, 28463.0], [56.6, 28468.0], [56.7, 28468.0], [56.8, 28469.0], [56.9, 28496.0], [57.0, 28496.0], [57.1, 28502.0], [57.2, 28535.0], [57.3, 28562.0], [57.4, 28562.0], [57.5, 28591.0], [57.6, 28622.0], [57.7, 28668.0], [57.8, 28668.0], [57.9, 28733.0], [58.0, 28742.0], [58.1, 28796.0], [58.2, 28796.0], [58.3, 28803.0], [58.4, 28806.0], [58.5, 28806.0], [58.6, 28810.0], [58.7, 28817.0], [58.8, 28822.0], [58.9, 28822.0], [59.0, 28838.0], [59.1, 28842.0], [59.2, 28859.0], [59.3, 28859.0], [59.4, 28869.0], [59.5, 28877.0], [59.6, 28897.0], [59.7, 28897.0], [59.8, 28907.0], [59.9, 28908.0], [60.0, 28934.0], [60.1, 28934.0], [60.2, 28935.0], [60.3, 28940.0], [60.4, 28940.0], [60.5, 28962.0], [60.6, 28968.0], [60.7, 28971.0], [60.8, 28971.0], [60.9, 28974.0], [61.0, 28979.0], [61.1, 29051.0], [61.2, 29051.0], [61.3, 29054.0], [61.4, 29065.0], [61.5, 29068.0], [61.6, 29068.0], [61.7, 29082.0], [61.8, 29089.0], [61.9, 29089.0], [62.0, 29105.0], [62.1, 29120.0], [62.2, 29125.0], [62.3, 29125.0], [62.4, 29170.0], [62.5, 29180.0], [62.6, 29201.0], [62.7, 29201.0], [62.8, 29216.0], [62.9, 29220.0], [63.0, 29222.0], [63.1, 29222.0], [63.2, 29236.0], [63.3, 29241.0], [63.4, 29241.0], [63.5, 29250.0], [63.6, 29265.0], [63.7, 29273.0], [63.8, 29273.0], [63.9, 29279.0], [64.0, 29282.0], [64.1, 29282.0], [64.2, 29282.0], [64.3, 29289.0], [64.4, 29295.0], [64.5, 29298.0], [64.6, 29298.0], [64.7, 29310.0], [64.8, 29313.0], [64.9, 29326.0], [65.0, 29326.0], [65.1, 29342.0], [65.2, 29352.0], [65.3, 29352.0], [65.4, 29355.0], [65.5, 29369.0], [65.6, 29370.0], [65.7, 29370.0], [65.8, 29374.0], [65.9, 29379.0], [66.0, 29383.0], [66.1, 29383.0], [66.2, 29384.0], [66.3, 29391.0], [66.4, 29392.0], [66.5, 29392.0], [66.6, 29399.0], [66.7, 29402.0], [66.8, 29402.0], [66.9, 29405.0], [67.0, 29407.0], [67.1, 29412.0], [67.2, 29412.0], [67.3, 29413.0], [67.4, 29416.0], [67.5, 29418.0], [67.6, 29418.0], [67.7, 29427.0], [67.8, 29440.0], [67.9, 29443.0], [68.0, 29443.0], [68.1, 29448.0], [68.2, 29465.0], [68.3, 29467.0], [68.4, 29467.0], [68.5, 29495.0], [68.6, 29516.0], [68.7, 29516.0], [68.8, 29519.0], [68.9, 29527.0], [69.0, 29529.0], [69.1, 29529.0], [69.2, 29539.0], [69.3, 29542.0], [69.4, 29554.0], [69.5, 29554.0], [69.6, 29555.0], [69.7, 29556.0], [69.8, 29560.0], [69.9, 29560.0], [70.0, 29566.0], [70.1, 29568.0], [70.2, 29568.0], [70.3, 29570.0], [70.4, 29571.0], [70.5, 29580.0], [70.6, 29580.0], [70.7, 29581.0], [70.8, 29581.0], [70.9, 29597.0], [71.0, 29597.0], [71.1, 29600.0], [71.2, 29603.0], [71.3, 29608.0], [71.4, 29608.0], [71.5, 29608.0], [71.6, 29612.0], [71.7, 29612.0], [71.8, 29613.0], [71.9, 29616.0], [72.0, 29623.0], [72.1, 29623.0], [72.2, 29636.0], [72.3, 29644.0], [72.4, 29654.0], [72.5, 29654.0], [72.6, 29660.0], [72.7, 29661.0], [72.8, 29661.0], [72.9, 29661.0], [73.0, 29671.0], [73.1, 29679.0], [73.2, 29685.0], [73.3, 29685.0], [73.4, 29687.0], [73.5, 29694.0], [73.6, 29694.0], [73.7, 29705.0], [73.8, 29712.0], [73.9, 29716.0], [74.0, 29716.0], [74.1, 29720.0], [74.2, 29722.0], [74.3, 29723.0], [74.4, 29723.0], [74.5, 29727.0], [74.6, 29727.0], [74.7, 29728.0], [74.8, 29728.0], [74.9, 29729.0], [75.0, 29733.0], [75.1, 29733.0], [75.2, 29750.0], [75.3, 29756.0], [75.4, 29758.0], [75.5, 29758.0], [75.6, 29759.0], [75.7, 29760.0], [75.8, 29762.0], [75.9, 29762.0], [76.0, 29763.0], [76.1, 29773.0], [76.2, 29778.0], [76.3, 29778.0], [76.4, 29779.0], [76.5, 29779.0], [76.6, 29779.0], [76.7, 29779.0], [76.8, 29781.0], [76.9, 29781.0], [77.0, 29781.0], [77.1, 29793.0], [77.2, 29797.0], [77.3, 29798.0], [77.4, 29798.0], [77.5, 29804.0], [77.6, 29805.0], [77.7, 29814.0], [77.8, 29814.0], [77.9, 29820.0], [78.0, 29827.0], [78.1, 29829.0], [78.2, 29829.0], [78.3, 29833.0], [78.4, 29839.0], [78.5, 29839.0], [78.6, 29842.0], [78.7, 29844.0], [78.8, 29846.0], [78.9, 29846.0], [79.0, 29846.0], [79.1, 29848.0], [79.2, 29849.0], [79.3, 29849.0], [79.4, 29862.0], [79.5, 29863.0], [79.6, 29865.0], [79.7, 29865.0], [79.8, 29873.0], [79.9, 29881.0], [80.0, 29885.0], [80.1, 29885.0], [80.2, 29886.0], [80.3, 29887.0], [80.4, 29887.0], [80.5, 29891.0], [80.6, 29902.0], [80.7, 29908.0], [80.8, 29908.0], [80.9, 29911.0], [81.0, 29913.0], [81.1, 29914.0], [81.2, 29914.0], [81.3, 29917.0], [81.4, 29918.0], [81.5, 29920.0], [81.6, 29920.0], [81.7, 29922.0], [81.8, 29929.0], [81.9, 29929.0], [82.0, 29930.0], [82.1, 29940.0], [82.2, 29943.0], [82.3, 29943.0], [82.4, 29943.0], [82.5, 29959.0], [82.6, 29961.0], [82.7, 29961.0], [82.8, 29962.0], [82.9, 29972.0], [83.0, 29974.0], [83.1, 29974.0], [83.2, 29984.0], [83.3, 29991.0], [83.4, 29991.0], [83.5, 29991.0], [83.6, 29993.0], [83.7, 30001.0], [83.8, 30001.0], [83.9, 30004.0], [84.0, 30008.0], [84.1, 30011.0], [84.2, 30011.0], [84.3, 30012.0], [84.4, 30018.0], [84.5, 30023.0], [84.6, 30023.0], [84.7, 30031.0], [84.8, 30031.0], [84.9, 30038.0], [85.0, 30038.0], [85.1, 30042.0], [85.2, 30043.0], [85.3, 30043.0], [85.4, 30049.0], [85.5, 30054.0], [85.6, 30059.0], [85.7, 30059.0], [85.8, 30066.0], [85.9, 30069.0], [86.0, 30077.0], [86.1, 30077.0], [86.2, 30084.0], [86.3, 30089.0], [86.4, 30097.0], [86.5, 30097.0], [86.6, 30101.0], [86.7, 30109.0], [86.8, 30109.0], [86.9, 30114.0], [87.0, 30120.0], [87.1, 30121.0], [87.2, 30121.0], [87.3, 30126.0], [87.4, 30142.0], [87.5, 30146.0], [87.6, 30146.0], [87.7, 30153.0], [87.8, 30168.0], [87.9, 30170.0], [88.0, 30170.0], [88.1, 30171.0], [88.2, 30186.0], [88.3, 30190.0], [88.4, 30190.0], [88.5, 30192.0], [88.6, 30205.0], [88.7, 30205.0], [88.8, 30214.0], [88.9, 30233.0], [89.0, 30238.0], [89.1, 30238.0], [89.2, 30289.0], [89.3, 30322.0], [89.4, 30325.0], [89.5, 30325.0], [89.6, 30337.0], [89.7, 30341.0], [89.8, 30354.0], [89.9, 30354.0], [90.0, 30357.0], [90.1, 30371.0], [90.2, 30371.0], [90.3, 30385.0], [90.4, 30392.0], [90.5, 30413.0], [90.6, 30413.0], [90.7, 30421.0], [90.8, 30448.0], [90.9, 30548.0], [91.0, 30548.0], [91.1, 30583.0], [91.2, 30597.0], [91.3, 30614.0], [91.4, 30614.0], [91.5, 30624.0], [91.6, 30645.0], [91.7, 30645.0], [91.8, 30713.0], [91.9, 30799.0], [92.0, 30893.0], [92.1, 30893.0], [92.2, 30925.0], [92.3, 31022.0], [92.4, 31056.0], [92.5, 31056.0], [92.6, 31086.0], [92.7, 31097.0], [92.8, 31120.0], [92.9, 31120.0], [93.0, 31213.0], [93.1, 31357.0], [93.2, 31359.0], [93.3, 31359.0], [93.4, 31429.0], [93.5, 31480.0], [93.6, 31480.0], [93.7, 31494.0], [93.8, 31522.0], [93.9, 31772.0], [94.0, 31772.0], [94.1, 31823.0], [94.2, 31841.0], [94.3, 31925.0], [94.4, 31925.0], [94.5, 31939.0], [94.6, 31954.0], [94.7, 31967.0], [94.8, 31967.0], [94.9, 31975.0], [95.0, 32320.0], [95.1, 32320.0], [95.2, 32397.0], [95.3, 32429.0], [95.4, 32913.0], [95.5, 32913.0], [95.6, 33012.0], [95.7, 33169.0], [95.8, 33791.0], [95.9, 33791.0], [96.0, 33942.0], [96.1, 34220.0], [96.2, 34588.0], [96.3, 34588.0], [96.4, 34677.0], [96.5, 35019.0], [96.6, 35438.0], [96.7, 35438.0], [96.8, 35497.0], [96.9, 35582.0], [97.0, 35582.0], [97.1, 35985.0], [97.2, 36404.0], [97.3, 36624.0], [97.4, 36624.0], [97.5, 37033.0], [97.6, 38223.0], [97.7, 38476.0], [97.8, 38476.0], [97.9, 38919.0], [98.0, 39316.0], [98.1, 39362.0], [98.2, 39362.0], [98.3, 40736.0], [98.4, 41150.0], [98.5, 41150.0], [98.6, 41525.0], [98.7, 41780.0], [98.8, 42722.0], [98.9, 42722.0], [99.0, 43364.0], [99.1, 43393.0], [99.2, 43617.0], [99.3, 43617.0], [99.4, 43674.0], [99.5, 44687.0], [99.6, 45465.0], [99.7, 45465.0], [99.8, 45576.0], [99.9, 45692.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 28.0, "series": [{"data": [[33900.0, 1.0], [32900.0, 1.0], [33100.0, 1.0], [34500.0, 1.0], [33700.0, 1.0], [35900.0, 1.0], [35500.0, 1.0], [38900.0, 1.0], [39300.0, 2.0], [40700.0, 1.0], [41500.0, 1.0], [41700.0, 1.0], [42700.0, 1.0], [41100.0, 1.0], [43300.0, 2.0], [45500.0, 1.0], [3100.0, 1.0], [6300.0, 1.0], [8600.0, 1.0], [11400.0, 1.0], [13900.0, 1.0], [16400.0, 1.0], [17400.0, 9.0], [17300.0, 1.0], [17200.0, 3.0], [17100.0, 2.0], [17600.0, 5.0], [18400.0, 1.0], [18200.0, 5.0], [18000.0, 1.0], [17500.0, 11.0], [18100.0, 4.0], [18300.0, 1.0], [17900.0, 3.0], [17700.0, 4.0], [17800.0, 1.0], [18500.0, 9.0], [19100.0, 3.0], [18800.0, 7.0], [19000.0, 2.0], [19200.0, 3.0], [18600.0, 2.0], [19400.0, 2.0], [18900.0, 1.0], [20400.0, 2.0], [20100.0, 6.0], [19800.0, 2.0], [19600.0, 3.0], [20200.0, 4.0], [20000.0, 3.0], [20300.0, 1.0], [19900.0, 2.0], [19500.0, 1.0], [19700.0, 1.0], [21100.0, 1.0], [20900.0, 2.0], [20800.0, 4.0], [20600.0, 6.0], [20500.0, 2.0], [21000.0, 2.0], [21500.0, 4.0], [22000.0, 5.0], [22500.0, 6.0], [22200.0, 2.0], [21900.0, 5.0], [22300.0, 3.0], [21700.0, 4.0], [22400.0, 2.0], [22700.0, 5.0], [23200.0, 4.0], [22900.0, 5.0], [22800.0, 3.0], [23000.0, 3.0], [22600.0, 3.0], [23500.0, 5.0], [23400.0, 3.0], [23100.0, 1.0], [23300.0, 2.0], [23800.0, 2.0], [23900.0, 6.0], [24500.0, 3.0], [23600.0, 7.0], [24200.0, 5.0], [24100.0, 9.0], [23700.0, 3.0], [24400.0, 7.0], [24300.0, 8.0], [24000.0, 4.0], [25400.0, 8.0], [24900.0, 8.0], [24600.0, 6.0], [25000.0, 7.0], [25100.0, 3.0], [25300.0, 3.0], [25500.0, 5.0], [24700.0, 3.0], [24800.0, 5.0], [26400.0, 4.0], [26100.0, 8.0], [25800.0, 5.0], [25600.0, 2.0], [26600.0, 7.0], [26200.0, 6.0], [26300.0, 3.0], [25900.0, 2.0], [26000.0, 2.0], [26500.0, 7.0], [25700.0, 5.0], [26700.0, 4.0], [27500.0, 3.0], [26900.0, 3.0], [27100.0, 4.0], [27000.0, 3.0], [27400.0, 2.0], [27300.0, 6.0], [26800.0, 3.0], [27600.0, 5.0], [27200.0, 3.0], [27900.0, 4.0], [27800.0, 2.0], [28200.0, 4.0], [28400.0, 10.0], [28000.0, 8.0], [27700.0, 5.0], [28300.0, 4.0], [28500.0, 4.0], [28600.0, 2.0], [28900.0, 10.0], [28800.0, 11.0], [29200.0, 15.0], [29500.0, 18.0], [29600.0, 19.0], [29400.0, 14.0], [29300.0, 15.0], [28700.0, 3.0], [29000.0, 6.0], [29100.0, 5.0], [29800.0, 23.0], [30600.0, 3.0], [30700.0, 2.0], [29700.0, 28.0], [30300.0, 9.0], [29900.0, 23.0], [30100.0, 15.0], [30000.0, 21.0], [30200.0, 5.0], [30500.0, 3.0], [30400.0, 3.0], [30800.0, 1.0], [30900.0, 1.0], [31000.0, 4.0], [31200.0, 1.0], [31400.0, 3.0], [31300.0, 2.0], [31500.0, 1.0], [31700.0, 1.0], [31100.0, 1.0], [31900.0, 5.0], [31800.0, 2.0], [32300.0, 2.0], [32400.0, 1.0], [34600.0, 1.0], [34200.0, 1.0], [33000.0, 1.0], [36400.0, 1.0], [35000.0, 1.0], [35400.0, 2.0], [36600.0, 1.0], [38200.0, 1.0], [37000.0, 1.0], [38400.0, 1.0], [43600.0, 2.0], [44600.0, 1.0], [45600.0, 1.0], [45400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.604043E12, "maxY": 10.0, "series": [{"data": [[1.60404336E12, 10.0], [1.60404306E12, 10.0], [1.60404438E12, 10.0], [1.60404408E12, 10.0], [1.60404378E12, 10.0], [1.60404468E12, 10.0], [1.60404348E12, 10.0], [1.60404498E12, 1.5], [1.60404318E12, 10.0], [1.60404384E12, 10.0], [1.60404354E12, 10.0], [1.60404324E12, 10.0], [1.60404456E12, 10.0], [1.60404486E12, 10.0], [1.60404426E12, 10.0], [1.60404396E12, 10.0], [1.60404366E12, 10.0], [1.60404432E12, 10.0], [1.60404402E12, 10.0], [1.60404372E12, 10.0], [1.60404474E12, 10.0], [1.60404342E12, 10.0], [1.60404312E12, 10.0], [1.60404444E12, 10.0], [1.60404414E12, 10.0], [1.60404462E12, 10.0], [1.60404492E12, 9.03448275862069], [1.6040442E12, 10.0], [1.6040439E12, 10.0], [1.6040436E12, 10.0], [1.6040433E12, 10.0], [1.604043E12, 10.0], [1.6040445E12, 10.0], [1.6040448E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17400.0, "minX": 1.0, "maxY": 26542.63774104685, "series": [{"data": [[8.0, 17709.0], [4.0, 17400.0], [2.0, 17620.0], [1.0, 17955.0], [9.0, 17810.0], [10.0, 26542.63774104685], [5.0, 17437.0], [6.0, 17539.0], [3.0, 17421.0], [7.0, 17627.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26433.296598639474]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13.083333333333334, "minX": 1.604043E12, "maxY": 201410.0, "series": [{"data": [[1.60404336E12, 47761.05], [1.60404306E12, 132485.26666666666], [1.60404438E12, 51649.36666666667], [1.60404408E12, 87423.2], [1.60404378E12, 36618.36666666667], [1.60404468E12, 35384.55], [1.60404348E12, 49646.28333333333], [1.60404498E12, 870.6166666666667], [1.60404318E12, 68553.31666666667], [1.60404384E12, 165740.23333333334], [1.60404354E12, 52623.433333333334], [1.60404324E12, 77928.23333333334], [1.60404456E12, 45378.61666666667], [1.60404486E12, 154792.35], [1.60404426E12, 34898.45], [1.60404396E12, 201410.0], [1.60404366E12, 43352.73333333333], [1.60404432E12, 47236.3], [1.60404402E12, 81807.91666666667], [1.60404372E12, 34709.21666666667], [1.60404474E12, 30280.35], [1.60404342E12, 44421.35], [1.60404312E12, 124916.05], [1.60404444E12, 53213.7], [1.60404414E12, 62989.2], [1.60404462E12, 46979.566666666666], [1.60404492E12, 54653.28333333333], [1.6040442E12, 52071.1], [1.6040439E12, 89505.91666666667], [1.6040436E12, 42596.21666666667], [1.6040433E12, 45058.75], [1.604043E12, 129251.58333333333], [1.6040445E12, 47447.583333333336], [1.6040448E12, 49813.26666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60404336E12, 146.11666666666667], [1.60404306E12, 190.1], [1.60404438E12, 153.45], [1.60404408E12, 182.41666666666666], [1.60404378E12, 209.73333333333332], [1.60404468E12, 160.48333333333332], [1.60404348E12, 146.13333333333333], [1.60404498E12, 13.083333333333334], [1.60404318E12, 104.26666666666667], [1.60404384E12, 186.35], [1.60404354E12, 146.38333333333333], [1.60404324E12, 168.01666666666668], [1.60404456E12, 146.13333333333333], [1.60404486E12, 153.11666666666667], [1.60404426E12, 131.46666666666667], [1.60404396E12, 178.83333333333334], [1.60404366E12, 146.0], [1.60404432E12, 146.13333333333333], [1.60404402E12, 212.41666666666666], [1.60404372E12, 160.68333333333334], [1.60404474E12, 189.75], [1.60404342E12, 146.13333333333333], [1.60404312E12, 196.1], [1.60404444E12, 154.05], [1.60404414E12, 168.33333333333334], [1.60404462E12, 153.3], [1.60404492E12, 201.61666666666667], [1.6040442E12, 154.66666666666666], [1.6040439E12, 171.25], [1.6040436E12, 146.06666666666666], [1.6040433E12, 161.96666666666667], [1.604043E12, 73.16666666666667], [1.6040445E12, 153.75], [1.6040448E12, 187.81666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14985.5, "minX": 1.604043E12, "maxY": 40163.071428571435, "series": [{"data": [[1.60404336E12, 30022.899999999994], [1.60404306E12, 24164.730769230766], [1.60404438E12, 29692.238095238088], [1.60404408E12, 23249.8], [1.60404378E12, 22471.241379310344], [1.60404468E12, 26803.090909090908], [1.60404348E12, 29970.6], [1.60404498E12, 17787.5], [1.60404318E12, 40163.071428571435], [1.60404384E12, 20686.5], [1.60404354E12, 29993.45], [1.60404324E12, 27943.565217391304], [1.60404456E12, 29194.550000000003], [1.60404486E12, 26046.666666666668], [1.60404426E12, 34727.1111111111], [1.60404396E12, 23553.999999999996], [1.60404366E12, 29941.65], [1.60404432E12, 29783.899999999998], [1.60404402E12, 21734.033333333333], [1.60404372E12, 27871.181818181816], [1.60404474E12, 24046.192307692312], [1.60404342E12, 30262.399999999998], [1.60404312E12, 21105.777777777777], [1.60404444E12, 29094.952380952378], [1.60404414E12, 25464.347826086952], [1.60404462E12, 29472.999999999996], [1.60404492E12, 23716.79310344827], [1.6040442E12, 26130.80952380952], [1.6040439E12, 25213.666666666668], [1.6040436E12, 29701.949999999997], [1.6040433E12, 26344.31818181818], [1.604043E12, 14985.5], [1.6040445E12, 28177.428571428572], [1.6040448E12, 23024.999999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14980.4, "minX": 1.604043E12, "maxY": 40159.71428571429, "series": [{"data": [[1.60404336E12, 30021.65], [1.60404306E12, 24162.230769230766], [1.60404438E12, 29690.952380952374], [1.60404408E12, 23247.640000000003], [1.60404378E12, 22469.965517241377], [1.60404468E12, 26802.136363636368], [1.60404348E12, 29969.049999999996], [1.60404498E12, 17785.5], [1.60404318E12, 40159.71428571429], [1.60404384E12, 20682.346153846152], [1.60404354E12, 29992.0], [1.60404324E12, 27941.739130434784], [1.60404456E12, 29193.450000000004], [1.60404486E12, 26042.190476190477], [1.60404426E12, 34726.0], [1.60404396E12, 23550.04], [1.60404366E12, 29940.550000000003], [1.60404432E12, 29782.550000000003], [1.60404402E12, 21732.333333333332], [1.60404372E12, 27869.95454545454], [1.60404474E12, 24045.34615384616], [1.60404342E12, 30261.199999999997], [1.60404312E12, 21103.0], [1.60404444E12, 29093.619047619046], [1.60404414E12, 25463.043478260865], [1.60404462E12, 29471.714285714283], [1.60404492E12, 23714.65517241379], [1.6040442E12, 26129.61904761905], [1.6040439E12, 25210.750000000004], [1.6040436E12, 29700.8], [1.6040433E12, 26343.36363636364], [1.604043E12, 14980.4], [1.6040445E12, 28176.095238095233], [1.6040448E12, 23023.53846153846]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.604043E12, "maxY": 8.8, "series": [{"data": [[1.60404336E12, 0.0], [1.60404306E12, 0.23076923076923078], [1.60404438E12, 0.8571428571428572], [1.60404408E12, 0.16], [1.60404378E12, 0.4827586206896552], [1.60404468E12, 0.13636363636363635], [1.60404348E12, 0.75], [1.60404498E12, 0.0], [1.60404318E12, 0.8571428571428571], [1.60404384E12, 0.2307692307692308], [1.60404354E12, 1.2000000000000002], [1.60404324E12, 0.6521739130434782], [1.60404456E12, 0.9], [1.60404486E12, 0.5714285714285715], [1.60404426E12, 0.4444444444444445], [1.60404396E12, 0.5599999999999999], [1.60404366E12, 0.6], [1.60404432E12, 0.35000000000000003], [1.60404402E12, 0.4], [1.60404372E12, 0.7727272727272727], [1.60404474E12, 0.34615384615384615], [1.60404342E12, 0.65], [1.60404312E12, 0.37037037037037035], [1.60404444E12, 0.5714285714285714], [1.60404414E12, 0.3043478260869566], [1.60404462E12, 0.7142857142857142], [1.60404492E12, 0.4482758620689655], [1.6040442E12, 0.5238095238095238], [1.6040439E12, 0.5833333333333333], [1.6040436E12, 0.0], [1.6040433E12, 0.6363636363636364], [1.604043E12, 8.8], [1.6040445E12, 0.09523809523809526], [1.6040448E12, 0.42307692307692313]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3184.0, "minX": 1.604043E12, "maxY": 45692.0, "series": [{"data": [[1.60404336E12, 31494.0], [1.60404306E12, 27858.0], [1.60404438E12, 30142.0], [1.60404408E12, 32397.0], [1.60404378E12, 26514.0], [1.60404468E12, 29918.0], [1.60404348E12, 30289.0], [1.60404498E12, 17955.0], [1.60404318E12, 45692.0], [1.60404384E12, 23205.0], [1.60404354E12, 30583.0], [1.60404324E12, 35019.0], [1.60404456E12, 29554.0], [1.60404486E12, 30190.0], [1.60404426E12, 43364.0], [1.60404396E12, 26773.0], [1.60404366E12, 30413.0], [1.60404432E12, 30238.0], [1.60404402E12, 29054.0], [1.60404372E12, 29758.0], [1.60404474E12, 27811.0], [1.60404342E12, 31522.0], [1.60404312E12, 25495.0], [1.60404444E12, 30011.0], [1.60404414E12, 28935.0], [1.60404462E12, 29778.0], [1.60404492E12, 38476.0], [1.6040442E12, 35497.0], [1.6040439E12, 31967.0], [1.6040436E12, 30084.0], [1.6040433E12, 30925.0], [1.604043E12, 26158.0], [1.6040445E12, 29846.0], [1.6040448E12, 27786.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60404336E12, 26193.0], [1.60404306E12, 19840.0], [1.60404438E12, 29379.0], [1.60404408E12, 17271.0], [1.60404378E12, 17381.0], [1.60404468E12, 23796.0], [1.60404348E12, 29727.0], [1.60404498E12, 17620.0], [1.60404318E12, 26942.0], [1.60404384E12, 17243.0], [1.60404354E12, 29369.0], [1.60404324E12, 24743.0], [1.60404456E12, 28822.0], [1.60404486E12, 19990.0], [1.60404426E12, 26012.0], [1.60404396E12, 19215.0], [1.60404366E12, 29600.0], [1.60404432E12, 29201.0], [1.60404402E12, 17517.0], [1.60404372E12, 25720.0], [1.60404474E12, 21002.0], [1.60404342E12, 29555.0], [1.60404312E12, 18023.0], [1.60404444E12, 27102.0], [1.60404414E12, 22663.0], [1.60404462E12, 28810.0], [1.60404492E12, 17107.0], [1.6040442E12, 22732.0], [1.6040439E12, 18112.0], [1.6040436E12, 28897.0], [1.6040433E12, 22780.0], [1.604043E12, 3184.0], [1.6040445E12, 27162.0], [1.6040448E12, 18924.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60404336E12, 26193.0], [1.60404306E12, 19840.0], [1.60404438E12, 29379.0], [1.60404408E12, 17271.0], [1.60404378E12, 17381.0], [1.60404468E12, 23796.0], [1.60404348E12, 29727.0], [1.60404498E12, 17620.0], [1.60404318E12, 26942.0], [1.60404384E12, 17243.0], [1.60404354E12, 29369.0], [1.60404324E12, 24743.0], [1.60404456E12, 28822.0], [1.60404486E12, 19990.0], [1.60404426E12, 26012.0], [1.60404396E12, 19215.0], [1.60404366E12, 29600.0], [1.60404432E12, 29201.0], [1.60404402E12, 17517.0], [1.60404372E12, 25720.0], [1.60404474E12, 21002.0], [1.60404342E12, 29555.0], [1.60404312E12, 18023.0], [1.60404444E12, 27102.0], [1.60404414E12, 22663.0], [1.60404462E12, 28810.0], [1.60404492E12, 17107.0], [1.6040442E12, 22732.0], [1.6040439E12, 18112.0], [1.6040436E12, 28897.0], [1.6040433E12, 22780.0], [1.604043E12, 3184.0], [1.6040445E12, 27162.0], [1.6040448E12, 18924.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60404336E12, 26193.0], [1.60404306E12, 19840.0], [1.60404438E12, 29379.0], [1.60404408E12, 17271.0], [1.60404378E12, 17381.0], [1.60404468E12, 23796.0], [1.60404348E12, 29727.0], [1.60404498E12, 17620.0], [1.60404318E12, 26942.0], [1.60404384E12, 17243.0], [1.60404354E12, 29369.0], [1.60404324E12, 24743.0], [1.60404456E12, 28822.0], [1.60404486E12, 19990.0], [1.60404426E12, 26012.0], [1.60404396E12, 19215.0], [1.60404366E12, 29600.0], [1.60404432E12, 29201.0], [1.60404402E12, 17517.0], [1.60404372E12, 25720.0], [1.60404474E12, 21002.0], [1.60404342E12, 29555.0], [1.60404312E12, 18023.0], [1.60404444E12, 27102.0], [1.60404414E12, 22663.0], [1.60404462E12, 28810.0], [1.60404492E12, 17107.0], [1.6040442E12, 22732.0], [1.6040439E12, 18112.0], [1.6040436E12, 28897.0], [1.6040433E12, 22780.0], [1.604043E12, 3184.0], [1.6040445E12, 27162.0], [1.6040448E12, 18924.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60404336E12, 26193.0], [1.60404306E12, 19840.0], [1.60404438E12, 29379.0], [1.60404408E12, 17271.0], [1.60404378E12, 17381.0], [1.60404468E12, 23796.0], [1.60404348E12, 29727.0], [1.60404498E12, 17620.0], [1.60404318E12, 26942.0], [1.60404384E12, 17243.0], [1.60404354E12, 29369.0], [1.60404324E12, 24743.0], [1.60404456E12, 28822.0], [1.60404486E12, 19990.0], [1.60404426E12, 26012.0], [1.60404396E12, 19215.0], [1.60404366E12, 29600.0], [1.60404432E12, 29201.0], [1.60404402E12, 17517.0], [1.60404372E12, 25720.0], [1.60404474E12, 21002.0], [1.60404342E12, 29555.0], [1.60404312E12, 18023.0], [1.60404444E12, 27102.0], [1.60404414E12, 22663.0], [1.60404462E12, 28810.0], [1.60404492E12, 17107.0], [1.6040442E12, 22732.0], [1.6040439E12, 18112.0], [1.6040436E12, 28897.0], [1.6040433E12, 22780.0], [1.604043E12, 3184.0], [1.6040445E12, 27162.0], [1.6040448E12, 18924.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60404336E12, 30233.0], [1.60404306E12, 25306.0], [1.60404438E12, 29608.0], [1.60404408E12, 22330.0], [1.60404378E12, 23678.0], [1.60404468E12, 26328.5], [1.60404348E12, 29973.0], [1.60404498E12, 17787.5], [1.60404318E12, 42459.0], [1.60404384E12, 20162.5], [1.60404354E12, 30057.5], [1.60404324E12, 25831.0], [1.60404456E12, 29226.5], [1.60404486E12, 28502.0], [1.60404426E12, 34901.0], [1.60404396E12, 24377.0], [1.60404366E12, 29845.5], [1.60404432E12, 29886.5], [1.60404402E12, 20132.5], [1.60404372E12, 27685.0], [1.60404474E12, 23626.0], [1.60404342E12, 30098.0], [1.60404312E12, 20566.0], [1.60404444E12, 29313.0], [1.60404414E12, 24773.0], [1.60404462E12, 29612.0], [1.60404492E12, 18546.0], [1.6040442E12, 24554.0], [1.6040439E12, 25695.0], [1.6040436E12, 29824.5], [1.6040433E12, 26923.5], [1.604043E12, 15171.0], [1.6040445E12, 28057.0], [1.6040448E12, 22534.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27336.0, "minX": 1.0, "maxY": 27336.0, "series": [{"data": [[1.0, 27336.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27335.0, "minX": 1.0, "maxY": 27335.0, "series": [{"data": [[1.0, 27335.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.604043E12, "maxY": 0.5, "series": [{"data": [[1.60404336E12, 0.3333333333333333], [1.60404306E12, 0.43333333333333335], [1.60404438E12, 0.35], [1.60404408E12, 0.4166666666666667], [1.60404378E12, 0.48333333333333334], [1.60404468E12, 0.36666666666666664], [1.60404348E12, 0.3333333333333333], [1.60404318E12, 0.23333333333333334], [1.60404384E12, 0.43333333333333335], [1.60404354E12, 0.3333333333333333], [1.60404324E12, 0.38333333333333336], [1.60404456E12, 0.3333333333333333], [1.60404486E12, 0.35], [1.60404426E12, 0.3], [1.60404396E12, 0.4166666666666667], [1.60404366E12, 0.3333333333333333], [1.60404432E12, 0.3333333333333333], [1.60404402E12, 0.5], [1.60404372E12, 0.36666666666666664], [1.60404474E12, 0.43333333333333335], [1.60404342E12, 0.3333333333333333], [1.60404312E12, 0.45], [1.60404444E12, 0.35], [1.60404414E12, 0.38333333333333336], [1.60404462E12, 0.35], [1.60404492E12, 0.35], [1.6040442E12, 0.35], [1.6040439E12, 0.4], [1.6040436E12, 0.3333333333333333], [1.6040433E12, 0.36666666666666664], [1.604043E12, 0.3333333333333333], [1.6040445E12, 0.35], [1.6040448E12, 0.43333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404492E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.604043E12, "maxY": 0.5, "series": [{"data": [[1.60404336E12, 0.3333333333333333], [1.60404306E12, 0.43333333333333335], [1.60404438E12, 0.35], [1.60404408E12, 0.4166666666666667], [1.60404378E12, 0.48333333333333334], [1.60404468E12, 0.36666666666666664], [1.60404348E12, 0.3333333333333333], [1.60404498E12, 0.03333333333333333], [1.60404318E12, 0.23333333333333334], [1.60404384E12, 0.43333333333333335], [1.60404354E12, 0.3333333333333333], [1.60404324E12, 0.38333333333333336], [1.60404456E12, 0.3333333333333333], [1.60404486E12, 0.35], [1.60404426E12, 0.3], [1.60404396E12, 0.4166666666666667], [1.60404366E12, 0.3333333333333333], [1.60404432E12, 0.3333333333333333], [1.60404402E12, 0.5], [1.60404372E12, 0.36666666666666664], [1.60404474E12, 0.43333333333333335], [1.60404342E12, 0.3333333333333333], [1.60404312E12, 0.45], [1.60404444E12, 0.35], [1.60404414E12, 0.38333333333333336], [1.60404462E12, 0.35], [1.60404492E12, 0.48333333333333334], [1.6040442E12, 0.35], [1.6040439E12, 0.4], [1.6040436E12, 0.3333333333333333], [1.6040433E12, 0.36666666666666664], [1.604043E12, 0.16666666666666666], [1.6040445E12, 0.35], [1.6040448E12, 0.43333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.604043E12, "maxY": 0.5, "series": [{"data": [[1.60404336E12, 0.3333333333333333], [1.60404306E12, 0.43333333333333335], [1.60404438E12, 0.35], [1.60404408E12, 0.4166666666666667], [1.60404378E12, 0.48333333333333334], [1.60404468E12, 0.36666666666666664], [1.60404348E12, 0.3333333333333333], [1.60404498E12, 0.03333333333333333], [1.60404318E12, 0.23333333333333334], [1.60404384E12, 0.43333333333333335], [1.60404354E12, 0.3333333333333333], [1.60404324E12, 0.38333333333333336], [1.60404456E12, 0.3333333333333333], [1.60404486E12, 0.35], [1.60404426E12, 0.3], [1.60404396E12, 0.4166666666666667], [1.60404366E12, 0.3333333333333333], [1.60404432E12, 0.3333333333333333], [1.60404402E12, 0.5], [1.60404372E12, 0.36666666666666664], [1.60404474E12, 0.43333333333333335], [1.60404342E12, 0.3333333333333333], [1.60404312E12, 0.45], [1.60404444E12, 0.35], [1.60404414E12, 0.38333333333333336], [1.60404462E12, 0.35], [1.60404492E12, 0.48333333333333334], [1.6040442E12, 0.35], [1.6040439E12, 0.4], [1.6040436E12, 0.3333333333333333], [1.6040433E12, 0.36666666666666664], [1.604043E12, 0.16666666666666666], [1.6040445E12, 0.35], [1.6040448E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.604043E12, "maxY": 0.5, "series": [{"data": [[1.60404336E12, 0.3333333333333333], [1.60404306E12, 0.43333333333333335], [1.60404438E12, 0.35], [1.60404408E12, 0.4166666666666667], [1.60404378E12, 0.48333333333333334], [1.60404468E12, 0.36666666666666664], [1.60404348E12, 0.3333333333333333], [1.60404498E12, 0.03333333333333333], [1.60404318E12, 0.23333333333333334], [1.60404384E12, 0.43333333333333335], [1.60404354E12, 0.3333333333333333], [1.60404324E12, 0.38333333333333336], [1.60404456E12, 0.3333333333333333], [1.60404486E12, 0.35], [1.60404426E12, 0.3], [1.60404396E12, 0.4166666666666667], [1.60404366E12, 0.3333333333333333], [1.60404432E12, 0.3333333333333333], [1.60404402E12, 0.5], [1.60404372E12, 0.36666666666666664], [1.60404474E12, 0.43333333333333335], [1.60404342E12, 0.3333333333333333], [1.60404312E12, 0.45], [1.60404444E12, 0.35], [1.60404414E12, 0.38333333333333336], [1.60404462E12, 0.35], [1.60404492E12, 0.48333333333333334], [1.6040442E12, 0.35], [1.6040439E12, 0.4], [1.6040436E12, 0.3333333333333333], [1.6040433E12, 0.36666666666666664], [1.604043E12, 0.16666666666666666], [1.6040445E12, 0.35], [1.6040448E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

