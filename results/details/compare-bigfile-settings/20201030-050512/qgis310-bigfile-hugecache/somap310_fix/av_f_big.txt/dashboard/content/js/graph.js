/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3129.0, "minX": 0.0, "maxY": 45280.0, "series": [{"data": [[0.0, 3129.0], [0.1, 3129.0], [0.2, 6117.0], [0.3, 8319.0], [0.4, 8319.0], [0.5, 11126.0], [0.6, 13612.0], [0.7, 16217.0], [0.8, 16217.0], [0.9, 16713.0], [1.0, 16717.0], [1.1, 16763.0], [1.2, 16763.0], [1.3, 16810.0], [1.4, 17172.0], [1.5, 17284.0], [1.6, 17284.0], [1.7, 17299.0], [1.8, 17321.0], [1.9, 17321.0], [2.0, 17339.0], [2.1, 17374.0], [2.2, 17409.0], [2.3, 17409.0], [2.4, 17428.0], [2.5, 17448.0], [2.6, 17462.0], [2.7, 17462.0], [2.8, 17483.0], [2.9, 17483.0], [3.0, 17487.0], [3.1, 17487.0], [3.2, 17488.0], [3.3, 17495.0], [3.4, 17495.0], [3.5, 17527.0], [3.6, 17560.0], [3.7, 17580.0], [3.8, 17580.0], [3.9, 17595.0], [4.0, 17604.0], [4.1, 17639.0], [4.2, 17639.0], [4.3, 17645.0], [4.4, 17663.0], [4.5, 17769.0], [4.6, 17769.0], [4.7, 17808.0], [4.8, 17828.0], [4.9, 17837.0], [5.0, 17837.0], [5.1, 17847.0], [5.2, 17858.0], [5.3, 17858.0], [5.4, 17882.0], [5.5, 17887.0], [5.6, 17891.0], [5.7, 17891.0], [5.8, 17933.0], [5.9, 17987.0], [6.0, 17997.0], [6.1, 17997.0], [6.2, 18006.0], [6.3, 18011.0], [6.4, 18049.0], [6.5, 18049.0], [6.6, 18063.0], [6.7, 18072.0], [6.8, 18072.0], [6.9, 18083.0], [7.0, 18091.0], [7.1, 18104.0], [7.2, 18104.0], [7.3, 18111.0], [7.4, 18134.0], [7.5, 18135.0], [7.6, 18135.0], [7.7, 18174.0], [7.8, 18189.0], [7.9, 18211.0], [8.0, 18211.0], [8.1, 18215.0], [8.2, 18272.0], [8.3, 18376.0], [8.4, 18376.0], [8.5, 18462.0], [8.6, 18464.0], [8.7, 18464.0], [8.8, 18475.0], [8.9, 18494.0], [9.0, 18516.0], [9.1, 18516.0], [9.2, 18529.0], [9.3, 18584.0], [9.4, 18608.0], [9.5, 18608.0], [9.6, 18710.0], [9.7, 18724.0], [9.8, 18787.0], [9.9, 18787.0], [10.0, 18830.0], [10.1, 18835.0], [10.2, 18835.0], [10.3, 18889.0], [10.4, 18944.0], [10.5, 18948.0], [10.6, 18948.0], [10.7, 19154.0], [10.8, 19232.0], [10.9, 19240.0], [11.0, 19240.0], [11.1, 19241.0], [11.2, 19281.0], [11.3, 19334.0], [11.4, 19334.0], [11.5, 19373.0], [11.6, 19420.0], [11.7, 19420.0], [11.8, 19474.0], [11.9, 19544.0], [12.0, 19570.0], [12.1, 19570.0], [12.2, 19592.0], [12.3, 19595.0], [12.4, 19676.0], [12.5, 19676.0], [12.6, 19694.0], [12.7, 19710.0], [12.8, 19737.0], [12.9, 19737.0], [13.0, 19750.0], [13.1, 19800.0], [13.2, 19807.0], [13.3, 19807.0], [13.4, 19840.0], [13.5, 19850.0], [13.6, 19850.0], [13.7, 19851.0], [13.8, 19872.0], [13.9, 19875.0], [14.0, 19875.0], [14.1, 19906.0], [14.2, 19920.0], [14.3, 19923.0], [14.4, 19923.0], [14.5, 19931.0], [14.6, 19943.0], [14.7, 19961.0], [14.8, 19961.0], [14.9, 19961.0], [15.0, 20001.0], [15.1, 20001.0], [15.2, 20039.0], [15.3, 20300.0], [15.4, 20324.0], [15.5, 20324.0], [15.6, 20354.0], [15.7, 20360.0], [15.8, 20362.0], [15.9, 20362.0], [16.0, 20367.0], [16.1, 20498.0], [16.2, 20528.0], [16.3, 20528.0], [16.4, 20649.0], [16.5, 20655.0], [16.6, 20841.0], [16.7, 20841.0], [16.8, 20888.0], [16.9, 20905.0], [17.0, 20905.0], [17.1, 21006.0], [17.2, 21088.0], [17.3, 21311.0], [17.4, 21311.0], [17.5, 21315.0], [17.6, 21369.0], [17.7, 21389.0], [17.8, 21389.0], [17.9, 21560.0], [18.0, 21605.0], [18.1, 21612.0], [18.2, 21612.0], [18.3, 21681.0], [18.4, 21704.0], [18.5, 21704.0], [18.6, 21736.0], [18.7, 21754.0], [18.8, 21867.0], [18.9, 21867.0], [19.0, 21897.0], [19.1, 21921.0], [19.2, 21997.0], [19.3, 21997.0], [19.4, 22007.0], [19.5, 22014.0], [19.6, 22036.0], [19.7, 22036.0], [19.8, 22057.0], [19.9, 22082.0], [20.0, 22084.0], [20.1, 22084.0], [20.2, 22091.0], [20.3, 22094.0], [20.4, 22094.0], [20.5, 22153.0], [20.6, 22201.0], [20.7, 22207.0], [20.8, 22207.0], [20.9, 22225.0], [21.0, 22239.0], [21.1, 22252.0], [21.2, 22252.0], [21.3, 22268.0], [21.4, 22313.0], [21.5, 22337.0], [21.6, 22337.0], [21.7, 22346.0], [21.8, 22371.0], [21.9, 22371.0], [22.0, 22372.0], [22.1, 22418.0], [22.2, 22435.0], [22.3, 22435.0], [22.4, 22447.0], [22.5, 22485.0], [22.6, 22495.0], [22.7, 22495.0], [22.8, 22516.0], [22.9, 22547.0], [23.0, 22552.0], [23.1, 22552.0], [23.2, 22570.0], [23.3, 22629.0], [23.4, 22629.0], [23.5, 22647.0], [23.6, 22657.0], [23.7, 22666.0], [23.8, 22666.0], [23.9, 22888.0], [24.0, 22935.0], [24.1, 22963.0], [24.2, 22963.0], [24.3, 22964.0], [24.4, 23042.0], [24.5, 23088.0], [24.6, 23088.0], [24.7, 23090.0], [24.8, 23146.0], [24.9, 23191.0], [25.0, 23191.0], [25.1, 23258.0], [25.2, 23261.0], [25.3, 23261.0], [25.4, 23262.0], [25.5, 23288.0], [25.6, 23338.0], [25.7, 23338.0], [25.8, 23338.0], [25.9, 23355.0], [26.0, 23360.0], [26.1, 23360.0], [26.2, 23421.0], [26.3, 23502.0], [26.4, 23505.0], [26.5, 23505.0], [26.6, 23511.0], [26.7, 23540.0], [26.8, 23540.0], [26.9, 23573.0], [27.0, 23579.0], [27.1, 23580.0], [27.2, 23580.0], [27.3, 23597.0], [27.4, 23602.0], [27.5, 23666.0], [27.6, 23666.0], [27.7, 23670.0], [27.8, 23680.0], [27.9, 23685.0], [28.0, 23685.0], [28.1, 23735.0], [28.2, 23760.0], [28.3, 23763.0], [28.4, 23763.0], [28.5, 23794.0], [28.6, 23800.0], [28.7, 23800.0], [28.8, 23814.0], [28.9, 23816.0], [29.0, 23837.0], [29.1, 23837.0], [29.2, 23845.0], [29.3, 23863.0], [29.4, 23873.0], [29.5, 23873.0], [29.6, 23876.0], [29.7, 23888.0], [29.8, 23910.0], [29.9, 23910.0], [30.0, 23917.0], [30.1, 23943.0], [30.2, 23943.0], [30.3, 23967.0], [30.4, 23974.0], [30.5, 23978.0], [30.6, 23978.0], [30.7, 23978.0], [30.8, 23992.0], [30.9, 24003.0], [31.0, 24003.0], [31.1, 24004.0], [31.2, 24004.0], [31.3, 24007.0], [31.4, 24007.0], [31.5, 24009.0], [31.6, 24017.0], [31.7, 24017.0], [31.8, 24045.0], [31.9, 24078.0], [32.0, 24083.0], [32.1, 24083.0], [32.2, 24123.0], [32.3, 24130.0], [32.4, 24138.0], [32.5, 24138.0], [32.6, 24153.0], [32.7, 24171.0], [32.8, 24176.0], [32.9, 24176.0], [33.0, 24210.0], [33.1, 24213.0], [33.2, 24260.0], [33.3, 24260.0], [33.4, 24262.0], [33.5, 24277.0], [33.6, 24277.0], [33.7, 24278.0], [33.8, 24311.0], [33.9, 24313.0], [34.0, 24313.0], [34.1, 24318.0], [34.2, 24320.0], [34.3, 24335.0], [34.4, 24335.0], [34.5, 24349.0], [34.6, 24376.0], [34.7, 24443.0], [34.8, 24443.0], [34.9, 24452.0], [35.0, 24464.0], [35.1, 24464.0], [35.2, 24493.0], [35.3, 24494.0], [35.4, 24591.0], [35.5, 24591.0], [35.6, 24612.0], [35.7, 24613.0], [35.8, 24633.0], [35.9, 24633.0], [36.0, 24693.0], [36.1, 24698.0], [36.2, 24701.0], [36.3, 24701.0], [36.4, 24711.0], [36.5, 24763.0], [36.6, 24778.0], [36.7, 24778.0], [36.8, 24783.0], [36.9, 24803.0], [37.0, 24803.0], [37.1, 24847.0], [37.2, 24848.0], [37.3, 24916.0], [37.4, 24916.0], [37.5, 24921.0], [37.6, 24926.0], [37.7, 24928.0], [37.8, 24928.0], [37.9, 24936.0], [38.0, 24944.0], [38.1, 24971.0], [38.2, 24971.0], [38.3, 24976.0], [38.4, 25013.0], [38.5, 25013.0], [38.6, 25017.0], [38.7, 25030.0], [38.8, 25042.0], [38.9, 25042.0], [39.0, 25090.0], [39.1, 25146.0], [39.2, 25149.0], [39.3, 25149.0], [39.4, 25155.0], [39.5, 25201.0], [39.6, 25210.0], [39.7, 25210.0], [39.8, 25244.0], [39.9, 25264.0], [40.0, 25420.0], [40.1, 25420.0], [40.2, 25476.0], [40.3, 25537.0], [40.4, 25537.0], [40.5, 25546.0], [40.6, 25641.0], [40.7, 25693.0], [40.8, 25693.0], [40.9, 25696.0], [41.0, 25718.0], [41.1, 25719.0], [41.2, 25719.0], [41.3, 25720.0], [41.4, 25728.0], [41.5, 25736.0], [41.6, 25736.0], [41.7, 25759.0], [41.8, 25774.0], [41.9, 25774.0], [42.0, 25789.0], [42.1, 25799.0], [42.2, 25810.0], [42.3, 25810.0], [42.4, 25813.0], [42.5, 25845.0], [42.6, 25856.0], [42.7, 25856.0], [42.8, 25858.0], [42.9, 25864.0], [43.0, 25895.0], [43.1, 25895.0], [43.2, 25905.0], [43.3, 25910.0], [43.4, 25910.0], [43.5, 25915.0], [43.6, 25922.0], [43.7, 25954.0], [43.8, 25954.0], [43.9, 25962.0], [44.0, 25969.0], [44.1, 25975.0], [44.2, 25975.0], [44.3, 25976.0], [44.4, 25984.0], [44.5, 25992.0], [44.6, 25992.0], [44.7, 26005.0], [44.8, 26013.0], [44.9, 26015.0], [45.0, 26015.0], [45.1, 26016.0], [45.2, 26017.0], [45.3, 26017.0], [45.4, 26041.0], [45.5, 26043.0], [45.6, 26083.0], [45.7, 26083.0], [45.8, 26091.0], [45.9, 26106.0], [46.0, 26110.0], [46.1, 26110.0], [46.2, 26149.0], [46.3, 26179.0], [46.4, 26248.0], [46.5, 26248.0], [46.6, 26328.0], [46.7, 26343.0], [46.8, 26343.0], [46.9, 26437.0], [47.0, 26454.0], [47.1, 26497.0], [47.2, 26497.0], [47.3, 26529.0], [47.4, 26544.0], [47.5, 26555.0], [47.6, 26555.0], [47.7, 26626.0], [47.8, 26631.0], [47.9, 26691.0], [48.0, 26691.0], [48.1, 26709.0], [48.2, 26730.0], [48.3, 26735.0], [48.4, 26735.0], [48.5, 26779.0], [48.6, 26790.0], [48.7, 26790.0], [48.8, 26868.0], [48.9, 26882.0], [49.0, 26959.0], [49.1, 26959.0], [49.2, 26984.0], [49.3, 27009.0], [49.4, 27022.0], [49.5, 27022.0], [49.6, 27031.0], [49.7, 27099.0], [49.8, 27142.0], [49.9, 27142.0], [50.0, 27199.0], [50.1, 27209.0], [50.2, 27209.0], [50.3, 27225.0], [50.4, 27265.0], [50.5, 27276.0], [50.6, 27276.0], [50.7, 27289.0], [50.8, 27312.0], [50.9, 27325.0], [51.0, 27325.0], [51.1, 27341.0], [51.2, 27362.0], [51.3, 27570.0], [51.4, 27570.0], [51.5, 27572.0], [51.6, 27574.0], [51.7, 27574.0], [51.8, 27589.0], [51.9, 27605.0], [52.0, 27624.0], [52.1, 27624.0], [52.2, 27645.0], [52.3, 27645.0], [52.4, 27654.0], [52.5, 27654.0], [52.6, 27659.0], [52.7, 27662.0], [52.8, 27666.0], [52.9, 27666.0], [53.0, 27674.0], [53.1, 27684.0], [53.2, 27705.0], [53.3, 27705.0], [53.4, 27835.0], [53.5, 27861.0], [53.6, 27861.0], [53.7, 27863.0], [53.8, 27890.0], [53.9, 27960.0], [54.0, 27960.0], [54.1, 27970.0], [54.2, 28020.0], [54.3, 28033.0], [54.4, 28033.0], [54.5, 28036.0], [54.6, 28054.0], [54.7, 28055.0], [54.8, 28055.0], [54.9, 28061.0], [55.0, 28068.0], [55.1, 28068.0], [55.2, 28070.0], [55.3, 28094.0], [55.4, 28130.0], [55.5, 28130.0], [55.6, 28179.0], [55.7, 28205.0], [55.8, 28224.0], [55.9, 28224.0], [56.0, 28234.0], [56.1, 28240.0], [56.2, 28269.0], [56.3, 28269.0], [56.4, 28296.0], [56.5, 28306.0], [56.6, 28307.0], [56.7, 28307.0], [56.8, 28311.0], [56.9, 28315.0], [57.0, 28315.0], [57.1, 28317.0], [57.2, 28320.0], [57.3, 28351.0], [57.4, 28351.0], [57.5, 28373.0], [57.6, 28378.0], [57.7, 28380.0], [57.8, 28380.0], [57.9, 28427.0], [58.0, 28435.0], [58.1, 28445.0], [58.2, 28445.0], [58.3, 28446.0], [58.4, 28466.0], [58.5, 28466.0], [58.6, 28476.0], [58.7, 28486.0], [58.8, 28488.0], [58.9, 28488.0], [59.0, 28494.0], [59.1, 28495.0], [59.2, 28498.0], [59.3, 28498.0], [59.4, 28528.0], [59.5, 28565.0], [59.6, 28596.0], [59.7, 28596.0], [59.8, 28620.0], [59.9, 28639.0], [60.0, 28657.0], [60.1, 28657.0], [60.2, 28688.0], [60.3, 28717.0], [60.4, 28717.0], [60.5, 28741.0], [60.6, 28750.0], [60.7, 28772.0], [60.8, 28772.0], [60.9, 28810.0], [61.0, 28817.0], [61.1, 28837.0], [61.2, 28837.0], [61.3, 28846.0], [61.4, 28854.0], [61.5, 28855.0], [61.6, 28855.0], [61.7, 28859.0], [61.8, 28874.0], [61.9, 28874.0], [62.0, 28880.0], [62.1, 28881.0], [62.2, 28884.0], [62.3, 28884.0], [62.4, 28891.0], [62.5, 28900.0], [62.6, 28900.0], [62.7, 28900.0], [62.8, 28916.0], [62.9, 28917.0], [63.0, 28917.0], [63.1, 28917.0], [63.2, 28920.0], [63.3, 28932.0], [63.4, 28932.0], [63.5, 28942.0], [63.6, 28945.0], [63.7, 28951.0], [63.8, 28951.0], [63.9, 28954.0], [64.0, 28961.0], [64.1, 28965.0], [64.2, 28965.0], [64.3, 28966.0], [64.4, 28968.0], [64.5, 28982.0], [64.6, 28982.0], [64.7, 28987.0], [64.8, 28987.0], [64.9, 29000.0], [65.0, 29000.0], [65.1, 29001.0], [65.2, 29005.0], [65.3, 29005.0], [65.4, 29006.0], [65.5, 29010.0], [65.6, 29022.0], [65.7, 29022.0], [65.8, 29032.0], [65.9, 29048.0], [66.0, 29048.0], [66.1, 29048.0], [66.2, 29052.0], [66.3, 29057.0], [66.4, 29058.0], [66.5, 29058.0], [66.6, 29062.0], [66.7, 29068.0], [66.8, 29068.0], [66.9, 29072.0], [67.0, 29083.0], [67.1, 29090.0], [67.2, 29090.0], [67.3, 29103.0], [67.4, 29103.0], [67.5, 29117.0], [67.6, 29117.0], [67.7, 29119.0], [67.8, 29123.0], [67.9, 29127.0], [68.0, 29127.0], [68.1, 29128.0], [68.2, 29130.0], [68.3, 29132.0], [68.4, 29132.0], [68.5, 29133.0], [68.6, 29134.0], [68.7, 29134.0], [68.8, 29138.0], [68.9, 29143.0], [69.0, 29143.0], [69.1, 29143.0], [69.2, 29148.0], [69.3, 29159.0], [69.4, 29159.0], [69.5, 29159.0], [69.6, 29160.0], [69.7, 29161.0], [69.8, 29163.0], [69.9, 29163.0], [70.0, 29167.0], [70.1, 29172.0], [70.2, 29172.0], [70.3, 29174.0], [70.4, 29175.0], [70.5, 29178.0], [70.6, 29178.0], [70.7, 29180.0], [70.8, 29187.0], [70.9, 29187.0], [71.0, 29187.0], [71.1, 29190.0], [71.2, 29195.0], [71.3, 29199.0], [71.4, 29199.0], [71.5, 29201.0], [71.6, 29207.0], [71.7, 29207.0], [71.8, 29211.0], [71.9, 29216.0], [72.0, 29217.0], [72.1, 29217.0], [72.2, 29219.0], [72.3, 29219.0], [72.4, 29220.0], [72.5, 29220.0], [72.6, 29222.0], [72.7, 29229.0], [72.8, 29232.0], [72.9, 29232.0], [73.0, 29233.0], [73.1, 29240.0], [73.2, 29243.0], [73.3, 29243.0], [73.4, 29245.0], [73.5, 29257.0], [73.6, 29257.0], [73.7, 29257.0], [73.8, 29259.0], [73.9, 29260.0], [74.0, 29260.0], [74.1, 29262.0], [74.2, 29275.0], [74.3, 29276.0], [74.4, 29276.0], [74.5, 29277.0], [74.6, 29277.0], [74.7, 29278.0], [74.8, 29278.0], [74.9, 29284.0], [75.0, 29296.0], [75.1, 29296.0], [75.2, 29298.0], [75.3, 29298.0], [75.4, 29299.0], [75.5, 29299.0], [75.6, 29307.0], [75.7, 29308.0], [75.8, 29311.0], [75.9, 29311.0], [76.0, 29326.0], [76.1, 29327.0], [76.2, 29330.0], [76.3, 29330.0], [76.4, 29349.0], [76.5, 29351.0], [76.6, 29357.0], [76.7, 29357.0], [76.8, 29359.0], [76.9, 29360.0], [77.0, 29360.0], [77.1, 29361.0], [77.2, 29375.0], [77.3, 29375.0], [77.4, 29375.0], [77.5, 29386.0], [77.6, 29390.0], [77.7, 29401.0], [77.8, 29401.0], [77.9, 29407.0], [78.0, 29410.0], [78.1, 29411.0], [78.2, 29411.0], [78.3, 29412.0], [78.4, 29414.0], [78.5, 29414.0], [78.6, 29430.0], [78.7, 29434.0], [78.8, 29435.0], [78.9, 29435.0], [79.0, 29448.0], [79.1, 29452.0], [79.2, 29466.0], [79.3, 29466.0], [79.4, 29469.0], [79.5, 29469.0], [79.6, 29470.0], [79.7, 29470.0], [79.8, 29480.0], [79.9, 29483.0], [80.0, 29484.0], [80.1, 29484.0], [80.2, 29488.0], [80.3, 29495.0], [80.4, 29495.0], [80.5, 29498.0], [80.6, 29509.0], [80.7, 29518.0], [80.8, 29518.0], [80.9, 29526.0], [81.0, 29529.0], [81.1, 29539.0], [81.2, 29539.0], [81.3, 29546.0], [81.4, 29552.0], [81.5, 29554.0], [81.6, 29554.0], [81.7, 29556.0], [81.8, 29557.0], [81.9, 29557.0], [82.0, 29562.0], [82.1, 29564.0], [82.2, 29568.0], [82.3, 29568.0], [82.4, 29570.0], [82.5, 29570.0], [82.6, 29571.0], [82.7, 29571.0], [82.8, 29577.0], [82.9, 29577.0], [83.0, 29590.0], [83.1, 29590.0], [83.2, 29593.0], [83.3, 29597.0], [83.4, 29597.0], [83.5, 29602.0], [83.6, 29604.0], [83.7, 29606.0], [83.8, 29606.0], [83.9, 29610.0], [84.0, 29623.0], [84.1, 29632.0], [84.2, 29632.0], [84.3, 29657.0], [84.4, 29660.0], [84.5, 29663.0], [84.6, 29663.0], [84.7, 29667.0], [84.8, 29669.0], [84.9, 29677.0], [85.0, 29677.0], [85.1, 29685.0], [85.2, 29690.0], [85.3, 29690.0], [85.4, 29692.0], [85.5, 29694.0], [85.6, 29696.0], [85.7, 29696.0], [85.8, 29703.0], [85.9, 29704.0], [86.0, 29712.0], [86.1, 29712.0], [86.2, 29722.0], [86.3, 29724.0], [86.4, 29726.0], [86.5, 29726.0], [86.6, 29729.0], [86.7, 29733.0], [86.8, 29733.0], [86.9, 29735.0], [87.0, 29743.0], [87.1, 29755.0], [87.2, 29755.0], [87.3, 29771.0], [87.4, 29788.0], [87.5, 29799.0], [87.6, 29799.0], [87.7, 29817.0], [87.8, 29819.0], [87.9, 29840.0], [88.0, 29840.0], [88.1, 29842.0], [88.2, 29853.0], [88.3, 29861.0], [88.4, 29861.0], [88.5, 29866.0], [88.6, 29870.0], [88.7, 29870.0], [88.8, 29873.0], [88.9, 29876.0], [89.0, 29879.0], [89.1, 29879.0], [89.2, 29882.0], [89.3, 29893.0], [89.4, 29907.0], [89.5, 29907.0], [89.6, 29908.0], [89.7, 29912.0], [89.8, 29918.0], [89.9, 29918.0], [90.0, 29918.0], [90.1, 29920.0], [90.2, 29920.0], [90.3, 29939.0], [90.4, 29941.0], [90.5, 29994.0], [90.6, 29994.0], [90.7, 30011.0], [90.8, 30020.0], [90.9, 30035.0], [91.0, 30035.0], [91.1, 30081.0], [91.2, 30090.0], [91.3, 30111.0], [91.4, 30111.0], [91.5, 30146.0], [91.6, 30159.0], [91.7, 30159.0], [91.8, 30254.0], [91.9, 30272.0], [92.0, 30281.0], [92.1, 30281.0], [92.2, 30376.0], [92.3, 30502.0], [92.4, 30537.0], [92.5, 30537.0], [92.6, 30543.0], [92.7, 30548.0], [92.8, 30551.0], [92.9, 30551.0], [93.0, 30594.0], [93.1, 30637.0], [93.2, 30652.0], [93.3, 30652.0], [93.4, 30789.0], [93.5, 30872.0], [93.6, 30872.0], [93.7, 30952.0], [93.8, 31044.0], [93.9, 31301.0], [94.0, 31301.0], [94.1, 31647.0], [94.2, 31663.0], [94.3, 31715.0], [94.4, 31715.0], [94.5, 31751.0], [94.6, 31766.0], [94.7, 31774.0], [94.8, 31774.0], [94.9, 31782.0], [95.0, 32057.0], [95.1, 32057.0], [95.2, 32205.0], [95.3, 32229.0], [95.4, 32425.0], [95.5, 32425.0], [95.6, 32595.0], [95.7, 32783.0], [95.8, 33272.0], [95.9, 33272.0], [96.0, 33481.0], [96.1, 33534.0], [96.2, 33618.0], [96.3, 33618.0], [96.4, 33936.0], [96.5, 33970.0], [96.6, 34785.0], [96.7, 34785.0], [96.8, 35131.0], [96.9, 35176.0], [97.0, 35176.0], [97.1, 35995.0], [97.2, 36504.0], [97.3, 36659.0], [97.4, 36659.0], [97.5, 36660.0], [97.6, 37855.0], [97.7, 38296.0], [97.8, 38296.0], [97.9, 38341.0], [98.0, 39072.0], [98.1, 39399.0], [98.2, 39399.0], [98.3, 40897.0], [98.4, 41303.0], [98.5, 41303.0], [98.6, 41959.0], [98.7, 42131.0], [98.8, 42492.0], [98.9, 42492.0], [99.0, 43021.0], [99.1, 43654.0], [99.2, 43663.0], [99.3, 43663.0], [99.4, 43960.0], [99.5, 44291.0], [99.6, 44952.0], [99.7, 44952.0], [99.8, 45004.0], [99.9, 45280.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 31.0, "series": [{"data": [[33900.0, 2.0], [33500.0, 1.0], [34700.0, 1.0], [35100.0, 2.0], [35900.0, 1.0], [36500.0, 1.0], [38300.0, 1.0], [39300.0, 1.0], [41900.0, 1.0], [42100.0, 1.0], [41300.0, 1.0], [43900.0, 1.0], [44900.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11100.0, 1.0], [13600.0, 1.0], [16200.0, 1.0], [17300.0, 3.0], [17400.0, 9.0], [17200.0, 2.0], [17100.0, 1.0], [16700.0, 3.0], [16800.0, 1.0], [18300.0, 1.0], [17500.0, 4.0], [18100.0, 6.0], [17800.0, 8.0], [17900.0, 3.0], [18200.0, 3.0], [17600.0, 4.0], [17700.0, 1.0], [18000.0, 7.0], [18400.0, 4.0], [18600.0, 1.0], [18500.0, 3.0], [18900.0, 2.0], [18700.0, 3.0], [19200.0, 4.0], [18800.0, 3.0], [19100.0, 1.0], [19400.0, 2.0], [19300.0, 2.0], [20300.0, 6.0], [20000.0, 2.0], [19500.0, 4.0], [19900.0, 7.0], [19800.0, 7.0], [19600.0, 2.0], [19700.0, 3.0], [20400.0, 1.0], [21000.0, 2.0], [20600.0, 2.0], [21300.0, 4.0], [21500.0, 1.0], [20900.0, 1.0], [20800.0, 2.0], [20500.0, 1.0], [21700.0, 3.0], [21800.0, 2.0], [21900.0, 2.0], [22300.0, 5.0], [22400.0, 5.0], [22200.0, 6.0], [22000.0, 8.0], [22100.0, 1.0], [22500.0, 4.0], [21600.0, 3.0], [23400.0, 1.0], [23500.0, 8.0], [22800.0, 1.0], [22900.0, 3.0], [23000.0, 3.0], [23200.0, 4.0], [22600.0, 4.0], [23300.0, 4.0], [23100.0, 2.0], [24400.0, 5.0], [23800.0, 9.0], [23700.0, 4.0], [24200.0, 6.0], [24300.0, 7.0], [24100.0, 6.0], [24000.0, 9.0], [23600.0, 5.0], [23900.0, 8.0], [24500.0, 1.0], [24800.0, 3.0], [24900.0, 8.0], [25500.0, 2.0], [25000.0, 5.0], [24700.0, 5.0], [25100.0, 3.0], [24600.0, 5.0], [25200.0, 4.0], [25400.0, 2.0], [25700.0, 9.0], [25900.0, 11.0], [26400.0, 3.0], [25800.0, 7.0], [26600.0, 3.0], [26000.0, 9.0], [26300.0, 2.0], [26200.0, 1.0], [25600.0, 3.0], [26500.0, 3.0], [26100.0, 4.0], [27600.0, 10.0], [26700.0, 5.0], [27300.0, 4.0], [26900.0, 2.0], [27500.0, 4.0], [26800.0, 2.0], [27000.0, 4.0], [27200.0, 5.0], [27100.0, 2.0], [28200.0, 6.0], [28300.0, 10.0], [27800.0, 4.0], [28100.0, 2.0], [28500.0, 3.0], [27900.0, 2.0], [28400.0, 11.0], [28600.0, 4.0], [28000.0, 9.0], [27700.0, 1.0], [29500.0, 21.0], [29100.0, 31.0], [28800.0, 12.0], [28900.0, 18.0], [29000.0, 17.0], [29200.0, 30.0], [29300.0, 16.0], [29400.0, 21.0], [29600.0, 17.0], [28700.0, 4.0], [29700.0, 14.0], [30100.0, 3.0], [30500.0, 6.0], [30300.0, 1.0], [30600.0, 2.0], [30700.0, 1.0], [30200.0, 3.0], [30000.0, 5.0], [29900.0, 9.0], [29800.0, 13.0], [30900.0, 1.0], [31300.0, 1.0], [31700.0, 5.0], [31600.0, 2.0], [31000.0, 1.0], [30800.0, 1.0], [32700.0, 1.0], [32000.0, 1.0], [32200.0, 2.0], [32400.0, 1.0], [32500.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [33400.0, 1.0], [36600.0, 2.0], [38200.0, 1.0], [37800.0, 1.0], [40800.0, 1.0], [39000.0, 1.0], [42400.0, 1.0], [43000.0, 1.0], [43600.0, 2.0], [44200.0, 1.0], [45000.0, 1.0], [45200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60403868E12, "maxY": 10.0, "series": [{"data": [[1.60403892E12, 10.0], [1.60403952E12, 10.0], [1.60404054E12, 10.0], [1.60403922E12, 10.0], [1.60403964E12, 10.0], [1.60403934E12, 10.0], [1.60404024E12, 10.0], [1.60403994E12, 10.0], [1.6040394E12, 10.0], [1.6040391E12, 10.0], [1.60404E12, 10.0], [1.6040397E12, 10.0], [1.60404012E12, 10.0], [1.60404042E12, 10.0], [1.60403982E12, 10.0], [1.6040388E12, 10.0], [1.60403988E12, 10.0], [1.60403958E12, 10.0], [1.60404048E12, 10.0], [1.60404018E12, 10.0], [1.60403868E12, 10.0], [1.60403928E12, 10.0], [1.6040403E12, 10.0], [1.60403898E12, 10.0], [1.6040406E12, 9.275862068965518], [1.60404066E12, 2.0], [1.60404006E12, 10.0], [1.60403904E12, 10.0], [1.60403874E12, 10.0], [1.60404036E12, 10.0], [1.60403916E12, 10.0], [1.60403886E12, 10.0], [1.60403976E12, 10.0], [1.60403946E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404066E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17321.0, "minX": 1.0, "maxY": 26271.234159779615, "series": [{"data": [[8.0, 17339.0], [4.0, 17488.0], [2.0, 17639.0], [1.0, 18134.0], [9.0, 17321.0], [10.0, 26271.234159779615], [5.0, 17409.0], [6.0, 17448.0], [3.0, 17604.0], [7.0, 17495.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26164.344217687074]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.633333333333333, "minX": 1.60403868E12, "maxY": 210260.0, "series": [{"data": [[1.60403892E12, 68142.15], [1.60403952E12, 162990.26666666666], [1.60404054E12, 154405.81666666668], [1.60403922E12, 59399.51666666667], [1.60403964E12, 210260.0], [1.60403934E12, 45868.76666666667], [1.60404024E12, 45286.38333333333], [1.60403994E12, 34796.416666666664], [1.6040394E12, 34163.73333333333], [1.6040391E12, 45941.433333333334], [1.60404E12, 49307.78333333333], [1.6040397E12, 89431.06666666667], [1.60404012E12, 53498.35], [1.60404042E12, 29141.733333333334], [1.60403982E12, 51979.45], [1.6040388E12, 66859.66666666667], [1.60403988E12, 61669.73333333333], [1.60403958E12, 75411.08333333333], [1.60404048E12, 50965.083333333336], [1.60404018E12, 45951.03333333333], [1.60403868E12, 30397.35], [1.60403928E12, 40756.05], [1.6040403E12, 47071.8], [1.60403898E12, 49708.85], [1.6040406E12, 55564.63333333333], [1.60404066E12, 1177.1833333333334], [1.60404006E12, 51649.36666666667], [1.60403904E12, 51767.3], [1.60403874E12, 207197.23333333334], [1.60404036E12, 37248.416666666664], [1.60403916E12, 46279.083333333336], [1.60403886E12, 140670.35], [1.60403976E12, 87668.48333333334], [1.60403946E12, 40863.78333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60403892E12, 160.73333333333332], [1.60403952E12, 203.9], [1.60404054E12, 153.13333333333333], [1.60403922E12, 153.76666666666668], [1.60403964E12, 194.08333333333334], [1.60403934E12, 153.3], [1.60404024E12, 153.4], [1.60403994E12, 131.45], [1.6040394E12, 160.68333333333334], [1.6040391E12, 146.13333333333333], [1.60404E12, 153.46666666666667], [1.6040397E12, 207.6], [1.60404012E12, 154.06666666666666], [1.60404042E12, 189.71666666666667], [1.60403982E12, 176.58333333333334], [1.6040388E12, 215.11666666666667], [1.60403988E12, 154.65], [1.60403958E12, 156.01666666666668], [1.60404048E12, 187.51666666666668], [1.60404018E12, 146.45], [1.60403868E12, 14.633333333333333], [1.60403928E12, 146.01666666666668], [1.6040403E12, 146.03333333333333], [1.60403898E12, 169.3], [1.6040406E12, 202.68333333333334], [1.60404066E12, 19.616666666666667], [1.60404006E12, 153.45], [1.60403904E12, 153.43333333333334], [1.60403874E12, 176.53333333333333], [1.60404036E12, 167.78333333333333], [1.60403916E12, 146.1], [1.60403886E12, 113.46666666666667], [1.60403976E12, 179.61666666666667], [1.60403946E12, 198.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404066E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4623.0, "minX": 1.60403868E12, "maxY": 35390.61111111111, "series": [{"data": [[1.60403892E12, 32114.681818181823], [1.60403952E12, 19862.965517241377], [1.60404054E12, 25257.904761904763], [1.60403922E12, 29495.04761904762], [1.60403964E12, 23684.44444444444], [1.60403934E12, 29777.04761904762], [1.60404024E12, 29044.714285714286], [1.60403994E12, 35390.61111111111], [1.6040394E12, 27795.045454545452], [1.6040391E12, 29890.450000000004], [1.60404E12, 29224.571428571428], [1.6040397E12, 22097.551724137928], [1.60404012E12, 29200.76190476191], [1.60404042E12, 24417.5], [1.60403982E12, 25429.583333333332], [1.6040388E12, 19798.266666666674], [1.60403988E12, 24811.190476190477], [1.60403958E12, 24701.772727272728], [1.60404048E12, 23040.5], [1.60404018E12, 28144.5], [1.60403868E12, 4623.0], [1.60403928E12, 28876.05], [1.6040403E12, 29624.25], [1.60403898E12, 25393.739130434777], [1.6040406E12, 23845.758620689656], [1.60404066E12, 17792.333333333332], [1.60404006E12, 29059.619047619046], [1.60403904E12, 28087.714285714283], [1.60403874E12, 23101.708333333332], [1.60404036E12, 26824.086956521736], [1.60403916E12, 29516.6], [1.60403886E12, 31887.333333333332], [1.60403976E12, 22260.199999999997], [1.60403946E12, 23675.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404066E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4616.0, "minX": 1.60403868E12, "maxY": 35389.722222222226, "series": [{"data": [[1.60403892E12, 32112.863636363632], [1.60403952E12, 19858.724137931036], [1.60404054E12, 25253.571428571428], [1.60403922E12, 29493.761904761897], [1.60403964E12, 23679.851851851854], [1.60403934E12, 29775.85714285714], [1.60404024E12, 29043.476190476194], [1.60403994E12, 35389.722222222226], [1.6040394E12, 27794.227272727272], [1.6040391E12, 29889.350000000002], [1.60404E12, 29223.333333333336], [1.6040397E12, 22095.72413793103], [1.60404012E12, 29199.476190476194], [1.60404042E12, 24417.153846153848], [1.60403982E12, 25428.624999999996], [1.6040388E12, 19796.866666666672], [1.60403988E12, 24809.57142857143], [1.60403958E12, 24698.909090909092], [1.60404048E12, 23038.923076923074], [1.60404018E12, 28143.300000000003], [1.60403868E12, 4616.0], [1.60403928E12, 28875.0], [1.6040403E12, 29622.85], [1.60403898E12, 25392.739130434777], [1.6040406E12, 23843.62068965517], [1.60404066E12, 17789.666666666668], [1.60404006E12, 29058.571428571428], [1.60403904E12, 28086.333333333332], [1.60403874E12, 23098.20833333333], [1.60404036E12, 26823.4347826087], [1.60403916E12, 29515.099999999995], [1.60403886E12, 31882.533333333333], [1.60403976E12, 22257.800000000003], [1.60403946E12, 23674.222222222223]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404066E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60403868E12, "maxY": 34.0, "series": [{"data": [[1.60403892E12, 0.7272727272727272], [1.60403952E12, 0.41379310344827597], [1.60404054E12, 0.33333333333333337], [1.60403922E12, 0.47619047619047616], [1.60403964E12, 0.37037037037037035], [1.60403934E12, 0.2857142857142857], [1.60404024E12, 0.5238095238095238], [1.60403994E12, 0.3888888888888889], [1.6040394E12, 0.2727272727272727], [1.6040391E12, 0.7999999999999999], [1.60404E12, 0.3809523809523809], [1.6040397E12, 0.3793103448275862], [1.60404012E12, 0.5714285714285714], [1.60404042E12, 0.5], [1.60403982E12, 0.45833333333333337], [1.6040388E12, 0.5666666666666667], [1.60403988E12, 0.6666666666666665], [1.60403958E12, 0.45454545454545453], [1.60404048E12, 0.5384615384615385], [1.60404018E12, 0.25], [1.60403868E12, 34.0], [1.60403928E12, 0.6999999999999998], [1.6040403E12, 0.7000000000000001], [1.60403898E12, 0.2608695652173913], [1.6040406E12, 0.5862068965517241], [1.60404066E12, 0.0], [1.60404006E12, 0.5714285714285714], [1.60403904E12, 0.5238095238095238], [1.60403874E12, 0.6666666666666665], [1.60404036E12, 0.2173913043478261], [1.60403916E12, 0.19999999999999998], [1.60403886E12, 0.6666666666666667], [1.60403976E12, 0.08000000000000002], [1.60403946E12, 0.4444444444444444]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404066E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3129.0, "minX": 1.60403868E12, "maxY": 45280.0, "series": [{"data": [[1.60403892E12, 45280.0], [1.60403952E12, 22657.0], [1.60404054E12, 29819.0], [1.60403922E12, 30081.0], [1.60403964E12, 26110.0], [1.60403934E12, 29941.0], [1.60404024E12, 29577.0], [1.60403994E12, 43654.0], [1.6040394E12, 29448.0], [1.6040391E12, 30652.0], [1.60404E12, 29546.0], [1.6040397E12, 28837.0], [1.60404012E12, 29696.0], [1.60404042E12, 28657.0], [1.60403982E12, 29058.0], [1.6040388E12, 23421.0], [1.60403988E12, 31647.0], [1.60403958E12, 31782.0], [1.60404048E12, 27225.0], [1.60404018E12, 29298.0], [1.60403868E12, 6117.0], [1.60403928E12, 29743.0], [1.6040403E12, 30020.0], [1.60403898E12, 30594.0], [1.6040406E12, 37855.0], [1.60404066E12, 18134.0], [1.60404006E12, 29498.0], [1.60403904E12, 29660.0], [1.60403874E12, 27624.0], [1.60404036E12, 29518.0], [1.60403916E12, 29912.0], [1.60403886E12, 44291.0], [1.60403976E12, 32229.0], [1.60403946E12, 26730.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60403892E12, 24803.0], [1.60403952E12, 17527.0], [1.60404054E12, 18944.0], [1.60403922E12, 28565.0], [1.60403964E12, 19694.0], [1.60403934E12, 29470.0], [1.60404024E12, 28741.0], [1.60403994E12, 26005.0], [1.6040394E12, 25641.0], [1.6040391E12, 29119.0], [1.60404E12, 28427.0], [1.6040397E12, 18063.0], [1.60404012E12, 27574.0], [1.60404042E12, 20841.0], [1.60403982E12, 22647.0], [1.6040388E12, 17374.0], [1.60403988E12, 22371.0], [1.60403958E12, 18049.0], [1.60404048E12, 19373.0], [1.60404018E12, 27589.0], [1.60403868E12, 3129.0], [1.60403928E12, 28234.0], [1.6040403E12, 28987.0], [1.60403898E12, 22964.0], [1.6040406E12, 16713.0], [1.60404066E12, 17604.0], [1.60404006E12, 28854.0], [1.60403904E12, 24921.0], [1.60403874E12, 8319.0], [1.60404036E12, 23540.0], [1.60403916E12, 29032.0], [1.60403886E12, 23597.0], [1.60403976E12, 17284.0], [1.60403946E12, 17769.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60403892E12, 24803.0], [1.60403952E12, 17527.0], [1.60404054E12, 18944.0], [1.60403922E12, 28565.0], [1.60403964E12, 19694.0], [1.60403934E12, 29470.0], [1.60404024E12, 28741.0], [1.60403994E12, 26005.0], [1.6040394E12, 25641.0], [1.6040391E12, 29119.0], [1.60404E12, 28427.0], [1.6040397E12, 18063.0], [1.60404012E12, 27574.0], [1.60404042E12, 20841.0], [1.60403982E12, 22647.0], [1.6040388E12, 17374.0], [1.60403988E12, 22371.0], [1.60403958E12, 18049.0], [1.60404048E12, 19373.0], [1.60404018E12, 27589.0], [1.60403868E12, 3129.0], [1.60403928E12, 28234.0], [1.6040403E12, 28987.0], [1.60403898E12, 22964.0], [1.6040406E12, 16713.0], [1.60404066E12, 17604.0], [1.60404006E12, 28854.0], [1.60403904E12, 24921.0], [1.60403874E12, 8319.0], [1.60404036E12, 23540.0], [1.60403916E12, 29032.0], [1.60403886E12, 23597.0], [1.60403976E12, 17284.0], [1.60403946E12, 17769.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60403892E12, 24803.0], [1.60403952E12, 17527.0], [1.60404054E12, 18944.0], [1.60403922E12, 28565.0], [1.60403964E12, 19694.0], [1.60403934E12, 29470.0], [1.60404024E12, 28741.0], [1.60403994E12, 26005.0], [1.6040394E12, 25641.0], [1.6040391E12, 29119.0], [1.60404E12, 28427.0], [1.6040397E12, 18063.0], [1.60404012E12, 27574.0], [1.60404042E12, 20841.0], [1.60403982E12, 22647.0], [1.6040388E12, 17374.0], [1.60403988E12, 22371.0], [1.60403958E12, 18049.0], [1.60404048E12, 19373.0], [1.60404018E12, 27589.0], [1.60403868E12, 3129.0], [1.60403928E12, 28234.0], [1.6040403E12, 28987.0], [1.60403898E12, 22964.0], [1.6040406E12, 16713.0], [1.60404066E12, 17604.0], [1.60404006E12, 28854.0], [1.60403904E12, 24921.0], [1.60403874E12, 8319.0], [1.60404036E12, 23540.0], [1.60403916E12, 29032.0], [1.60403886E12, 23597.0], [1.60403976E12, 17284.0], [1.60403946E12, 17769.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60403892E12, 24803.0], [1.60403952E12, 17527.0], [1.60404054E12, 18944.0], [1.60403922E12, 28565.0], [1.60403964E12, 19694.0], [1.60403934E12, 29470.0], [1.60404024E12, 28741.0], [1.60403994E12, 26005.0], [1.6040394E12, 25641.0], [1.6040391E12, 29119.0], [1.60404E12, 28427.0], [1.6040397E12, 18063.0], [1.60404012E12, 27574.0], [1.60404042E12, 20841.0], [1.60403982E12, 22647.0], [1.6040388E12, 17374.0], [1.60403988E12, 22371.0], [1.60403958E12, 18049.0], [1.60404048E12, 19373.0], [1.60404018E12, 27589.0], [1.60403868E12, 3129.0], [1.60403928E12, 28234.0], [1.6040403E12, 28987.0], [1.60403898E12, 22964.0], [1.6040406E12, 16713.0], [1.60404066E12, 17604.0], [1.60404006E12, 28854.0], [1.60403904E12, 24921.0], [1.60403874E12, 8319.0], [1.60404036E12, 23540.0], [1.60403916E12, 29032.0], [1.60403886E12, 23597.0], [1.60403976E12, 17284.0], [1.60403946E12, 17769.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60403892E12, 30706.0], [1.60403952E12, 19595.0], [1.60404054E12, 28269.0], [1.60403922E12, 29469.0], [1.60403964E12, 24009.0], [1.60403934E12, 29788.0], [1.60404024E12, 28982.0], [1.60403994E12, 35585.5], [1.6040394E12, 27939.5], [1.6040391E12, 30078.5], [1.60404E12, 29276.0], [1.6040397E12, 19840.0], [1.60404012E12, 29257.0], [1.60404042E12, 24138.0], [1.60403982E12, 24979.0], [1.6040388E12, 20020.0], [1.60403988E12, 24078.0], [1.60403958E12, 23979.5], [1.60404048E12, 22349.5], [1.60404018E12, 28081.0], [1.60403868E12, 4623.0], [1.60403928E12, 28970.5], [1.6040403E12, 29643.0], [1.60403898E12, 24693.0], [1.6040406E12, 19961.0], [1.60404066E12, 17639.0], [1.60404006E12, 29048.0], [1.60403904E12, 29005.0], [1.60403874E12, 25743.5], [1.60404036E12, 26016.0], [1.60403916E12, 29531.5], [1.60403886E12, 26984.0], [1.60403976E12, 18211.0], [1.60403946E12, 24311.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404066E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27199.0, "minX": 1.0, "maxY": 27199.0, "series": [{"data": [[1.0, 27199.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27198.0, "minX": 1.0, "maxY": 27198.0, "series": [{"data": [[1.0, 27198.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60403868E12, "maxY": 0.5, "series": [{"data": [[1.60403892E12, 0.36666666666666664], [1.60403952E12, 0.48333333333333334], [1.60404054E12, 0.35], [1.60403922E12, 0.35], [1.60403964E12, 0.45], [1.60403934E12, 0.35], [1.60404024E12, 0.35], [1.60403994E12, 0.3], [1.6040394E12, 0.36666666666666664], [1.6040391E12, 0.3333333333333333], [1.60404E12, 0.35], [1.6040397E12, 0.48333333333333334], [1.60404012E12, 0.35], [1.60404042E12, 0.43333333333333335], [1.60403982E12, 0.4], [1.6040388E12, 0.5], [1.60403988E12, 0.35], [1.60403958E12, 0.36666666666666664], [1.60404048E12, 0.43333333333333335], [1.60404018E12, 0.3333333333333333], [1.60403868E12, 0.2], [1.60403928E12, 0.3333333333333333], [1.6040403E12, 0.3333333333333333], [1.60403898E12, 0.38333333333333336], [1.6040406E12, 0.36666666666666664], [1.60404006E12, 0.35], [1.60403904E12, 0.35], [1.60403874E12, 0.4], [1.60404036E12, 0.38333333333333336], [1.60403916E12, 0.3333333333333333], [1.60403886E12, 0.25], [1.60403976E12, 0.4166666666666667], [1.60403946E12, 0.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040406E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60403868E12, "maxY": 0.5, "series": [{"data": [[1.60403892E12, 0.36666666666666664], [1.60403952E12, 0.48333333333333334], [1.60404054E12, 0.35], [1.60403922E12, 0.35], [1.60403964E12, 0.45], [1.60403934E12, 0.35], [1.60404024E12, 0.35], [1.60403994E12, 0.3], [1.6040394E12, 0.36666666666666664], [1.6040391E12, 0.3333333333333333], [1.60404E12, 0.35], [1.6040397E12, 0.48333333333333334], [1.60404012E12, 0.35], [1.60404042E12, 0.43333333333333335], [1.60403982E12, 0.4], [1.6040388E12, 0.5], [1.60403988E12, 0.35], [1.60403958E12, 0.36666666666666664], [1.60404048E12, 0.43333333333333335], [1.60404018E12, 0.3333333333333333], [1.60403868E12, 0.03333333333333333], [1.60403928E12, 0.3333333333333333], [1.6040403E12, 0.3333333333333333], [1.60403898E12, 0.38333333333333336], [1.6040406E12, 0.48333333333333334], [1.60404066E12, 0.05], [1.60404006E12, 0.35], [1.60403904E12, 0.35], [1.60403874E12, 0.4], [1.60404036E12, 0.38333333333333336], [1.60403916E12, 0.3333333333333333], [1.60403886E12, 0.25], [1.60403976E12, 0.4166666666666667], [1.60403946E12, 0.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404066E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60403868E12, "maxY": 0.5, "series": [{"data": [[1.60403892E12, 0.36666666666666664], [1.60403952E12, 0.48333333333333334], [1.60404054E12, 0.35], [1.60403922E12, 0.35], [1.60403964E12, 0.45], [1.60403934E12, 0.35], [1.60404024E12, 0.35], [1.60403994E12, 0.3], [1.6040394E12, 0.36666666666666664], [1.6040391E12, 0.3333333333333333], [1.60404E12, 0.35], [1.6040397E12, 0.48333333333333334], [1.60404012E12, 0.35], [1.60404042E12, 0.43333333333333335], [1.60403982E12, 0.4], [1.6040388E12, 0.5], [1.60403988E12, 0.35], [1.60403958E12, 0.36666666666666664], [1.60404048E12, 0.43333333333333335], [1.60404018E12, 0.3333333333333333], [1.60403868E12, 0.03333333333333333], [1.60403928E12, 0.3333333333333333], [1.6040403E12, 0.3333333333333333], [1.60403898E12, 0.38333333333333336], [1.6040406E12, 0.48333333333333334], [1.60404066E12, 0.05], [1.60404006E12, 0.35], [1.60403904E12, 0.35], [1.60403874E12, 0.4], [1.60404036E12, 0.38333333333333336], [1.60403916E12, 0.3333333333333333], [1.60403886E12, 0.25], [1.60403976E12, 0.4166666666666667], [1.60403946E12, 0.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404066E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60403868E12, "maxY": 0.5, "series": [{"data": [[1.60403892E12, 0.36666666666666664], [1.60403952E12, 0.48333333333333334], [1.60404054E12, 0.35], [1.60403922E12, 0.35], [1.60403964E12, 0.45], [1.60403934E12, 0.35], [1.60404024E12, 0.35], [1.60403994E12, 0.3], [1.6040394E12, 0.36666666666666664], [1.6040391E12, 0.3333333333333333], [1.60404E12, 0.35], [1.6040397E12, 0.48333333333333334], [1.60404012E12, 0.35], [1.60404042E12, 0.43333333333333335], [1.60403982E12, 0.4], [1.6040388E12, 0.5], [1.60403988E12, 0.35], [1.60403958E12, 0.36666666666666664], [1.60404048E12, 0.43333333333333335], [1.60404018E12, 0.3333333333333333], [1.60403868E12, 0.03333333333333333], [1.60403928E12, 0.3333333333333333], [1.6040403E12, 0.3333333333333333], [1.60403898E12, 0.38333333333333336], [1.6040406E12, 0.48333333333333334], [1.60404066E12, 0.05], [1.60404006E12, 0.35], [1.60403904E12, 0.35], [1.60403874E12, 0.4], [1.60404036E12, 0.38333333333333336], [1.60403916E12, 0.3333333333333333], [1.60403886E12, 0.25], [1.60403976E12, 0.4166666666666667], [1.60403946E12, 0.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404066E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

