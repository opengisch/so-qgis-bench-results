/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3221.0, "minX": 0.0, "maxY": 45870.0, "series": [{"data": [[0.0, 3221.0], [0.1, 3221.0], [0.2, 6256.0], [0.3, 8656.0], [0.4, 8656.0], [0.5, 11403.0], [0.6, 14017.0], [0.7, 16830.0], [0.8, 16830.0], [0.9, 17701.0], [1.0, 17701.0], [1.1, 17821.0], [1.2, 17821.0], [1.3, 17848.0], [1.4, 17894.0], [1.5, 17949.0], [1.6, 17949.0], [1.7, 17962.0], [1.8, 17966.0], [1.9, 17966.0], [2.0, 17967.0], [2.1, 17970.0], [2.2, 17975.0], [2.3, 17975.0], [2.4, 17975.0], [2.5, 17978.0], [2.6, 17978.0], [2.7, 17978.0], [2.8, 18018.0], [2.9, 18028.0], [3.0, 18033.0], [3.1, 18033.0], [3.2, 18084.0], [3.3, 18090.0], [3.4, 18090.0], [3.5, 18099.0], [3.6, 18116.0], [3.7, 18143.0], [3.8, 18143.0], [3.9, 18158.0], [4.0, 18186.0], [4.1, 18196.0], [4.2, 18196.0], [4.3, 18216.0], [4.4, 18218.0], [4.5, 18253.0], [4.6, 18253.0], [4.7, 18259.0], [4.8, 18309.0], [4.9, 18320.0], [5.0, 18320.0], [5.1, 18332.0], [5.2, 18343.0], [5.3, 18343.0], [5.4, 18365.0], [5.5, 18371.0], [5.6, 18375.0], [5.7, 18375.0], [5.8, 18380.0], [5.9, 18380.0], [6.0, 18386.0], [6.1, 18386.0], [6.2, 18390.0], [6.3, 18391.0], [6.4, 18391.0], [6.5, 18391.0], [6.6, 18421.0], [6.7, 18461.0], [6.8, 18461.0], [6.9, 18481.0], [7.0, 18487.0], [7.1, 18507.0], [7.2, 18507.0], [7.3, 18532.0], [7.4, 18548.0], [7.5, 18606.0], [7.6, 18606.0], [7.7, 18625.0], [7.8, 18699.0], [7.9, 18701.0], [8.0, 18701.0], [8.1, 18728.0], [8.2, 18764.0], [8.3, 18765.0], [8.4, 18765.0], [8.5, 18781.0], [8.6, 18852.0], [8.7, 18852.0], [8.8, 18877.0], [8.9, 18904.0], [9.0, 18929.0], [9.1, 18929.0], [9.2, 19054.0], [9.3, 19077.0], [9.4, 19082.0], [9.5, 19082.0], [9.6, 19174.0], [9.7, 19219.0], [9.8, 19231.0], [9.9, 19231.0], [10.0, 19268.0], [10.1, 19304.0], [10.2, 19304.0], [10.3, 19481.0], [10.4, 19628.0], [10.5, 19639.0], [10.6, 19639.0], [10.7, 19681.0], [10.8, 19690.0], [10.9, 19778.0], [11.0, 19778.0], [11.1, 19860.0], [11.2, 19864.0], [11.3, 19877.0], [11.4, 19877.0], [11.5, 20011.0], [11.6, 20051.0], [11.7, 20051.0], [11.8, 20063.0], [11.9, 20080.0], [12.0, 20086.0], [12.1, 20086.0], [12.2, 20095.0], [12.3, 20099.0], [12.4, 20106.0], [12.5, 20106.0], [12.6, 20108.0], [12.7, 20139.0], [12.8, 20207.0], [12.9, 20207.0], [13.0, 20210.0], [13.1, 20220.0], [13.2, 20240.0], [13.3, 20240.0], [13.4, 20279.0], [13.5, 20284.0], [13.6, 20284.0], [13.7, 20321.0], [13.8, 20345.0], [13.9, 20377.0], [14.0, 20377.0], [14.1, 20394.0], [14.2, 20455.0], [14.3, 20461.0], [14.4, 20461.0], [14.5, 20523.0], [14.6, 20757.0], [14.7, 20773.0], [14.8, 20773.0], [14.9, 20801.0], [15.0, 20821.0], [15.1, 20821.0], [15.2, 20824.0], [15.3, 20886.0], [15.4, 20912.0], [15.5, 20912.0], [15.6, 21015.0], [15.7, 21025.0], [15.8, 21038.0], [15.9, 21038.0], [16.0, 21172.0], [16.1, 21369.0], [16.2, 21387.0], [16.3, 21387.0], [16.4, 21439.0], [16.5, 21441.0], [16.6, 21491.0], [16.7, 21491.0], [16.8, 21599.0], [16.9, 21667.0], [17.0, 21667.0], [17.1, 21717.0], [17.2, 21741.0], [17.3, 21834.0], [17.4, 21834.0], [17.5, 21912.0], [17.6, 21985.0], [17.7, 22025.0], [17.8, 22025.0], [17.9, 22056.0], [18.0, 22225.0], [18.1, 22232.0], [18.2, 22232.0], [18.3, 22258.0], [18.4, 22264.0], [18.5, 22264.0], [18.6, 22317.0], [18.7, 22329.0], [18.8, 22335.0], [18.9, 22335.0], [19.0, 22400.0], [19.1, 22433.0], [19.2, 22446.0], [19.3, 22446.0], [19.4, 22504.0], [19.5, 22545.0], [19.6, 22593.0], [19.7, 22593.0], [19.8, 22637.0], [19.9, 22641.0], [20.0, 22755.0], [20.1, 22755.0], [20.2, 22759.0], [20.3, 22788.0], [20.4, 22788.0], [20.5, 22801.0], [20.6, 22859.0], [20.7, 22869.0], [20.8, 22869.0], [20.9, 22896.0], [21.0, 22959.0], [21.1, 22963.0], [21.2, 22963.0], [21.3, 23034.0], [21.4, 23086.0], [21.5, 23094.0], [21.6, 23094.0], [21.7, 23171.0], [21.8, 23186.0], [21.9, 23186.0], [22.0, 23196.0], [22.1, 23204.0], [22.2, 23225.0], [22.3, 23225.0], [22.4, 23239.0], [22.5, 23295.0], [22.6, 23307.0], [22.7, 23307.0], [22.8, 23309.0], [22.9, 23341.0], [23.0, 23344.0], [23.1, 23344.0], [23.2, 23369.0], [23.3, 23372.0], [23.4, 23372.0], [23.5, 23398.0], [23.6, 23425.0], [23.7, 23444.0], [23.8, 23444.0], [23.9, 23542.0], [24.0, 23552.0], [24.1, 23571.0], [24.2, 23571.0], [24.3, 23577.0], [24.4, 23615.0], [24.5, 23619.0], [24.6, 23619.0], [24.7, 23732.0], [24.8, 23733.0], [24.9, 23827.0], [25.0, 23827.0], [25.1, 23880.0], [25.2, 23956.0], [25.3, 23956.0], [25.4, 23985.0], [25.5, 23995.0], [25.6, 23995.0], [25.7, 23995.0], [25.8, 24051.0], [25.9, 24064.0], [26.0, 24099.0], [26.1, 24099.0], [26.2, 24108.0], [26.3, 24142.0], [26.4, 24145.0], [26.5, 24145.0], [26.6, 24153.0], [26.7, 24162.0], [26.8, 24162.0], [26.9, 24172.0], [27.0, 24203.0], [27.1, 24239.0], [27.2, 24239.0], [27.3, 24248.0], [27.4, 24260.0], [27.5, 24267.0], [27.6, 24267.0], [27.7, 24272.0], [27.8, 24346.0], [27.9, 24355.0], [28.0, 24355.0], [28.1, 24373.0], [28.2, 24378.0], [28.3, 24383.0], [28.4, 24383.0], [28.5, 24385.0], [28.6, 24430.0], [28.7, 24430.0], [28.8, 24462.0], [28.9, 24472.0], [29.0, 24478.0], [29.1, 24478.0], [29.2, 24542.0], [29.3, 24573.0], [29.4, 24577.0], [29.5, 24577.0], [29.6, 24578.0], [29.7, 24629.0], [29.8, 24637.0], [29.9, 24637.0], [30.0, 24662.0], [30.1, 24709.0], [30.2, 24709.0], [30.3, 24721.0], [30.4, 24722.0], [30.5, 24775.0], [30.6, 24775.0], [30.7, 24806.0], [30.8, 24812.0], [30.9, 24833.0], [31.0, 24833.0], [31.1, 24856.0], [31.2, 24862.0], [31.3, 24875.0], [31.4, 24875.0], [31.5, 24881.0], [31.6, 24899.0], [31.7, 24899.0], [31.8, 24911.0], [31.9, 24943.0], [32.0, 24986.0], [32.1, 24986.0], [32.2, 25009.0], [32.3, 25017.0], [32.4, 25022.0], [32.5, 25022.0], [32.6, 25033.0], [32.7, 25083.0], [32.8, 25100.0], [32.9, 25100.0], [33.0, 25101.0], [33.1, 25117.0], [33.2, 25127.0], [33.3, 25127.0], [33.4, 25165.0], [33.5, 25204.0], [33.6, 25204.0], [33.7, 25211.0], [33.8, 25253.0], [33.9, 25265.0], [34.0, 25265.0], [34.1, 25288.0], [34.2, 25321.0], [34.3, 25330.0], [34.4, 25330.0], [34.5, 25342.0], [34.6, 25378.0], [34.7, 25386.0], [34.8, 25386.0], [34.9, 25387.0], [35.0, 25394.0], [35.1, 25394.0], [35.2, 25408.0], [35.3, 25410.0], [35.4, 25417.0], [35.5, 25417.0], [35.6, 25462.0], [35.7, 25508.0], [35.8, 25530.0], [35.9, 25530.0], [36.0, 25552.0], [36.1, 25579.0], [36.2, 25610.0], [36.3, 25610.0], [36.4, 25631.0], [36.5, 25645.0], [36.6, 25670.0], [36.7, 25670.0], [36.8, 25697.0], [36.9, 25724.0], [37.0, 25724.0], [37.1, 25727.0], [37.2, 25752.0], [37.3, 25767.0], [37.4, 25767.0], [37.5, 25807.0], [37.6, 25824.0], [37.7, 25843.0], [37.8, 25843.0], [37.9, 25862.0], [38.0, 25873.0], [38.1, 25890.0], [38.2, 25890.0], [38.3, 25899.0], [38.4, 25933.0], [38.5, 25933.0], [38.6, 25937.0], [38.7, 25986.0], [38.8, 26010.0], [38.9, 26010.0], [39.0, 26063.0], [39.1, 26119.0], [39.2, 26160.0], [39.3, 26160.0], [39.4, 26177.0], [39.5, 26197.0], [39.6, 26208.0], [39.7, 26208.0], [39.8, 26211.0], [39.9, 26231.0], [40.0, 26253.0], [40.1, 26253.0], [40.2, 26256.0], [40.3, 26261.0], [40.4, 26261.0], [40.5, 26280.0], [40.6, 26282.0], [40.7, 26283.0], [40.8, 26283.0], [40.9, 26294.0], [41.0, 26336.0], [41.1, 26344.0], [41.2, 26344.0], [41.3, 26347.0], [41.4, 26357.0], [41.5, 26391.0], [41.6, 26391.0], [41.7, 26462.0], [41.8, 26463.0], [41.9, 26463.0], [42.0, 26465.0], [42.1, 26500.0], [42.2, 26510.0], [42.3, 26510.0], [42.4, 26511.0], [42.5, 26511.0], [42.6, 26558.0], [42.7, 26558.0], [42.8, 26604.0], [42.9, 26634.0], [43.0, 26645.0], [43.1, 26645.0], [43.2, 26647.0], [43.3, 26666.0], [43.4, 26666.0], [43.5, 26700.0], [43.6, 26726.0], [43.7, 26730.0], [43.8, 26730.0], [43.9, 26733.0], [44.0, 26742.0], [44.1, 26772.0], [44.2, 26772.0], [44.3, 26777.0], [44.4, 26784.0], [44.5, 26790.0], [44.6, 26790.0], [44.7, 26803.0], [44.8, 26816.0], [44.9, 26854.0], [45.0, 26854.0], [45.1, 26883.0], [45.2, 26905.0], [45.3, 26905.0], [45.4, 26913.0], [45.5, 26953.0], [45.6, 26978.0], [45.7, 26978.0], [45.8, 27013.0], [45.9, 27025.0], [46.0, 27043.0], [46.1, 27043.0], [46.2, 27075.0], [46.3, 27116.0], [46.4, 27188.0], [46.5, 27188.0], [46.6, 27200.0], [46.7, 27203.0], [46.8, 27203.0], [46.9, 27212.0], [47.0, 27212.0], [47.1, 27231.0], [47.2, 27231.0], [47.3, 27256.0], [47.4, 27274.0], [47.5, 27277.0], [47.6, 27277.0], [47.7, 27338.0], [47.8, 27355.0], [47.9, 27376.0], [48.0, 27376.0], [48.1, 27378.0], [48.2, 27408.0], [48.3, 27415.0], [48.4, 27415.0], [48.5, 27473.0], [48.6, 27514.0], [48.7, 27514.0], [48.8, 27591.0], [48.9, 27627.0], [49.0, 27645.0], [49.1, 27645.0], [49.2, 27647.0], [49.3, 27671.0], [49.4, 27674.0], [49.5, 27674.0], [49.6, 27682.0], [49.7, 27725.0], [49.8, 27741.0], [49.9, 27741.0], [50.0, 27760.0], [50.1, 27766.0], [50.2, 27766.0], [50.3, 27770.0], [50.4, 27789.0], [50.5, 27817.0], [50.6, 27817.0], [50.7, 27818.0], [50.8, 27826.0], [50.9, 27861.0], [51.0, 27861.0], [51.1, 27913.0], [51.2, 27998.0], [51.3, 28071.0], [51.4, 28071.0], [51.5, 28106.0], [51.6, 28135.0], [51.7, 28135.0], [51.8, 28162.0], [51.9, 28183.0], [52.0, 28186.0], [52.1, 28186.0], [52.2, 28192.0], [52.3, 28193.0], [52.4, 28276.0], [52.5, 28276.0], [52.6, 28277.0], [52.7, 28305.0], [52.8, 28314.0], [52.9, 28314.0], [53.0, 28320.0], [53.1, 28372.0], [53.2, 28379.0], [53.3, 28379.0], [53.4, 28382.0], [53.5, 28390.0], [53.6, 28390.0], [53.7, 28436.0], [53.8, 28455.0], [53.9, 28494.0], [54.0, 28494.0], [54.1, 28497.0], [54.2, 28503.0], [54.3, 28517.0], [54.4, 28517.0], [54.5, 28536.0], [54.6, 28538.0], [54.7, 28551.0], [54.8, 28551.0], [54.9, 28603.0], [55.0, 28645.0], [55.1, 28645.0], [55.2, 28648.0], [55.3, 28649.0], [55.4, 28659.0], [55.5, 28659.0], [55.6, 28683.0], [55.7, 28685.0], [55.8, 28690.0], [55.9, 28690.0], [56.0, 28694.0], [56.1, 28704.0], [56.2, 28739.0], [56.3, 28739.0], [56.4, 28747.0], [56.5, 28751.0], [56.6, 28756.0], [56.7, 28756.0], [56.8, 28800.0], [56.9, 28848.0], [57.0, 28848.0], [57.1, 28862.0], [57.2, 28882.0], [57.3, 28899.0], [57.4, 28899.0], [57.5, 28901.0], [57.6, 28919.0], [57.7, 28925.0], [57.8, 28925.0], [57.9, 28928.0], [58.0, 28960.0], [58.1, 28968.0], [58.2, 28968.0], [58.3, 28977.0], [58.4, 28989.0], [58.5, 28989.0], [58.6, 29026.0], [58.7, 29027.0], [58.8, 29037.0], [58.9, 29037.0], [59.0, 29090.0], [59.1, 29117.0], [59.2, 29125.0], [59.3, 29125.0], [59.4, 29135.0], [59.5, 29138.0], [59.6, 29139.0], [59.7, 29139.0], [59.8, 29146.0], [59.9, 29164.0], [60.0, 29165.0], [60.1, 29165.0], [60.2, 29166.0], [60.3, 29175.0], [60.4, 29175.0], [60.5, 29213.0], [60.6, 29242.0], [60.7, 29286.0], [60.8, 29286.0], [60.9, 29297.0], [61.0, 29319.0], [61.1, 29339.0], [61.2, 29339.0], [61.3, 29354.0], [61.4, 29360.0], [61.5, 29361.0], [61.6, 29361.0], [61.7, 29369.0], [61.8, 29372.0], [61.9, 29372.0], [62.0, 29381.0], [62.1, 29396.0], [62.2, 29403.0], [62.3, 29403.0], [62.4, 29406.0], [62.5, 29431.0], [62.6, 29475.0], [62.7, 29475.0], [62.8, 29485.0], [62.9, 29508.0], [63.0, 29510.0], [63.1, 29510.0], [63.2, 29520.0], [63.3, 29527.0], [63.4, 29527.0], [63.5, 29529.0], [63.6, 29556.0], [63.7, 29560.0], [63.8, 29560.0], [63.9, 29569.0], [64.0, 29570.0], [64.1, 29607.0], [64.2, 29607.0], [64.3, 29612.0], [64.4, 29616.0], [64.5, 29619.0], [64.6, 29619.0], [64.7, 29624.0], [64.8, 29624.0], [64.9, 29634.0], [65.0, 29634.0], [65.1, 29645.0], [65.2, 29646.0], [65.3, 29646.0], [65.4, 29648.0], [65.5, 29658.0], [65.6, 29662.0], [65.7, 29662.0], [65.8, 29664.0], [65.9, 29671.0], [66.0, 29677.0], [66.1, 29677.0], [66.2, 29685.0], [66.3, 29697.0], [66.4, 29703.0], [66.5, 29703.0], [66.6, 29710.0], [66.7, 29719.0], [66.8, 29719.0], [66.9, 29724.0], [67.0, 29725.0], [67.1, 29730.0], [67.2, 29730.0], [67.3, 29732.0], [67.4, 29743.0], [67.5, 29750.0], [67.6, 29750.0], [67.7, 29752.0], [67.8, 29755.0], [67.9, 29759.0], [68.0, 29759.0], [68.1, 29760.0], [68.2, 29761.0], [68.3, 29765.0], [68.4, 29765.0], [68.5, 29766.0], [68.6, 29771.0], [68.7, 29771.0], [68.8, 29774.0], [68.9, 29787.0], [69.0, 29790.0], [69.1, 29790.0], [69.2, 29794.0], [69.3, 29797.0], [69.4, 29799.0], [69.5, 29799.0], [69.6, 29803.0], [69.7, 29805.0], [69.8, 29805.0], [69.9, 29805.0], [70.0, 29816.0], [70.1, 29824.0], [70.2, 29824.0], [70.3, 29832.0], [70.4, 29834.0], [70.5, 29841.0], [70.6, 29841.0], [70.7, 29841.0], [70.8, 29847.0], [70.9, 29847.0], [71.0, 29847.0], [71.1, 29849.0], [71.2, 29854.0], [71.3, 29867.0], [71.4, 29867.0], [71.5, 29892.0], [71.6, 29896.0], [71.7, 29896.0], [71.8, 29899.0], [71.9, 29899.0], [72.0, 29903.0], [72.1, 29903.0], [72.2, 29906.0], [72.3, 29914.0], [72.4, 29920.0], [72.5, 29920.0], [72.6, 29922.0], [72.7, 29925.0], [72.8, 29927.0], [72.9, 29927.0], [73.0, 29932.0], [73.1, 29932.0], [73.2, 29945.0], [73.3, 29945.0], [73.4, 29956.0], [73.5, 29964.0], [73.6, 29964.0], [73.7, 29969.0], [73.8, 29970.0], [73.9, 29970.0], [74.0, 29970.0], [74.1, 29973.0], [74.2, 29973.0], [74.3, 29975.0], [74.4, 29975.0], [74.5, 29977.0], [74.6, 29981.0], [74.7, 30008.0], [74.8, 30008.0], [74.9, 30021.0], [75.0, 30023.0], [75.1, 30023.0], [75.2, 30026.0], [75.3, 30030.0], [75.4, 30031.0], [75.5, 30031.0], [75.6, 30032.0], [75.7, 30032.0], [75.8, 30037.0], [75.9, 30037.0], [76.0, 30039.0], [76.1, 30039.0], [76.2, 30040.0], [76.3, 30040.0], [76.4, 30040.0], [76.5, 30044.0], [76.6, 30054.0], [76.7, 30054.0], [76.8, 30074.0], [76.9, 30077.0], [77.0, 30077.0], [77.1, 30077.0], [77.2, 30079.0], [77.3, 30082.0], [77.4, 30082.0], [77.5, 30091.0], [77.6, 30097.0], [77.7, 30098.0], [77.8, 30098.0], [77.9, 30098.0], [78.0, 30102.0], [78.1, 30104.0], [78.2, 30104.0], [78.3, 30104.0], [78.4, 30110.0], [78.5, 30110.0], [78.6, 30112.0], [78.7, 30113.0], [78.8, 30119.0], [78.9, 30119.0], [79.0, 30121.0], [79.1, 30123.0], [79.2, 30130.0], [79.3, 30130.0], [79.4, 30130.0], [79.5, 30131.0], [79.6, 30134.0], [79.7, 30134.0], [79.8, 30142.0], [79.9, 30145.0], [80.0, 30146.0], [80.1, 30146.0], [80.2, 30151.0], [80.3, 30156.0], [80.4, 30156.0], [80.5, 30156.0], [80.6, 30169.0], [80.7, 30169.0], [80.8, 30169.0], [80.9, 30174.0], [81.0, 30178.0], [81.1, 30180.0], [81.2, 30180.0], [81.3, 30184.0], [81.4, 30203.0], [81.5, 30215.0], [81.6, 30215.0], [81.7, 30225.0], [81.8, 30227.0], [81.9, 30227.0], [82.0, 30236.0], [82.1, 30243.0], [82.2, 30243.0], [82.3, 30243.0], [82.4, 30244.0], [82.5, 30246.0], [82.6, 30249.0], [82.7, 30249.0], [82.8, 30252.0], [82.9, 30255.0], [83.0, 30264.0], [83.1, 30264.0], [83.2, 30279.0], [83.3, 30289.0], [83.4, 30289.0], [83.5, 30297.0], [83.6, 30298.0], [83.7, 30301.0], [83.8, 30301.0], [83.9, 30303.0], [84.0, 30306.0], [84.1, 30310.0], [84.2, 30310.0], [84.3, 30321.0], [84.4, 30326.0], [84.5, 30338.0], [84.6, 30338.0], [84.7, 30346.0], [84.8, 30355.0], [84.9, 30363.0], [85.0, 30363.0], [85.1, 30365.0], [85.2, 30374.0], [85.3, 30374.0], [85.4, 30382.0], [85.5, 30383.0], [85.6, 30387.0], [85.7, 30387.0], [85.8, 30391.0], [85.9, 30401.0], [86.0, 30410.0], [86.1, 30410.0], [86.2, 30414.0], [86.3, 30416.0], [86.4, 30427.0], [86.5, 30427.0], [86.6, 30439.0], [86.7, 30440.0], [86.8, 30440.0], [86.9, 30443.0], [87.0, 30444.0], [87.1, 30469.0], [87.2, 30469.0], [87.3, 30473.0], [87.4, 30473.0], [87.5, 30474.0], [87.6, 30474.0], [87.7, 30478.0], [87.8, 30486.0], [87.9, 30488.0], [88.0, 30488.0], [88.1, 30489.0], [88.2, 30541.0], [88.3, 30552.0], [88.4, 30552.0], [88.5, 30554.0], [88.6, 30555.0], [88.7, 30555.0], [88.8, 30555.0], [88.9, 30572.0], [89.0, 30592.0], [89.1, 30592.0], [89.2, 30607.0], [89.3, 30610.0], [89.4, 30643.0], [89.5, 30643.0], [89.6, 30672.0], [89.7, 30674.0], [89.8, 30694.0], [89.9, 30694.0], [90.0, 30700.0], [90.1, 30717.0], [90.2, 30717.0], [90.3, 30723.0], [90.4, 30733.0], [90.5, 30752.0], [90.6, 30752.0], [90.7, 30766.0], [90.8, 30779.0], [90.9, 30798.0], [91.0, 30798.0], [91.1, 30813.0], [91.2, 30818.0], [91.3, 30821.0], [91.4, 30821.0], [91.5, 30822.0], [91.6, 30860.0], [91.7, 30860.0], [91.8, 30864.0], [91.9, 30866.0], [92.0, 30881.0], [92.1, 30881.0], [92.2, 30932.0], [92.3, 30951.0], [92.4, 30976.0], [92.5, 30976.0], [92.6, 31000.0], [92.7, 31031.0], [92.8, 31099.0], [92.9, 31099.0], [93.0, 31154.0], [93.1, 31180.0], [93.2, 31290.0], [93.3, 31290.0], [93.4, 31311.0], [93.5, 31325.0], [93.6, 31325.0], [93.7, 31783.0], [93.8, 32145.0], [93.9, 32174.0], [94.0, 32174.0], [94.1, 32305.0], [94.2, 32361.0], [94.3, 32536.0], [94.4, 32536.0], [94.5, 32551.0], [94.6, 32576.0], [94.7, 32707.0], [94.8, 32707.0], [94.9, 32731.0], [95.0, 32785.0], [95.1, 32785.0], [95.2, 32991.0], [95.3, 33078.0], [95.4, 33161.0], [95.5, 33161.0], [95.6, 33328.0], [95.7, 34041.0], [95.8, 34180.0], [95.9, 34180.0], [96.0, 34328.0], [96.1, 34593.0], [96.2, 34892.0], [96.3, 34892.0], [96.4, 34982.0], [96.5, 35057.0], [96.6, 35674.0], [96.7, 35674.0], [96.8, 35982.0], [96.9, 36143.0], [97.0, 36143.0], [97.1, 36658.0], [97.2, 36948.0], [97.3, 37294.0], [97.4, 37294.0], [97.5, 37593.0], [97.6, 39034.0], [97.7, 39049.0], [97.8, 39049.0], [97.9, 39082.0], [98.0, 39530.0], [98.1, 39852.0], [98.2, 39852.0], [98.3, 41742.0], [98.4, 42053.0], [98.5, 42053.0], [98.6, 42080.0], [98.7, 42945.0], [98.8, 43259.0], [98.9, 43259.0], [99.0, 43827.0], [99.1, 43870.0], [99.2, 44043.0], [99.3, 44043.0], [99.4, 44625.0], [99.5, 44820.0], [99.6, 45360.0], [99.7, 45360.0], [99.8, 45628.0], [99.9, 45870.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 25.0, "series": [{"data": [[34500.0, 1.0], [32900.0, 1.0], [33100.0, 1.0], [34300.0, 1.0], [34100.0, 1.0], [33300.0, 1.0], [35900.0, 1.0], [36100.0, 1.0], [34900.0, 1.0], [36900.0, 1.0], [37500.0, 1.0], [39500.0, 1.0], [41700.0, 1.0], [42900.0, 1.0], [45300.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8600.0, 1.0], [11400.0, 1.0], [14000.0, 1.0], [16800.0, 1.0], [18400.0, 4.0], [18300.0, 13.0], [17900.0, 9.0], [18000.0, 6.0], [18100.0, 5.0], [17700.0, 2.0], [18200.0, 4.0], [17800.0, 3.0], [19400.0, 1.0], [19000.0, 3.0], [19200.0, 3.0], [18700.0, 5.0], [18500.0, 3.0], [18600.0, 3.0], [18900.0, 2.0], [18800.0, 2.0], [19100.0, 1.0], [19300.0, 1.0], [20300.0, 4.0], [20000.0, 7.0], [19800.0, 3.0], [19700.0, 1.0], [19600.0, 4.0], [20200.0, 6.0], [20100.0, 3.0], [20400.0, 2.0], [21400.0, 3.0], [21500.0, 1.0], [20800.0, 4.0], [20700.0, 2.0], [20900.0, 1.0], [20500.0, 1.0], [21300.0, 2.0], [21100.0, 1.0], [21000.0, 3.0], [22000.0, 2.0], [21900.0, 2.0], [22400.0, 3.0], [21700.0, 2.0], [22500.0, 3.0], [21600.0, 1.0], [22200.0, 4.0], [21800.0, 1.0], [22300.0, 3.0], [22700.0, 3.0], [22800.0, 4.0], [23200.0, 4.0], [23300.0, 7.0], [23500.0, 4.0], [23400.0, 2.0], [22900.0, 2.0], [23000.0, 3.0], [22600.0, 2.0], [23100.0, 3.0], [24500.0, 4.0], [24000.0, 3.0], [24300.0, 6.0], [23900.0, 4.0], [24200.0, 6.0], [24100.0, 6.0], [23700.0, 2.0], [23600.0, 2.0], [24400.0, 4.0], [23800.0, 2.0], [24800.0, 8.0], [24600.0, 3.0], [24700.0, 4.0], [25500.0, 4.0], [25200.0, 5.0], [25100.0, 5.0], [25300.0, 7.0], [25000.0, 5.0], [25400.0, 4.0], [24900.0, 3.0], [25800.0, 7.0], [26600.0, 5.0], [26000.0, 2.0], [26100.0, 4.0], [25900.0, 3.0], [25600.0, 5.0], [26500.0, 5.0], [26300.0, 5.0], [26400.0, 3.0], [26200.0, 10.0], [25700.0, 4.0], [26800.0, 4.0], [27100.0, 2.0], [27600.0, 6.0], [26900.0, 4.0], [27000.0, 4.0], [27400.0, 3.0], [27500.0, 2.0], [27200.0, 8.0], [26700.0, 9.0], [27300.0, 4.0], [27900.0, 2.0], [27700.0, 6.0], [28100.0, 7.0], [28400.0, 4.0], [28000.0, 1.0], [27800.0, 4.0], [28300.0, 7.0], [28500.0, 5.0], [28200.0, 2.0], [28600.0, 9.0], [28800.0, 5.0], [29100.0, 10.0], [28700.0, 5.0], [29200.0, 4.0], [29600.0, 17.0], [29000.0, 4.0], [29500.0, 9.0], [29400.0, 5.0], [28900.0, 8.0], [29300.0, 9.0], [30600.0, 6.0], [30000.0, 24.0], [29700.0, 23.0], [30400.0, 17.0], [30700.0, 8.0], [30300.0, 16.0], [30500.0, 7.0], [30100.0, 25.0], [30200.0, 17.0], [29800.0, 18.0], [29900.0, 20.0], [31700.0, 1.0], [30800.0, 8.0], [31300.0, 2.0], [31000.0, 3.0], [30900.0, 3.0], [31100.0, 2.0], [31200.0, 1.0], [32100.0, 2.0], [32300.0, 2.0], [32500.0, 3.0], [32700.0, 3.0], [34000.0, 1.0], [33000.0, 1.0], [34800.0, 1.0], [35000.0, 1.0], [36600.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [39800.0, 1.0], [39000.0, 3.0], [42000.0, 2.0], [44000.0, 1.0], [43800.0, 2.0], [44800.0, 1.0], [43200.0, 1.0], [44600.0, 1.0], [45800.0, 1.0], [45600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.63157894736842, "minX": 1.60404516E12, "maxY": 10.0, "series": [{"data": [[1.6040454E12, 10.0], [1.60404702E12, 10.0], [1.6040457E12, 10.0], [1.604046E12, 10.0], [1.6040463E12, 10.0], [1.6040466E12, 10.0], [1.60404528E12, 10.0], [1.6040469E12, 10.0], [1.60404558E12, 10.0], [1.60404588E12, 10.0], [1.60404618E12, 10.0], [1.60404648E12, 10.0], [1.60404708E12, 10.0], [1.60404516E12, 10.0], [1.60404678E12, 10.0], [1.60404546E12, 10.0], [1.60404576E12, 10.0], [1.60404606E12, 10.0], [1.60404636E12, 10.0], [1.60404696E12, 10.0], [1.60404666E12, 10.0], [1.60404534E12, 10.0], [1.60404564E12, 10.0], [1.60404594E12, 10.0], [1.60404624E12, 10.0], [1.60404654E12, 10.0], [1.60404684E12, 10.0], [1.60404522E12, 10.0], [1.60404552E12, 10.0], [1.60404714E12, 7.63157894736842], [1.60404582E12, 10.0], [1.60404612E12, 10.0], [1.60404642E12, 10.0], [1.60404672E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18090.0, "minX": 1.0, "maxY": 26937.731404958693, "series": [{"data": [[8.0, 18386.0], [4.0, 18216.0], [2.0, 18343.0], [1.0, 18699.0], [9.0, 18507.0], [10.0, 26937.731404958693], [5.0, 18090.0], [6.0, 18196.0], [3.0, 18332.0], [7.0, 18158.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26832.272108843554]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 65.85, "minX": 1.60404516E12, "maxY": 179760.66666666666, "series": [{"data": [[1.6040454E12, 75238.43333333333], [1.60404702E12, 154994.85], [1.6040457E12, 56598.833333333336], [1.604046E12, 168367.53333333333], [1.6040463E12, 70168.38333333333], [1.6040466E12, 43322.73333333333], [1.60404528E12, 84046.0], [1.6040469E12, 24992.533333333333], [1.60404558E12, 43729.566666666666], [1.60404588E12, 34163.73333333333], [1.60404618E12, 117463.08333333333], [1.60404648E12, 43630.61666666667], [1.60404708E12, 75560.01666666666], [1.60404516E12, 121364.3], [1.60404678E12, 50014.35], [1.60404546E12, 45094.816666666666], [1.60404576E12, 40471.4], [1.60404606E12, 75411.08333333333], [1.60404636E12, 68993.18333333333], [1.60404696E12, 28062.133333333335], [1.60404666E12, 56176.96666666667], [1.60404534E12, 107414.55], [1.60404564E12, 47544.316666666666], [1.60404594E12, 35486.51666666667], [1.60404624E12, 61167.316666666666], [1.60404654E12, 51257.833333333336], [1.60404684E12, 41641.98333333333], [1.60404522E12, 138976.93333333332], [1.60404552E12, 47837.7], [1.60404714E12, 13455.35], [1.60404582E12, 44656.86666666667], [1.60404612E12, 179760.66666666666], [1.60404642E12, 32724.083333333332], [1.60404672E12, 43667.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6040454E12, 160.71666666666667], [1.60404702E12, 181.5], [1.6040457E12, 146.45], [1.604046E12, 211.51666666666668], [1.6040463E12, 177.53333333333333], [1.6040466E12, 146.1], [1.60404528E12, 194.5], [1.6040469E12, 167.75], [1.60404558E12, 146.1], [1.60404588E12, 160.68333333333334], [1.60404618E12, 195.81666666666666], [1.60404648E12, 146.13333333333333], [1.60404708E12, 152.41666666666666], [1.60404516E12, 65.85], [1.60404678E12, 146.1], [1.60404546E12, 169.28333333333333], [1.60404576E12, 146.0], [1.60404606E12, 156.01666666666668], [1.60404636E12, 169.23333333333332], [1.60404696E12, 175.38333333333333], [1.60404666E12, 154.41666666666666], [1.60404534E12, 104.9], [1.60404564E12, 146.11666666666667], [1.60404594E12, 191.23333333333332], [1.60404624E12, 175.86666666666667], [1.60404654E12, 146.15], [1.60404684E12, 160.55], [1.60404522E12, 183.75], [1.60404552E12, 138.85], [1.60404714E12, 126.61666666666666], [1.60404582E12, 146.01666666666668], [1.60404612E12, 179.45], [1.60404642E12, 124.18333333333334], [1.60404672E12, 146.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14038.222222222223, "minX": 1.60404516E12, "maxY": 38812.07142857143, "series": [{"data": [[1.6040454E12, 29903.18181818182], [1.60404702E12, 23086.080000000005], [1.6040457E12, 30079.300000000003], [1.604046E12, 20219.400000000005], [1.6040463E12, 27407.5], [1.6040466E12, 29597.35], [1.60404528E12, 21073.666666666664], [1.6040469E12, 25800.782608695652], [1.60404558E12, 30293.65], [1.60404588E12, 28269.272727272728], [1.60404618E12, 23378.888888888894], [1.60404648E12, 29386.050000000003], [1.60404708E12, 31119.476190476187], [1.60404516E12, 14038.222222222223], [1.60404678E12, 30413.6], [1.60404546E12, 26417.4347826087], [1.60404576E12, 29810.95], [1.60404606E12, 25410.86363636364], [1.60404636E12, 24863.956521739132], [1.60404696E12, 24650.66666666667], [1.60404666E12, 28460.380952380954], [1.60404534E12, 38812.07142857143], [1.60404564E12, 30121.9], [1.60404594E12, 24423.692307692305], [1.60404624E12, 20614.8], [1.60404654E12, 29877.849999999995], [1.60404684E12, 28647.954545454544], [1.60404522E12, 25347.76], [1.60404552E12, 29713.368421052626], [1.60404714E12, 18804.368421052633], [1.60404582E12, 30111.05], [1.60404612E12, 24088.320000000003], [1.60404642E12, 36963.41176470588], [1.60404672E12, 29758.300000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14032.333333333334, "minX": 1.60404516E12, "maxY": 38808.00000000001, "series": [{"data": [[1.6040454E12, 29901.36363636364], [1.60404702E12, 23082.04], [1.6040457E12, 30077.899999999998], [1.604046E12, 20215.43333333333], [1.6040463E12, 27406.166666666668], [1.6040466E12, 29596.350000000002], [1.60404528E12, 21071.888888888887], [1.6040469E12, 25799.086956521744], [1.60404558E12, 30292.650000000005], [1.60404588E12, 28267.818181818184], [1.60404618E12, 23376.777777777777], [1.60404648E12, 29385.000000000004], [1.60404708E12, 31116.95238095238], [1.60404516E12, 14032.333333333334], [1.60404678E12, 30412.199999999993], [1.60404546E12, 26416.47826086957], [1.60404576E12, 29810.1], [1.60404606E12, 25408.000000000004], [1.60404636E12, 24862.347826086952], [1.60404696E12, 24649.375], [1.60404666E12, 28459.047619047622], [1.60404534E12, 38808.00000000001], [1.60404564E12, 30120.7], [1.60404594E12, 24422.26923076923], [1.60404624E12, 20612.679999999997], [1.60404654E12, 29876.55], [1.60404684E12, 28646.95454545454], [1.60404522E12, 25345.199999999997], [1.60404552E12, 29712.263157894737], [1.60404714E12, 18802.21052631579], [1.60404582E12, 30109.949999999997], [1.60404612E12, 24084.319999999992], [1.60404642E12, 36962.705882352944], [1.60404672E12, 29757.199999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05263157894736843, "minX": 1.60404516E12, "maxY": 9.777777777777779, "series": [{"data": [[1.6040454E12, 0.5909090909090909], [1.60404702E12, 0.39999999999999997], [1.6040457E12, 0.65], [1.604046E12, 0.46666666666666684], [1.6040463E12, 0.6249999999999999], [1.6040466E12, 0.2], [1.60404528E12, 0.37037037037037035], [1.6040469E12, 0.2608695652173913], [1.60404558E12, 0.6000000000000001], [1.60404588E12, 0.27272727272727276], [1.60404618E12, 0.4074074074074074], [1.60404648E12, 0.7499999999999999], [1.60404708E12, 0.761904761904762], [1.60404516E12, 9.777777777777779], [1.60404678E12, 0.6000000000000001], [1.60404546E12, 0.5217391304347827], [1.60404576E12, 0.44999999999999996], [1.60404606E12, 0.7272727272727272], [1.60404636E12, 0.5217391304347826], [1.60404696E12, 0.49999999999999994], [1.60404666E12, 0.6190476190476191], [1.60404534E12, 0.9285714285714285], [1.60404564E12, 0.55], [1.60404594E12, 0.5384615384615384], [1.60404624E12, 0.12], [1.60404654E12, 0.6500000000000001], [1.60404684E12, 0.681818181818182], [1.60404522E12, 0.36], [1.60404552E12, 0.05263157894736843], [1.60404714E12, 0.2105263157894737], [1.60404582E12, 0.6000000000000001], [1.60404612E12, 0.48], [1.60404642E12, 0.29411764705882354], [1.60404672E12, 0.55]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3221.0, "minX": 1.60404516E12, "maxY": 45870.0, "series": [{"data": [[1.6040454E12, 39082.0], [1.60404702E12, 28928.0], [1.6040457E12, 31154.0], [1.604046E12, 23341.0], [1.6040463E12, 33161.0], [1.6040466E12, 30134.0], [1.60404528E12, 25862.0], [1.6040469E12, 29138.0], [1.60404558E12, 30766.0], [1.60404588E12, 29896.0], [1.60404618E12, 29510.0], [1.60404648E12, 30215.0], [1.60404708E12, 39049.0], [1.60404516E12, 24899.0], [1.60404678E12, 30860.0], [1.60404546E12, 31311.0], [1.60404576E12, 30572.0], [1.60404606E12, 32785.0], [1.60404636E12, 28183.0], [1.60404696E12, 28739.0], [1.60404666E12, 29520.0], [1.60404534E12, 45870.0], [1.60404564E12, 30443.0], [1.60404594E12, 27645.0], [1.60404624E12, 32361.0], [1.60404654E12, 30243.0], [1.60404684E12, 30881.0], [1.60404522E12, 28436.0], [1.60404552E12, 31099.0], [1.60404714E12, 23615.0], [1.60404582E12, 30439.0], [1.60404612E12, 26730.0], [1.60404642E12, 44625.0], [1.60404672E12, 30255.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6040454E12, 25843.0], [1.60404702E12, 19690.0], [1.6040457E12, 29135.0], [1.604046E12, 17701.0], [1.6040463E12, 23552.0], [1.6040466E12, 29026.0], [1.60404528E12, 17975.0], [1.6040469E12, 22258.0], [1.60404558E12, 29847.0], [1.60404588E12, 26231.0], [1.60404618E12, 19082.0], [1.60404648E12, 25933.0], [1.60404708E12, 25265.0], [1.60404516E12, 3221.0], [1.60404678E12, 30098.0], [1.60404546E12, 23444.0], [1.60404576E12, 28925.0], [1.60404606E12, 18380.0], [1.60404636E12, 22545.0], [1.60404696E12, 21717.0], [1.60404666E12, 27671.0], [1.60404534E12, 24862.0], [1.60404564E12, 29616.0], [1.60404594E12, 18116.0], [1.60404624E12, 17701.0], [1.60404654E12, 29372.0], [1.60404684E12, 24986.0], [1.60404522E12, 20757.0], [1.60404552E12, 25873.0], [1.60404714E12, 17966.0], [1.60404582E12, 29899.0], [1.60404612E12, 20095.0], [1.60404642E12, 29560.0], [1.60404672E12, 28751.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6040454E12, 25843.0], [1.60404702E12, 19690.0], [1.6040457E12, 29135.0], [1.604046E12, 17701.0], [1.6040463E12, 23552.0], [1.6040466E12, 29026.0], [1.60404528E12, 17975.0], [1.6040469E12, 22258.0], [1.60404558E12, 29847.0], [1.60404588E12, 26231.0], [1.60404618E12, 19082.0], [1.60404648E12, 25933.0], [1.60404708E12, 25265.0], [1.60404516E12, 3221.0], [1.60404678E12, 30098.0], [1.60404546E12, 23444.0], [1.60404576E12, 28925.0], [1.60404606E12, 18380.0], [1.60404636E12, 22545.0], [1.60404696E12, 21717.0], [1.60404666E12, 27671.0], [1.60404534E12, 24862.0], [1.60404564E12, 29616.0], [1.60404594E12, 18116.0], [1.60404624E12, 17701.0], [1.60404654E12, 29372.0], [1.60404684E12, 24986.0], [1.60404522E12, 20757.0], [1.60404552E12, 25873.0], [1.60404714E12, 17966.0], [1.60404582E12, 29899.0], [1.60404612E12, 20095.0], [1.60404642E12, 29560.0], [1.60404672E12, 28751.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6040454E12, 25843.0], [1.60404702E12, 19690.0], [1.6040457E12, 29135.0], [1.604046E12, 17701.0], [1.6040463E12, 23552.0], [1.6040466E12, 29026.0], [1.60404528E12, 17975.0], [1.6040469E12, 22258.0], [1.60404558E12, 29847.0], [1.60404588E12, 26231.0], [1.60404618E12, 19082.0], [1.60404648E12, 25933.0], [1.60404708E12, 25265.0], [1.60404516E12, 3221.0], [1.60404678E12, 30098.0], [1.60404546E12, 23444.0], [1.60404576E12, 28925.0], [1.60404606E12, 18380.0], [1.60404636E12, 22545.0], [1.60404696E12, 21717.0], [1.60404666E12, 27671.0], [1.60404534E12, 24862.0], [1.60404564E12, 29616.0], [1.60404594E12, 18116.0], [1.60404624E12, 17701.0], [1.60404654E12, 29372.0], [1.60404684E12, 24986.0], [1.60404522E12, 20757.0], [1.60404552E12, 25873.0], [1.60404714E12, 17966.0], [1.60404582E12, 29899.0], [1.60404612E12, 20095.0], [1.60404642E12, 29560.0], [1.60404672E12, 28751.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6040454E12, 25843.0], [1.60404702E12, 19690.0], [1.6040457E12, 29135.0], [1.604046E12, 17701.0], [1.6040463E12, 23552.0], [1.6040466E12, 29026.0], [1.60404528E12, 17975.0], [1.6040469E12, 22258.0], [1.60404558E12, 29847.0], [1.60404588E12, 26231.0], [1.60404618E12, 19082.0], [1.60404648E12, 25933.0], [1.60404708E12, 25265.0], [1.60404516E12, 3221.0], [1.60404678E12, 30098.0], [1.60404546E12, 23444.0], [1.60404576E12, 28925.0], [1.60404606E12, 18380.0], [1.60404636E12, 22545.0], [1.60404696E12, 21717.0], [1.60404666E12, 27671.0], [1.60404534E12, 24862.0], [1.60404564E12, 29616.0], [1.60404594E12, 18116.0], [1.60404624E12, 17701.0], [1.60404654E12, 29372.0], [1.60404684E12, 24986.0], [1.60404522E12, 20757.0], [1.60404552E12, 25873.0], [1.60404714E12, 17966.0], [1.60404582E12, 29899.0], [1.60404612E12, 20095.0], [1.60404642E12, 29560.0], [1.60404672E12, 28751.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6040454E12, 28505.0], [1.60404702E12, 22335.0], [1.6040457E12, 30109.5], [1.604046E12, 19819.5], [1.6040463E12, 27307.5], [1.6040466E12, 29688.5], [1.60404528E12, 20086.0], [1.6040469E12, 26197.0], [1.60404558E12, 30239.5], [1.60404588E12, 28432.5], [1.60404618E12, 21834.0], [1.60404648E12, 29815.5], [1.60404708E12, 29834.0], [1.60404516E12, 14017.0], [1.60404678E12, 30428.0], [1.60404546E12, 25408.0], [1.60404576E12, 30006.5], [1.60404606E12, 24365.5], [1.60404636E12, 24875.0], [1.60404696E12, 24742.0], [1.60404666E12, 28648.0], [1.60404534E12, 42656.0], [1.60404564E12, 30202.5], [1.60404594E12, 24897.0], [1.60404624E12, 18218.0], [1.60404654E12, 29910.5], [1.60404684E12, 29453.0], [1.60404522E12, 26913.0], [1.60404552E12, 30674.0], [1.60404714E12, 18332.0], [1.60404582E12, 30047.0], [1.60404612E12, 24462.0], [1.60404642E12, 36658.0], [1.60404672E12, 29920.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27760.0, "minX": 1.0, "maxY": 27760.0, "series": [{"data": [[1.0, 27760.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27758.0, "minX": 1.0, "maxY": 27758.0, "series": [{"data": [[1.0, 27758.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60404516E12, "maxY": 0.5, "series": [{"data": [[1.6040454E12, 0.36666666666666664], [1.60404702E12, 0.4166666666666667], [1.6040457E12, 0.3333333333333333], [1.604046E12, 0.5], [1.6040463E12, 0.4], [1.6040466E12, 0.3333333333333333], [1.60404528E12, 0.45], [1.6040469E12, 0.38333333333333336], [1.60404558E12, 0.3333333333333333], [1.60404588E12, 0.36666666666666664], [1.60404618E12, 0.45], [1.60404648E12, 0.3333333333333333], [1.60404708E12, 0.35], [1.60404516E12, 0.31666666666666665], [1.60404678E12, 0.3333333333333333], [1.60404546E12, 0.38333333333333336], [1.60404576E12, 0.3333333333333333], [1.60404606E12, 0.36666666666666664], [1.60404636E12, 0.38333333333333336], [1.60404696E12, 0.4], [1.60404666E12, 0.35], [1.60404534E12, 0.23333333333333334], [1.60404564E12, 0.3333333333333333], [1.60404594E12, 0.43333333333333335], [1.60404624E12, 0.4166666666666667], [1.60404654E12, 0.3333333333333333], [1.60404684E12, 0.36666666666666664], [1.60404522E12, 0.4166666666666667], [1.60404552E12, 0.31666666666666665], [1.60404714E12, 0.15], [1.60404582E12, 0.3333333333333333], [1.60404612E12, 0.4166666666666667], [1.60404642E12, 0.2833333333333333], [1.60404672E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404714E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60404516E12, "maxY": 0.5, "series": [{"data": [[1.6040454E12, 0.36666666666666664], [1.60404702E12, 0.4166666666666667], [1.6040457E12, 0.3333333333333333], [1.604046E12, 0.5], [1.6040463E12, 0.4], [1.6040466E12, 0.3333333333333333], [1.60404528E12, 0.45], [1.6040469E12, 0.38333333333333336], [1.60404558E12, 0.3333333333333333], [1.60404588E12, 0.36666666666666664], [1.60404618E12, 0.45], [1.60404648E12, 0.3333333333333333], [1.60404708E12, 0.35], [1.60404516E12, 0.15], [1.60404678E12, 0.3333333333333333], [1.60404546E12, 0.38333333333333336], [1.60404576E12, 0.3333333333333333], [1.60404606E12, 0.36666666666666664], [1.60404636E12, 0.38333333333333336], [1.60404696E12, 0.4], [1.60404666E12, 0.35], [1.60404534E12, 0.23333333333333334], [1.60404564E12, 0.3333333333333333], [1.60404594E12, 0.43333333333333335], [1.60404624E12, 0.4166666666666667], [1.60404654E12, 0.3333333333333333], [1.60404684E12, 0.36666666666666664], [1.60404522E12, 0.4166666666666667], [1.60404552E12, 0.31666666666666665], [1.60404714E12, 0.31666666666666665], [1.60404582E12, 0.3333333333333333], [1.60404612E12, 0.4166666666666667], [1.60404642E12, 0.2833333333333333], [1.60404672E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60404516E12, "maxY": 0.5, "series": [{"data": [[1.6040454E12, 0.36666666666666664], [1.60404702E12, 0.4166666666666667], [1.6040457E12, 0.3333333333333333], [1.604046E12, 0.5], [1.6040463E12, 0.4], [1.6040466E12, 0.3333333333333333], [1.60404528E12, 0.45], [1.6040469E12, 0.38333333333333336], [1.60404558E12, 0.3333333333333333], [1.60404588E12, 0.36666666666666664], [1.60404618E12, 0.45], [1.60404648E12, 0.3333333333333333], [1.60404708E12, 0.35], [1.60404516E12, 0.15], [1.60404678E12, 0.3333333333333333], [1.60404546E12, 0.38333333333333336], [1.60404576E12, 0.3333333333333333], [1.60404606E12, 0.36666666666666664], [1.60404636E12, 0.38333333333333336], [1.60404696E12, 0.4], [1.60404666E12, 0.35], [1.60404534E12, 0.23333333333333334], [1.60404564E12, 0.3333333333333333], [1.60404594E12, 0.43333333333333335], [1.60404624E12, 0.4166666666666667], [1.60404654E12, 0.3333333333333333], [1.60404684E12, 0.36666666666666664], [1.60404522E12, 0.4166666666666667], [1.60404552E12, 0.31666666666666665], [1.60404714E12, 0.31666666666666665], [1.60404582E12, 0.3333333333333333], [1.60404612E12, 0.4166666666666667], [1.60404642E12, 0.2833333333333333], [1.60404672E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60404516E12, "maxY": 0.5, "series": [{"data": [[1.6040454E12, 0.36666666666666664], [1.60404702E12, 0.4166666666666667], [1.6040457E12, 0.3333333333333333], [1.604046E12, 0.5], [1.6040463E12, 0.4], [1.6040466E12, 0.3333333333333333], [1.60404528E12, 0.45], [1.6040469E12, 0.38333333333333336], [1.60404558E12, 0.3333333333333333], [1.60404588E12, 0.36666666666666664], [1.60404618E12, 0.45], [1.60404648E12, 0.3333333333333333], [1.60404708E12, 0.35], [1.60404516E12, 0.15], [1.60404678E12, 0.3333333333333333], [1.60404546E12, 0.38333333333333336], [1.60404576E12, 0.3333333333333333], [1.60404606E12, 0.36666666666666664], [1.60404636E12, 0.38333333333333336], [1.60404696E12, 0.4], [1.60404666E12, 0.35], [1.60404534E12, 0.23333333333333334], [1.60404564E12, 0.3333333333333333], [1.60404594E12, 0.43333333333333335], [1.60404624E12, 0.4166666666666667], [1.60404654E12, 0.3333333333333333], [1.60404684E12, 0.36666666666666664], [1.60404522E12, 0.4166666666666667], [1.60404552E12, 0.31666666666666665], [1.60404714E12, 0.31666666666666665], [1.60404582E12, 0.3333333333333333], [1.60404612E12, 0.4166666666666667], [1.60404642E12, 0.2833333333333333], [1.60404672E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

