/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2129.0, "minX": 0.0, "maxY": 22552.0, "series": [{"data": [[0.0, 2129.0], [0.1, 2230.0], [0.2, 2252.0], [0.3, 2267.0], [0.4, 2286.0], [0.5, 2305.0], [0.6, 2313.0], [0.7, 2319.0], [0.8, 2325.0], [0.9, 2328.0], [1.0, 2334.0], [1.1, 2339.0], [1.2, 2343.0], [1.3, 2346.0], [1.4, 2350.0], [1.5, 2359.0], [1.6, 2366.0], [1.7, 2373.0], [1.8, 2377.0], [1.9, 2379.0], [2.0, 2388.0], [2.1, 2390.0], [2.2, 2393.0], [2.3, 2398.0], [2.4, 2402.0], [2.5, 2406.0], [2.6, 2413.0], [2.7, 2417.0], [2.8, 2420.0], [2.9, 2422.0], [3.0, 2427.0], [3.1, 2438.0], [3.2, 2444.0], [3.3, 2447.0], [3.4, 2453.0], [3.5, 2456.0], [3.6, 2460.0], [3.7, 2464.0], [3.8, 2468.0], [3.9, 2473.0], [4.0, 2477.0], [4.1, 2489.0], [4.2, 2499.0], [4.3, 2507.0], [4.4, 2514.0], [4.5, 2525.0], [4.6, 2534.0], [4.7, 2539.0], [4.8, 2546.0], [4.9, 2562.0], [5.0, 2565.0], [5.1, 2579.0], [5.2, 2591.0], [5.3, 2600.0], [5.4, 2607.0], [5.5, 2618.0], [5.6, 2625.0], [5.7, 2633.0], [5.8, 2655.0], [5.9, 2665.0], [6.0, 2676.0], [6.1, 2688.0], [6.2, 2696.0], [6.3, 2710.0], [6.4, 2724.0], [6.5, 2736.0], [6.6, 2742.0], [6.7, 2750.0], [6.8, 2759.0], [6.9, 2765.0], [7.0, 2772.0], [7.1, 2791.0], [7.2, 2797.0], [7.3, 2814.0], [7.4, 2837.0], [7.5, 2842.0], [7.6, 2846.0], [7.7, 2866.0], [7.8, 2883.0], [7.9, 2895.0], [8.0, 2905.0], [8.1, 2915.0], [8.2, 2924.0], [8.3, 2931.0], [8.4, 2939.0], [8.5, 2948.0], [8.6, 2959.0], [8.7, 2966.0], [8.8, 2970.0], [8.9, 2983.0], [9.0, 2996.0], [9.1, 3007.0], [9.2, 3017.0], [9.3, 3025.0], [9.4, 3027.0], [9.5, 3032.0], [9.6, 3042.0], [9.7, 3053.0], [9.8, 3065.0], [9.9, 3070.0], [10.0, 3092.0], [10.1, 3102.0], [10.2, 3108.0], [10.3, 3115.0], [10.4, 3125.0], [10.5, 3134.0], [10.6, 3151.0], [10.7, 3159.0], [10.8, 3171.0], [10.9, 3175.0], [11.0, 3184.0], [11.1, 3209.0], [11.2, 3223.0], [11.3, 3242.0], [11.4, 3252.0], [11.5, 3255.0], [11.6, 3269.0], [11.7, 3274.0], [11.8, 3283.0], [11.9, 3293.0], [12.0, 3296.0], [12.1, 3302.0], [12.2, 3307.0], [12.3, 3317.0], [12.4, 3322.0], [12.5, 3326.0], [12.6, 3331.0], [12.7, 3337.0], [12.8, 3340.0], [12.9, 3342.0], [13.0, 3350.0], [13.1, 3359.0], [13.2, 3371.0], [13.3, 3379.0], [13.4, 3386.0], [13.5, 3395.0], [13.6, 3405.0], [13.7, 3416.0], [13.8, 3421.0], [13.9, 3426.0], [14.0, 3436.0], [14.1, 3442.0], [14.2, 3451.0], [14.3, 3456.0], [14.4, 3464.0], [14.5, 3477.0], [14.6, 3488.0], [14.7, 3494.0], [14.8, 3513.0], [14.9, 3526.0], [15.0, 3542.0], [15.1, 3550.0], [15.2, 3559.0], [15.3, 3573.0], [15.4, 3581.0], [15.5, 3597.0], [15.6, 3606.0], [15.7, 3615.0], [15.8, 3625.0], [15.9, 3633.0], [16.0, 3649.0], [16.1, 3660.0], [16.2, 3674.0], [16.3, 3682.0], [16.4, 3693.0], [16.5, 3698.0], [16.6, 3708.0], [16.7, 3729.0], [16.8, 3741.0], [16.9, 3757.0], [17.0, 3775.0], [17.1, 3785.0], [17.2, 3796.0], [17.3, 3809.0], [17.4, 3816.0], [17.5, 3821.0], [17.6, 3833.0], [17.7, 3843.0], [17.8, 3848.0], [17.9, 3855.0], [18.0, 3861.0], [18.1, 3866.0], [18.2, 3873.0], [18.3, 3885.0], [18.4, 3893.0], [18.5, 3902.0], [18.6, 3911.0], [18.7, 3919.0], [18.8, 3928.0], [18.9, 3936.0], [19.0, 3947.0], [19.1, 3956.0], [19.2, 3965.0], [19.3, 3972.0], [19.4, 3986.0], [19.5, 4000.0], [19.6, 4003.0], [19.7, 4010.0], [19.8, 4024.0], [19.9, 4033.0], [20.0, 4042.0], [20.1, 4049.0], [20.2, 4052.0], [20.3, 4060.0], [20.4, 4063.0], [20.5, 4069.0], [20.6, 4075.0], [20.7, 4084.0], [20.8, 4089.0], [20.9, 4101.0], [21.0, 4112.0], [21.1, 4119.0], [21.2, 4125.0], [21.3, 4132.0], [21.4, 4144.0], [21.5, 4150.0], [21.6, 4156.0], [21.7, 4160.0], [21.8, 4170.0], [21.9, 4179.0], [22.0, 4182.0], [22.1, 4189.0], [22.2, 4199.0], [22.3, 4207.0], [22.4, 4214.0], [22.5, 4217.0], [22.6, 4224.0], [22.7, 4233.0], [22.8, 4237.0], [22.9, 4252.0], [23.0, 4256.0], [23.1, 4263.0], [23.2, 4274.0], [23.3, 4282.0], [23.4, 4288.0], [23.5, 4295.0], [23.6, 4304.0], [23.7, 4311.0], [23.8, 4320.0], [23.9, 4327.0], [24.0, 4331.0], [24.1, 4338.0], [24.2, 4348.0], [24.3, 4359.0], [24.4, 4367.0], [24.5, 4373.0], [24.6, 4380.0], [24.7, 4391.0], [24.8, 4403.0], [24.9, 4414.0], [25.0, 4425.0], [25.1, 4434.0], [25.2, 4446.0], [25.3, 4455.0], [25.4, 4468.0], [25.5, 4477.0], [25.6, 4482.0], [25.7, 4485.0], [25.8, 4495.0], [25.9, 4498.0], [26.0, 4511.0], [26.1, 4518.0], [26.2, 4523.0], [26.3, 4527.0], [26.4, 4535.0], [26.5, 4537.0], [26.6, 4541.0], [26.7, 4543.0], [26.8, 4548.0], [26.9, 4552.0], [27.0, 4562.0], [27.1, 4569.0], [27.2, 4575.0], [27.3, 4577.0], [27.4, 4581.0], [27.5, 4586.0], [27.6, 4593.0], [27.7, 4597.0], [27.8, 4605.0], [27.9, 4616.0], [28.0, 4619.0], [28.1, 4624.0], [28.2, 4628.0], [28.3, 4633.0], [28.4, 4638.0], [28.5, 4646.0], [28.6, 4658.0], [28.7, 4664.0], [28.8, 4668.0], [28.9, 4672.0], [29.0, 4676.0], [29.1, 4684.0], [29.2, 4692.0], [29.3, 4694.0], [29.4, 4703.0], [29.5, 4706.0], [29.6, 4712.0], [29.7, 4719.0], [29.8, 4728.0], [29.9, 4737.0], [30.0, 4744.0], [30.1, 4752.0], [30.2, 4753.0], [30.3, 4758.0], [30.4, 4764.0], [30.5, 4774.0], [30.6, 4780.0], [30.7, 4785.0], [30.8, 4791.0], [30.9, 4798.0], [31.0, 4801.0], [31.1, 4805.0], [31.2, 4810.0], [31.3, 4815.0], [31.4, 4821.0], [31.5, 4827.0], [31.6, 4836.0], [31.7, 4841.0], [31.8, 4852.0], [31.9, 4856.0], [32.0, 4864.0], [32.1, 4869.0], [32.2, 4873.0], [32.3, 4878.0], [32.4, 4880.0], [32.5, 4883.0], [32.6, 4886.0], [32.7, 4890.0], [32.8, 4895.0], [32.9, 4898.0], [33.0, 4903.0], [33.1, 4906.0], [33.2, 4913.0], [33.3, 4917.0], [33.4, 4920.0], [33.5, 4925.0], [33.6, 4934.0], [33.7, 4943.0], [33.8, 4946.0], [33.9, 4950.0], [34.0, 4959.0], [34.1, 4965.0], [34.2, 4972.0], [34.3, 4976.0], [34.4, 4984.0], [34.5, 4990.0], [34.6, 4994.0], [34.7, 4999.0], [34.8, 5006.0], [34.9, 5010.0], [35.0, 5014.0], [35.1, 5026.0], [35.2, 5028.0], [35.3, 5033.0], [35.4, 5040.0], [35.5, 5045.0], [35.6, 5048.0], [35.7, 5051.0], [35.8, 5056.0], [35.9, 5067.0], [36.0, 5072.0], [36.1, 5080.0], [36.2, 5086.0], [36.3, 5096.0], [36.4, 5100.0], [36.5, 5102.0], [36.6, 5106.0], [36.7, 5116.0], [36.8, 5120.0], [36.9, 5123.0], [37.0, 5125.0], [37.1, 5131.0], [37.2, 5136.0], [37.3, 5140.0], [37.4, 5147.0], [37.5, 5150.0], [37.6, 5154.0], [37.7, 5159.0], [37.8, 5165.0], [37.9, 5171.0], [38.0, 5172.0], [38.1, 5176.0], [38.2, 5181.0], [38.3, 5185.0], [38.4, 5188.0], [38.5, 5195.0], [38.6, 5199.0], [38.7, 5203.0], [38.8, 5207.0], [38.9, 5214.0], [39.0, 5218.0], [39.1, 5221.0], [39.2, 5224.0], [39.3, 5229.0], [39.4, 5233.0], [39.5, 5244.0], [39.6, 5247.0], [39.7, 5254.0], [39.8, 5259.0], [39.9, 5265.0], [40.0, 5270.0], [40.1, 5274.0], [40.2, 5281.0], [40.3, 5282.0], [40.4, 5284.0], [40.5, 5288.0], [40.6, 5292.0], [40.7, 5294.0], [40.8, 5299.0], [40.9, 5304.0], [41.0, 5307.0], [41.1, 5313.0], [41.2, 5321.0], [41.3, 5324.0], [41.4, 5330.0], [41.5, 5334.0], [41.6, 5339.0], [41.7, 5340.0], [41.8, 5350.0], [41.9, 5352.0], [42.0, 5354.0], [42.1, 5360.0], [42.2, 5365.0], [42.3, 5371.0], [42.4, 5376.0], [42.5, 5382.0], [42.6, 5388.0], [42.7, 5392.0], [42.8, 5395.0], [42.9, 5397.0], [43.0, 5402.0], [43.1, 5406.0], [43.2, 5413.0], [43.3, 5416.0], [43.4, 5419.0], [43.5, 5424.0], [43.6, 5426.0], [43.7, 5433.0], [43.8, 5439.0], [43.9, 5446.0], [44.0, 5450.0], [44.1, 5455.0], [44.2, 5459.0], [44.3, 5463.0], [44.4, 5466.0], [44.5, 5469.0], [44.6, 5473.0], [44.7, 5476.0], [44.8, 5483.0], [44.9, 5484.0], [45.0, 5490.0], [45.1, 5495.0], [45.2, 5496.0], [45.3, 5506.0], [45.4, 5509.0], [45.5, 5510.0], [45.6, 5513.0], [45.7, 5516.0], [45.8, 5519.0], [45.9, 5523.0], [46.0, 5524.0], [46.1, 5527.0], [46.2, 5533.0], [46.3, 5535.0], [46.4, 5540.0], [46.5, 5543.0], [46.6, 5545.0], [46.7, 5550.0], [46.8, 5553.0], [46.9, 5557.0], [47.0, 5562.0], [47.1, 5565.0], [47.2, 5573.0], [47.3, 5579.0], [47.4, 5584.0], [47.5, 5586.0], [47.6, 5591.0], [47.7, 5594.0], [47.8, 5598.0], [47.9, 5607.0], [48.0, 5609.0], [48.1, 5612.0], [48.2, 5613.0], [48.3, 5615.0], [48.4, 5624.0], [48.5, 5628.0], [48.6, 5633.0], [48.7, 5635.0], [48.8, 5642.0], [48.9, 5644.0], [49.0, 5650.0], [49.1, 5653.0], [49.2, 5657.0], [49.3, 5659.0], [49.4, 5667.0], [49.5, 5670.0], [49.6, 5681.0], [49.7, 5686.0], [49.8, 5690.0], [49.9, 5691.0], [50.0, 5694.0], [50.1, 5697.0], [50.2, 5701.0], [50.3, 5704.0], [50.4, 5706.0], [50.5, 5711.0], [50.6, 5712.0], [50.7, 5718.0], [50.8, 5721.0], [50.9, 5724.0], [51.0, 5728.0], [51.1, 5733.0], [51.2, 5736.0], [51.3, 5741.0], [51.4, 5747.0], [51.5, 5750.0], [51.6, 5756.0], [51.7, 5761.0], [51.8, 5766.0], [51.9, 5773.0], [52.0, 5774.0], [52.1, 5779.0], [52.2, 5782.0], [52.3, 5786.0], [52.4, 5788.0], [52.5, 5791.0], [52.6, 5795.0], [52.7, 5800.0], [52.8, 5802.0], [52.9, 5807.0], [53.0, 5810.0], [53.1, 5814.0], [53.2, 5818.0], [53.3, 5824.0], [53.4, 5830.0], [53.5, 5832.0], [53.6, 5834.0], [53.7, 5841.0], [53.8, 5844.0], [53.9, 5848.0], [54.0, 5854.0], [54.1, 5857.0], [54.2, 5859.0], [54.3, 5865.0], [54.4, 5870.0], [54.5, 5874.0], [54.6, 5874.0], [54.7, 5880.0], [54.8, 5884.0], [54.9, 5888.0], [55.0, 5893.0], [55.1, 5896.0], [55.2, 5900.0], [55.3, 5904.0], [55.4, 5908.0], [55.5, 5913.0], [55.6, 5916.0], [55.7, 5918.0], [55.8, 5923.0], [55.9, 5931.0], [56.0, 5936.0], [56.1, 5942.0], [56.2, 5945.0], [56.3, 5948.0], [56.4, 5954.0], [56.5, 5960.0], [56.6, 5963.0], [56.7, 5965.0], [56.8, 5975.0], [56.9, 5981.0], [57.0, 5984.0], [57.1, 5987.0], [57.2, 5990.0], [57.3, 5994.0], [57.4, 6000.0], [57.5, 6002.0], [57.6, 6005.0], [57.7, 6011.0], [57.8, 6017.0], [57.9, 6027.0], [58.0, 6032.0], [58.1, 6035.0], [58.2, 6037.0], [58.3, 6043.0], [58.4, 6046.0], [58.5, 6055.0], [58.6, 6059.0], [58.7, 6063.0], [58.8, 6066.0], [58.9, 6072.0], [59.0, 6083.0], [59.1, 6089.0], [59.2, 6096.0], [59.3, 6099.0], [59.4, 6105.0], [59.5, 6108.0], [59.6, 6110.0], [59.7, 6112.0], [59.8, 6120.0], [59.9, 6124.0], [60.0, 6130.0], [60.1, 6135.0], [60.2, 6141.0], [60.3, 6150.0], [60.4, 6153.0], [60.5, 6160.0], [60.6, 6164.0], [60.7, 6166.0], [60.8, 6174.0], [60.9, 6183.0], [61.0, 6186.0], [61.1, 6189.0], [61.2, 6193.0], [61.3, 6198.0], [61.4, 6204.0], [61.5, 6209.0], [61.6, 6212.0], [61.7, 6217.0], [61.8, 6225.0], [61.9, 6229.0], [62.0, 6234.0], [62.1, 6238.0], [62.2, 6241.0], [62.3, 6247.0], [62.4, 6251.0], [62.5, 6256.0], [62.6, 6261.0], [62.7, 6266.0], [62.8, 6268.0], [62.9, 6274.0], [63.0, 6285.0], [63.1, 6292.0], [63.2, 6299.0], [63.3, 6302.0], [63.4, 6306.0], [63.5, 6307.0], [63.6, 6311.0], [63.7, 6317.0], [63.8, 6319.0], [63.9, 6325.0], [64.0, 6328.0], [64.1, 6332.0], [64.2, 6336.0], [64.3, 6339.0], [64.4, 6345.0], [64.5, 6353.0], [64.6, 6357.0], [64.7, 6360.0], [64.8, 6365.0], [64.9, 6372.0], [65.0, 6377.0], [65.1, 6380.0], [65.2, 6384.0], [65.3, 6387.0], [65.4, 6394.0], [65.5, 6399.0], [65.6, 6402.0], [65.7, 6407.0], [65.8, 6412.0], [65.9, 6416.0], [66.0, 6421.0], [66.1, 6428.0], [66.2, 6435.0], [66.3, 6441.0], [66.4, 6447.0], [66.5, 6448.0], [66.6, 6452.0], [66.7, 6458.0], [66.8, 6463.0], [66.9, 6474.0], [67.0, 6476.0], [67.1, 6485.0], [67.2, 6488.0], [67.3, 6492.0], [67.4, 6499.0], [67.5, 6503.0], [67.6, 6507.0], [67.7, 6510.0], [67.8, 6516.0], [67.9, 6520.0], [68.0, 6524.0], [68.1, 6527.0], [68.2, 6529.0], [68.3, 6537.0], [68.4, 6540.0], [68.5, 6542.0], [68.6, 6549.0], [68.7, 6554.0], [68.8, 6558.0], [68.9, 6561.0], [69.0, 6573.0], [69.1, 6579.0], [69.2, 6583.0], [69.3, 6587.0], [69.4, 6592.0], [69.5, 6597.0], [69.6, 6609.0], [69.7, 6612.0], [69.8, 6618.0], [69.9, 6628.0], [70.0, 6632.0], [70.1, 6639.0], [70.2, 6645.0], [70.3, 6651.0], [70.4, 6668.0], [70.5, 6673.0], [70.6, 6683.0], [70.7, 6690.0], [70.8, 6696.0], [70.9, 6703.0], [71.0, 6705.0], [71.1, 6715.0], [71.2, 6722.0], [71.3, 6725.0], [71.4, 6734.0], [71.5, 6742.0], [71.6, 6757.0], [71.7, 6763.0], [71.8, 6773.0], [71.9, 6783.0], [72.0, 6788.0], [72.1, 6792.0], [72.2, 6795.0], [72.3, 6800.0], [72.4, 6803.0], [72.5, 6808.0], [72.6, 6816.0], [72.7, 6824.0], [72.8, 6830.0], [72.9, 6832.0], [73.0, 6839.0], [73.1, 6851.0], [73.2, 6857.0], [73.3, 6862.0], [73.4, 6869.0], [73.5, 6875.0], [73.6, 6879.0], [73.7, 6890.0], [73.8, 6895.0], [73.9, 6905.0], [74.0, 6912.0], [74.1, 6920.0], [74.2, 6925.0], [74.3, 6939.0], [74.4, 6946.0], [74.5, 6954.0], [74.6, 6959.0], [74.7, 6963.0], [74.8, 6967.0], [74.9, 6972.0], [75.0, 6979.0], [75.1, 6987.0], [75.2, 6991.0], [75.3, 7001.0], [75.4, 7005.0], [75.5, 7012.0], [75.6, 7020.0], [75.7, 7024.0], [75.8, 7034.0], [75.9, 7038.0], [76.0, 7043.0], [76.1, 7050.0], [76.2, 7054.0], [76.3, 7058.0], [76.4, 7065.0], [76.5, 7069.0], [76.6, 7077.0], [76.7, 7088.0], [76.8, 7093.0], [76.9, 7101.0], [77.0, 7110.0], [77.1, 7114.0], [77.2, 7119.0], [77.3, 7123.0], [77.4, 7126.0], [77.5, 7136.0], [77.6, 7140.0], [77.7, 7146.0], [77.8, 7151.0], [77.9, 7162.0], [78.0, 7170.0], [78.1, 7177.0], [78.2, 7181.0], [78.3, 7184.0], [78.4, 7190.0], [78.5, 7202.0], [78.6, 7203.0], [78.7, 7210.0], [78.8, 7215.0], [78.9, 7218.0], [79.0, 7224.0], [79.1, 7228.0], [79.2, 7236.0], [79.3, 7241.0], [79.4, 7247.0], [79.5, 7254.0], [79.6, 7259.0], [79.7, 7265.0], [79.8, 7272.0], [79.9, 7276.0], [80.0, 7280.0], [80.1, 7287.0], [80.2, 7298.0], [80.3, 7308.0], [80.4, 7312.0], [80.5, 7318.0], [80.6, 7328.0], [80.7, 7343.0], [80.8, 7350.0], [80.9, 7358.0], [81.0, 7362.0], [81.1, 7367.0], [81.2, 7374.0], [81.3, 7382.0], [81.4, 7385.0], [81.5, 7401.0], [81.6, 7414.0], [81.7, 7420.0], [81.8, 7427.0], [81.9, 7436.0], [82.0, 7446.0], [82.1, 7454.0], [82.2, 7459.0], [82.3, 7467.0], [82.4, 7474.0], [82.5, 7481.0], [82.6, 7486.0], [82.7, 7506.0], [82.8, 7510.0], [82.9, 7515.0], [83.0, 7519.0], [83.1, 7527.0], [83.2, 7533.0], [83.3, 7539.0], [83.4, 7546.0], [83.5, 7554.0], [83.6, 7558.0], [83.7, 7575.0], [83.8, 7586.0], [83.9, 7605.0], [84.0, 7612.0], [84.1, 7622.0], [84.2, 7637.0], [84.3, 7647.0], [84.4, 7655.0], [84.5, 7663.0], [84.6, 7677.0], [84.7, 7685.0], [84.8, 7702.0], [84.9, 7715.0], [85.0, 7725.0], [85.1, 7736.0], [85.2, 7741.0], [85.3, 7753.0], [85.4, 7761.0], [85.5, 7776.0], [85.6, 7780.0], [85.7, 7794.0], [85.8, 7801.0], [85.9, 7810.0], [86.0, 7823.0], [86.1, 7830.0], [86.2, 7832.0], [86.3, 7840.0], [86.4, 7851.0], [86.5, 7863.0], [86.6, 7869.0], [86.7, 7873.0], [86.8, 7891.0], [86.9, 7903.0], [87.0, 7919.0], [87.1, 7931.0], [87.2, 7940.0], [87.3, 7948.0], [87.4, 7955.0], [87.5, 7960.0], [87.6, 7973.0], [87.7, 7991.0], [87.8, 8003.0], [87.9, 8017.0], [88.0, 8024.0], [88.1, 8035.0], [88.2, 8043.0], [88.3, 8050.0], [88.4, 8059.0], [88.5, 8066.0], [88.6, 8073.0], [88.7, 8082.0], [88.8, 8089.0], [88.9, 8102.0], [89.0, 8119.0], [89.1, 8140.0], [89.2, 8162.0], [89.3, 8170.0], [89.4, 8175.0], [89.5, 8210.0], [89.6, 8220.0], [89.7, 8239.0], [89.8, 8252.0], [89.9, 8267.0], [90.0, 8286.0], [90.1, 8310.0], [90.2, 8330.0], [90.3, 8341.0], [90.4, 8365.0], [90.5, 8375.0], [90.6, 8398.0], [90.7, 8416.0], [90.8, 8431.0], [90.9, 8451.0], [91.0, 8464.0], [91.1, 8476.0], [91.2, 8488.0], [91.3, 8516.0], [91.4, 8533.0], [91.5, 8543.0], [91.6, 8575.0], [91.7, 8590.0], [91.8, 8629.0], [91.9, 8691.0], [92.0, 8704.0], [92.1, 8733.0], [92.2, 8758.0], [92.3, 8769.0], [92.4, 8792.0], [92.5, 8823.0], [92.6, 8837.0], [92.7, 8852.0], [92.8, 8867.0], [92.9, 8878.0], [93.0, 8895.0], [93.1, 8917.0], [93.2, 8954.0], [93.3, 8961.0], [93.4, 8991.0], [93.5, 9021.0], [93.6, 9033.0], [93.7, 9095.0], [93.8, 9135.0], [93.9, 9157.0], [94.0, 9171.0], [94.1, 9195.0], [94.2, 9254.0], [94.3, 9269.0], [94.4, 9310.0], [94.5, 9342.0], [94.6, 9373.0], [94.7, 9392.0], [94.8, 9407.0], [94.9, 9432.0], [95.0, 9450.0], [95.1, 9475.0], [95.2, 9524.0], [95.3, 9560.0], [95.4, 9590.0], [95.5, 9635.0], [95.6, 9686.0], [95.7, 9714.0], [95.8, 9793.0], [95.9, 9828.0], [96.0, 9866.0], [96.1, 9927.0], [96.2, 9982.0], [96.3, 10029.0], [96.4, 10105.0], [96.5, 10156.0], [96.6, 10197.0], [96.7, 10309.0], [96.8, 10366.0], [96.9, 10454.0], [97.0, 10468.0], [97.1, 10584.0], [97.2, 10688.0], [97.3, 10728.0], [97.4, 10824.0], [97.5, 10880.0], [97.6, 10981.0], [97.7, 11097.0], [97.8, 11253.0], [97.9, 11427.0], [98.0, 11519.0], [98.1, 11632.0], [98.2, 11724.0], [98.3, 11787.0], [98.4, 11913.0], [98.5, 12116.0], [98.6, 12238.0], [98.7, 12303.0], [98.8, 12397.0], [98.9, 12701.0], [99.0, 13027.0], [99.1, 13160.0], [99.2, 13302.0], [99.3, 13511.0], [99.4, 13679.0], [99.5, 13873.0], [99.6, 14381.0], [99.7, 15103.0], [99.8, 17234.0], [99.9, 18648.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 134.0, "series": [{"data": [[2100.0, 5.0], [2300.0, 98.0], [2200.0, 19.0], [2400.0, 97.0], [2500.0, 56.0], [2600.0, 48.0], [2700.0, 51.0], [2800.0, 39.0], [2900.0, 56.0], [3000.0, 53.0], [3100.0, 52.0], [3300.0, 76.0], [3200.0, 53.0], [3400.0, 61.0], [3500.0, 43.0], [3600.0, 50.0], [3700.0, 37.0], [3800.0, 65.0], [3900.0, 52.0], [4000.0, 72.0], [4300.0, 65.0], [4200.0, 68.0], [4100.0, 70.0], [4600.0, 84.0], [4500.0, 94.0], [4400.0, 59.0], [4700.0, 84.0], [4800.0, 101.0], [4900.0, 94.0], [5000.0, 85.0], [5100.0, 117.0], [5300.0, 110.0], [5200.0, 114.0], [5500.0, 134.0], [5600.0, 121.0], [5400.0, 120.0], [5700.0, 132.0], [5800.0, 129.0], [5900.0, 115.0], [6000.0, 99.0], [6100.0, 105.0], [6200.0, 100.0], [6300.0, 117.0], [6600.0, 69.0], [6400.0, 99.0], [6500.0, 109.0], [6900.0, 74.0], [6700.0, 74.0], [6800.0, 82.0], [7000.0, 82.0], [7100.0, 82.0], [7200.0, 94.0], [7300.0, 64.0], [7400.0, 62.0], [7600.0, 48.0], [7500.0, 62.0], [7700.0, 51.0], [7800.0, 56.0], [7900.0, 47.0], [8000.0, 56.0], [8100.0, 33.0], [8400.0, 33.0], [8700.0, 23.0], [8300.0, 29.0], [8600.0, 14.0], [8500.0, 24.0], [8200.0, 30.0], [8800.0, 31.0], [9200.0, 14.0], [8900.0, 21.0], [9100.0, 20.0], [9000.0, 15.0], [9300.0, 21.0], [9400.0, 19.0], [9700.0, 10.0], [9500.0, 15.0], [9600.0, 11.0], [9900.0, 9.0], [9800.0, 12.0], [10200.0, 4.0], [10100.0, 13.0], [10000.0, 6.0], [10600.0, 5.0], [10400.0, 10.0], [10300.0, 8.0], [10700.0, 8.0], [10500.0, 5.0], [10800.0, 8.0], [11200.0, 5.0], [11100.0, 2.0], [10900.0, 5.0], [11000.0, 4.0], [11700.0, 8.0], [11600.0, 5.0], [11400.0, 6.0], [11300.0, 2.0], [11500.0, 3.0], [11800.0, 4.0], [12200.0, 7.0], [12000.0, 3.0], [11900.0, 2.0], [12100.0, 3.0], [12700.0, 3.0], [12400.0, 2.0], [12300.0, 7.0], [12500.0, 2.0], [12800.0, 2.0], [13300.0, 5.0], [12900.0, 1.0], [13000.0, 3.0], [13200.0, 2.0], [13100.0, 4.0], [13600.0, 4.0], [13800.0, 4.0], [13500.0, 2.0], [13700.0, 2.0], [13400.0, 1.0], [14300.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [14000.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [15200.0, 1.0], [15600.0, 1.0], [17000.0, 1.0], [17200.0, 1.0], [17400.0, 2.0], [17700.0, 1.0], [18100.0, 1.0], [18700.0, 1.0], [18600.0, 2.0], [21700.0, 1.0], [22500.0, 1.0], [21800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.952380952380953, "minX": 1.6023786E12, "maxY": 12.0, "series": [{"data": [[1.6023786E12, 12.0], [1.60238082E12, 12.0], [1.60238112E12, 10.952380952380953], [1.6023792E12, 12.0], [1.60238022E12, 12.0], [1.6023789E12, 12.0], [1.60238052E12, 12.0], [1.60237962E12, 12.0], [1.60237902E12, 12.0], [1.60237992E12, 12.0], [1.60238094E12, 12.0], [1.60237932E12, 12.0], [1.60238034E12, 12.0], [1.60238064E12, 12.0], [1.60237872E12, 12.0], [1.60237974E12, 12.0], [1.60238004E12, 12.0], [1.60237884E12, 12.0], [1.60238106E12, 12.0], [1.60237944E12, 12.0], [1.60238046E12, 12.0], [1.60237914E12, 12.0], [1.60238076E12, 12.0], [1.60237986E12, 12.0], [1.60237926E12, 12.0], [1.60238016E12, 12.0], [1.60237956E12, 12.0], [1.60238058E12, 12.0], [1.60238088E12, 12.0], [1.60237896E12, 12.0], [1.60237998E12, 12.0], [1.60237866E12, 12.0], [1.60238028E12, 12.0], [1.60237908E12, 12.0], [1.60237938E12, 12.0], [1.60237878E12, 12.0], [1.60237968E12, 12.0], [1.6023807E12, 12.0], [1.602381E12, 12.0], [1.6023801E12, 12.0], [1.6023804E12, 12.0], [1.6023795E12, 12.0], [1.6023798E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60238112E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5121.0, "minX": 1.0, "maxY": 7239.0, "series": [{"data": [[8.0, 5121.0], [4.0, 7239.0], [2.0, 7190.0], [1.0, 6887.0], [9.0, 6225.0], [10.0, 6542.0], [5.0, 7126.0], [11.0, 6583.0], [12.0, 5824.579648580814], [6.0, 7018.0], [3.0, 7238.0], [7.0, 6961.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5826.5179190751505]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 352.31666666666666, "minX": 1.6023786E12, "maxY": 815998.05, "series": [{"data": [[1.6023786E12, 320992.88333333336], [1.60238082E12, 604993.5166666667], [1.60238112E12, 268510.8], [1.6023792E12, 815998.05], [1.60238022E12, 363025.15], [1.6023789E12, 549386.0833333334], [1.60238052E12, 790836.25], [1.60237962E12, 774852.0666666667], [1.60237902E12, 277929.88333333336], [1.60237992E12, 687256.7666666667], [1.60238094E12, 542834.5166666667], [1.60237932E12, 640424.1], [1.60238034E12, 530757.65], [1.60238064E12, 581818.45], [1.60237872E12, 473558.2166666667], [1.60237974E12, 464389.5833333333], [1.60238004E12, 521134.2], [1.60237884E12, 603464.2166666667], [1.60238106E12, 499161.43333333335], [1.60237944E12, 591128.3333333334], [1.60238046E12, 751768.95], [1.60237914E12, 721081.4], [1.60238076E12, 494325.86666666664], [1.60237986E12, 616231.9166666666], [1.60237926E12, 614208.4333333333], [1.60238016E12, 643895.4], [1.60237956E12, 576076.4], [1.60238058E12, 626328.65], [1.60238088E12, 525709.7166666667], [1.60237896E12, 361095.6], [1.60237998E12, 497487.31666666665], [1.60237866E12, 720493.9], [1.60238028E12, 291958.75], [1.60237908E12, 499675.36666666664], [1.60237938E12, 758073.3], [1.60237878E12, 552408.0], [1.60237968E12, 502236.9166666667], [1.6023807E12, 531949.8333333334], [1.602381E12, 590257.7166666667], [1.6023801E12, 503065.85], [1.6023804E12, 582718.85], [1.6023795E12, 563314.9666666667], [1.6023798E12, 545804.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6023786E12, 352.31666666666666], [1.60238082E12, 865.3], [1.60238112E12, 482.48333333333335], [1.6023792E12, 796.7], [1.60238022E12, 514.7833333333333], [1.6023789E12, 917.65], [1.60238052E12, 814.0833333333334], [1.60237962E12, 904.7833333333333], [1.60237902E12, 1472.9], [1.60237992E12, 630.2666666666667], [1.60238094E12, 1112.6666666666667], [1.60237932E12, 1064.3666666666666], [1.60238034E12, 1081.4], [1.60238064E12, 1118.0666666666666], [1.60237872E12, 838.15], [1.60237974E12, 748.8666666666667], [1.60238004E12, 933.5166666666667], [1.60237884E12, 984.25], [1.60238106E12, 772.4], [1.60237944E12, 793.15], [1.60238046E12, 831.0333333333333], [1.60237914E12, 840.7], [1.60238076E12, 864.6833333333333], [1.60237986E12, 831.7333333333333], [1.60237926E12, 1087.2166666666667], [1.60238016E12, 1018.85], [1.60237956E12, 1005.4166666666666], [1.60238058E12, 1090.55], [1.60238088E12, 1201.6666666666667], [1.60237896E12, 641.8166666666667], [1.60237998E12, 898.8166666666667], [1.60237866E12, 658.5666666666667], [1.60238028E12, 1265.25], [1.60237908E12, 831.15], [1.60237938E12, 1026.0166666666667], [1.60237878E12, 905.1333333333333], [1.60237968E12, 1264.7666666666667], [1.6023807E12, 1048.8], [1.602381E12, 777.4], [1.6023801E12, 802.3333333333334], [1.6023804E12, 835.8166666666667], [1.6023795E12, 927.1], [1.6023798E12, 724.4166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60238112E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3720.5707070707062, "minX": 1.6023786E12, "maxY": 9796.888888888889, "series": [{"data": [[1.6023786E12, 6551.478260869565], [1.60238082E12, 6096.106194690263], [1.60238112E12, 7103.634920634921], [1.6023792E12, 6829.885714285712], [1.60238022E12, 9796.888888888889], [1.6023789E12, 5731.67741935484], [1.60238052E12, 6820.177570093459], [1.60237962E12, 5587.117647058824], [1.60237902E12, 3720.5707070707062], [1.60237992E12, 7352.195402298849], [1.60238094E12, 5063.578231292514], [1.60237932E12, 5135.864285714282], [1.60238034E12, 4979.197278911563], [1.60238064E12, 5028.195945945943], [1.60237872E12, 6286.579831932774], [1.60237974E12, 7160.870000000003], [1.60238004E12, 5084.22727272727], [1.60237884E12, 5656.794117647057], [1.60238106E12, 6850.971153846153], [1.60237944E12, 6584.576923076925], [1.60238046E12, 6565.486238532111], [1.60237914E12, 6553.936363636362], [1.60238076E12, 6372.517543859648], [1.60237986E12, 7114.4495412844035], [1.60237926E12, 4967.513888888891], [1.60238016E12, 5135.357664233576], [1.60237956E12, 5565.818181818181], [1.60238058E12, 4867.4027777777765], [1.60238088E12, 4534.113207547172], [1.60237896E12, 8047.5666666666675], [1.60237998E12, 6363.039370078741], [1.60237866E12, 7633.9222222222215], [1.60238028E12, 4264.695402298849], [1.60237908E12, 5917.672268907564], [1.60237938E12, 5389.110294117645], [1.60237878E12, 5231.789062499999], [1.60237968E12, 4509.577380952383], [1.6023807E12, 5096.195652173912], [1.602381E12, 6943.067961165047], [1.6023801E12, 6801.419642857142], [1.6023804E12, 6059.051282051282], [1.6023795E12, 6132.426229508197], [1.6023798E12, 7002.567010309278]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60238112E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3719.91414141414, "minX": 1.6023786E12, "maxY": 9794.805555555558, "series": [{"data": [[1.6023786E12, 6548.586956521738], [1.60238082E12, 6094.070796460181], [1.60238112E12, 7102.269841269841], [1.6023792E12, 6825.780952380951], [1.60238022E12, 9794.805555555558], [1.6023789E12, 5729.209677419359], [1.60238052E12, 6817.542056074768], [1.60237962E12, 5584.268907563026], [1.60237902E12, 3719.91414141414], [1.60237992E12, 7348.49425287356], [1.60238094E12, 5062.197278911565], [1.60237932E12, 5133.900000000003], [1.60238034E12, 4977.857142857142], [1.60238064E12, 5026.750000000004], [1.60237872E12, 6284.504201680671], [1.60237974E12, 7158.540000000001], [1.60238004E12, 5082.39393939394], [1.60237884E12, 5654.477941176468], [1.60238106E12, 6849.134615384614], [1.60237944E12, 6582.038461538459], [1.60238046E12, 6563.08256880734], [1.60237914E12, 6550.8727272727265], [1.60238076E12, 6370.90350877193], [1.60237986E12, 7111.678899082569], [1.60237926E12, 4965.347222222223], [1.60238016E12, 5133.094890510948], [1.60237956E12, 5563.810606060605], [1.60238058E12, 4865.868055555552], [1.60238088E12, 4532.924528301888], [1.60237896E12, 8045.466666666667], [1.60237998E12, 6361.078740157479], [1.60237866E12, 7630.188888888891], [1.60238028E12, 4263.948275862071], [1.60237908E12, 5915.697478991595], [1.60237938E12, 5386.661764705885], [1.60237878E12, 5229.703125], [1.60237968E12, 4508.2142857142835], [1.6023807E12, 5094.811594202898], [1.602381E12, 6940.951456310679], [1.6023801E12, 6799.151785714286], [1.6023804E12, 6057.188034188031], [1.6023795E12, 6130.065573770492], [1.6023798E12, 6999.608247422679]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60238112E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06289308176100629, "minX": 1.6023786E12, "maxY": 3.0000000000000013, "series": [{"data": [[1.6023786E12, 3.0000000000000013], [1.60238082E12, 0.09734513274336284], [1.60238112E12, 0.12698412698412698], [1.6023792E12, 0.14285714285714288], [1.60238022E12, 0.1805555555555556], [1.6023789E12, 0.07258064516129031], [1.60238052E12, 0.10280373831775703], [1.60237962E12, 0.10084033613445378], [1.60237902E12, 0.07575757575757576], [1.60237992E12, 0.0689655172413793], [1.60238094E12, 0.0884353741496599], [1.60237932E12, 0.08571428571428576], [1.60238034E12, 0.09523809523809523], [1.60238064E12, 0.0810810810810811], [1.60237872E12, 0.12605042016806725], [1.60237974E12, 0.13999999999999999], [1.60238004E12, 0.10606060606060608], [1.60237884E12, 0.11764705882352944], [1.60238106E12, 0.10576923076923078], [1.60237944E12, 0.12500000000000003], [1.60238046E12, 0.08256880733944955], [1.60237914E12, 0.11818181818181822], [1.60238076E12, 0.08771929824561402], [1.60237986E12, 0.12844036697247707], [1.60237926E12, 0.09027777777777779], [1.60238016E12, 0.09489051094890509], [1.60237956E12, 0.1136363636363637], [1.60238058E12, 0.10416666666666666], [1.60238088E12, 0.06289308176100629], [1.60237896E12, 0.17777777777777778], [1.60237998E12, 0.10236220472440942], [1.60237866E12, 0.2], [1.60238028E12, 0.07471264367816095], [1.60237908E12, 0.08403361344537819], [1.60237938E12, 0.10294117647058824], [1.60237878E12, 0.078125], [1.60237968E12, 0.07738095238095238], [1.6023807E12, 0.09420289855072463], [1.602381E12, 0.08737864077669905], [1.6023801E12, 0.11607142857142855], [1.6023804E12, 0.10256410256410256], [1.6023795E12, 0.10655737704918038], [1.6023798E12, 0.15463917525773196]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60238112E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2129.0, "minX": 1.6023786E12, "maxY": 22552.0, "series": [{"data": [[1.6023786E12, 9286.0], [1.60238082E12, 8914.0], [1.60238112E12, 9310.0], [1.6023792E12, 9374.0], [1.60238022E12, 13380.0], [1.6023789E12, 8455.0], [1.60238052E12, 8867.0], [1.60237962E12, 12311.0], [1.60237902E12, 7708.0], [1.60237992E12, 17786.0], [1.60238094E12, 10584.0], [1.60237932E12, 7931.0], [1.60238034E12, 7838.0], [1.60238064E12, 8373.0], [1.60237872E12, 15682.0], [1.60237974E12, 13660.0], [1.60238004E12, 8308.0], [1.60237884E12, 15191.0], [1.60238106E12, 10981.0], [1.60237944E12, 9417.0], [1.60238046E12, 9481.0], [1.60237914E12, 10462.0], [1.60238076E12, 9003.0], [1.60237986E12, 14057.0], [1.60237926E12, 7543.0], [1.60238016E12, 7919.0], [1.60237956E12, 8268.0], [1.60238058E12, 7394.0], [1.60238088E12, 9255.0], [1.60237896E12, 12301.0], [1.60237998E12, 22552.0], [1.60237866E12, 10824.0], [1.60238028E12, 10197.0], [1.60237908E12, 10272.0], [1.60237938E12, 10690.0], [1.60237878E12, 11125.0], [1.60237968E12, 11564.0], [1.6023807E12, 7823.0], [1.602381E12, 12366.0], [1.6023801E12, 13835.0], [1.6023804E12, 9583.0], [1.6023795E12, 9797.0], [1.6023798E12, 11630.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6023786E12, 3099.0], [1.60238082E12, 4405.949997961521], [1.60238112E12, 5121.0], [1.6023792E12, 4348.0], [1.60238022E12, 5832.0], [1.6023789E12, 3288.9999990463257], [1.60238052E12, 3522.0], [1.60237962E12, 2669.5999994277954], [1.60237902E12, 2309.7909999525546], [1.60237992E12, 4543.0], [1.60238094E12, 2332.65999982357], [1.60237932E12, 2326.6079989242553], [1.60238034E12, 2231.3279998588564], [1.60238064E12, 2405.501999218464], [1.60237872E12, 2684.959999656677], [1.60237974E12, 4424.0], [1.60238004E12, 2508.795991501808], [1.60237884E12, 3368.406997419596], [1.60238106E12, 3597.0], [1.60237944E12, 3848.0], [1.60238046E12, 4856.0], [1.60237914E12, 4066.0], [1.60238076E12, 2837.1749998629093], [1.60237986E12, 3682.0], [1.60237926E12, 2753.659992671013], [1.60238016E12, 3633.665997598171], [1.60237956E12, 2310.7879998731614], [1.60238058E12, 2261.3049999654295], [1.60238088E12, 2245.2799995422365], [1.60237896E12, 5104.0], [1.60237998E12, 2329.1039991760254], [1.60237866E12, 4068.0], [1.60238028E12, 2321.8749997913837], [1.60237908E12, 3318.999997854233], [1.60237938E12, 2291.79599960804], [1.60237878E12, 2379.80499984622], [1.60237968E12, 2136.814999395609], [1.6023807E12, 2619.0809890305995], [1.602381E12, 3771.0], [1.6023801E12, 3546.237999622822], [1.6023804E12, 3303.3639993810652], [1.6023795E12, 4219.518996568918], [1.6023798E12, 3633.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6023786E12, 3099.0], [1.60238082E12, 4413.6450008153915], [1.60238112E12, 5121.0], [1.6023792E12, 4350.321800475121], [1.60238022E12, 5832.0], [1.6023789E12, 3292.6000003814697], [1.60238052E12, 3531.5496014213563], [1.60237962E12, 2671.760000228882], [1.60237902E12, 2309.970100018978], [1.60237992E12, 4543.0], [1.60238094E12, 2333.326000070572], [1.60237932E12, 2330.668800430298], [1.60238034E12, 2231.8608000564577], [1.60238064E12, 2408.4522003126144], [1.60237872E12, 2686.256000137329], [1.60237974E12, 4424.0], [1.60238004E12, 2540.8756033992768], [1.60237884E12, 3378.147701032162], [1.60238106E12, 3600.002000761032], [1.60237944E12, 3849.975000500679], [1.60238046E12, 4858.3140002727505], [1.60237914E12, 4077.96690128088], [1.60238076E12, 2837.6925000548363], [1.60237986E12, 3713.2390036821366], [1.60237926E12, 2781.3260029315948], [1.60238016E12, 3642.7326009607314], [1.60237956E12, 2311.2668000507356], [1.60238058E12, 2261.4355000138285], [1.60238088E12, 2247.0080001831057], [1.60237896E12, 5104.0], [1.60237998E12, 2332.21440032959], [1.60237866E12, 4068.0], [1.60238028E12, 2322.6625000834465], [1.60237908E12, 3327.100000858307], [1.60237938E12, 2293.275600156784], [1.60237878E12, 2380.385500061512], [1.60237968E12, 2139.0965002417565], [1.6023807E12, 2660.48910438776], [1.602381E12, 3778.370402469635], [1.6023801E12, 3547.6618001508714], [1.6023804E12, 3305.7004002475737], [1.6023795E12, 4232.470901372432], [1.6023798E12, 3633.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6023786E12, 3099.0], [1.60238082E12, 4410.224998980761], [1.60238112E12, 5121.0], [1.6023792E12, 4348.3289994061], [1.60238022E12, 5832.0], [1.6023789E12, 3290.999999523163], [1.60238052E12, 3525.5879982233046], [1.60237962E12, 2670.7999997138977], [1.60237902E12, 2309.890499976277], [1.60237992E12, 4543.0], [1.60238094E12, 2333.029999911785], [1.60237932E12, 2328.8639994621276], [1.60238034E12, 2231.623999929428], [1.60238064E12, 2407.140999609232], [1.60237872E12, 2685.6799998283386], [1.60237974E12, 4424.0], [1.60238004E12, 2526.617995750904], [1.60237884E12, 3373.818498709798], [1.60238106E12, 3597.0], [1.60237944E12, 3848.0], [1.60238046E12, 4857.169999659061], [1.60237914E12, 4072.5944983989], [1.60238076E12, 2837.4624999314547], [1.60237986E12, 3697.7949953973293], [1.60237926E12, 2769.0299963355064], [1.60238016E12, 3638.7029987990854], [1.60237956E12, 2311.0539999365806], [1.60238058E12, 2261.3774999827147], [1.60238088E12, 2246.239999771118], [1.60237896E12, 5104.0], [1.60237998E12, 2330.831999588013], [1.60237866E12, 4068.0], [1.60238028E12, 2322.312499895692], [1.60237908E12, 3323.4999989271164], [1.60237938E12, 2292.6179998040197], [1.60237878E12, 2380.12749992311], [1.60237968E12, 2138.0824996978045], [1.6023807E12, 2642.0854945152996], [1.602381E12, 3771.0], [1.6023801E12, 3547.028999811411], [1.6023804E12, 3304.661999690533], [1.6023795E12, 4226.714498284459], [1.6023798E12, 3633.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6023786E12, 3099.0], [1.60238082E12, 4404.0], [1.60238112E12, 5121.0], [1.6023792E12, 4348.0], [1.60238022E12, 5832.0], [1.6023789E12, 3285.0], [1.60238052E12, 3522.0], [1.60237962E12, 2668.0], [1.60237902E12, 2309.0], [1.60237992E12, 4543.0], [1.60238094E12, 2331.0], [1.60237932E12, 2318.0], [1.60238034E12, 2230.0], [1.60238064E12, 2398.0], [1.60237872E12, 2684.0], [1.60237974E12, 4424.0], [1.60238004E12, 2456.0], [1.60237884E12, 3350.0], [1.60238106E12, 3597.0], [1.60237944E12, 3848.0], [1.60238046E12, 4856.0], [1.60237914E12, 4066.0], [1.60238076E12, 2837.0], [1.60237986E12, 3682.0], [1.60237926E12, 2689.0], [1.60238016E12, 3616.0], [1.60237956E12, 2310.0], [1.60238058E12, 2261.0], [1.60238088E12, 2240.0], [1.60237896E12, 5104.0], [1.60237998E12, 2325.0], [1.60237866E12, 4068.0], [1.60238028E12, 2319.0], [1.60237908E12, 3313.0], [1.60237938E12, 2289.0], [1.60237878E12, 2379.0], [1.60237968E12, 2129.0], [1.6023807E12, 2536.0], [1.602381E12, 3771.0], [1.6023801E12, 3546.0], [1.6023804E12, 3302.0], [1.6023795E12, 4207.0], [1.6023798E12, 3633.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6023786E12, 6771.5], [1.60238082E12, 6063.0], [1.60238112E12, 7126.0], [1.6023792E12, 6991.0], [1.60238022E12, 9854.5], [1.6023789E12, 5696.5], [1.60238052E12, 7008.0], [1.60237962E12, 5425.0], [1.60237902E12, 3430.5], [1.60237992E12, 6765.0], [1.60238094E12, 4703.0], [1.60237932E12, 5571.5], [1.60238034E12, 4907.0], [1.60238064E12, 5170.5], [1.60237872E12, 5382.0], [1.60237974E12, 6574.5], [1.60238004E12, 5334.0], [1.60237884E12, 4907.5], [1.60238106E12, 6955.0], [1.60237944E12, 6800.5], [1.60238046E12, 6335.0], [1.60237914E12, 6378.0], [1.60238076E12, 6419.5], [1.60237986E12, 6827.0], [1.60237926E12, 4995.0], [1.60238016E12, 4879.0], [1.60237956E12, 6132.0], [1.60238058E12, 5287.0], [1.60238088E12, 4171.0], [1.60237896E12, 7910.0], [1.60237998E12, 5233.0], [1.60237866E12, 8020.0], [1.60238028E12, 4001.0], [1.60237908E12, 5352.0], [1.60237938E12, 5083.5], [1.60237878E12, 5453.0], [1.60237968E12, 3841.0], [1.6023807E12, 5486.5], [1.602381E12, 6163.0], [1.6023801E12, 5532.0], [1.6023804E12, 5908.0], [1.6023795E12, 5595.0], [1.6023798E12, 7125.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60238112E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2420.5, "minX": 1.0, "maxY": 6955.0, "series": [{"data": [[1.0, 6955.0], [2.0, 6216.0], [4.0, 4519.5], [5.0, 3254.0], [3.0, 5644.0], [6.0, 2420.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2420.5, "minX": 1.0, "maxY": 6949.0, "series": [{"data": [[1.0, 6949.0], [2.0, 6213.5], [4.0, 4519.5], [5.0, 3254.0], [3.0, 5643.0], [6.0, 2420.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.6023786E12, "maxY": 3.3, "series": [{"data": [[1.6023786E12, 0.9666666666666667], [1.60238082E12, 1.8833333333333333], [1.60238112E12, 0.85], [1.6023792E12, 1.75], [1.60238022E12, 1.2], [1.6023789E12, 2.066666666666667], [1.60238052E12, 1.7833333333333334], [1.60237962E12, 1.9833333333333334], [1.60237902E12, 3.3], [1.60237992E12, 1.45], [1.60238094E12, 2.45], [1.60237932E12, 2.3333333333333335], [1.60238034E12, 2.45], [1.60238064E12, 2.466666666666667], [1.60237872E12, 1.9833333333333334], [1.60237974E12, 1.6666666666666667], [1.60238004E12, 2.2], [1.60237884E12, 2.2666666666666666], [1.60238106E12, 1.7333333333333334], [1.60237944E12, 1.7333333333333334], [1.60238046E12, 1.8166666666666667], [1.60237914E12, 1.8333333333333333], [1.60238076E12, 1.9], [1.60237986E12, 1.8166666666666667], [1.60237926E12, 2.4], [1.60238016E12, 2.283333333333333], [1.60237956E12, 2.2], [1.60238058E12, 2.4], [1.60238088E12, 2.65], [1.60237896E12, 1.5], [1.60237998E12, 2.1166666666666667], [1.60237866E12, 1.5], [1.60238028E12, 2.9], [1.60237908E12, 1.9833333333333334], [1.60237938E12, 2.2666666666666666], [1.60237878E12, 2.1333333333333333], [1.60237968E12, 2.8], [1.6023807E12, 2.3], [1.602381E12, 1.7166666666666666], [1.6023801E12, 1.8666666666666667], [1.6023804E12, 1.95], [1.6023795E12, 2.033333333333333], [1.6023798E12, 1.6166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60238112E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.6023786E12, "maxY": 3.3, "series": [{"data": [[1.6023786E12, 0.7666666666666667], [1.60238082E12, 1.8833333333333333], [1.60238112E12, 1.05], [1.6023792E12, 1.75], [1.60238022E12, 1.2], [1.6023789E12, 2.066666666666667], [1.60238052E12, 1.7833333333333334], [1.60237962E12, 1.9833333333333334], [1.60237902E12, 3.3], [1.60237992E12, 1.45], [1.60238094E12, 2.45], [1.60237932E12, 2.3333333333333335], [1.60238034E12, 2.45], [1.60238064E12, 2.466666666666667], [1.60237872E12, 1.9833333333333334], [1.60237974E12, 1.6666666666666667], [1.60238004E12, 2.2], [1.60237884E12, 2.2666666666666666], [1.60238106E12, 1.7333333333333334], [1.60237944E12, 1.7333333333333334], [1.60238046E12, 1.8166666666666667], [1.60237914E12, 1.8333333333333333], [1.60238076E12, 1.9], [1.60237986E12, 1.8166666666666667], [1.60237926E12, 2.4], [1.60238016E12, 2.283333333333333], [1.60237956E12, 2.2], [1.60238058E12, 2.4], [1.60238088E12, 2.65], [1.60237896E12, 1.5], [1.60237998E12, 2.1166666666666667], [1.60237866E12, 1.5], [1.60238028E12, 2.9], [1.60237908E12, 1.9833333333333334], [1.60237938E12, 2.2666666666666666], [1.60237878E12, 2.1333333333333333], [1.60237968E12, 2.8], [1.6023807E12, 2.3], [1.602381E12, 1.7166666666666666], [1.6023801E12, 1.8666666666666667], [1.6023804E12, 1.95], [1.6023795E12, 2.033333333333333], [1.6023798E12, 1.6166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60238112E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.6023786E12, "maxY": 3.3, "series": [{"data": [[1.6023786E12, 0.7666666666666667], [1.60238082E12, 1.8833333333333333], [1.60238112E12, 1.05], [1.6023792E12, 1.75], [1.60238022E12, 1.2], [1.6023789E12, 2.066666666666667], [1.60238052E12, 1.7833333333333334], [1.60237962E12, 1.9833333333333334], [1.60237902E12, 3.3], [1.60237992E12, 1.45], [1.60238094E12, 2.45], [1.60237932E12, 2.3333333333333335], [1.60238034E12, 2.45], [1.60238064E12, 2.466666666666667], [1.60237872E12, 1.9833333333333334], [1.60237974E12, 1.6666666666666667], [1.60238004E12, 2.2], [1.60237884E12, 2.2666666666666666], [1.60238106E12, 1.7333333333333334], [1.60237944E12, 1.7333333333333334], [1.60238046E12, 1.8166666666666667], [1.60237914E12, 1.8333333333333333], [1.60238076E12, 1.9], [1.60237986E12, 1.8166666666666667], [1.60237926E12, 2.4], [1.60238016E12, 2.283333333333333], [1.60237956E12, 2.2], [1.60238058E12, 2.4], [1.60238088E12, 2.65], [1.60237896E12, 1.5], [1.60237998E12, 2.1166666666666667], [1.60237866E12, 1.5], [1.60238028E12, 2.9], [1.60237908E12, 1.9833333333333334], [1.60237938E12, 2.2666666666666666], [1.60237878E12, 2.1333333333333333], [1.60237968E12, 2.8], [1.6023807E12, 2.3], [1.602381E12, 1.7166666666666666], [1.6023801E12, 1.8666666666666667], [1.6023804E12, 1.95], [1.6023795E12, 2.033333333333333], [1.6023798E12, 1.6166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60238112E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.6023786E12, "maxY": 3.3, "series": [{"data": [[1.6023786E12, 0.7666666666666667], [1.60238082E12, 1.8833333333333333], [1.60238112E12, 1.05], [1.6023792E12, 1.75], [1.60238022E12, 1.2], [1.6023789E12, 2.066666666666667], [1.60238052E12, 1.7833333333333334], [1.60237962E12, 1.9833333333333334], [1.60237902E12, 3.3], [1.60237992E12, 1.45], [1.60238094E12, 2.45], [1.60237932E12, 2.3333333333333335], [1.60238034E12, 2.45], [1.60238064E12, 2.466666666666667], [1.60237872E12, 1.9833333333333334], [1.60237974E12, 1.6666666666666667], [1.60238004E12, 2.2], [1.60237884E12, 2.2666666666666666], [1.60238106E12, 1.7333333333333334], [1.60237944E12, 1.7333333333333334], [1.60238046E12, 1.8166666666666667], [1.60237914E12, 1.8333333333333333], [1.60238076E12, 1.9], [1.60237986E12, 1.8166666666666667], [1.60237926E12, 2.4], [1.60238016E12, 2.283333333333333], [1.60237956E12, 2.2], [1.60238058E12, 2.4], [1.60238088E12, 2.65], [1.60237896E12, 1.5], [1.60237998E12, 2.1166666666666667], [1.60237866E12, 1.5], [1.60238028E12, 2.9], [1.60237908E12, 1.9833333333333334], [1.60237938E12, 2.2666666666666666], [1.60237878E12, 2.1333333333333333], [1.60237968E12, 2.8], [1.6023807E12, 2.3], [1.602381E12, 1.7166666666666666], [1.6023801E12, 1.8666666666666667], [1.6023804E12, 1.95], [1.6023795E12, 2.033333333333333], [1.6023798E12, 1.6166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60238112E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

