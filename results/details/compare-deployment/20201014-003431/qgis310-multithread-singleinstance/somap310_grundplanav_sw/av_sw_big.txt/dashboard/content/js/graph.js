/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2095.0, "minX": 0.0, "maxY": 22934.0, "series": [{"data": [[0.0, 2095.0], [0.1, 2103.0], [0.2, 2119.0], [0.3, 2145.0], [0.4, 2175.0], [0.5, 2207.0], [0.6, 2232.0], [0.7, 2255.0], [0.8, 2263.0], [0.9, 2270.0], [1.0, 2275.0], [1.1, 2283.0], [1.2, 2290.0], [1.3, 2293.0], [1.4, 2296.0], [1.5, 2298.0], [1.6, 2302.0], [1.7, 2304.0], [1.8, 2309.0], [1.9, 2315.0], [2.0, 2320.0], [2.1, 2327.0], [2.2, 2333.0], [2.3, 2338.0], [2.4, 2345.0], [2.5, 2347.0], [2.6, 2353.0], [2.7, 2360.0], [2.8, 2363.0], [2.9, 2379.0], [3.0, 2387.0], [3.1, 2392.0], [3.2, 2398.0], [3.3, 2409.0], [3.4, 2415.0], [3.5, 2419.0], [3.6, 2428.0], [3.7, 2433.0], [3.8, 2437.0], [3.9, 2442.0], [4.0, 2445.0], [4.1, 2448.0], [4.2, 2452.0], [4.3, 2455.0], [4.4, 2464.0], [4.5, 2471.0], [4.6, 2474.0], [4.7, 2478.0], [4.8, 2482.0], [4.9, 2487.0], [5.0, 2490.0], [5.1, 2496.0], [5.2, 2508.0], [5.3, 2514.0], [5.4, 2523.0], [5.5, 2541.0], [5.6, 2548.0], [5.7, 2570.0], [5.8, 2596.0], [5.9, 2609.0], [6.0, 2615.0], [6.1, 2619.0], [6.2, 2625.0], [6.3, 2635.0], [6.4, 2646.0], [6.5, 2650.0], [6.6, 2670.0], [6.7, 2689.0], [6.8, 2695.0], [6.9, 2710.0], [7.0, 2726.0], [7.1, 2731.0], [7.2, 2736.0], [7.3, 2744.0], [7.4, 2758.0], [7.5, 2774.0], [7.6, 2786.0], [7.7, 2809.0], [7.8, 2825.0], [7.9, 2836.0], [8.0, 2842.0], [8.1, 2851.0], [8.2, 2870.0], [8.3, 2885.0], [8.4, 2890.0], [8.5, 2895.0], [8.6, 2903.0], [8.7, 2907.0], [8.8, 2914.0], [8.9, 2932.0], [9.0, 2940.0], [9.1, 2966.0], [9.2, 2982.0], [9.3, 2993.0], [9.4, 3006.0], [9.5, 3019.0], [9.6, 3032.0], [9.7, 3040.0], [9.8, 3051.0], [9.9, 3058.0], [10.0, 3065.0], [10.1, 3081.0], [10.2, 3104.0], [10.3, 3110.0], [10.4, 3138.0], [10.5, 3147.0], [10.6, 3163.0], [10.7, 3169.0], [10.8, 3180.0], [10.9, 3188.0], [11.0, 3196.0], [11.1, 3208.0], [11.2, 3216.0], [11.3, 3220.0], [11.4, 3247.0], [11.5, 3264.0], [11.6, 3270.0], [11.7, 3278.0], [11.8, 3283.0], [11.9, 3287.0], [12.0, 3293.0], [12.1, 3299.0], [12.2, 3302.0], [12.3, 3306.0], [12.4, 3325.0], [12.5, 3329.0], [12.6, 3335.0], [12.7, 3343.0], [12.8, 3348.0], [12.9, 3351.0], [13.0, 3356.0], [13.1, 3360.0], [13.2, 3370.0], [13.3, 3376.0], [13.4, 3380.0], [13.5, 3387.0], [13.6, 3390.0], [13.7, 3401.0], [13.8, 3409.0], [13.9, 3420.0], [14.0, 3424.0], [14.1, 3428.0], [14.2, 3442.0], [14.3, 3446.0], [14.4, 3451.0], [14.5, 3457.0], [14.6, 3471.0], [14.7, 3491.0], [14.8, 3499.0], [14.9, 3506.0], [15.0, 3525.0], [15.1, 3544.0], [15.2, 3556.0], [15.3, 3572.0], [15.4, 3581.0], [15.5, 3599.0], [15.6, 3611.0], [15.7, 3623.0], [15.8, 3635.0], [15.9, 3642.0], [16.0, 3653.0], [16.1, 3663.0], [16.2, 3674.0], [16.3, 3692.0], [16.4, 3713.0], [16.5, 3720.0], [16.6, 3728.0], [16.7, 3731.0], [16.8, 3751.0], [16.9, 3771.0], [17.0, 3780.0], [17.1, 3794.0], [17.2, 3804.0], [17.3, 3810.0], [17.4, 3825.0], [17.5, 3833.0], [17.6, 3847.0], [17.7, 3853.0], [17.8, 3862.0], [17.9, 3870.0], [18.0, 3878.0], [18.1, 3881.0], [18.2, 3893.0], [18.3, 3904.0], [18.4, 3908.0], [18.5, 3930.0], [18.6, 3938.0], [18.7, 3948.0], [18.8, 3959.0], [18.9, 3967.0], [19.0, 3982.0], [19.1, 3987.0], [19.2, 3994.0], [19.3, 3997.0], [19.4, 4005.0], [19.5, 4016.0], [19.6, 4024.0], [19.7, 4030.0], [19.8, 4044.0], [19.9, 4051.0], [20.0, 4063.0], [20.1, 4068.0], [20.2, 4073.0], [20.3, 4076.0], [20.4, 4083.0], [20.5, 4087.0], [20.6, 4097.0], [20.7, 4108.0], [20.8, 4114.0], [20.9, 4120.0], [21.0, 4127.0], [21.1, 4132.0], [21.2, 4136.0], [21.3, 4144.0], [21.4, 4151.0], [21.5, 4158.0], [21.6, 4165.0], [21.7, 4171.0], [21.8, 4176.0], [21.9, 4186.0], [22.0, 4198.0], [22.1, 4207.0], [22.2, 4220.0], [22.3, 4223.0], [22.4, 4228.0], [22.5, 4236.0], [22.6, 4255.0], [22.7, 4265.0], [22.8, 4269.0], [22.9, 4278.0], [23.0, 4282.0], [23.1, 4289.0], [23.2, 4294.0], [23.3, 4305.0], [23.4, 4311.0], [23.5, 4321.0], [23.6, 4329.0], [23.7, 4338.0], [23.8, 4347.0], [23.9, 4354.0], [24.0, 4360.0], [24.1, 4373.0], [24.2, 4379.0], [24.3, 4387.0], [24.4, 4391.0], [24.5, 4395.0], [24.6, 4399.0], [24.7, 4404.0], [24.8, 4413.0], [24.9, 4425.0], [25.0, 4436.0], [25.1, 4451.0], [25.2, 4453.0], [25.3, 4464.0], [25.4, 4468.0], [25.5, 4475.0], [25.6, 4479.0], [25.7, 4487.0], [25.8, 4492.0], [25.9, 4501.0], [26.0, 4505.0], [26.1, 4513.0], [26.2, 4517.0], [26.3, 4527.0], [26.4, 4537.0], [26.5, 4541.0], [26.6, 4546.0], [26.7, 4550.0], [26.8, 4564.0], [26.9, 4571.0], [27.0, 4573.0], [27.1, 4577.0], [27.2, 4589.0], [27.3, 4595.0], [27.4, 4604.0], [27.5, 4609.0], [27.6, 4613.0], [27.7, 4617.0], [27.8, 4621.0], [27.9, 4625.0], [28.0, 4629.0], [28.1, 4633.0], [28.2, 4640.0], [28.3, 4647.0], [28.4, 4654.0], [28.5, 4660.0], [28.6, 4665.0], [28.7, 4673.0], [28.8, 4683.0], [28.9, 4689.0], [29.0, 4695.0], [29.1, 4703.0], [29.2, 4707.0], [29.3, 4712.0], [29.4, 4717.0], [29.5, 4725.0], [29.6, 4737.0], [29.7, 4742.0], [29.8, 4747.0], [29.9, 4751.0], [30.0, 4758.0], [30.1, 4764.0], [30.2, 4768.0], [30.3, 4775.0], [30.4, 4780.0], [30.5, 4788.0], [30.6, 4794.0], [30.7, 4802.0], [30.8, 4806.0], [30.9, 4820.0], [31.0, 4826.0], [31.1, 4828.0], [31.2, 4831.0], [31.3, 4834.0], [31.4, 4839.0], [31.5, 4846.0], [31.6, 4855.0], [31.7, 4859.0], [31.8, 4865.0], [31.9, 4870.0], [32.0, 4877.0], [32.1, 4886.0], [32.2, 4897.0], [32.3, 4899.0], [32.4, 4903.0], [32.5, 4906.0], [32.6, 4910.0], [32.7, 4917.0], [32.8, 4920.0], [32.9, 4924.0], [33.0, 4929.0], [33.1, 4933.0], [33.2, 4938.0], [33.3, 4940.0], [33.4, 4947.0], [33.5, 4949.0], [33.6, 4954.0], [33.7, 4959.0], [33.8, 4969.0], [33.9, 4977.0], [34.0, 4980.0], [34.1, 4987.0], [34.2, 4991.0], [34.3, 4995.0], [34.4, 4999.0], [34.5, 5002.0], [34.6, 5010.0], [34.7, 5016.0], [34.8, 5020.0], [34.9, 5026.0], [35.0, 5031.0], [35.1, 5036.0], [35.2, 5040.0], [35.3, 5047.0], [35.4, 5052.0], [35.5, 5053.0], [35.6, 5055.0], [35.7, 5059.0], [35.8, 5061.0], [35.9, 5066.0], [36.0, 5071.0], [36.1, 5074.0], [36.2, 5077.0], [36.3, 5085.0], [36.4, 5093.0], [36.5, 5096.0], [36.6, 5101.0], [36.7, 5108.0], [36.8, 5115.0], [36.9, 5123.0], [37.0, 5125.0], [37.1, 5129.0], [37.2, 5132.0], [37.3, 5135.0], [37.4, 5144.0], [37.5, 5145.0], [37.6, 5149.0], [37.7, 5150.0], [37.8, 5157.0], [37.9, 5162.0], [38.0, 5166.0], [38.1, 5171.0], [38.2, 5176.0], [38.3, 5179.0], [38.4, 5188.0], [38.5, 5192.0], [38.6, 5196.0], [38.7, 5205.0], [38.8, 5211.0], [38.9, 5217.0], [39.0, 5225.0], [39.1, 5232.0], [39.2, 5236.0], [39.3, 5242.0], [39.4, 5246.0], [39.5, 5251.0], [39.6, 5258.0], [39.7, 5262.0], [39.8, 5265.0], [39.9, 5270.0], [40.0, 5279.0], [40.1, 5286.0], [40.2, 5294.0], [40.3, 5297.0], [40.4, 5301.0], [40.5, 5305.0], [40.6, 5312.0], [40.7, 5315.0], [40.8, 5325.0], [40.9, 5330.0], [41.0, 5336.0], [41.1, 5342.0], [41.2, 5347.0], [41.3, 5348.0], [41.4, 5355.0], [41.5, 5362.0], [41.6, 5366.0], [41.7, 5370.0], [41.8, 5376.0], [41.9, 5379.0], [42.0, 5384.0], [42.1, 5387.0], [42.2, 5390.0], [42.3, 5395.0], [42.4, 5401.0], [42.5, 5404.0], [42.6, 5409.0], [42.7, 5412.0], [42.8, 5415.0], [42.9, 5417.0], [43.0, 5420.0], [43.1, 5424.0], [43.2, 5431.0], [43.3, 5436.0], [43.4, 5439.0], [43.5, 5443.0], [43.6, 5444.0], [43.7, 5451.0], [43.8, 5454.0], [43.9, 5457.0], [44.0, 5462.0], [44.1, 5467.0], [44.2, 5470.0], [44.3, 5474.0], [44.4, 5480.0], [44.5, 5484.0], [44.6, 5486.0], [44.7, 5492.0], [44.8, 5495.0], [44.9, 5499.0], [45.0, 5502.0], [45.1, 5504.0], [45.2, 5510.0], [45.3, 5514.0], [45.4, 5521.0], [45.5, 5526.0], [45.6, 5530.0], [45.7, 5534.0], [45.8, 5537.0], [45.9, 5543.0], [46.0, 5547.0], [46.1, 5550.0], [46.2, 5554.0], [46.3, 5559.0], [46.4, 5563.0], [46.5, 5567.0], [46.6, 5571.0], [46.7, 5574.0], [46.8, 5579.0], [46.9, 5581.0], [47.0, 5585.0], [47.1, 5588.0], [47.2, 5594.0], [47.3, 5598.0], [47.4, 5606.0], [47.5, 5609.0], [47.6, 5614.0], [47.7, 5618.0], [47.8, 5621.0], [47.9, 5625.0], [48.0, 5628.0], [48.1, 5631.0], [48.2, 5637.0], [48.3, 5640.0], [48.4, 5642.0], [48.5, 5647.0], [48.6, 5651.0], [48.7, 5655.0], [48.8, 5665.0], [48.9, 5669.0], [49.0, 5676.0], [49.1, 5682.0], [49.2, 5685.0], [49.3, 5688.0], [49.4, 5694.0], [49.5, 5698.0], [49.6, 5703.0], [49.7, 5706.0], [49.8, 5711.0], [49.9, 5713.0], [50.0, 5717.0], [50.1, 5722.0], [50.2, 5725.0], [50.3, 5728.0], [50.4, 5731.0], [50.5, 5734.0], [50.6, 5741.0], [50.7, 5744.0], [50.8, 5745.0], [50.9, 5750.0], [51.0, 5753.0], [51.1, 5757.0], [51.2, 5760.0], [51.3, 5762.0], [51.4, 5765.0], [51.5, 5769.0], [51.6, 5770.0], [51.7, 5773.0], [51.8, 5775.0], [51.9, 5778.0], [52.0, 5783.0], [52.1, 5784.0], [52.2, 5788.0], [52.3, 5791.0], [52.4, 5797.0], [52.5, 5803.0], [52.6, 5806.0], [52.7, 5809.0], [52.8, 5816.0], [52.9, 5820.0], [53.0, 5823.0], [53.1, 5827.0], [53.2, 5831.0], [53.3, 5834.0], [53.4, 5839.0], [53.5, 5842.0], [53.6, 5848.0], [53.7, 5853.0], [53.8, 5856.0], [53.9, 5858.0], [54.0, 5862.0], [54.1, 5870.0], [54.2, 5873.0], [54.3, 5879.0], [54.4, 5882.0], [54.5, 5884.0], [54.6, 5885.0], [54.7, 5887.0], [54.8, 5895.0], [54.9, 5897.0], [55.0, 5902.0], [55.1, 5905.0], [55.2, 5911.0], [55.3, 5916.0], [55.4, 5919.0], [55.5, 5929.0], [55.6, 5930.0], [55.7, 5936.0], [55.8, 5942.0], [55.9, 5944.0], [56.0, 5954.0], [56.1, 5960.0], [56.2, 5966.0], [56.3, 5973.0], [56.4, 5977.0], [56.5, 5982.0], [56.6, 5988.0], [56.7, 5992.0], [56.8, 5995.0], [56.9, 5998.0], [57.0, 6002.0], [57.1, 6007.0], [57.2, 6010.0], [57.3, 6011.0], [57.4, 6015.0], [57.5, 6020.0], [57.6, 6024.0], [57.7, 6030.0], [57.8, 6038.0], [57.9, 6044.0], [58.0, 6047.0], [58.1, 6053.0], [58.2, 6057.0], [58.3, 6062.0], [58.4, 6064.0], [58.5, 6071.0], [58.6, 6076.0], [58.7, 6079.0], [58.8, 6082.0], [58.9, 6090.0], [59.0, 6093.0], [59.1, 6100.0], [59.2, 6109.0], [59.3, 6111.0], [59.4, 6115.0], [59.5, 6123.0], [59.6, 6128.0], [59.7, 6137.0], [59.8, 6141.0], [59.9, 6144.0], [60.0, 6147.0], [60.1, 6158.0], [60.2, 6167.0], [60.3, 6172.0], [60.4, 6175.0], [60.5, 6182.0], [60.6, 6186.0], [60.7, 6189.0], [60.8, 6194.0], [60.9, 6196.0], [61.0, 6202.0], [61.1, 6207.0], [61.2, 6211.0], [61.3, 6217.0], [61.4, 6222.0], [61.5, 6231.0], [61.6, 6235.0], [61.7, 6239.0], [61.8, 6247.0], [61.9, 6252.0], [62.0, 6257.0], [62.1, 6262.0], [62.2, 6266.0], [62.3, 6272.0], [62.4, 6274.0], [62.5, 6285.0], [62.6, 6293.0], [62.7, 6297.0], [62.8, 6302.0], [62.9, 6305.0], [63.0, 6310.0], [63.1, 6316.0], [63.2, 6320.0], [63.3, 6325.0], [63.4, 6329.0], [63.5, 6333.0], [63.6, 6335.0], [63.7, 6341.0], [63.8, 6346.0], [63.9, 6351.0], [64.0, 6356.0], [64.1, 6363.0], [64.2, 6368.0], [64.3, 6373.0], [64.4, 6378.0], [64.5, 6384.0], [64.6, 6388.0], [64.7, 6394.0], [64.8, 6398.0], [64.9, 6400.0], [65.0, 6405.0], [65.1, 6411.0], [65.2, 6414.0], [65.3, 6419.0], [65.4, 6421.0], [65.5, 6426.0], [65.6, 6435.0], [65.7, 6439.0], [65.8, 6449.0], [65.9, 6453.0], [66.0, 6457.0], [66.1, 6464.0], [66.2, 6467.0], [66.3, 6470.0], [66.4, 6476.0], [66.5, 6481.0], [66.6, 6482.0], [66.7, 6494.0], [66.8, 6503.0], [66.9, 6511.0], [67.0, 6516.0], [67.1, 6524.0], [67.2, 6528.0], [67.3, 6533.0], [67.4, 6540.0], [67.5, 6545.0], [67.6, 6554.0], [67.7, 6558.0], [67.8, 6567.0], [67.9, 6573.0], [68.0, 6576.0], [68.1, 6586.0], [68.2, 6588.0], [68.3, 6597.0], [68.4, 6602.0], [68.5, 6606.0], [68.6, 6608.0], [68.7, 6614.0], [68.8, 6616.0], [68.9, 6622.0], [69.0, 6626.0], [69.1, 6631.0], [69.2, 6636.0], [69.3, 6639.0], [69.4, 6643.0], [69.5, 6653.0], [69.6, 6660.0], [69.7, 6672.0], [69.8, 6682.0], [69.9, 6688.0], [70.0, 6695.0], [70.1, 6700.0], [70.2, 6716.0], [70.3, 6729.0], [70.4, 6735.0], [70.5, 6738.0], [70.6, 6746.0], [70.7, 6750.0], [70.8, 6755.0], [70.9, 6757.0], [71.0, 6765.0], [71.1, 6770.0], [71.2, 6772.0], [71.3, 6779.0], [71.4, 6786.0], [71.5, 6794.0], [71.6, 6805.0], [71.7, 6812.0], [71.8, 6821.0], [71.9, 6828.0], [72.0, 6832.0], [72.1, 6834.0], [72.2, 6846.0], [72.3, 6848.0], [72.4, 6858.0], [72.5, 6863.0], [72.6, 6865.0], [72.7, 6876.0], [72.8, 6880.0], [72.9, 6886.0], [73.0, 6892.0], [73.1, 6900.0], [73.2, 6906.0], [73.3, 6916.0], [73.4, 6927.0], [73.5, 6931.0], [73.6, 6933.0], [73.7, 6939.0], [73.8, 6941.0], [73.9, 6951.0], [74.0, 6956.0], [74.1, 6962.0], [74.2, 6968.0], [74.3, 6974.0], [74.4, 6981.0], [74.5, 6984.0], [74.6, 6990.0], [74.7, 6995.0], [74.8, 6999.0], [74.9, 7003.0], [75.0, 7009.0], [75.1, 7019.0], [75.2, 7022.0], [75.3, 7033.0], [75.4, 7036.0], [75.5, 7039.0], [75.6, 7043.0], [75.7, 7048.0], [75.8, 7053.0], [75.9, 7056.0], [76.0, 7061.0], [76.1, 7066.0], [76.2, 7070.0], [76.3, 7076.0], [76.4, 7090.0], [76.5, 7098.0], [76.6, 7103.0], [76.7, 7106.0], [76.8, 7112.0], [76.9, 7115.0], [77.0, 7119.0], [77.1, 7126.0], [77.2, 7131.0], [77.3, 7134.0], [77.4, 7136.0], [77.5, 7143.0], [77.6, 7145.0], [77.7, 7148.0], [77.8, 7157.0], [77.9, 7165.0], [78.0, 7170.0], [78.1, 7174.0], [78.2, 7177.0], [78.3, 7185.0], [78.4, 7197.0], [78.5, 7204.0], [78.6, 7213.0], [78.7, 7220.0], [78.8, 7227.0], [78.9, 7231.0], [79.0, 7237.0], [79.1, 7243.0], [79.2, 7247.0], [79.3, 7252.0], [79.4, 7260.0], [79.5, 7267.0], [79.6, 7278.0], [79.7, 7287.0], [79.8, 7290.0], [79.9, 7301.0], [80.0, 7309.0], [80.1, 7315.0], [80.2, 7320.0], [80.3, 7329.0], [80.4, 7334.0], [80.5, 7340.0], [80.6, 7345.0], [80.7, 7355.0], [80.8, 7376.0], [80.9, 7386.0], [81.0, 7393.0], [81.1, 7400.0], [81.2, 7409.0], [81.3, 7416.0], [81.4, 7423.0], [81.5, 7427.0], [81.6, 7442.0], [81.7, 7447.0], [81.8, 7451.0], [81.9, 7456.0], [82.0, 7465.0], [82.1, 7471.0], [82.2, 7481.0], [82.3, 7485.0], [82.4, 7495.0], [82.5, 7508.0], [82.6, 7514.0], [82.7, 7527.0], [82.8, 7539.0], [82.9, 7555.0], [83.0, 7559.0], [83.1, 7566.0], [83.2, 7575.0], [83.3, 7584.0], [83.4, 7590.0], [83.5, 7601.0], [83.6, 7608.0], [83.7, 7613.0], [83.8, 7630.0], [83.9, 7635.0], [84.0, 7643.0], [84.1, 7651.0], [84.2, 7659.0], [84.3, 7672.0], [84.4, 7680.0], [84.5, 7688.0], [84.6, 7701.0], [84.7, 7710.0], [84.8, 7719.0], [84.9, 7739.0], [85.0, 7750.0], [85.1, 7753.0], [85.2, 7765.0], [85.3, 7776.0], [85.4, 7780.0], [85.5, 7787.0], [85.6, 7793.0], [85.7, 7799.0], [85.8, 7816.0], [85.9, 7834.0], [86.0, 7842.0], [86.1, 7851.0], [86.2, 7863.0], [86.3, 7871.0], [86.4, 7879.0], [86.5, 7892.0], [86.6, 7904.0], [86.7, 7911.0], [86.8, 7917.0], [86.9, 7921.0], [87.0, 7930.0], [87.1, 7938.0], [87.2, 7947.0], [87.3, 7963.0], [87.4, 7971.0], [87.5, 7976.0], [87.6, 7981.0], [87.7, 7985.0], [87.8, 7989.0], [87.9, 8006.0], [88.0, 8010.0], [88.1, 8031.0], [88.2, 8057.0], [88.3, 8084.0], [88.4, 8087.0], [88.5, 8102.0], [88.6, 8114.0], [88.7, 8126.0], [88.8, 8139.0], [88.9, 8151.0], [89.0, 8158.0], [89.1, 8177.0], [89.2, 8182.0], [89.3, 8201.0], [89.4, 8219.0], [89.5, 8239.0], [89.6, 8259.0], [89.7, 8286.0], [89.8, 8296.0], [89.9, 8306.0], [90.0, 8340.0], [90.1, 8349.0], [90.2, 8377.0], [90.3, 8396.0], [90.4, 8412.0], [90.5, 8423.0], [90.6, 8464.0], [90.7, 8476.0], [90.8, 8481.0], [90.9, 8506.0], [91.0, 8534.0], [91.1, 8550.0], [91.2, 8577.0], [91.3, 8585.0], [91.4, 8596.0], [91.5, 8631.0], [91.6, 8658.0], [91.7, 8682.0], [91.8, 8699.0], [91.9, 8723.0], [92.0, 8757.0], [92.1, 8771.0], [92.2, 8794.0], [92.3, 8817.0], [92.4, 8846.0], [92.5, 8891.0], [92.6, 8902.0], [92.7, 8929.0], [92.8, 8942.0], [92.9, 8970.0], [93.0, 8980.0], [93.1, 8991.0], [93.2, 9007.0], [93.3, 9021.0], [93.4, 9044.0], [93.5, 9063.0], [93.6, 9097.0], [93.7, 9123.0], [93.8, 9156.0], [93.9, 9178.0], [94.0, 9229.0], [94.1, 9262.0], [94.2, 9276.0], [94.3, 9290.0], [94.4, 9309.0], [94.5, 9339.0], [94.6, 9365.0], [94.7, 9387.0], [94.8, 9412.0], [94.9, 9453.0], [95.0, 9480.0], [95.1, 9513.0], [95.2, 9555.0], [95.3, 9603.0], [95.4, 9658.0], [95.5, 9708.0], [95.6, 9755.0], [95.7, 9779.0], [95.8, 9829.0], [95.9, 9897.0], [96.0, 9939.0], [96.1, 9959.0], [96.2, 10039.0], [96.3, 10081.0], [96.4, 10156.0], [96.5, 10200.0], [96.6, 10252.0], [96.7, 10283.0], [96.8, 10362.0], [96.9, 10424.0], [97.0, 10500.0], [97.1, 10566.0], [97.2, 10635.0], [97.3, 10758.0], [97.4, 10831.0], [97.5, 10960.0], [97.6, 11088.0], [97.7, 11263.0], [97.8, 11357.0], [97.9, 11439.0], [98.0, 11509.0], [98.1, 11576.0], [98.2, 11709.0], [98.3, 11834.0], [98.4, 12004.0], [98.5, 12075.0], [98.6, 12191.0], [98.7, 12349.0], [98.8, 12549.0], [98.9, 12693.0], [99.0, 12873.0], [99.1, 13041.0], [99.2, 13362.0], [99.3, 13463.0], [99.4, 13540.0], [99.5, 13739.0], [99.6, 14060.0], [99.7, 14624.0], [99.8, 17494.0], [99.9, 18783.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2000.0, "maxY": 151.0, "series": [{"data": [[2000.0, 3.0], [2100.0, 21.0], [2300.0, 86.0], [2200.0, 57.0], [2400.0, 100.0], [2500.0, 38.0], [2600.0, 49.0], [2700.0, 42.0], [2800.0, 49.0], [2900.0, 41.0], [3000.0, 41.0], [3100.0, 46.0], [3300.0, 80.0], [3200.0, 57.0], [3400.0, 59.0], [3500.0, 36.0], [3600.0, 44.0], [3700.0, 42.0], [3800.0, 57.0], [3900.0, 54.0], [4000.0, 70.0], [4300.0, 68.0], [4100.0, 70.0], [4200.0, 67.0], [4600.0, 88.0], [4400.0, 67.0], [4500.0, 75.0], [4800.0, 84.0], [4700.0, 86.0], [4900.0, 111.0], [5100.0, 107.0], [5000.0, 110.0], [5200.0, 90.0], [5300.0, 104.0], [5500.0, 123.0], [5600.0, 116.0], [5400.0, 133.0], [5700.0, 151.0], [5800.0, 131.0], [6000.0, 112.0], [5900.0, 102.0], [6100.0, 97.0], [6300.0, 112.0], [6200.0, 92.0], [6500.0, 83.0], [6400.0, 96.0], [6600.0, 91.0], [6700.0, 74.0], [6800.0, 81.0], [6900.0, 90.0], [7100.0, 96.0], [7000.0, 90.0], [7200.0, 77.0], [7400.0, 73.0], [7300.0, 61.0], [7500.0, 52.0], [7600.0, 58.0], [7800.0, 44.0], [7700.0, 58.0], [7900.0, 68.0], [8000.0, 31.0], [8100.0, 43.0], [8200.0, 27.0], [8700.0, 21.0], [8500.0, 28.0], [8400.0, 28.0], [8600.0, 22.0], [8300.0, 27.0], [9200.0, 22.0], [8900.0, 29.0], [8800.0, 18.0], [9000.0, 24.0], [9100.0, 18.0], [9300.0, 19.0], [9500.0, 13.0], [9700.0, 14.0], [9600.0, 9.0], [9400.0, 16.0], [10000.0, 8.0], [10200.0, 13.0], [10100.0, 9.0], [9800.0, 10.0], [9900.0, 12.0], [10600.0, 6.0], [10400.0, 7.0], [10300.0, 6.0], [10500.0, 9.0], [10700.0, 3.0], [10800.0, 6.0], [11100.0, 2.0], [11000.0, 5.0], [11200.0, 4.0], [10900.0, 4.0], [11300.0, 6.0], [11700.0, 5.0], [11600.0, 3.0], [11400.0, 7.0], [11500.0, 7.0], [12000.0, 7.0], [11800.0, 2.0], [12200.0, 1.0], [12100.0, 5.0], [11900.0, 3.0], [12400.0, 2.0], [12600.0, 3.0], [12700.0, 5.0], [12500.0, 5.0], [12300.0, 4.0], [13300.0, 4.0], [13200.0, 4.0], [12800.0, 1.0], [12900.0, 3.0], [13000.0, 2.0], [13500.0, 5.0], [13800.0, 2.0], [13700.0, 4.0], [13600.0, 3.0], [13400.0, 3.0], [14300.0, 2.0], [14100.0, 1.0], [14000.0, 1.0], [14400.0, 1.0], [14700.0, 1.0], [14600.0, 1.0], [15300.0, 1.0], [14900.0, 1.0], [17300.0, 1.0], [17400.0, 1.0], [17700.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [17600.0, 1.0], [18900.0, 1.0], [18700.0, 1.0], [18800.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [22900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.93548387096774, "minX": 1.60263774E12, "maxY": 12.0, "series": [{"data": [[1.60263804E12, 12.0], [1.60264026E12, 10.93548387096774], [1.60263774E12, 12.0], [1.60263864E12, 12.0], [1.60263966E12, 12.0], [1.60263834E12, 12.0], [1.60263996E12, 12.0], [1.60263924E12, 12.0], [1.60263954E12, 12.0], [1.60263894E12, 12.0], [1.60263984E12, 12.0], [1.60263792E12, 12.0], [1.60263852E12, 12.0], [1.60263822E12, 12.0], [1.60263912E12, 12.0], [1.60264014E12, 12.0], [1.60263882E12, 12.0], [1.6026378E12, 12.0], [1.60264002E12, 12.0], [1.6026384E12, 12.0], [1.60263942E12, 12.0], [1.6026381E12, 12.0], [1.60263972E12, 12.0], [1.602639E12, 12.0], [1.6026387E12, 12.0], [1.6026396E12, 12.0], [1.6026393E12, 12.0], [1.60263828E12, 12.0], [1.60263798E12, 12.0], [1.60263888E12, 12.0], [1.6026399E12, 12.0], [1.60263858E12, 12.0], [1.6026402E12, 12.0], [1.60263978E12, 12.0], [1.60263918E12, 12.0], [1.60264008E12, 12.0], [1.60263816E12, 12.0], [1.60263786E12, 12.0], [1.60263948E12, 12.0], [1.60263876E12, 12.0], [1.60263846E12, 12.0], [1.60263936E12, 12.0], [1.60263906E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60264026E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5052.0, "minX": 1.0, "maxY": 7202.0, "series": [{"data": [[8.0, 5052.0], [4.0, 7190.0], [2.0, 7201.0], [1.0, 7039.0], [9.0, 6172.0], [10.0, 6411.0], [5.0, 7106.0], [11.0, 6467.0], [12.0, 5838.018150222062], [6.0, 7033.0], [3.0, 7202.0], [7.0, 6951.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5839.868978805408]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 452.0833333333333, "minX": 1.60263774E12, "maxY": 833487.3333333334, "series": [{"data": [[1.60263804E12, 500639.1666666667], [1.60264026E12, 261166.98333333334], [1.60263774E12, 361082.5333333333], [1.60263864E12, 548223.3333333334], [1.60263966E12, 833487.3333333334], [1.60263834E12, 795338.2666666667], [1.60263996E12, 618040.2833333333], [1.60263924E12, 508777.56666666665], [1.60263954E12, 566347.1833333333], [1.60263894E12, 546166.1166666667], [1.60263984E12, 534814.1833333333], [1.60263792E12, 492667.36666666664], [1.60263852E12, 719160.95], [1.60263822E12, 504383.26666666666], [1.60263912E12, 507554.9166666667], [1.60264014E12, 590246.1166666667], [1.60263882E12, 499876.73333333334], [1.6026378E12, 692831.8833333333], [1.60264002E12, 525707.7], [1.6026384E12, 618380.3], [1.60263942E12, 288979.5833333333], [1.6026381E12, 383097.3333333333], [1.60263972E12, 592067.6833333333], [1.602639E12, 615902.0833333334], [1.6026387E12, 567861.85], [1.6026396E12, 726404.1333333333], [1.6026393E12, 643395.85], [1.60263828E12, 763339.1666666666], [1.60263798E12, 627548.2], [1.60263888E12, 464396.95], [1.6026399E12, 500320.0333333333], [1.60263858E12, 606459.0166666667], [1.6026402E12, 506515.63333333336], [1.60263978E12, 594919.1666666666], [1.60263918E12, 522672.13333333336], [1.60264008E12, 542850.75], [1.60263816E12, 286595.26666666666], [1.60263786E12, 553549.5166666667], [1.60263948E12, 529200.65], [1.60263876E12, 773738.9333333333], [1.60263846E12, 621317.4], [1.60263936E12, 361142.93333333335], [1.60263906E12, 675308.3666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60263804E12, 894.3333333333334], [1.60264026E12, 475.0833333333333], [1.60263774E12, 452.0833333333333], [1.60263864E12, 904.1833333333333], [1.60263966E12, 797.8333333333334], [1.60263834E12, 827.6833333333333], [1.60263996E12, 888.5166666666667], [1.60263924E12, 816.2666666666667], [1.60263954E12, 806.6], [1.60263894E12, 731.8333333333334], [1.60263984E12, 1114.55], [1.60263792E12, 852.6833333333333], [1.60263852E12, 1040.1833333333334], [1.60263822E12, 830.7], [1.60263912E12, 898.8166666666667], [1.60264014E12, 777.4], [1.60263882E12, 1257.0333333333333], [1.6026378E12, 580.8833333333333], [1.60264002E12, 1201.6666666666667], [1.6026384E12, 1064.85], [1.60263942E12, 1274.0166666666667], [1.6026381E12, 646.8333333333334], [1.60263972E12, 1114.1333333333334], [1.602639E12, 824.3166666666667], [1.6026387E12, 1012.85], [1.6026396E12, 839.4833333333333], [1.6026393E12, 1011.6333333333333], [1.60263828E12, 832.5166666666667], [1.60263798E12, 1014.5666666666667], [1.60263888E12, 748.8666666666667], [1.6026399E12, 880.05], [1.60263858E12, 771.6166666666667], [1.6026402E12, 779.8], [1.60263978E12, 1044.3166666666666], [1.60263918E12, 940.2333333333333], [1.60264008E12, 1112.6666666666667], [1.60263816E12, 1493.0666666666666], [1.60263786E12, 890.0666666666667], [1.60263948E12, 1048.7666666666667], [1.60263876E12, 889.6], [1.60263846E12, 1056.4166666666667], [1.60263936E12, 514.7833333333333], [1.60263906E12, 623.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60264026E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3610.405000000002, "minX": 1.60263774E12, "maxY": 9832.791666666666, "series": [{"data": [[1.60263804E12, 5795.636363636366], [1.60264026E12, 7171.774193548387], [1.60263774E12, 6243.4406779661], [1.60263864E12, 6094.806722689074], [1.60263966E12, 6909.457142857143], [1.60263834E12, 6699.467889908256], [1.60263996E12, 5974.215517241383], [1.60263924E12, 6716.622807017543], [1.60263954E12, 6109.2807017543855], [1.60263894E12, 7023.68367346939], [1.60263984E12, 4814.8027210884375], [1.60263792E12, 5505.685950413225], [1.60263852E12, 5307.514492753625], [1.60263822E12, 6072.327731092432], [1.60263912E12, 6471.007874015745], [1.60264014E12, 6940.009708737864], [1.60263882E12, 4488.215568862273], [1.6026378E12, 8348.100000000002], [1.60264002E12, 4539.968553459118], [1.6026384E12, 5081.638297872338], [1.60263942E12, 4251.959999999998], [1.6026381E12, 8060.538461538463], [1.60263972E12, 4863.360544217685], [1.602639E12, 7094.675925925926], [1.6026387E12, 5533.714285714283], [1.6026396E12, 6635.400000000002], [1.6026393E12, 5166.375000000002], [1.60263828E12, 6540.055045871562], [1.60263798E12, 5505.464285714285], [1.60263888E12, 7177.3499999999985], [1.6026399E12, 6249.905172413795], [1.60263858E12, 6934.009900990099], [1.6026402E12, 6796.50476190476], [1.60263978E12, 5320.471014492754], [1.60263918E12, 5017.81954887218], [1.60264008E12, 4981.721088435372], [1.60263816E12, 3610.405000000002], [1.60263786E12, 6094.3888888888905], [1.60263948E12, 5119.838028169016], [1.60263876E12, 5764.709401709399], [1.60263846E12, 5180.496402877698], [1.60263936E12, 9832.791666666666], [1.60263906E12, 7299.453488372093]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60264026E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3609.7200000000007, "minX": 1.60263774E12, "maxY": 9830.875000000002, "series": [{"data": [[1.60263804E12, 5793.801652892564], [1.60264026E12, 7170.322580645161], [1.60263774E12, 6240.796610169491], [1.60263864E12, 6092.638655462183], [1.60263966E12, 6906.580952380952], [1.60263834E12, 6696.311926605506], [1.60263996E12, 5972.310344827586], [1.60263924E12, 6714.903508771932], [1.60263954E12, 6107.324561403508], [1.60263894E12, 7021.091836734695], [1.60263984E12, 4813.476190476189], [1.60263792E12, 5503.73553719008], [1.60263852E12, 5305.130434782606], [1.60263822E12, 6070.260504201678], [1.60263912E12, 6469.52755905512], [1.60264014E12, 6937.786407766991], [1.60263882E12, 4486.904191616766], [1.6026378E12, 8344.112500000001], [1.60264002E12, 4538.698113207545], [1.6026384E12, 5079.6170212765965], [1.60263942E12, 4251.365714285718], [1.6026381E12, 8058.450549450548], [1.60263972E12, 4861.925170068032], [1.602639E12, 7092.444444444446], [1.6026387E12, 5531.887218045113], [1.6026396E12, 6632.936363636364], [1.6026393E12, 5164.602941176468], [1.60263828E12, 6536.9266055045855], [1.60263798E12, 5503.378571428571], [1.60263888E12, 7175.200000000001], [1.6026399E12, 6248.431034482762], [1.60263858E12, 6931.356435643565], [1.6026402E12, 6794.590476190476], [1.60263978E12, 5318.869565217389], [1.60263918E12, 5016.285714285715], [1.60264008E12, 4980.414965986393], [1.60263816E12, 3609.7200000000007], [1.60263786E12, 6092.246031746033], [1.60263948E12, 5118.3802816901425], [1.60263876E12, 5761.7521367521385], [1.60263846E12, 5178.503597122301], [1.60263936E12, 9830.875000000002], [1.60263906E12, 7296.488372093023]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60264026E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05660377358490567, "minX": 1.60263774E12, "maxY": 2.0338983050847452, "series": [{"data": [[1.60263804E12, 0.09917355371900824], [1.60264026E12, 0.16129032258064518], [1.60263774E12, 2.0338983050847452], [1.60263864E12, 0.11764705882352938], [1.60263966E12, 0.1142857142857143], [1.60263834E12, 0.146788990825688], [1.60263996E12, 0.12068965517241381], [1.60263924E12, 0.08771929824561404], [1.60263954E12, 0.10526315789473682], [1.60263894E12, 0.14285714285714282], [1.60263984E12, 0.06122448979591841], [1.60263792E12, 0.1239669421487603], [1.60263852E12, 0.10144927536231892], [1.60263822E12, 0.08403361344537814], [1.60263912E12, 0.09448818897637794], [1.60264014E12, 0.09708737864077673], [1.60263882E12, 0.07185628742514974], [1.6026378E12, 0.2], [1.60264002E12, 0.05660377358490567], [1.6026384E12, 0.099290780141844], [1.60263942E12, 0.06857142857142862], [1.6026381E12, 0.18681318681318682], [1.60263972E12, 0.08163265306122448], [1.602639E12, 0.11111111111111112], [1.6026387E12, 0.12030075187969932], [1.6026396E12, 0.11818181818181815], [1.6026393E12, 0.08823529411764706], [1.60263828E12, 0.073394495412844], [1.60263798E12, 0.10714285714285718], [1.60263888E12, 0.13999999999999999], [1.6026399E12, 0.06896551724137927], [1.60263858E12, 0.10891089108910898], [1.6026402E12, 0.11428571428571435], [1.60263978E12, 0.05797101449275365], [1.60263918E12, 0.09022556390977446], [1.60264008E12, 0.07482993197278914], [1.60263816E12, 0.07999999999999999], [1.60263786E12, 0.12698412698412698], [1.60263948E12, 0.10563380281690142], [1.60263876E12, 0.11965811965811968], [1.60263846E12, 0.09352517985611515], [1.60263936E12, 0.1250000000000001], [1.60263906E12, 0.10465116279069776]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60264026E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2095.0, "minX": 1.60263774E12, "maxY": 22934.0, "series": [{"data": [[1.60263804E12, 8296.0], [1.60264026E12, 9403.0], [1.60263774E12, 9262.0], [1.60263864E12, 8973.0], [1.60263966E12, 8854.0], [1.60263834E12, 9156.0], [1.60263996E12, 8669.0], [1.60263924E12, 13739.0], [1.60263954E12, 9765.0], [1.60263894E12, 11542.0], [1.60263984E12, 7649.0], [1.60263792E12, 14624.0], [1.60263852E12, 10821.0], [1.60263822E12, 10200.0], [1.60263912E12, 22934.0], [1.60264014E12, 12075.0], [1.60263882E12, 11576.0], [1.6026378E12, 11358.0], [1.60264002E12, 9274.0], [1.6026384E12, 7883.0], [1.60263942E12, 10259.0], [1.6026381E12, 12572.0], [1.60263972E12, 7485.0], [1.602639E12, 14146.0], [1.6026387E12, 8413.0], [1.6026396E12, 9339.0], [1.6026393E12, 8083.0], [1.60263828E12, 10559.0], [1.60263798E12, 13721.0], [1.60263888E12, 13686.0], [1.6026399E12, 8980.0], [1.60263858E12, 9704.0], [1.6026402E12, 10909.0], [1.60263978E12, 8682.0], [1.60263918E12, 8151.0], [1.60264008E12, 10566.0], [1.60263816E12, 7394.0], [1.60263786E12, 15389.0], [1.60263948E12, 7814.0], [1.60263876E12, 12727.0], [1.60263846E12, 7944.0], [1.60263936E12, 13478.0], [1.60263906E12, 17727.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60263804E12, 3265.469999563694], [1.60264026E12, 5052.0], [1.60263774E12, 3056.0], [1.60263864E12, 4237.199994564056], [1.60263966E12, 4999.0], [1.60263834E12, 4218.0], [1.60263996E12, 4343.688999637366], [1.60263924E12, 3440.9349961340426], [1.60263954E12, 3421.734999424219], [1.60263894E12, 3552.0], [1.60263984E12, 2433.85598736763], [1.60263792E12, 2518.5479992437363], [1.60263852E12, 2200.2749991714954], [1.60263822E12, 3124.0399931907655], [1.60263912E12, 2294.303999938965], [1.60264014E12, 3817.0], [1.60263882E12, 2144.5119999599456], [1.6026378E12, 5336.0], [1.60264002E12, 2298.0], [1.6026384E12, 2859.375993499756], [1.60263942E12, 2311.351998825073], [1.6026381E12, 4910.0], [1.60263972E12, 2419.663999929428], [1.602639E12, 3840.0], [1.6026387E12, 2266.0899995207787], [1.6026396E12, 4806.0], [1.6026393E12, 3516.3489982688425], [1.60263828E12, 4128.0], [1.60263798E12, 3673.4319956970216], [1.60263888E12, 4380.0], [1.6026399E12, 2576.278998800516], [1.60263858E12, 4004.0], [1.6026402E12, 3498.0], [1.60263978E12, 2400.521999270916], [1.60263918E12, 2438.087992076874], [1.60264008E12, 2095.331999964714], [1.60263816E12, 2223.3259993290903], [1.60263786E12, 2303.571999878883], [1.60263948E12, 2615.1479998636246], [1.60263876E12, 2813.6119992685317], [1.60263846E12, 2473.599999666214], [1.60263936E12, 5783.0], [1.60263906E12, 4572.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60263804E12, 3267.117000174522], [1.60264026E12, 5052.0], [1.60263774E12, 3056.0], [1.60263864E12, 4257.720002174377], [1.60263966E12, 5001.568800525665], [1.60263834E12, 4219.691000199318], [1.60263996E12, 4345.057900145054], [1.60263924E12, 3455.528501546383], [1.60263954E12, 3423.9085002303123], [1.60263894E12, 3552.0], [1.60263984E12, 2481.541605052948], [1.60263792E12, 2521.4028003025055], [1.60263852E12, 2203.402500331402], [1.60263822E12, 3149.744002723694], [1.60263912E12, 2294.534400024414], [1.60264014E12, 3819.782400932312], [1.60263882E12, 2144.6632000160216], [1.6026378E12, 5336.0], [1.60264002E12, 2298.0], [1.6026384E12, 2883.913602600098], [1.60263942E12, 2315.7872004699707], [1.6026381E12, 4910.0], [1.60263972E12, 2419.9304000282286], [1.602639E12, 3858.7467024636267], [1.6026387E12, 2267.8990001916886], [1.6026396E12, 4807.384600148201], [1.6026393E12, 3522.8839006924627], [1.60263828E12, 4129.602000188827], [1.60263798E12, 3689.6752017211916], [1.60263888E12, 4380.0], [1.6026399E12, 2580.8069004797935], [1.60263858E12, 4008.2826042509078], [1.6026402E12, 3504.323201293945], [1.60263978E12, 2403.2742002916334], [1.60263918E12, 2467.9968031692506], [1.60264008E12, 2095.4652000141145], [1.60263816E12, 2225.858600268364], [1.60263786E12, 2304.0292000484465], [1.60263948E12, 2615.66280005455], [1.60263876E12, 2816.373200292587], [1.60263846E12, 2474.8600001335144], [1.60263936E12, 5783.0], [1.60263906E12, 4572.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60263804E12, 3266.384999781847], [1.60264026E12, 5052.0], [1.60263774E12, 3056.0], [1.60263864E12, 4248.599997282028], [1.60263966E12, 4999.363999342919], [1.60263834E12, 4218.854999750853], [1.60263996E12, 4344.449499818683], [1.60263924E12, 3449.0424980670214], [1.60263954E12, 3422.9424997121096], [1.60263894E12, 3552.0], [1.60263984E12, 2460.347993683815], [1.60263792E12, 2520.133999621868], [1.60263852E12, 2202.0124995857477], [1.60263822E12, 3138.3199965953827], [1.60263912E12, 2294.4319999694826], [1.60264014E12, 3817.0], [1.60263882E12, 2144.595999979973], [1.6026378E12, 5336.0], [1.60264002E12, 2298.0], [1.6026384E12, 2873.0079967498777], [1.60263942E12, 2313.8159994125367], [1.6026381E12, 4910.0], [1.60263972E12, 2419.8119999647142], [1.602639E12, 3848.4134969204665], [1.6026387E12, 2267.0949997603893], [1.6026396E12, 4806.762999814749], [1.6026393E12, 3519.9794991344215], [1.60263828E12, 4128.809999763966], [1.60263798E12, 3682.455997848511], [1.60263888E12, 4380.0], [1.6026399E12, 2578.7944994002582], [1.60263858E12, 4004.0], [1.6026402E12, 3498.8959983825685], [1.60263978E12, 2402.050999635458], [1.60263918E12, 2454.703996038437], [1.60264008E12, 2095.405999982357], [1.60263816E12, 2224.732999664545], [1.60263786E12, 2303.8259999394418], [1.60263948E12, 2615.433999931812], [1.60263876E12, 2815.145999634266], [1.60263846E12, 2474.299999833107], [1.60263936E12, 5783.0], [1.60263906E12, 4572.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60263804E12, 3264.0], [1.60264026E12, 5052.0], [1.60263774E12, 3056.0], [1.60263864E12, 4222.0], [1.60263966E12, 4999.0], [1.60263834E12, 4218.0], [1.60263996E12, 4343.0], [1.60263924E12, 3436.0], [1.60263954E12, 3421.0], [1.60263894E12, 3552.0], [1.60263984E12, 2315.0], [1.60263792E12, 2516.0], [1.60263852E12, 2194.0], [1.60263822E12, 3105.0], [1.60263912E12, 2294.0], [1.60264014E12, 3817.0], [1.60263882E12, 2144.0], [1.6026378E12, 5336.0], [1.60264002E12, 2298.0], [1.6026384E12, 2806.0], [1.60263942E12, 2295.0], [1.6026381E12, 4910.0], [1.60263972E12, 2419.0], [1.602639E12, 3840.0], [1.6026387E12, 2263.0], [1.6026396E12, 4806.0], [1.6026393E12, 3504.0], [1.60263828E12, 4128.0], [1.60263798E12, 3639.0], [1.60263888E12, 4380.0], [1.6026399E12, 2574.0], [1.60263858E12, 4004.0], [1.6026402E12, 3498.0], [1.60263978E12, 2395.0], [1.60263918E12, 2387.0], [1.60264008E12, 2095.0], [1.60263816E12, 2212.0], [1.60263786E12, 2303.0], [1.60263948E12, 2614.0], [1.60263876E12, 2812.0], [1.60263846E12, 2471.0], [1.60263936E12, 5783.0], [1.60263906E12, 4572.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60263804E12, 5834.0], [1.60264026E12, 7201.5], [1.60263774E12, 6353.0], [1.60263864E12, 5692.0], [1.60263966E12, 7038.0], [1.60263834E12, 6554.0], [1.60263996E12, 5926.0], [1.60263924E12, 5469.0], [1.60263954E12, 6027.5], [1.60263894E12, 7241.0], [1.60263984E12, 4713.0], [1.60263792E12, 5468.0], [1.60263852E12, 4858.5], [1.60263822E12, 5457.0], [1.60263912E12, 5124.0], [1.60264014E12, 6160.0], [1.60263882E12, 3875.0], [1.6026378E12, 8396.0], [1.60264002E12, 4360.0], [1.6026384E12, 5062.0], [1.60263942E12, 4016.0], [1.6026381E12, 7870.0], [1.60263972E12, 5312.0], [1.602639E12, 6830.0], [1.6026387E12, 6175.0], [1.6026396E12, 6561.0], [1.6026393E12, 4778.5], [1.60263828E12, 6318.0], [1.60263798E12, 4974.5], [1.60263888E12, 6580.0], [1.6026399E12, 6271.0], [1.60263858E12, 7038.0], [1.6026402E12, 6892.0], [1.60263978E12, 5390.5], [1.60263918E12, 5280.0], [1.60264008E12, 4634.0], [1.60263816E12, 3338.0], [1.60263786E12, 5445.5], [1.60263948E12, 5080.5], [1.60263876E12, 5365.0], [1.60263846E12, 5694.0], [1.60263936E12, 9941.5], [1.60263906E12, 6774.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60264026E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2649.0, "minX": 1.0, "maxY": 7008.5, "series": [{"data": [[1.0, 7008.5], [2.0, 6115.0], [4.0, 4702.5], [5.0, 2968.5], [3.0, 5705.0], [6.0, 2649.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2649.0, "minX": 1.0, "maxY": 7006.0, "series": [{"data": [[1.0, 7006.0], [2.0, 6112.0], [4.0, 4698.5], [5.0, 2968.0], [3.0, 5704.0], [6.0, 2649.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.60263774E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.60263804E12, 2.0166666666666666], [1.60264026E12, 0.8333333333333334], [1.60263774E12, 1.1833333333333333], [1.60263864E12, 1.9833333333333334], [1.60263966E12, 1.75], [1.60263834E12, 1.8166666666666667], [1.60263996E12, 1.9333333333333333], [1.60263924E12, 1.9], [1.60263954E12, 1.9], [1.60263894E12, 1.6333333333333333], [1.60263984E12, 2.45], [1.60263792E12, 2.0166666666666666], [1.60263852E12, 2.3], [1.60263822E12, 1.9833333333333334], [1.60263912E12, 2.1166666666666667], [1.60264014E12, 1.7166666666666666], [1.60263882E12, 2.783333333333333], [1.6026378E12, 1.3333333333333333], [1.60264002E12, 2.65], [1.6026384E12, 2.35], [1.60263942E12, 2.9166666666666665], [1.6026381E12, 1.5166666666666666], [1.60263972E12, 2.45], [1.602639E12, 1.8], [1.6026387E12, 2.216666666666667], [1.6026396E12, 1.8333333333333333], [1.6026393E12, 2.2666666666666666], [1.60263828E12, 1.8166666666666667], [1.60263798E12, 2.3333333333333335], [1.60263888E12, 1.6666666666666667], [1.6026399E12, 1.9333333333333333], [1.60263858E12, 1.6833333333333333], [1.6026402E12, 1.75], [1.60263978E12, 2.3], [1.60263918E12, 2.216666666666667], [1.60264008E12, 2.45], [1.60263816E12, 3.3333333333333335], [1.60263786E12, 2.1], [1.60263948E12, 2.3666666666666667], [1.60263876E12, 1.95], [1.60263846E12, 2.316666666666667], [1.60263936E12, 1.2], [1.60263906E12, 1.4333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60264026E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.60263774E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.60263804E12, 2.0166666666666666], [1.60264026E12, 1.0333333333333334], [1.60263774E12, 0.9833333333333333], [1.60263864E12, 1.9833333333333334], [1.60263966E12, 1.75], [1.60263834E12, 1.8166666666666667], [1.60263996E12, 1.9333333333333333], [1.60263924E12, 1.9], [1.60263954E12, 1.9], [1.60263894E12, 1.6333333333333333], [1.60263984E12, 2.45], [1.60263792E12, 2.0166666666666666], [1.60263852E12, 2.3], [1.60263822E12, 1.9833333333333334], [1.60263912E12, 2.1166666666666667], [1.60264014E12, 1.7166666666666666], [1.60263882E12, 2.783333333333333], [1.6026378E12, 1.3333333333333333], [1.60264002E12, 2.65], [1.6026384E12, 2.35], [1.60263942E12, 2.9166666666666665], [1.6026381E12, 1.5166666666666666], [1.60263972E12, 2.45], [1.602639E12, 1.8], [1.6026387E12, 2.216666666666667], [1.6026396E12, 1.8333333333333333], [1.6026393E12, 2.2666666666666666], [1.60263828E12, 1.8166666666666667], [1.60263798E12, 2.3333333333333335], [1.60263888E12, 1.6666666666666667], [1.6026399E12, 1.9333333333333333], [1.60263858E12, 1.6833333333333333], [1.6026402E12, 1.75], [1.60263978E12, 2.3], [1.60263918E12, 2.216666666666667], [1.60264008E12, 2.45], [1.60263816E12, 3.3333333333333335], [1.60263786E12, 2.1], [1.60263948E12, 2.3666666666666667], [1.60263876E12, 1.95], [1.60263846E12, 2.316666666666667], [1.60263936E12, 1.2], [1.60263906E12, 1.4333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60264026E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.60263774E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.60263804E12, 2.0166666666666666], [1.60264026E12, 1.0333333333333334], [1.60263774E12, 0.9833333333333333], [1.60263864E12, 1.9833333333333334], [1.60263966E12, 1.75], [1.60263834E12, 1.8166666666666667], [1.60263996E12, 1.9333333333333333], [1.60263924E12, 1.9], [1.60263954E12, 1.9], [1.60263894E12, 1.6333333333333333], [1.60263984E12, 2.45], [1.60263792E12, 2.0166666666666666], [1.60263852E12, 2.3], [1.60263822E12, 1.9833333333333334], [1.60263912E12, 2.1166666666666667], [1.60264014E12, 1.7166666666666666], [1.60263882E12, 2.783333333333333], [1.6026378E12, 1.3333333333333333], [1.60264002E12, 2.65], [1.6026384E12, 2.35], [1.60263942E12, 2.9166666666666665], [1.6026381E12, 1.5166666666666666], [1.60263972E12, 2.45], [1.602639E12, 1.8], [1.6026387E12, 2.216666666666667], [1.6026396E12, 1.8333333333333333], [1.6026393E12, 2.2666666666666666], [1.60263828E12, 1.8166666666666667], [1.60263798E12, 2.3333333333333335], [1.60263888E12, 1.6666666666666667], [1.6026399E12, 1.9333333333333333], [1.60263858E12, 1.6833333333333333], [1.6026402E12, 1.75], [1.60263978E12, 2.3], [1.60263918E12, 2.216666666666667], [1.60264008E12, 2.45], [1.60263816E12, 3.3333333333333335], [1.60263786E12, 2.1], [1.60263948E12, 2.3666666666666667], [1.60263876E12, 1.95], [1.60263846E12, 2.316666666666667], [1.60263936E12, 1.2], [1.60263906E12, 1.4333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60264026E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.60263774E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.60263804E12, 2.0166666666666666], [1.60264026E12, 1.0333333333333334], [1.60263774E12, 0.9833333333333333], [1.60263864E12, 1.9833333333333334], [1.60263966E12, 1.75], [1.60263834E12, 1.8166666666666667], [1.60263996E12, 1.9333333333333333], [1.60263924E12, 1.9], [1.60263954E12, 1.9], [1.60263894E12, 1.6333333333333333], [1.60263984E12, 2.45], [1.60263792E12, 2.0166666666666666], [1.60263852E12, 2.3], [1.60263822E12, 1.9833333333333334], [1.60263912E12, 2.1166666666666667], [1.60264014E12, 1.7166666666666666], [1.60263882E12, 2.783333333333333], [1.6026378E12, 1.3333333333333333], [1.60264002E12, 2.65], [1.6026384E12, 2.35], [1.60263942E12, 2.9166666666666665], [1.6026381E12, 1.5166666666666666], [1.60263972E12, 2.45], [1.602639E12, 1.8], [1.6026387E12, 2.216666666666667], [1.6026396E12, 1.8333333333333333], [1.6026393E12, 2.2666666666666666], [1.60263828E12, 1.8166666666666667], [1.60263798E12, 2.3333333333333335], [1.60263888E12, 1.6666666666666667], [1.6026399E12, 1.9333333333333333], [1.60263858E12, 1.6833333333333333], [1.6026402E12, 1.75], [1.60263978E12, 2.3], [1.60263918E12, 2.216666666666667], [1.60264008E12, 2.45], [1.60263816E12, 3.3333333333333335], [1.60263786E12, 2.1], [1.60263948E12, 2.3666666666666667], [1.60263876E12, 1.95], [1.60263846E12, 2.316666666666667], [1.60263936E12, 1.2], [1.60263906E12, 1.4333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60264026E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

