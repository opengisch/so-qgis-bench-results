/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2121.0, "minX": 0.0, "maxY": 22874.0, "series": [{"data": [[0.0, 2121.0], [0.1, 2153.0], [0.2, 2172.0], [0.3, 2211.0], [0.4, 2263.0], [0.5, 2277.0], [0.6, 2293.0], [0.7, 2301.0], [0.8, 2314.0], [0.9, 2328.0], [1.0, 2346.0], [1.1, 2359.0], [1.2, 2365.0], [1.3, 2366.0], [1.4, 2377.0], [1.5, 2379.0], [1.6, 2386.0], [1.7, 2393.0], [1.8, 2398.0], [1.9, 2403.0], [2.0, 2407.0], [2.1, 2410.0], [2.2, 2417.0], [2.3, 2424.0], [2.4, 2431.0], [2.5, 2433.0], [2.6, 2437.0], [2.7, 2442.0], [2.8, 2450.0], [2.9, 2454.0], [3.0, 2458.0], [3.1, 2465.0], [3.2, 2470.0], [3.3, 2473.0], [3.4, 2477.0], [3.5, 2481.0], [3.6, 2491.0], [3.7, 2493.0], [3.8, 2496.0], [3.9, 2500.0], [4.0, 2504.0], [4.1, 2510.0], [4.2, 2514.0], [4.3, 2524.0], [4.4, 2530.0], [4.5, 2535.0], [4.6, 2541.0], [4.7, 2552.0], [4.8, 2562.0], [4.9, 2571.0], [5.0, 2577.0], [5.1, 2585.0], [5.2, 2591.0], [5.3, 2605.0], [5.4, 2607.0], [5.5, 2611.0], [5.6, 2617.0], [5.7, 2627.0], [5.8, 2640.0], [5.9, 2646.0], [6.0, 2658.0], [6.1, 2667.0], [6.2, 2673.0], [6.3, 2686.0], [6.4, 2689.0], [6.5, 2695.0], [6.6, 2709.0], [6.7, 2727.0], [6.8, 2737.0], [6.9, 2742.0], [7.0, 2748.0], [7.1, 2771.0], [7.2, 2783.0], [7.3, 2800.0], [7.4, 2817.0], [7.5, 2835.0], [7.6, 2842.0], [7.7, 2855.0], [7.8, 2864.0], [7.9, 2874.0], [8.0, 2879.0], [8.1, 2885.0], [8.2, 2893.0], [8.3, 2904.0], [8.4, 2912.0], [8.5, 2924.0], [8.6, 2936.0], [8.7, 2942.0], [8.8, 2955.0], [8.9, 2966.0], [9.0, 2969.0], [9.1, 2976.0], [9.2, 2986.0], [9.3, 2995.0], [9.4, 3005.0], [9.5, 3009.0], [9.6, 3023.0], [9.7, 3032.0], [9.8, 3037.0], [9.9, 3048.0], [10.0, 3051.0], [10.1, 3057.0], [10.2, 3067.0], [10.3, 3070.0], [10.4, 3076.0], [10.5, 3088.0], [10.6, 3098.0], [10.7, 3114.0], [10.8, 3131.0], [10.9, 3158.0], [11.0, 3174.0], [11.1, 3181.0], [11.2, 3187.0], [11.3, 3198.0], [11.4, 3204.0], [11.5, 3213.0], [11.6, 3221.0], [11.7, 3229.0], [11.8, 3236.0], [11.9, 3247.0], [12.0, 3256.0], [12.1, 3269.0], [12.2, 3280.0], [12.3, 3283.0], [12.4, 3288.0], [12.5, 3290.0], [12.6, 3298.0], [12.7, 3307.0], [12.8, 3313.0], [12.9, 3326.0], [13.0, 3333.0], [13.1, 3341.0], [13.2, 3343.0], [13.3, 3360.0], [13.4, 3367.0], [13.5, 3371.0], [13.6, 3377.0], [13.7, 3392.0], [13.8, 3401.0], [13.9, 3416.0], [14.0, 3420.0], [14.1, 3429.0], [14.2, 3439.0], [14.3, 3448.0], [14.4, 3461.0], [14.5, 3471.0], [14.6, 3485.0], [14.7, 3495.0], [14.8, 3498.0], [14.9, 3525.0], [15.0, 3534.0], [15.1, 3543.0], [15.2, 3566.0], [15.3, 3573.0], [15.4, 3576.0], [15.5, 3587.0], [15.6, 3604.0], [15.7, 3614.0], [15.8, 3620.0], [15.9, 3635.0], [16.0, 3649.0], [16.1, 3664.0], [16.2, 3684.0], [16.3, 3695.0], [16.4, 3700.0], [16.5, 3718.0], [16.6, 3739.0], [16.7, 3747.0], [16.8, 3768.0], [16.9, 3787.0], [17.0, 3797.0], [17.1, 3807.0], [17.2, 3815.0], [17.3, 3827.0], [17.4, 3840.0], [17.5, 3848.0], [17.6, 3860.0], [17.7, 3865.0], [17.8, 3872.0], [17.9, 3880.0], [18.0, 3887.0], [18.1, 3893.0], [18.2, 3904.0], [18.3, 3910.0], [18.4, 3912.0], [18.5, 3920.0], [18.6, 3926.0], [18.7, 3937.0], [18.8, 3943.0], [18.9, 3958.0], [19.0, 3968.0], [19.1, 3978.0], [19.2, 3986.0], [19.3, 3997.0], [19.4, 4006.0], [19.5, 4014.0], [19.6, 4022.0], [19.7, 4029.0], [19.8, 4032.0], [19.9, 4043.0], [20.0, 4049.0], [20.1, 4053.0], [20.2, 4060.0], [20.3, 4070.0], [20.4, 4080.0], [20.5, 4082.0], [20.6, 4092.0], [20.7, 4103.0], [20.8, 4112.0], [20.9, 4118.0], [21.0, 4128.0], [21.1, 4136.0], [21.2, 4145.0], [21.3, 4152.0], [21.4, 4155.0], [21.5, 4163.0], [21.6, 4175.0], [21.7, 4181.0], [21.8, 4192.0], [21.9, 4201.0], [22.0, 4207.0], [22.1, 4215.0], [22.2, 4221.0], [22.3, 4229.0], [22.4, 4239.0], [22.5, 4253.0], [22.6, 4263.0], [22.7, 4270.0], [22.8, 4279.0], [22.9, 4284.0], [23.0, 4291.0], [23.1, 4304.0], [23.2, 4315.0], [23.3, 4324.0], [23.4, 4339.0], [23.5, 4350.0], [23.6, 4357.0], [23.7, 4369.0], [23.8, 4383.0], [23.9, 4392.0], [24.0, 4401.0], [24.1, 4405.0], [24.2, 4409.0], [24.3, 4418.0], [24.4, 4426.0], [24.5, 4433.0], [24.6, 4445.0], [24.7, 4452.0], [24.8, 4462.0], [24.9, 4469.0], [25.0, 4472.0], [25.1, 4482.0], [25.2, 4493.0], [25.3, 4500.0], [25.4, 4506.0], [25.5, 4510.0], [25.6, 4516.0], [25.7, 4521.0], [25.8, 4526.0], [25.9, 4537.0], [26.0, 4542.0], [26.1, 4545.0], [26.2, 4551.0], [26.3, 4557.0], [26.4, 4572.0], [26.5, 4577.0], [26.6, 4587.0], [26.7, 4592.0], [26.8, 4597.0], [26.9, 4604.0], [27.0, 4607.0], [27.1, 4614.0], [27.2, 4624.0], [27.3, 4629.0], [27.4, 4632.0], [27.5, 4638.0], [27.6, 4642.0], [27.7, 4646.0], [27.8, 4656.0], [27.9, 4660.0], [28.0, 4667.0], [28.1, 4670.0], [28.2, 4680.0], [28.3, 4692.0], [28.4, 4702.0], [28.5, 4720.0], [28.6, 4731.0], [28.7, 4732.0], [28.8, 4738.0], [28.9, 4741.0], [29.0, 4744.0], [29.1, 4751.0], [29.2, 4755.0], [29.3, 4762.0], [29.4, 4770.0], [29.5, 4775.0], [29.6, 4781.0], [29.7, 4785.0], [29.8, 4790.0], [29.9, 4798.0], [30.0, 4800.0], [30.1, 4804.0], [30.2, 4808.0], [30.3, 4810.0], [30.4, 4814.0], [30.5, 4819.0], [30.6, 4825.0], [30.7, 4828.0], [30.8, 4841.0], [30.9, 4846.0], [31.0, 4852.0], [31.1, 4861.0], [31.2, 4870.0], [31.3, 4873.0], [31.4, 4877.0], [31.5, 4891.0], [31.6, 4893.0], [31.7, 4894.0], [31.8, 4897.0], [31.9, 4902.0], [32.0, 4908.0], [32.1, 4912.0], [32.2, 4916.0], [32.3, 4924.0], [32.4, 4928.0], [32.5, 4941.0], [32.6, 4951.0], [32.7, 4959.0], [32.8, 4971.0], [32.9, 4978.0], [33.0, 4983.0], [33.1, 4994.0], [33.2, 4998.0], [33.3, 5004.0], [33.4, 5009.0], [33.5, 5010.0], [33.6, 5015.0], [33.7, 5022.0], [33.8, 5030.0], [33.9, 5040.0], [34.0, 5044.0], [34.1, 5051.0], [34.2, 5056.0], [34.3, 5060.0], [34.4, 5066.0], [34.5, 5073.0], [34.6, 5081.0], [34.7, 5086.0], [34.8, 5088.0], [34.9, 5093.0], [35.0, 5095.0], [35.1, 5098.0], [35.2, 5102.0], [35.3, 5106.0], [35.4, 5109.0], [35.5, 5113.0], [35.6, 5118.0], [35.7, 5123.0], [35.8, 5128.0], [35.9, 5136.0], [36.0, 5142.0], [36.1, 5146.0], [36.2, 5152.0], [36.3, 5161.0], [36.4, 5164.0], [36.5, 5167.0], [36.6, 5169.0], [36.7, 5176.0], [36.8, 5182.0], [36.9, 5182.0], [37.0, 5187.0], [37.1, 5190.0], [37.2, 5195.0], [37.3, 5198.0], [37.4, 5204.0], [37.5, 5207.0], [37.6, 5214.0], [37.7, 5219.0], [37.8, 5223.0], [37.9, 5229.0], [38.0, 5234.0], [38.1, 5238.0], [38.2, 5241.0], [38.3, 5244.0], [38.4, 5250.0], [38.5, 5258.0], [38.6, 5260.0], [38.7, 5269.0], [38.8, 5272.0], [38.9, 5282.0], [39.0, 5285.0], [39.1, 5289.0], [39.2, 5291.0], [39.3, 5294.0], [39.4, 5299.0], [39.5, 5303.0], [39.6, 5306.0], [39.7, 5308.0], [39.8, 5311.0], [39.9, 5318.0], [40.0, 5322.0], [40.1, 5327.0], [40.2, 5333.0], [40.3, 5336.0], [40.4, 5341.0], [40.5, 5344.0], [40.6, 5346.0], [40.7, 5347.0], [40.8, 5353.0], [40.9, 5358.0], [41.0, 5362.0], [41.1, 5363.0], [41.2, 5367.0], [41.3, 5372.0], [41.4, 5376.0], [41.5, 5386.0], [41.6, 5387.0], [41.7, 5391.0], [41.8, 5400.0], [41.9, 5410.0], [42.0, 5418.0], [42.1, 5424.0], [42.2, 5428.0], [42.3, 5433.0], [42.4, 5437.0], [42.5, 5441.0], [42.6, 5444.0], [42.7, 5449.0], [42.8, 5452.0], [42.9, 5454.0], [43.0, 5460.0], [43.1, 5464.0], [43.2, 5468.0], [43.3, 5471.0], [43.4, 5474.0], [43.5, 5480.0], [43.6, 5488.0], [43.7, 5493.0], [43.8, 5498.0], [43.9, 5502.0], [44.0, 5509.0], [44.1, 5515.0], [44.2, 5517.0], [44.3, 5522.0], [44.4, 5526.0], [44.5, 5529.0], [44.6, 5534.0], [44.7, 5537.0], [44.8, 5539.0], [44.9, 5542.0], [45.0, 5548.0], [45.1, 5553.0], [45.2, 5555.0], [45.3, 5559.0], [45.4, 5562.0], [45.5, 5564.0], [45.6, 5570.0], [45.7, 5576.0], [45.8, 5582.0], [45.9, 5585.0], [46.0, 5592.0], [46.1, 5594.0], [46.2, 5601.0], [46.3, 5609.0], [46.4, 5617.0], [46.5, 5621.0], [46.6, 5622.0], [46.7, 5624.0], [46.8, 5627.0], [46.9, 5631.0], [47.0, 5633.0], [47.1, 5636.0], [47.2, 5642.0], [47.3, 5645.0], [47.4, 5647.0], [47.5, 5652.0], [47.6, 5657.0], [47.7, 5663.0], [47.8, 5673.0], [47.9, 5676.0], [48.0, 5678.0], [48.1, 5684.0], [48.2, 5688.0], [48.3, 5689.0], [48.4, 5691.0], [48.5, 5695.0], [48.6, 5696.0], [48.7, 5703.0], [48.8, 5709.0], [48.9, 5713.0], [49.0, 5716.0], [49.1, 5721.0], [49.2, 5725.0], [49.3, 5727.0], [49.4, 5733.0], [49.5, 5734.0], [49.6, 5737.0], [49.7, 5739.0], [49.8, 5744.0], [49.9, 5747.0], [50.0, 5751.0], [50.1, 5755.0], [50.2, 5760.0], [50.3, 5764.0], [50.4, 5766.0], [50.5, 5769.0], [50.6, 5775.0], [50.7, 5778.0], [50.8, 5781.0], [50.9, 5787.0], [51.0, 5792.0], [51.1, 5797.0], [51.2, 5799.0], [51.3, 5803.0], [51.4, 5811.0], [51.5, 5813.0], [51.6, 5818.0], [51.7, 5823.0], [51.8, 5827.0], [51.9, 5836.0], [52.0, 5839.0], [52.1, 5845.0], [52.2, 5846.0], [52.3, 5855.0], [52.4, 5864.0], [52.5, 5869.0], [52.6, 5874.0], [52.7, 5878.0], [52.8, 5881.0], [52.9, 5888.0], [53.0, 5891.0], [53.1, 5895.0], [53.2, 5898.0], [53.3, 5902.0], [53.4, 5906.0], [53.5, 5911.0], [53.6, 5914.0], [53.7, 5918.0], [53.8, 5921.0], [53.9, 5925.0], [54.0, 5930.0], [54.1, 5933.0], [54.2, 5937.0], [54.3, 5940.0], [54.4, 5945.0], [54.5, 5949.0], [54.6, 5952.0], [54.7, 5954.0], [54.8, 5956.0], [54.9, 5959.0], [55.0, 5963.0], [55.1, 5965.0], [55.2, 5973.0], [55.3, 5975.0], [55.4, 5978.0], [55.5, 5983.0], [55.6, 5990.0], [55.7, 5994.0], [55.8, 5997.0], [55.9, 6003.0], [56.0, 6010.0], [56.1, 6016.0], [56.2, 6022.0], [56.3, 6026.0], [56.4, 6029.0], [56.5, 6033.0], [56.6, 6039.0], [56.7, 6043.0], [56.8, 6048.0], [56.9, 6054.0], [57.0, 6058.0], [57.1, 6062.0], [57.2, 6071.0], [57.3, 6076.0], [57.4, 6080.0], [57.5, 6088.0], [57.6, 6094.0], [57.7, 6099.0], [57.8, 6104.0], [57.9, 6107.0], [58.0, 6111.0], [58.1, 6115.0], [58.2, 6117.0], [58.3, 6120.0], [58.4, 6126.0], [58.5, 6135.0], [58.6, 6141.0], [58.7, 6146.0], [58.8, 6155.0], [58.9, 6159.0], [59.0, 6166.0], [59.1, 6170.0], [59.2, 6177.0], [59.3, 6183.0], [59.4, 6190.0], [59.5, 6195.0], [59.6, 6198.0], [59.7, 6203.0], [59.8, 6207.0], [59.9, 6208.0], [60.0, 6210.0], [60.1, 6213.0], [60.2, 6215.0], [60.3, 6224.0], [60.4, 6231.0], [60.5, 6237.0], [60.6, 6242.0], [60.7, 6244.0], [60.8, 6258.0], [60.9, 6265.0], [61.0, 6272.0], [61.1, 6279.0], [61.2, 6283.0], [61.3, 6289.0], [61.4, 6292.0], [61.5, 6300.0], [61.6, 6306.0], [61.7, 6311.0], [61.8, 6317.0], [61.9, 6320.0], [62.0, 6324.0], [62.1, 6328.0], [62.2, 6332.0], [62.3, 6338.0], [62.4, 6345.0], [62.5, 6347.0], [62.6, 6351.0], [62.7, 6357.0], [62.8, 6359.0], [62.9, 6364.0], [63.0, 6367.0], [63.1, 6370.0], [63.2, 6376.0], [63.3, 6380.0], [63.4, 6383.0], [63.5, 6385.0], [63.6, 6386.0], [63.7, 6388.0], [63.8, 6391.0], [63.9, 6397.0], [64.0, 6400.0], [64.1, 6405.0], [64.2, 6406.0], [64.3, 6408.0], [64.4, 6413.0], [64.5, 6417.0], [64.6, 6423.0], [64.7, 6430.0], [64.8, 6433.0], [64.9, 6438.0], [65.0, 6439.0], [65.1, 6443.0], [65.2, 6448.0], [65.3, 6451.0], [65.4, 6458.0], [65.5, 6466.0], [65.6, 6470.0], [65.7, 6473.0], [65.8, 6478.0], [65.9, 6487.0], [66.0, 6490.0], [66.1, 6495.0], [66.2, 6500.0], [66.3, 6502.0], [66.4, 6508.0], [66.5, 6515.0], [66.6, 6518.0], [66.7, 6527.0], [66.8, 6528.0], [66.9, 6532.0], [67.0, 6539.0], [67.1, 6546.0], [67.2, 6549.0], [67.3, 6555.0], [67.4, 6560.0], [67.5, 6564.0], [67.6, 6568.0], [67.7, 6573.0], [67.8, 6580.0], [67.9, 6585.0], [68.0, 6590.0], [68.1, 6598.0], [68.2, 6607.0], [68.3, 6613.0], [68.4, 6622.0], [68.5, 6626.0], [68.6, 6630.0], [68.7, 6638.0], [68.8, 6644.0], [68.9, 6654.0], [69.0, 6660.0], [69.1, 6666.0], [69.2, 6670.0], [69.3, 6675.0], [69.4, 6680.0], [69.5, 6687.0], [69.6, 6701.0], [69.7, 6707.0], [69.8, 6711.0], [69.9, 6716.0], [70.0, 6728.0], [70.1, 6735.0], [70.2, 6744.0], [70.3, 6748.0], [70.4, 6753.0], [70.5, 6758.0], [70.6, 6761.0], [70.7, 6772.0], [70.8, 6784.0], [70.9, 6789.0], [71.0, 6795.0], [71.1, 6805.0], [71.2, 6807.0], [71.3, 6810.0], [71.4, 6814.0], [71.5, 6823.0], [71.6, 6829.0], [71.7, 6831.0], [71.8, 6837.0], [71.9, 6847.0], [72.0, 6856.0], [72.1, 6865.0], [72.2, 6869.0], [72.3, 6876.0], [72.4, 6878.0], [72.5, 6888.0], [72.6, 6891.0], [72.7, 6896.0], [72.8, 6903.0], [72.9, 6906.0], [73.0, 6915.0], [73.1, 6922.0], [73.2, 6925.0], [73.3, 6942.0], [73.4, 6951.0], [73.5, 6955.0], [73.6, 6959.0], [73.7, 6968.0], [73.8, 6972.0], [73.9, 6985.0], [74.0, 6988.0], [74.1, 6991.0], [74.2, 6994.0], [74.3, 6997.0], [74.4, 7001.0], [74.5, 7005.0], [74.6, 7009.0], [74.7, 7019.0], [74.8, 7024.0], [74.9, 7035.0], [75.0, 7039.0], [75.1, 7049.0], [75.2, 7054.0], [75.3, 7064.0], [75.4, 7072.0], [75.5, 7077.0], [75.6, 7085.0], [75.7, 7089.0], [75.8, 7105.0], [75.9, 7111.0], [76.0, 7115.0], [76.1, 7125.0], [76.2, 7134.0], [76.3, 7139.0], [76.4, 7146.0], [76.5, 7150.0], [76.6, 7154.0], [76.7, 7158.0], [76.8, 7163.0], [76.9, 7165.0], [77.0, 7172.0], [77.1, 7183.0], [77.2, 7195.0], [77.3, 7198.0], [77.4, 7204.0], [77.5, 7209.0], [77.6, 7223.0], [77.7, 7228.0], [77.8, 7229.0], [77.9, 7233.0], [78.0, 7238.0], [78.1, 7244.0], [78.2, 7256.0], [78.3, 7261.0], [78.4, 7268.0], [78.5, 7273.0], [78.6, 7281.0], [78.7, 7282.0], [78.8, 7286.0], [78.9, 7295.0], [79.0, 7297.0], [79.1, 7300.0], [79.2, 7306.0], [79.3, 7314.0], [79.4, 7319.0], [79.5, 7322.0], [79.6, 7327.0], [79.7, 7334.0], [79.8, 7338.0], [79.9, 7343.0], [80.0, 7351.0], [80.1, 7356.0], [80.2, 7367.0], [80.3, 7383.0], [80.4, 7390.0], [80.5, 7398.0], [80.6, 7404.0], [80.7, 7416.0], [80.8, 7425.0], [80.9, 7429.0], [81.0, 7440.0], [81.1, 7446.0], [81.2, 7451.0], [81.3, 7461.0], [81.4, 7469.0], [81.5, 7475.0], [81.6, 7481.0], [81.7, 7491.0], [81.8, 7498.0], [81.9, 7506.0], [82.0, 7510.0], [82.1, 7517.0], [82.2, 7526.0], [82.3, 7535.0], [82.4, 7545.0], [82.5, 7557.0], [82.6, 7561.0], [82.7, 7567.0], [82.8, 7576.0], [82.9, 7583.0], [83.0, 7593.0], [83.1, 7601.0], [83.2, 7606.0], [83.3, 7618.0], [83.4, 7630.0], [83.5, 7640.0], [83.6, 7644.0], [83.7, 7654.0], [83.8, 7664.0], [83.9, 7675.0], [84.0, 7682.0], [84.1, 7690.0], [84.2, 7711.0], [84.3, 7721.0], [84.4, 7733.0], [84.5, 7743.0], [84.6, 7747.0], [84.7, 7758.0], [84.8, 7764.0], [84.9, 7775.0], [85.0, 7783.0], [85.1, 7805.0], [85.2, 7814.0], [85.3, 7829.0], [85.4, 7837.0], [85.5, 7848.0], [85.6, 7854.0], [85.7, 7862.0], [85.8, 7869.0], [85.9, 7877.0], [86.0, 7883.0], [86.1, 7892.0], [86.2, 7903.0], [86.3, 7909.0], [86.4, 7921.0], [86.5, 7931.0], [86.6, 7936.0], [86.7, 7955.0], [86.8, 7967.0], [86.9, 7974.0], [87.0, 7991.0], [87.1, 8008.0], [87.2, 8014.0], [87.3, 8019.0], [87.4, 8033.0], [87.5, 8045.0], [87.6, 8054.0], [87.7, 8072.0], [87.8, 8081.0], [87.9, 8090.0], [88.0, 8101.0], [88.1, 8111.0], [88.2, 8122.0], [88.3, 8133.0], [88.4, 8136.0], [88.5, 8152.0], [88.6, 8172.0], [88.7, 8182.0], [88.8, 8207.0], [88.9, 8217.0], [89.0, 8223.0], [89.1, 8238.0], [89.2, 8247.0], [89.3, 8264.0], [89.4, 8280.0], [89.5, 8289.0], [89.6, 8311.0], [89.7, 8330.0], [89.8, 8350.0], [89.9, 8358.0], [90.0, 8371.0], [90.1, 8384.0], [90.2, 8398.0], [90.3, 8416.0], [90.4, 8422.0], [90.5, 8437.0], [90.6, 8456.0], [90.7, 8474.0], [90.8, 8501.0], [90.9, 8530.0], [91.0, 8550.0], [91.1, 8573.0], [91.2, 8603.0], [91.3, 8616.0], [91.4, 8637.0], [91.5, 8659.0], [91.6, 8674.0], [91.7, 8691.0], [91.8, 8717.0], [91.9, 8756.0], [92.0, 8771.0], [92.1, 8811.0], [92.2, 8843.0], [92.3, 8870.0], [92.4, 8883.0], [92.5, 8891.0], [92.6, 8937.0], [92.7, 8954.0], [92.8, 8979.0], [92.9, 9014.0], [93.0, 9023.0], [93.1, 9040.0], [93.2, 9077.0], [93.3, 9100.0], [93.4, 9125.0], [93.5, 9136.0], [93.6, 9179.0], [93.7, 9208.0], [93.8, 9231.0], [93.9, 9252.0], [94.0, 9261.0], [94.1, 9288.0], [94.2, 9299.0], [94.3, 9327.0], [94.4, 9365.0], [94.5, 9393.0], [94.6, 9436.0], [94.7, 9467.0], [94.8, 9505.0], [94.9, 9537.0], [95.0, 9569.0], [95.1, 9599.0], [95.2, 9620.0], [95.3, 9647.0], [95.4, 9676.0], [95.5, 9743.0], [95.6, 9778.0], [95.7, 9812.0], [95.8, 9851.0], [95.9, 9941.0], [96.0, 10005.0], [96.1, 10024.0], [96.2, 10051.0], [96.3, 10088.0], [96.4, 10125.0], [96.5, 10205.0], [96.6, 10260.0], [96.7, 10313.0], [96.8, 10355.0], [96.9, 10437.0], [97.0, 10542.0], [97.1, 10621.0], [97.2, 10768.0], [97.3, 10847.0], [97.4, 10896.0], [97.5, 10929.0], [97.6, 11169.0], [97.7, 11241.0], [97.8, 11369.0], [97.9, 11434.0], [98.0, 11590.0], [98.1, 11698.0], [98.2, 11847.0], [98.3, 11969.0], [98.4, 12076.0], [98.5, 12230.0], [98.6, 12351.0], [98.7, 12453.0], [98.8, 12592.0], [98.9, 12807.0], [99.0, 13055.0], [99.1, 13140.0], [99.2, 13402.0], [99.3, 13478.0], [99.4, 13601.0], [99.5, 13810.0], [99.6, 14372.0], [99.7, 14965.0], [99.8, 17505.0], [99.9, 18866.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 137.0, "series": [{"data": [[2100.0, 14.0], [2300.0, 62.0], [2200.0, 20.0], [2400.0, 104.0], [2500.0, 74.0], [2600.0, 65.0], [2800.0, 50.0], [2700.0, 39.0], [2900.0, 56.0], [3000.0, 68.0], [3100.0, 35.0], [3200.0, 68.0], [3300.0, 61.0], [3400.0, 53.0], [3500.0, 39.0], [3700.0, 32.0], [3600.0, 43.0], [3800.0, 60.0], [3900.0, 59.0], [4000.0, 70.0], [4200.0, 60.0], [4300.0, 49.0], [4100.0, 64.0], [4500.0, 79.0], [4600.0, 81.0], [4400.0, 68.0], [4800.0, 98.0], [4700.0, 82.0], [5100.0, 114.0], [5000.0, 101.0], [4900.0, 71.0], [5200.0, 107.0], [5300.0, 123.0], [5400.0, 107.0], [5600.0, 126.0], [5500.0, 122.0], [5800.0, 104.0], [5700.0, 134.0], [5900.0, 137.0], [6000.0, 97.0], [6100.0, 100.0], [6300.0, 129.0], [6200.0, 96.0], [6600.0, 74.0], [6500.0, 101.0], [6400.0, 115.0], [6900.0, 86.0], [6800.0, 86.0], [6700.0, 78.0], [7100.0, 79.0], [7000.0, 73.0], [7300.0, 74.0], [7400.0, 68.0], [7200.0, 92.0], [7600.0, 57.0], [7500.0, 65.0], [7700.0, 47.0], [7900.0, 45.0], [7800.0, 57.0], [8100.0, 42.0], [8000.0, 49.0], [8500.0, 20.0], [8600.0, 29.0], [8300.0, 34.0], [8400.0, 30.0], [8700.0, 18.0], [8200.0, 40.0], [8900.0, 17.0], [8800.0, 24.0], [9200.0, 27.0], [9100.0, 21.0], [9000.0, 21.0], [9600.0, 17.0], [9700.0, 10.0], [9500.0, 16.0], [9300.0, 16.0], [9400.0, 15.0], [9800.0, 12.0], [10000.0, 18.0], [10100.0, 8.0], [10200.0, 8.0], [9900.0, 7.0], [10600.0, 5.0], [10500.0, 5.0], [10400.0, 7.0], [10700.0, 4.0], [10300.0, 10.0], [10800.0, 9.0], [10900.0, 7.0], [11200.0, 5.0], [11100.0, 4.0], [11300.0, 7.0], [11600.0, 6.0], [11500.0, 4.0], [11400.0, 4.0], [11700.0, 1.0], [11800.0, 5.0], [12200.0, 4.0], [12000.0, 7.0], [11900.0, 3.0], [12100.0, 1.0], [12600.0, 4.0], [12400.0, 8.0], [12500.0, 1.0], [12300.0, 5.0], [12800.0, 3.0], [13300.0, 2.0], [12900.0, 3.0], [13100.0, 4.0], [13000.0, 2.0], [13200.0, 2.0], [13600.0, 3.0], [13700.0, 3.0], [13800.0, 2.0], [13400.0, 7.0], [13500.0, 3.0], [14100.0, 1.0], [13900.0, 2.0], [14300.0, 1.0], [14700.0, 2.0], [14800.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15200.0, 1.0], [15800.0, 1.0], [15500.0, 1.0], [17300.0, 1.0], [17500.0, 1.0], [17600.0, 2.0], [17900.0, 1.0], [18300.0, 1.0], [18900.0, 2.0], [18800.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [22800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.185185185185183, "minX": 1.60219218E12, "maxY": 12.0, "series": [{"data": [[1.60219254E12, 12.0], [1.60219284E12, 12.0], [1.60219446E12, 12.0], [1.60219344E12, 12.0], [1.60219314E12, 12.0], [1.60219356E12, 12.0], [1.60219326E12, 12.0], [1.60219416E12, 12.0], [1.60219224E12, 12.0], [1.60219386E12, 12.0], [1.60219332E12, 12.0], [1.60219302E12, 12.0], [1.60219392E12, 12.0], [1.60219362E12, 12.0], [1.60219404E12, 12.0], [1.60219374E12, 12.0], [1.60219242E12, 12.0], [1.60219464E12, 12.0], [1.60219272E12, 12.0], [1.60219434E12, 12.0], [1.6021938E12, 12.0], [1.6021935E12, 12.0], [1.60219218E12, 12.0], [1.6021944E12, 12.0], [1.60219248E12, 12.0], [1.6021941E12, 12.0], [1.6021923E12, 12.0], [1.60219452E12, 12.0], [1.6021926E12, 12.0], [1.60219422E12, 12.0], [1.6021932E12, 12.0], [1.6021929E12, 12.0], [1.60219428E12, 12.0], [1.60219236E12, 12.0], [1.60219398E12, 12.0], [1.60219266E12, 12.0], [1.60219296E12, 12.0], [1.60219458E12, 12.0], [1.60219308E12, 12.0], [1.6021947E12, 11.185185185185183], [1.60219278E12, 12.0], [1.60219368E12, 12.0], [1.60219338E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6021947E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5054.0, "minX": 1.0, "maxY": 7299.0, "series": [{"data": [[8.0, 5054.0], [4.0, 7261.0], [2.0, 7299.0], [1.0, 7042.0], [9.0, 6207.0], [10.0, 6456.0], [5.0, 7125.0], [11.0, 6481.0], [12.0, 5879.4320463320455], [6.0, 6997.0], [3.0, 7285.0], [7.0, 6942.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987285686765556, 5881.257368522441]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 528.3166666666667, "minX": 1.60219218E12, "maxY": 845896.3166666667, "series": [{"data": [[1.60219254E12, 382806.55], [1.60219284E12, 618904.9166666666], [1.60219446E12, 473954.1], [1.60219344E12, 589735.9666666667], [1.60219314E12, 527601.4833333333], [1.60219356E12, 505724.4666666667], [1.60219326E12, 493525.93333333335], [1.60219416E12, 563336.2333333333], [1.60219224E12, 689692.5833333334], [1.60219386E12, 253264.55], [1.60219332E12, 474979.38333333336], [1.60219302E12, 607345.5666666667], [1.60219392E12, 540466.2833333333], [1.60219362E12, 517007.75], [1.60219404E12, 716089.8166666667], [1.60219374E12, 670343.1333333333], [1.60219242E12, 640317.5], [1.60219464E12, 499365.2833333333], [1.60219272E12, 734273.8], [1.60219434E12, 535789.8666666667], [1.6021938E12, 370677.45], [1.6021935E12, 675192.3166666667], [1.60219218E12, 447412.85], [1.6021944E12, 606205.8166666667], [1.60219248E12, 467614.7833333333], [1.6021941E12, 845896.3166666667], [1.6021923E12, 518833.18333333335], [1.60219452E12, 539561.8], [1.6021926E12, 296859.1666666667], [1.60219422E12, 627877.0333333333], [1.6021932E12, 798322.0833333334], [1.6021929E12, 625340.1166666667], [1.60219428E12, 507967.93333333335], [1.60219236E12, 499513.4], [1.60219398E12, 530485.8666666667], [1.60219266E12, 517119.51666666666], [1.60219296E12, 710774.9333333333], [1.60219458E12, 652869.6], [1.60219308E12, 558498.9833333333], [1.6021947E12, 333813.1], [1.60219278E12, 802844.3], [1.60219368E12, 463637.8333333333], [1.60219338E12, 540636.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60219254E12, 669.1833333333333], [1.60219284E12, 1072.6], [1.60219446E12, 1202.2666666666667], [1.60219344E12, 809.4666666666667], [1.60219314E12, 1027.1833333333334], [1.60219356E12, 846.3333333333334], [1.60219326E12, 1264.4666666666667], [1.60219416E12, 1106.25], [1.60219224E12, 540.85], [1.60219386E12, 1215.15], [1.60219332E12, 732.8333333333334], [1.60219302E12, 760.9833333333333], [1.60219392E12, 1059.6], [1.60219362E12, 985.3], [1.60219404E12, 817.2666666666667], [1.60219374E12, 1053.05], [1.60219242E12, 1014.2], [1.60219464E12, 734.9833333333333], [1.60219272E12, 786.6833333333333], [1.60219434E12, 872.0833333333334], [1.6021938E12, 528.3166666666667], [1.6021935E12, 623.55], [1.60219218E12, 532.4], [1.6021944E12, 904.0333333333333], [1.60219248E12, 885.3166666666667], [1.6021941E12, 789.45], [1.6021923E12, 971.8333333333334], [1.60219452E12, 1090.2333333333333], [1.6021926E12, 1436.4333333333334], [1.60219422E12, 1031.4], [1.6021932E12, 875.8833333333333], [1.6021929E12, 1041.3666666666666], [1.60219428E12, 1119.6666666666667], [1.60219236E12, 812.5166666666667], [1.60219398E12, 832.6333333333333], [1.60219266E12, 868.5666666666667], [1.60219296E12, 1055.15], [1.60219458E12, 810.3666666666667], [1.60219308E12, 898.1333333333333], [1.6021947E12, 616.4833333333333], [1.60219278E12, 843.4], [1.60219368E12, 721.75], [1.60219338E12, 724.4333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6021947E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3613.348958333333, "minX": 1.60219218E12, "maxY": 9463.013698630135, "series": [{"data": [[1.60219254E12, 7918.91489361702], [1.60219284E12, 5074.5985915492965], [1.60219446E12, 4489.993710691826], [1.60219344E12, 7108.3396226415125], [1.60219314E12, 5442.06666666667], [1.60219356E12, 6828.058333333333], [1.60219326E12, 4428.541666666667], [1.60219416E12, 4890.089041095891], [1.60219224E12, 8884.8], [1.60219386E12, 4486.392857142857], [1.60219332E12, 7169.836734693877], [1.60219302E12, 7320.92], [1.60219392E12, 5042.992907801419], [1.60219362E12, 5121.446043165465], [1.60219404E12, 6862.682242990657], [1.60219374E12, 5098.732394366199], [1.60219242E12, 5066.244604316548], [1.60219464E12, 7471.303030303031], [1.60219272E12, 6709.669902912621], [1.60219434E12, 6383.460869565214], [1.6021938E12, 9463.013698630135], [1.6021935E12, 7393.31395348837], [1.60219218E12, 6310.628571428571], [1.6021944E12, 6001.237288135591], [1.60219248E12, 5931.791666666667], [1.6021941E12, 6914.480769230771], [1.6021923E12, 5802.708029197079], [1.60219452E12, 4914.104166666665], [1.6021926E12, 3613.348958333333], [1.60219422E12, 5310.272058823532], [1.6021932E12, 6006.643478260871], [1.6021929E12, 5235.109489051094], [1.60219428E12, 4869.249999999999], [1.60219236E12, 6141.051724137932], [1.60219398E12, 5849.541666666667], [1.60219266E12, 6062.17741935484], [1.60219296E12, 5147.442857142858], [1.60219458E12, 6637.3644859813085], [1.60219308E12, 5994.762711864405], [1.6021947E12, 6939.777777777779], [1.60219278E12, 6614.612612612612], [1.60219368E12, 7202.504950495044], [1.60219338E12, 7190.216494845362]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6021947E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3612.6302083333326, "minX": 1.60219218E12, "maxY": 9461.041095890414, "series": [{"data": [[1.60219254E12, 7916.946808510633], [1.60219284E12, 5072.654929577465], [1.60219446E12, 4488.823899371068], [1.60219344E12, 7105.669811320755], [1.60219314E12, 5440.303703703705], [1.60219356E12, 6826.424999999999], [1.60219326E12, 4427.190476190476], [1.60219416E12, 4888.746575342468], [1.60219224E12, 8880.533333333338], [1.60219386E12, 4485.749999999999], [1.60219332E12, 7167.571428571428], [1.60219302E12, 7318.159999999998], [1.60219392E12, 5041.503546099291], [1.60219362E12, 5120.007194244606], [1.60219404E12, 6860.009345794394], [1.60219374E12, 5096.887323943663], [1.60219242E12, 5063.949640287766], [1.60219464E12, 7469.272727272727], [1.60219272E12, 6706.504854368932], [1.60219434E12, 6381.573913043479], [1.6021938E12, 9461.041095890414], [1.6021935E12, 7389.860465116278], [1.60219218E12, 6307.842857142853], [1.6021944E12, 5999.355932203389], [1.60219248E12, 5929.958333333334], [1.6021941E12, 6911.41346153846], [1.6021923E12, 5800.868613138686], [1.60219452E12, 4912.555555555556], [1.6021926E12, 3612.6302083333326], [1.60219422E12, 5308.602941176472], [1.6021932E12, 6003.591304347823], [1.6021929E12, 5233.065693430658], [1.60219428E12, 4867.864864864863], [1.60219236E12, 6138.922413793101], [1.60219398E12, 5847.73333333333], [1.60219266E12, 6060.072580645163], [1.60219296E12, 5145.128571428571], [1.60219458E12, 6635.130841121497], [1.60219308E12, 5992.42372881356], [1.6021947E12, 6938.197530864195], [1.60219278E12, 6611.342342342341], [1.60219368E12, 7200.653465346534], [1.60219338E12, 7187.525773195876]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6021947E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05208333333333332, "minX": 1.60219218E12, "maxY": 2.0285714285714294, "series": [{"data": [[1.60219254E12, 0.17021276595744683], [1.60219284E12, 0.06338028169014087], [1.60219446E12, 0.07547169811320761], [1.60219344E12, 0.14150943396226426], [1.60219314E12, 0.10370370370370369], [1.60219356E12, 0.12500000000000006], [1.60219326E12, 0.0892857142857143], [1.60219416E12, 0.0684931506849315], [1.60219224E12, 0.22666666666666657], [1.60219386E12, 0.08333333333333333], [1.60219332E12, 0.13265306122448983], [1.60219302E12, 0.12000000000000005], [1.60219392E12, 0.07801418439716314], [1.60219362E12, 0.0935251798561151], [1.60219404E12, 0.11214953271028036], [1.60219374E12, 0.08450704225352111], [1.60219242E12, 0.0935251798561151], [1.60219464E12, 0.11111111111111117], [1.60219272E12, 0.09708737864077667], [1.60219434E12, 0.12173913043478268], [1.6021938E12, 0.136986301369863], [1.6021935E12, 0.15116279069767447], [1.60219218E12, 2.0285714285714294], [1.6021944E12, 0.07627118644067796], [1.60219248E12, 0.12500000000000008], [1.6021941E12, 0.06730769230769232], [1.6021923E12, 0.0948905109489051], [1.60219452E12, 0.08333333333333337], [1.6021926E12, 0.05208333333333332], [1.60219422E12, 0.06617647058823532], [1.6021932E12, 0.11304347826086956], [1.6021929E12, 0.10218978102189792], [1.60219428E12, 0.09459459459459461], [1.60219236E12, 0.1293103448275862], [1.60219398E12, 0.09166666666666665], [1.60219266E12, 0.12903225806451618], [1.60219296E12, 0.09285714285714287], [1.60219458E12, 0.13084112149532715], [1.60219308E12, 0.16101694915254247], [1.6021947E12, 0.12345679012345676], [1.60219278E12, 0.15315315315315314], [1.60219368E12, 0.12871287128712874], [1.60219338E12, 0.14432989690721645]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6021947E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2121.0, "minX": 1.60219218E12, "maxY": 22874.0, "series": [{"data": [[1.60219254E12, 12486.0], [1.60219284E12, 7931.0], [1.60219446E12, 9393.0], [1.60219344E12, 14673.0], [1.60219314E12, 8259.0], [1.60219356E12, 22874.0], [1.60219326E12, 10403.0], [1.60219416E12, 7770.0], [1.60219224E12, 13659.0], [1.60219386E12, 10337.0], [1.60219332E12, 13810.0], [1.60219302E12, 10024.0], [1.60219392E12, 8042.0], [1.60219362E12, 6309.0], [1.60219404E12, 9434.0], [1.60219374E12, 8018.0], [1.60219242E12, 7858.0], [1.60219464E12, 12138.0], [1.60219272E12, 10327.0], [1.60219434E12, 8757.0], [1.6021938E12, 13492.0], [1.6021935E12, 17623.0], [1.60219218E12, 8975.0], [1.6021944E12, 8756.0], [1.60219248E12, 8640.0], [1.6021941E12, 9046.0], [1.6021923E12, 15855.0], [1.60219452E12, 10768.0], [1.6021926E12, 9125.0], [1.60219422E12, 8794.0], [1.6021932E12, 12477.0], [1.6021929E12, 8307.0], [1.60219428E12, 7747.0], [1.60219236E12, 14888.0], [1.60219398E12, 9665.0], [1.60219266E12, 10378.0], [1.60219296E12, 10467.0], [1.60219458E12, 10769.0], [1.60219308E12, 8985.0], [1.6021947E12, 9252.0], [1.60219278E12, 9334.0], [1.60219368E12, 13766.0], [1.60219338E12, 12205.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60219254E12, 5195.0], [1.60219284E12, 2641.601991612911], [1.60219446E12, 2389.0799997329714], [1.60219344E12, 3740.0], [1.60219314E12, 2328.687999610901], [1.60219356E12, 2690.9579993653297], [1.60219326E12, 2285.5209999597073], [1.60219416E12, 2273.0], [1.60219224E12, 5241.0], [1.60219386E12, 2375.8989992344377], [1.60219332E12, 4498.0], [1.60219302E12, 5397.0], [1.60219392E12, 2371.779999661446], [1.60219362E12, 2670.699993491173], [1.60219404E12, 4744.0], [1.60219374E12, 3462.027991681099], [1.60219242E12, 3352.099997162819], [1.60219464E12, 3664.0], [1.60219272E12, 4107.0], [1.60219434E12, 2660.23599670887], [1.6021938E12, 3880.0], [1.6021935E12, 4656.0], [1.60219218E12, 3078.0], [1.6021944E12, 3399.7079901266097], [1.60219248E12, 3304.4449998557566], [1.6021941E12, 4817.0], [1.6021923E12, 2347.4839999341966], [1.60219452E12, 2121.3049999654295], [1.6021926E12, 2428.1619988036155], [1.60219422E12, 2265.5629996407033], [1.6021932E12, 2737.1319999170305], [1.6021929E12, 2430.935999736786], [1.60219428E12, 2495.6449877440928], [1.60219236E12, 2537.10599994421], [1.60219398E12, 3346.4499985575676], [1.60219266E12, 3119.999994277954], [1.60219296E12, 2171.268999966383], [1.60219458E12, 3868.0], [1.60219308E12, 4353.849995076656], [1.6021947E12, 5054.0], [1.60219278E12, 4038.4319985580446], [1.60219368E12, 3397.0], [1.60219338E12, 3684.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60219254E12, 5195.0], [1.60219284E12, 2673.2622033548355], [1.60219446E12, 2390.0880001068117], [1.60219344E12, 3753.1053022551537], [1.60219314E12, 2330.1568001556398], [1.60219356E12, 2693.353800253868], [1.60219326E12, 2285.673100016117], [1.60219416E12, 2273.0], [1.60219224E12, 5241.0], [1.60219386E12, 2378.7889003062246], [1.60219332E12, 4498.0], [1.60219302E12, 5397.0], [1.60219392E12, 2373.058000135422], [1.60219362E12, 2695.270002603531], [1.60219404E12, 4744.9688001441955], [1.60219374E12, 3493.4308033275606], [1.60219242E12, 3362.8100011348724], [1.60219464E12, 3664.0], [1.60219272E12, 4107.858400287628], [1.60219434E12, 2672.659601316452], [1.6021938E12, 3880.0], [1.6021935E12, 4656.0], [1.60219218E12, 3078.0], [1.6021944E12, 3436.978803949356], [1.60219248E12, 3304.989500057697], [1.6021941E12, 4817.829500210285], [1.6021923E12, 2347.7324000263216], [1.60219452E12, 2121.4355000138285], [1.6021926E12, 2432.6782004785537], [1.60219422E12, 2266.919300143719], [1.6021932E12, 2737.445200033188], [1.6021929E12, 2431.9296001052858], [1.60219428E12, 2541.9095049023626], [1.60219236E12, 2537.316600022316], [1.60219398E12, 3351.895000576973], [1.60219266E12, 3141.6000022888184], [1.60219296E12, 2171.395900013447], [1.60219458E12, 3882.7396021938325], [1.60219308E12, 4372.4350019693375], [1.6021947E12, 5054.0], [1.60219278E12, 4043.8752005767824], [1.60219368E12, 3399.8812028598786], [1.60219338E12, 3684.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60219254E12, 5195.0], [1.60219284E12, 2659.1909958064557], [1.60219446E12, 2389.6399998664856], [1.60219344E12, 3743.646497181058], [1.60219314E12, 2329.5039998054503], [1.60219356E12, 2692.288999682665], [1.60219326E12, 2285.6054999798534], [1.60219416E12, 2273.0], [1.60219224E12, 5241.0], [1.60219386E12, 2377.504499617219], [1.60219332E12, 4498.0], [1.60219302E12, 5397.0], [1.60219392E12, 2372.489999830723], [1.60219362E12, 2684.3499967455864], [1.60219404E12, 4744.363999819756], [1.60219374E12, 3479.4739958405494], [1.60219242E12, 3358.0499985814095], [1.60219464E12, 3664.0], [1.60219272E12, 4107.0], [1.60219434E12, 2667.137998354435], [1.6021938E12, 3880.0], [1.6021935E12, 4656.0], [1.60219218E12, 3078.0], [1.6021944E12, 3420.413995063305], [1.60219248E12, 3304.7474999278784], [1.6021941E12, 4817.0], [1.6021923E12, 2347.6219999670984], [1.60219452E12, 2121.3774999827147], [1.6021926E12, 2430.670999401808], [1.60219422E12, 2266.3164998203515], [1.6021932E12, 2737.3059999585153], [1.6021929E12, 2431.4879998683928], [1.60219428E12, 2521.3474938720465], [1.60219236E12, 2537.222999972105], [1.60219398E12, 3349.474999278784], [1.60219266E12, 3131.999997138977], [1.60219296E12, 2171.3394999831917], [1.60219458E12, 3873.5379972577093], [1.60219308E12, 4364.174997538328], [1.6021947E12, 5054.0], [1.60219278E12, 4041.4559992790223], [1.60219368E12, 3397.0], [1.60219338E12, 3684.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60219254E12, 5195.0], [1.60219284E12, 2571.0], [1.60219446E12, 2386.0], [1.60219344E12, 3740.0], [1.60219314E12, 2326.0], [1.60219356E12, 2689.0], [1.60219326E12, 2285.0], [1.60219416E12, 2273.0], [1.60219224E12, 5241.0], [1.60219386E12, 2366.0], [1.60219332E12, 4498.0], [1.60219302E12, 5397.0], [1.60219392E12, 2369.0], [1.60219362E12, 2620.0], [1.60219404E12, 4744.0], [1.60219374E12, 3392.0], [1.60219242E12, 3330.0], [1.60219464E12, 3664.0], [1.60219272E12, 4107.0], [1.60219434E12, 2655.0], [1.6021938E12, 3880.0], [1.6021935E12, 4656.0], [1.60219218E12, 3078.0], [1.6021944E12, 3375.0], [1.60219248E12, 3304.0], [1.6021941E12, 4817.0], [1.6021923E12, 2347.0], [1.60219452E12, 2121.0], [1.6021926E12, 2409.0], [1.60219422E12, 2263.0], [1.6021932E12, 2737.0], [1.6021929E12, 2429.0], [1.60219428E12, 2378.0], [1.60219236E12, 2537.0], [1.60219398E12, 3342.0], [1.60219266E12, 3096.0], [1.60219296E12, 2171.0], [1.60219458E12, 3868.0], [1.60219308E12, 4343.0], [1.6021947E12, 5054.0], [1.60219278E12, 4038.0], [1.60219368E12, 3397.0], [1.60219338E12, 3684.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60219254E12, 7513.5], [1.60219284E12, 5087.5], [1.60219446E12, 4298.0], [1.60219344E12, 6902.0], [1.60219314E12, 6029.0], [1.60219356E12, 5304.5], [1.60219326E12, 3914.5], [1.60219416E12, 5244.5], [1.60219224E12, 8789.0], [1.60219386E12, 4148.0], [1.60219332E12, 6614.5], [1.60219302E12, 7320.0], [1.60219392E12, 5118.0], [1.60219362E12, 5351.0], [1.60219404E12, 6882.0], [1.60219374E12, 4902.0], [1.60219242E12, 4983.0], [1.60219464E12, 7436.0], [1.60219272E12, 6618.0], [1.60219434E12, 6435.0], [1.6021938E12, 9851.0], [1.6021935E12, 6838.5], [1.60219218E12, 6564.5], [1.6021944E12, 5972.5], [1.60219248E12, 5875.5], [1.6021941E12, 6892.5], [1.6021923E12, 5344.0], [1.60219452E12, 4786.5], [1.6021926E12, 3227.5], [1.60219422E12, 5474.5], [1.6021932E12, 5549.0], [1.6021929E12, 5593.0], [1.60219428E12, 4608.5], [1.60219236E12, 5609.5], [1.60219398E12, 5399.0], [1.60219266E12, 5499.5], [1.60219296E12, 4805.0], [1.60219458E12, 6250.0], [1.60219308E12, 5685.0], [1.6021947E12, 6942.0], [1.60219278E12, 6443.0], [1.60219368E12, 5790.0], [1.60219338E12, 7283.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6021947E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2630.0, "minX": 1.0, "maxY": 7005.5, "series": [{"data": [[1.0, 7005.5], [2.0, 6231.5], [4.0, 4640.0], [5.0, 3049.5], [3.0, 5734.0], [6.0, 2630.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 5624.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2630.0, "minX": 1.0, "maxY": 7003.0, "series": [{"data": [[1.0, 7003.0], [2.0, 6230.5], [4.0, 4640.0], [5.0, 3049.5], [3.0, 5734.0], [6.0, 2630.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 5623.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.15, "minX": 1.60219218E12, "maxY": 3.2, "series": [{"data": [[1.60219254E12, 1.5666666666666667], [1.60219284E12, 2.3666666666666667], [1.60219446E12, 2.65], [1.60219344E12, 1.7666666666666666], [1.60219314E12, 2.25], [1.60219356E12, 2.0], [1.60219326E12, 2.8], [1.60219416E12, 2.433333333333333], [1.60219224E12, 1.25], [1.60219386E12, 2.8], [1.60219332E12, 1.6333333333333333], [1.60219302E12, 1.6666666666666667], [1.60219392E12, 2.35], [1.60219362E12, 2.316666666666667], [1.60219404E12, 1.7833333333333334], [1.60219374E12, 2.3666666666666667], [1.60219242E12, 2.316666666666667], [1.60219464E12, 1.65], [1.60219272E12, 1.7166666666666666], [1.60219434E12, 1.9166666666666667], [1.6021938E12, 1.2166666666666666], [1.6021935E12, 1.4333333333333333], [1.60219218E12, 1.3666666666666667], [1.6021944E12, 1.9666666666666666], [1.60219248E12, 2.0], [1.6021941E12, 1.7333333333333334], [1.6021923E12, 2.283333333333333], [1.60219452E12, 2.4], [1.6021926E12, 3.2], [1.60219422E12, 2.2666666666666666], [1.6021932E12, 1.9166666666666667], [1.6021929E12, 2.283333333333333], [1.60219428E12, 2.466666666666667], [1.60219236E12, 1.9333333333333333], [1.60219398E12, 2.0], [1.60219266E12, 2.066666666666667], [1.60219296E12, 2.3333333333333335], [1.60219458E12, 1.7833333333333334], [1.60219308E12, 1.9666666666666666], [1.6021947E12, 1.15], [1.60219278E12, 1.85], [1.60219368E12, 1.6833333333333333], [1.60219338E12, 1.6166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6021947E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60219218E12, "maxY": 3.2, "series": [{"data": [[1.60219254E12, 1.5666666666666667], [1.60219284E12, 2.3666666666666667], [1.60219446E12, 2.65], [1.60219344E12, 1.7666666666666666], [1.60219314E12, 2.25], [1.60219356E12, 2.0], [1.60219326E12, 2.8], [1.60219416E12, 2.433333333333333], [1.60219224E12, 1.25], [1.60219386E12, 2.8], [1.60219332E12, 1.6333333333333333], [1.60219302E12, 1.6666666666666667], [1.60219392E12, 2.35], [1.60219362E12, 2.316666666666667], [1.60219404E12, 1.7833333333333334], [1.60219374E12, 2.3666666666666667], [1.60219242E12, 2.316666666666667], [1.60219464E12, 1.65], [1.60219272E12, 1.7166666666666666], [1.60219434E12, 1.9166666666666667], [1.6021938E12, 1.2166666666666666], [1.6021935E12, 1.4333333333333333], [1.60219218E12, 1.1666666666666667], [1.6021944E12, 1.9666666666666666], [1.60219248E12, 2.0], [1.6021941E12, 1.7333333333333334], [1.6021923E12, 2.283333333333333], [1.60219452E12, 2.4], [1.6021926E12, 3.2], [1.60219422E12, 2.2666666666666666], [1.6021932E12, 1.9166666666666667], [1.6021929E12, 2.283333333333333], [1.60219428E12, 2.466666666666667], [1.60219236E12, 1.9333333333333333], [1.60219398E12, 2.0], [1.60219266E12, 2.066666666666667], [1.60219296E12, 2.3333333333333335], [1.60219458E12, 1.7833333333333334], [1.60219308E12, 1.95], [1.6021947E12, 1.35], [1.60219278E12, 1.85], [1.60219368E12, 1.6833333333333333], [1.60219338E12, 1.6166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60219308E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6021947E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60219218E12, "maxY": 3.2, "series": [{"data": [[1.60219254E12, 1.5666666666666667], [1.60219284E12, 2.3666666666666667], [1.60219446E12, 2.65], [1.60219344E12, 1.7666666666666666], [1.60219314E12, 2.25], [1.60219356E12, 2.0], [1.60219326E12, 2.8], [1.60219416E12, 2.433333333333333], [1.60219224E12, 1.25], [1.60219386E12, 2.8], [1.60219332E12, 1.6333333333333333], [1.60219302E12, 1.6666666666666667], [1.60219392E12, 2.35], [1.60219362E12, 2.316666666666667], [1.60219404E12, 1.7833333333333334], [1.60219374E12, 2.3666666666666667], [1.60219242E12, 2.316666666666667], [1.60219464E12, 1.65], [1.60219272E12, 1.7166666666666666], [1.60219434E12, 1.9166666666666667], [1.6021938E12, 1.2166666666666666], [1.6021935E12, 1.4333333333333333], [1.60219218E12, 1.1666666666666667], [1.6021944E12, 1.9666666666666666], [1.60219248E12, 2.0], [1.6021941E12, 1.7333333333333334], [1.6021923E12, 2.283333333333333], [1.60219452E12, 2.4], [1.6021926E12, 3.2], [1.60219422E12, 2.2666666666666666], [1.6021932E12, 1.9166666666666667], [1.6021929E12, 2.283333333333333], [1.60219428E12, 2.466666666666667], [1.60219236E12, 1.9333333333333333], [1.60219398E12, 2.0], [1.60219266E12, 2.066666666666667], [1.60219296E12, 2.3333333333333335], [1.60219458E12, 1.7833333333333334], [1.60219308E12, 1.95], [1.6021947E12, 1.35], [1.60219278E12, 1.85], [1.60219368E12, 1.6833333333333333], [1.60219338E12, 1.6166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60219308E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6021947E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60219218E12, "maxY": 3.2, "series": [{"data": [[1.60219254E12, 1.5666666666666667], [1.60219284E12, 2.3666666666666667], [1.60219446E12, 2.65], [1.60219344E12, 1.7666666666666666], [1.60219314E12, 2.25], [1.60219356E12, 2.0], [1.60219326E12, 2.8], [1.60219416E12, 2.433333333333333], [1.60219224E12, 1.25], [1.60219386E12, 2.8], [1.60219332E12, 1.6333333333333333], [1.60219302E12, 1.6666666666666667], [1.60219392E12, 2.35], [1.60219362E12, 2.316666666666667], [1.60219404E12, 1.7833333333333334], [1.60219374E12, 2.3666666666666667], [1.60219242E12, 2.316666666666667], [1.60219464E12, 1.65], [1.60219272E12, 1.7166666666666666], [1.60219434E12, 1.9166666666666667], [1.6021938E12, 1.2166666666666666], [1.6021935E12, 1.4333333333333333], [1.60219218E12, 1.1666666666666667], [1.6021944E12, 1.9666666666666666], [1.60219248E12, 2.0], [1.6021941E12, 1.7333333333333334], [1.6021923E12, 2.283333333333333], [1.60219452E12, 2.4], [1.6021926E12, 3.2], [1.60219422E12, 2.2666666666666666], [1.6021932E12, 1.9166666666666667], [1.6021929E12, 2.283333333333333], [1.60219428E12, 2.466666666666667], [1.60219236E12, 1.9333333333333333], [1.60219398E12, 2.0], [1.60219266E12, 2.066666666666667], [1.60219296E12, 2.3333333333333335], [1.60219458E12, 1.7833333333333334], [1.60219308E12, 1.95], [1.6021947E12, 1.35], [1.60219278E12, 1.85], [1.60219368E12, 1.6833333333333333], [1.60219338E12, 1.6166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60219308E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6021947E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

