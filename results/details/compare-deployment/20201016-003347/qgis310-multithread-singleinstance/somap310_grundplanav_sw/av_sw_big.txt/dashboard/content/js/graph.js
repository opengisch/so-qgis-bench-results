/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2141.0, "minX": 0.0, "maxY": 22419.0, "series": [{"data": [[0.0, 2141.0], [0.1, 2171.0], [0.2, 2186.0], [0.3, 2202.0], [0.4, 2210.0], [0.5, 2217.0], [0.6, 2229.0], [0.7, 2234.0], [0.8, 2241.0], [0.9, 2252.0], [1.0, 2256.0], [1.1, 2264.0], [1.2, 2271.0], [1.3, 2275.0], [1.4, 2278.0], [1.5, 2282.0], [1.6, 2291.0], [1.7, 2296.0], [1.8, 2301.0], [1.9, 2303.0], [2.0, 2311.0], [2.1, 2320.0], [2.2, 2324.0], [2.3, 2327.0], [2.4, 2333.0], [2.5, 2338.0], [2.6, 2341.0], [2.7, 2347.0], [2.8, 2358.0], [2.9, 2361.0], [3.0, 2368.0], [3.1, 2373.0], [3.2, 2389.0], [3.3, 2392.0], [3.4, 2402.0], [3.5, 2408.0], [3.6, 2411.0], [3.7, 2415.0], [3.8, 2419.0], [3.9, 2421.0], [4.0, 2423.0], [4.1, 2426.0], [4.2, 2430.0], [4.3, 2434.0], [4.4, 2439.0], [4.5, 2444.0], [4.6, 2447.0], [4.7, 2451.0], [4.8, 2461.0], [4.9, 2464.0], [5.0, 2469.0], [5.1, 2479.0], [5.2, 2484.0], [5.3, 2491.0], [5.4, 2498.0], [5.5, 2510.0], [5.6, 2522.0], [5.7, 2534.0], [5.8, 2549.0], [5.9, 2566.0], [6.0, 2575.0], [6.1, 2590.0], [6.2, 2605.0], [6.3, 2612.0], [6.4, 2633.0], [6.5, 2643.0], [6.6, 2651.0], [6.7, 2658.0], [6.8, 2666.0], [6.9, 2679.0], [7.0, 2685.0], [7.1, 2700.0], [7.2, 2707.0], [7.3, 2728.0], [7.4, 2741.0], [7.5, 2748.0], [7.6, 2761.0], [7.7, 2765.0], [7.8, 2780.0], [7.9, 2794.0], [8.0, 2807.0], [8.1, 2823.0], [8.2, 2847.0], [8.3, 2862.0], [8.4, 2879.0], [8.5, 2890.0], [8.6, 2907.0], [8.7, 2914.0], [8.8, 2917.0], [8.9, 2923.0], [9.0, 2932.0], [9.1, 2941.0], [9.2, 2954.0], [9.3, 2973.0], [9.4, 2983.0], [9.5, 2991.0], [9.6, 2998.0], [9.7, 3009.0], [9.8, 3014.0], [9.9, 3024.0], [10.0, 3034.0], [10.1, 3046.0], [10.2, 3055.0], [10.3, 3067.0], [10.4, 3080.0], [10.5, 3092.0], [10.6, 3099.0], [10.7, 3118.0], [10.8, 3135.0], [10.9, 3141.0], [11.0, 3152.0], [11.1, 3158.0], [11.2, 3162.0], [11.3, 3171.0], [11.4, 3177.0], [11.5, 3183.0], [11.6, 3197.0], [11.7, 3203.0], [11.8, 3208.0], [11.9, 3214.0], [12.0, 3222.0], [12.1, 3232.0], [12.2, 3249.0], [12.3, 3259.0], [12.4, 3264.0], [12.5, 3272.0], [12.6, 3275.0], [12.7, 3292.0], [12.8, 3298.0], [12.9, 3303.0], [13.0, 3307.0], [13.1, 3313.0], [13.2, 3319.0], [13.3, 3328.0], [13.4, 3334.0], [13.5, 3343.0], [13.6, 3355.0], [13.7, 3369.0], [13.8, 3375.0], [13.9, 3380.0], [14.0, 3388.0], [14.1, 3391.0], [14.2, 3396.0], [14.3, 3415.0], [14.4, 3424.0], [14.5, 3436.0], [14.6, 3445.0], [14.7, 3456.0], [14.8, 3470.0], [14.9, 3488.0], [15.0, 3494.0], [15.1, 3535.0], [15.2, 3542.0], [15.3, 3554.0], [15.4, 3560.0], [15.5, 3585.0], [15.6, 3588.0], [15.7, 3599.0], [15.8, 3614.0], [15.9, 3621.0], [16.0, 3626.0], [16.1, 3634.0], [16.2, 3647.0], [16.3, 3655.0], [16.4, 3669.0], [16.5, 3681.0], [16.6, 3694.0], [16.7, 3702.0], [16.8, 3717.0], [16.9, 3730.0], [17.0, 3749.0], [17.1, 3757.0], [17.2, 3764.0], [17.3, 3769.0], [17.4, 3786.0], [17.5, 3790.0], [17.6, 3802.0], [17.7, 3823.0], [17.8, 3826.0], [17.9, 3837.0], [18.0, 3849.0], [18.1, 3861.0], [18.2, 3867.0], [18.3, 3871.0], [18.4, 3877.0], [18.5, 3884.0], [18.6, 3888.0], [18.7, 3895.0], [18.8, 3898.0], [18.9, 3902.0], [19.0, 3914.0], [19.1, 3916.0], [19.2, 3924.0], [19.3, 3941.0], [19.4, 3950.0], [19.5, 3961.0], [19.6, 3967.0], [19.7, 3976.0], [19.8, 3990.0], [19.9, 4002.0], [20.0, 4006.0], [20.1, 4018.0], [20.2, 4025.0], [20.3, 4030.0], [20.4, 4033.0], [20.5, 4037.0], [20.6, 4049.0], [20.7, 4055.0], [20.8, 4064.0], [20.9, 4070.0], [21.0, 4079.0], [21.1, 4088.0], [21.2, 4093.0], [21.3, 4096.0], [21.4, 4103.0], [21.5, 4114.0], [21.6, 4126.0], [21.7, 4138.0], [21.8, 4151.0], [21.9, 4159.0], [22.0, 4165.0], [22.1, 4172.0], [22.2, 4177.0], [22.3, 4181.0], [22.4, 4187.0], [22.5, 4198.0], [22.6, 4205.0], [22.7, 4222.0], [22.8, 4226.0], [22.9, 4242.0], [23.0, 4248.0], [23.1, 4256.0], [23.2, 4264.0], [23.3, 4274.0], [23.4, 4279.0], [23.5, 4287.0], [23.6, 4298.0], [23.7, 4307.0], [23.8, 4314.0], [23.9, 4319.0], [24.0, 4326.0], [24.1, 4336.0], [24.2, 4340.0], [24.3, 4347.0], [24.4, 4366.0], [24.5, 4372.0], [24.6, 4385.0], [24.7, 4391.0], [24.8, 4393.0], [24.9, 4402.0], [25.0, 4407.0], [25.1, 4411.0], [25.2, 4417.0], [25.3, 4429.0], [25.4, 4438.0], [25.5, 4447.0], [25.6, 4452.0], [25.7, 4456.0], [25.8, 4467.0], [25.9, 4478.0], [26.0, 4487.0], [26.1, 4494.0], [26.2, 4500.0], [26.3, 4504.0], [26.4, 4512.0], [26.5, 4520.0], [26.6, 4524.0], [26.7, 4528.0], [26.8, 4535.0], [26.9, 4542.0], [27.0, 4546.0], [27.1, 4555.0], [27.2, 4560.0], [27.3, 4565.0], [27.4, 4573.0], [27.5, 4578.0], [27.6, 4583.0], [27.7, 4589.0], [27.8, 4599.0], [27.9, 4605.0], [28.0, 4614.0], [28.1, 4618.0], [28.2, 4622.0], [28.3, 4627.0], [28.4, 4635.0], [28.5, 4642.0], [28.6, 4648.0], [28.7, 4652.0], [28.8, 4655.0], [28.9, 4658.0], [29.0, 4663.0], [29.1, 4672.0], [29.2, 4680.0], [29.3, 4683.0], [29.4, 4685.0], [29.5, 4688.0], [29.6, 4695.0], [29.7, 4697.0], [29.8, 4702.0], [29.9, 4709.0], [30.0, 4712.0], [30.1, 4726.0], [30.2, 4733.0], [30.3, 4741.0], [30.4, 4747.0], [30.5, 4752.0], [30.6, 4757.0], [30.7, 4764.0], [30.8, 4776.0], [30.9, 4785.0], [31.0, 4790.0], [31.1, 4799.0], [31.2, 4807.0], [31.3, 4809.0], [31.4, 4813.0], [31.5, 4819.0], [31.6, 4824.0], [31.7, 4835.0], [31.8, 4844.0], [31.9, 4847.0], [32.0, 4854.0], [32.1, 4859.0], [32.2, 4866.0], [32.3, 4873.0], [32.4, 4877.0], [32.5, 4881.0], [32.6, 4885.0], [32.7, 4892.0], [32.8, 4902.0], [32.9, 4906.0], [33.0, 4912.0], [33.1, 4917.0], [33.2, 4924.0], [33.3, 4935.0], [33.4, 4943.0], [33.5, 4951.0], [33.6, 4953.0], [33.7, 4961.0], [33.8, 4966.0], [33.9, 4968.0], [34.0, 4972.0], [34.1, 4975.0], [34.2, 4979.0], [34.3, 4981.0], [34.4, 4985.0], [34.5, 4990.0], [34.6, 4998.0], [34.7, 5000.0], [34.8, 5003.0], [34.9, 5008.0], [35.0, 5011.0], [35.1, 5014.0], [35.2, 5019.0], [35.3, 5023.0], [35.4, 5027.0], [35.5, 5032.0], [35.6, 5034.0], [35.7, 5042.0], [35.8, 5046.0], [35.9, 5053.0], [36.0, 5058.0], [36.1, 5060.0], [36.2, 5063.0], [36.3, 5070.0], [36.4, 5073.0], [36.5, 5075.0], [36.6, 5082.0], [36.7, 5089.0], [36.8, 5094.0], [36.9, 5095.0], [37.0, 5102.0], [37.1, 5103.0], [37.2, 5106.0], [37.3, 5114.0], [37.4, 5116.0], [37.5, 5121.0], [37.6, 5130.0], [37.7, 5134.0], [37.8, 5136.0], [37.9, 5143.0], [38.0, 5147.0], [38.1, 5150.0], [38.2, 5157.0], [38.3, 5163.0], [38.4, 5174.0], [38.5, 5181.0], [38.6, 5185.0], [38.7, 5192.0], [38.8, 5200.0], [38.9, 5204.0], [39.0, 5212.0], [39.1, 5215.0], [39.2, 5221.0], [39.3, 5226.0], [39.4, 5230.0], [39.5, 5236.0], [39.6, 5240.0], [39.7, 5247.0], [39.8, 5249.0], [39.9, 5255.0], [40.0, 5260.0], [40.1, 5263.0], [40.2, 5269.0], [40.3, 5270.0], [40.4, 5275.0], [40.5, 5280.0], [40.6, 5282.0], [40.7, 5286.0], [40.8, 5289.0], [40.9, 5292.0], [41.0, 5296.0], [41.1, 5299.0], [41.2, 5304.0], [41.3, 5310.0], [41.4, 5313.0], [41.5, 5317.0], [41.6, 5324.0], [41.7, 5330.0], [41.8, 5335.0], [41.9, 5337.0], [42.0, 5340.0], [42.1, 5342.0], [42.2, 5347.0], [42.3, 5350.0], [42.4, 5354.0], [42.5, 5360.0], [42.6, 5364.0], [42.7, 5369.0], [42.8, 5376.0], [42.9, 5378.0], [43.0, 5382.0], [43.1, 5384.0], [43.2, 5386.0], [43.3, 5388.0], [43.4, 5397.0], [43.5, 5404.0], [43.6, 5407.0], [43.7, 5410.0], [43.8, 5417.0], [43.9, 5422.0], [44.0, 5426.0], [44.1, 5430.0], [44.2, 5433.0], [44.3, 5438.0], [44.4, 5440.0], [44.5, 5444.0], [44.6, 5448.0], [44.7, 5454.0], [44.8, 5460.0], [44.9, 5464.0], [45.0, 5468.0], [45.1, 5472.0], [45.2, 5478.0], [45.3, 5483.0], [45.4, 5487.0], [45.5, 5489.0], [45.6, 5490.0], [45.7, 5494.0], [45.8, 5497.0], [45.9, 5499.0], [46.0, 5502.0], [46.1, 5511.0], [46.2, 5520.0], [46.3, 5521.0], [46.4, 5528.0], [46.5, 5533.0], [46.6, 5535.0], [46.7, 5539.0], [46.8, 5543.0], [46.9, 5550.0], [47.0, 5556.0], [47.1, 5561.0], [47.2, 5564.0], [47.3, 5565.0], [47.4, 5570.0], [47.5, 5574.0], [47.6, 5576.0], [47.7, 5578.0], [47.8, 5585.0], [47.9, 5589.0], [48.0, 5593.0], [48.1, 5598.0], [48.2, 5606.0], [48.3, 5612.0], [48.4, 5617.0], [48.5, 5621.0], [48.6, 5629.0], [48.7, 5633.0], [48.8, 5640.0], [48.9, 5644.0], [49.0, 5653.0], [49.1, 5654.0], [49.2, 5663.0], [49.3, 5666.0], [49.4, 5669.0], [49.5, 5678.0], [49.6, 5682.0], [49.7, 5682.0], [49.8, 5684.0], [49.9, 5687.0], [50.0, 5692.0], [50.1, 5696.0], [50.2, 5698.0], [50.3, 5701.0], [50.4, 5704.0], [50.5, 5708.0], [50.6, 5710.0], [50.7, 5714.0], [50.8, 5717.0], [50.9, 5719.0], [51.0, 5724.0], [51.1, 5728.0], [51.2, 5730.0], [51.3, 5733.0], [51.4, 5738.0], [51.5, 5742.0], [51.6, 5743.0], [51.7, 5750.0], [51.8, 5752.0], [51.9, 5757.0], [52.0, 5763.0], [52.1, 5767.0], [52.2, 5777.0], [52.3, 5778.0], [52.4, 5781.0], [52.5, 5788.0], [52.6, 5794.0], [52.7, 5800.0], [52.8, 5804.0], [52.9, 5808.0], [53.0, 5811.0], [53.1, 5812.0], [53.2, 5817.0], [53.3, 5821.0], [53.4, 5824.0], [53.5, 5827.0], [53.6, 5830.0], [53.7, 5834.0], [53.8, 5840.0], [53.9, 5845.0], [54.0, 5848.0], [54.1, 5853.0], [54.2, 5856.0], [54.3, 5863.0], [54.4, 5865.0], [54.5, 5867.0], [54.6, 5871.0], [54.7, 5872.0], [54.8, 5877.0], [54.9, 5881.0], [55.0, 5883.0], [55.1, 5886.0], [55.2, 5892.0], [55.3, 5897.0], [55.4, 5900.0], [55.5, 5903.0], [55.6, 5905.0], [55.7, 5910.0], [55.8, 5915.0], [55.9, 5919.0], [56.0, 5924.0], [56.1, 5932.0], [56.2, 5936.0], [56.3, 5940.0], [56.4, 5947.0], [56.5, 5953.0], [56.6, 5954.0], [56.7, 5960.0], [56.8, 5966.0], [56.9, 5972.0], [57.0, 5975.0], [57.1, 5984.0], [57.2, 5985.0], [57.3, 5989.0], [57.4, 5994.0], [57.5, 6001.0], [57.6, 6013.0], [57.7, 6014.0], [57.8, 6019.0], [57.9, 6025.0], [58.0, 6027.0], [58.1, 6035.0], [58.2, 6040.0], [58.3, 6045.0], [58.4, 6047.0], [58.5, 6054.0], [58.6, 6057.0], [58.7, 6063.0], [58.8, 6068.0], [58.9, 6071.0], [59.0, 6077.0], [59.1, 6081.0], [59.2, 6085.0], [59.3, 6087.0], [59.4, 6093.0], [59.5, 6099.0], [59.6, 6100.0], [59.7, 6109.0], [59.8, 6113.0], [59.9, 6118.0], [60.0, 6121.0], [60.1, 6125.0], [60.2, 6127.0], [60.3, 6133.0], [60.4, 6138.0], [60.5, 6146.0], [60.6, 6155.0], [60.7, 6158.0], [60.8, 6166.0], [60.9, 6172.0], [61.0, 6175.0], [61.1, 6184.0], [61.2, 6188.0], [61.3, 6197.0], [61.4, 6201.0], [61.5, 6206.0], [61.6, 6213.0], [61.7, 6218.0], [61.8, 6224.0], [61.9, 6229.0], [62.0, 6234.0], [62.1, 6239.0], [62.2, 6248.0], [62.3, 6251.0], [62.4, 6256.0], [62.5, 6263.0], [62.6, 6267.0], [62.7, 6276.0], [62.8, 6282.0], [62.9, 6287.0], [63.0, 6291.0], [63.1, 6296.0], [63.2, 6300.0], [63.3, 6308.0], [63.4, 6313.0], [63.5, 6317.0], [63.6, 6323.0], [63.7, 6327.0], [63.8, 6331.0], [63.9, 6337.0], [64.0, 6340.0], [64.1, 6342.0], [64.2, 6346.0], [64.3, 6354.0], [64.4, 6360.0], [64.5, 6364.0], [64.6, 6366.0], [64.7, 6373.0], [64.8, 6378.0], [64.9, 6381.0], [65.0, 6385.0], [65.1, 6386.0], [65.2, 6388.0], [65.3, 6395.0], [65.4, 6400.0], [65.5, 6413.0], [65.6, 6418.0], [65.7, 6421.0], [65.8, 6424.0], [65.9, 6427.0], [66.0, 6432.0], [66.1, 6440.0], [66.2, 6447.0], [66.3, 6449.0], [66.4, 6454.0], [66.5, 6456.0], [66.6, 6462.0], [66.7, 6465.0], [66.8, 6469.0], [66.9, 6475.0], [67.0, 6484.0], [67.1, 6489.0], [67.2, 6493.0], [67.3, 6497.0], [67.4, 6502.0], [67.5, 6508.0], [67.6, 6511.0], [67.7, 6514.0], [67.8, 6517.0], [67.9, 6525.0], [68.0, 6533.0], [68.1, 6536.0], [68.2, 6538.0], [68.3, 6542.0], [68.4, 6547.0], [68.5, 6552.0], [68.6, 6558.0], [68.7, 6561.0], [68.8, 6565.0], [68.9, 6568.0], [69.0, 6572.0], [69.1, 6576.0], [69.2, 6583.0], [69.3, 6589.0], [69.4, 6596.0], [69.5, 6602.0], [69.6, 6606.0], [69.7, 6610.0], [69.8, 6614.0], [69.9, 6620.0], [70.0, 6631.0], [70.1, 6635.0], [70.2, 6645.0], [70.3, 6651.0], [70.4, 6657.0], [70.5, 6664.0], [70.6, 6667.0], [70.7, 6670.0], [70.8, 6682.0], [70.9, 6690.0], [71.0, 6704.0], [71.1, 6711.0], [71.2, 6720.0], [71.3, 6722.0], [71.4, 6727.0], [71.5, 6739.0], [71.6, 6748.0], [71.7, 6751.0], [71.8, 6756.0], [71.9, 6761.0], [72.0, 6766.0], [72.1, 6773.0], [72.2, 6783.0], [72.3, 6786.0], [72.4, 6798.0], [72.5, 6808.0], [72.6, 6814.0], [72.7, 6822.0], [72.8, 6832.0], [72.9, 6836.0], [73.0, 6842.0], [73.1, 6845.0], [73.2, 6854.0], [73.3, 6858.0], [73.4, 6868.0], [73.5, 6872.0], [73.6, 6878.0], [73.7, 6887.0], [73.8, 6890.0], [73.9, 6896.0], [74.0, 6898.0], [74.1, 6901.0], [74.2, 6905.0], [74.3, 6910.0], [74.4, 6917.0], [74.5, 6927.0], [74.6, 6934.0], [74.7, 6939.0], [74.8, 6951.0], [74.9, 6954.0], [75.0, 6959.0], [75.1, 6965.0], [75.2, 6968.0], [75.3, 6979.0], [75.4, 6981.0], [75.5, 6987.0], [75.6, 6989.0], [75.7, 6993.0], [75.8, 7000.0], [75.9, 7004.0], [76.0, 7008.0], [76.1, 7014.0], [76.2, 7021.0], [76.3, 7030.0], [76.4, 7039.0], [76.5, 7048.0], [76.6, 7060.0], [76.7, 7070.0], [76.8, 7079.0], [76.9, 7086.0], [77.0, 7091.0], [77.1, 7097.0], [77.2, 7102.0], [77.3, 7104.0], [77.4, 7110.0], [77.5, 7116.0], [77.6, 7121.0], [77.7, 7129.0], [77.8, 7138.0], [77.9, 7145.0], [78.0, 7150.0], [78.1, 7156.0], [78.2, 7162.0], [78.3, 7168.0], [78.4, 7170.0], [78.5, 7176.0], [78.6, 7185.0], [78.7, 7189.0], [78.8, 7194.0], [78.9, 7201.0], [79.0, 7207.0], [79.1, 7211.0], [79.2, 7225.0], [79.3, 7228.0], [79.4, 7234.0], [79.5, 7246.0], [79.6, 7251.0], [79.7, 7255.0], [79.8, 7260.0], [79.9, 7263.0], [80.0, 7271.0], [80.1, 7279.0], [80.2, 7289.0], [80.3, 7294.0], [80.4, 7301.0], [80.5, 7310.0], [80.6, 7317.0], [80.7, 7322.0], [80.8, 7332.0], [80.9, 7339.0], [81.0, 7342.0], [81.1, 7348.0], [81.2, 7355.0], [81.3, 7364.0], [81.4, 7370.0], [81.5, 7372.0], [81.6, 7383.0], [81.7, 7389.0], [81.8, 7395.0], [81.9, 7402.0], [82.0, 7407.0], [82.1, 7414.0], [82.2, 7429.0], [82.3, 7435.0], [82.4, 7440.0], [82.5, 7449.0], [82.6, 7454.0], [82.7, 7471.0], [82.8, 7477.0], [82.9, 7490.0], [83.0, 7501.0], [83.1, 7518.0], [83.2, 7529.0], [83.3, 7533.0], [83.4, 7541.0], [83.5, 7553.0], [83.6, 7559.0], [83.7, 7570.0], [83.8, 7573.0], [83.9, 7581.0], [84.0, 7588.0], [84.1, 7599.0], [84.2, 7609.0], [84.3, 7621.0], [84.4, 7635.0], [84.5, 7641.0], [84.6, 7651.0], [84.7, 7658.0], [84.8, 7669.0], [84.9, 7674.0], [85.0, 7677.0], [85.1, 7683.0], [85.2, 7690.0], [85.3, 7694.0], [85.4, 7703.0], [85.5, 7714.0], [85.6, 7720.0], [85.7, 7725.0], [85.8, 7736.0], [85.9, 7752.0], [86.0, 7772.0], [86.1, 7784.0], [86.2, 7791.0], [86.3, 7802.0], [86.4, 7813.0], [86.5, 7819.0], [86.6, 7829.0], [86.7, 7840.0], [86.8, 7848.0], [86.9, 7858.0], [87.0, 7879.0], [87.1, 7892.0], [87.2, 7898.0], [87.3, 7906.0], [87.4, 7908.0], [87.5, 7918.0], [87.6, 7928.0], [87.7, 7942.0], [87.8, 7951.0], [87.9, 7958.0], [88.0, 7964.0], [88.1, 7982.0], [88.2, 7990.0], [88.3, 8006.0], [88.4, 8024.0], [88.5, 8041.0], [88.6, 8061.0], [88.7, 8075.0], [88.8, 8096.0], [88.9, 8108.0], [89.0, 8117.0], [89.1, 8135.0], [89.2, 8151.0], [89.3, 8167.0], [89.4, 8184.0], [89.5, 8203.0], [89.6, 8211.0], [89.7, 8234.0], [89.8, 8252.0], [89.9, 8259.0], [90.0, 8274.0], [90.1, 8282.0], [90.2, 8301.0], [90.3, 8316.0], [90.4, 8330.0], [90.5, 8348.0], [90.6, 8354.0], [90.7, 8380.0], [90.8, 8405.0], [90.9, 8419.0], [91.0, 8434.0], [91.1, 8449.0], [91.2, 8468.0], [91.3, 8486.0], [91.4, 8511.0], [91.5, 8553.0], [91.6, 8596.0], [91.7, 8605.0], [91.8, 8625.0], [91.9, 8648.0], [92.0, 8668.0], [92.1, 8682.0], [92.2, 8694.0], [92.3, 8738.0], [92.4, 8777.0], [92.5, 8792.0], [92.6, 8804.0], [92.7, 8832.0], [92.8, 8887.0], [92.9, 8902.0], [93.0, 8922.0], [93.1, 8948.0], [93.2, 8980.0], [93.3, 9003.0], [93.4, 9030.0], [93.5, 9054.0], [93.6, 9063.0], [93.7, 9111.0], [93.8, 9138.0], [93.9, 9157.0], [94.0, 9167.0], [94.1, 9197.0], [94.2, 9235.0], [94.3, 9248.0], [94.4, 9276.0], [94.5, 9319.0], [94.6, 9341.0], [94.7, 9372.0], [94.8, 9403.0], [94.9, 9429.0], [95.0, 9451.0], [95.1, 9489.0], [95.2, 9522.0], [95.3, 9566.0], [95.4, 9598.0], [95.5, 9637.0], [95.6, 9649.0], [95.7, 9693.0], [95.8, 9786.0], [95.9, 9841.0], [96.0, 9886.0], [96.1, 9916.0], [96.2, 9949.0], [96.3, 9966.0], [96.4, 10030.0], [96.5, 10095.0], [96.6, 10173.0], [96.7, 10262.0], [96.8, 10322.0], [96.9, 10414.0], [97.0, 10475.0], [97.1, 10541.0], [97.2, 10595.0], [97.3, 10706.0], [97.4, 10786.0], [97.5, 10853.0], [97.6, 10948.0], [97.7, 11062.0], [97.8, 11207.0], [97.9, 11364.0], [98.0, 11515.0], [98.1, 11660.0], [98.2, 11700.0], [98.3, 11758.0], [98.4, 11872.0], [98.5, 12047.0], [98.6, 12167.0], [98.7, 12261.0], [98.8, 12393.0], [98.9, 12609.0], [99.0, 12861.0], [99.1, 12995.0], [99.2, 13164.0], [99.3, 13442.0], [99.4, 13539.0], [99.5, 13684.0], [99.6, 13979.0], [99.7, 14830.0], [99.8, 16949.0], [99.9, 18436.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 140.0, "series": [{"data": [[2100.0, 14.0], [2300.0, 86.0], [2200.0, 76.0], [2400.0, 105.0], [2500.0, 39.0], [2600.0, 47.0], [2800.0, 31.0], [2700.0, 47.0], [2900.0, 54.0], [3000.0, 52.0], [3100.0, 54.0], [3200.0, 61.0], [3300.0, 71.0], [3400.0, 42.0], [3500.0, 36.0], [3700.0, 48.0], [3600.0, 49.0], [3800.0, 65.0], [3900.0, 54.0], [4000.0, 77.0], [4100.0, 62.0], [4300.0, 66.0], [4200.0, 55.0], [4500.0, 85.0], [4400.0, 67.0], [4600.0, 100.0], [4700.0, 72.0], [4800.0, 84.0], [4900.0, 100.0], [5000.0, 120.0], [5100.0, 93.0], [5200.0, 122.0], [5300.0, 122.0], [5600.0, 110.0], [5500.0, 115.0], [5400.0, 127.0], [5800.0, 140.0], [5700.0, 126.0], [6000.0, 109.0], [5900.0, 108.0], [6100.0, 94.0], [6200.0, 94.0], [6300.0, 115.0], [6500.0, 110.0], [6400.0, 101.0], [6600.0, 78.0], [6900.0, 90.0], [6700.0, 75.0], [6800.0, 86.0], [7100.0, 89.0], [7000.0, 71.0], [7300.0, 78.0], [7200.0, 77.0], [7400.0, 58.0], [7600.0, 65.0], [7500.0, 58.0], [7900.0, 53.0], [7800.0, 49.0], [7700.0, 48.0], [8000.0, 30.0], [8100.0, 34.0], [8400.0, 32.0], [8700.0, 17.0], [8500.0, 12.0], [8300.0, 30.0], [8200.0, 37.0], [8600.0, 31.0], [8800.0, 18.0], [9200.0, 18.0], [8900.0, 21.0], [9000.0, 20.0], [9100.0, 22.0], [9300.0, 17.0], [9600.0, 16.0], [9500.0, 15.0], [9700.0, 6.0], [9400.0, 18.0], [9800.0, 11.0], [10000.0, 9.0], [9900.0, 15.0], [10200.0, 8.0], [10100.0, 5.0], [10500.0, 9.0], [10700.0, 8.0], [10400.0, 7.0], [10300.0, 7.0], [10600.0, 3.0], [11200.0, 5.0], [11000.0, 3.0], [10800.0, 9.0], [11100.0, 3.0], [10900.0, 3.0], [11700.0, 8.0], [11600.0, 6.0], [11500.0, 8.0], [11300.0, 3.0], [12100.0, 7.0], [11900.0, 4.0], [11800.0, 3.0], [12200.0, 4.0], [12000.0, 2.0], [12600.0, 3.0], [12700.0, 3.0], [12300.0, 4.0], [12400.0, 2.0], [12500.0, 1.0], [13300.0, 1.0], [13000.0, 2.0], [12800.0, 3.0], [12900.0, 4.0], [13200.0, 2.0], [13100.0, 3.0], [13400.0, 6.0], [13700.0, 2.0], [13800.0, 1.0], [13500.0, 3.0], [13600.0, 4.0], [14000.0, 1.0], [13900.0, 2.0], [14500.0, 1.0], [14400.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [14900.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17200.0, 1.0], [17300.0, 1.0], [17500.0, 1.0], [18400.0, 2.0], [18000.0, 1.0], [18500.0, 1.0], [21500.0, 1.0], [22400.0, 1.0], [21700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.131578947368418, "minX": 1.60281048E12, "maxY": 12.0, "series": [{"data": [[1.60281048E12, 12.0], [1.60281156E12, 12.0], [1.60281186E12, 12.0], [1.60281216E12, 12.0], [1.60281198E12, 12.0], [1.60281228E12, 12.0], [1.60281108E12, 12.0], [1.60281258E12, 12.0], [1.60281078E12, 12.0], [1.60281288E12, 12.0], [1.60281096E12, 12.0], [1.6028127E12, 12.0], [1.60281066E12, 12.0], [1.602813E12, 11.131578947368418], [1.60281138E12, 12.0], [1.60281168E12, 12.0], [1.6028115E12, 12.0], [1.6028118E12, 12.0], [1.6028121E12, 12.0], [1.60281126E12, 12.0], [1.6028124E12, 12.0], [1.60281222E12, 12.0], [1.60281114E12, 12.0], [1.60281252E12, 12.0], [1.60281084E12, 12.0], [1.60281282E12, 12.0], [1.60281054E12, 12.0], [1.60281072E12, 12.0], [1.60281294E12, 12.0], [1.60281162E12, 12.0], [1.60281192E12, 12.0], [1.60281174E12, 12.0], [1.60281204E12, 12.0], [1.60281132E12, 12.0], [1.60281234E12, 12.0], [1.60281102E12, 12.0], [1.60281264E12, 12.0], [1.6028112E12, 12.0], [1.60281246E12, 12.0], [1.6028109E12, 12.0], [1.60281276E12, 12.0], [1.6028106E12, 12.0], [1.60281144E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.602813E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5132.0, "minX": 1.0, "maxY": 7252.0, "series": [{"data": [[8.0, 5132.0], [4.0, 7227.0], [2.0, 7252.0], [1.0, 7033.0], [9.0, 6187.0], [10.0, 6447.0], [5.0, 7112.0], [11.0, 6509.0], [12.0, 5801.323614597416], [6.0, 7008.0], [3.0, 7234.0], [7.0, 6978.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5803.309055876688]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 75.86666666666666, "minX": 1.60281048E12, "maxY": 861437.3666666667, "series": [{"data": [[1.60281048E12, 112782.71666666666], [1.60281156E12, 606199.8333333334], [1.60281186E12, 580808.2], [1.60281216E12, 277304.81666666665], [1.60281198E12, 459930.86666666664], [1.60281228E12, 543375.0], [1.60281108E12, 861437.3666666667], [1.60281258E12, 527235.2], [1.60281078E12, 634934.1166666667], [1.60281288E12, 640463.7666666667], [1.60281096E12, 435563.8333333333], [1.6028127E12, 600259.6166666667], [1.60281066E12, 507345.76666666666], [1.602813E12, 317649.7833333333], [1.60281138E12, 533909.9], [1.60281168E12, 561528.0166666667], [1.6028115E12, 595780.0333333333], [1.6028118E12, 695486.2], [1.6028121E12, 412804.43333333335], [1.60281126E12, 688153.55], [1.6028124E12, 846469.9166666666], [1.60281222E12, 495028.61666666664], [1.60281114E12, 604953.8], [1.60281252E12, 616808.8333333334], [1.60281084E12, 335248.8], [1.60281282E12, 553870.15], [1.60281054E12, 706626.7166666667], [1.60281072E12, 558857.5666666667], [1.60281294E12, 510699.86666666664], [1.60281162E12, 559582.4666666667], [1.60281192E12, 496113.56666666665], [1.60281174E12, 532910.15], [1.60281204E12, 682608.8166666667], [1.60281132E12, 723712.15], [1.60281234E12, 735205.65], [1.60281102E12, 654105.6666666666], [1.60281264E12, 538491.95], [1.6028112E12, 647946.6333333333], [1.60281246E12, 574196.4], [1.6028109E12, 336853.95], [1.60281276E12, 482900.95], [1.6028106E12, 577301.3833333333], [1.60281144E12, 608480.7666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60281048E12, 75.86666666666666], [1.60281156E12, 1189.7833333333333], [1.60281186E12, 687.55], [1.60281216E12, 1070.15], [1.60281198E12, 742.1333333333333], [1.60281228E12, 860.9166666666666], [1.60281108E12, 765.6], [1.60281258E12, 1127.1166666666666], [1.60281078E12, 1076.05], [1.60281288E12, 802.3333333333334], [1.60281096E12, 1001.4166666666666], [1.6028127E12, 927.1166666666667], [1.60281066E12, 1023.0666666666667], [1.602813E12, 579.4], [1.60281138E12, 837.45], [1.60281168E12, 781.4166666666666], [1.6028115E12, 1171.8833333333334], [1.6028118E12, 793.2], [1.6028121E12, 629.0166666666667], [1.60281126E12, 1007.4833333333333], [1.6028124E12, 820.1833333333333], [1.60281222E12, 1186.2833333333333], [1.60281114E12, 1040.8833333333334], [1.60281252E12, 1031.7166666666667], [1.60281084E12, 618.7333333333333], [1.60281282E12, 1097.9666666666667], [1.60281054E12, 764.7333333333333], [1.60281072E12, 792.5], [1.60281294E12, 764.6666666666666], [1.60281162E12, 792.35], [1.60281192E12, 1038.85], [1.60281174E12, 743.55], [1.60281204E12, 1012.75], [1.60281132E12, 899.1], [1.60281234E12, 817.5], [1.60281102E12, 813.1333333333333], [1.60281264E12, 856.7], [1.6028112E12, 1125.5], [1.60281246E12, 1113.5666666666666], [1.6028109E12, 1342.7833333333333], [1.60281276E12, 1217.6666666666667], [1.6028106E12, 698.5333333333333], [1.60281144E12, 838.7333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.602813E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4087.826086956523, "minX": 1.60281048E12, "maxY": 8283.64705882353, "series": [{"data": [[1.60281048E12, 6082.0], [1.60281156E12, 4789.006329113923], [1.60281186E12, 7561.4123711340235], [1.60281216E12, 4976.315436241613], [1.60281198E12, 6898.990384615384], [1.60281228E12, 5578.111999999998], [1.60281108E12, 6885.881188118811], [1.60281258E12, 4831.758389261746], [1.60281078E12, 4864.710344827587], [1.60281288E12, 6626.226415094341], [1.60281096E12, 5031.000000000001], [1.6028127E12, 5874.801652892565], [1.60281066E12, 5041.287671232874], [1.602813E12, 6983.999999999999], [1.60281138E12, 6648.144144144143], [1.60281168E12, 7074.923809523807], [1.6028115E12, 4568.496774193545], [1.6028118E12, 6530.842592592592], [1.6028121E12, 8199.046511627908], [1.60281126E12, 5270.533834586469], [1.6028124E12, 6661.398148148149], [1.60281222E12, 4539.847133757961], [1.60281114E12, 5427.751824817517], [1.60281252E12, 5279.713235294116], [1.60281084E12, 8283.64705882353], [1.60281282E12, 4878.689655172413], [1.60281054E12, 7015.911764705882], [1.60281072E12, 6533.864864864867], [1.60281294E12, 7336.446601941749], [1.60281162E12, 6293.9619047619035], [1.60281192E12, 4933.027027027027], [1.60281174E12, 7634.618556701032], [1.60281204E12, 5304.372262773722], [1.60281132E12, 6157.067796610171], [1.60281234E12, 6934.682242990653], [1.60281102E12, 6777.831775700935], [1.60281264E12, 6462.256637168142], [1.6028112E12, 4747.201342281882], [1.60281246E12, 4895.278911564625], [1.6028109E12, 4087.826086956523], [1.60281276E12, 4431.739130434782], [1.6028106E12, 7388.642857142855], [1.60281144E12, 6427.908256880733]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.602813E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4086.945652173912, "minX": 1.60281048E12, "maxY": 8281.717647058826, "series": [{"data": [[1.60281048E12, 6076.9], [1.60281156E12, 4787.354430379748], [1.60281186E12, 7559.2371134020605], [1.60281216E12, 4975.543624161074], [1.60281198E12, 6897.278846153847], [1.60281228E12, 5576.375999999998], [1.60281108E12, 6881.900990099011], [1.60281258E12, 4830.496644295303], [1.60281078E12, 4862.6689655172395], [1.60281288E12, 6623.792452830189], [1.60281096E12, 5029.581560283687], [1.6028127E12, 5872.966942148759], [1.60281066E12, 5039.691780821917], [1.602813E12, 6982.5], [1.60281138E12, 6645.810810810808], [1.60281168E12, 7072.285714285714], [1.6028115E12, 4566.729032258064], [1.6028118E12, 6527.8888888888905], [1.6028121E12, 8197.116279069764], [1.60281126E12, 5268.240601503758], [1.6028124E12, 6658.592592592594], [1.60281222E12, 4538.515923566883], [1.60281114E12, 5425.66423357664], [1.60281252E12, 5278.102941176469], [1.60281084E12, 8281.717647058826], [1.60281282E12, 4877.379310344824], [1.60281054E12, 7012.980392156861], [1.60281072E12, 6531.423423423422], [1.60281294E12, 7334.466019417476], [1.60281162E12, 6291.619047619051], [1.60281192E12, 4931.6621621621625], [1.60281174E12, 7632.0412371134], [1.60281204E12, 5302.430656934305], [1.60281132E12, 6154.313559322035], [1.60281234E12, 6932.205607476634], [1.60281102E12, 6774.934579439254], [1.60281264E12, 6460.407079646021], [1.6028112E12, 4745.268456375834], [1.60281246E12, 4893.952380952383], [1.6028109E12, 4086.945652173912], [1.60281276E12, 4430.683229813667], [1.6028106E12, 7385.816326530614], [1.60281144E12, 6425.35779816514]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.602813E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.055172413793103475, "minX": 1.60281048E12, "maxY": 10.299999999999999, "series": [{"data": [[1.60281048E12, 10.299999999999999], [1.60281156E12, 0.08860759493670885], [1.60281186E12, 0.0927835051546392], [1.60281216E12, 0.10067114093959738], [1.60281198E12, 0.11538461538461539], [1.60281228E12, 0.09599999999999997], [1.60281108E12, 0.10891089108910892], [1.60281258E12, 0.09395973154362426], [1.60281078E12, 0.055172413793103475], [1.60281288E12, 0.10377358490566041], [1.60281096E12, 0.11347517730496459], [1.6028127E12, 0.11570247933884299], [1.60281066E12, 0.13698630136986306], [1.602813E12, 0.1447368421052632], [1.60281138E12, 0.0990990990990991], [1.60281168E12, 0.12380952380952387], [1.6028115E12, 0.09032258064516133], [1.6028118E12, 0.12037037037037036], [1.6028121E12, 0.127906976744186], [1.60281126E12, 0.08270676691729324], [1.6028124E12, 0.08333333333333333], [1.60281222E12, 0.06369426751592354], [1.60281114E12, 0.10948905109489057], [1.60281252E12, 0.07352941176470587], [1.60281084E12, 0.17647058823529416], [1.60281282E12, 0.06896551724137931], [1.60281054E12, 0.06862745098039219], [1.60281072E12, 0.1171171171171171], [1.60281294E12, 0.11650485436893204], [1.60281162E12, 0.07619047619047618], [1.60281192E12, 0.09459459459459459], [1.60281174E12, 0.1134020618556701], [1.60281204E12, 0.07299270072992702], [1.60281132E12, 0.11864406779661013], [1.60281234E12, 0.0747663551401869], [1.60281102E12, 0.14018691588785054], [1.60281264E12, 0.11504424778761059], [1.6028112E12, 0.08724832214765102], [1.60281246E12, 0.08843537414965995], [1.6028109E12, 0.0706521739130435], [1.60281276E12, 0.05590062111801242], [1.6028106E12, 0.19387755102040816], [1.60281144E12, 0.11926605504587152]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.602813E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2141.0, "minX": 1.60281048E12, "maxY": 22419.0, "series": [{"data": [[1.60281048E12, 8432.0], [1.60281156E12, 12454.0], [1.60281186E12, 22419.0], [1.60281216E12, 10214.0], [1.60281198E12, 13791.0], [1.60281228E12, 9270.0], [1.60281108E12, 9017.0], [1.60281258E12, 7701.0], [1.60281078E12, 7567.0], [1.60281288E12, 10706.0], [1.60281096E12, 9062.0], [1.6028127E12, 8652.0], [1.60281066E12, 7076.0], [1.602813E12, 9449.0], [1.60281138E12, 9936.0], [1.60281168E12, 13637.0], [1.6028115E12, 9069.0], [1.6028118E12, 8498.0], [1.6028121E12, 13406.0], [1.60281126E12, 10595.0], [1.6028124E12, 8715.0], [1.60281222E12, 7805.0], [1.60281114E12, 7790.0], [1.60281252E12, 8490.0], [1.60281084E12, 12330.0], [1.60281282E12, 10826.0], [1.60281054E12, 9822.0], [1.60281072E12, 14830.0], [1.60281294E12, 12195.0], [1.60281162E12, 11151.0], [1.60281192E12, 6232.0], [1.60281174E12, 13928.0], [1.60281204E12, 8155.0], [1.60281132E12, 10045.0], [1.60281234E12, 9518.0], [1.60281102E12, 10414.0], [1.60281264E12, 8859.0], [1.6028112E12, 7889.0], [1.60281246E12, 7675.0], [1.6028109E12, 8635.0], [1.60281276E12, 9118.0], [1.6028106E12, 15588.0], [1.60281144E12, 8190.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60281048E12, 2987.0], [1.60281156E12, 2150.9129991281034], [1.60281186E12, 2407.0], [1.60281216E12, 2195.5499995350838], [1.60281198E12, 3705.0], [1.60281228E12, 3193.183997716904], [1.60281108E12, 4004.0], [1.60281258E12, 2430.799985408783], [1.60281078E12, 3202.337999408245], [1.60281288E12, 3870.0], [1.60281096E12, 2700.185997054577], [1.6028127E12, 3183.7639994764327], [1.60281066E12, 2280.844999474287], [1.602813E12, 4926.0], [1.60281138E12, 4326.983996715546], [1.60281168E12, 3688.0], [1.6028115E12, 2418.8079999256133], [1.6028118E12, 4547.0], [1.6028121E12, 3532.0], [1.60281126E12, 2203.6479997444153], [1.6028124E12, 4758.0], [1.60281222E12, 2301.0], [1.60281114E12, 2648.5779931235315], [1.60281252E12, 2417.319998693466], [1.60281084E12, 4455.0], [1.60281282E12, 2150.3139999651908], [1.60281054E12, 4160.0], [1.60281072E12, 3952.607997970581], [1.60281294E12, 3486.0], [1.60281162E12, 3901.0], [1.60281192E12, 2493.5219914031027], [1.60281174E12, 3601.0], [1.60281204E12, 3437.1499975323677], [1.60281132E12, 2409.9419772458077], [1.60281234E12, 5337.0], [1.60281102E12, 4138.0], [1.60281264E12, 2820.6239993476865], [1.6028112E12, 2287.3499985337257], [1.60281246E12, 2332.3279998588564], [1.6028109E12, 2215.65999982357], [1.60281276E12, 2177.8699994206427], [1.6028106E12, 2414.0], [1.60281144E12, 4517.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60281048E12, 2987.0], [1.60281156E12, 2154.204300348759], [1.60281186E12, 2407.0], [1.60281216E12, 2197.3050001859665], [1.60281198E12, 3715.507002663612], [1.60281228E12, 3201.8024009132387], [1.60281108E12, 4004.3038003015517], [1.60281258E12, 2485.880005836487], [1.60281078E12, 3204.571800236702], [1.60281288E12, 3875.099800877571], [1.60281096E12, 2711.3046011781694], [1.6028127E12, 3185.7404002094268], [1.60281066E12, 2282.829500210285], [1.602813E12, 4926.0], [1.60281138E12, 4339.382401313782], [1.60281168E12, 3691.5568007278443], [1.6028115E12, 2419.0888000297546], [1.6028118E12, 4581.724904563427], [1.6028121E12, 3532.0], [1.60281126E12, 2204.612800102234], [1.6028124E12, 4758.47460006237], [1.60281222E12, 2301.0], [1.60281114E12, 2674.5358027505877], [1.60281252E12, 2422.2520005226133], [1.60281084E12, 4455.0], [1.60281282E12, 2150.4454000139235], [1.60281054E12, 4171.189605579376], [1.60281072E12, 3960.2688008117675], [1.60281294E12, 3489.463201160431], [1.60281162E12, 3920.5130039930345], [1.60281192E12, 2525.9742034387587], [1.60281174E12, 3601.0], [1.60281204E12, 3446.465000987053], [1.60281132E12, 2495.836209101677], [1.60281234E12, 5339.837200422287], [1.60281102E12, 4159.2444031620025], [1.60281264E12, 2823.086400260925], [1.6028112E12, 2292.8850005865097], [1.60281246E12, 2332.8608000564577], [1.6028109E12, 2216.326000070572], [1.60281276E12, 2180.0570002317427], [1.6028106E12, 2414.0], [1.60281144E12, 4526.434001111984]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60281048E12, 2987.0], [1.60281156E12, 2152.7414995640515], [1.60281186E12, 2407.0], [1.60281216E12, 2196.524999767542], [1.60281198E12, 3705.0], [1.60281228E12, 3197.971998858452], [1.60281108E12, 4004.0], [1.60281258E12, 2461.3999927043915], [1.60281078E12, 3203.5789997041225], [1.60281288E12, 3871.418998903036], [1.60281096E12, 2706.3629985272883], [1.6028127E12, 3184.8619997382166], [1.60281066E12, 2281.9474997371435], [1.602813E12, 4926.0], [1.60281138E12, 4333.871998357773], [1.60281168E12, 3688.5039990901946], [1.6028115E12, 2418.9639999628066], [1.6028118E12, 4562.5844942957165], [1.6028121E12, 3532.0], [1.60281126E12, 2204.1839998722076], [1.6028124E12, 4758.212999922037], [1.60281222E12, 2301.0], [1.60281114E12, 2662.9989965617656], [1.60281252E12, 2420.059999346733], [1.60281084E12, 4455.0], [1.60281282E12, 2150.3869999825956], [1.60281054E12, 4160.0], [1.60281072E12, 3956.8639989852904], [1.60281294E12, 3486.0], [1.60281162E12, 3903.764995008707], [1.60281192E12, 2511.5509957015515], [1.60281174E12, 3601.0], [1.60281204E12, 3442.324998766184], [1.60281132E12, 2457.660988622904], [1.60281234E12, 5338.065999472141], [1.60281102E12, 4145.981996047497], [1.60281264E12, 2821.9919996738436], [1.6028112E12, 2290.424999266863], [1.60281246E12, 2332.623999929428], [1.6028109E12, 2216.029999911785], [1.60281276E12, 2179.0849997103214], [1.6028106E12, 2414.0], [1.60281144E12, 4521.76999861002]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60281048E12, 2987.0], [1.60281156E12, 2141.0], [1.60281186E12, 2407.0], [1.60281216E12, 2191.0], [1.60281198E12, 3705.0], [1.60281228E12, 3183.0], [1.60281108E12, 4004.0], [1.60281258E12, 2288.0], [1.60281078E12, 3197.0], [1.60281288E12, 3870.0], [1.60281096E12, 2676.0], [1.6028127E12, 3182.0], [1.60281066E12, 2276.0], [1.602813E12, 4926.0], [1.60281138E12, 4326.0], [1.60281168E12, 3688.0], [1.6028115E12, 2418.0], [1.6028118E12, 4547.0], [1.6028121E12, 3532.0], [1.60281126E12, 2202.0], [1.6028124E12, 4758.0], [1.60281222E12, 2301.0], [1.60281114E12, 2598.0], [1.60281252E12, 2408.0], [1.60281084E12, 4455.0], [1.60281282E12, 2150.0], [1.60281054E12, 4160.0], [1.60281072E12, 3952.0], [1.60281294E12, 3486.0], [1.60281162E12, 3901.0], [1.60281192E12, 2411.0], [1.60281174E12, 3601.0], [1.60281204E12, 3419.0], [1.60281132E12, 2353.0], [1.60281234E12, 5337.0], [1.60281102E12, 4138.0], [1.60281264E12, 2820.0], [1.6028112E12, 2273.0], [1.60281246E12, 2331.0], [1.6028109E12, 2213.0], [1.60281276E12, 2171.0], [1.6028106E12, 2414.0], [1.60281144E12, 4517.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60281048E12, 6418.5], [1.60281156E12, 3347.5], [1.60281186E12, 6213.0], [1.60281216E12, 4890.0], [1.60281198E12, 5403.5], [1.60281228E12, 5276.0], [1.60281108E12, 7189.0], [1.60281258E12, 4682.0], [1.60281078E12, 4645.0], [1.60281288E12, 6207.0], [1.60281096E12, 4790.0], [1.6028127E12, 5915.0], [1.60281066E12, 5277.0], [1.602813E12, 7018.0], [1.60281138E12, 6566.0], [1.60281168E12, 6571.0], [1.6028115E12, 4054.0], [1.6028118E12, 6560.5], [1.6028121E12, 8814.5], [1.60281126E12, 5376.0], [1.6028124E12, 6560.5], [1.60281222E12, 4627.0], [1.60281114E12, 5710.0], [1.60281252E12, 5476.5], [1.60281084E12, 7898.0], [1.60281282E12, 4696.0], [1.60281054E12, 6899.5], [1.60281072E12, 5704.0], [1.60281294E12, 7191.0], [1.60281162E12, 6394.0], [1.60281192E12, 5149.0], [1.60281174E12, 7211.0], [1.60281204E12, 5240.0], [1.60281132E12, 6006.5], [1.60281234E12, 6937.0], [1.60281102E12, 6387.0], [1.60281264E12, 6346.0], [1.6028112E12, 4917.0], [1.60281246E12, 5190.0], [1.6028109E12, 3590.0], [1.60281276E12, 4364.0], [1.6028106E12, 6229.5], [1.60281144E12, 6485.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.602813E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2601.0, "minX": 1.0, "maxY": 6955.5, "series": [{"data": [[1.0, 6955.5], [2.0, 6288.5], [4.0, 4564.0], [5.0, 2976.0], [3.0, 5701.0], [6.0, 2601.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2601.0, "minX": 1.0, "maxY": 6952.0, "series": [{"data": [[1.0, 6952.0], [2.0, 6285.0], [4.0, 4564.0], [5.0, 2976.0], [3.0, 5700.0], [6.0, 2601.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.60281048E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60281048E12, 0.36666666666666664], [1.60281156E12, 2.6333333333333333], [1.60281186E12, 1.6166666666666667], [1.60281216E12, 2.4833333333333334], [1.60281198E12, 1.7333333333333334], [1.60281228E12, 2.0833333333333335], [1.60281108E12, 1.6833333333333333], [1.60281258E12, 2.4833333333333334], [1.60281078E12, 2.4166666666666665], [1.60281288E12, 1.7666666666666666], [1.60281096E12, 2.35], [1.6028127E12, 2.0166666666666666], [1.60281066E12, 2.433333333333333], [1.602813E12, 1.0666666666666667], [1.60281138E12, 1.85], [1.60281168E12, 1.75], [1.6028115E12, 2.5833333333333335], [1.6028118E12, 1.8], [1.6028121E12, 1.4333333333333333], [1.60281126E12, 2.216666666666667], [1.6028124E12, 1.8], [1.60281222E12, 2.6166666666666667], [1.60281114E12, 2.283333333333333], [1.60281252E12, 2.2666666666666666], [1.60281084E12, 1.4166666666666667], [1.60281282E12, 2.4166666666666665], [1.60281054E12, 1.7], [1.60281072E12, 1.85], [1.60281294E12, 1.7166666666666666], [1.60281162E12, 1.75], [1.60281192E12, 2.466666666666667], [1.60281174E12, 1.6166666666666667], [1.60281204E12, 2.283333333333333], [1.60281132E12, 1.9666666666666666], [1.60281234E12, 1.7833333333333334], [1.60281102E12, 1.7833333333333334], [1.60281264E12, 1.8833333333333333], [1.6028112E12, 2.4833333333333334], [1.60281246E12, 2.45], [1.6028109E12, 3.066666666666667], [1.60281276E12, 2.683333333333333], [1.6028106E12, 1.6333333333333333], [1.60281144E12, 1.8166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.602813E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60281048E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60281048E12, 0.16666666666666666], [1.60281156E12, 2.6333333333333333], [1.60281186E12, 1.6166666666666667], [1.60281216E12, 2.4833333333333334], [1.60281198E12, 1.7333333333333334], [1.60281228E12, 2.0833333333333335], [1.60281108E12, 1.6833333333333333], [1.60281258E12, 2.4833333333333334], [1.60281078E12, 2.4166666666666665], [1.60281288E12, 1.7666666666666666], [1.60281096E12, 2.35], [1.6028127E12, 2.0166666666666666], [1.60281066E12, 2.433333333333333], [1.602813E12, 1.2666666666666666], [1.60281138E12, 1.85], [1.60281168E12, 1.75], [1.6028115E12, 2.5833333333333335], [1.6028118E12, 1.8], [1.6028121E12, 1.4333333333333333], [1.60281126E12, 2.216666666666667], [1.6028124E12, 1.8], [1.60281222E12, 2.6166666666666667], [1.60281114E12, 2.283333333333333], [1.60281252E12, 2.2666666666666666], [1.60281084E12, 1.4166666666666667], [1.60281282E12, 2.4166666666666665], [1.60281054E12, 1.7], [1.60281072E12, 1.85], [1.60281294E12, 1.7166666666666666], [1.60281162E12, 1.75], [1.60281192E12, 2.466666666666667], [1.60281174E12, 1.6166666666666667], [1.60281204E12, 2.283333333333333], [1.60281132E12, 1.9666666666666666], [1.60281234E12, 1.7833333333333334], [1.60281102E12, 1.7833333333333334], [1.60281264E12, 1.8833333333333333], [1.6028112E12, 2.4833333333333334], [1.60281246E12, 2.45], [1.6028109E12, 3.066666666666667], [1.60281276E12, 2.683333333333333], [1.6028106E12, 1.6333333333333333], [1.60281144E12, 1.8166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.602813E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60281048E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60281048E12, 0.16666666666666666], [1.60281156E12, 2.6333333333333333], [1.60281186E12, 1.6166666666666667], [1.60281216E12, 2.4833333333333334], [1.60281198E12, 1.7333333333333334], [1.60281228E12, 2.0833333333333335], [1.60281108E12, 1.6833333333333333], [1.60281258E12, 2.4833333333333334], [1.60281078E12, 2.4166666666666665], [1.60281288E12, 1.7666666666666666], [1.60281096E12, 2.35], [1.6028127E12, 2.0166666666666666], [1.60281066E12, 2.433333333333333], [1.602813E12, 1.2666666666666666], [1.60281138E12, 1.85], [1.60281168E12, 1.75], [1.6028115E12, 2.5833333333333335], [1.6028118E12, 1.8], [1.6028121E12, 1.4333333333333333], [1.60281126E12, 2.216666666666667], [1.6028124E12, 1.8], [1.60281222E12, 2.6166666666666667], [1.60281114E12, 2.283333333333333], [1.60281252E12, 2.2666666666666666], [1.60281084E12, 1.4166666666666667], [1.60281282E12, 2.4166666666666665], [1.60281054E12, 1.7], [1.60281072E12, 1.85], [1.60281294E12, 1.7166666666666666], [1.60281162E12, 1.75], [1.60281192E12, 2.466666666666667], [1.60281174E12, 1.6166666666666667], [1.60281204E12, 2.283333333333333], [1.60281132E12, 1.9666666666666666], [1.60281234E12, 1.7833333333333334], [1.60281102E12, 1.7833333333333334], [1.60281264E12, 1.8833333333333333], [1.6028112E12, 2.4833333333333334], [1.60281246E12, 2.45], [1.6028109E12, 3.066666666666667], [1.60281276E12, 2.683333333333333], [1.6028106E12, 1.6333333333333333], [1.60281144E12, 1.8166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.602813E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60281048E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60281048E12, 0.16666666666666666], [1.60281156E12, 2.6333333333333333], [1.60281186E12, 1.6166666666666667], [1.60281216E12, 2.4833333333333334], [1.60281198E12, 1.7333333333333334], [1.60281228E12, 2.0833333333333335], [1.60281108E12, 1.6833333333333333], [1.60281258E12, 2.4833333333333334], [1.60281078E12, 2.4166666666666665], [1.60281288E12, 1.7666666666666666], [1.60281096E12, 2.35], [1.6028127E12, 2.0166666666666666], [1.60281066E12, 2.433333333333333], [1.602813E12, 1.2666666666666666], [1.60281138E12, 1.85], [1.60281168E12, 1.75], [1.6028115E12, 2.5833333333333335], [1.6028118E12, 1.8], [1.6028121E12, 1.4333333333333333], [1.60281126E12, 2.216666666666667], [1.6028124E12, 1.8], [1.60281222E12, 2.6166666666666667], [1.60281114E12, 2.283333333333333], [1.60281252E12, 2.2666666666666666], [1.60281084E12, 1.4166666666666667], [1.60281282E12, 2.4166666666666665], [1.60281054E12, 1.7], [1.60281072E12, 1.85], [1.60281294E12, 1.7166666666666666], [1.60281162E12, 1.75], [1.60281192E12, 2.466666666666667], [1.60281174E12, 1.6166666666666667], [1.60281204E12, 2.283333333333333], [1.60281132E12, 1.9666666666666666], [1.60281234E12, 1.7833333333333334], [1.60281102E12, 1.7833333333333334], [1.60281264E12, 1.8833333333333333], [1.6028112E12, 2.4833333333333334], [1.60281246E12, 2.45], [1.6028109E12, 3.066666666666667], [1.60281276E12, 2.683333333333333], [1.6028106E12, 1.6333333333333333], [1.60281144E12, 1.8166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.602813E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

