/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2142.0, "minX": 0.0, "maxY": 23411.0, "series": [{"data": [[0.0, 2142.0], [0.1, 2192.0], [0.2, 2209.0], [0.3, 2221.0], [0.4, 2243.0], [0.5, 2251.0], [0.6, 2260.0], [0.7, 2263.0], [0.8, 2268.0], [0.9, 2278.0], [1.0, 2288.0], [1.1, 2291.0], [1.2, 2297.0], [1.3, 2302.0], [1.4, 2311.0], [1.5, 2318.0], [1.6, 2324.0], [1.7, 2329.0], [1.8, 2337.0], [1.9, 2344.0], [2.0, 2351.0], [2.1, 2359.0], [2.2, 2360.0], [2.3, 2362.0], [2.4, 2368.0], [2.5, 2377.0], [2.6, 2383.0], [2.7, 2384.0], [2.8, 2388.0], [2.9, 2390.0], [3.0, 2399.0], [3.1, 2403.0], [3.2, 2406.0], [3.3, 2409.0], [3.4, 2417.0], [3.5, 2423.0], [3.6, 2426.0], [3.7, 2431.0], [3.8, 2435.0], [3.9, 2439.0], [4.0, 2447.0], [4.1, 2455.0], [4.2, 2466.0], [4.3, 2468.0], [4.4, 2478.0], [4.5, 2488.0], [4.6, 2493.0], [4.7, 2500.0], [4.8, 2509.0], [4.9, 2515.0], [5.0, 2529.0], [5.1, 2533.0], [5.2, 2544.0], [5.3, 2553.0], [5.4, 2556.0], [5.5, 2576.0], [5.6, 2592.0], [5.7, 2598.0], [5.8, 2610.0], [5.9, 2615.0], [6.0, 2625.0], [6.1, 2637.0], [6.2, 2647.0], [6.3, 2657.0], [6.4, 2671.0], [6.5, 2698.0], [6.6, 2705.0], [6.7, 2710.0], [6.8, 2724.0], [6.9, 2732.0], [7.0, 2740.0], [7.1, 2746.0], [7.2, 2752.0], [7.3, 2758.0], [7.4, 2776.0], [7.5, 2793.0], [7.6, 2799.0], [7.7, 2818.0], [7.8, 2845.0], [7.9, 2861.0], [8.0, 2892.0], [8.1, 2902.0], [8.2, 2908.0], [8.3, 2927.0], [8.4, 2936.0], [8.5, 2945.0], [8.6, 2951.0], [8.7, 2962.0], [8.8, 2971.0], [8.9, 2977.0], [9.0, 2987.0], [9.1, 3005.0], [9.2, 3009.0], [9.3, 3017.0], [9.4, 3030.0], [9.5, 3042.0], [9.6, 3046.0], [9.7, 3064.0], [9.8, 3078.0], [9.9, 3086.0], [10.0, 3096.0], [10.1, 3101.0], [10.2, 3116.0], [10.3, 3124.0], [10.4, 3135.0], [10.5, 3146.0], [10.6, 3169.0], [10.7, 3186.0], [10.8, 3193.0], [10.9, 3202.0], [11.0, 3210.0], [11.1, 3215.0], [11.2, 3222.0], [11.3, 3227.0], [11.4, 3240.0], [11.5, 3250.0], [11.6, 3256.0], [11.7, 3267.0], [11.8, 3280.0], [11.9, 3293.0], [12.0, 3297.0], [12.1, 3302.0], [12.2, 3308.0], [12.3, 3315.0], [12.4, 3318.0], [12.5, 3325.0], [12.6, 3334.0], [12.7, 3340.0], [12.8, 3352.0], [12.9, 3362.0], [13.0, 3368.0], [13.1, 3374.0], [13.2, 3384.0], [13.3, 3391.0], [13.4, 3394.0], [13.5, 3400.0], [13.6, 3405.0], [13.7, 3413.0], [13.8, 3424.0], [13.9, 3435.0], [14.0, 3445.0], [14.1, 3457.0], [14.2, 3466.0], [14.3, 3475.0], [14.4, 3489.0], [14.5, 3508.0], [14.6, 3520.0], [14.7, 3545.0], [14.8, 3562.0], [14.9, 3571.0], [15.0, 3584.0], [15.1, 3590.0], [15.2, 3603.0], [15.3, 3612.0], [15.4, 3619.0], [15.5, 3628.0], [15.6, 3637.0], [15.7, 3649.0], [15.8, 3660.0], [15.9, 3673.0], [16.0, 3690.0], [16.1, 3700.0], [16.2, 3707.0], [16.3, 3717.0], [16.4, 3724.0], [16.5, 3730.0], [16.6, 3734.0], [16.7, 3749.0], [16.8, 3784.0], [16.9, 3793.0], [17.0, 3812.0], [17.1, 3819.0], [17.2, 3828.0], [17.3, 3834.0], [17.4, 3847.0], [17.5, 3862.0], [17.6, 3871.0], [17.7, 3876.0], [17.8, 3881.0], [17.9, 3897.0], [18.0, 3906.0], [18.1, 3910.0], [18.2, 3924.0], [18.3, 3929.0], [18.4, 3937.0], [18.5, 3944.0], [18.6, 3949.0], [18.7, 3959.0], [18.8, 3968.0], [18.9, 3975.0], [19.0, 3988.0], [19.1, 3992.0], [19.2, 4000.0], [19.3, 4006.0], [19.4, 4025.0], [19.5, 4034.0], [19.6, 4038.0], [19.7, 4042.0], [19.8, 4048.0], [19.9, 4055.0], [20.0, 4071.0], [20.1, 4085.0], [20.2, 4091.0], [20.3, 4098.0], [20.4, 4109.0], [20.5, 4122.0], [20.6, 4128.0], [20.7, 4135.0], [20.8, 4151.0], [20.9, 4155.0], [21.0, 4162.0], [21.1, 4168.0], [21.2, 4180.0], [21.3, 4184.0], [21.4, 4194.0], [21.5, 4202.0], [21.6, 4211.0], [21.7, 4216.0], [21.8, 4221.0], [21.9, 4230.0], [22.0, 4237.0], [22.1, 4245.0], [22.2, 4249.0], [22.3, 4255.0], [22.4, 4264.0], [22.5, 4268.0], [22.6, 4290.0], [22.7, 4305.0], [22.8, 4316.0], [22.9, 4320.0], [23.0, 4324.0], [23.1, 4336.0], [23.2, 4341.0], [23.3, 4345.0], [23.4, 4356.0], [23.5, 4370.0], [23.6, 4378.0], [23.7, 4389.0], [23.8, 4397.0], [23.9, 4403.0], [24.0, 4407.0], [24.1, 4417.0], [24.2, 4422.0], [24.3, 4429.0], [24.4, 4437.0], [24.5, 4445.0], [24.6, 4448.0], [24.7, 4461.0], [24.8, 4464.0], [24.9, 4479.0], [25.0, 4487.0], [25.1, 4498.0], [25.2, 4504.0], [25.3, 4515.0], [25.4, 4523.0], [25.5, 4530.0], [25.6, 4533.0], [25.7, 4535.0], [25.8, 4546.0], [25.9, 4551.0], [26.0, 4558.0], [26.1, 4563.0], [26.2, 4567.0], [26.3, 4573.0], [26.4, 4577.0], [26.5, 4581.0], [26.6, 4588.0], [26.7, 4593.0], [26.8, 4605.0], [26.9, 4612.0], [27.0, 4621.0], [27.1, 4624.0], [27.2, 4631.0], [27.3, 4640.0], [27.4, 4646.0], [27.5, 4652.0], [27.6, 4659.0], [27.7, 4664.0], [27.8, 4679.0], [27.9, 4683.0], [28.0, 4693.0], [28.1, 4701.0], [28.2, 4707.0], [28.3, 4724.0], [28.4, 4731.0], [28.5, 4733.0], [28.6, 4743.0], [28.7, 4750.0], [28.8, 4764.0], [28.9, 4773.0], [29.0, 4781.0], [29.1, 4785.0], [29.2, 4795.0], [29.3, 4801.0], [29.4, 4807.0], [29.5, 4813.0], [29.6, 4819.0], [29.7, 4822.0], [29.8, 4826.0], [29.9, 4831.0], [30.0, 4837.0], [30.1, 4841.0], [30.2, 4846.0], [30.3, 4848.0], [30.4, 4856.0], [30.5, 4859.0], [30.6, 4861.0], [30.7, 4872.0], [30.8, 4877.0], [30.9, 4885.0], [31.0, 4889.0], [31.1, 4895.0], [31.2, 4898.0], [31.3, 4906.0], [31.4, 4912.0], [31.5, 4922.0], [31.6, 4926.0], [31.7, 4929.0], [31.8, 4941.0], [31.9, 4945.0], [32.0, 4952.0], [32.1, 4954.0], [32.2, 4955.0], [32.3, 4963.0], [32.4, 4967.0], [32.5, 4976.0], [32.6, 4987.0], [32.7, 4993.0], [32.8, 4997.0], [32.9, 5002.0], [33.0, 5005.0], [33.1, 5006.0], [33.2, 5010.0], [33.3, 5015.0], [33.4, 5021.0], [33.5, 5023.0], [33.6, 5027.0], [33.7, 5036.0], [33.8, 5040.0], [33.9, 5044.0], [34.0, 5052.0], [34.1, 5060.0], [34.2, 5068.0], [34.3, 5074.0], [34.4, 5077.0], [34.5, 5079.0], [34.6, 5086.0], [34.7, 5092.0], [34.8, 5098.0], [34.9, 5102.0], [35.0, 5106.0], [35.1, 5116.0], [35.2, 5124.0], [35.3, 5134.0], [35.4, 5138.0], [35.5, 5141.0], [35.6, 5151.0], [35.7, 5160.0], [35.8, 5164.0], [35.9, 5171.0], [36.0, 5176.0], [36.1, 5179.0], [36.2, 5183.0], [36.3, 5185.0], [36.4, 5189.0], [36.5, 5190.0], [36.6, 5196.0], [36.7, 5203.0], [36.8, 5208.0], [36.9, 5212.0], [37.0, 5216.0], [37.1, 5222.0], [37.2, 5232.0], [37.3, 5236.0], [37.4, 5242.0], [37.5, 5245.0], [37.6, 5246.0], [37.7, 5251.0], [37.8, 5253.0], [37.9, 5256.0], [38.0, 5259.0], [38.1, 5266.0], [38.2, 5273.0], [38.3, 5278.0], [38.4, 5281.0], [38.5, 5283.0], [38.6, 5288.0], [38.7, 5292.0], [38.8, 5303.0], [38.9, 5309.0], [39.0, 5313.0], [39.1, 5318.0], [39.2, 5324.0], [39.3, 5326.0], [39.4, 5329.0], [39.5, 5334.0], [39.6, 5340.0], [39.7, 5343.0], [39.8, 5344.0], [39.9, 5352.0], [40.0, 5359.0], [40.1, 5364.0], [40.2, 5369.0], [40.3, 5374.0], [40.4, 5379.0], [40.5, 5386.0], [40.6, 5395.0], [40.7, 5398.0], [40.8, 5406.0], [40.9, 5416.0], [41.0, 5422.0], [41.1, 5428.0], [41.2, 5431.0], [41.3, 5439.0], [41.4, 5444.0], [41.5, 5447.0], [41.6, 5448.0], [41.7, 5452.0], [41.8, 5456.0], [41.9, 5458.0], [42.0, 5462.0], [42.1, 5465.0], [42.2, 5471.0], [42.3, 5474.0], [42.4, 5477.0], [42.5, 5485.0], [42.6, 5487.0], [42.7, 5492.0], [42.8, 5498.0], [42.9, 5501.0], [43.0, 5502.0], [43.1, 5509.0], [43.2, 5517.0], [43.3, 5519.0], [43.4, 5527.0], [43.5, 5532.0], [43.6, 5537.0], [43.7, 5539.0], [43.8, 5544.0], [43.9, 5549.0], [44.0, 5556.0], [44.1, 5562.0], [44.2, 5564.0], [44.3, 5566.0], [44.4, 5570.0], [44.5, 5573.0], [44.6, 5578.0], [44.7, 5584.0], [44.8, 5591.0], [44.9, 5596.0], [45.0, 5601.0], [45.1, 5606.0], [45.2, 5609.0], [45.3, 5612.0], [45.4, 5616.0], [45.5, 5619.0], [45.6, 5622.0], [45.7, 5626.0], [45.8, 5631.0], [45.9, 5635.0], [46.0, 5640.0], [46.1, 5644.0], [46.2, 5649.0], [46.3, 5657.0], [46.4, 5663.0], [46.5, 5669.0], [46.6, 5674.0], [46.7, 5677.0], [46.8, 5679.0], [46.9, 5682.0], [47.0, 5687.0], [47.1, 5690.0], [47.2, 5693.0], [47.3, 5697.0], [47.4, 5700.0], [47.5, 5705.0], [47.6, 5706.0], [47.7, 5710.0], [47.8, 5711.0], [47.9, 5715.0], [48.0, 5719.0], [48.1, 5721.0], [48.2, 5723.0], [48.3, 5724.0], [48.4, 5726.0], [48.5, 5729.0], [48.6, 5733.0], [48.7, 5743.0], [48.8, 5744.0], [48.9, 5747.0], [49.0, 5754.0], [49.1, 5760.0], [49.2, 5762.0], [49.3, 5767.0], [49.4, 5773.0], [49.5, 5776.0], [49.6, 5778.0], [49.7, 5781.0], [49.8, 5785.0], [49.9, 5787.0], [50.0, 5794.0], [50.1, 5797.0], [50.2, 5803.0], [50.3, 5806.0], [50.4, 5813.0], [50.5, 5816.0], [50.6, 5818.0], [50.7, 5822.0], [50.8, 5827.0], [50.9, 5829.0], [51.0, 5833.0], [51.1, 5837.0], [51.2, 5842.0], [51.3, 5849.0], [51.4, 5855.0], [51.5, 5859.0], [51.6, 5863.0], [51.7, 5865.0], [51.8, 5869.0], [51.9, 5875.0], [52.0, 5880.0], [52.1, 5881.0], [52.2, 5884.0], [52.3, 5891.0], [52.4, 5895.0], [52.5, 5900.0], [52.6, 5904.0], [52.7, 5912.0], [52.8, 5916.0], [52.9, 5919.0], [53.0, 5922.0], [53.1, 5925.0], [53.2, 5932.0], [53.3, 5934.0], [53.4, 5939.0], [53.5, 5949.0], [53.6, 5951.0], [53.7, 5955.0], [53.8, 5957.0], [53.9, 5961.0], [54.0, 5970.0], [54.1, 5973.0], [54.2, 5977.0], [54.3, 5986.0], [54.4, 5995.0], [54.5, 6005.0], [54.6, 6006.0], [54.7, 6009.0], [54.8, 6010.0], [54.9, 6013.0], [55.0, 6015.0], [55.1, 6019.0], [55.2, 6023.0], [55.3, 6027.0], [55.4, 6031.0], [55.5, 6034.0], [55.6, 6038.0], [55.7, 6039.0], [55.8, 6041.0], [55.9, 6045.0], [56.0, 6047.0], [56.1, 6049.0], [56.2, 6052.0], [56.3, 6057.0], [56.4, 6064.0], [56.5, 6067.0], [56.6, 6073.0], [56.7, 6074.0], [56.8, 6078.0], [56.9, 6081.0], [57.0, 6092.0], [57.1, 6101.0], [57.2, 6109.0], [57.3, 6111.0], [57.4, 6118.0], [57.5, 6121.0], [57.6, 6123.0], [57.7, 6134.0], [57.8, 6138.0], [57.9, 6144.0], [58.0, 6147.0], [58.1, 6154.0], [58.2, 6158.0], [58.3, 6163.0], [58.4, 6167.0], [58.5, 6172.0], [58.6, 6176.0], [58.7, 6180.0], [58.8, 6185.0], [58.9, 6188.0], [59.0, 6191.0], [59.1, 6193.0], [59.2, 6202.0], [59.3, 6206.0], [59.4, 6210.0], [59.5, 6216.0], [59.6, 6218.0], [59.7, 6224.0], [59.8, 6231.0], [59.9, 6236.0], [60.0, 6245.0], [60.1, 6248.0], [60.2, 6255.0], [60.3, 6259.0], [60.4, 6264.0], [60.5, 6274.0], [60.6, 6278.0], [60.7, 6287.0], [60.8, 6291.0], [60.9, 6299.0], [61.0, 6308.0], [61.1, 6312.0], [61.2, 6318.0], [61.3, 6324.0], [61.4, 6331.0], [61.5, 6333.0], [61.6, 6339.0], [61.7, 6347.0], [61.8, 6354.0], [61.9, 6358.0], [62.0, 6364.0], [62.1, 6365.0], [62.2, 6369.0], [62.3, 6375.0], [62.4, 6378.0], [62.5, 6381.0], [62.6, 6384.0], [62.7, 6387.0], [62.8, 6396.0], [62.9, 6402.0], [63.0, 6412.0], [63.1, 6416.0], [63.2, 6421.0], [63.3, 6430.0], [63.4, 6438.0], [63.5, 6441.0], [63.6, 6445.0], [63.7, 6450.0], [63.8, 6451.0], [63.9, 6454.0], [64.0, 6457.0], [64.1, 6461.0], [64.2, 6466.0], [64.3, 6468.0], [64.4, 6470.0], [64.5, 6476.0], [64.6, 6481.0], [64.7, 6487.0], [64.8, 6490.0], [64.9, 6492.0], [65.0, 6494.0], [65.1, 6497.0], [65.2, 6501.0], [65.3, 6506.0], [65.4, 6514.0], [65.5, 6517.0], [65.6, 6522.0], [65.7, 6523.0], [65.8, 6526.0], [65.9, 6528.0], [66.0, 6534.0], [66.1, 6537.0], [66.2, 6539.0], [66.3, 6549.0], [66.4, 6552.0], [66.5, 6556.0], [66.6, 6560.0], [66.7, 6566.0], [66.8, 6571.0], [66.9, 6573.0], [67.0, 6579.0], [67.1, 6584.0], [67.2, 6590.0], [67.3, 6595.0], [67.4, 6600.0], [67.5, 6604.0], [67.6, 6608.0], [67.7, 6612.0], [67.8, 6616.0], [67.9, 6622.0], [68.0, 6627.0], [68.1, 6634.0], [68.2, 6640.0], [68.3, 6647.0], [68.4, 6657.0], [68.5, 6663.0], [68.6, 6664.0], [68.7, 6667.0], [68.8, 6677.0], [68.9, 6683.0], [69.0, 6690.0], [69.1, 6695.0], [69.2, 6702.0], [69.3, 6710.0], [69.4, 6718.0], [69.5, 6728.0], [69.6, 6742.0], [69.7, 6750.0], [69.8, 6751.0], [69.9, 6759.0], [70.0, 6769.0], [70.1, 6773.0], [70.2, 6780.0], [70.3, 6784.0], [70.4, 6800.0], [70.5, 6806.0], [70.6, 6816.0], [70.7, 6824.0], [70.8, 6836.0], [70.9, 6842.0], [71.0, 6852.0], [71.1, 6860.0], [71.2, 6863.0], [71.3, 6867.0], [71.4, 6875.0], [71.5, 6880.0], [71.6, 6891.0], [71.7, 6897.0], [71.8, 6903.0], [71.9, 6907.0], [72.0, 6917.0], [72.1, 6923.0], [72.2, 6932.0], [72.3, 6942.0], [72.4, 6946.0], [72.5, 6951.0], [72.6, 6957.0], [72.7, 6967.0], [72.8, 6977.0], [72.9, 6982.0], [73.0, 6984.0], [73.1, 6989.0], [73.2, 6997.0], [73.3, 7005.0], [73.4, 7010.0], [73.5, 7017.0], [73.6, 7022.0], [73.7, 7026.0], [73.8, 7033.0], [73.9, 7039.0], [74.0, 7049.0], [74.1, 7051.0], [74.2, 7056.0], [74.3, 7069.0], [74.4, 7080.0], [74.5, 7082.0], [74.6, 7089.0], [74.7, 7104.0], [74.8, 7108.0], [74.9, 7114.0], [75.0, 7121.0], [75.1, 7125.0], [75.2, 7131.0], [75.3, 7136.0], [75.4, 7145.0], [75.5, 7151.0], [75.6, 7155.0], [75.7, 7159.0], [75.8, 7163.0], [75.9, 7167.0], [76.0, 7174.0], [76.1, 7179.0], [76.2, 7182.0], [76.3, 7188.0], [76.4, 7196.0], [76.5, 7204.0], [76.6, 7209.0], [76.7, 7214.0], [76.8, 7219.0], [76.9, 7228.0], [77.0, 7241.0], [77.1, 7244.0], [77.2, 7251.0], [77.3, 7257.0], [77.4, 7260.0], [77.5, 7269.0], [77.6, 7274.0], [77.7, 7277.0], [77.8, 7282.0], [77.9, 7289.0], [78.0, 7292.0], [78.1, 7305.0], [78.2, 7310.0], [78.3, 7317.0], [78.4, 7321.0], [78.5, 7325.0], [78.6, 7334.0], [78.7, 7337.0], [78.8, 7343.0], [78.9, 7347.0], [79.0, 7354.0], [79.1, 7361.0], [79.2, 7367.0], [79.3, 7376.0], [79.4, 7383.0], [79.5, 7389.0], [79.6, 7400.0], [79.7, 7406.0], [79.8, 7411.0], [79.9, 7418.0], [80.0, 7423.0], [80.1, 7427.0], [80.2, 7435.0], [80.3, 7438.0], [80.4, 7449.0], [80.5, 7453.0], [80.6, 7463.0], [80.7, 7468.0], [80.8, 7478.0], [80.9, 7486.0], [81.0, 7492.0], [81.1, 7501.0], [81.2, 7507.0], [81.3, 7510.0], [81.4, 7517.0], [81.5, 7523.0], [81.6, 7536.0], [81.7, 7547.0], [81.8, 7553.0], [81.9, 7561.0], [82.0, 7568.0], [82.1, 7572.0], [82.2, 7585.0], [82.3, 7597.0], [82.4, 7603.0], [82.5, 7609.0], [82.6, 7614.0], [82.7, 7624.0], [82.8, 7635.0], [82.9, 7642.0], [83.0, 7652.0], [83.1, 7665.0], [83.2, 7672.0], [83.3, 7691.0], [83.4, 7703.0], [83.5, 7709.0], [83.6, 7718.0], [83.7, 7722.0], [83.8, 7730.0], [83.9, 7740.0], [84.0, 7749.0], [84.1, 7755.0], [84.2, 7760.0], [84.3, 7768.0], [84.4, 7772.0], [84.5, 7777.0], [84.6, 7789.0], [84.7, 7794.0], [84.8, 7804.0], [84.9, 7816.0], [85.0, 7826.0], [85.1, 7842.0], [85.2, 7849.0], [85.3, 7859.0], [85.4, 7877.0], [85.5, 7891.0], [85.6, 7901.0], [85.7, 7906.0], [85.8, 7917.0], [85.9, 7935.0], [86.0, 7942.0], [86.1, 7956.0], [86.2, 7967.0], [86.3, 7977.0], [86.4, 7983.0], [86.5, 7993.0], [86.6, 8002.0], [86.7, 8014.0], [86.8, 8018.0], [86.9, 8023.0], [87.0, 8037.0], [87.1, 8058.0], [87.2, 8071.0], [87.3, 8081.0], [87.4, 8093.0], [87.5, 8100.0], [87.6, 8113.0], [87.7, 8127.0], [87.8, 8140.0], [87.9, 8151.0], [88.0, 8161.0], [88.1, 8173.0], [88.2, 8191.0], [88.3, 8205.0], [88.4, 8215.0], [88.5, 8227.0], [88.6, 8240.0], [88.7, 8252.0], [88.8, 8270.0], [88.9, 8281.0], [89.0, 8298.0], [89.1, 8327.0], [89.2, 8343.0], [89.3, 8352.0], [89.4, 8364.0], [89.5, 8368.0], [89.6, 8385.0], [89.7, 8395.0], [89.8, 8424.0], [89.9, 8441.0], [90.0, 8458.0], [90.1, 8482.0], [90.2, 8490.0], [90.3, 8498.0], [90.4, 8512.0], [90.5, 8526.0], [90.6, 8537.0], [90.7, 8553.0], [90.8, 8580.0], [90.9, 8602.0], [91.0, 8611.0], [91.1, 8634.0], [91.2, 8664.0], [91.3, 8700.0], [91.4, 8716.0], [91.5, 8727.0], [91.6, 8748.0], [91.7, 8791.0], [91.8, 8801.0], [91.9, 8813.0], [92.0, 8836.0], [92.1, 8850.0], [92.2, 8865.0], [92.3, 8896.0], [92.4, 8928.0], [92.5, 8955.0], [92.6, 8976.0], [92.7, 9000.0], [92.8, 9030.0], [92.9, 9068.0], [93.0, 9100.0], [93.1, 9117.0], [93.2, 9148.0], [93.3, 9175.0], [93.4, 9213.0], [93.5, 9242.0], [93.6, 9253.0], [93.7, 9269.0], [93.8, 9307.0], [93.9, 9320.0], [94.0, 9339.0], [94.1, 9392.0], [94.2, 9427.0], [94.3, 9464.0], [94.4, 9488.0], [94.5, 9514.0], [94.6, 9571.0], [94.7, 9598.0], [94.8, 9609.0], [94.9, 9649.0], [95.0, 9683.0], [95.1, 9704.0], [95.2, 9721.0], [95.3, 9748.0], [95.4, 9805.0], [95.5, 9819.0], [95.6, 9893.0], [95.7, 9967.0], [95.8, 10001.0], [95.9, 10036.0], [96.0, 10086.0], [96.1, 10100.0], [96.2, 10141.0], [96.3, 10249.0], [96.4, 10306.0], [96.5, 10336.0], [96.6, 10375.0], [96.7, 10429.0], [96.8, 10487.0], [96.9, 10592.0], [97.0, 10660.0], [97.1, 10739.0], [97.2, 10846.0], [97.3, 10935.0], [97.4, 11140.0], [97.5, 11277.0], [97.6, 11302.0], [97.7, 11354.0], [97.8, 11473.0], [97.9, 11694.0], [98.0, 11759.0], [98.1, 11956.0], [98.2, 12011.0], [98.3, 12136.0], [98.4, 12223.0], [98.5, 12405.0], [98.6, 12564.0], [98.7, 12693.0], [98.8, 12797.0], [98.9, 12930.0], [99.0, 13136.0], [99.1, 13351.0], [99.2, 13620.0], [99.3, 13765.0], [99.4, 13848.0], [99.5, 14147.0], [99.6, 14411.0], [99.7, 14887.0], [99.8, 17695.0], [99.9, 19301.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 146.0, "series": [{"data": [[2100.0, 6.0], [2200.0, 59.0], [2300.0, 91.0], [2400.0, 87.0], [2500.0, 53.0], [2600.0, 42.0], [2700.0, 57.0], [2800.0, 24.0], [2900.0, 53.0], [3000.0, 51.0], [3100.0, 42.0], [3300.0, 75.0], [3200.0, 60.0], [3400.0, 51.0], [3500.0, 38.0], [3600.0, 46.0], [3700.0, 45.0], [3800.0, 51.0], [3900.0, 65.0], [4000.0, 58.0], [4300.0, 63.0], [4200.0, 63.0], [4100.0, 60.0], [4500.0, 86.0], [4600.0, 69.0], [4400.0, 63.0], [4800.0, 100.0], [4700.0, 62.0], [5000.0, 101.0], [5100.0, 96.0], [4900.0, 86.0], [5300.0, 100.0], [5200.0, 110.0], [5400.0, 111.0], [5500.0, 111.0], [5600.0, 123.0], [5800.0, 120.0], [5700.0, 146.0], [6100.0, 109.0], [6000.0, 137.0], [5900.0, 102.0], [6200.0, 90.0], [6300.0, 101.0], [6500.0, 114.0], [6400.0, 121.0], [6600.0, 90.0], [6700.0, 66.0], [6800.0, 70.0], [6900.0, 77.0], [7100.0, 93.0], [7000.0, 74.0], [7200.0, 84.0], [7400.0, 76.0], [7300.0, 80.0], [7500.0, 68.0], [7600.0, 52.0], [7900.0, 54.0], [7700.0, 71.0], [7800.0, 42.0], [8100.0, 42.0], [8000.0, 46.0], [8300.0, 37.0], [8700.0, 25.0], [8200.0, 37.0], [8600.0, 21.0], [8500.0, 30.0], [8400.0, 31.0], [9100.0, 19.0], [8800.0, 28.0], [8900.0, 20.0], [9000.0, 15.0], [9200.0, 21.0], [9500.0, 15.0], [9300.0, 18.0], [9600.0, 17.0], [9400.0, 18.0], [9700.0, 17.0], [9900.0, 8.0], [10000.0, 13.0], [9800.0, 12.0], [10200.0, 9.0], [10100.0, 9.0], [10600.0, 7.0], [10500.0, 6.0], [10400.0, 11.0], [10700.0, 4.0], [10300.0, 12.0], [10800.0, 5.0], [11000.0, 3.0], [11100.0, 5.0], [11200.0, 3.0], [10900.0, 4.0], [11300.0, 12.0], [11600.0, 2.0], [11700.0, 7.0], [11500.0, 3.0], [11400.0, 2.0], [12000.0, 7.0], [12100.0, 5.0], [11800.0, 2.0], [12200.0, 2.0], [11900.0, 4.0], [12500.0, 4.0], [12700.0, 5.0], [12400.0, 3.0], [12300.0, 4.0], [12600.0, 4.0], [13100.0, 2.0], [12800.0, 3.0], [13000.0, 2.0], [12900.0, 5.0], [13200.0, 3.0], [13300.0, 1.0], [13500.0, 3.0], [13700.0, 6.0], [13600.0, 3.0], [13800.0, 3.0], [13400.0, 1.0], [14300.0, 1.0], [14200.0, 2.0], [14000.0, 2.0], [14100.0, 3.0], [13900.0, 1.0], [14400.0, 2.0], [14600.0, 1.0], [14800.0, 1.0], [14500.0, 2.0], [15000.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [17500.0, 1.0], [17600.0, 1.0], [18000.0, 1.0], [18400.0, 1.0], [18100.0, 1.0], [19300.0, 2.0], [18700.0, 1.0], [19500.0, 1.0], [22600.0, 1.0], [23400.0, 1.0], [22700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.083333333333332, "minX": 1.6022418E12, "maxY": 12.0, "series": [{"data": [[1.60224198E12, 12.0], [1.6022442E12, 12.0], [1.60224228E12, 12.0], [1.6022439E12, 12.0], [1.60224258E12, 12.0], [1.60224288E12, 12.0], [1.6022427E12, 12.0], [1.602243E12, 12.0], [1.6022436E12, 12.0], [1.6022433E12, 12.0], [1.60224372E12, 12.0], [1.6022418E12, 12.0], [1.60224342E12, 12.0], [1.6022421E12, 12.0], [1.60224432E12, 11.083333333333332], [1.6022424E12, 12.0], [1.60224402E12, 12.0], [1.60224222E12, 12.0], [1.60224252E12, 12.0], [1.60224414E12, 12.0], [1.60224282E12, 12.0], [1.60224312E12, 12.0], [1.60224294E12, 12.0], [1.60224324E12, 12.0], [1.60224384E12, 12.0], [1.60224192E12, 12.0], [1.60224354E12, 12.0], [1.60224396E12, 12.0], [1.60224204E12, 12.0], [1.60224366E12, 12.0], [1.60224234E12, 12.0], [1.60224264E12, 12.0], [1.60224426E12, 12.0], [1.60224246E12, 12.0], [1.60224276E12, 12.0], [1.60224336E12, 12.0], [1.60224306E12, 12.0], [1.60224348E12, 12.0], [1.60224318E12, 12.0], [1.60224408E12, 12.0], [1.60224186E12, 12.0], [1.60224216E12, 12.0], [1.60224378E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60224432E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5082.0, "minX": 1.0, "maxY": 7221.0, "series": [{"data": [[8.0, 5082.0], [4.0, 7216.0], [2.0, 7160.0], [1.0, 6905.0], [9.0, 6257.0], [10.0, 6558.0], [5.0, 7145.0], [11.0, 6609.0], [12.0, 5921.506756756764], [6.0, 7039.0], [3.0, 7221.0], [7.0, 6982.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987285686765556, 5923.24773646697]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 522.5, "minX": 1.6022418E12, "maxY": 854392.1, "series": [{"data": [[1.60224198E12, 511330.56666666665], [1.6022442E12, 632934.8], [1.60224228E12, 529852.6], [1.6022439E12, 503857.31666666665], [1.60224258E12, 733687.0], [1.60224288E12, 477490.38333333336], [1.6022427E12, 555839.5333333333], [1.602243E12, 526742.2], [1.6022436E12, 566374.0166666667], [1.6022433E12, 512550.2], [1.60224372E12, 854392.1], [1.6022418E12, 709518.7333333333], [1.60224342E12, 361474.95], [1.6022421E12, 347177.6], [1.60224432E12, 310939.88333333336], [1.6022424E12, 704452.6166666667], [1.60224402E12, 607272.1], [1.60224222E12, 364817.23333333334], [1.60224252E12, 589425.7], [1.60224414E12, 539791.4666666667], [1.60224282E12, 818835.9333333333], [1.60224312E12, 668367.2833333333], [1.60224294E12, 427863.65], [1.60224324E12, 533345.0833333334], [1.60224384E12, 602390.7166666667], [1.60224192E12, 483338.31666666665], [1.60224354E12, 528994.0333333333], [1.60224396E12, 511496.88333333336], [1.60224204E12, 658539.0333333333], [1.60224366E12, 704553.3833333333], [1.60224234E12, 798579.65], [1.60224264E12, 552935.9], [1.60224426E12, 489123.9666666667], [1.60224246E12, 679596.4], [1.60224276E12, 529132.9166666666], [1.60224336E12, 590327.35], [1.60224306E12, 617417.8833333333], [1.60224348E12, 282003.23333333334], [1.60224318E12, 467749.4], [1.60224408E12, 502144.15], [1.60224186E12, 623129.8333333334], [1.60224216E12, 395271.15], [1.60224378E12, 567463.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60224198E12, 756.95], [1.6022442E12, 794.0166666666667], [1.60224228E12, 867.6333333333333], [1.6022439E12, 1112.7666666666667], [1.60224258E12, 1006.6166666666667], [1.60224288E12, 1240.6666666666667], [1.6022427E12, 937.6666666666666], [1.602243E12, 666.0666666666667], [1.6022436E12, 806.6], [1.6022433E12, 842.9], [1.60224372E12, 781.9833333333333], [1.6022418E12, 751.35], [1.60224342E12, 522.5], [1.6022421E12, 677.1333333333333], [1.60224432E12, 549.75], [1.6022424E12, 885.1833333333333], [1.60224402E12, 927.0666666666667], [1.60224222E12, 1242.1833333333334], [1.60224252E12, 1043.2666666666667], [1.60224414E12, 1082.8166666666666], [1.60224282E12, 730.7166666666667], [1.60224312E12, 534.8666666666667], [1.60224294E12, 751.8333333333334], [1.60224324E12, 908.8333333333334], [1.60224384E12, 1015.0166666666667], [1.60224192E12, 975.8], [1.60224354E12, 1041.0166666666667], [1.60224396E12, 849.2833333333333], [1.60224204E12, 1035.2833333333333], [1.60224366E12, 816.6833333333333], [1.60224234E12, 737.1333333333333], [1.60224264E12, 737.3333333333334], [1.60224426E12, 771.7833333333333], [1.60224246E12, 1065.2], [1.60224276E12, 1125.6333333333334], [1.60224336E12, 929.2], [1.60224306E12, 833.5666666666667], [1.60224348E12, 1267.3333333333333], [1.60224318E12, 959.1666666666666], [1.60224408E12, 1209.8333333333333], [1.60224186E12, 679.7333333333333], [1.60224216E12, 999.1833333333333], [1.60224378E12, 1114.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60224432E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4270.005747126436, "minX": 1.6022418E12, "maxY": 10080.8904109589, "series": [{"data": [[1.60224198E12, 6762.796296296296], [1.6022442E12, 6770.561904761902], [1.60224228E12, 5847.652892561981], [1.6022439E12, 4946.408163265307], [1.60224258E12, 5247.932330827068], [1.60224288E12, 4389.739393939394], [1.6022427E12, 6082.811475409838], [1.602243E12, 7925.0], [1.6022436E12, 6105.491228070177], [1.6022433E12, 6331.410256410253], [1.60224372E12, 6964.213592233009], [1.6022418E12, 7020.38383838384], [1.60224342E12, 10080.8904109589], [1.6022421E12, 7172.473118279569], [1.60224432E12, 7168.666666666666], [1.6022424E12, 6221.91379310345], [1.60224402E12, 5928.586776859504], [1.60224222E12, 4283.71856287425], [1.60224252E12, 5311.007246376813], [1.60224414E12, 4895.86013986014], [1.60224282E12, 7462.684210526313], [1.60224312E12, 8672.813333333337], [1.60224294E12, 7253.2673267326745], [1.60224324E12, 5476.333333333334], [1.60224384E12, 5309.932835820893], [1.60224192E12, 5139.647482014388], [1.60224354E12, 5208.836879432626], [1.60224396E12, 6402.3392857142835], [1.60224204E12, 5093.428571428574], [1.60224366E12, 6736.514018691589], [1.60224234E12, 7339.0206185567], [1.60224264E12, 7153.255102040817], [1.60224426E12, 7238.711538461538], [1.60224246E12, 5177.262411347516], [1.60224276E12, 4855.966442953017], [1.60224336E12, 5369.856000000001], [1.60224306E12, 6543.2660550458695], [1.60224348E12, 4270.005747126436], [1.60224318E12, 5928.259259259261], [1.60224408E12, 4467.7374999999965], [1.60224186E12, 7887.157894736841], [1.60224216E12, 5740.978260869561], [1.60224378E12, 4986.387755102038]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60224432E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4269.298850574714, "minX": 1.6022418E12, "maxY": 10078.849315068494, "series": [{"data": [[1.60224198E12, 6760.555555555554], [1.6022442E12, 6768.295238095237], [1.60224228E12, 5845.504132231405], [1.6022439E12, 4944.993197278913], [1.60224258E12, 5245.353383458647], [1.60224288E12, 4388.375757575757], [1.6022427E12, 6080.655737704919], [1.602243E12, 7921.9325842696635], [1.6022436E12, 6103.517543859648], [1.6022433E12, 6329.598290598289], [1.60224372E12, 6961.0291262135925], [1.6022418E12, 7017.333333333335], [1.60224342E12, 10078.849315068494], [1.6022421E12, 7170.752688172042], [1.60224432E12, 7166.986111111111], [1.6022424E12, 6219.043103448277], [1.60224402E12, 5926.74380165289], [1.60224222E12, 4282.664670658682], [1.60224252E12, 5309.021739130436], [1.60224414E12, 4894.412587412587], [1.60224282E12, 7458.9157894736845], [1.60224312E12, 8669.359999999999], [1.60224294E12, 7251.20792079208], [1.60224324E12, 5474.697674418607], [1.60224384E12, 5308.343283582089], [1.60224192E12, 5137.9136690647465], [1.60224354E12, 5207.290780141844], [1.60224396E12, 6400.482142857142], [1.60224204E12, 5091.378571428573], [1.60224366E12, 6734.168224299068], [1.60224234E12, 7335.092783505156], [1.60224264E12, 7150.602040816325], [1.60224426E12, 7236.413461538462], [1.60224246E12, 5175.021276595748], [1.60224276E12, 4854.302013422819], [1.60224336E12, 5368.0], [1.60224306E12, 6541.00917431193], [1.60224348E12, 4269.298850574714], [1.60224318E12, 5926.866666666667], [1.60224408E12, 4466.524999999999], [1.60224186E12, 7884.084210526314], [1.60224216E12, 5739.58695652174], [1.60224378E12, 4985.05442176871]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60224432E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06122448979591836, "minX": 1.6022418E12, "maxY": 1.7272727272727275, "series": [{"data": [[1.60224198E12, 0.14814814814814806], [1.6022442E12, 0.12380952380952384], [1.60224228E12, 0.13223140495867772], [1.6022439E12, 0.06802721088435372], [1.60224258E12, 0.09774436090225566], [1.60224288E12, 0.07878787878787882], [1.6022427E12, 0.11475409836065571], [1.602243E12, 0.07865168539325842], [1.6022436E12, 0.09649122807017543], [1.6022433E12, 0.10256410256410257], [1.60224372E12, 0.07766990291262135], [1.6022418E12, 1.7272727272727275], [1.60224342E12, 0.1643835616438357], [1.6022421E12, 0.15053763440860216], [1.60224432E12, 0.18055555555555564], [1.6022424E12, 0.14655172413793105], [1.60224402E12, 0.09090909090909095], [1.60224222E12, 0.09580838323353294], [1.60224252E12, 0.11594202898550729], [1.60224414E12, 0.07692307692307698], [1.60224282E12, 0.1368421052631579], [1.60224312E12, 0.1733333333333333], [1.60224294E12, 0.10891089108910892], [1.60224324E12, 0.0930232558139535], [1.60224384E12, 0.06716417910447761], [1.60224192E12, 0.1151079136690648], [1.60224354E12, 0.09929078014184403], [1.60224396E12, 0.1071428571428572], [1.60224204E12, 0.10000000000000002], [1.60224366E12, 0.11214953271028041], [1.60224234E12, 0.14432989690721648], [1.60224264E12, 0.163265306122449], [1.60224426E12, 0.12500000000000003], [1.60224246E12, 0.11347517730496458], [1.60224276E12, 0.10067114093959732], [1.60224336E12, 0.12800000000000006], [1.60224306E12, 0.11009174311926608], [1.60224348E12, 0.06896551724137936], [1.60224318E12, 0.09629629629629628], [1.60224408E12, 0.06875000000000006], [1.60224186E12, 0.15789473684210534], [1.60224216E12, 0.10144927536231886], [1.60224378E12, 0.06122448979591836]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60224432E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2142.0, "minX": 1.6022418E12, "maxY": 23411.0, "series": [{"data": [[1.60224198E12, 15117.0], [1.6022442E12, 11140.0], [1.60224228E12, 10375.0], [1.6022439E12, 7640.0], [1.60224258E12, 10418.0], [1.60224288E12, 7849.0], [1.6022427E12, 9022.0], [1.602243E12, 14554.0], [1.6022436E12, 9598.0], [1.6022433E12, 14103.0], [1.60224372E12, 8892.0], [1.6022418E12, 9965.0], [1.60224342E12, 13710.0], [1.6022421E12, 12068.0], [1.60224432E12, 9318.0], [1.6022424E12, 8569.0], [1.60224402E12, 8611.0], [1.60224222E12, 9253.0], [1.60224252E12, 10846.0], [1.60224414E12, 10642.0], [1.60224282E12, 12778.0], [1.60224312E12, 23411.0], [1.60224294E12, 13847.0], [1.60224324E12, 10269.0], [1.60224384E12, 8575.0], [1.60224192E12, 7155.0], [1.60224354E12, 7963.0], [1.60224396E12, 8941.0], [1.60224204E12, 7922.0], [1.60224366E12, 9749.0], [1.60224234E12, 10363.0], [1.60224264E12, 10092.0], [1.60224426E12, 12363.0], [1.60224246E12, 7794.0], [1.60224276E12, 8525.0], [1.60224336E12, 7996.0], [1.60224306E12, 8327.0], [1.60224348E12, 10506.0], [1.60224318E12, 19367.0], [1.60224408E12, 9326.0], [1.60224186E12, 15552.0], [1.60224216E12, 12874.0], [1.60224378E12, 7535.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60224198E12, 3845.0], [1.6022442E12, 3793.0], [1.60224228E12, 3184.6799953460695], [1.6022439E12, 2507.187987332344], [1.60224258E12, 2322.3259993290903], [1.60224288E12, 2296.4939999604226], [1.6022427E12, 4359.90199454546], [1.602243E12, 3672.0], [1.6022436E12, 3367.314999753237], [1.6022433E12, 3452.2139944577216], [1.60224372E12, 5041.0], [1.6022418E12, 3462.0], [1.60224342E12, 5826.0], [1.6022421E12, 3718.0], [1.60224432E12, 5082.0], [1.6022424E12, 3882.988996847868], [1.60224402E12, 4468.879998254776], [1.60224222E12, 2244.535999879837], [1.60224252E12, 2357.7529999005797], [1.60224414E12, 2144.071999759674], [1.60224282E12, 4607.0], [1.60224312E12, 4927.0], [1.60224294E12, 4523.0], [1.60224324E12, 2497.499992251396], [1.60224384E12, 2195.2249995172024], [1.60224192E12, 2230.599999666214], [1.60224354E12, 2608.509998476505], [1.60224396E12, 2722.087998275757], [1.60224204E12, 3345.5959971761704], [1.60224366E12, 4820.0], [1.60224234E12, 4197.0], [1.60224264E12, 4347.0], [1.60224426E12, 3612.0], [1.60224246E12, 2734.4959921455384], [1.60224276E12, 2246.0499998927116], [1.60224336E12, 3458.7379937815667], [1.60224306E12, 3967.0], [1.60224348E12, 2325.0249997079372], [1.60224318E12, 2279.5679997730253], [1.60224408E12, 2273.571998925209], [1.60224186E12, 2251.0], [1.60224216E12, 2326.0079997348785], [1.60224378E12, 2282.3199996471403]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60224198E12, 3848.7177004885675], [1.6022442E12, 3807.6224029922487], [1.60224228E12, 3202.2480018615724], [1.6022439E12, 2555.0068050670625], [1.60224258E12, 2324.858600268364], [1.60224288E12, 2296.643400015831], [1.6022427E12, 4380.4922021818165], [1.602243E12, 3672.0], [1.6022436E12, 3368.2465000987054], [1.6022433E12, 3473.135402216911], [1.60224372E12, 5041.976800327301], [1.6022418E12, 3462.0], [1.60224342E12, 5826.0], [1.6022421E12, 3718.0], [1.60224432E12, 5082.0], [1.6022424E12, 3894.8879012608527], [1.60224402E12, 4475.46800069809], [1.60224222E12, 2244.9896000480653], [1.60224252E12, 2358.1283000397684], [1.60224414E12, 2144.97920009613], [1.60224282E12, 4607.0], [1.60224312E12, 4927.0], [1.60224294E12, 4523.352800350189], [1.60224324E12, 2526.7500030994415], [1.60224384E12, 2197.047500193119], [1.60224192E12, 2231.8600001335144], [1.60224354E12, 2614.261000609398], [1.60224396E12, 2728.5968006896974], [1.60224204E12, 3356.255601129532], [1.60224366E12, 4820.9688001441955], [1.60224234E12, 4197.0], [1.60224264E12, 4347.0], [1.60224426E12, 3616.6610011816024], [1.60224246E12, 2764.1456031417847], [1.60224276E12, 2246.4550000429153], [1.60224336E12, 3482.2118024873735], [1.60224306E12, 3991.475002884865], [1.60224348E12, 2326.127500116825], [1.60224318E12, 2280.4248000907896], [1.60224408E12, 2277.629200429916], [1.60224186E12, 2251.0], [1.60224216E12, 2327.0088001060485], [1.60224378E12, 2283.6520001411436]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60224198E12, 3846.668499389291], [1.6022442E12, 3795.071996259689], [1.60224228E12, 3194.4399976730347], [1.6022439E12, 2533.753993666172], [1.60224258E12, 2323.732999664545], [1.60224288E12, 2296.5769999802114], [1.6022427E12, 4371.3409972727295], [1.602243E12, 3672.0], [1.6022436E12, 3367.8324998766184], [1.6022433E12, 3463.836997228861], [1.60224372E12, 5041.0], [1.6022418E12, 3462.0], [1.60224342E12, 5826.0], [1.6022421E12, 3718.0], [1.60224432E12, 5082.0], [1.6022424E12, 3889.599498423934], [1.60224402E12, 4472.539999127388], [1.60224222E12, 2244.7879999399183], [1.60224252E12, 2357.9614999502896], [1.60224414E12, 2144.575999879837], [1.60224282E12, 4607.0], [1.60224312E12, 4927.0], [1.60224294E12, 4523.0], [1.60224324E12, 2513.749996125698], [1.60224384E12, 2196.237499758601], [1.60224192E12, 2231.299999833107], [1.60224354E12, 2611.7049992382526], [1.60224396E12, 2725.7039991378783], [1.60224204E12, 3351.517998588085], [1.60224366E12, 4820.363999819756], [1.60224234E12, 4197.0], [1.60224264E12, 4347.0], [1.60224426E12, 3612.0], [1.60224246E12, 2750.967996072769], [1.60224276E12, 2246.274999946356], [1.60224336E12, 3471.778996890783], [1.60224306E12, 3979.374996393919], [1.60224348E12, 2325.6374998539686], [1.60224318E12, 2280.0439998865127], [1.60224408E12, 2275.8259994626046], [1.60224186E12, 2251.0], [1.60224216E12, 2326.563999867439], [1.60224378E12, 2283.0599998235703]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60224198E12, 3845.0], [1.6022442E12, 3793.0], [1.60224228E12, 3169.0], [1.6022439E12, 2388.0], [1.60224258E12, 2318.0], [1.60224288E12, 2296.0], [1.6022427E12, 4340.0], [1.602243E12, 3672.0], [1.6022436E12, 3367.0], [1.6022433E12, 3440.0], [1.60224372E12, 5041.0], [1.6022418E12, 3462.0], [1.60224342E12, 5826.0], [1.6022421E12, 3718.0], [1.60224432E12, 5082.0], [1.6022424E12, 3877.0], [1.60224402E12, 4463.0], [1.60224222E12, 2243.0], [1.60224252E12, 2357.0], [1.60224414E12, 2142.0], [1.60224282E12, 4607.0], [1.60224312E12, 4927.0], [1.60224294E12, 4523.0], [1.60224324E12, 2455.0], [1.60224384E12, 2192.0], [1.60224192E12, 2228.0], [1.60224354E12, 2596.0], [1.60224396E12, 2721.0], [1.60224204E12, 3323.0], [1.60224366E12, 4820.0], [1.60224234E12, 4197.0], [1.60224264E12, 4347.0], [1.60224426E12, 3612.0], [1.60224246E12, 2670.0], [1.60224276E12, 2245.0], [1.60224336E12, 3431.0], [1.60224306E12, 3967.0], [1.60224348E12, 2321.0], [1.60224318E12, 2278.0], [1.60224408E12, 2261.0], [1.60224186E12, 2251.0], [1.60224216E12, 2324.0], [1.60224378E12, 2279.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60224198E12, 5867.0], [1.6022442E12, 6412.0], [1.60224228E12, 5476.0], [1.6022439E12, 4675.0], [1.60224258E12, 5134.0], [1.60224288E12, 3776.0], [1.6022427E12, 5823.0], [1.602243E12, 7644.0], [1.6022436E12, 6071.0], [1.6022433E12, 5303.0], [1.60224372E12, 7100.0], [1.6022418E12, 7015.0], [1.60224342E12, 10220.0], [1.6022421E12, 7107.0], [1.60224432E12, 7152.5], [1.6022424E12, 6323.0], [1.60224402E12, 5857.0], [1.60224222E12, 3716.0], [1.60224252E12, 5324.5], [1.60224414E12, 4668.0], [1.60224282E12, 6770.0], [1.60224312E12, 7415.0], [1.60224294E12, 6620.0], [1.60224324E12, 5453.0], [1.60224384E12, 5571.5], [1.60224192E12, 5221.0], [1.60224354E12, 5208.0], [1.60224396E12, 6466.5], [1.60224204E12, 4743.0], [1.60224366E12, 6526.0], [1.60224234E12, 7393.0], [1.60224264E12, 7488.0], [1.60224426E12, 7262.5], [1.60224246E12, 5373.0], [1.60224276E12, 3971.0], [1.60224336E12, 5063.0], [1.60224306E12, 6551.0], [1.60224348E12, 4060.0], [1.60224318E12, 5252.0], [1.60224408E12, 4295.5], [1.60224186E12, 8466.0], [1.60224216E12, 5695.5], [1.60224378E12, 5394.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60224432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2733.5, "minX": 1.0, "maxY": 7021.0, "series": [{"data": [[1.0, 7021.0], [2.0, 6362.0], [4.0, 4784.0], [5.0, 3030.0], [3.0, 5674.0], [6.0, 2733.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 5691.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2733.5, "minX": 1.0, "maxY": 7016.0, "series": [{"data": [[1.0, 7016.0], [2.0, 6361.0], [4.0, 4781.5], [5.0, 3030.0], [3.0, 5673.0], [6.0, 2733.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 5691.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60224174E12, "maxY": 2.9, "series": [{"data": [[1.60224198E12, 1.8], [1.6022442E12, 1.75], [1.60224228E12, 2.0166666666666666], [1.6022439E12, 2.45], [1.60224258E12, 2.216666666666667], [1.60224288E12, 2.75], [1.6022427E12, 2.033333333333333], [1.602243E12, 1.4833333333333334], [1.6022436E12, 1.9], [1.6022433E12, 1.95], [1.60224372E12, 1.7166666666666666], [1.6022418E12, 1.65], [1.60224342E12, 1.2166666666666666], [1.6022421E12, 1.55], [1.60224432E12, 1.0], [1.6022424E12, 1.9333333333333333], [1.60224402E12, 2.0166666666666666], [1.60224222E12, 2.783333333333333], [1.60224252E12, 2.3], [1.60224414E12, 2.3833333333333333], [1.60224282E12, 1.5833333333333333], [1.60224312E12, 1.25], [1.60224294E12, 1.6833333333333333], [1.60224324E12, 2.15], [1.60224384E12, 2.2333333333333334], [1.60224192E12, 2.316666666666667], [1.60224354E12, 2.35], [1.60224174E12, 0.2], [1.60224396E12, 1.8666666666666667], [1.60224204E12, 2.3333333333333335], [1.60224366E12, 1.7833333333333334], [1.60224234E12, 1.6166666666666667], [1.60224264E12, 1.6333333333333333], [1.60224426E12, 1.7333333333333334], [1.60224246E12, 2.35], [1.60224276E12, 2.4833333333333334], [1.60224336E12, 2.0833333333333335], [1.60224306E12, 1.8166666666666667], [1.60224348E12, 2.9], [1.60224318E12, 2.25], [1.60224408E12, 2.6666666666666665], [1.60224186E12, 1.5833333333333333], [1.60224216E12, 2.3], [1.60224378E12, 2.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60224432E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6022418E12, "maxY": 2.9, "series": [{"data": [[1.60224198E12, 1.8], [1.6022442E12, 1.75], [1.60224228E12, 2.0166666666666666], [1.6022439E12, 2.45], [1.60224258E12, 2.216666666666667], [1.60224288E12, 2.75], [1.6022427E12, 2.033333333333333], [1.602243E12, 1.4833333333333334], [1.6022436E12, 1.9], [1.6022433E12, 1.95], [1.60224372E12, 1.7166666666666666], [1.6022418E12, 1.65], [1.60224342E12, 1.2166666666666666], [1.6022421E12, 1.55], [1.60224432E12, 1.2], [1.6022424E12, 1.9333333333333333], [1.60224402E12, 2.0166666666666666], [1.60224222E12, 2.783333333333333], [1.60224252E12, 2.3], [1.60224414E12, 2.3833333333333333], [1.60224282E12, 1.5833333333333333], [1.60224312E12, 1.25], [1.60224294E12, 1.6833333333333333], [1.60224324E12, 2.15], [1.60224384E12, 2.2333333333333334], [1.60224192E12, 2.316666666666667], [1.60224354E12, 2.35], [1.60224396E12, 1.8666666666666667], [1.60224204E12, 2.3333333333333335], [1.60224366E12, 1.7833333333333334], [1.60224234E12, 1.6166666666666667], [1.60224264E12, 1.6166666666666667], [1.60224426E12, 1.7333333333333334], [1.60224246E12, 2.35], [1.60224276E12, 2.4833333333333334], [1.60224336E12, 2.0833333333333335], [1.60224306E12, 1.8166666666666667], [1.60224348E12, 2.9], [1.60224318E12, 2.25], [1.60224408E12, 2.6666666666666665], [1.60224186E12, 1.5833333333333333], [1.60224216E12, 2.3], [1.60224378E12, 2.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60224264E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60224432E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6022418E12, "maxY": 2.9, "series": [{"data": [[1.60224198E12, 1.8], [1.6022442E12, 1.75], [1.60224228E12, 2.0166666666666666], [1.6022439E12, 2.45], [1.60224258E12, 2.216666666666667], [1.60224288E12, 2.75], [1.6022427E12, 2.033333333333333], [1.602243E12, 1.4833333333333334], [1.6022436E12, 1.9], [1.6022433E12, 1.95], [1.60224372E12, 1.7166666666666666], [1.6022418E12, 1.65], [1.60224342E12, 1.2166666666666666], [1.6022421E12, 1.55], [1.60224432E12, 1.2], [1.6022424E12, 1.9333333333333333], [1.60224402E12, 2.0166666666666666], [1.60224222E12, 2.783333333333333], [1.60224252E12, 2.3], [1.60224414E12, 2.3833333333333333], [1.60224282E12, 1.5833333333333333], [1.60224312E12, 1.25], [1.60224294E12, 1.6833333333333333], [1.60224324E12, 2.15], [1.60224384E12, 2.2333333333333334], [1.60224192E12, 2.316666666666667], [1.60224354E12, 2.35], [1.60224396E12, 1.8666666666666667], [1.60224204E12, 2.3333333333333335], [1.60224366E12, 1.7833333333333334], [1.60224234E12, 1.6166666666666667], [1.60224264E12, 1.6166666666666667], [1.60224426E12, 1.7333333333333334], [1.60224246E12, 2.35], [1.60224276E12, 2.4833333333333334], [1.60224336E12, 2.0833333333333335], [1.60224306E12, 1.8166666666666667], [1.60224348E12, 2.9], [1.60224318E12, 2.25], [1.60224408E12, 2.6666666666666665], [1.60224186E12, 1.5833333333333333], [1.60224216E12, 2.3], [1.60224378E12, 2.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60224264E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60224432E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6022418E12, "maxY": 2.9, "series": [{"data": [[1.60224198E12, 1.8], [1.6022442E12, 1.75], [1.60224228E12, 2.0166666666666666], [1.6022439E12, 2.45], [1.60224258E12, 2.216666666666667], [1.60224288E12, 2.75], [1.6022427E12, 2.033333333333333], [1.602243E12, 1.4833333333333334], [1.6022436E12, 1.9], [1.6022433E12, 1.95], [1.60224372E12, 1.7166666666666666], [1.6022418E12, 1.65], [1.60224342E12, 1.2166666666666666], [1.6022421E12, 1.55], [1.60224432E12, 1.2], [1.6022424E12, 1.9333333333333333], [1.60224402E12, 2.0166666666666666], [1.60224222E12, 2.783333333333333], [1.60224252E12, 2.3], [1.60224414E12, 2.3833333333333333], [1.60224282E12, 1.5833333333333333], [1.60224312E12, 1.25], [1.60224294E12, 1.6833333333333333], [1.60224324E12, 2.15], [1.60224384E12, 2.2333333333333334], [1.60224192E12, 2.316666666666667], [1.60224354E12, 2.35], [1.60224396E12, 1.8666666666666667], [1.60224204E12, 2.3333333333333335], [1.60224366E12, 1.7833333333333334], [1.60224234E12, 1.6166666666666667], [1.60224264E12, 1.6166666666666667], [1.60224426E12, 1.7333333333333334], [1.60224246E12, 2.35], [1.60224276E12, 2.4833333333333334], [1.60224336E12, 2.0833333333333335], [1.60224306E12, 1.8166666666666667], [1.60224348E12, 2.9], [1.60224318E12, 2.25], [1.60224408E12, 2.6666666666666665], [1.60224186E12, 1.5833333333333333], [1.60224216E12, 2.3], [1.60224378E12, 2.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60224264E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60224432E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

