/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2169.0, "minX": 0.0, "maxY": 22604.0, "series": [{"data": [[0.0, 2169.0], [0.1, 2187.0], [0.2, 2197.0], [0.3, 2201.0], [0.4, 2215.0], [0.5, 2231.0], [0.6, 2247.0], [0.7, 2273.0], [0.8, 2281.0], [0.9, 2288.0], [1.0, 2294.0], [1.1, 2306.0], [1.2, 2313.0], [1.3, 2319.0], [1.4, 2327.0], [1.5, 2332.0], [1.6, 2339.0], [1.7, 2343.0], [1.8, 2351.0], [1.9, 2358.0], [2.0, 2364.0], [2.1, 2370.0], [2.2, 2376.0], [2.3, 2380.0], [2.4, 2385.0], [2.5, 2392.0], [2.6, 2399.0], [2.7, 2405.0], [2.8, 2410.0], [2.9, 2417.0], [3.0, 2425.0], [3.1, 2431.0], [3.2, 2438.0], [3.3, 2443.0], [3.4, 2448.0], [3.5, 2458.0], [3.6, 2462.0], [3.7, 2468.0], [3.8, 2472.0], [3.9, 2477.0], [4.0, 2486.0], [4.1, 2490.0], [4.2, 2494.0], [4.3, 2501.0], [4.4, 2510.0], [4.5, 2514.0], [4.6, 2521.0], [4.7, 2525.0], [4.8, 2530.0], [4.9, 2536.0], [5.0, 2541.0], [5.1, 2545.0], [5.2, 2549.0], [5.3, 2563.0], [5.4, 2569.0], [5.5, 2577.0], [5.6, 2581.0], [5.7, 2587.0], [5.8, 2600.0], [5.9, 2609.0], [6.0, 2618.0], [6.1, 2621.0], [6.2, 2631.0], [6.3, 2640.0], [6.4, 2659.0], [6.5, 2681.0], [6.6, 2687.0], [6.7, 2710.0], [6.8, 2723.0], [6.9, 2741.0], [7.0, 2775.0], [7.1, 2787.0], [7.2, 2813.0], [7.3, 2822.0], [7.4, 2826.0], [7.5, 2843.0], [7.6, 2851.0], [7.7, 2856.0], [7.8, 2862.0], [7.9, 2876.0], [8.0, 2891.0], [8.1, 2896.0], [8.2, 2900.0], [8.3, 2908.0], [8.4, 2916.0], [8.5, 2930.0], [8.6, 2940.0], [8.7, 2956.0], [8.8, 2963.0], [8.9, 2968.0], [9.0, 2977.0], [9.1, 2988.0], [9.2, 2996.0], [9.3, 3007.0], [9.4, 3017.0], [9.5, 3023.0], [9.6, 3030.0], [9.7, 3037.0], [9.8, 3048.0], [9.9, 3051.0], [10.0, 3064.0], [10.1, 3082.0], [10.2, 3091.0], [10.3, 3096.0], [10.4, 3099.0], [10.5, 3117.0], [10.6, 3125.0], [10.7, 3132.0], [10.8, 3136.0], [10.9, 3154.0], [11.0, 3165.0], [11.1, 3169.0], [11.2, 3176.0], [11.3, 3186.0], [11.4, 3194.0], [11.5, 3200.0], [11.6, 3216.0], [11.7, 3223.0], [11.8, 3232.0], [11.9, 3237.0], [12.0, 3243.0], [12.1, 3248.0], [12.2, 3261.0], [12.3, 3269.0], [12.4, 3274.0], [12.5, 3281.0], [12.6, 3290.0], [12.7, 3310.0], [12.8, 3320.0], [12.9, 3326.0], [13.0, 3346.0], [13.1, 3358.0], [13.2, 3367.0], [13.3, 3373.0], [13.4, 3377.0], [13.5, 3387.0], [13.6, 3394.0], [13.7, 3402.0], [13.8, 3408.0], [13.9, 3412.0], [14.0, 3421.0], [14.1, 3433.0], [14.2, 3440.0], [14.3, 3460.0], [14.4, 3468.0], [14.5, 3479.0], [14.6, 3488.0], [14.7, 3501.0], [14.8, 3513.0], [14.9, 3523.0], [15.0, 3535.0], [15.1, 3553.0], [15.2, 3566.0], [15.3, 3575.0], [15.4, 3590.0], [15.5, 3599.0], [15.6, 3619.0], [15.7, 3635.0], [15.8, 3653.0], [15.9, 3665.0], [16.0, 3675.0], [16.1, 3679.0], [16.2, 3693.0], [16.3, 3708.0], [16.4, 3716.0], [16.5, 3728.0], [16.6, 3750.0], [16.7, 3757.0], [16.8, 3770.0], [16.9, 3785.0], [17.0, 3795.0], [17.1, 3804.0], [17.2, 3809.0], [17.3, 3815.0], [17.4, 3829.0], [17.5, 3832.0], [17.6, 3848.0], [17.7, 3857.0], [17.8, 3861.0], [17.9, 3868.0], [18.0, 3876.0], [18.1, 3885.0], [18.2, 3894.0], [18.3, 3901.0], [18.4, 3905.0], [18.5, 3914.0], [18.6, 3920.0], [18.7, 3929.0], [18.8, 3936.0], [18.9, 3941.0], [19.0, 3959.0], [19.1, 3976.0], [19.2, 3980.0], [19.3, 3991.0], [19.4, 3999.0], [19.5, 4003.0], [19.6, 4013.0], [19.7, 4017.0], [19.8, 4033.0], [19.9, 4042.0], [20.0, 4058.0], [20.1, 4065.0], [20.2, 4075.0], [20.3, 4082.0], [20.4, 4090.0], [20.5, 4099.0], [20.6, 4103.0], [20.7, 4106.0], [20.8, 4115.0], [20.9, 4119.0], [21.0, 4124.0], [21.1, 4137.0], [21.2, 4144.0], [21.3, 4151.0], [21.4, 4156.0], [21.5, 4162.0], [21.6, 4165.0], [21.7, 4172.0], [21.8, 4182.0], [21.9, 4189.0], [22.0, 4201.0], [22.1, 4209.0], [22.2, 4224.0], [22.3, 4231.0], [22.4, 4241.0], [22.5, 4251.0], [22.6, 4258.0], [22.7, 4264.0], [22.8, 4268.0], [22.9, 4281.0], [23.0, 4290.0], [23.1, 4296.0], [23.2, 4311.0], [23.3, 4319.0], [23.4, 4330.0], [23.5, 4340.0], [23.6, 4364.0], [23.7, 4371.0], [23.8, 4378.0], [23.9, 4388.0], [24.0, 4391.0], [24.1, 4395.0], [24.2, 4399.0], [24.3, 4409.0], [24.4, 4412.0], [24.5, 4417.0], [24.6, 4421.0], [24.7, 4423.0], [24.8, 4429.0], [24.9, 4442.0], [25.0, 4446.0], [25.1, 4456.0], [25.2, 4467.0], [25.3, 4482.0], [25.4, 4488.0], [25.5, 4496.0], [25.6, 4501.0], [25.7, 4504.0], [25.8, 4510.0], [25.9, 4515.0], [26.0, 4519.0], [26.1, 4525.0], [26.2, 4528.0], [26.3, 4537.0], [26.4, 4547.0], [26.5, 4550.0], [26.6, 4554.0], [26.7, 4557.0], [26.8, 4565.0], [26.9, 4578.0], [27.0, 4585.0], [27.1, 4589.0], [27.2, 4596.0], [27.3, 4600.0], [27.4, 4608.0], [27.5, 4616.0], [27.6, 4621.0], [27.7, 4627.0], [27.8, 4630.0], [27.9, 4637.0], [28.0, 4644.0], [28.1, 4655.0], [28.2, 4664.0], [28.3, 4673.0], [28.4, 4678.0], [28.5, 4680.0], [28.6, 4686.0], [28.7, 4694.0], [28.8, 4697.0], [28.9, 4703.0], [29.0, 4714.0], [29.1, 4723.0], [29.2, 4735.0], [29.3, 4741.0], [29.4, 4747.0], [29.5, 4758.0], [29.6, 4762.0], [29.7, 4767.0], [29.8, 4775.0], [29.9, 4781.0], [30.0, 4787.0], [30.1, 4792.0], [30.2, 4797.0], [30.3, 4807.0], [30.4, 4813.0], [30.5, 4822.0], [30.6, 4827.0], [30.7, 4834.0], [30.8, 4836.0], [30.9, 4841.0], [31.0, 4846.0], [31.1, 4851.0], [31.2, 4854.0], [31.3, 4862.0], [31.4, 4870.0], [31.5, 4872.0], [31.6, 4879.0], [31.7, 4884.0], [31.8, 4890.0], [31.9, 4892.0], [32.0, 4898.0], [32.1, 4903.0], [32.2, 4911.0], [32.3, 4914.0], [32.4, 4919.0], [32.5, 4926.0], [32.6, 4931.0], [32.7, 4934.0], [32.8, 4939.0], [32.9, 4942.0], [33.0, 4945.0], [33.1, 4952.0], [33.2, 4954.0], [33.3, 4960.0], [33.4, 4963.0], [33.5, 4965.0], [33.6, 4973.0], [33.7, 4979.0], [33.8, 4983.0], [33.9, 4990.0], [34.0, 4996.0], [34.1, 5004.0], [34.2, 5007.0], [34.3, 5014.0], [34.4, 5017.0], [34.5, 5024.0], [34.6, 5028.0], [34.7, 5032.0], [34.8, 5040.0], [34.9, 5048.0], [35.0, 5057.0], [35.1, 5060.0], [35.2, 5065.0], [35.3, 5079.0], [35.4, 5090.0], [35.5, 5096.0], [35.6, 5106.0], [35.7, 5109.0], [35.8, 5117.0], [35.9, 5121.0], [36.0, 5129.0], [36.1, 5132.0], [36.2, 5136.0], [36.3, 5140.0], [36.4, 5144.0], [36.5, 5145.0], [36.6, 5147.0], [36.7, 5155.0], [36.8, 5160.0], [36.9, 5166.0], [37.0, 5168.0], [37.1, 5170.0], [37.2, 5176.0], [37.3, 5178.0], [37.4, 5181.0], [37.5, 5183.0], [37.6, 5190.0], [37.7, 5192.0], [37.8, 5196.0], [37.9, 5203.0], [38.0, 5209.0], [38.1, 5214.0], [38.2, 5216.0], [38.3, 5219.0], [38.4, 5222.0], [38.5, 5231.0], [38.6, 5235.0], [38.7, 5241.0], [38.8, 5249.0], [38.9, 5253.0], [39.0, 5263.0], [39.1, 5270.0], [39.2, 5274.0], [39.3, 5278.0], [39.4, 5282.0], [39.5, 5286.0], [39.6, 5297.0], [39.7, 5300.0], [39.8, 5305.0], [39.9, 5306.0], [40.0, 5313.0], [40.1, 5316.0], [40.2, 5317.0], [40.3, 5322.0], [40.4, 5323.0], [40.5, 5329.0], [40.6, 5334.0], [40.7, 5342.0], [40.8, 5345.0], [40.9, 5352.0], [41.0, 5359.0], [41.1, 5366.0], [41.2, 5371.0], [41.3, 5378.0], [41.4, 5381.0], [41.5, 5382.0], [41.6, 5387.0], [41.7, 5394.0], [41.8, 5400.0], [41.9, 5403.0], [42.0, 5409.0], [42.1, 5412.0], [42.2, 5415.0], [42.3, 5420.0], [42.4, 5422.0], [42.5, 5427.0], [42.6, 5436.0], [42.7, 5442.0], [42.8, 5445.0], [42.9, 5451.0], [43.0, 5456.0], [43.1, 5459.0], [43.2, 5462.0], [43.3, 5467.0], [43.4, 5469.0], [43.5, 5473.0], [43.6, 5477.0], [43.7, 5480.0], [43.8, 5484.0], [43.9, 5488.0], [44.0, 5491.0], [44.1, 5497.0], [44.2, 5501.0], [44.3, 5510.0], [44.4, 5513.0], [44.5, 5516.0], [44.6, 5521.0], [44.7, 5525.0], [44.8, 5529.0], [44.9, 5533.0], [45.0, 5538.0], [45.1, 5540.0], [45.2, 5546.0], [45.3, 5549.0], [45.4, 5551.0], [45.5, 5556.0], [45.6, 5560.0], [45.7, 5563.0], [45.8, 5571.0], [45.9, 5574.0], [46.0, 5579.0], [46.1, 5583.0], [46.2, 5584.0], [46.3, 5587.0], [46.4, 5590.0], [46.5, 5594.0], [46.6, 5595.0], [46.7, 5598.0], [46.8, 5602.0], [46.9, 5608.0], [47.0, 5613.0], [47.1, 5618.0], [47.2, 5620.0], [47.3, 5623.0], [47.4, 5627.0], [47.5, 5629.0], [47.6, 5632.0], [47.7, 5637.0], [47.8, 5640.0], [47.9, 5643.0], [48.0, 5645.0], [48.1, 5650.0], [48.2, 5654.0], [48.3, 5657.0], [48.4, 5660.0], [48.5, 5669.0], [48.6, 5674.0], [48.7, 5676.0], [48.8, 5681.0], [48.9, 5686.0], [49.0, 5690.0], [49.1, 5696.0], [49.2, 5703.0], [49.3, 5707.0], [49.4, 5711.0], [49.5, 5716.0], [49.6, 5719.0], [49.7, 5722.0], [49.8, 5725.0], [49.9, 5729.0], [50.0, 5731.0], [50.1, 5734.0], [50.2, 5739.0], [50.3, 5740.0], [50.4, 5743.0], [50.5, 5747.0], [50.6, 5753.0], [50.7, 5757.0], [50.8, 5761.0], [50.9, 5763.0], [51.0, 5766.0], [51.1, 5768.0], [51.2, 5773.0], [51.3, 5778.0], [51.4, 5780.0], [51.5, 5783.0], [51.6, 5787.0], [51.7, 5793.0], [51.8, 5796.0], [51.9, 5800.0], [52.0, 5805.0], [52.1, 5807.0], [52.2, 5813.0], [52.3, 5817.0], [52.4, 5822.0], [52.5, 5824.0], [52.6, 5828.0], [52.7, 5835.0], [52.8, 5838.0], [52.9, 5841.0], [53.0, 5846.0], [53.1, 5849.0], [53.2, 5853.0], [53.3, 5856.0], [53.4, 5858.0], [53.5, 5860.0], [53.6, 5863.0], [53.7, 5869.0], [53.8, 5871.0], [53.9, 5873.0], [54.0, 5875.0], [54.1, 5881.0], [54.2, 5887.0], [54.3, 5890.0], [54.4, 5893.0], [54.5, 5900.0], [54.6, 5902.0], [54.7, 5906.0], [54.8, 5912.0], [54.9, 5917.0], [55.0, 5920.0], [55.1, 5923.0], [55.2, 5927.0], [55.3, 5934.0], [55.4, 5935.0], [55.5, 5937.0], [55.6, 5940.0], [55.7, 5946.0], [55.8, 5952.0], [55.9, 5957.0], [56.0, 5961.0], [56.1, 5968.0], [56.2, 5971.0], [56.3, 5976.0], [56.4, 5983.0], [56.5, 5992.0], [56.6, 6001.0], [56.7, 6008.0], [56.8, 6010.0], [56.9, 6014.0], [57.0, 6019.0], [57.1, 6028.0], [57.2, 6040.0], [57.3, 6044.0], [57.4, 6050.0], [57.5, 6052.0], [57.6, 6059.0], [57.7, 6064.0], [57.8, 6070.0], [57.9, 6077.0], [58.0, 6084.0], [58.1, 6087.0], [58.2, 6093.0], [58.3, 6099.0], [58.4, 6106.0], [58.5, 6112.0], [58.6, 6118.0], [58.7, 6121.0], [58.8, 6129.0], [58.9, 6135.0], [59.0, 6141.0], [59.1, 6146.0], [59.2, 6151.0], [59.3, 6153.0], [59.4, 6157.0], [59.5, 6167.0], [59.6, 6172.0], [59.7, 6176.0], [59.8, 6182.0], [59.9, 6184.0], [60.0, 6188.0], [60.1, 6191.0], [60.2, 6194.0], [60.3, 6197.0], [60.4, 6201.0], [60.5, 6206.0], [60.6, 6209.0], [60.7, 6217.0], [60.8, 6223.0], [60.9, 6224.0], [61.0, 6229.0], [61.1, 6235.0], [61.2, 6236.0], [61.3, 6244.0], [61.4, 6253.0], [61.5, 6257.0], [61.6, 6261.0], [61.7, 6262.0], [61.8, 6269.0], [61.9, 6278.0], [62.0, 6284.0], [62.1, 6293.0], [62.2, 6297.0], [62.3, 6299.0], [62.4, 6302.0], [62.5, 6305.0], [62.6, 6311.0], [62.7, 6316.0], [62.8, 6322.0], [62.9, 6326.0], [63.0, 6330.0], [63.1, 6335.0], [63.2, 6343.0], [63.3, 6347.0], [63.4, 6353.0], [63.5, 6360.0], [63.6, 6365.0], [63.7, 6368.0], [63.8, 6373.0], [63.9, 6377.0], [64.0, 6389.0], [64.1, 6394.0], [64.2, 6397.0], [64.3, 6401.0], [64.4, 6403.0], [64.5, 6407.0], [64.6, 6410.0], [64.7, 6418.0], [64.8, 6423.0], [64.9, 6427.0], [65.0, 6431.0], [65.1, 6438.0], [65.2, 6443.0], [65.3, 6448.0], [65.4, 6454.0], [65.5, 6458.0], [65.6, 6464.0], [65.7, 6467.0], [65.8, 6475.0], [65.9, 6480.0], [66.0, 6485.0], [66.1, 6488.0], [66.2, 6492.0], [66.3, 6497.0], [66.4, 6503.0], [66.5, 6507.0], [66.6, 6513.0], [66.7, 6518.0], [66.8, 6521.0], [66.9, 6529.0], [67.0, 6534.0], [67.1, 6538.0], [67.2, 6542.0], [67.3, 6546.0], [67.4, 6552.0], [67.5, 6558.0], [67.6, 6563.0], [67.7, 6568.0], [67.8, 6576.0], [67.9, 6583.0], [68.0, 6590.0], [68.1, 6592.0], [68.2, 6594.0], [68.3, 6596.0], [68.4, 6601.0], [68.5, 6604.0], [68.6, 6614.0], [68.7, 6617.0], [68.8, 6624.0], [68.9, 6628.0], [69.0, 6635.0], [69.1, 6638.0], [69.2, 6651.0], [69.3, 6657.0], [69.4, 6665.0], [69.5, 6668.0], [69.6, 6682.0], [69.7, 6685.0], [69.8, 6694.0], [69.9, 6699.0], [70.0, 6703.0], [70.1, 6710.0], [70.2, 6715.0], [70.3, 6718.0], [70.4, 6723.0], [70.5, 6730.0], [70.6, 6737.0], [70.7, 6741.0], [70.8, 6752.0], [70.9, 6754.0], [71.0, 6760.0], [71.1, 6769.0], [71.2, 6776.0], [71.3, 6784.0], [71.4, 6791.0], [71.5, 6799.0], [71.6, 6803.0], [71.7, 6809.0], [71.8, 6818.0], [71.9, 6823.0], [72.0, 6828.0], [72.1, 6835.0], [72.2, 6842.0], [72.3, 6844.0], [72.4, 6849.0], [72.5, 6856.0], [72.6, 6857.0], [72.7, 6864.0], [72.8, 6871.0], [72.9, 6877.0], [73.0, 6886.0], [73.1, 6897.0], [73.2, 6908.0], [73.3, 6913.0], [73.4, 6920.0], [73.5, 6928.0], [73.6, 6935.0], [73.7, 6938.0], [73.8, 6951.0], [73.9, 6960.0], [74.0, 6965.0], [74.1, 6970.0], [74.2, 6973.0], [74.3, 6981.0], [74.4, 6990.0], [74.5, 6999.0], [74.6, 7008.0], [74.7, 7017.0], [74.8, 7028.0], [74.9, 7033.0], [75.0, 7044.0], [75.1, 7048.0], [75.2, 7056.0], [75.3, 7066.0], [75.4, 7071.0], [75.5, 7077.0], [75.6, 7078.0], [75.7, 7086.0], [75.8, 7092.0], [75.9, 7102.0], [76.0, 7105.0], [76.1, 7110.0], [76.2, 7118.0], [76.3, 7120.0], [76.4, 7127.0], [76.5, 7134.0], [76.6, 7141.0], [76.7, 7144.0], [76.8, 7150.0], [76.9, 7156.0], [77.0, 7166.0], [77.1, 7173.0], [77.2, 7176.0], [77.3, 7182.0], [77.4, 7187.0], [77.5, 7191.0], [77.6, 7196.0], [77.7, 7204.0], [77.8, 7205.0], [77.9, 7217.0], [78.0, 7220.0], [78.1, 7222.0], [78.2, 7225.0], [78.3, 7231.0], [78.4, 7239.0], [78.5, 7248.0], [78.6, 7250.0], [78.7, 7253.0], [78.8, 7262.0], [78.9, 7265.0], [79.0, 7275.0], [79.1, 7284.0], [79.2, 7290.0], [79.3, 7296.0], [79.4, 7302.0], [79.5, 7313.0], [79.6, 7317.0], [79.7, 7321.0], [79.8, 7332.0], [79.9, 7338.0], [80.0, 7350.0], [80.1, 7353.0], [80.2, 7365.0], [80.3, 7372.0], [80.4, 7376.0], [80.5, 7387.0], [80.6, 7393.0], [80.7, 7395.0], [80.8, 7404.0], [80.9, 7409.0], [81.0, 7412.0], [81.1, 7422.0], [81.2, 7428.0], [81.3, 7441.0], [81.4, 7448.0], [81.5, 7456.0], [81.6, 7468.0], [81.7, 7478.0], [81.8, 7496.0], [81.9, 7501.0], [82.0, 7513.0], [82.1, 7517.0], [82.2, 7529.0], [82.3, 7535.0], [82.4, 7542.0], [82.5, 7547.0], [82.6, 7557.0], [82.7, 7567.0], [82.8, 7576.0], [82.9, 7581.0], [83.0, 7584.0], [83.1, 7598.0], [83.2, 7612.0], [83.3, 7621.0], [83.4, 7624.0], [83.5, 7630.0], [83.6, 7639.0], [83.7, 7652.0], [83.8, 7658.0], [83.9, 7667.0], [84.0, 7675.0], [84.1, 7684.0], [84.2, 7687.0], [84.3, 7697.0], [84.4, 7707.0], [84.5, 7717.0], [84.6, 7726.0], [84.7, 7737.0], [84.8, 7744.0], [84.9, 7755.0], [85.0, 7766.0], [85.1, 7781.0], [85.2, 7784.0], [85.3, 7790.0], [85.4, 7799.0], [85.5, 7803.0], [85.6, 7816.0], [85.7, 7823.0], [85.8, 7834.0], [85.9, 7845.0], [86.0, 7855.0], [86.1, 7869.0], [86.2, 7880.0], [86.3, 7886.0], [86.4, 7896.0], [86.5, 7909.0], [86.6, 7917.0], [86.7, 7928.0], [86.8, 7934.0], [86.9, 7945.0], [87.0, 7958.0], [87.1, 7965.0], [87.2, 7973.0], [87.3, 7979.0], [87.4, 7995.0], [87.5, 8005.0], [87.6, 8015.0], [87.7, 8029.0], [87.8, 8036.0], [87.9, 8053.0], [88.0, 8063.0], [88.1, 8069.0], [88.2, 8097.0], [88.3, 8115.0], [88.4, 8117.0], [88.5, 8130.0], [88.6, 8142.0], [88.7, 8151.0], [88.8, 8157.0], [88.9, 8171.0], [89.0, 8182.0], [89.1, 8189.0], [89.2, 8207.0], [89.3, 8226.0], [89.4, 8246.0], [89.5, 8267.0], [89.6, 8282.0], [89.7, 8295.0], [89.8, 8308.0], [89.9, 8331.0], [90.0, 8342.0], [90.1, 8367.0], [90.2, 8377.0], [90.3, 8384.0], [90.4, 8394.0], [90.5, 8403.0], [90.6, 8427.0], [90.7, 8438.0], [90.8, 8450.0], [90.9, 8468.0], [91.0, 8484.0], [91.1, 8530.0], [91.2, 8556.0], [91.3, 8567.0], [91.4, 8586.0], [91.5, 8616.0], [91.6, 8628.0], [91.7, 8645.0], [91.8, 8684.0], [91.9, 8704.0], [92.0, 8724.0], [92.1, 8743.0], [92.2, 8784.0], [92.3, 8819.0], [92.4, 8837.0], [92.5, 8865.0], [92.6, 8888.0], [92.7, 8914.0], [92.8, 8944.0], [92.9, 8975.0], [93.0, 9005.0], [93.1, 9029.0], [93.2, 9044.0], [93.3, 9065.0], [93.4, 9102.0], [93.5, 9123.0], [93.6, 9138.0], [93.7, 9159.0], [93.8, 9199.0], [93.9, 9232.0], [94.0, 9241.0], [94.1, 9271.0], [94.2, 9305.0], [94.3, 9342.0], [94.4, 9355.0], [94.5, 9369.0], [94.6, 9404.0], [94.7, 9428.0], [94.8, 9464.0], [94.9, 9496.0], [95.0, 9536.0], [95.1, 9551.0], [95.2, 9616.0], [95.3, 9632.0], [95.4, 9684.0], [95.5, 9755.0], [95.6, 9790.0], [95.7, 9833.0], [95.8, 9912.0], [95.9, 9962.0], [96.0, 9988.0], [96.1, 10052.0], [96.2, 10122.0], [96.3, 10177.0], [96.4, 10196.0], [96.5, 10242.0], [96.6, 10310.0], [96.7, 10354.0], [96.8, 10396.0], [96.9, 10503.0], [97.0, 10560.0], [97.1, 10589.0], [97.2, 10688.0], [97.3, 10751.0], [97.4, 10819.0], [97.5, 10968.0], [97.6, 11114.0], [97.7, 11248.0], [97.8, 11333.0], [97.9, 11521.0], [98.0, 11648.0], [98.1, 11729.0], [98.2, 11800.0], [98.3, 11975.0], [98.4, 12149.0], [98.5, 12256.0], [98.6, 12415.0], [98.7, 12516.0], [98.8, 12612.0], [98.9, 12926.0], [99.0, 13170.0], [99.1, 13355.0], [99.2, 13474.0], [99.3, 13621.0], [99.4, 13752.0], [99.5, 14063.0], [99.6, 14394.0], [99.7, 15135.0], [99.8, 17163.0], [99.9, 18437.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 144.0, "series": [{"data": [[2100.0, 14.0], [2300.0, 81.0], [2200.0, 40.0], [2400.0, 88.0], [2500.0, 77.0], [2600.0, 46.0], [2800.0, 54.0], [2700.0, 24.0], [2900.0, 55.0], [3000.0, 61.0], [3100.0, 55.0], [3200.0, 61.0], [3300.0, 53.0], [3400.0, 53.0], [3500.0, 43.0], [3700.0, 44.0], [3600.0, 36.0], [3800.0, 64.0], [3900.0, 58.0], [4000.0, 57.0], [4200.0, 58.0], [4300.0, 57.0], [4100.0, 77.0], [4500.0, 90.0], [4600.0, 82.0], [4400.0, 70.0], [4800.0, 94.0], [4700.0, 71.0], [5000.0, 77.0], [4900.0, 104.0], [5100.0, 123.0], [5200.0, 91.0], [5300.0, 111.0], [5500.0, 133.0], [5400.0, 124.0], [5600.0, 123.0], [5700.0, 144.0], [5800.0, 135.0], [6100.0, 106.0], [5900.0, 108.0], [6000.0, 90.0], [6200.0, 102.0], [6300.0, 102.0], [6500.0, 106.0], [6600.0, 79.0], [6400.0, 107.0], [6700.0, 83.0], [6800.0, 84.0], [6900.0, 72.0], [7000.0, 72.0], [7100.0, 90.0], [7400.0, 61.0], [7300.0, 70.0], [7200.0, 90.0], [7600.0, 63.0], [7500.0, 63.0], [7700.0, 57.0], [7900.0, 54.0], [7800.0, 52.0], [8100.0, 49.0], [8000.0, 39.0], [8500.0, 22.0], [8400.0, 29.0], [8300.0, 35.0], [8700.0, 21.0], [8600.0, 22.0], [8200.0, 32.0], [8900.0, 17.0], [8800.0, 19.0], [9200.0, 17.0], [9000.0, 23.0], [9100.0, 22.0], [9300.0, 21.0], [9600.0, 13.0], [9400.0, 21.0], [9700.0, 11.0], [9500.0, 11.0], [9800.0, 9.0], [9900.0, 11.0], [10000.0, 6.0], [10200.0, 9.0], [10100.0, 15.0], [10500.0, 12.0], [10700.0, 9.0], [10400.0, 5.0], [10600.0, 4.0], [10300.0, 11.0], [11200.0, 8.0], [11100.0, 3.0], [10800.0, 3.0], [10900.0, 5.0], [11000.0, 2.0], [11700.0, 9.0], [11300.0, 4.0], [11500.0, 4.0], [11600.0, 2.0], [11400.0, 2.0], [11800.0, 5.0], [12100.0, 6.0], [12200.0, 4.0], [12000.0, 2.0], [11900.0, 1.0], [12600.0, 4.0], [12700.0, 1.0], [12500.0, 4.0], [12400.0, 5.0], [12300.0, 3.0], [12800.0, 1.0], [13100.0, 4.0], [12900.0, 2.0], [13300.0, 3.0], [13200.0, 2.0], [13000.0, 3.0], [13600.0, 6.0], [13700.0, 3.0], [13800.0, 1.0], [13400.0, 3.0], [13500.0, 2.0], [14300.0, 1.0], [14200.0, 2.0], [14000.0, 3.0], [14100.0, 1.0], [13900.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [14800.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [15200.0, 1.0], [15600.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17300.0, 2.0], [17600.0, 1.0], [18400.0, 2.0], [17900.0, 1.0], [18500.0, 1.0], [21700.0, 1.0], [21800.0, 1.0], [22600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.624999999999996, "minX": 1.60246734E12, "maxY": 12.0, "series": [{"data": [[1.60246782E12, 12.0], [1.60246812E12, 12.0], [1.60246974E12, 12.0], [1.60246842E12, 12.0], [1.60246872E12, 12.0], [1.60246902E12, 12.0], [1.60246932E12, 12.0], [1.6024674E12, 12.0], [1.6024677E12, 12.0], [1.602468E12, 12.0], [1.60246962E12, 12.0], [1.6024683E12, 12.0], [1.6024686E12, 12.0], [1.6024689E12, 12.0], [1.6024692E12, 12.0], [1.60246758E12, 12.0], [1.6024698E12, 12.0], [1.60246788E12, 12.0], [1.6024695E12, 12.0], [1.60246818E12, 12.0], [1.60246848E12, 12.0], [1.60246878E12, 12.0], [1.60246908E12, 12.0], [1.60246938E12, 12.0], [1.60246746E12, 12.0], [1.60246968E12, 12.0], [1.60246776E12, 12.0], [1.60246806E12, 12.0], [1.60246836E12, 12.0], [1.60246866E12, 12.0], [1.60246896E12, 12.0], [1.60246926E12, 12.0], [1.60246956E12, 12.0], [1.60246764E12, 12.0], [1.60246794E12, 12.0], [1.60246824E12, 12.0], [1.60246986E12, 10.624999999999996], [1.60246854E12, 12.0], [1.60246884E12, 12.0], [1.60246914E12, 12.0], [1.60246734E12, 12.0], [1.60246944E12, 12.0], [1.60246752E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60246986E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4773.0, "minX": 1.0, "maxY": 7127.0, "series": [{"data": [[8.0, 4773.0], [4.0, 7043.0], [2.0, 7127.0], [1.0, 6911.0], [9.0, 5901.0], [10.0, 6190.0], [5.0, 6933.0], [11.0, 6244.0], [12.0, 5862.004827186705], [6.0, 6818.0], [3.0, 7080.0], [7.0, 6712.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5863.401734104035]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 370.05, "minX": 1.60246734E12, "maxY": 820137.9333333333, "series": [{"data": [[1.60246782E12, 530909.6166666667], [1.60246812E12, 741199.5333333333], [1.60246974E12, 558295.7166666667], [1.60246842E12, 489577.2], [1.60246872E12, 491004.56666666665], [1.60246902E12, 341400.18333333335], [1.60246932E12, 606888.85], [1.6024674E12, 684099.2666666667], [1.6024677E12, 402771.13333333336], [1.602468E12, 679997.7], [1.60246962E12, 544762.5666666667], [1.6024683E12, 541325.6], [1.6024686E12, 624612.3666666667], [1.6024689E12, 539718.9666666667], [1.6024692E12, 764964.0], [1.60246758E12, 652960.2166666667], [1.6024698E12, 500726.8333333333], [1.60246788E12, 798798.85], [1.6024695E12, 502718.1], [1.60246818E12, 556826.5166666667], [1.60246848E12, 459702.18333333335], [1.60246878E12, 515441.13333333336], [1.60246908E12, 460895.15], [1.60246938E12, 555507.6166666667], [1.60246746E12, 484076.23333333334], [1.60246968E12, 489341.63333333336], [1.60246776E12, 367890.8], [1.60246806E12, 590108.7166666667], [1.60246836E12, 820137.9333333333], [1.60246866E12, 697550.6833333333], [1.60246896E12, 338954.2833333333], [1.60246926E12, 766821.7], [1.60246956E12, 629300.9833333333], [1.60246764E12, 415652.2833333333], [1.60246794E12, 704452.6166666667], [1.60246824E12, 549057.45], [1.60246986E12, 214076.18333333332], [1.60246854E12, 501287.6666666667], [1.60246884E12, 562523.5166666667], [1.60246914E12, 653067.05], [1.60246734E12, 595315.5], [1.60246944E12, 558904.5333333333], [1.60246752E12, 489051.01666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60246782E12, 886.5666666666667], [1.60246812E12, 984.35], [1.60246974E12, 743.9166666666666], [1.60246842E12, 1252.8333333333333], [1.60246872E12, 1059.0666666666666], [1.60246902E12, 1292.25], [1.60246932E12, 1052.5833333333333], [1.6024674E12, 554.9333333333333], [1.6024677E12, 937.9833333333333], [1.602468E12, 1088.3], [1.60246962E12, 1124.3], [1.6024683E12, 1125.5666666666666], [1.6024686E12, 822.25], [1.6024689E12, 882.5666666666667], [1.6024692E12, 822.85], [1.60246758E12, 1065.65], [1.6024698E12, 773.7166666666667], [1.60246788E12, 752.5], [1.6024695E12, 895.5], [1.60246818E12, 729.8333333333334], [1.60246848E12, 753.6666666666666], [1.60246878E12, 833.0833333333334], [1.60246908E12, 1063.1], [1.60246938E12, 1192.0666666666666], [1.60246746E12, 1077.8666666666666], [1.60246968E12, 1157.3666666666666], [1.60246776E12, 1289.2166666666667], [1.60246806E12, 1057.8166666666666], [1.60246836E12, 753.2666666666667], [1.60246866E12, 529.6166666666667], [1.60246896E12, 607.7833333333333], [1.60246926E12, 837.5], [1.60246956E12, 919.6166666666667], [1.60246764E12, 746.2333333333333], [1.60246794E12, 885.1833333333333], [1.60246824E12, 938.5166666666667], [1.60246986E12, 370.05], [1.60246854E12, 693.0], [1.60246884E12, 890.5], [1.60246914E12, 755.2], [1.60246734E12, 686.1166666666667], [1.60246944E12, 967.7333333333333], [1.60246752E12, 725.3166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60246986E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4098.672316384181, "minX": 1.60246734E12, "maxY": 9413.480000000003, "series": [{"data": [[1.60246782E12, 5689.392000000003], [1.60246812E12, 5426.630769230768], [1.60246974E12, 7269.393939393938], [1.60246842E12, 4327.51497005988], [1.60246872E12, 5071.6959459459495], [1.60246902E12, 4098.672316384181], [1.60246932E12, 5004.834532374102], [1.6024674E12, 9190.141025641024], [1.6024677E12, 5936.96153846154], [1.602468E12, 5119.569444444447], [1.60246962E12, 4690.463087248323], [1.6024683E12, 4871.248322147652], [1.6024686E12, 6599.972222222221], [1.6024689E12, 5836.563025210083], [1.6024692E12, 6722.6203703703695], [1.60246758E12, 5048.57638888889], [1.6024698E12, 6916.182692307692], [1.60246788E12, 7191.878787878787], [1.6024695E12, 6209.949152542371], [1.60246818E12, 7175.525773195875], [1.60246848E12, 7036.366336633663], [1.60246878E12, 5830.899159663864], [1.60246908E12, 4816.846666666665], [1.60246938E12, 4736.411392405064], [1.60246746E12, 4876.065789473684], [1.60246968E12, 4734.137254901961], [1.60246776E12, 4128.76162790698], [1.60246806E12, 5187.949999999999], [1.60246836E12, 7382.520408163264], [1.60246866E12, 9413.480000000003], [1.60246896E12, 8921.71428571429], [1.60246926E12, 6627.654545454546], [1.60246956E12, 6030.483333333334], [1.60246764E12, 6715.166666666665], [1.60246794E12, 6206.155172413795], [1.60246824E12, 6028.975409836067], [1.60246986E12, 6967.416666666665], [1.60246854E12, 7884.173913043478], [1.60246884E12, 5958.487804878052], [1.60246914E12, 6898.871287128714], [1.60246734E12, 6569.155555555556], [1.60246944E12, 5489.511811023619], [1.60246752E12, 6686.161904761903]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60246986E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4097.966101694913, "minX": 1.60246734E12, "maxY": 9409.386666666665, "series": [{"data": [[1.60246782E12, 5687.296], [1.60246812E12, 5424.130769230767], [1.60246974E12, 7267.474747474748], [1.60246842E12, 4326.215568862274], [1.60246872E12, 5070.168918918919], [1.60246902E12, 4097.966101694913], [1.60246932E12, 5003.237410071943], [1.6024674E12, 9186.102564102557], [1.6024677E12, 5935.538461538464], [1.602468E12, 5117.3958333333285], [1.60246962E12, 4689.174496644296], [1.6024683E12, 4869.684563758392], [1.6024686E12, 6597.379629629628], [1.6024689E12, 5834.983193277311], [1.6024692E12, 6720.055555555553], [1.60246758E12, 5046.479166666667], [1.6024698E12, 6914.442307692309], [1.60246788E12, 7188.1919191919205], [1.6024695E12, 6208.381355932203], [1.60246818E12, 7172.886597938144], [1.60246848E12, 7034.277227722771], [1.60246878E12, 5828.61344537815], [1.60246908E12, 4815.586666666669], [1.60246938E12, 4735.183544303799], [1.60246746E12, 4874.519736842106], [1.60246968E12, 4732.8888888888905], [1.60246776E12, 4127.78488372093], [1.60246806E12, 5186.099999999999], [1.60246836E12, 7378.765306122451], [1.60246866E12, 9409.386666666665], [1.60246896E12, 8920.214285714283], [1.60246926E12, 6625.318181818181], [1.60246956E12, 6028.533333333333], [1.60246764E12, 6713.137254901959], [1.60246794E12, 6203.327586206896], [1.60246824E12, 6026.811475409838], [1.60246986E12, 6965.604166666665], [1.60246854E12, 7881.63043478261], [1.60246884E12, 5956.626016260162], [1.60246914E12, 6896.465346534655], [1.60246734E12, 6566.355555555556], [1.60246944E12, 5487.724409448816], [1.60246752E12, 6683.9047619047615]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60246986E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03355704697986574, "minX": 1.60246734E12, "maxY": 1.3999999999999997, "series": [{"data": [[1.60246782E12, 0.12800000000000003], [1.60246812E12, 0.053846153846153856], [1.60246974E12, 0.11111111111111113], [1.60246842E12, 0.08982035928143715], [1.60246872E12, 0.0810810810810811], [1.60246902E12, 0.07344632768361581], [1.60246932E12, 0.08633093525179858], [1.6024674E12, 0.19230769230769237], [1.6024677E12, 0.11538461538461545], [1.602468E12, 0.10416666666666669], [1.60246962E12, 0.03355704697986574], [1.6024683E12, 0.06711409395973154], [1.6024686E12, 0.09259259259259255], [1.6024689E12, 0.06722689075630253], [1.6024692E12, 0.12037037037037039], [1.60246758E12, 0.1041666666666667], [1.6024698E12, 0.1057692307692308], [1.60246788E12, 0.1212121212121212], [1.6024695E12, 0.09322033898305082], [1.60246818E12, 0.13402061855670105], [1.60246848E12, 0.09900990099009899], [1.60246878E12, 0.10084033613445384], [1.60246908E12, 0.09333333333333332], [1.60246938E12, 0.06962025316455697], [1.60246746E12, 0.11842105263157897], [1.60246968E12, 0.05882352941176472], [1.60246776E12, 0.07558139534883725], [1.60246806E12, 0.08571428571428573], [1.60246836E12, 0.10204081632653063], [1.60246866E12, 0.17333333333333337], [1.60246896E12, 0.15476190476190477], [1.60246926E12, 0.11818181818181818], [1.60246956E12, 0.09166666666666665], [1.60246764E12, 0.14705882352941183], [1.60246794E12, 0.14655172413793105], [1.60246824E12, 0.10655737704918034], [1.60246986E12, 0.14583333333333337], [1.60246854E12, 0.13043478260869573], [1.60246884E12, 0.07317073170731704], [1.60246914E12, 0.09900990099009904], [1.60246734E12, 1.3999999999999997], [1.60246944E12, 0.08661417322834646], [1.60246752E12, 0.11428571428571435]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60246986E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2169.0, "minX": 1.60246734E12, "maxY": 22604.0, "series": [{"data": [[1.60246782E12, 10390.0], [1.60246812E12, 10191.0], [1.60246974E12, 12293.0], [1.60246842E12, 7709.0], [1.60246872E12, 9148.0], [1.60246902E12, 6637.0], [1.60246932E12, 7558.0], [1.6024674E12, 15692.0], [1.6024677E12, 12149.0], [1.602468E12, 7744.0], [1.60246962E12, 10473.0], [1.6024683E12, 8433.0], [1.6024686E12, 8350.0], [1.6024689E12, 13474.0], [1.6024692E12, 9513.0], [1.60246758E12, 7781.0], [1.6024698E12, 11114.0], [1.60246788E12, 10396.0], [1.6024695E12, 8972.0], [1.60246818E12, 9943.0], [1.60246848E12, 14089.0], [1.60246878E12, 10900.0], [1.60246908E12, 8080.0], [1.60246938E12, 8621.0], [1.60246746E12, 6950.0], [1.60246968E12, 9794.0], [1.60246776E12, 9267.0], [1.60246806E12, 10849.0], [1.60246836E12, 12776.0], [1.60246866E12, 22604.0], [1.60246896E12, 13500.0], [1.60246926E12, 9050.0], [1.60246956E12, 8949.0], [1.60246764E12, 10753.0], [1.60246794E12, 8450.0], [1.60246824E12, 8942.0], [1.60246986E12, 9414.0], [1.60246854E12, 14470.0], [1.60246884E12, 13932.0], [1.60246914E12, 9820.0], [1.60246734E12, 9329.0], [1.60246944E12, 8632.0], [1.60246752E12, 15149.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60246782E12, 3196.8719937515257], [1.60246812E12, 2387.221999437809], [1.60246974E12, 3876.0], [1.60246842E12, 2243.799998998642], [1.60246872E12, 2332.45599943161], [1.60246902E12, 2199.6019999575615], [1.60246932E12, 2427.8599996328353], [1.6024674E12, 4684.0], [1.6024677E12, 2194.178999968767], [1.602468E12, 2617.894991737604], [1.60246962E12, 2455.399999856949], [1.6024683E12, 2352.0499998927116], [1.6024686E12, 3877.0], [1.6024689E12, 3616.91999502182], [1.6024692E12, 4791.0], [1.60246758E12, 3251.319999170303], [1.6024698E12, 3532.0], [1.60246788E12, 4094.0], [1.6024695E12, 2899.709999716282], [1.60246818E12, 4285.0], [1.60246848E12, 3604.0], [1.60246878E12, 2374.3999919891357], [1.60246908E12, 2465.589999639988], [1.60246938E12, 2329.585999772549], [1.60246746E12, 2345.2109984314443], [1.60246968E12, 2172.0879997062684], [1.60246776E12, 2246.5959988451004], [1.60246806E12, 2283.6139997982978], [1.60246836E12, 4984.0], [1.60246866E12, 4434.0], [1.60246896E12, 4078.0], [1.60246926E12, 3388.0], [1.60246956E12, 4200.344996970892], [1.60246764E12, 3640.0], [1.60246794E12, 4015.458997126818], [1.60246824E12, 4347.543994369506], [1.60246986E12, 4773.0], [1.60246854E12, 4457.0], [1.60246884E12, 3562.51199757576], [1.60246914E12, 3468.0], [1.60246734E12, 3201.0], [1.60246944E12, 2393.735988006592], [1.60246752E12, 3517.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60246782E12, 3220.4592024993894], [1.60246812E12, 2389.344200224876], [1.60246974E12, 3876.0], [1.60246842E12, 2247.580000400543], [1.60246872E12, 2334.601600227356], [1.60246902E12, 2199.7622000169754], [1.60246932E12, 2429.2460001468658], [1.6024674E12, 4684.0], [1.6024677E12, 2194.296900012493], [1.602468E12, 2649.084503304958], [1.60246962E12, 2455.9400000572205], [1.6024683E12, 2352.4550000429153], [1.6024686E12, 3900.3345030665396], [1.6024689E12, 3635.712001991272], [1.6024692E12, 4792.661100218296], [1.60246758E12, 3254.4520003318785], [1.6024698E12, 3536.819001221657], [1.60246788E12, 4094.0], [1.6024695E12, 2900.781000113487], [1.60246818E12, 4285.0], [1.60246848E12, 3604.7154007101058], [1.60246878E12, 2404.6400032043457], [1.60246908E12, 2466.949000144005], [1.60246938E12, 2330.4446000909807], [1.60246746E12, 2351.1321006274225], [1.60246968E12, 2173.196800117493], [1.60246776E12, 2250.95560046196], [1.60246806E12, 2284.3754000806807], [1.60246836E12, 4984.0], [1.60246866E12, 4434.0], [1.60246896E12, 4078.0], [1.60246926E12, 3399.373501217365], [1.60246956E12, 4211.779501211643], [1.60246764E12, 3640.7486003732683], [1.60246794E12, 4026.304901149273], [1.60246824E12, 4368.798402252197], [1.60246986E12, 4773.0], [1.60246854E12, 4457.0], [1.60246884E12, 3571.663200969696], [1.60246914E12, 3469.6954016828536], [1.60246734E12, 3201.0], [1.60246944E12, 2439.0096047973634], [1.60246752E12, 3532.215203113556]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60246782E12, 3209.975996875763], [1.60246812E12, 2388.4009997189046], [1.60246974E12, 3876.0], [1.60246842E12, 2245.899999499321], [1.60246872E12, 2333.647999715805], [1.60246902E12, 2199.690999978781], [1.60246932E12, 2428.6299998164177], [1.6024674E12, 4684.0], [1.6024677E12, 2194.2444999843838], [1.602468E12, 2635.222495868802], [1.60246962E12, 2455.6999999284744], [1.6024683E12, 2352.274999946356], [1.6024686E12, 3887.4724961668253], [1.6024689E12, 3627.35999751091], [1.6024692E12, 4791.74549972713], [1.60246758E12, 3253.0599995851517], [1.6024698E12, 3532.0], [1.60246788E12, 4094.0], [1.6024695E12, 2900.304999858141], [1.60246818E12, 4285.0], [1.60246848E12, 3604.0], [1.60246878E12, 2391.199995994568], [1.60246908E12, 2466.344999819994], [1.60246938E12, 2330.062999886274], [1.60246746E12, 2348.500499215722], [1.60246968E12, 2172.703999853134], [1.60246776E12, 2249.01799942255], [1.60246806E12, 2284.036999899149], [1.60246836E12, 4984.0], [1.60246866E12, 4434.0], [1.60246896E12, 4078.0], [1.60246926E12, 3394.2674984782934], [1.60246956E12, 4206.697498485446], [1.60246764E12, 3640.0], [1.60246794E12, 4021.484498563409], [1.60246824E12, 4359.351997184754], [1.60246986E12, 4773.0], [1.60246854E12, 4457.0], [1.60246884E12, 3567.59599878788], [1.60246914E12, 3468.0], [1.60246734E12, 3201.0], [1.60246944E12, 2418.8879940032957], [1.60246752E12, 3519.155996108055]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60246782E12, 3169.0], [1.60246812E12, 2384.0], [1.60246974E12, 3876.0], [1.60246842E12, 2231.0], [1.60246872E12, 2327.0], [1.60246902E12, 2199.0], [1.60246932E12, 2425.0], [1.6024674E12, 4684.0], [1.6024677E12, 2194.0], [1.602468E12, 2545.0], [1.60246962E12, 2454.0], [1.6024683E12, 2351.0], [1.6024686E12, 3877.0], [1.6024689E12, 3603.0], [1.6024692E12, 4791.0], [1.60246758E12, 3244.0], [1.6024698E12, 3532.0], [1.60246788E12, 4094.0], [1.6024695E12, 2899.0], [1.60246818E12, 4285.0], [1.60246848E12, 3604.0], [1.60246878E12, 2352.0], [1.60246908E12, 2462.0], [1.60246938E12, 2327.0], [1.60246746E12, 2329.0], [1.60246968E12, 2169.0], [1.60246776E12, 2231.0], [1.60246806E12, 2282.0], [1.60246836E12, 4984.0], [1.60246866E12, 4434.0], [1.60246896E12, 4078.0], [1.60246926E12, 3388.0], [1.60246956E12, 4191.0], [1.60246764E12, 3640.0], [1.60246794E12, 4010.0], [1.60246824E12, 4327.0], [1.60246986E12, 4773.0], [1.60246854E12, 4457.0], [1.60246884E12, 3553.0], [1.60246914E12, 3468.0], [1.60246734E12, 3201.0], [1.60246944E12, 2334.0], [1.60246752E12, 3517.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60246782E12, 5442.0], [1.60246812E12, 5250.5], [1.60246974E12, 6802.0], [1.60246842E12, 3773.0], [1.60246872E12, 5171.5], [1.60246902E12, 4319.0], [1.60246932E12, 5433.0], [1.6024674E12, 8891.5], [1.6024677E12, 5646.5], [1.602468E12, 5259.5], [1.60246962E12, 3756.0], [1.6024683E12, 4002.0], [1.6024686E12, 6605.0], [1.6024689E12, 5145.0], [1.6024692E12, 6738.0], [1.60246758E12, 4797.5], [1.6024698E12, 6997.0], [1.60246788E12, 7249.0], [1.6024695E12, 6223.5], [1.60246818E12, 7473.0], [1.60246848E12, 6466.0], [1.60246878E12, 5632.0], [1.60246908E12, 4696.0], [1.60246938E12, 4575.0], [1.60246746E12, 5031.0], [1.60246968E12, 4866.0], [1.60246776E12, 3566.5], [1.60246806E12, 5318.5], [1.60246836E12, 6695.5], [1.60246866E12, 7508.0], [1.60246896E12, 9031.0], [1.60246926E12, 6583.0], [1.60246956E12, 5883.0], [1.60246764E12, 6367.5], [1.60246794E12, 6349.0], [1.60246824E12, 5765.5], [1.60246986E12, 6922.0], [1.60246854E12, 7399.0], [1.60246884E12, 5194.0], [1.60246914E12, 7098.0], [1.60246734E12, 6705.5], [1.60246944E12, 5855.0], [1.60246752E12, 5631.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60246986E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2598.5, "minX": 1.0, "maxY": 6883.0, "series": [{"data": [[1.0, 6883.0], [2.0, 6229.0], [4.0, 4569.5], [5.0, 3094.0], [3.0, 5712.0], [6.0, 2598.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2598.5, "minX": 1.0, "maxY": 6881.5, "series": [{"data": [[1.0, 6881.5], [2.0, 6225.5], [4.0, 4567.0], [5.0, 3094.0], [3.0, 5710.0], [6.0, 2598.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.60246734E12, "maxY": 2.95, "series": [{"data": [[1.60246782E12, 2.0833333333333335], [1.60246812E12, 2.1666666666666665], [1.60246974E12, 1.65], [1.60246842E12, 2.783333333333333], [1.60246872E12, 2.466666666666667], [1.60246902E12, 2.95], [1.60246932E12, 2.316666666666667], [1.6024674E12, 1.3], [1.6024677E12, 2.1666666666666665], [1.602468E12, 2.4], [1.60246962E12, 2.4833333333333334], [1.6024683E12, 2.4833333333333334], [1.6024686E12, 1.8], [1.6024689E12, 1.9833333333333334], [1.6024692E12, 1.8], [1.60246758E12, 2.4], [1.6024698E12, 1.7333333333333334], [1.60246788E12, 1.65], [1.6024695E12, 1.9666666666666666], [1.60246818E12, 1.6166666666666667], [1.60246848E12, 1.6833333333333333], [1.60246878E12, 1.9833333333333334], [1.60246908E12, 2.5], [1.60246938E12, 2.6333333333333333], [1.60246746E12, 2.533333333333333], [1.60246968E12, 2.55], [1.60246776E12, 2.8666666666666667], [1.60246806E12, 2.3333333333333335], [1.60246836E12, 1.6333333333333333], [1.60246866E12, 1.25], [1.60246896E12, 1.4], [1.60246926E12, 1.8333333333333333], [1.60246956E12, 2.0], [1.60246764E12, 1.7], [1.60246794E12, 1.9333333333333333], [1.60246824E12, 2.033333333333333], [1.60246986E12, 0.6], [1.60246854E12, 1.5333333333333334], [1.60246884E12, 2.05], [1.60246914E12, 1.6833333333333333], [1.60246734E12, 1.7], [1.60246944E12, 2.1166666666666667], [1.60246752E12, 1.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60246986E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.60246734E12, "maxY": 2.95, "series": [{"data": [[1.60246782E12, 2.0833333333333335], [1.60246812E12, 2.1666666666666665], [1.60246974E12, 1.65], [1.60246842E12, 2.783333333333333], [1.60246872E12, 2.466666666666667], [1.60246902E12, 2.95], [1.60246932E12, 2.316666666666667], [1.6024674E12, 1.3], [1.6024677E12, 2.1666666666666665], [1.602468E12, 2.4], [1.60246962E12, 2.4833333333333334], [1.6024683E12, 2.4833333333333334], [1.6024686E12, 1.8], [1.6024689E12, 1.9833333333333334], [1.6024692E12, 1.8], [1.60246758E12, 2.4], [1.6024698E12, 1.7333333333333334], [1.60246788E12, 1.65], [1.6024695E12, 1.9666666666666666], [1.60246818E12, 1.6166666666666667], [1.60246848E12, 1.6833333333333333], [1.60246878E12, 1.9833333333333334], [1.60246908E12, 2.5], [1.60246938E12, 2.6333333333333333], [1.60246746E12, 2.533333333333333], [1.60246968E12, 2.55], [1.60246776E12, 2.8666666666666667], [1.60246806E12, 2.3333333333333335], [1.60246836E12, 1.6333333333333333], [1.60246866E12, 1.25], [1.60246896E12, 1.4], [1.60246926E12, 1.8333333333333333], [1.60246956E12, 2.0], [1.60246764E12, 1.7], [1.60246794E12, 1.9333333333333333], [1.60246824E12, 2.033333333333333], [1.60246986E12, 0.8], [1.60246854E12, 1.5333333333333334], [1.60246884E12, 2.05], [1.60246914E12, 1.6833333333333333], [1.60246734E12, 1.5], [1.60246944E12, 2.1166666666666667], [1.60246752E12, 1.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60246986E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.60246734E12, "maxY": 2.95, "series": [{"data": [[1.60246782E12, 2.0833333333333335], [1.60246812E12, 2.1666666666666665], [1.60246974E12, 1.65], [1.60246842E12, 2.783333333333333], [1.60246872E12, 2.466666666666667], [1.60246902E12, 2.95], [1.60246932E12, 2.316666666666667], [1.6024674E12, 1.3], [1.6024677E12, 2.1666666666666665], [1.602468E12, 2.4], [1.60246962E12, 2.4833333333333334], [1.6024683E12, 2.4833333333333334], [1.6024686E12, 1.8], [1.6024689E12, 1.9833333333333334], [1.6024692E12, 1.8], [1.60246758E12, 2.4], [1.6024698E12, 1.7333333333333334], [1.60246788E12, 1.65], [1.6024695E12, 1.9666666666666666], [1.60246818E12, 1.6166666666666667], [1.60246848E12, 1.6833333333333333], [1.60246878E12, 1.9833333333333334], [1.60246908E12, 2.5], [1.60246938E12, 2.6333333333333333], [1.60246746E12, 2.533333333333333], [1.60246968E12, 2.55], [1.60246776E12, 2.8666666666666667], [1.60246806E12, 2.3333333333333335], [1.60246836E12, 1.6333333333333333], [1.60246866E12, 1.25], [1.60246896E12, 1.4], [1.60246926E12, 1.8333333333333333], [1.60246956E12, 2.0], [1.60246764E12, 1.7], [1.60246794E12, 1.9333333333333333], [1.60246824E12, 2.033333333333333], [1.60246986E12, 0.8], [1.60246854E12, 1.5333333333333334], [1.60246884E12, 2.05], [1.60246914E12, 1.6833333333333333], [1.60246734E12, 1.5], [1.60246944E12, 2.1166666666666667], [1.60246752E12, 1.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60246986E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.60246734E12, "maxY": 2.95, "series": [{"data": [[1.60246782E12, 2.0833333333333335], [1.60246812E12, 2.1666666666666665], [1.60246974E12, 1.65], [1.60246842E12, 2.783333333333333], [1.60246872E12, 2.466666666666667], [1.60246902E12, 2.95], [1.60246932E12, 2.316666666666667], [1.6024674E12, 1.3], [1.6024677E12, 2.1666666666666665], [1.602468E12, 2.4], [1.60246962E12, 2.4833333333333334], [1.6024683E12, 2.4833333333333334], [1.6024686E12, 1.8], [1.6024689E12, 1.9833333333333334], [1.6024692E12, 1.8], [1.60246758E12, 2.4], [1.6024698E12, 1.7333333333333334], [1.60246788E12, 1.65], [1.6024695E12, 1.9666666666666666], [1.60246818E12, 1.6166666666666667], [1.60246848E12, 1.6833333333333333], [1.60246878E12, 1.9833333333333334], [1.60246908E12, 2.5], [1.60246938E12, 2.6333333333333333], [1.60246746E12, 2.533333333333333], [1.60246968E12, 2.55], [1.60246776E12, 2.8666666666666667], [1.60246806E12, 2.3333333333333335], [1.60246836E12, 1.6333333333333333], [1.60246866E12, 1.25], [1.60246896E12, 1.4], [1.60246926E12, 1.8333333333333333], [1.60246956E12, 2.0], [1.60246764E12, 1.7], [1.60246794E12, 1.9333333333333333], [1.60246824E12, 2.033333333333333], [1.60246986E12, 0.8], [1.60246854E12, 1.5333333333333334], [1.60246884E12, 2.05], [1.60246914E12, 1.6833333333333333], [1.60246734E12, 1.5], [1.60246944E12, 2.1166666666666667], [1.60246752E12, 1.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60246986E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

