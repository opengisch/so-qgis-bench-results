/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2083.0, "minX": 0.0, "maxY": 22461.0, "series": [{"data": [[0.0, 2083.0], [0.1, 2109.0], [0.2, 2119.0], [0.3, 2127.0], [0.4, 2132.0], [0.5, 2139.0], [0.6, 2145.0], [0.7, 2152.0], [0.8, 2160.0], [0.9, 2165.0], [1.0, 2176.0], [1.1, 2194.0], [1.2, 2202.0], [1.3, 2204.0], [1.4, 2212.0], [1.5, 2215.0], [1.6, 2225.0], [1.7, 2229.0], [1.8, 2232.0], [1.9, 2234.0], [2.0, 2239.0], [2.1, 2242.0], [2.2, 2251.0], [2.3, 2257.0], [2.4, 2263.0], [2.5, 2272.0], [2.6, 2276.0], [2.7, 2294.0], [2.8, 2299.0], [2.9, 2304.0], [3.0, 2305.0], [3.1, 2312.0], [3.2, 2319.0], [3.3, 2327.0], [3.4, 2335.0], [3.5, 2338.0], [3.6, 2352.0], [3.7, 2359.0], [3.8, 2366.0], [3.9, 2370.0], [4.0, 2377.0], [4.1, 2385.0], [4.2, 2391.0], [4.3, 2396.0], [4.4, 2397.0], [4.5, 2397.0], [4.6, 2406.0], [4.7, 2416.0], [4.8, 2424.0], [4.9, 2441.0], [5.0, 2451.0], [5.1, 2463.0], [5.2, 2469.0], [5.3, 2481.0], [5.4, 2487.0], [5.5, 2500.0], [5.6, 2519.0], [5.7, 2537.0], [5.8, 2564.0], [5.9, 2583.0], [6.0, 2592.0], [6.1, 2613.0], [6.2, 2625.0], [6.3, 2639.0], [6.4, 2652.0], [6.5, 2664.0], [6.6, 2675.0], [6.7, 2676.0], [6.8, 2682.0], [6.9, 2696.0], [7.0, 2709.0], [7.1, 2716.0], [7.2, 2720.0], [7.3, 2731.0], [7.4, 2737.0], [7.5, 2739.0], [7.6, 2749.0], [7.7, 2755.0], [7.8, 2768.0], [7.9, 2782.0], [8.0, 2789.0], [8.1, 2801.0], [8.2, 2809.0], [8.3, 2818.0], [8.4, 2823.0], [8.5, 2832.0], [8.6, 2839.0], [8.7, 2851.0], [8.8, 2859.0], [8.9, 2866.0], [9.0, 2871.0], [9.1, 2880.0], [9.2, 2886.0], [9.3, 2893.0], [9.4, 2898.0], [9.5, 2907.0], [9.6, 2911.0], [9.7, 2923.0], [9.8, 2941.0], [9.9, 2959.0], [10.0, 2968.0], [10.1, 2979.0], [10.2, 3007.0], [10.3, 3013.0], [10.4, 3025.0], [10.5, 3049.0], [10.6, 3066.0], [10.7, 3071.0], [10.8, 3082.0], [10.9, 3094.0], [11.0, 3113.0], [11.1, 3118.0], [11.2, 3128.0], [11.3, 3136.0], [11.4, 3142.0], [11.5, 3150.0], [11.6, 3167.0], [11.7, 3182.0], [11.8, 3194.0], [11.9, 3204.0], [12.0, 3218.0], [12.1, 3223.0], [12.2, 3233.0], [12.3, 3237.0], [12.4, 3247.0], [12.5, 3251.0], [12.6, 3262.0], [12.7, 3279.0], [12.8, 3289.0], [12.9, 3298.0], [13.0, 3303.0], [13.1, 3311.0], [13.2, 3320.0], [13.3, 3330.0], [13.4, 3336.0], [13.5, 3340.0], [13.6, 3347.0], [13.7, 3351.0], [13.8, 3357.0], [13.9, 3361.0], [14.0, 3367.0], [14.1, 3375.0], [14.2, 3382.0], [14.3, 3401.0], [14.4, 3408.0], [14.5, 3416.0], [14.6, 3423.0], [14.7, 3438.0], [14.8, 3444.0], [14.9, 3453.0], [15.0, 3469.0], [15.1, 3473.0], [15.2, 3496.0], [15.3, 3506.0], [15.4, 3524.0], [15.5, 3536.0], [15.6, 3540.0], [15.7, 3558.0], [15.8, 3567.0], [15.9, 3583.0], [16.0, 3589.0], [16.1, 3605.0], [16.2, 3612.0], [16.3, 3625.0], [16.4, 3639.0], [16.5, 3650.0], [16.6, 3663.0], [16.7, 3668.0], [16.8, 3681.0], [16.9, 3696.0], [17.0, 3703.0], [17.1, 3722.0], [17.2, 3729.0], [17.3, 3751.0], [17.4, 3768.0], [17.5, 3779.0], [17.6, 3794.0], [17.7, 3810.0], [17.8, 3818.0], [17.9, 3828.0], [18.0, 3835.0], [18.1, 3839.0], [18.2, 3848.0], [18.3, 3863.0], [18.4, 3867.0], [18.5, 3875.0], [18.6, 3879.0], [18.7, 3882.0], [18.8, 3891.0], [18.9, 3902.0], [19.0, 3911.0], [19.1, 3916.0], [19.2, 3925.0], [19.3, 3930.0], [19.4, 3937.0], [19.5, 3951.0], [19.6, 3955.0], [19.7, 3961.0], [19.8, 3965.0], [19.9, 3978.0], [20.0, 3993.0], [20.1, 3995.0], [20.2, 4001.0], [20.3, 4006.0], [20.4, 4011.0], [20.5, 4023.0], [20.6, 4032.0], [20.7, 4037.0], [20.8, 4041.0], [20.9, 4052.0], [21.0, 4062.0], [21.1, 4067.0], [21.2, 4074.0], [21.3, 4086.0], [21.4, 4091.0], [21.5, 4102.0], [21.6, 4116.0], [21.7, 4124.0], [21.8, 4130.0], [21.9, 4145.0], [22.0, 4149.0], [22.1, 4155.0], [22.2, 4158.0], [22.3, 4164.0], [22.4, 4173.0], [22.5, 4179.0], [22.6, 4190.0], [22.7, 4193.0], [22.8, 4198.0], [22.9, 4203.0], [23.0, 4218.0], [23.1, 4223.0], [23.2, 4236.0], [23.3, 4241.0], [23.4, 4251.0], [23.5, 4263.0], [23.6, 4273.0], [23.7, 4284.0], [23.8, 4291.0], [23.9, 4300.0], [24.0, 4307.0], [24.1, 4321.0], [24.2, 4330.0], [24.3, 4343.0], [24.4, 4355.0], [24.5, 4361.0], [24.6, 4370.0], [24.7, 4377.0], [24.8, 4386.0], [24.9, 4395.0], [25.0, 4407.0], [25.1, 4411.0], [25.2, 4419.0], [25.3, 4424.0], [25.4, 4428.0], [25.5, 4437.0], [25.6, 4440.0], [25.7, 4449.0], [25.8, 4455.0], [25.9, 4458.0], [26.0, 4464.0], [26.1, 4472.0], [26.2, 4483.0], [26.3, 4487.0], [26.4, 4493.0], [26.5, 4500.0], [26.6, 4505.0], [26.7, 4510.0], [26.8, 4520.0], [26.9, 4527.0], [27.0, 4534.0], [27.1, 4538.0], [27.2, 4542.0], [27.3, 4548.0], [27.4, 4557.0], [27.5, 4561.0], [27.6, 4566.0], [27.7, 4570.0], [27.8, 4580.0], [27.9, 4586.0], [28.0, 4592.0], [28.1, 4604.0], [28.2, 4609.0], [28.3, 4620.0], [28.4, 4624.0], [28.5, 4626.0], [28.6, 4628.0], [28.7, 4637.0], [28.8, 4649.0], [28.9, 4651.0], [29.0, 4656.0], [29.1, 4660.0], [29.2, 4666.0], [29.3, 4670.0], [29.4, 4674.0], [29.5, 4684.0], [29.6, 4689.0], [29.7, 4696.0], [29.8, 4702.0], [29.9, 4704.0], [30.0, 4707.0], [30.1, 4713.0], [30.2, 4719.0], [30.3, 4726.0], [30.4, 4734.0], [30.5, 4738.0], [30.6, 4744.0], [30.7, 4751.0], [30.8, 4754.0], [30.9, 4760.0], [31.0, 4769.0], [31.1, 4772.0], [31.2, 4777.0], [31.3, 4782.0], [31.4, 4791.0], [31.5, 4800.0], [31.6, 4812.0], [31.7, 4816.0], [31.8, 4823.0], [31.9, 4828.0], [32.0, 4834.0], [32.1, 4840.0], [32.2, 4844.0], [32.3, 4857.0], [32.4, 4859.0], [32.5, 4868.0], [32.6, 4872.0], [32.7, 4881.0], [32.8, 4891.0], [32.9, 4893.0], [33.0, 4901.0], [33.1, 4905.0], [33.2, 4910.0], [33.3, 4914.0], [33.4, 4918.0], [33.5, 4922.0], [33.6, 4926.0], [33.7, 4939.0], [33.8, 4946.0], [33.9, 4954.0], [34.0, 4961.0], [34.1, 4968.0], [34.2, 4973.0], [34.3, 4979.0], [34.4, 4982.0], [34.5, 4987.0], [34.6, 4996.0], [34.7, 5003.0], [34.8, 5009.0], [34.9, 5016.0], [35.0, 5024.0], [35.1, 5031.0], [35.2, 5036.0], [35.3, 5040.0], [35.4, 5046.0], [35.5, 5050.0], [35.6, 5056.0], [35.7, 5061.0], [35.8, 5066.0], [35.9, 5068.0], [36.0, 5070.0], [36.1, 5073.0], [36.2, 5079.0], [36.3, 5089.0], [36.4, 5096.0], [36.5, 5098.0], [36.6, 5102.0], [36.7, 5104.0], [36.8, 5108.0], [36.9, 5113.0], [37.0, 5119.0], [37.1, 5123.0], [37.2, 5131.0], [37.3, 5137.0], [37.4, 5146.0], [37.5, 5147.0], [37.6, 5153.0], [37.7, 5162.0], [37.8, 5165.0], [37.9, 5168.0], [38.0, 5175.0], [38.1, 5180.0], [38.2, 5186.0], [38.3, 5190.0], [38.4, 5195.0], [38.5, 5199.0], [38.6, 5201.0], [38.7, 5205.0], [38.8, 5210.0], [38.9, 5214.0], [39.0, 5219.0], [39.1, 5223.0], [39.2, 5227.0], [39.3, 5232.0], [39.4, 5243.0], [39.5, 5245.0], [39.6, 5250.0], [39.7, 5253.0], [39.8, 5257.0], [39.9, 5263.0], [40.0, 5266.0], [40.1, 5269.0], [40.2, 5272.0], [40.3, 5275.0], [40.4, 5283.0], [40.5, 5289.0], [40.6, 5296.0], [40.7, 5302.0], [40.8, 5306.0], [40.9, 5310.0], [41.0, 5313.0], [41.1, 5320.0], [41.2, 5326.0], [41.3, 5331.0], [41.4, 5338.0], [41.5, 5340.0], [41.6, 5342.0], [41.7, 5346.0], [41.8, 5349.0], [41.9, 5352.0], [42.0, 5357.0], [42.1, 5360.0], [42.2, 5366.0], [42.3, 5372.0], [42.4, 5376.0], [42.5, 5384.0], [42.6, 5388.0], [42.7, 5394.0], [42.8, 5398.0], [42.9, 5403.0], [43.0, 5406.0], [43.1, 5413.0], [43.2, 5415.0], [43.3, 5420.0], [43.4, 5423.0], [43.5, 5428.0], [43.6, 5432.0], [43.7, 5440.0], [43.8, 5445.0], [43.9, 5447.0], [44.0, 5457.0], [44.1, 5461.0], [44.2, 5464.0], [44.3, 5467.0], [44.4, 5468.0], [44.5, 5471.0], [44.6, 5476.0], [44.7, 5479.0], [44.8, 5483.0], [44.9, 5484.0], [45.0, 5489.0], [45.1, 5496.0], [45.2, 5499.0], [45.3, 5503.0], [45.4, 5509.0], [45.5, 5512.0], [45.6, 5517.0], [45.7, 5521.0], [45.8, 5522.0], [45.9, 5526.0], [46.0, 5538.0], [46.1, 5540.0], [46.2, 5545.0], [46.3, 5551.0], [46.4, 5554.0], [46.5, 5561.0], [46.6, 5568.0], [46.7, 5573.0], [46.8, 5579.0], [46.9, 5582.0], [47.0, 5589.0], [47.1, 5594.0], [47.2, 5601.0], [47.3, 5606.0], [47.4, 5608.0], [47.5, 5614.0], [47.6, 5620.0], [47.7, 5623.0], [47.8, 5627.0], [47.9, 5629.0], [48.0, 5638.0], [48.1, 5640.0], [48.2, 5644.0], [48.3, 5645.0], [48.4, 5649.0], [48.5, 5652.0], [48.6, 5653.0], [48.7, 5656.0], [48.8, 5661.0], [48.9, 5664.0], [49.0, 5667.0], [49.1, 5670.0], [49.2, 5676.0], [49.3, 5681.0], [49.4, 5684.0], [49.5, 5688.0], [49.6, 5690.0], [49.7, 5693.0], [49.8, 5697.0], [49.9, 5701.0], [50.0, 5705.0], [50.1, 5708.0], [50.2, 5711.0], [50.3, 5715.0], [50.4, 5719.0], [50.5, 5722.0], [50.6, 5728.0], [50.7, 5731.0], [50.8, 5734.0], [50.9, 5739.0], [51.0, 5740.0], [51.1, 5743.0], [51.2, 5749.0], [51.3, 5751.0], [51.4, 5753.0], [51.5, 5757.0], [51.6, 5762.0], [51.7, 5765.0], [51.8, 5769.0], [51.9, 5772.0], [52.0, 5776.0], [52.1, 5780.0], [52.2, 5783.0], [52.3, 5786.0], [52.4, 5788.0], [52.5, 5794.0], [52.6, 5797.0], [52.7, 5800.0], [52.8, 5805.0], [52.9, 5810.0], [53.0, 5816.0], [53.1, 5821.0], [53.2, 5829.0], [53.3, 5837.0], [53.4, 5840.0], [53.5, 5844.0], [53.6, 5850.0], [53.7, 5852.0], [53.8, 5856.0], [53.9, 5859.0], [54.0, 5862.0], [54.1, 5867.0], [54.2, 5870.0], [54.3, 5875.0], [54.4, 5880.0], [54.5, 5886.0], [54.6, 5892.0], [54.7, 5895.0], [54.8, 5900.0], [54.9, 5905.0], [55.0, 5911.0], [55.1, 5914.0], [55.2, 5919.0], [55.3, 5923.0], [55.4, 5925.0], [55.5, 5928.0], [55.6, 5931.0], [55.7, 5934.0], [55.8, 5939.0], [55.9, 5947.0], [56.0, 5951.0], [56.1, 5955.0], [56.2, 5959.0], [56.3, 5966.0], [56.4, 5970.0], [56.5, 5974.0], [56.6, 5979.0], [56.7, 5983.0], [56.8, 5990.0], [56.9, 5993.0], [57.0, 5997.0], [57.1, 6003.0], [57.2, 6005.0], [57.3, 6009.0], [57.4, 6012.0], [57.5, 6018.0], [57.6, 6024.0], [57.7, 6026.0], [57.8, 6031.0], [57.9, 6034.0], [58.0, 6044.0], [58.1, 6049.0], [58.2, 6054.0], [58.3, 6060.0], [58.4, 6066.0], [58.5, 6071.0], [58.6, 6074.0], [58.7, 6079.0], [58.8, 6081.0], [58.9, 6090.0], [59.0, 6095.0], [59.1, 6102.0], [59.2, 6105.0], [59.3, 6107.0], [59.4, 6115.0], [59.5, 6121.0], [59.6, 6124.0], [59.7, 6128.0], [59.8, 6134.0], [59.9, 6136.0], [60.0, 6140.0], [60.1, 6143.0], [60.2, 6149.0], [60.3, 6154.0], [60.4, 6156.0], [60.5, 6162.0], [60.6, 6165.0], [60.7, 6169.0], [60.8, 6175.0], [60.9, 6180.0], [61.0, 6186.0], [61.1, 6187.0], [61.2, 6192.0], [61.3, 6196.0], [61.4, 6199.0], [61.5, 6204.0], [61.6, 6209.0], [61.7, 6214.0], [61.8, 6224.0], [61.9, 6228.0], [62.0, 6236.0], [62.1, 6243.0], [62.2, 6247.0], [62.3, 6256.0], [62.4, 6260.0], [62.5, 6266.0], [62.6, 6270.0], [62.7, 6272.0], [62.8, 6282.0], [62.9, 6288.0], [63.0, 6292.0], [63.1, 6293.0], [63.2, 6298.0], [63.3, 6302.0], [63.4, 6312.0], [63.5, 6318.0], [63.6, 6323.0], [63.7, 6325.0], [63.8, 6331.0], [63.9, 6337.0], [64.0, 6343.0], [64.1, 6346.0], [64.2, 6354.0], [64.3, 6357.0], [64.4, 6363.0], [64.5, 6368.0], [64.6, 6372.0], [64.7, 6373.0], [64.8, 6375.0], [64.9, 6390.0], [65.0, 6392.0], [65.1, 6403.0], [65.2, 6408.0], [65.3, 6410.0], [65.4, 6414.0], [65.5, 6419.0], [65.6, 6424.0], [65.7, 6430.0], [65.8, 6435.0], [65.9, 6441.0], [66.0, 6446.0], [66.1, 6450.0], [66.2, 6453.0], [66.3, 6455.0], [66.4, 6459.0], [66.5, 6465.0], [66.6, 6469.0], [66.7, 6471.0], [66.8, 6474.0], [66.9, 6480.0], [67.0, 6486.0], [67.1, 6491.0], [67.2, 6499.0], [67.3, 6505.0], [67.4, 6509.0], [67.5, 6512.0], [67.6, 6518.0], [67.7, 6522.0], [67.8, 6526.0], [67.9, 6533.0], [68.0, 6536.0], [68.1, 6541.0], [68.2, 6544.0], [68.3, 6546.0], [68.4, 6550.0], [68.5, 6555.0], [68.6, 6560.0], [68.7, 6564.0], [68.8, 6568.0], [68.9, 6571.0], [69.0, 6578.0], [69.1, 6585.0], [69.2, 6591.0], [69.3, 6595.0], [69.4, 6601.0], [69.5, 6605.0], [69.6, 6608.0], [69.7, 6612.0], [69.8, 6617.0], [69.9, 6625.0], [70.0, 6628.0], [70.1, 6633.0], [70.2, 6640.0], [70.3, 6645.0], [70.4, 6651.0], [70.5, 6656.0], [70.6, 6666.0], [70.7, 6672.0], [70.8, 6678.0], [70.9, 6688.0], [71.0, 6694.0], [71.1, 6703.0], [71.2, 6718.0], [71.3, 6723.0], [71.4, 6725.0], [71.5, 6729.0], [71.6, 6733.0], [71.7, 6737.0], [71.8, 6744.0], [71.9, 6750.0], [72.0, 6756.0], [72.1, 6760.0], [72.2, 6767.0], [72.3, 6773.0], [72.4, 6779.0], [72.5, 6786.0], [72.6, 6792.0], [72.7, 6800.0], [72.8, 6805.0], [72.9, 6810.0], [73.0, 6813.0], [73.1, 6820.0], [73.2, 6832.0], [73.3, 6841.0], [73.4, 6849.0], [73.5, 6853.0], [73.6, 6869.0], [73.7, 6877.0], [73.8, 6888.0], [73.9, 6897.0], [74.0, 6905.0], [74.1, 6913.0], [74.2, 6920.0], [74.3, 6924.0], [74.4, 6930.0], [74.5, 6934.0], [74.6, 6939.0], [74.7, 6944.0], [74.8, 6949.0], [74.9, 6956.0], [75.0, 6962.0], [75.1, 6969.0], [75.2, 6975.0], [75.3, 6977.0], [75.4, 6986.0], [75.5, 6996.0], [75.6, 7000.0], [75.7, 7004.0], [75.8, 7010.0], [75.9, 7015.0], [76.0, 7031.0], [76.1, 7043.0], [76.2, 7055.0], [76.3, 7062.0], [76.4, 7069.0], [76.5, 7073.0], [76.6, 7081.0], [76.7, 7087.0], [76.8, 7090.0], [76.9, 7099.0], [77.0, 7106.0], [77.1, 7117.0], [77.2, 7120.0], [77.3, 7123.0], [77.4, 7128.0], [77.5, 7135.0], [77.6, 7147.0], [77.7, 7157.0], [77.8, 7162.0], [77.9, 7167.0], [78.0, 7174.0], [78.1, 7176.0], [78.2, 7181.0], [78.3, 7192.0], [78.4, 7200.0], [78.5, 7204.0], [78.6, 7213.0], [78.7, 7220.0], [78.8, 7221.0], [78.9, 7225.0], [79.0, 7232.0], [79.1, 7238.0], [79.2, 7243.0], [79.3, 7245.0], [79.4, 7248.0], [79.5, 7251.0], [79.6, 7263.0], [79.7, 7270.0], [79.8, 7279.0], [79.9, 7285.0], [80.0, 7291.0], [80.1, 7297.0], [80.2, 7306.0], [80.3, 7314.0], [80.4, 7318.0], [80.5, 7324.0], [80.6, 7332.0], [80.7, 7336.0], [80.8, 7343.0], [80.9, 7356.0], [81.0, 7365.0], [81.1, 7375.0], [81.2, 7384.0], [81.3, 7388.0], [81.4, 7398.0], [81.5, 7409.0], [81.6, 7414.0], [81.7, 7424.0], [81.8, 7428.0], [81.9, 7443.0], [82.0, 7453.0], [82.1, 7463.0], [82.2, 7471.0], [82.3, 7480.0], [82.4, 7485.0], [82.5, 7490.0], [82.6, 7498.0], [82.7, 7504.0], [82.8, 7511.0], [82.9, 7518.0], [83.0, 7530.0], [83.1, 7541.0], [83.2, 7550.0], [83.3, 7564.0], [83.4, 7571.0], [83.5, 7580.0], [83.6, 7587.0], [83.7, 7592.0], [83.8, 7615.0], [83.9, 7622.0], [84.0, 7630.0], [84.1, 7636.0], [84.2, 7643.0], [84.3, 7667.0], [84.4, 7673.0], [84.5, 7685.0], [84.6, 7689.0], [84.7, 7703.0], [84.8, 7708.0], [84.9, 7722.0], [85.0, 7731.0], [85.1, 7735.0], [85.2, 7741.0], [85.3, 7745.0], [85.4, 7759.0], [85.5, 7777.0], [85.6, 7783.0], [85.7, 7795.0], [85.8, 7801.0], [85.9, 7818.0], [86.0, 7821.0], [86.1, 7832.0], [86.2, 7845.0], [86.3, 7858.0], [86.4, 7883.0], [86.5, 7886.0], [86.6, 7895.0], [86.7, 7903.0], [86.8, 7912.0], [86.9, 7925.0], [87.0, 7935.0], [87.1, 7947.0], [87.2, 7959.0], [87.3, 7964.0], [87.4, 7970.0], [87.5, 7984.0], [87.6, 7989.0], [87.7, 8002.0], [87.8, 8010.0], [87.9, 8019.0], [88.0, 8030.0], [88.1, 8054.0], [88.2, 8069.0], [88.3, 8073.0], [88.4, 8085.0], [88.5, 8092.0], [88.6, 8100.0], [88.7, 8109.0], [88.8, 8114.0], [88.9, 8125.0], [89.0, 8146.0], [89.1, 8160.0], [89.2, 8174.0], [89.3, 8192.0], [89.4, 8208.0], [89.5, 8214.0], [89.6, 8232.0], [89.7, 8239.0], [89.8, 8262.0], [89.9, 8287.0], [90.0, 8305.0], [90.1, 8323.0], [90.2, 8336.0], [90.3, 8343.0], [90.4, 8350.0], [90.5, 8352.0], [90.6, 8373.0], [90.7, 8388.0], [90.8, 8402.0], [90.9, 8414.0], [91.0, 8455.0], [91.1, 8495.0], [91.2, 8523.0], [91.3, 8565.0], [91.4, 8578.0], [91.5, 8597.0], [91.6, 8606.0], [91.7, 8623.0], [91.8, 8647.0], [91.9, 8671.0], [92.0, 8720.0], [92.1, 8730.0], [92.2, 8735.0], [92.3, 8763.0], [92.4, 8779.0], [92.5, 8816.0], [92.6, 8848.0], [92.7, 8871.0], [92.8, 8904.0], [92.9, 8944.0], [93.0, 8957.0], [93.1, 8991.0], [93.2, 9018.0], [93.3, 9047.0], [93.4, 9069.0], [93.5, 9099.0], [93.6, 9120.0], [93.7, 9141.0], [93.8, 9154.0], [93.9, 9191.0], [94.0, 9205.0], [94.1, 9235.0], [94.2, 9271.0], [94.3, 9333.0], [94.4, 9369.0], [94.5, 9385.0], [94.6, 9441.0], [94.7, 9459.0], [94.8, 9484.0], [94.9, 9513.0], [95.0, 9525.0], [95.1, 9551.0], [95.2, 9590.0], [95.3, 9639.0], [95.4, 9687.0], [95.5, 9734.0], [95.6, 9775.0], [95.7, 9809.0], [95.8, 9851.0], [95.9, 9896.0], [96.0, 9922.0], [96.1, 9991.0], [96.2, 10001.0], [96.3, 10052.0], [96.4, 10157.0], [96.5, 10197.0], [96.6, 10281.0], [96.7, 10298.0], [96.8, 10411.0], [96.9, 10489.0], [97.0, 10601.0], [97.1, 10675.0], [97.2, 10735.0], [97.3, 10816.0], [97.4, 10876.0], [97.5, 10926.0], [97.6, 11028.0], [97.7, 11184.0], [97.8, 11307.0], [97.9, 11391.0], [98.0, 11532.0], [98.1, 11709.0], [98.2, 11778.0], [98.3, 11890.0], [98.4, 11952.0], [98.5, 12108.0], [98.6, 12234.0], [98.7, 12361.0], [98.8, 12408.0], [98.9, 12564.0], [99.0, 12791.0], [99.1, 12999.0], [99.2, 13200.0], [99.3, 13359.0], [99.4, 13506.0], [99.5, 13882.0], [99.6, 14287.0], [99.7, 14854.0], [99.8, 17131.0], [99.9, 18388.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2000.0, "maxY": 147.0, "series": [{"data": [[2000.0, 2.0], [2100.0, 59.0], [2300.0, 86.0], [2200.0, 87.0], [2400.0, 51.0], [2500.0, 29.0], [2600.0, 45.0], [2700.0, 61.0], [2800.0, 69.0], [2900.0, 40.0], [3000.0, 38.0], [3100.0, 48.0], [3300.0, 71.0], [3200.0, 55.0], [3400.0, 51.0], [3500.0, 41.0], [3600.0, 48.0], [3700.0, 33.0], [3800.0, 66.0], [3900.0, 68.0], [4000.0, 67.0], [4300.0, 56.0], [4100.0, 72.0], [4200.0, 53.0], [4600.0, 86.0], [4400.0, 78.0], [4500.0, 83.0], [4700.0, 92.0], [4800.0, 77.0], [4900.0, 89.0], [5000.0, 97.0], [5100.0, 102.0], [5200.0, 109.0], [5300.0, 114.0], [5500.0, 98.0], [5400.0, 125.0], [5600.0, 142.0], [5700.0, 147.0], [5800.0, 109.0], [5900.0, 117.0], [6000.0, 103.0], [6100.0, 124.0], [6300.0, 97.0], [6200.0, 94.0], [6500.0, 112.0], [6600.0, 89.0], [6400.0, 110.0], [6900.0, 86.0], [6800.0, 65.0], [6700.0, 83.0], [7100.0, 77.0], [7000.0, 68.0], [7300.0, 69.0], [7400.0, 60.0], [7200.0, 90.0], [7600.0, 46.0], [7500.0, 61.0], [7700.0, 57.0], [7900.0, 55.0], [7800.0, 45.0], [8000.0, 47.0], [8100.0, 39.0], [8500.0, 20.0], [8600.0, 24.0], [8300.0, 43.0], [8200.0, 32.0], [8700.0, 23.0], [8400.0, 18.0], [8800.0, 17.0], [9100.0, 23.0], [9000.0, 19.0], [8900.0, 20.0], [9200.0, 15.0], [9300.0, 15.0], [9700.0, 13.0], [9600.0, 11.0], [9500.0, 19.0], [9400.0, 17.0], [9800.0, 12.0], [10100.0, 9.0], [9900.0, 14.0], [10200.0, 10.0], [10000.0, 8.0], [10600.0, 8.0], [10500.0, 3.0], [10400.0, 9.0], [10300.0, 3.0], [10700.0, 6.0], [10800.0, 9.0], [10900.0, 8.0], [11000.0, 3.0], [11200.0, 2.0], [11100.0, 4.0], [11300.0, 7.0], [11500.0, 5.0], [11700.0, 7.0], [11400.0, 3.0], [11600.0, 1.0], [11900.0, 5.0], [12100.0, 4.0], [11800.0, 6.0], [12000.0, 4.0], [12200.0, 2.0], [12300.0, 8.0], [12500.0, 5.0], [12400.0, 4.0], [12700.0, 4.0], [13200.0, 3.0], [12800.0, 2.0], [12900.0, 3.0], [13100.0, 3.0], [13300.0, 3.0], [13000.0, 1.0], [13400.0, 3.0], [13800.0, 4.0], [13600.0, 2.0], [13500.0, 2.0], [14300.0, 1.0], [14200.0, 3.0], [14100.0, 2.0], [14500.0, 1.0], [14800.0, 1.0], [14400.0, 2.0], [15300.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [17100.0, 2.0], [17300.0, 1.0], [17200.0, 1.0], [17700.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [18300.0, 1.0], [18600.0, 1.0], [21600.0, 1.0], [22400.0, 1.0], [21700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.60231824E12, "maxY": 12.0, "series": [{"data": [[1.6023198E12, 12.0], [1.6023195E12, 12.0], [1.6023204E12, 12.0], [1.60231848E12, 12.0], [1.6023201E12, 12.0], [1.60231908E12, 12.0], [1.60231878E12, 12.0], [1.60231968E12, 12.0], [1.6023207E12, 11.55], [1.60231938E12, 12.0], [1.60231932E12, 12.0], [1.60231902E12, 12.0], [1.60231992E12, 12.0], [1.60231962E12, 12.0], [1.6023183E12, 12.0], [1.60232052E12, 12.0], [1.6023186E12, 12.0], [1.60232022E12, 12.0], [1.6023192E12, 12.0], [1.6023189E12, 12.0], [1.60231884E12, 12.0], [1.60232046E12, 12.0], [1.60231854E12, 12.0], [1.60231944E12, 12.0], [1.60231914E12, 12.0], [1.60232076E12, 1.5], [1.60232004E12, 12.0], [1.60231974E12, 12.0], [1.60232064E12, 12.0], [1.60231842E12, 12.0], [1.60231872E12, 12.0], [1.60232034E12, 12.0], [1.60232028E12, 12.0], [1.60231836E12, 12.0], [1.60231998E12, 12.0], [1.60231896E12, 12.0], [1.60232058E12, 12.0], [1.60231866E12, 12.0], [1.60231956E12, 12.0], [1.60231926E12, 12.0], [1.60232016E12, 12.0], [1.60231824E12, 12.0], [1.60231986E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60232076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4891.0, "minX": 1.0, "maxY": 6983.0, "series": [{"data": [[8.0, 4891.0], [4.0, 6979.0], [2.0, 6969.0], [1.0, 6731.0], [9.0, 5981.0], [10.0, 6311.0], [5.0, 6900.0], [11.0, 6375.0], [12.0, 5808.714478764479], [6.0, 6826.0], [3.0, 6983.0], [7.0, 6794.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987285686765556, 5810.225582739356]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.366666666666667, "minX": 1.60231824E12, "maxY": 820471.7666666667, "series": [{"data": [[1.6023198E12, 492085.63333333336], [1.6023195E12, 587710.7], [1.6023204E12, 593279.5166666667], [1.60231848E12, 679112.5], [1.6023201E12, 819892.9333333333], [1.60231908E12, 542458.95], [1.60231878E12, 820471.7666666667], [1.60231968E12, 498432.88333333336], [1.6023207E12, 450067.18333333335], [1.60231938E12, 484317.88333333336], [1.60231932E12, 552012.8], [1.60231902E12, 755109.7], [1.60231992E12, 402756.9], [1.60231962E12, 455756.9666666667], [1.6023183E12, 670854.35], [1.60232052E12, 571016.6833333333], [1.6023186E12, 400373.4], [1.60232022E12, 664416.0666666667], [1.6023192E12, 533373.9166666666], [1.6023189E12, 663964.2], [1.60231884E12, 705998.3166666667], [1.60232046E12, 490823.1666666667], [1.60231854E12, 388671.4], [1.60231944E12, 544450.45], [1.60231914E12, 606132.0166666667], [1.60232076E12, 286.8], [1.60232004E12, 761884.6], [1.60231974E12, 600153.0], [1.60232064E12, 502316.75], [1.60231842E12, 471614.85], [1.60231872E12, 529588.55], [1.60232034E12, 565828.3166666667], [1.60232028E12, 496262.13333333336], [1.60231836E12, 497112.06666666665], [1.60231998E12, 425762.5833333333], [1.60231896E12, 607365.1333333333], [1.60232058E12, 665235.45], [1.60231866E12, 366789.9666666667], [1.60231956E12, 733025.15], [1.60231926E12, 764881.2833333333], [1.60232016E12, 647100.6833333333], [1.60231824E12, 619172.6166666667], [1.60231986E12, 344916.56666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6023198E12, 780.25], [1.6023195E12, 858.7166666666667], [1.6023204E12, 900.0833333333334], [1.60231848E12, 1065.2666666666667], [1.6023201E12, 851.4166666666666], [1.60231908E12, 751.3666666666667], [1.60231878E12, 775.3], [1.60231968E12, 666.1666666666666], [1.6023207E12, 758.1666666666666], [1.60231938E12, 737.1], [1.60231932E12, 1092.0], [1.60231902E12, 1000.2833333333333], [1.60231992E12, 1384.75], [1.60231962E12, 1148.95], [1.6023183E12, 627.2833333333333], [1.60232052E12, 1040.1166666666666], [1.6023186E12, 983.05], [1.60232022E12, 1016.6666666666666], [1.6023192E12, 1164.35], [1.6023189E12, 1073.1833333333334], [1.60231884E12, 869.8833333333333], [1.60232046E12, 1236.75], [1.60231854E12, 722.9833333333333], [1.60231944E12, 713.55], [1.60231914E12, 938.7833333333333], [1.60232076E12, 15.366666666666667], [1.60232004E12, 733.7333333333333], [1.60231974E12, 1008.1833333333333], [1.60232064E12, 773.5], [1.60231842E12, 728.0833333333334], [1.60231872E12, 852.2666666666667], [1.60232034E12, 866.9833333333333], [1.60232028E12, 1187.7], [1.60231836E12, 1009.9], [1.60231998E12, 980.8], [1.60231896E12, 1080.3166666666666], [1.60232058E12, 923.25], [1.60231866E12, 1287.1166666666666], [1.60231956E12, 521.0166666666667], [1.60231926E12, 941.8666666666667], [1.60232016E12, 1065.4666666666667], [1.60231824E12, 709.3], [1.60231986E12, 742.7833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60232076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3873.6129032258054, "minX": 1.60231824E12, "maxY": 9948.351351351355, "series": [{"data": [[1.6023198E12, 6524.235849056607], [1.6023195E12, 6256.456140350878], [1.6023204E12, 5880.593220338984], [1.60231848E12, 4986.902777777781], [1.6023201E12, 6502.1517857142835], [1.60231908E12, 7152.550000000001], [1.60231878E12, 7150.607843137253], [1.60231968E12, 7226.90625], [1.6023207E12, 7238.409999999997], [1.60231938E12, 7102.949494949494], [1.60231932E12, 4749.772413793105], [1.60231902E12, 5367.515151515149], [1.60231992E12, 3873.6129032258054], [1.60231962E12, 4589.931677018636], [1.6023183E12, 8590.170454545452], [1.60232052E12, 5267.087591240878], [1.6023186E12, 5803.669117647055], [1.60232022E12, 5178.761194029847], [1.6023192E12, 4672.318181818179], [1.6023189E12, 5139.415492957749], [1.60231884E12, 6175.491228070175], [1.60232046E12, 4605.20245398773], [1.60231854E12, 6793.757575757576], [1.60231944E12, 7830.457446808511], [1.60231914E12, 5875.352459016394], [1.60232076E12, 6850.0], [1.60232004E12, 7572.708333333332], [1.60231974E12, 5200.659420289858], [1.60232064E12, 6817.961538461536], [1.60231842E12, 6819.619047619048], [1.60231872E12, 5871.285714285716], [1.60232034E12, 6321.640350877193], [1.60232028E12, 4749.566878980893], [1.60231836E12, 4900.377622377625], [1.60231998E12, 4929.32624113475], [1.60231896E12, 5115.587412587411], [1.60232058E12, 5726.95081967213], [1.60231866E12, 4152.439306358382], [1.60231956E12, 9948.351351351355], [1.60231926E12, 6041.774193548388], [1.60232016E12, 5265.624113475176], [1.60231824E12, 6712.1397849462355], [1.60231986E12, 7293.500000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60232076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3872.7956989247305, "minX": 1.60231824E12, "maxY": 9943.756756756758, "series": [{"data": [[1.6023198E12, 6522.537735849058], [1.6023195E12, 6254.096491228069], [1.6023204E12, 5878.855932203391], [1.60231848E12, 4984.729166666665], [1.6023201E12, 6499.473214285715], [1.60231908E12, 7150.069999999999], [1.60231878E12, 7147.176470588236], [1.60231968E12, 7224.500000000001], [1.6023207E12, 7236.790000000004], [1.60231938E12, 7100.626262626261], [1.60231932E12, 4748.103448275863], [1.60231902E12, 5365.015151515152], [1.60231992E12, 3872.7956989247305], [1.60231962E12, 4588.639751552793], [1.6023183E12, 8586.772727272726], [1.60232052E12, 5265.5985401459875], [1.6023186E12, 5802.316176470586], [1.60232022E12, 5177.014925373136], [1.6023192E12, 4670.805194805197], [1.6023189E12, 5137.4014084507035], [1.60231884E12, 6172.657894736841], [1.60232046E12, 4604.153374233132], [1.60231854E12, 6791.989898989898], [1.60231944E12, 7827.776595744681], [1.60231914E12, 5873.180327868854], [1.60232076E12, 6850.0], [1.60232004E12, 7569.854166666668], [1.60231974E12, 5198.557971014494], [1.60232064E12, 6816.25], [1.60231842E12, 6817.419047619048], [1.60231872E12, 5869.336134453782], [1.60232034E12, 6319.754385964912], [1.60232028E12, 4748.388535031851], [1.60231836E12, 4898.832167832165], [1.60231998E12, 4928.191489361702], [1.60231896E12, 5113.7902097902115], [1.60232058E12, 5724.975409836068], [1.60231866E12, 4151.433526011561], [1.60231956E12, 9943.756756756758], [1.60231926E12, 6039.153225806451], [1.60232016E12, 5264.007092198578], [1.60231824E12, 6709.47311827957], [1.60231986E12, 7292.192307692308]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60232076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60231824E12, "maxY": 1.3763440860215068, "series": [{"data": [[1.6023198E12, 0.13207547169811318], [1.6023195E12, 0.10526315789473686], [1.6023204E12, 0.05932203389830507], [1.60231848E12, 0.10416666666666677], [1.6023201E12, 0.10714285714285718], [1.60231908E12, 0.13999999999999999], [1.60231878E12, 0.11764705882352944], [1.60231968E12, 0.12500000000000008], [1.6023207E12, 0.10000000000000003], [1.60231938E12, 0.12121212121212126], [1.60231932E12, 0.03448275862068965], [1.60231902E12, 0.08333333333333334], [1.60231992E12, 0.07526881720430106], [1.60231962E12, 0.08074534161490682], [1.6023183E12, 0.19318181818181815], [1.60232052E12, 0.09489051094890509], [1.6023186E12, 0.10294117647058824], [1.60232022E12, 0.10447761194029855], [1.6023192E12, 0.07142857142857142], [1.6023189E12, 0.07746478873239443], [1.60231884E12, 0.1228070175438596], [1.60232046E12, 0.07361963190184052], [1.60231854E12, 0.16161616161616169], [1.60231944E12, 0.14893617021276595], [1.60231914E12, 0.10655737704918034], [1.60232076E12, 0.0], [1.60232004E12, 0.12499999999999997], [1.60231974E12, 0.10144927536231892], [1.60232064E12, 0.09615384615384617], [1.60231842E12, 0.12380952380952384], [1.60231872E12, 0.13445378151260504], [1.60232034E12, 0.08771929824561402], [1.60232028E12, 0.07643312101910828], [1.60231836E12, 0.09790209790209792], [1.60231998E12, 0.08510638297872342], [1.60231896E12, 0.08391608391608393], [1.60232058E12, 0.0737704918032787], [1.60231866E12, 0.07514450867052026], [1.60231956E12, 0.18918918918918923], [1.60231926E12, 0.12903225806451615], [1.60232016E12, 0.11347517730496462], [1.60231824E12, 1.3763440860215068], [1.60231986E12, 0.12500000000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60232076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2083.0, "minX": 1.60231824E12, "maxY": 22461.0, "series": [{"data": [[1.6023198E12, 13359.0], [1.6023195E12, 8169.0], [1.6023204E12, 8664.0], [1.60231848E12, 7795.0], [1.6023201E12, 8923.0], [1.60231908E12, 9906.0], [1.60231878E12, 10507.0], [1.60231968E12, 13506.0], [1.6023207E12, 11028.0], [1.60231938E12, 13666.0], [1.60231932E12, 7779.0], [1.60231902E12, 10298.0], [1.60231992E12, 6542.0], [1.60231962E12, 6491.0], [1.6023183E12, 15374.0], [1.60232052E12, 10601.0], [1.6023186E12, 12482.0], [1.60232022E12, 8692.0], [1.6023192E12, 8239.0], [1.6023189E12, 7819.0], [1.60231884E12, 8351.0], [1.60232046E12, 9146.0], [1.60231854E12, 10984.0], [1.60231944E12, 14470.0], [1.60231914E12, 7495.0], [1.60232076E12, 6969.0], [1.60232004E12, 9525.0], [1.60231974E12, 11209.0], [1.60232064E12, 12307.0], [1.60231842E12, 15188.0], [1.60231872E12, 10782.0], [1.60232034E12, 8694.0], [1.60232028E12, 8154.0], [1.60231836E12, 6837.0], [1.60231998E12, 8032.0], [1.60231896E12, 10670.0], [1.60232058E12, 10829.0], [1.60231866E12, 9127.0], [1.60231956E12, 22461.0], [1.60231926E12, 12532.0], [1.60232016E12, 8736.0], [1.60231824E12, 9328.0], [1.60231986E12, 13200.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6023198E12, 3298.0], [1.6023195E12, 3708.8449899375437], [1.6023204E12, 2950.135999546051], [1.60231848E12, 3339.2999979257584], [1.6023201E12, 4616.203999676704], [1.60231908E12, 4213.0], [1.60231878E12, 3999.0], [1.60231968E12, 2554.0], [1.6023207E12, 4891.0], [1.60231938E12, 3472.0], [1.60231932E12, 2195.023999443054], [1.60231902E12, 2146.789997780323], [1.60231992E12, 2144.3659999108313], [1.60231962E12, 2160.9159999227522], [1.6023183E12, 2372.0], [1.60232052E12, 2194.2419999670983], [1.6023186E12, 2300.39799980402], [1.60232022E12, 2379.149999678135], [1.6023192E12, 2141.394999963045], [1.6023189E12, 2755.4179927039145], [1.60231884E12, 3883.059996819496], [1.60232046E12, 2236.379999804497], [1.60231854E12, 3471.0], [1.60231944E12, 4294.0], [1.60231914E12, 4071.687994604111], [1.60232076E12, 6731.0], [1.60232004E12, 5674.0], [1.60231974E12, 3465.346996785402], [1.60232064E12, 3382.0], [1.60231842E12, 4762.0], [1.60231872E12, 3781.119998884201], [1.60232034E12, 2757.2049982726576], [1.60232028E12, 2535.0399879455567], [1.60231836E12, 2486.191996498108], [1.60231998E12, 2389.05799962759], [1.60231896E12, 2114.071999759674], [1.60232058E12, 2083.855999765396], [1.60231866E12, 2218.5279996681215], [1.60231956E12, 6031.0], [1.60231926E12, 2100.2499999403954], [1.60232016E12, 2152.501999695301], [1.60231824E12, 3155.0], [1.60231986E12, 4011.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6023198E12, 3308.140301744938], [1.6023195E12, 3746.8295040249823], [1.6023204E12, 2951.8496001815797], [1.60231848E12, 3347.1300008296967], [1.6023201E12, 4617.424400129318], [1.60231908E12, 4213.0], [1.60231878E12, 3999.4728002357483], [1.60231968E12, 2554.0], [1.6023207E12, 4891.0], [1.60231938E12, 3472.0], [1.60231932E12, 2197.126400222778], [1.60231902E12, 2155.169000887871], [1.60231992E12, 2144.7026000356673], [1.60231962E12, 2161.207600030899], [1.6023183E12, 2372.0], [1.60232052E12, 2194.366200013161], [1.6023186E12, 2301.137800078392], [1.60232022E12, 2380.365000128746], [1.6023192E12, 2141.5345000147818], [1.6023189E12, 2782.959802918434], [1.60231884E12, 3895.0660012722014], [1.60232046E12, 2237.1180000782015], [1.60231854E12, 3471.0], [1.60231944E12, 4294.0], [1.60231914E12, 4092.056802158356], [1.60232076E12, 6731.0], [1.60232004E12, 5674.0], [1.60231974E12, 3477.481701285839], [1.60232064E12, 3387.3325013518333], [1.60231842E12, 4763.630200333595], [1.60231872E12, 3785.3320004463194], [1.60232034E12, 2763.725500690937], [1.60232028E12, 2580.5440048217774], [1.60231836E12, 2499.411201400757], [1.60231998E12, 2390.463800148964], [1.60231896E12, 2114.97920009613], [1.60232058E12, 2084.7416000938415], [1.60231866E12, 2219.7808001327517], [1.60231956E12, 6031.0], [1.60231926E12, 2100.475000023842], [1.60232016E12, 2153.6522001218796], [1.60231824E12, 3155.0], [1.60231986E12, 4016.4115013718606]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6023198E12, 3300.8214978188275], [1.6023195E12, 3729.947494968772], [1.6023204E12, 2951.0879997730253], [1.60231848E12, 3343.649998962879], [1.6023201E12, 4616.881999838352], [1.60231908E12, 4213.0], [1.60231878E12, 3999.0], [1.60231968E12, 2554.0], [1.6023207E12, 4891.0], [1.60231938E12, 3472.0], [1.60231932E12, 2196.1919997215273], [1.60231902E12, 2151.4449988901615], [1.60231992E12, 2144.5529999554155], [1.60231962E12, 2161.077999961376], [1.6023183E12, 2372.0], [1.60232052E12, 2194.310999983549], [1.6023186E12, 2300.80899990201], [1.60232022E12, 2379.8249998390675], [1.6023192E12, 2141.4724999815226], [1.6023189E12, 2770.7189963519572], [1.60231884E12, 3889.729998409748], [1.60232046E12, 2236.7899999022484], [1.60231854E12, 3471.0], [1.60231944E12, 4294.0], [1.60231914E12, 4083.0039973020553], [1.60232076E12, 6731.0], [1.60232004E12, 5674.0], [1.60231974E12, 3472.0884983927012], [1.60232064E12, 3382.0], [1.60231842E12, 4762.2309995830055], [1.60231872E12, 3783.4599994421005], [1.60232034E12, 2760.8274991363287], [1.60232028E12, 2560.3199939727783], [1.60231836E12, 2493.535998249054], [1.60231998E12, 2389.838999813795], [1.60231896E12, 2114.575999879837], [1.60232058E12, 2084.347999882698], [1.60231866E12, 2219.2239998340606], [1.60231956E12, 6031.0], [1.60231926E12, 2100.3749999701977], [1.60232016E12, 2153.1409998476506], [1.60231824E12, 3155.0], [1.60231986E12, 4011.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6023198E12, 3298.0], [1.6023195E12, 3696.0], [1.6023204E12, 2949.0], [1.60231848E12, 3321.0], [1.6023201E12, 4616.0], [1.60231908E12, 4213.0], [1.60231878E12, 3999.0], [1.60231968E12, 2554.0], [1.6023207E12, 4891.0], [1.60231938E12, 3472.0], [1.60231932E12, 2190.0], [1.60231902E12, 2133.0], [1.60231992E12, 2143.0], [1.60231962E12, 2160.0], [1.6023183E12, 2372.0], [1.60232052E12, 2194.0], [1.6023186E12, 2299.0], [1.60232022E12, 2377.0], [1.6023192E12, 2141.0], [1.6023189E12, 2694.0], [1.60231884E12, 3879.0], [1.60232046E12, 2234.0], [1.60231854E12, 3471.0], [1.60231944E12, 4294.0], [1.60231914E12, 4052.0], [1.60232076E12, 6731.0], [1.60232004E12, 5674.0], [1.60231974E12, 3441.0], [1.60232064E12, 3382.0], [1.60231842E12, 4762.0], [1.60231872E12, 3778.0], [1.60232034E12, 2755.0], [1.60232028E12, 2400.0], [1.60231836E12, 2456.0], [1.60231998E12, 2386.0], [1.60231896E12, 2112.0], [1.60232058E12, 2083.0], [1.60231866E12, 2214.0], [1.60231956E12, 6031.0], [1.60231926E12, 2100.0], [1.60232016E12, 2150.0], [1.60231824E12, 3155.0], [1.60231986E12, 4011.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6023198E12, 5146.5], [1.6023195E12, 6233.5], [1.6023204E12, 5856.5], [1.60231848E12, 4668.0], [1.6023201E12, 6391.5], [1.60231908E12, 7556.0], [1.60231878E12, 7239.5], [1.60231968E12, 5970.0], [1.6023207E12, 7034.0], [1.60231938E12, 6545.0], [1.60231932E12, 4626.0], [1.60231902E12, 5278.0], [1.60231992E12, 3783.5], [1.60231962E12, 4812.0], [1.6023183E12, 8623.5], [1.60232052E12, 5016.0], [1.6023186E12, 5473.5], [1.60232022E12, 5564.5], [1.6023192E12, 3989.0], [1.6023189E12, 5212.0], [1.60231884E12, 6413.0], [1.60232046E12, 4623.0], [1.60231854E12, 6606.0], [1.60231944E12, 7250.5], [1.60231914E12, 5856.5], [1.60232076E12, 6850.0], [1.60232004E12, 7592.0], [1.60231974E12, 5163.0], [1.60232064E12, 6786.5], [1.60231842E12, 5708.0], [1.60231872E12, 5433.0], [1.60232034E12, 6209.0], [1.60232028E12, 4744.0], [1.60231836E12, 4930.0], [1.60231998E12, 4791.0], [1.60231896E12, 5195.0], [1.60232058E12, 5638.0], [1.60231866E12, 3673.0], [1.60231956E12, 7798.0], [1.60231926E12, 6119.5], [1.60232016E12, 5652.0], [1.60231824E12, 6776.0], [1.60231986E12, 7162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60232076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2719.0, "minX": 1.0, "maxY": 7065.5, "series": [{"data": [[2.0, 6170.0], [1.0, 7065.5], [4.0, 4535.0], [5.0, 2935.0], [3.0, 5657.5], [6.0, 2719.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 5512.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2719.0, "minX": 1.0, "maxY": 7060.5, "series": [{"data": [[2.0, 6170.0], [1.0, 7060.5], [4.0, 4534.0], [5.0, 2935.0], [3.0, 5657.5], [6.0, 2719.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 5512.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2333333333333334, "minX": 1.60231824E12, "maxY": 3.1, "series": [{"data": [[1.6023198E12, 1.7666666666666666], [1.6023195E12, 1.9], [1.6023204E12, 1.9666666666666666], [1.60231848E12, 2.4], [1.6023201E12, 1.8666666666666667], [1.60231908E12, 1.6666666666666667], [1.60231878E12, 1.7], [1.60231968E12, 1.6], [1.6023207E12, 1.5], [1.60231938E12, 1.65], [1.60231932E12, 2.4166666666666665], [1.60231902E12, 2.2], [1.60231992E12, 3.1], [1.60231962E12, 2.683333333333333], [1.6023183E12, 1.4666666666666666], [1.60232052E12, 2.283333333333333], [1.6023186E12, 2.2666666666666666], [1.60232022E12, 2.2333333333333334], [1.6023192E12, 2.566666666666667], [1.6023189E12, 2.3666666666666667], [1.60231884E12, 1.9], [1.60232046E12, 2.716666666666667], [1.60231854E12, 1.65], [1.60231944E12, 1.5666666666666667], [1.60231914E12, 2.033333333333333], [1.60232004E12, 1.6], [1.60231974E12, 2.3], [1.60232064E12, 1.7333333333333334], [1.60231842E12, 1.75], [1.60231872E12, 1.9833333333333334], [1.60232034E12, 1.9], [1.60232028E12, 2.6166666666666667], [1.60231836E12, 2.3833333333333333], [1.60231998E12, 2.35], [1.60231896E12, 2.3833333333333333], [1.60232058E12, 2.033333333333333], [1.60231866E12, 2.8833333333333333], [1.60231956E12, 1.2333333333333334], [1.60231926E12, 2.066666666666667], [1.60232016E12, 2.35], [1.60231824E12, 1.75], [1.60231986E12, 1.7333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6023207E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60231824E12, "maxY": 3.1, "series": [{"data": [[1.6023198E12, 1.7666666666666666], [1.6023195E12, 1.9], [1.6023204E12, 1.9666666666666666], [1.60231848E12, 2.4], [1.6023201E12, 1.8666666666666667], [1.60231908E12, 1.65], [1.60231878E12, 1.7], [1.60231968E12, 1.6], [1.6023207E12, 1.6666666666666667], [1.60231938E12, 1.65], [1.60231932E12, 2.4166666666666665], [1.60231902E12, 2.2], [1.60231992E12, 3.1], [1.60231962E12, 2.683333333333333], [1.6023183E12, 1.4666666666666666], [1.60232052E12, 2.283333333333333], [1.6023186E12, 2.2666666666666666], [1.60232022E12, 2.2333333333333334], [1.6023192E12, 2.566666666666667], [1.6023189E12, 2.3666666666666667], [1.60231884E12, 1.9], [1.60232046E12, 2.716666666666667], [1.60231854E12, 1.65], [1.60231944E12, 1.5666666666666667], [1.60231914E12, 2.033333333333333], [1.60232076E12, 0.03333333333333333], [1.60232004E12, 1.6], [1.60231974E12, 2.3], [1.60232064E12, 1.7333333333333334], [1.60231842E12, 1.75], [1.60231872E12, 1.9833333333333334], [1.60232034E12, 1.9], [1.60232028E12, 2.6166666666666667], [1.60231836E12, 2.3833333333333333], [1.60231998E12, 2.35], [1.60231896E12, 2.3833333333333333], [1.60232058E12, 2.033333333333333], [1.60231866E12, 2.8833333333333333], [1.60231956E12, 1.2333333333333334], [1.60231926E12, 2.066666666666667], [1.60232016E12, 2.35], [1.60231824E12, 1.55], [1.60231986E12, 1.7333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60231908E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60232076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60231824E12, "maxY": 3.1, "series": [{"data": [[1.6023198E12, 1.7666666666666666], [1.6023195E12, 1.9], [1.6023204E12, 1.9666666666666666], [1.60231848E12, 2.4], [1.6023201E12, 1.8666666666666667], [1.60231908E12, 1.65], [1.60231878E12, 1.7], [1.60231968E12, 1.6], [1.6023207E12, 1.6666666666666667], [1.60231938E12, 1.65], [1.60231932E12, 2.4166666666666665], [1.60231902E12, 2.2], [1.60231992E12, 3.1], [1.60231962E12, 2.683333333333333], [1.6023183E12, 1.4666666666666666], [1.60232052E12, 2.283333333333333], [1.6023186E12, 2.2666666666666666], [1.60232022E12, 2.2333333333333334], [1.6023192E12, 2.566666666666667], [1.6023189E12, 2.3666666666666667], [1.60231884E12, 1.9], [1.60232046E12, 2.716666666666667], [1.60231854E12, 1.65], [1.60231944E12, 1.5666666666666667], [1.60231914E12, 2.033333333333333], [1.60232076E12, 0.03333333333333333], [1.60232004E12, 1.6], [1.60231974E12, 2.3], [1.60232064E12, 1.7333333333333334], [1.60231842E12, 1.75], [1.60231872E12, 1.9833333333333334], [1.60232034E12, 1.9], [1.60232028E12, 2.6166666666666667], [1.60231836E12, 2.3833333333333333], [1.60231998E12, 2.35], [1.60231896E12, 2.3833333333333333], [1.60232058E12, 2.033333333333333], [1.60231866E12, 2.8833333333333333], [1.60231956E12, 1.2333333333333334], [1.60231926E12, 2.066666666666667], [1.60232016E12, 2.35], [1.60231824E12, 1.55], [1.60231986E12, 1.7333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60231908E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60232076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60231824E12, "maxY": 3.1, "series": [{"data": [[1.6023198E12, 1.7666666666666666], [1.6023195E12, 1.9], [1.6023204E12, 1.9666666666666666], [1.60231848E12, 2.4], [1.6023201E12, 1.8666666666666667], [1.60231908E12, 1.65], [1.60231878E12, 1.7], [1.60231968E12, 1.6], [1.6023207E12, 1.6666666666666667], [1.60231938E12, 1.65], [1.60231932E12, 2.4166666666666665], [1.60231902E12, 2.2], [1.60231992E12, 3.1], [1.60231962E12, 2.683333333333333], [1.6023183E12, 1.4666666666666666], [1.60232052E12, 2.283333333333333], [1.6023186E12, 2.2666666666666666], [1.60232022E12, 2.2333333333333334], [1.6023192E12, 2.566666666666667], [1.6023189E12, 2.3666666666666667], [1.60231884E12, 1.9], [1.60232046E12, 2.716666666666667], [1.60231854E12, 1.65], [1.60231944E12, 1.5666666666666667], [1.60231914E12, 2.033333333333333], [1.60232076E12, 0.03333333333333333], [1.60232004E12, 1.6], [1.60231974E12, 2.3], [1.60232064E12, 1.7333333333333334], [1.60231842E12, 1.75], [1.60231872E12, 1.9833333333333334], [1.60232034E12, 1.9], [1.60232028E12, 2.6166666666666667], [1.60231836E12, 2.3833333333333333], [1.60231998E12, 2.35], [1.60231896E12, 2.3833333333333333], [1.60232058E12, 2.033333333333333], [1.60231866E12, 2.8833333333333333], [1.60231956E12, 1.2333333333333334], [1.60231926E12, 2.066666666666667], [1.60232016E12, 2.35], [1.60231824E12, 1.55], [1.60231986E12, 1.7333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60231908E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60232076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

