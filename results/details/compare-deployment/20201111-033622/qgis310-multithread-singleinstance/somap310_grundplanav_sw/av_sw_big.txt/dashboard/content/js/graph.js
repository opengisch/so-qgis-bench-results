/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 380.0, "minX": 0.0, "maxY": 22636.0, "series": [{"data": [[0.0, 380.0], [0.1, 2139.0], [0.2, 2170.0], [0.3, 2180.0], [0.4, 2199.0], [0.5, 2211.0], [0.6, 2218.0], [0.7, 2231.0], [0.8, 2242.0], [0.9, 2247.0], [1.0, 2257.0], [1.1, 2260.0], [1.2, 2262.0], [1.3, 2265.0], [1.4, 2270.0], [1.5, 2279.0], [1.6, 2291.0], [1.7, 2300.0], [1.8, 2310.0], [1.9, 2324.0], [2.0, 2333.0], [2.1, 2342.0], [2.2, 2351.0], [2.3, 2363.0], [2.4, 2368.0], [2.5, 2375.0], [2.6, 2382.0], [2.7, 2389.0], [2.8, 2396.0], [2.9, 2400.0], [3.0, 2411.0], [3.1, 2420.0], [3.2, 2427.0], [3.3, 2430.0], [3.4, 2433.0], [3.5, 2438.0], [3.6, 2441.0], [3.7, 2445.0], [3.8, 2451.0], [3.9, 2457.0], [4.0, 2463.0], [4.1, 2469.0], [4.2, 2470.0], [4.3, 2478.0], [4.4, 2483.0], [4.5, 2486.0], [4.6, 2491.0], [4.7, 2494.0], [4.8, 2500.0], [4.9, 2502.0], [5.0, 2507.0], [5.1, 2511.0], [5.2, 2513.0], [5.3, 2518.0], [5.4, 2522.0], [5.5, 2532.0], [5.6, 2538.0], [5.7, 2540.0], [5.8, 2547.0], [5.9, 2553.0], [6.0, 2557.0], [6.1, 2573.0], [6.2, 2584.0], [6.3, 2588.0], [6.4, 2595.0], [6.5, 2605.0], [6.6, 2624.0], [6.7, 2657.0], [6.8, 2680.0], [6.9, 2688.0], [7.0, 2695.0], [7.1, 2701.0], [7.2, 2709.0], [7.3, 2713.0], [7.4, 2733.0], [7.5, 2739.0], [7.6, 2752.0], [7.7, 2771.0], [7.8, 2789.0], [7.9, 2806.0], [8.0, 2819.0], [8.1, 2829.0], [8.2, 2849.0], [8.3, 2857.0], [8.4, 2865.0], [8.5, 2875.0], [8.6, 2893.0], [8.7, 2905.0], [8.8, 2914.0], [8.9, 2918.0], [9.0, 2921.0], [9.1, 2925.0], [9.2, 2933.0], [9.3, 2947.0], [9.4, 2953.0], [9.5, 2975.0], [9.6, 2991.0], [9.7, 3010.0], [9.8, 3025.0], [9.9, 3036.0], [10.0, 3039.0], [10.1, 3052.0], [10.2, 3061.0], [10.3, 3071.0], [10.4, 3083.0], [10.5, 3093.0], [10.6, 3100.0], [10.7, 3112.0], [10.8, 3116.0], [10.9, 3121.0], [11.0, 3126.0], [11.1, 3135.0], [11.2, 3141.0], [11.3, 3147.0], [11.4, 3153.0], [11.5, 3166.0], [11.6, 3179.0], [11.7, 3189.0], [11.8, 3192.0], [11.9, 3201.0], [12.0, 3214.0], [12.1, 3219.0], [12.2, 3235.0], [12.3, 3244.0], [12.4, 3252.0], [12.5, 3261.0], [12.6, 3267.0], [12.7, 3275.0], [12.8, 3286.0], [12.9, 3294.0], [13.0, 3310.0], [13.1, 3318.0], [13.2, 3326.0], [13.3, 3333.0], [13.4, 3340.0], [13.5, 3344.0], [13.6, 3348.0], [13.7, 3354.0], [13.8, 3360.0], [13.9, 3363.0], [14.0, 3378.0], [14.1, 3385.0], [14.2, 3392.0], [14.3, 3399.0], [14.4, 3406.0], [14.5, 3419.0], [14.6, 3433.0], [14.7, 3451.0], [14.8, 3460.0], [14.9, 3471.0], [15.0, 3482.0], [15.1, 3491.0], [15.2, 3500.0], [15.3, 3510.0], [15.4, 3523.0], [15.5, 3537.0], [15.6, 3553.0], [15.7, 3567.0], [15.8, 3580.0], [15.9, 3586.0], [16.0, 3589.0], [16.1, 3598.0], [16.2, 3610.0], [16.3, 3627.0], [16.4, 3639.0], [16.5, 3646.0], [16.6, 3667.0], [16.7, 3670.0], [16.8, 3674.0], [16.9, 3687.0], [17.0, 3696.0], [17.1, 3713.0], [17.2, 3724.0], [17.3, 3735.0], [17.4, 3743.0], [17.5, 3758.0], [17.6, 3775.0], [17.7, 3793.0], [17.8, 3800.0], [17.9, 3827.0], [18.0, 3836.0], [18.1, 3844.0], [18.2, 3851.0], [18.3, 3865.0], [18.4, 3874.0], [18.5, 3894.0], [18.6, 3906.0], [18.7, 3914.0], [18.8, 3924.0], [18.9, 3932.0], [19.0, 3945.0], [19.1, 3950.0], [19.2, 3958.0], [19.3, 3968.0], [19.4, 3972.0], [19.5, 3982.0], [19.6, 3988.0], [19.7, 4000.0], [19.8, 4008.0], [19.9, 4017.0], [20.0, 4024.0], [20.1, 4029.0], [20.2, 4038.0], [20.3, 4048.0], [20.4, 4059.0], [20.5, 4065.0], [20.6, 4077.0], [20.7, 4082.0], [20.8, 4091.0], [20.9, 4095.0], [21.0, 4099.0], [21.1, 4105.0], [21.2, 4109.0], [21.3, 4115.0], [21.4, 4123.0], [21.5, 4141.0], [21.6, 4150.0], [21.7, 4154.0], [21.8, 4171.0], [21.9, 4190.0], [22.0, 4196.0], [22.1, 4204.0], [22.2, 4212.0], [22.3, 4217.0], [22.4, 4221.0], [22.5, 4233.0], [22.6, 4240.0], [22.7, 4246.0], [22.8, 4256.0], [22.9, 4265.0], [23.0, 4270.0], [23.1, 4275.0], [23.2, 4286.0], [23.3, 4300.0], [23.4, 4306.0], [23.5, 4313.0], [23.6, 4324.0], [23.7, 4334.0], [23.8, 4338.0], [23.9, 4345.0], [24.0, 4350.0], [24.1, 4354.0], [24.2, 4361.0], [24.3, 4367.0], [24.4, 4373.0], [24.5, 4380.0], [24.6, 4386.0], [24.7, 4393.0], [24.8, 4401.0], [24.9, 4408.0], [25.0, 4414.0], [25.1, 4425.0], [25.2, 4432.0], [25.3, 4438.0], [25.4, 4441.0], [25.5, 4445.0], [25.6, 4449.0], [25.7, 4462.0], [25.8, 4469.0], [25.9, 4475.0], [26.0, 4483.0], [26.1, 4493.0], [26.2, 4498.0], [26.3, 4506.0], [26.4, 4514.0], [26.5, 4518.0], [26.6, 4526.0], [26.7, 4534.0], [26.8, 4543.0], [26.9, 4548.0], [27.0, 4552.0], [27.1, 4559.0], [27.2, 4566.0], [27.3, 4573.0], [27.4, 4579.0], [27.5, 4583.0], [27.6, 4586.0], [27.7, 4590.0], [27.8, 4593.0], [27.9, 4602.0], [28.0, 4617.0], [28.1, 4634.0], [28.2, 4642.0], [28.3, 4643.0], [28.4, 4648.0], [28.5, 4660.0], [28.6, 4667.0], [28.7, 4675.0], [28.8, 4680.0], [28.9, 4692.0], [29.0, 4693.0], [29.1, 4698.0], [29.2, 4703.0], [29.3, 4706.0], [29.4, 4712.0], [29.5, 4722.0], [29.6, 4730.0], [29.7, 4737.0], [29.8, 4741.0], [29.9, 4744.0], [30.0, 4752.0], [30.1, 4758.0], [30.2, 4761.0], [30.3, 4766.0], [30.4, 4774.0], [30.5, 4779.0], [30.6, 4783.0], [30.7, 4787.0], [30.8, 4794.0], [30.9, 4797.0], [31.0, 4801.0], [31.1, 4810.0], [31.2, 4813.0], [31.3, 4818.0], [31.4, 4820.0], [31.5, 4828.0], [31.6, 4832.0], [31.7, 4836.0], [31.8, 4845.0], [31.9, 4852.0], [32.0, 4856.0], [32.1, 4863.0], [32.2, 4868.0], [32.3, 4873.0], [32.4, 4878.0], [32.5, 4889.0], [32.6, 4895.0], [32.7, 4901.0], [32.8, 4903.0], [32.9, 4910.0], [33.0, 4916.0], [33.1, 4919.0], [33.2, 4927.0], [33.3, 4936.0], [33.4, 4939.0], [33.5, 4945.0], [33.6, 4949.0], [33.7, 4962.0], [33.8, 4965.0], [33.9, 4970.0], [34.0, 4976.0], [34.1, 4979.0], [34.2, 4992.0], [34.3, 4996.0], [34.4, 5000.0], [34.5, 5008.0], [34.6, 5014.0], [34.7, 5018.0], [34.8, 5022.0], [34.9, 5025.0], [35.0, 5028.0], [35.1, 5035.0], [35.2, 5038.0], [35.3, 5042.0], [35.4, 5045.0], [35.5, 5050.0], [35.6, 5054.0], [35.7, 5060.0], [35.8, 5065.0], [35.9, 5069.0], [36.0, 5077.0], [36.1, 5083.0], [36.2, 5088.0], [36.3, 5090.0], [36.4, 5101.0], [36.5, 5106.0], [36.6, 5108.0], [36.7, 5115.0], [36.8, 5119.0], [36.9, 5126.0], [37.0, 5130.0], [37.1, 5136.0], [37.2, 5141.0], [37.3, 5144.0], [37.4, 5147.0], [37.5, 5150.0], [37.6, 5153.0], [37.7, 5157.0], [37.8, 5163.0], [37.9, 5167.0], [38.0, 5171.0], [38.1, 5177.0], [38.2, 5189.0], [38.3, 5194.0], [38.4, 5199.0], [38.5, 5203.0], [38.6, 5208.0], [38.7, 5211.0], [38.8, 5217.0], [38.9, 5225.0], [39.0, 5231.0], [39.1, 5234.0], [39.2, 5243.0], [39.3, 5247.0], [39.4, 5250.0], [39.5, 5256.0], [39.6, 5258.0], [39.7, 5261.0], [39.8, 5265.0], [39.9, 5270.0], [40.0, 5275.0], [40.1, 5279.0], [40.2, 5282.0], [40.3, 5285.0], [40.4, 5289.0], [40.5, 5295.0], [40.6, 5299.0], [40.7, 5306.0], [40.8, 5318.0], [40.9, 5321.0], [41.0, 5325.0], [41.1, 5328.0], [41.2, 5331.0], [41.3, 5336.0], [41.4, 5341.0], [41.5, 5344.0], [41.6, 5347.0], [41.7, 5349.0], [41.8, 5350.0], [41.9, 5356.0], [42.0, 5359.0], [42.1, 5366.0], [42.2, 5370.0], [42.3, 5373.0], [42.4, 5380.0], [42.5, 5387.0], [42.6, 5390.0], [42.7, 5396.0], [42.8, 5399.0], [42.9, 5403.0], [43.0, 5408.0], [43.1, 5411.0], [43.2, 5416.0], [43.3, 5418.0], [43.4, 5426.0], [43.5, 5428.0], [43.6, 5429.0], [43.7, 5436.0], [43.8, 5440.0], [43.9, 5444.0], [44.0, 5449.0], [44.1, 5455.0], [44.2, 5458.0], [44.3, 5464.0], [44.4, 5468.0], [44.5, 5471.0], [44.6, 5481.0], [44.7, 5483.0], [44.8, 5490.0], [44.9, 5492.0], [45.0, 5493.0], [45.1, 5499.0], [45.2, 5506.0], [45.3, 5510.0], [45.4, 5514.0], [45.5, 5517.0], [45.6, 5521.0], [45.7, 5523.0], [45.8, 5531.0], [45.9, 5534.0], [46.0, 5540.0], [46.1, 5544.0], [46.2, 5546.0], [46.3, 5547.0], [46.4, 5551.0], [46.5, 5557.0], [46.6, 5562.0], [46.7, 5563.0], [46.8, 5564.0], [46.9, 5568.0], [47.0, 5571.0], [47.1, 5574.0], [47.2, 5578.0], [47.3, 5583.0], [47.4, 5587.0], [47.5, 5593.0], [47.6, 5597.0], [47.7, 5602.0], [47.8, 5603.0], [47.9, 5608.0], [48.0, 5610.0], [48.1, 5613.0], [48.2, 5616.0], [48.3, 5621.0], [48.4, 5624.0], [48.5, 5633.0], [48.6, 5640.0], [48.7, 5644.0], [48.8, 5647.0], [48.9, 5653.0], [49.0, 5658.0], [49.1, 5662.0], [49.2, 5668.0], [49.3, 5672.0], [49.4, 5675.0], [49.5, 5678.0], [49.6, 5684.0], [49.7, 5686.0], [49.8, 5690.0], [49.9, 5695.0], [50.0, 5700.0], [50.1, 5708.0], [50.2, 5712.0], [50.3, 5717.0], [50.4, 5728.0], [50.5, 5731.0], [50.6, 5736.0], [50.7, 5738.0], [50.8, 5740.0], [50.9, 5743.0], [51.0, 5747.0], [51.1, 5750.0], [51.2, 5753.0], [51.3, 5754.0], [51.4, 5755.0], [51.5, 5758.0], [51.6, 5761.0], [51.7, 5763.0], [51.8, 5768.0], [51.9, 5770.0], [52.0, 5773.0], [52.1, 5774.0], [52.2, 5778.0], [52.3, 5782.0], [52.4, 5787.0], [52.5, 5790.0], [52.6, 5793.0], [52.7, 5796.0], [52.8, 5803.0], [52.9, 5807.0], [53.0, 5812.0], [53.1, 5815.0], [53.2, 5819.0], [53.3, 5823.0], [53.4, 5825.0], [53.5, 5829.0], [53.6, 5831.0], [53.7, 5834.0], [53.8, 5839.0], [53.9, 5842.0], [54.0, 5845.0], [54.1, 5847.0], [54.2, 5850.0], [54.3, 5856.0], [54.4, 5859.0], [54.5, 5863.0], [54.6, 5868.0], [54.7, 5872.0], [54.8, 5875.0], [54.9, 5880.0], [55.0, 5884.0], [55.1, 5887.0], [55.2, 5890.0], [55.3, 5895.0], [55.4, 5901.0], [55.5, 5904.0], [55.6, 5905.0], [55.7, 5908.0], [55.8, 5911.0], [55.9, 5914.0], [56.0, 5917.0], [56.1, 5919.0], [56.2, 5925.0], [56.3, 5928.0], [56.4, 5936.0], [56.5, 5943.0], [56.6, 5949.0], [56.7, 5955.0], [56.8, 5959.0], [56.9, 5970.0], [57.0, 5976.0], [57.1, 5980.0], [57.2, 5985.0], [57.3, 5990.0], [57.4, 5994.0], [57.5, 5996.0], [57.6, 6000.0], [57.7, 6010.0], [57.8, 6011.0], [57.9, 6017.0], [58.0, 6024.0], [58.1, 6026.0], [58.2, 6036.0], [58.3, 6040.0], [58.4, 6043.0], [58.5, 6046.0], [58.6, 6054.0], [58.7, 6059.0], [58.8, 6065.0], [58.9, 6067.0], [59.0, 6075.0], [59.1, 6079.0], [59.2, 6083.0], [59.3, 6087.0], [59.4, 6092.0], [59.5, 6094.0], [59.6, 6104.0], [59.7, 6108.0], [59.8, 6114.0], [59.9, 6119.0], [60.0, 6126.0], [60.1, 6135.0], [60.2, 6136.0], [60.3, 6140.0], [60.4, 6144.0], [60.5, 6147.0], [60.6, 6152.0], [60.7, 6156.0], [60.8, 6159.0], [60.9, 6164.0], [61.0, 6167.0], [61.1, 6171.0], [61.2, 6178.0], [61.3, 6184.0], [61.4, 6190.0], [61.5, 6195.0], [61.6, 6203.0], [61.7, 6207.0], [61.8, 6210.0], [61.9, 6212.0], [62.0, 6222.0], [62.1, 6229.0], [62.2, 6236.0], [62.3, 6244.0], [62.4, 6250.0], [62.5, 6254.0], [62.6, 6257.0], [62.7, 6261.0], [62.8, 6264.0], [62.9, 6266.0], [63.0, 6270.0], [63.1, 6280.0], [63.2, 6291.0], [63.3, 6296.0], [63.4, 6298.0], [63.5, 6305.0], [63.6, 6310.0], [63.7, 6315.0], [63.8, 6318.0], [63.9, 6321.0], [64.0, 6325.0], [64.1, 6330.0], [64.2, 6335.0], [64.3, 6344.0], [64.4, 6348.0], [64.5, 6350.0], [64.6, 6352.0], [64.7, 6358.0], [64.8, 6366.0], [64.9, 6370.0], [65.0, 6372.0], [65.1, 6375.0], [65.2, 6379.0], [65.3, 6389.0], [65.4, 6392.0], [65.5, 6401.0], [65.6, 6406.0], [65.7, 6413.0], [65.8, 6416.0], [65.9, 6421.0], [66.0, 6425.0], [66.1, 6430.0], [66.2, 6431.0], [66.3, 6438.0], [66.4, 6448.0], [66.5, 6452.0], [66.6, 6458.0], [66.7, 6464.0], [66.8, 6465.0], [66.9, 6471.0], [67.0, 6473.0], [67.1, 6475.0], [67.2, 6480.0], [67.3, 6483.0], [67.4, 6486.0], [67.5, 6490.0], [67.6, 6493.0], [67.7, 6496.0], [67.8, 6502.0], [67.9, 6508.0], [68.0, 6510.0], [68.1, 6514.0], [68.2, 6522.0], [68.3, 6527.0], [68.4, 6536.0], [68.5, 6539.0], [68.6, 6544.0], [68.7, 6557.0], [68.8, 6562.0], [68.9, 6571.0], [69.0, 6575.0], [69.1, 6584.0], [69.2, 6589.0], [69.3, 6592.0], [69.4, 6598.0], [69.5, 6603.0], [69.6, 6606.0], [69.7, 6610.0], [69.8, 6619.0], [69.9, 6624.0], [70.0, 6629.0], [70.1, 6635.0], [70.2, 6640.0], [70.3, 6645.0], [70.4, 6652.0], [70.5, 6660.0], [70.6, 6665.0], [70.7, 6675.0], [70.8, 6682.0], [70.9, 6689.0], [71.0, 6693.0], [71.1, 6702.0], [71.2, 6710.0], [71.3, 6726.0], [71.4, 6730.0], [71.5, 6734.0], [71.6, 6744.0], [71.7, 6751.0], [71.8, 6763.0], [71.9, 6766.0], [72.0, 6771.0], [72.1, 6778.0], [72.2, 6786.0], [72.3, 6792.0], [72.4, 6797.0], [72.5, 6803.0], [72.6, 6806.0], [72.7, 6814.0], [72.8, 6821.0], [72.9, 6831.0], [73.0, 6838.0], [73.1, 6845.0], [73.2, 6850.0], [73.3, 6857.0], [73.4, 6860.0], [73.5, 6867.0], [73.6, 6870.0], [73.7, 6882.0], [73.8, 6889.0], [73.9, 6898.0], [74.0, 6902.0], [74.1, 6904.0], [74.2, 6909.0], [74.3, 6924.0], [74.4, 6931.0], [74.5, 6941.0], [74.6, 6948.0], [74.7, 6951.0], [74.8, 6958.0], [74.9, 6963.0], [75.0, 6968.0], [75.1, 6971.0], [75.2, 6979.0], [75.3, 6988.0], [75.4, 6992.0], [75.5, 6995.0], [75.6, 6998.0], [75.7, 7008.0], [75.8, 7012.0], [75.9, 7016.0], [76.0, 7020.0], [76.1, 7032.0], [76.2, 7038.0], [76.3, 7044.0], [76.4, 7050.0], [76.5, 7058.0], [76.6, 7061.0], [76.7, 7068.0], [76.8, 7081.0], [76.9, 7093.0], [77.0, 7108.0], [77.1, 7115.0], [77.2, 7122.0], [77.3, 7124.0], [77.4, 7131.0], [77.5, 7139.0], [77.6, 7146.0], [77.7, 7149.0], [77.8, 7159.0], [77.9, 7163.0], [78.0, 7170.0], [78.1, 7175.0], [78.2, 7180.0], [78.3, 7183.0], [78.4, 7189.0], [78.5, 7195.0], [78.6, 7201.0], [78.7, 7206.0], [78.8, 7211.0], [78.9, 7216.0], [79.0, 7219.0], [79.1, 7224.0], [79.2, 7229.0], [79.3, 7234.0], [79.4, 7241.0], [79.5, 7244.0], [79.6, 7250.0], [79.7, 7254.0], [79.8, 7264.0], [79.9, 7268.0], [80.0, 7272.0], [80.1, 7284.0], [80.2, 7289.0], [80.3, 7305.0], [80.4, 7313.0], [80.5, 7323.0], [80.6, 7326.0], [80.7, 7330.0], [80.8, 7333.0], [80.9, 7342.0], [81.0, 7350.0], [81.1, 7360.0], [81.2, 7366.0], [81.3, 7374.0], [81.4, 7386.0], [81.5, 7397.0], [81.6, 7406.0], [81.7, 7414.0], [81.8, 7420.0], [81.9, 7424.0], [82.0, 7430.0], [82.1, 7441.0], [82.2, 7447.0], [82.3, 7456.0], [82.4, 7462.0], [82.5, 7471.0], [82.6, 7486.0], [82.7, 7502.0], [82.8, 7523.0], [82.9, 7535.0], [83.0, 7539.0], [83.1, 7553.0], [83.2, 7561.0], [83.3, 7569.0], [83.4, 7576.0], [83.5, 7581.0], [83.6, 7586.0], [83.7, 7600.0], [83.8, 7605.0], [83.9, 7612.0], [84.0, 7621.0], [84.1, 7626.0], [84.2, 7632.0], [84.3, 7648.0], [84.4, 7661.0], [84.5, 7668.0], [84.6, 7677.0], [84.7, 7685.0], [84.8, 7700.0], [84.9, 7711.0], [85.0, 7719.0], [85.1, 7726.0], [85.2, 7736.0], [85.3, 7748.0], [85.4, 7763.0], [85.5, 7770.0], [85.6, 7779.0], [85.7, 7787.0], [85.8, 7795.0], [85.9, 7800.0], [86.0, 7814.0], [86.1, 7819.0], [86.2, 7829.0], [86.3, 7842.0], [86.4, 7846.0], [86.5, 7853.0], [86.6, 7865.0], [86.7, 7886.0], [86.8, 7898.0], [86.9, 7920.0], [87.0, 7928.0], [87.1, 7935.0], [87.2, 7946.0], [87.3, 7951.0], [87.4, 7967.0], [87.5, 7977.0], [87.6, 7997.0], [87.7, 8003.0], [87.8, 8009.0], [87.9, 8023.0], [88.0, 8033.0], [88.1, 8040.0], [88.2, 8052.0], [88.3, 8068.0], [88.4, 8079.0], [88.5, 8097.0], [88.6, 8107.0], [88.7, 8133.0], [88.8, 8137.0], [88.9, 8145.0], [89.0, 8154.0], [89.1, 8168.0], [89.2, 8192.0], [89.3, 8202.0], [89.4, 8219.0], [89.5, 8224.0], [89.6, 8251.0], [89.7, 8269.0], [89.8, 8273.0], [89.9, 8290.0], [90.0, 8320.0], [90.1, 8327.0], [90.2, 8340.0], [90.3, 8353.0], [90.4, 8372.0], [90.5, 8382.0], [90.6, 8410.0], [90.7, 8440.0], [90.8, 8465.0], [90.9, 8488.0], [91.0, 8505.0], [91.1, 8531.0], [91.2, 8546.0], [91.3, 8562.0], [91.4, 8569.0], [91.5, 8601.0], [91.6, 8628.0], [91.7, 8661.0], [91.8, 8685.0], [91.9, 8705.0], [92.0, 8727.0], [92.1, 8745.0], [92.2, 8777.0], [92.3, 8801.0], [92.4, 8818.0], [92.5, 8841.0], [92.6, 8853.0], [92.7, 8885.0], [92.8, 8911.0], [92.9, 8929.0], [93.0, 8960.0], [93.1, 8989.0], [93.2, 9018.0], [93.3, 9035.0], [93.4, 9063.0], [93.5, 9077.0], [93.6, 9099.0], [93.7, 9114.0], [93.8, 9137.0], [93.9, 9162.0], [94.0, 9237.0], [94.1, 9246.0], [94.2, 9286.0], [94.3, 9314.0], [94.4, 9354.0], [94.5, 9379.0], [94.6, 9401.0], [94.7, 9429.0], [94.8, 9476.0], [94.9, 9489.0], [95.0, 9510.0], [95.1, 9537.0], [95.2, 9554.0], [95.3, 9591.0], [95.4, 9659.0], [95.5, 9723.0], [95.6, 9765.0], [95.7, 9816.0], [95.8, 9881.0], [95.9, 9922.0], [96.0, 9965.0], [96.1, 10032.0], [96.2, 10058.0], [96.3, 10145.0], [96.4, 10199.0], [96.5, 10248.0], [96.6, 10304.0], [96.7, 10336.0], [96.8, 10399.0], [96.9, 10469.0], [97.0, 10539.0], [97.1, 10619.0], [97.2, 10746.0], [97.3, 10838.0], [97.4, 10912.0], [97.5, 11022.0], [97.6, 11099.0], [97.7, 11157.0], [97.8, 11249.0], [97.9, 11508.0], [98.0, 11639.0], [98.1, 11760.0], [98.2, 11939.0], [98.3, 11993.0], [98.4, 12052.0], [98.5, 12249.0], [98.6, 12380.0], [98.7, 12450.0], [98.8, 12554.0], [98.9, 12823.0], [99.0, 13046.0], [99.1, 13161.0], [99.2, 13448.0], [99.3, 13574.0], [99.4, 13687.0], [99.5, 13938.0], [99.6, 14143.0], [99.7, 15273.0], [99.8, 17280.0], [99.9, 18490.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 145.0, "series": [{"data": [[300.0, 1.0], [1600.0, 1.0], [2100.0, 19.0], [2300.0, 62.0], [2200.0, 67.0], [2400.0, 99.0], [2500.0, 86.0], [2600.0, 33.0], [2700.0, 39.0], [2800.0, 40.0], [2900.0, 54.0], [3000.0, 49.0], [3100.0, 67.0], [3300.0, 70.0], [3200.0, 56.0], [3400.0, 45.0], [3500.0, 48.0], [3600.0, 49.0], [3700.0, 38.0], [3800.0, 39.0], [3900.0, 60.0], [4000.0, 69.0], [4100.0, 54.0], [4300.0, 76.0], [4200.0, 64.0], [4600.0, 67.0], [4400.0, 75.0], [4500.0, 85.0], [4800.0, 89.0], [4700.0, 95.0], [4900.0, 88.0], [5000.0, 103.0], [5100.0, 106.0], [5200.0, 115.0], [5300.0, 115.0], [5600.0, 121.0], [5500.0, 130.0], [5400.0, 119.0], [5700.0, 145.0], [5800.0, 137.0], [6100.0, 102.0], [5900.0, 114.0], [6000.0, 103.0], [6300.0, 105.0], [6200.0, 98.0], [6500.0, 85.0], [6600.0, 88.0], [6400.0, 120.0], [6900.0, 85.0], [6700.0, 69.0], [6800.0, 80.0], [7000.0, 70.0], [7100.0, 83.0], [7300.0, 67.0], [7400.0, 61.0], [7200.0, 87.0], [7500.0, 52.0], [7600.0, 57.0], [7800.0, 48.0], [7900.0, 44.0], [7700.0, 56.0], [8000.0, 45.0], [8100.0, 40.0], [8600.0, 20.0], [8300.0, 33.0], [8200.0, 33.0], [8700.0, 22.0], [8400.0, 19.0], [8500.0, 29.0], [9000.0, 22.0], [8900.0, 22.0], [9100.0, 19.0], [8800.0, 24.0], [9200.0, 12.0], [9300.0, 20.0], [9400.0, 21.0], [9500.0, 18.0], [9600.0, 6.0], [9700.0, 10.0], [9800.0, 10.0], [10200.0, 9.0], [10000.0, 10.0], [9900.0, 11.0], [10100.0, 9.0], [10300.0, 11.0], [10400.0, 7.0], [10700.0, 6.0], [10500.0, 6.0], [10600.0, 5.0], [11000.0, 8.0], [10800.0, 7.0], [10900.0, 4.0], [11100.0, 6.0], [11200.0, 4.0], [11400.0, 3.0], [11500.0, 5.0], [11300.0, 1.0], [11700.0, 3.0], [11600.0, 3.0], [12000.0, 6.0], [11900.0, 7.0], [11800.0, 4.0], [12200.0, 4.0], [12100.0, 1.0], [12400.0, 6.0], [12300.0, 4.0], [12500.0, 7.0], [12600.0, 1.0], [12800.0, 3.0], [13000.0, 6.0], [12900.0, 1.0], [13100.0, 2.0], [13300.0, 2.0], [13200.0, 2.0], [13600.0, 5.0], [13700.0, 3.0], [13500.0, 3.0], [13400.0, 3.0], [13800.0, 2.0], [14200.0, 1.0], [14100.0, 3.0], [13900.0, 3.0], [15000.0, 3.0], [15200.0, 1.0], [15600.0, 1.0], [15800.0, 1.0], [16000.0, 1.0], [17100.0, 1.0], [17200.0, 2.0], [17400.0, 1.0], [17800.0, 1.0], [17900.0, 1.0], [18400.0, 1.0], [18700.0, 1.0], [18600.0, 1.0], [21800.0, 1.0], [21900.0, 1.0], [22600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5189.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5189.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.870967741935484, "minX": 1.60506792E12, "maxY": 12.0, "series": [{"data": [[1.60506894E12, 12.0], [1.60506924E12, 12.0], [1.60506954E12, 12.0], [1.60506984E12, 12.0], [1.60506792E12, 11.935064935064934], [1.60506822E12, 12.0], [1.60507044E12, 9.870967741935484], [1.60506852E12, 12.0], [1.60507014E12, 12.0], [1.60506882E12, 12.0], [1.60506912E12, 12.0], [1.60506846E12, 12.0], [1.60506876E12, 12.0], [1.60507038E12, 12.0], [1.60506906E12, 12.0], [1.60506936E12, 12.0], [1.60506966E12, 12.0], [1.60506996E12, 12.0], [1.60506804E12, 12.0], [1.60506834E12, 12.0], [1.60506864E12, 12.0], [1.60507026E12, 12.0], [1.6050699E12, 12.0], [1.60506798E12, 12.0], [1.6050702E12, 12.0], [1.60506828E12, 12.0], [1.60506858E12, 12.0], [1.60506888E12, 12.0], [1.60506918E12, 12.0], [1.60506948E12, 12.0], [1.60506978E12, 12.0], [1.60507008E12, 12.0], [1.60506816E12, 12.0], [1.60506942E12, 12.0], [1.60506972E12, 12.0], [1.6050681E12, 12.0], [1.60507032E12, 12.0], [1.6050684E12, 12.0], [1.60507002E12, 12.0], [1.6050687E12, 12.0], [1.605069E12, 12.0], [1.6050693E12, 12.0], [1.6050696E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60507044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3617.0, "minX": 1.0, "maxY": 7059.0, "series": [{"data": [[8.0, 5040.0], [4.0, 7019.0], [2.0, 7059.0], [1.0, 6831.0], [9.0, 6147.0], [10.0, 6472.0], [5.0, 6949.0], [11.0, 6545.0], [12.0, 5820.21263035921], [6.0, 6902.0], [3.0, 7032.0], [7.0, 3617.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.98631984585746, 5820.865317919072]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 243.1, "minX": 1.60506792E12, "maxY": 826971.5, "series": [{"data": [[1.60506894E12, 826971.5], [1.60506924E12, 686782.0], [1.60506954E12, 327650.18333333335], [1.60506984E12, 754395.7], [1.60506792E12, 522738.86666666664], [1.60506822E12, 440737.18333333335], [1.60507044E12, 154510.58333333334], [1.60506852E12, 764298.1166666667], [1.60507014E12, 622765.7], [1.60506882E12, 575404.1], [1.60506912E12, 538944.7], [1.60506846E12, 765863.0333333333], [1.60506876E12, 579191.75], [1.60507038E12, 484644.36666666664], [1.60506906E12, 446289.81666666665], [1.60506936E12, 532012.0333333333], [1.60506966E12, 441816.06666666665], [1.60506996E12, 544601.95], [1.60506804E12, 522536.0333333333], [1.60506834E12, 321773.73333333334], [1.60506864E12, 651509.3333333334], [1.60507026E12, 555286.5666666667], [1.6050699E12, 633830.5166666667], [1.60506798E12, 686292.7833333333], [1.6050702E12, 561476.95], [1.60506828E12, 385726.0], [1.60506858E12, 647154.55], [1.60506888E12, 509309.88333333336], [1.60506918E12, 650343.85], [1.60506948E12, 549847.3833333333], [1.60506978E12, 781910.65], [1.60507008E12, 507829.95], [1.60506816E12, 649143.7666666667], [1.60506942E12, 553321.0], [1.60506972E12, 698099.4166666666], [1.6050681E12, 463238.5], [1.60507032E12, 494127.35], [1.6050684E12, 534464.3333333334], [1.60507002E12, 552396.7166666667], [1.6050687E12, 685390.6166666667], [1.605069E12, 507993.31666666665], [1.6050693E12, 494215.35], [1.6050696E12, 375066.7833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60506894E12, 765.7833333333333], [1.60506924E12, 530.6166666666667], [1.60506954E12, 600.3666666666667], [1.60506984E12, 838.0], [1.60506792E12, 585.9], [1.60506822E12, 802.1833333333333], [1.60507044E12, 243.1], [1.60506852E12, 845.0333333333333], [1.60507014E12, 997.2333333333333], [1.60506882E12, 911.3166666666667], [1.60506912E12, 696.6], [1.60506846E12, 792.7], [1.60506876E12, 756.6666666666666], [1.60507038E12, 766.9333333333333], [1.60506906E12, 759.5166666666667], [1.60506936E12, 863.0], [1.60506966E12, 1080.85], [1.60506996E12, 1179.0833333333333], [1.60506804E12, 999.2333333333333], [1.60506834E12, 1417.9], [1.60506864E12, 994.9166666666666], [1.60507026E12, 1103.15], [1.6050699E12, 1162.5833333333333], [1.60506798E12, 557.9333333333333], [1.6050702E12, 1077.4], [1.60506828E12, 728.1833333333333], [1.60506858E12, 1080.7333333333333], [1.60506888E12, 1113.8666666666666], [1.60506918E12, 872.0], [1.60506948E12, 897.3666666666667], [1.60506978E12, 853.0], [1.60507008E12, 958.5166666666667], [1.60506816E12, 1031.7], [1.60506942E12, 883.1166666666667], [1.60506972E12, 753.4333333333333], [1.6050681E12, 808.3833333333333], [1.60507032E12, 754.6333333333333], [1.6050684E12, 876.8333333333334], [1.60507002E12, 885.3166666666667], [1.6050687E12, 1108.8166666666666], [1.605069E12, 1279.6666666666667], [1.6050693E12, 1041.8333333333333], [1.6050696E12, 1321.9333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60507044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3743.94708994709, "minX": 1.60506792E12, "maxY": 9309.692307692307, "series": [{"data": [[1.60506894E12, 6903.36], [1.60506924E12, 9124.373333333333], [1.60506954E12, 9033.614457831329], [1.60506984E12, 6571.490909090907], [1.60506792E12, 6301.2467532467535], [1.60506822E12, 6235.348623853211], [1.60507044E12, 6381.903225806451], [1.60506852E12, 6537.468468468466], [1.60507014E12, 5589.396946564888], [1.60506882E12, 6048.142857142856], [1.60506912E12, 7680.236559139783], [1.60506846E12, 6981.759615384614], [1.60506876E12, 7198.660000000002], [1.60507038E12, 6964.7572815534], [1.60506906E12, 7148.33333333333], [1.60506936E12, 5664.756097560974], [1.60506966E12, 4694.532467532473], [1.60506996E12, 4552.743589743592], [1.60506804E12, 5131.446808510637], [1.60506834E12, 3743.94708994709], [1.60506864E12, 5361.6030534351175], [1.60507026E12, 5007.76712328767], [1.6050699E12, 4770.136363636366], [1.60506798E12, 9309.692307692307], [1.6050702E12, 4909.3239436619715], [1.60506828E12, 7464.990196078428], [1.60506858E12, 4962.538461538464], [1.60506888E12, 5015.4217687074815], [1.60506918E12, 6296.728070175439], [1.60506948E12, 5801.024793388428], [1.60506978E12, 6473.901785714286], [1.60507008E12, 5897.174603174601], [1.60506816E12, 5139.892857142857], [1.60506942E12, 5943.573770491807], [1.60506972E12, 7022.656565656563], [1.6050681E12, 6283.836206896552], [1.60507032E12, 7075.188118811881], [1.6050684E12, 5735.344000000002], [1.60507002E12, 6060.448275862069], [1.6050687E12, 5062.319727891154], [1.605069E12, 4286.188235294116], [1.6050693E12, 5281.698630136985], [1.6050696E12, 3977.535911602211]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60507044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3743.0793650793667, "minX": 1.60506792E12, "maxY": 9305.75641025641, "series": [{"data": [[1.60506894E12, 6899.339999999999], [1.60506924E12, 9120.880000000001], [1.60506954E12, 9031.90361445783], [1.60506984E12, 6568.872727272727], [1.60506792E12, 6298.402597402598], [1.60506822E12, 6233.247706422016], [1.60507044E12, 6380.25806451613], [1.60506852E12, 6533.5675675675675], [1.60507014E12, 5587.702290076336], [1.60506882E12, 6045.504201680676], [1.60506912E12, 7678.010752688171], [1.60506846E12, 6978.413461538462], [1.60506876E12, 7195.749999999996], [1.60507038E12, 6962.825242718444], [1.60506906E12, 7146.470588235295], [1.60506936E12, 5663.040650406505], [1.60506966E12, 4693.3506493506475], [1.60506996E12, 4551.3974358974365], [1.60506804E12, 5129.567375886523], [1.60506834E12, 3743.0793650793667], [1.60506864E12, 5359.503816793894], [1.60507026E12, 5006.397260273975], [1.6050699E12, 4768.740259740259], [1.60506798E12, 9305.75641025641], [1.6050702E12, 4907.880281690141], [1.60506828E12, 7463.28431372549], [1.60506858E12, 4960.146853146851], [1.60506888E12, 5013.952380952381], [1.60506918E12, 6294.596491228073], [1.60506948E12, 5799.272727272728], [1.60506978E12, 6471.392857142858], [1.60507008E12, 5895.515873015871], [1.60506816E12, 5137.45], [1.60506942E12, 5941.877049180327], [1.60506972E12, 7020.060606060605], [1.6050681E12, 6281.956896551725], [1.60507032E12, 7073.267326732673], [1.6050684E12, 5733.224], [1.60507002E12, 6058.275862068968], [1.6050687E12, 5060.340136054423], [1.605069E12, 4284.9705882352955], [1.6050693E12, 5280.3972602739705], [1.6050696E12, 3976.795580110495]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60507044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.061643835616438394, "minX": 1.60506792E12, "maxY": 1.6493506493506496, "series": [{"data": [[1.60506894E12, 0.12000000000000005], [1.60506924E12, 0.1333333333333333], [1.60506954E12, 0.16867469879518082], [1.60506984E12, 0.09090909090909087], [1.60506792E12, 1.6493506493506496], [1.60506822E12, 0.14678899082568803], [1.60507044E12, 0.16129032258064516], [1.60506852E12, 0.10810810810810811], [1.60507014E12, 0.09923664122137404], [1.60506882E12, 0.10924369747899168], [1.60506912E12, 0.12903225806451613], [1.60506846E12, 0.11538461538461539], [1.60506876E12, 0.14999999999999997], [1.60507038E12, 0.11650485436893204], [1.60506906E12, 0.11764705882352947], [1.60506936E12, 0.11382113821138211], [1.60506966E12, 0.09740259740259741], [1.60506996E12, 0.0705128205128205], [1.60506804E12, 0.09929078014184399], [1.60506834E12, 0.10052910052910048], [1.60506864E12, 0.06870229007633588], [1.60507026E12, 0.061643835616438394], [1.6050699E12, 0.07792207792207796], [1.60506798E12, 0.20512820512820518], [1.6050702E12, 0.09154929577464789], [1.60506828E12, 0.12745098039215685], [1.60506858E12, 0.09790209790209796], [1.60506888E12, 0.08843537414965986], [1.60506918E12, 0.1228070175438596], [1.60506948E12, 0.10743801652892564], [1.60506978E12, 0.1071428571428572], [1.60507008E12, 0.09523809523809522], [1.60506816E12, 0.12142857142857139], [1.60506942E12, 0.09836065573770494], [1.60506972E12, 0.10101010101010101], [1.6050681E12, 0.10344827586206898], [1.60507032E12, 0.10891089108910887], [1.6050684E12, 0.12000000000000001], [1.60507002E12, 0.103448275862069], [1.6050687E12, 0.10204081632653066], [1.605069E12, 0.08235294117647059], [1.6050693E12, 0.09589041095890412], [1.6050696E12, 0.07734806629834257]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60507044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 380.0, "minX": 1.60506792E12, "maxY": 22636.0, "series": [{"data": [[1.60506894E12, 12377.0], [1.60506924E12, 22636.0], [1.60506954E12, 13448.0], [1.60506984E12, 8834.0], [1.60506792E12, 9316.0], [1.60506822E12, 9813.0], [1.60507044E12, 8011.0], [1.60506852E12, 8333.0], [1.60507014E12, 9237.0], [1.60506882E12, 9244.0], [1.60506912E12, 14133.0], [1.60506846E12, 10532.0], [1.60506876E12, 10199.0], [1.60507038E12, 10812.0], [1.60506906E12, 13938.0], [1.60506936E12, 10912.0], [1.60506966E12, 8005.0], [1.60506996E12, 8134.0], [1.60506804E12, 10066.0], [1.60506834E12, 9430.0], [1.60506864E12, 10746.0], [1.60507026E12, 10866.0], [1.6050699E12, 8531.0], [1.60506798E12, 16054.0], [1.6050702E12, 10169.0], [1.60506828E12, 12213.0], [1.60506858E12, 7704.0], [1.60506888E12, 8319.0], [1.60506918E12, 7976.0], [1.60506948E12, 13367.0], [1.60506978E12, 9004.0], [1.60507008E12, 8683.0], [1.60506816E12, 8145.0], [1.60506942E12, 13840.0], [1.60506972E12, 9499.0], [1.6050681E12, 15010.0], [1.60507032E12, 12503.0], [1.6050684E12, 10305.0], [1.60507002E12, 8853.0], [1.6050687E12, 10398.0], [1.605069E12, 7829.0], [1.6050693E12, 13497.0], [1.6050696E12, 6727.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60506894E12, 2735.0], [1.60506924E12, 4491.0], [1.60506954E12, 4094.0], [1.60506984E12, 3380.0], [1.60506792E12, 380.0], [1.60506822E12, 3572.0], [1.60507044E12, 5040.0], [1.60506852E12, 4065.0479998397827], [1.60507014E12, 2383.0], [1.60506882E12, 4206.319994878769], [1.60506912E12, 3629.0], [1.60506846E12, 4197.0], [1.60506876E12, 4334.0], [1.60507038E12, 3596.0], [1.60506906E12, 4537.0], [1.60506936E12, 2298.3479925203324], [1.60506966E12, 2251.7399995565415], [1.60506996E12, 2380.9779810595514], [1.60506804E12, 2181.111999864578], [1.60506834E12, 2261.4199999094008], [1.60506864E12, 2290.1279998111727], [1.60507026E12, 2255.335998878479], [1.6050699E12, 2145.3699997782705], [1.60506798E12, 5059.0], [1.6050702E12, 2307.4349998295306], [1.60506828E12, 3731.0], [1.60506858E12, 2818.599992275238], [1.60506888E12, 2443.9599989414214], [1.60506918E12, 3598.4149926245213], [1.60506948E12, 3583.135999069214], [1.60506978E12, 4787.135999784469], [1.60507008E12, 2614.149998486042], [1.60506816E12, 3263.6139997982978], [1.60506942E12, 3312.4949916422365], [1.60506972E12, 3954.0], [1.6050681E12, 2431.0], [1.60507032E12, 3968.0], [1.6050684E12, 3254.645994923115], [1.60507002E12, 2806.33499456048], [1.6050687E12, 2436.3199996471403], [1.605069E12, 2108.772999714613], [1.6050693E12, 2380.229999649525], [1.6050696E12, 2202.827999739647]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60506894E12, 2735.0], [1.60506924E12, 4491.0], [1.60506954E12, 4094.0], [1.60506984E12, 3390.8790011644364], [1.60506792E12, 380.0], [1.60506822E12, 3576.895000576973], [1.60507044E12, 5040.0], [1.60506852E12, 4065.652800064087], [1.60507014E12, 2383.0], [1.60506882E12, 4225.652002048492], [1.60506912E12, 3629.0], [1.60506846E12, 4198.145500290394], [1.60506876E12, 4334.0], [1.60507038E12, 3600.1144013786316], [1.60506906E12, 4540.171701581478], [1.60506936E12, 2326.582802991867], [1.60506966E12, 2253.4140001773835], [1.60506996E12, 2452.4758075761797], [1.60506804E12, 2181.6232000541686], [1.60506834E12, 2261.7620000362394], [1.60506864E12, 2290.840800075531], [1.60507026E12, 2259.5696004486085], [1.6050699E12, 2146.2070000886915], [1.60506798E12, 5059.0], [1.6050702E12, 2308.0785000681876], [1.60506828E12, 3734.3884016895295], [1.60506858E12, 2847.760003089905], [1.60506888E12, 2447.9560004234313], [1.60506918E12, 3626.2565029501916], [1.60506948E12, 3586.6496003723146], [1.60506978E12, 4787.949600086212], [1.60507008E12, 2619.865000605583], [1.60506816E12, 3264.3754000806807], [1.60506942E12, 3344.044503343105], [1.60506972E12, 3954.0], [1.6050681E12, 2431.0], [1.60507032E12, 3968.499800496101], [1.6050684E12, 3273.810602030754], [1.60507002E12, 2826.868502175808], [1.6050687E12, 2437.6520001411436], [1.605069E12, 2109.850300114155], [1.6050693E12, 2381.5530001401903], [1.6050696E12, 2203.8108001041414]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60506894E12, 2735.0], [1.60506924E12, 4491.0], [1.60506954E12, 4094.0], [1.60506984E12, 3385.9949985444546], [1.60506792E12, 380.0], [1.60506822E12, 3574.474999278784], [1.60507044E12, 5040.0], [1.60506852E12, 4065.3839999198913], [1.60507014E12, 2383.0], [1.60506882E12, 4217.0599974393845], [1.60506912E12, 3629.0], [1.60506846E12, 4197.0], [1.60506876E12, 4334.0], [1.60507038E12, 3596.0], [1.60506906E12, 4537.0], [1.60506936E12, 2314.033996260166], [1.60506966E12, 2252.6699997782707], [1.60506996E12, 2420.6989905297755], [1.60506804E12, 2181.395999932289], [1.60506834E12, 2261.6099999547005], [1.60506864E12, 2290.523999905586], [1.60507026E12, 2257.6879994392393], [1.6050699E12, 2145.8349998891354], [1.60506798E12, 5059.0], [1.6050702E12, 2307.7924999147654], [1.60506828E12, 3731.0], [1.60506858E12, 2834.799996137619], [1.60506888E12, 2446.1799994707108], [1.60506918E12, 3613.8824963122606], [1.60506948E12, 3585.0879995346068], [1.60506978E12, 4787.587999892235], [1.60507008E12, 2617.324999243021], [1.60506816E12, 3264.036999899149], [1.60506942E12, 3330.0224958211184], [1.60506972E12, 3954.0], [1.6050681E12, 2431.0], [1.60507032E12, 3968.0], [1.6050684E12, 3265.292997461557], [1.60507002E12, 2817.74249728024], [1.6050687E12, 2437.0599998235703], [1.605069E12, 2109.3714998573064], [1.6050693E12, 2380.9649998247623], [1.6050696E12, 2203.3739998698234]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60506894E12, 2735.0], [1.60506924E12, 4491.0], [1.60506954E12, 4094.0], [1.60506984E12, 3380.0], [1.60506792E12, 380.0], [1.60506822E12, 3572.0], [1.60507044E12, 5040.0], [1.60506852E12, 4065.0], [1.60507014E12, 2383.0], [1.60506882E12, 4192.0], [1.60506912E12, 3629.0], [1.60506846E12, 4197.0], [1.60506876E12, 4334.0], [1.60507038E12, 3596.0], [1.60506906E12, 4537.0], [1.60506936E12, 2269.0], [1.60506966E12, 2247.0], [1.60506996E12, 2172.0], [1.60506804E12, 2180.0], [1.60506834E12, 2260.0], [1.60506864E12, 2289.0], [1.60507026E12, 2245.0], [1.6050699E12, 2143.0], [1.60506798E12, 5059.0], [1.6050702E12, 2306.0], [1.60506828E12, 3731.0], [1.60506858E12, 2752.0], [1.60506888E12, 2434.0], [1.60506918E12, 3589.0], [1.60506948E12, 3580.0], [1.60506978E12, 4787.0], [1.60507008E12, 2607.0], [1.60506816E12, 3262.0], [1.60506942E12, 3282.0], [1.60506972E12, 3954.0], [1.6050681E12, 2431.0], [1.60507032E12, 3968.0], [1.6050684E12, 3232.0], [1.60507002E12, 2796.0], [1.6050687E12, 2433.0], [1.605069E12, 2105.0], [1.6050693E12, 2377.0], [1.6050696E12, 2199.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60506894E12, 6293.5], [1.60506924E12, 7269.0], [1.60506954E12, 9035.0], [1.60506984E12, 6557.5], [1.60506792E12, 6527.0], [1.60506822E12, 5943.0], [1.60507044E12, 6325.0], [1.60506852E12, 6508.0], [1.60507014E12, 5650.0], [1.60506882E12, 5761.0], [1.60506912E12, 7414.0], [1.60506846E12, 6964.5], [1.60506876E12, 7502.5], [1.60507038E12, 7243.0], [1.60506906E12, 6412.0], [1.60506936E12, 5539.0], [1.60506966E12, 4661.5], [1.60506996E12, 4310.5], [1.60506804E12, 5147.0], [1.60506834E12, 3261.0], [1.60506864E12, 5604.0], [1.60507026E12, 4769.0], [1.6050699E12, 5176.0], [1.60506798E12, 8667.0], [1.6050702E12, 4557.0], [1.60506828E12, 7218.0], [1.60506858E12, 5027.0], [1.60506888E12, 4917.0], [1.60506918E12, 6310.0], [1.60506948E12, 5117.0], [1.60506978E12, 6369.0], [1.60507008E12, 5925.5], [1.60506816E12, 4829.0], [1.60506942E12, 5123.0], [1.60506972E12, 7062.0], [1.6050681E12, 5640.0], [1.60507032E12, 6857.0], [1.6050684E12, 5337.0], [1.60507002E12, 6191.0], [1.6050687E12, 4856.0], [1.605069E12, 3768.0], [1.6050693E12, 5247.0], [1.6050696E12, 3941.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60507044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2513.0, "minX": 1.0, "maxY": 6857.0, "series": [{"data": [[1.0, 6857.0], [2.0, 6138.5], [4.0, 4784.5], [5.0, 3044.5], [3.0, 5735.0], [6.0, 2513.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2513.0, "minX": 1.0, "maxY": 6848.0, "series": [{"data": [[1.0, 6848.0], [2.0, 6136.0], [4.0, 4784.5], [5.0, 3044.0], [3.0, 5733.0], [6.0, 2513.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.60506792E12, "maxY": 3.15, "series": [{"data": [[1.60506894E12, 1.6666666666666667], [1.60506924E12, 1.25], [1.60506954E12, 1.3833333333333333], [1.60506984E12, 1.8333333333333333], [1.60506792E12, 1.4833333333333334], [1.60506822E12, 1.8166666666666667], [1.60507044E12, 0.31666666666666665], [1.60506852E12, 1.85], [1.60507014E12, 2.183333333333333], [1.60506882E12, 1.9833333333333334], [1.60506912E12, 1.55], [1.60506846E12, 1.7333333333333334], [1.60506876E12, 1.6666666666666667], [1.60507038E12, 1.7166666666666666], [1.60506906E12, 1.7], [1.60506936E12, 2.05], [1.60506966E12, 2.566666666666667], [1.60506996E12, 2.6], [1.60506804E12, 2.35], [1.60506834E12, 3.15], [1.60506864E12, 2.183333333333333], [1.60507026E12, 2.433333333333333], [1.6050699E12, 2.566666666666667], [1.60506798E12, 1.3], [1.6050702E12, 2.3666666666666667], [1.60506828E12, 1.7], [1.60506858E12, 2.3833333333333333], [1.60506888E12, 2.45], [1.60506918E12, 1.9], [1.60506948E12, 2.0166666666666666], [1.60506978E12, 1.8666666666666667], [1.60507008E12, 2.1], [1.60506816E12, 2.3333333333333335], [1.60506942E12, 2.033333333333333], [1.60506972E12, 1.65], [1.6050681E12, 1.9333333333333333], [1.60507032E12, 1.6833333333333333], [1.6050684E12, 2.0833333333333335], [1.60507002E12, 1.9333333333333333], [1.6050687E12, 2.45], [1.605069E12, 2.8333333333333335], [1.6050693E12, 2.433333333333333], [1.6050696E12, 3.0166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60507044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.60506792E12, "maxY": 3.15, "series": [{"data": [[1.60506894E12, 1.6666666666666667], [1.60506924E12, 1.25], [1.60506954E12, 1.3833333333333333], [1.60506984E12, 1.8333333333333333], [1.60506792E12, 1.2833333333333334], [1.60506822E12, 1.8166666666666667], [1.60507044E12, 0.5166666666666667], [1.60506852E12, 1.85], [1.60507014E12, 2.183333333333333], [1.60506882E12, 1.9833333333333334], [1.60506912E12, 1.55], [1.60506846E12, 1.7333333333333334], [1.60506876E12, 1.6666666666666667], [1.60507038E12, 1.7166666666666666], [1.60506906E12, 1.7], [1.60506936E12, 2.05], [1.60506966E12, 2.566666666666667], [1.60506996E12, 2.6], [1.60506804E12, 2.35], [1.60506834E12, 3.15], [1.60506864E12, 2.183333333333333], [1.60507026E12, 2.433333333333333], [1.6050699E12, 2.566666666666667], [1.60506798E12, 1.3], [1.6050702E12, 2.3666666666666667], [1.60506828E12, 1.7], [1.60506858E12, 2.3833333333333333], [1.60506888E12, 2.45], [1.60506918E12, 1.9], [1.60506948E12, 2.0166666666666666], [1.60506978E12, 1.8666666666666667], [1.60507008E12, 2.1], [1.60506816E12, 2.3333333333333335], [1.60506942E12, 2.033333333333333], [1.60506972E12, 1.65], [1.6050681E12, 1.9333333333333333], [1.60507032E12, 1.6833333333333333], [1.6050684E12, 2.0833333333333335], [1.60507002E12, 1.9333333333333333], [1.6050687E12, 2.45], [1.605069E12, 2.8333333333333335], [1.6050693E12, 2.433333333333333], [1.6050696E12, 3.0166666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60507044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.60506792E12, "maxY": 3.15, "series": [{"data": [[1.60506894E12, 1.6666666666666667], [1.60506924E12, 1.25], [1.60506954E12, 1.3833333333333333], [1.60506984E12, 1.8333333333333333], [1.60506792E12, 1.2833333333333334], [1.60506822E12, 1.8166666666666667], [1.60507044E12, 0.5166666666666667], [1.60506852E12, 1.85], [1.60507014E12, 2.183333333333333], [1.60506882E12, 1.9833333333333334], [1.60506912E12, 1.55], [1.60506846E12, 1.7333333333333334], [1.60506876E12, 1.6666666666666667], [1.60507038E12, 1.7166666666666666], [1.60506906E12, 1.7], [1.60506936E12, 2.05], [1.60506966E12, 2.566666666666667], [1.60506996E12, 2.6], [1.60506804E12, 2.35], [1.60506834E12, 3.15], [1.60506864E12, 2.183333333333333], [1.60507026E12, 2.433333333333333], [1.6050699E12, 2.566666666666667], [1.60506798E12, 1.3], [1.6050702E12, 2.3666666666666667], [1.60506828E12, 1.7], [1.60506858E12, 2.3833333333333333], [1.60506888E12, 2.45], [1.60506918E12, 1.9], [1.60506948E12, 2.0166666666666666], [1.60506978E12, 1.8666666666666667], [1.60507008E12, 2.1], [1.60506816E12, 2.3333333333333335], [1.60506942E12, 2.033333333333333], [1.60506972E12, 1.65], [1.6050681E12, 1.9333333333333333], [1.60507032E12, 1.6833333333333333], [1.6050684E12, 2.0833333333333335], [1.60507002E12, 1.9333333333333333], [1.6050687E12, 2.45], [1.605069E12, 2.8333333333333335], [1.6050693E12, 2.433333333333333], [1.6050696E12, 3.0166666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60507044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.60506792E12, "maxY": 3.15, "series": [{"data": [[1.60506894E12, 1.6666666666666667], [1.60506924E12, 1.25], [1.60506954E12, 1.3833333333333333], [1.60506984E12, 1.8333333333333333], [1.60506792E12, 1.2833333333333334], [1.60506822E12, 1.8166666666666667], [1.60507044E12, 0.5166666666666667], [1.60506852E12, 1.85], [1.60507014E12, 2.183333333333333], [1.60506882E12, 1.9833333333333334], [1.60506912E12, 1.55], [1.60506846E12, 1.7333333333333334], [1.60506876E12, 1.6666666666666667], [1.60507038E12, 1.7166666666666666], [1.60506906E12, 1.7], [1.60506936E12, 2.05], [1.60506966E12, 2.566666666666667], [1.60506996E12, 2.6], [1.60506804E12, 2.35], [1.60506834E12, 3.15], [1.60506864E12, 2.183333333333333], [1.60507026E12, 2.433333333333333], [1.6050699E12, 2.566666666666667], [1.60506798E12, 1.3], [1.6050702E12, 2.3666666666666667], [1.60506828E12, 1.7], [1.60506858E12, 2.3833333333333333], [1.60506888E12, 2.45], [1.60506918E12, 1.9], [1.60506948E12, 2.0166666666666666], [1.60506978E12, 1.8666666666666667], [1.60507008E12, 2.1], [1.60506816E12, 2.3333333333333335], [1.60506942E12, 2.033333333333333], [1.60506972E12, 1.65], [1.6050681E12, 1.9333333333333333], [1.60507032E12, 1.6833333333333333], [1.6050684E12, 2.0833333333333335], [1.60507002E12, 1.9333333333333333], [1.6050687E12, 2.45], [1.605069E12, 2.8333333333333335], [1.6050693E12, 2.433333333333333], [1.6050696E12, 3.0166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60507044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

