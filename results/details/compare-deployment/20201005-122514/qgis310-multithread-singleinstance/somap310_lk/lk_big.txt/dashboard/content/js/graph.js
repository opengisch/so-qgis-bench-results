/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "maxY": 130519.0, "series": [{"data": [[0.0, 48.0], [0.1, 534.0], [0.2, 875.0], [0.3, 1021.0], [0.4, 1216.0], [0.5, 1218.0], [0.6, 1220.0], [0.7, 1224.0], [0.8, 1238.0], [0.9, 1266.0], [1.0, 1456.0], [1.1, 1480.0], [1.2, 1501.0], [1.3, 1529.0], [1.4, 1532.0], [1.5, 1543.0], [1.6, 1553.0], [1.7, 1564.0], [1.8, 1572.0], [1.9, 1581.0], [2.0, 1589.0], [2.1, 1593.0], [2.2, 1601.0], [2.3, 1715.0], [2.4, 1731.0], [2.5, 1737.0], [2.6, 1756.0], [2.7, 1765.0], [2.8, 1777.0], [2.9, 1788.0], [3.0, 1807.0], [3.1, 1816.0], [3.2, 1819.0], [3.3, 1826.0], [3.4, 1830.0], [3.5, 1845.0], [3.6, 1848.0], [3.7, 1856.0], [3.8, 1877.0], [3.9, 1907.0], [4.0, 1958.0], [4.1, 1989.0], [4.2, 2003.0], [4.3, 2015.0], [4.4, 2058.0], [4.5, 2086.0], [4.6, 2094.0], [4.7, 2104.0], [4.8, 2107.0], [4.9, 2112.0], [5.0, 2114.0], [5.1, 2120.0], [5.2, 2127.0], [5.3, 2131.0], [5.4, 2147.0], [5.5, 2175.0], [5.6, 2189.0], [5.7, 2198.0], [5.8, 2208.0], [5.9, 2223.0], [6.0, 2251.0], [6.1, 2279.0], [6.2, 2287.0], [6.3, 2302.0], [6.4, 2312.0], [6.5, 2322.0], [6.6, 2326.0], [6.7, 2327.0], [6.8, 2330.0], [6.9, 2331.0], [7.0, 2337.0], [7.1, 2345.0], [7.2, 2351.0], [7.3, 2356.0], [7.4, 2362.0], [7.5, 2363.0], [7.6, 2366.0], [7.7, 2368.0], [7.8, 2372.0], [7.9, 2374.0], [8.0, 2377.0], [8.1, 2379.0], [8.2, 2389.0], [8.3, 2395.0], [8.4, 2400.0], [8.5, 2413.0], [8.6, 2417.0], [8.7, 2438.0], [8.8, 2444.0], [8.9, 2448.0], [9.0, 2458.0], [9.1, 2462.0], [9.2, 2465.0], [9.3, 2467.0], [9.4, 2471.0], [9.5, 2473.0], [9.6, 2483.0], [9.7, 2490.0], [9.8, 2497.0], [9.9, 2500.0], [10.0, 2506.0], [10.1, 2510.0], [10.2, 2519.0], [10.3, 2523.0], [10.4, 2526.0], [10.5, 2528.0], [10.6, 2530.0], [10.7, 2533.0], [10.8, 2534.0], [10.9, 2536.0], [11.0, 2539.0], [11.1, 2541.0], [11.2, 2542.0], [11.3, 2545.0], [11.4, 2549.0], [11.5, 2551.0], [11.6, 2554.0], [11.7, 2556.0], [11.8, 2559.0], [11.9, 2566.0], [12.0, 2569.0], [12.1, 2575.0], [12.2, 2579.0], [12.3, 2581.0], [12.4, 2582.0], [12.5, 2588.0], [12.6, 2595.0], [12.7, 2598.0], [12.8, 2609.0], [12.9, 2612.0], [13.0, 2619.0], [13.1, 2627.0], [13.2, 2630.0], [13.3, 2634.0], [13.4, 2640.0], [13.5, 2645.0], [13.6, 2649.0], [13.7, 2659.0], [13.8, 2663.0], [13.9, 2675.0], [14.0, 2686.0], [14.1, 2692.0], [14.2, 2696.0], [14.3, 2701.0], [14.4, 2704.0], [14.5, 2711.0], [14.6, 2716.0], [14.7, 2725.0], [14.8, 2729.0], [14.9, 2734.0], [15.0, 2737.0], [15.1, 2754.0], [15.2, 2761.0], [15.3, 2765.0], [15.4, 2767.0], [15.5, 2768.0], [15.6, 2771.0], [15.7, 2778.0], [15.8, 2796.0], [15.9, 2814.0], [16.0, 2831.0], [16.1, 2842.0], [16.2, 2849.0], [16.3, 2859.0], [16.4, 2872.0], [16.5, 2880.0], [16.6, 2886.0], [16.7, 2896.0], [16.8, 2903.0], [16.9, 2910.0], [17.0, 2917.0], [17.1, 2919.0], [17.2, 2928.0], [17.3, 2946.0], [17.4, 2959.0], [17.5, 2967.0], [17.6, 2972.0], [17.7, 2980.0], [17.8, 2982.0], [17.9, 2986.0], [18.0, 2990.0], [18.1, 2993.0], [18.2, 2998.0], [18.3, 3001.0], [18.4, 3002.0], [18.5, 3003.0], [18.6, 3005.0], [18.7, 3007.0], [18.8, 3009.0], [18.9, 3015.0], [19.0, 3018.0], [19.1, 3025.0], [19.2, 3032.0], [19.3, 3034.0], [19.4, 3038.0], [19.5, 3042.0], [19.6, 3045.0], [19.7, 3052.0], [19.8, 3057.0], [19.9, 3061.0], [20.0, 3071.0], [20.1, 3078.0], [20.2, 3081.0], [20.3, 3092.0], [20.4, 3099.0], [20.5, 3105.0], [20.6, 3109.0], [20.7, 3125.0], [20.8, 3136.0], [20.9, 3149.0], [21.0, 3157.0], [21.1, 3161.0], [21.2, 3167.0], [21.3, 3178.0], [21.4, 3187.0], [21.5, 3189.0], [21.6, 3198.0], [21.7, 3211.0], [21.8, 3214.0], [21.9, 3222.0], [22.0, 3226.0], [22.1, 3231.0], [22.2, 3236.0], [22.3, 3246.0], [22.4, 3255.0], [22.5, 3277.0], [22.6, 3283.0], [22.7, 3286.0], [22.8, 3290.0], [22.9, 3293.0], [23.0, 3301.0], [23.1, 3306.0], [23.2, 3308.0], [23.3, 3312.0], [23.4, 3314.0], [23.5, 3317.0], [23.6, 3322.0], [23.7, 3326.0], [23.8, 3331.0], [23.9, 3341.0], [24.0, 3345.0], [24.1, 3350.0], [24.2, 3362.0], [24.3, 3372.0], [24.4, 3385.0], [24.5, 3391.0], [24.6, 3392.0], [24.7, 3402.0], [24.8, 3411.0], [24.9, 3423.0], [25.0, 3427.0], [25.1, 3441.0], [25.2, 3450.0], [25.3, 3462.0], [25.4, 3470.0], [25.5, 3478.0], [25.6, 3480.0], [25.7, 3491.0], [25.8, 3508.0], [25.9, 3532.0], [26.0, 3533.0], [26.1, 3539.0], [26.2, 3542.0], [26.3, 3547.0], [26.4, 3554.0], [26.5, 3559.0], [26.6, 3566.0], [26.7, 3582.0], [26.8, 3592.0], [26.9, 3623.0], [27.0, 3626.0], [27.1, 3628.0], [27.2, 3633.0], [27.3, 3641.0], [27.4, 3652.0], [27.5, 3660.0], [27.6, 3671.0], [27.7, 3672.0], [27.8, 3676.0], [27.9, 3683.0], [28.0, 3686.0], [28.1, 3691.0], [28.2, 3701.0], [28.3, 3706.0], [28.4, 3710.0], [28.5, 3714.0], [28.6, 3718.0], [28.7, 3730.0], [28.8, 3735.0], [28.9, 3743.0], [29.0, 3745.0], [29.1, 3752.0], [29.2, 3758.0], [29.3, 3773.0], [29.4, 3782.0], [29.5, 3788.0], [29.6, 3796.0], [29.7, 3805.0], [29.8, 3824.0], [29.9, 3834.0], [30.0, 3841.0], [30.1, 3853.0], [30.2, 3865.0], [30.3, 3875.0], [30.4, 3882.0], [30.5, 3886.0], [30.6, 3896.0], [30.7, 3899.0], [30.8, 3909.0], [30.9, 3913.0], [31.0, 3919.0], [31.1, 3922.0], [31.2, 3925.0], [31.3, 3932.0], [31.4, 3935.0], [31.5, 3937.0], [31.6, 3945.0], [31.7, 3952.0], [31.8, 3953.0], [31.9, 3956.0], [32.0, 3965.0], [32.1, 3977.0], [32.2, 3992.0], [32.3, 3999.0], [32.4, 4009.0], [32.5, 4015.0], [32.6, 4025.0], [32.7, 4040.0], [32.8, 4056.0], [32.9, 4061.0], [33.0, 4073.0], [33.1, 4080.0], [33.2, 4083.0], [33.3, 4088.0], [33.4, 4090.0], [33.5, 4094.0], [33.6, 4098.0], [33.7, 4105.0], [33.8, 4119.0], [33.9, 4146.0], [34.0, 4150.0], [34.1, 4153.0], [34.2, 4166.0], [34.3, 4169.0], [34.4, 4170.0], [34.5, 4172.0], [34.6, 4183.0], [34.7, 4186.0], [34.8, 4189.0], [34.9, 4208.0], [35.0, 4231.0], [35.1, 4245.0], [35.2, 4256.0], [35.3, 4259.0], [35.4, 4264.0], [35.5, 4275.0], [35.6, 4284.0], [35.7, 4290.0], [35.8, 4297.0], [35.9, 4300.0], [36.0, 4305.0], [36.1, 4314.0], [36.2, 4323.0], [36.3, 4328.0], [36.4, 4331.0], [36.5, 4335.0], [36.6, 4336.0], [36.7, 4337.0], [36.8, 4346.0], [36.9, 4358.0], [37.0, 4361.0], [37.1, 4367.0], [37.2, 4376.0], [37.3, 4380.0], [37.4, 4386.0], [37.5, 4389.0], [37.6, 4402.0], [37.7, 4416.0], [37.8, 4426.0], [37.9, 4436.0], [38.0, 4441.0], [38.1, 4451.0], [38.2, 4457.0], [38.3, 4461.0], [38.4, 4466.0], [38.5, 4473.0], [38.6, 4487.0], [38.7, 4495.0], [38.8, 4500.0], [38.9, 4503.0], [39.0, 4526.0], [39.1, 4537.0], [39.2, 4540.0], [39.3, 4548.0], [39.4, 4556.0], [39.5, 4559.0], [39.6, 4568.0], [39.7, 4578.0], [39.8, 4581.0], [39.9, 4587.0], [40.0, 4595.0], [40.1, 4602.0], [40.2, 4609.0], [40.3, 4621.0], [40.4, 4627.0], [40.5, 4632.0], [40.6, 4636.0], [40.7, 4640.0], [40.8, 4643.0], [40.9, 4647.0], [41.0, 4654.0], [41.1, 4657.0], [41.2, 4663.0], [41.3, 4668.0], [41.4, 4673.0], [41.5, 4696.0], [41.6, 4701.0], [41.7, 4710.0], [41.8, 4723.0], [41.9, 4733.0], [42.0, 4742.0], [42.1, 4747.0], [42.2, 4757.0], [42.3, 4776.0], [42.4, 4785.0], [42.5, 4787.0], [42.6, 4800.0], [42.7, 4808.0], [42.8, 4814.0], [42.9, 4824.0], [43.0, 4834.0], [43.1, 4843.0], [43.2, 4845.0], [43.3, 4857.0], [43.4, 4868.0], [43.5, 4875.0], [43.6, 4883.0], [43.7, 4892.0], [43.8, 4907.0], [43.9, 4913.0], [44.0, 4918.0], [44.1, 4937.0], [44.2, 4949.0], [44.3, 4955.0], [44.4, 4969.0], [44.5, 4979.0], [44.6, 4987.0], [44.7, 4995.0], [44.8, 5016.0], [44.9, 5033.0], [45.0, 5036.0], [45.1, 5044.0], [45.2, 5051.0], [45.3, 5068.0], [45.4, 5071.0], [45.5, 5084.0], [45.6, 5093.0], [45.7, 5111.0], [45.8, 5118.0], [45.9, 5125.0], [46.0, 5138.0], [46.1, 5150.0], [46.2, 5154.0], [46.3, 5161.0], [46.4, 5166.0], [46.5, 5174.0], [46.6, 5183.0], [46.7, 5197.0], [46.8, 5207.0], [46.9, 5213.0], [47.0, 5225.0], [47.1, 5237.0], [47.2, 5243.0], [47.3, 5248.0], [47.4, 5266.0], [47.5, 5283.0], [47.6, 5296.0], [47.7, 5301.0], [47.8, 5307.0], [47.9, 5315.0], [48.0, 5327.0], [48.1, 5334.0], [48.2, 5367.0], [48.3, 5377.0], [48.4, 5394.0], [48.5, 5397.0], [48.6, 5402.0], [48.7, 5409.0], [48.8, 5420.0], [48.9, 5429.0], [49.0, 5443.0], [49.1, 5447.0], [49.2, 5453.0], [49.3, 5471.0], [49.4, 5477.0], [49.5, 5491.0], [49.6, 5511.0], [49.7, 5539.0], [49.8, 5553.0], [49.9, 5556.0], [50.0, 5567.0], [50.1, 5580.0], [50.2, 5593.0], [50.3, 5606.0], [50.4, 5617.0], [50.5, 5640.0], [50.6, 5642.0], [50.7, 5658.0], [50.8, 5671.0], [50.9, 5687.0], [51.0, 5702.0], [51.1, 5724.0], [51.2, 5739.0], [51.3, 5748.0], [51.4, 5755.0], [51.5, 5765.0], [51.6, 5778.0], [51.7, 5785.0], [51.8, 5800.0], [51.9, 5812.0], [52.0, 5824.0], [52.1, 5841.0], [52.2, 5852.0], [52.3, 5866.0], [52.4, 5877.0], [52.5, 5893.0], [52.6, 5896.0], [52.7, 5914.0], [52.8, 5924.0], [52.9, 5925.0], [53.0, 5927.0], [53.1, 5933.0], [53.2, 5943.0], [53.3, 5956.0], [53.4, 5971.0], [53.5, 5978.0], [53.6, 5993.0], [53.7, 6008.0], [53.8, 6025.0], [53.9, 6049.0], [54.0, 6068.0], [54.1, 6085.0], [54.2, 6103.0], [54.3, 6118.0], [54.4, 6137.0], [54.5, 6151.0], [54.6, 6156.0], [54.7, 6174.0], [54.8, 6191.0], [54.9, 6205.0], [55.0, 6215.0], [55.1, 6223.0], [55.2, 6229.0], [55.3, 6236.0], [55.4, 6251.0], [55.5, 6268.0], [55.6, 6280.0], [55.7, 6301.0], [55.8, 6306.0], [55.9, 6324.0], [56.0, 6333.0], [56.1, 6351.0], [56.2, 6356.0], [56.3, 6366.0], [56.4, 6373.0], [56.5, 6382.0], [56.6, 6401.0], [56.7, 6413.0], [56.8, 6424.0], [56.9, 6437.0], [57.0, 6453.0], [57.1, 6465.0], [57.2, 6482.0], [57.3, 6510.0], [57.4, 6521.0], [57.5, 6531.0], [57.6, 6538.0], [57.7, 6547.0], [57.8, 6562.0], [57.9, 6570.0], [58.0, 6579.0], [58.1, 6605.0], [58.2, 6613.0], [58.3, 6625.0], [58.4, 6632.0], [58.5, 6644.0], [58.6, 6651.0], [58.7, 6655.0], [58.8, 6666.0], [58.9, 6684.0], [59.0, 6695.0], [59.1, 6704.0], [59.2, 6717.0], [59.3, 6723.0], [59.4, 6734.0], [59.5, 6742.0], [59.6, 6760.0], [59.7, 6769.0], [59.8, 6781.0], [59.9, 6797.0], [60.0, 6812.0], [60.1, 6830.0], [60.2, 6845.0], [60.3, 6851.0], [60.4, 6860.0], [60.5, 6866.0], [60.6, 6873.0], [60.7, 6885.0], [60.8, 6895.0], [60.9, 6902.0], [61.0, 6909.0], [61.1, 6914.0], [61.2, 6921.0], [61.3, 6931.0], [61.4, 6951.0], [61.5, 6959.0], [61.6, 6985.0], [61.7, 6999.0], [61.8, 7014.0], [61.9, 7023.0], [62.0, 7028.0], [62.1, 7050.0], [62.2, 7075.0], [62.3, 7091.0], [62.4, 7106.0], [62.5, 7131.0], [62.6, 7140.0], [62.7, 7164.0], [62.8, 7183.0], [62.9, 7197.0], [63.0, 7206.0], [63.1, 7220.0], [63.2, 7235.0], [63.3, 7256.0], [63.4, 7267.0], [63.5, 7282.0], [63.6, 7295.0], [63.7, 7301.0], [63.8, 7318.0], [63.9, 7332.0], [64.0, 7338.0], [64.1, 7349.0], [64.2, 7370.0], [64.3, 7382.0], [64.4, 7394.0], [64.5, 7401.0], [64.6, 7419.0], [64.7, 7425.0], [64.8, 7433.0], [64.9, 7440.0], [65.0, 7447.0], [65.1, 7456.0], [65.2, 7466.0], [65.3, 7478.0], [65.4, 7483.0], [65.5, 7494.0], [65.6, 7501.0], [65.7, 7510.0], [65.8, 7513.0], [65.9, 7521.0], [66.0, 7529.0], [66.1, 7532.0], [66.2, 7541.0], [66.3, 7549.0], [66.4, 7559.0], [66.5, 7570.0], [66.6, 7589.0], [66.7, 7602.0], [66.8, 7610.0], [66.9, 7614.0], [67.0, 7630.0], [67.1, 7634.0], [67.2, 7644.0], [67.3, 7658.0], [67.4, 7680.0], [67.5, 7688.0], [67.6, 7700.0], [67.7, 7709.0], [67.8, 7728.0], [67.9, 7738.0], [68.0, 7747.0], [68.1, 7752.0], [68.2, 7755.0], [68.3, 7759.0], [68.4, 7768.0], [68.5, 7774.0], [68.6, 7789.0], [68.7, 7811.0], [68.8, 7816.0], [68.9, 7825.0], [69.0, 7835.0], [69.1, 7843.0], [69.2, 7851.0], [69.3, 7856.0], [69.4, 7874.0], [69.5, 7888.0], [69.6, 7902.0], [69.7, 7916.0], [69.8, 7928.0], [69.9, 7937.0], [70.0, 7945.0], [70.1, 7952.0], [70.2, 7970.0], [70.3, 7976.0], [70.4, 7984.0], [70.5, 8000.0], [70.6, 8028.0], [70.7, 8047.0], [70.8, 8064.0], [70.9, 8076.0], [71.0, 8080.0], [71.1, 8087.0], [71.2, 8099.0], [71.3, 8110.0], [71.4, 8119.0], [71.5, 8123.0], [71.6, 8127.0], [71.7, 8133.0], [71.8, 8145.0], [71.9, 8149.0], [72.0, 8160.0], [72.1, 8183.0], [72.2, 8205.0], [72.3, 8214.0], [72.4, 8220.0], [72.5, 8227.0], [72.6, 8236.0], [72.7, 8250.0], [72.8, 8265.0], [72.9, 8269.0], [73.0, 8307.0], [73.1, 8321.0], [73.2, 8334.0], [73.3, 8354.0], [73.4, 8364.0], [73.5, 8373.0], [73.6, 8397.0], [73.7, 8404.0], [73.8, 8424.0], [73.9, 8434.0], [74.0, 8445.0], [74.1, 8463.0], [74.2, 8475.0], [74.3, 8490.0], [74.4, 8505.0], [74.5, 8530.0], [74.6, 8542.0], [74.7, 8553.0], [74.8, 8570.0], [74.9, 8596.0], [75.0, 8607.0], [75.1, 8633.0], [75.2, 8652.0], [75.3, 8657.0], [75.4, 8668.0], [75.5, 8676.0], [75.6, 8688.0], [75.7, 8699.0], [75.8, 8721.0], [75.9, 8737.0], [76.0, 8747.0], [76.1, 8756.0], [76.2, 8778.0], [76.3, 8784.0], [76.4, 8799.0], [76.5, 8817.0], [76.6, 8829.0], [76.7, 8845.0], [76.8, 8862.0], [76.9, 8915.0], [77.0, 8924.0], [77.1, 8956.0], [77.2, 8969.0], [77.3, 9004.0], [77.4, 9012.0], [77.5, 9032.0], [77.6, 9068.0], [77.7, 9090.0], [77.8, 9106.0], [77.9, 9139.0], [78.0, 9154.0], [78.1, 9170.0], [78.2, 9193.0], [78.3, 9224.0], [78.4, 9230.0], [78.5, 9247.0], [78.6, 9261.0], [78.7, 9301.0], [78.8, 9311.0], [78.9, 9322.0], [79.0, 9332.0], [79.1, 9354.0], [79.2, 9383.0], [79.3, 9444.0], [79.4, 9460.0], [79.5, 9478.0], [79.6, 9483.0], [79.7, 9500.0], [79.8, 9508.0], [79.9, 9517.0], [80.0, 9564.0], [80.1, 9582.0], [80.2, 9617.0], [80.3, 9642.0], [80.4, 9654.0], [80.5, 9668.0], [80.6, 9680.0], [80.7, 9683.0], [80.8, 9693.0], [80.9, 9706.0], [81.0, 9717.0], [81.1, 9745.0], [81.2, 9763.0], [81.3, 9781.0], [81.4, 9823.0], [81.5, 9858.0], [81.6, 9867.0], [81.7, 9878.0], [81.8, 9896.0], [81.9, 9908.0], [82.0, 9930.0], [82.1, 9964.0], [82.2, 9994.0], [82.3, 10027.0], [82.4, 10048.0], [82.5, 10066.0], [82.6, 10085.0], [82.7, 10113.0], [82.8, 10129.0], [82.9, 10147.0], [83.0, 10178.0], [83.1, 10188.0], [83.2, 10215.0], [83.3, 10248.0], [83.4, 10260.0], [83.5, 10293.0], [83.6, 10323.0], [83.7, 10336.0], [83.8, 10376.0], [83.9, 10406.0], [84.0, 10416.0], [84.1, 10423.0], [84.2, 10431.0], [84.3, 10472.0], [84.4, 10492.0], [84.5, 10512.0], [84.6, 10556.0], [84.7, 10598.0], [84.8, 10621.0], [84.9, 10644.0], [85.0, 10670.0], [85.1, 10697.0], [85.2, 10706.0], [85.3, 10723.0], [85.4, 10767.0], [85.5, 10812.0], [85.6, 10821.0], [85.7, 10846.0], [85.8, 10873.0], [85.9, 10906.0], [86.0, 10924.0], [86.1, 10943.0], [86.2, 10956.0], [86.3, 10983.0], [86.4, 11005.0], [86.5, 11028.0], [86.6, 11069.0], [86.7, 11115.0], [86.8, 11140.0], [86.9, 11150.0], [87.0, 11215.0], [87.1, 11239.0], [87.2, 11269.0], [87.3, 11282.0], [87.4, 11344.0], [87.5, 11379.0], [87.6, 11420.0], [87.7, 11442.0], [87.8, 11529.0], [87.9, 11577.0], [88.0, 11627.0], [88.1, 11648.0], [88.2, 11660.0], [88.3, 11695.0], [88.4, 11736.0], [88.5, 11788.0], [88.6, 11827.0], [88.7, 11890.0], [88.8, 11914.0], [88.9, 11986.0], [89.0, 12044.0], [89.1, 12107.0], [89.2, 12139.0], [89.3, 12190.0], [89.4, 12233.0], [89.5, 12244.0], [89.6, 12343.0], [89.7, 12397.0], [89.8, 12437.0], [89.9, 12472.0], [90.0, 12520.0], [90.1, 12548.0], [90.2, 12589.0], [90.3, 12631.0], [90.4, 12667.0], [90.5, 12759.0], [90.6, 12784.0], [90.7, 12802.0], [90.8, 12829.0], [90.9, 12885.0], [91.0, 12916.0], [91.1, 12962.0], [91.2, 13012.0], [91.3, 13033.0], [91.4, 13061.0], [91.5, 13085.0], [91.6, 13195.0], [91.7, 13209.0], [91.8, 13232.0], [91.9, 13285.0], [92.0, 13325.0], [92.1, 13353.0], [92.2, 13382.0], [92.3, 13463.0], [92.4, 13478.0], [92.5, 13492.0], [92.6, 13508.0], [92.7, 13540.0], [92.8, 13574.0], [92.9, 13605.0], [93.0, 13632.0], [93.1, 13688.0], [93.2, 13740.0], [93.3, 13814.0], [93.4, 13885.0], [93.5, 13966.0], [93.6, 14027.0], [93.7, 14044.0], [93.8, 14136.0], [93.9, 14197.0], [94.0, 14285.0], [94.1, 14387.0], [94.2, 14451.0], [94.3, 14466.0], [94.4, 14661.0], [94.5, 14864.0], [94.6, 15012.0], [94.7, 15081.0], [94.8, 15292.0], [94.9, 15380.0], [95.0, 15462.0], [95.1, 15622.0], [95.2, 15727.0], [95.3, 15891.0], [95.4, 16039.0], [95.5, 16126.0], [95.6, 16269.0], [95.7, 16356.0], [95.8, 16376.0], [95.9, 16461.0], [96.0, 16512.0], [96.1, 16614.0], [96.2, 16688.0], [96.3, 16749.0], [96.4, 16847.0], [96.5, 16984.0], [96.6, 17000.0], [96.7, 17021.0], [96.8, 17084.0], [96.9, 17164.0], [97.0, 17264.0], [97.1, 17374.0], [97.2, 17524.0], [97.3, 17619.0], [97.4, 17724.0], [97.5, 17841.0], [97.6, 18079.0], [97.7, 18205.0], [97.8, 18403.0], [97.9, 18526.0], [98.0, 18691.0], [98.1, 18772.0], [98.2, 19068.0], [98.3, 19132.0], [98.4, 19292.0], [98.5, 19371.0], [98.6, 19531.0], [98.7, 19605.0], [98.8, 19790.0], [98.9, 19998.0], [99.0, 20051.0], [99.1, 20276.0], [99.2, 20612.0], [99.3, 20642.0], [99.4, 20802.0], [99.5, 21050.0], [99.6, 21864.0], [99.7, 22143.0], [99.8, 22299.0], [99.9, 25518.0], [100.0, 130519.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 150.0, "series": [{"data": [[0.0, 2.0], [300.0, 1.0], [400.0, 1.0], [500.0, 3.0], [600.0, 2.0], [800.0, 2.0], [900.0, 3.0], [1000.0, 5.0], [1100.0, 1.0], [1200.0, 29.0], [1300.0, 2.0], [1400.0, 12.0], [1500.0, 51.0], [1600.0, 5.0], [1700.0, 36.0], [1800.0, 50.0], [1900.0, 15.0], [2000.0, 27.0], [2100.0, 54.0], [2300.0, 110.0], [2200.0, 31.0], [2400.0, 79.0], [2500.0, 150.0], [2600.0, 81.0], [2700.0, 82.0], [2800.0, 49.0], [2900.0, 77.0], [3000.0, 116.0], [3100.0, 64.0], [3200.0, 71.0], [3300.0, 89.0], [3400.0, 58.0], [3500.0, 56.0], [3600.0, 69.0], [3700.0, 80.0], [3800.0, 56.0], [3900.0, 85.0], [4000.0, 69.0], [4100.0, 65.0], [4300.0, 90.0], [4200.0, 54.0], [4400.0, 62.0], [4600.0, 78.0], [4500.0, 70.0], [4800.0, 62.0], [4700.0, 53.0], [4900.0, 51.0], [5100.0, 56.0], [5000.0, 49.0], [5300.0, 47.0], [5200.0, 50.0], [5600.0, 37.0], [5500.0, 38.0], [5400.0, 51.0], [5700.0, 44.0], [5800.0, 45.0], [5900.0, 54.0], [6100.0, 35.0], [6000.0, 26.0], [6300.0, 47.0], [6200.0, 46.0], [6500.0, 45.0], [6600.0, 49.0], [6400.0, 35.0], [6800.0, 50.0], [6900.0, 44.0], [6700.0, 47.0], [7100.0, 32.0], [7000.0, 33.0], [7200.0, 39.0], [7400.0, 58.0], [7300.0, 42.0], [7600.0, 48.0], [7500.0, 58.0], [7800.0, 50.0], [7900.0, 47.0], [7700.0, 55.0], [8100.0, 52.0], [8000.0, 39.0], [130500.0, 1.0], [8200.0, 41.0], [8600.0, 41.0], [8700.0, 37.0], [8500.0, 29.0], [8400.0, 39.0], [8300.0, 35.0], [9000.0, 25.0], [9100.0, 25.0], [9200.0, 26.0], [8900.0, 20.0], [8800.0, 25.0], [9400.0, 24.0], [9500.0, 25.0], [9700.0, 27.0], [9600.0, 36.0], [9300.0, 28.0], [9800.0, 24.0], [10000.0, 23.0], [10100.0, 26.0], [9900.0, 21.0], [10200.0, 20.0], [10300.0, 19.0], [10500.0, 14.0], [10400.0, 31.0], [10700.0, 17.0], [10600.0, 21.0], [10800.0, 23.0], [10900.0, 26.0], [11100.0, 16.0], [11200.0, 20.0], [11000.0, 15.0], [11300.0, 10.0], [11500.0, 9.0], [11600.0, 20.0], [11400.0, 12.0], [11700.0, 10.0], [11900.0, 10.0], [12100.0, 15.0], [12200.0, 12.0], [12000.0, 6.0], [11800.0, 13.0], [12500.0, 13.0], [12300.0, 7.0], [12600.0, 11.0], [12700.0, 13.0], [12400.0, 14.0], [13000.0, 19.0], [13200.0, 15.0], [13300.0, 17.0], [13100.0, 5.0], [12900.0, 14.0], [12800.0, 13.0], [13500.0, 16.0], [13800.0, 12.0], [13400.0, 17.0], [13600.0, 14.0], [13700.0, 5.0], [14000.0, 11.0], [14100.0, 7.0], [14300.0, 5.0], [14200.0, 6.0], [13900.0, 6.0], [14500.0, 1.0], [14800.0, 4.0], [14400.0, 10.0], [14600.0, 6.0], [14700.0, 2.0], [15200.0, 3.0], [15000.0, 6.0], [14900.0, 2.0], [15100.0, 2.0], [15300.0, 7.0], [15500.0, 2.0], [15600.0, 5.0], [15800.0, 5.0], [15700.0, 3.0], [15400.0, 5.0], [16200.0, 7.0], [16300.0, 9.0], [16000.0, 4.0], [16100.0, 5.0], [15900.0, 3.0], [16400.0, 7.0], [16600.0, 7.0], [17200.0, 7.0], [16800.0, 5.0], [17000.0, 12.0], [17400.0, 1.0], [17600.0, 7.0], [18000.0, 4.0], [18200.0, 3.0], [18400.0, 3.0], [17800.0, 4.0], [19400.0, 4.0], [18600.0, 4.0], [19200.0, 3.0], [18800.0, 2.0], [19000.0, 5.0], [19600.0, 5.0], [19800.0, 3.0], [20000.0, 7.0], [20400.0, 1.0], [20200.0, 1.0], [20800.0, 2.0], [20600.0, 13.0], [21000.0, 2.0], [21400.0, 1.0], [21200.0, 1.0], [21800.0, 3.0], [22200.0, 4.0], [22000.0, 1.0], [22600.0, 1.0], [26400.0, 1.0], [28000.0, 1.0], [130400.0, 1.0], [17300.0, 3.0], [16500.0, 6.0], [16700.0, 6.0], [16900.0, 8.0], [17100.0, 6.0], [17700.0, 5.0], [17500.0, 6.0], [18100.0, 1.0], [18300.0, 4.0], [17900.0, 1.0], [19300.0, 5.0], [18700.0, 6.0], [19100.0, 5.0], [18900.0, 1.0], [18500.0, 4.0], [19700.0, 3.0], [20300.0, 1.0], [19500.0, 3.0], [19900.0, 4.0], [20100.0, 1.0], [20900.0, 2.0], [21300.0, 2.0], [22100.0, 3.0], [21900.0, 1.0], [22500.0, 1.0], [23500.0, 1.0], [24500.0, 1.0], [25500.0, 1.0], [27300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 130500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5202.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 54.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5202.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.6019016E12, "maxY": 40.0, "series": [{"data": [[1.60190202E12, 40.0], [1.60190232E12, 40.0], [1.60190238E12, 40.0], [1.60190172E12, 40.0], [1.60190226E12, 40.0], [1.6019016E12, 39.901098901098884], [1.60190166E12, 40.0], [1.60190196E12, 40.0], [1.6019025E12, 5.0], [1.60190184E12, 40.0], [1.6019019E12, 40.0], [1.6019022E12, 40.0], [1.60190178E12, 40.0], [1.60190208E12, 40.0], [1.60190214E12, 40.0], [1.60190244E12, 38.632352941176485]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6019025E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6637.336582568805, "minX": 1.0, "maxY": 28056.0, "series": [{"data": [[33.0, 8543.0], [32.0, 8362.0], [2.0, 27321.0], [35.0, 8583.0], [34.0, 8633.0], [37.0, 8657.0], [36.0, 8775.0], [39.0, 8505.0], [38.0, 8551.0], [40.0, 6637.336582568805], [3.0, 26442.0], [4.0, 25518.0], [5.0, 24567.0], [6.0, 23550.0], [7.0, 22564.0], [8.0, 22032.0], [9.0, 21275.0], [10.0, 20276.0], [11.0, 19531.0], [12.0, 18664.0], [13.0, 8831.0], [14.0, 16474.0], [15.0, 15342.0], [16.0, 14423.0], [1.0, 28056.0], [17.0, 13582.0], [18.0, 12476.0], [19.0, 11655.0], [20.0, 10929.0], [21.0, 10321.0], [22.0, 9777.0], [23.0, 9043.0], [24.0, 8475.0], [25.0, 7811.0], [26.0, 7629.0], [27.0, 7424.0], [28.0, 7782.0], [29.0, 7937.0], [30.0, 8088.0], [31.0, 8468.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[39.846927162367116, 6692.004552352053]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 40.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 77.08333333333333, "minX": 1.6019016E12, "maxY": 497273.05, "series": [{"data": [[1.60190202E12, 351128.11666666664], [1.60190232E12, 356587.73333333334], [1.60190238E12, 320422.6666666667], [1.60190172E12, 414493.45], [1.60190226E12, 497273.05], [1.6019016E12, 106116.48333333334], [1.60190166E12, 268782.7166666667], [1.60190196E12, 170167.6], [1.6019025E12, 12436.75], [1.60190184E12, 326872.0333333333], [1.6019019E12, 283658.95], [1.6019022E12, 263190.9166666667], [1.60190178E12, 342144.5333333333], [1.60190208E12, 261171.8], [1.60190214E12, 87735.85], [1.60190244E12, 222671.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60190202E12, 4168.483333333334], [1.60190232E12, 3204.133333333333], [1.60190238E12, 2172.4666666666667], [1.60190172E12, 1750.4333333333334], [1.60190226E12, 2447.4333333333334], [1.6019016E12, 2353.366666666667], [1.60190166E12, 2782.7166666666667], [1.60190196E12, 4023.616666666667], [1.6019025E12, 77.08333333333333], [1.60190184E12, 2048.8166666666666], [1.6019019E12, 3372.0], [1.6019022E12, 3153.266666666667], [1.60190178E12, 3189.6666666666665], [1.60190208E12, 2880.383333333333], [1.60190214E12, 4786.883333333333], [1.60190244E12, 3060.2166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6019025E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4289.090405904056, "minX": 1.6019016E12, "maxY": 24591.666666666668, "series": [{"data": [[1.60190202E12, 4289.090405904056], [1.60190232E12, 6439.81198910082], [1.60190238E12, 8975.460317460316], [1.60190172E12, 13424.656565656565], [1.60190226E12, 9204.658088235296], [1.6019016E12, 6363.908424908426], [1.60190166E12, 6647.232352941175], [1.60190196E12, 5262.560085836908], [1.6019025E12, 24591.666666666668], [1.60190184E12, 10058.33898305084], [1.6019019E12, 6440.18253968254], [1.6019022E12, 6285.870370370372], [1.60190178E12, 6711.639344262293], [1.60190208E12, 7496.451515151515], [1.60190214E12, 4385.617142857146], [1.60190244E12, 6119.25588235294]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6019025E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4288.78413284133, "minX": 1.6019016E12, "maxY": 24591.222222222223, "series": [{"data": [[1.60190202E12, 4288.78413284133], [1.60190232E12, 6439.275204359669], [1.60190238E12, 8974.785714285716], [1.60190172E12, 12105.15656565656], [1.60190226E12, 9203.67647058824], [1.6019016E12, 6250.816849816849], [1.60190166E12, 6646.82941176471], [1.60190196E12, 5262.371244635197], [1.6019025E12, 24591.222222222223], [1.60190184E12, 10057.627118644064], [1.6019019E12, 6439.7671957671955], [1.6019022E12, 6285.563492063492], [1.60190178E12, 6711.142076502731], [1.60190208E12, 7496.106060606064], [1.60190214E12, 4385.537142857143], [1.60190244E12, 6118.888235294116]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6019025E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6019016E12, "maxY": 2139.0989010989033, "series": [{"data": [[1.60190202E12, 0.081180811808118], [1.60190232E12, 0.10899182561307895], [1.60190238E12, 0.12301587301587287], [1.60190172E12, 1318.4848484848487], [1.60190226E12, 0.11397058823529406], [1.6019016E12, 2139.0989010989033], [1.60190166E12, 0.14117647058823524], [1.60190196E12, 0.10085836909871246], [1.6019025E12, 0.0], [1.60190184E12, 0.18644067796610173], [1.6019019E12, 0.10846560846560858], [1.6019022E12, 0.044973544973544964], [1.60190178E12, 0.13661202185792348], [1.60190208E12, 0.1242424242424243], [1.60190214E12, 0.06857142857142857], [1.60190244E12, 0.1000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6019025E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.6019016E12, "maxY": 28056.0, "series": [{"data": [[1.60190202E12, 12759.0], [1.60190232E12, 10648.0], [1.60190238E12, 21386.0], [1.60190172E12, 20654.0], [1.60190226E12, 17269.0], [1.6019016E12, 20976.0], [1.60190166E12, 13509.0], [1.60190196E12, 22650.0], [1.6019025E12, 28056.0], [1.60190184E12, 19998.0], [1.6019019E12, 17264.0], [1.6019022E12, 11890.0], [1.60190178E12, 11885.0], [1.60190208E12, 15413.0], [1.60190214E12, 9090.0], [1.60190244E12, 20276.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60190202E12, 1475.660999611616], [1.60190232E12, 3421.0], [1.60190238E12, 2055.8309998190402], [1.60190172E12, 2845.0919998121262], [1.60190226E12, 3063.9409991538523], [1.6019016E12, 377.81799661397935], [1.60190166E12, 1956.1379998373986], [1.60190196E12, 1642.0059775090217], [1.6019025E12, 21275.0], [1.60190184E12, 1428.0229812967777], [1.6019019E12, 1217.0], [1.6019022E12, 2528.8219998192785], [1.60190178E12, 3164.271997900009], [1.60190208E12, 2088.0], [1.60190214E12, 1877.0], [1.60190244E12, 1714.1379998373986]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60190202E12, 1477.502800207138], [1.60190232E12, 3421.0], [1.60190238E12, 2056.514100072384], [1.60190172E12, 2845.8012000751496], [1.60190226E12, 3067.135100338459], [1.6019016E12, 390.59980135440827], [1.60190166E12, 1956.7518000650407], [1.60190196E12, 1726.9066089963912], [1.6019025E12, 21275.0], [1.60190184E12, 1498.625307481289], [1.6019019E12, 1217.0], [1.6019022E12, 2529.5042000722883], [1.60190178E12, 3172.199200839996], [1.60190208E12, 2089.1076001262663], [1.60190214E12, 1877.4148001003266], [1.60190244E12, 1714.7518000650407]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60190202E12, 1476.6339997410773], [1.60190232E12, 3421.0], [1.60190238E12, 2056.21049990952], [1.60190172E12, 2845.485999906063], [1.60190226E12, 3065.715499576926], [1.6019016E12, 384.9189983069897], [1.60190166E12, 1956.4789999186992], [1.60190196E12, 1689.1729887545107], [1.6019025E12, 21275.0], [1.60190184E12, 1467.2464906483888], [1.6019019E12, 1217.0], [1.6019022E12, 2529.2009999096394], [1.60190178E12, 3168.6759989500047], [1.60190208E12, 2088.5779998421667], [1.60190214E12, 1877.0], [1.60190244E12, 1714.4789999186992]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60190202E12, 1456.0], [1.60190232E12, 3309.0], [1.60190238E12, 1852.0], [1.60190172E12, 2842.0], [1.60190226E12, 3000.0], [1.6019016E12, 77.0], [1.60190166E12, 1932.0], [1.60190196E12, 1595.0], [1.6019025E12, 21275.0], [1.60190184E12, 1378.0], [1.6019019E12, 1216.0], [1.6019022E12, 2490.0], [1.60190178E12, 2982.0], [1.60190208E12, 2086.0], [1.60190214E12, 1786.0], [1.60190244E12, 1429.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60190202E12, 3711.0], [1.60190232E12, 6155.0], [1.60190238E12, 7539.0], [1.60190172E12, 12448.0], [1.60190226E12, 9779.0], [1.6019016E12, 4640.5], [1.60190166E12, 6776.0], [1.60190196E12, 3668.0], [1.6019025E12, 24567.0], [1.60190184E12, 11011.5], [1.6019019E12, 5551.5], [1.6019022E12, 5760.5], [1.60190178E12, 6802.5], [1.60190208E12, 7432.5], [1.60190214E12, 3638.0], [1.60190244E12, 5039.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6019025E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1023.0, "minX": 1.0, "maxY": 130519.0, "series": [{"data": [[2.0, 11262.0], [33.0, 1846.0], [3.0, 8434.0], [4.0, 8079.0], [5.0, 7420.0], [6.0, 7273.0], [7.0, 6220.0], [8.0, 5506.5], [9.0, 6350.0], [10.0, 4651.5], [11.0, 4336.5], [12.0, 5300.0], [13.0, 4732.5], [14.0, 4448.0], [15.0, 3785.0], [16.0, 2978.0], [1.0, 13442.0], [17.0, 3861.5], [18.0, 3015.0], [19.0, 3686.5], [20.0, 2845.5], [21.0, 2546.0], [22.0, 3133.0], [23.0, 2209.5], [24.0, 2768.5], [25.0, 2193.5], [27.0, 1845.5], [29.0, 4052.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1023.0], [2.0, 7162.0], [4.0, 130519.0], [3.0, 4091.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13441.5, "series": [{"data": [[2.0, 11262.0], [33.0, 1846.0], [3.0, 8433.0], [4.0, 8079.0], [5.0, 7420.0], [6.0, 7272.5], [7.0, 6220.0], [8.0, 5506.5], [9.0, 6349.5], [10.0, 4651.0], [11.0, 4336.5], [12.0, 5300.0], [13.0, 4732.0], [14.0, 4448.0], [15.0, 3784.5], [16.0, 2977.5], [1.0, 13441.5], [17.0, 3861.5], [18.0, 3015.0], [19.0, 3686.5], [20.0, 2845.5], [21.0, 2546.0], [22.0, 3133.0], [23.0, 2209.5], [24.0, 2768.5], [25.0, 2193.5], [27.0, 1845.5], [29.0, 4052.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0], [4.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3, "minX": 1.6019016E12, "maxY": 9.033333333333333, "series": [{"data": [[1.60190202E12, 9.033333333333333], [1.60190232E12, 6.133333333333334], [1.60190238E12, 4.183333333333334], [1.60190172E12, 3.3], [1.60190226E12, 4.533333333333333], [1.6019016E12, 5.216666666666667], [1.60190166E12, 5.666666666666667], [1.60190196E12, 7.766666666666667], [1.60190184E12, 3.933333333333333], [1.6019019E12, 6.3], [1.6019022E12, 6.3], [1.60190178E12, 6.1], [1.60190208E12, 5.5], [1.60190214E12, 8.75], [1.60190244E12, 5.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190244E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6019016E12, "maxY": 9.033333333333333, "series": [{"data": [[1.60190202E12, 9.033333333333333], [1.60190232E12, 6.116666666666666], [1.60190238E12, 4.2], [1.60190172E12, 3.2666666666666666], [1.60190226E12, 4.533333333333333], [1.6019016E12, 4.366666666666666], [1.60190166E12, 5.666666666666667], [1.60190196E12, 7.766666666666667], [1.6019025E12, 0.15], [1.60190184E12, 3.933333333333333], [1.6019019E12, 6.3], [1.6019022E12, 6.3], [1.60190178E12, 6.1], [1.60190208E12, 5.5], [1.60190214E12, 8.75], [1.60190244E12, 5.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60190172E12, 0.03333333333333333], [1.6019016E12, 0.15]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.6019016E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6019025E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6019016E12, "maxY": 9.033333333333333, "series": [{"data": [[1.60190172E12, 0.03333333333333333], [1.6019016E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.60190202E12, 9.033333333333333], [1.60190232E12, 6.116666666666666], [1.60190238E12, 4.2], [1.60190172E12, 3.2666666666666666], [1.60190226E12, 4.533333333333333], [1.6019016E12, 4.366666666666666], [1.60190166E12, 5.666666666666667], [1.60190196E12, 7.766666666666667], [1.6019025E12, 0.15], [1.60190184E12, 3.933333333333333], [1.6019019E12, 6.3], [1.6019022E12, 6.3], [1.60190178E12, 6.1], [1.60190208E12, 5.5], [1.60190214E12, 8.75], [1.60190244E12, 5.666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6019025E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6019016E12, "maxY": 9.033333333333333, "series": [{"data": [[1.60190202E12, 9.033333333333333], [1.60190232E12, 6.116666666666666], [1.60190238E12, 4.2], [1.60190172E12, 3.2666666666666666], [1.60190226E12, 4.533333333333333], [1.6019016E12, 4.366666666666666], [1.60190166E12, 5.666666666666667], [1.60190196E12, 7.766666666666667], [1.6019025E12, 0.15], [1.60190184E12, 3.933333333333333], [1.6019019E12, 6.3], [1.6019022E12, 6.3], [1.60190178E12, 6.1], [1.60190208E12, 5.5], [1.60190214E12, 8.75], [1.60190244E12, 5.666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60190172E12, 0.03333333333333333], [1.6019016E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6019025E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

