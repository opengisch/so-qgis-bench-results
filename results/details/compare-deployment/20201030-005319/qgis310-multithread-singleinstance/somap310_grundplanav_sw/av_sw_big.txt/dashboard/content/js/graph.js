/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2088.0, "minX": 0.0, "maxY": 22468.0, "series": [{"data": [[0.0, 2088.0], [0.1, 2108.0], [0.2, 2206.0], [0.3, 2214.0], [0.4, 2214.0], [0.5, 2221.0], [0.6, 2229.0], [0.7, 2234.0], [0.8, 2250.0], [0.9, 2259.0], [1.0, 2266.0], [1.1, 2274.0], [1.2, 2276.0], [1.3, 2287.0], [1.4, 2294.0], [1.5, 2299.0], [1.6, 2304.0], [1.7, 2319.0], [1.8, 2324.0], [1.9, 2328.0], [2.0, 2333.0], [2.1, 2337.0], [2.2, 2344.0], [2.3, 2348.0], [2.4, 2354.0], [2.5, 2359.0], [2.6, 2361.0], [2.7, 2369.0], [2.8, 2376.0], [2.9, 2383.0], [3.0, 2391.0], [3.1, 2402.0], [3.2, 2415.0], [3.3, 2420.0], [3.4, 2424.0], [3.5, 2429.0], [3.6, 2437.0], [3.7, 2441.0], [3.8, 2442.0], [3.9, 2445.0], [4.0, 2460.0], [4.1, 2466.0], [4.2, 2475.0], [4.3, 2482.0], [4.4, 2491.0], [4.5, 2499.0], [4.6, 2505.0], [4.7, 2515.0], [4.8, 2522.0], [4.9, 2524.0], [5.0, 2531.0], [5.1, 2535.0], [5.2, 2540.0], [5.3, 2551.0], [5.4, 2556.0], [5.5, 2564.0], [5.6, 2573.0], [5.7, 2586.0], [5.8, 2592.0], [5.9, 2598.0], [6.0, 2610.0], [6.1, 2625.0], [6.2, 2640.0], [6.3, 2649.0], [6.4, 2669.0], [6.5, 2683.0], [6.6, 2691.0], [6.7, 2707.0], [6.8, 2731.0], [6.9, 2737.0], [7.0, 2744.0], [7.1, 2747.0], [7.2, 2761.0], [7.3, 2775.0], [7.4, 2791.0], [7.5, 2797.0], [7.6, 2804.0], [7.7, 2810.0], [7.8, 2820.0], [7.9, 2836.0], [8.0, 2845.0], [8.1, 2856.0], [8.2, 2870.0], [8.3, 2881.0], [8.4, 2888.0], [8.5, 2898.0], [8.6, 2908.0], [8.7, 2914.0], [8.8, 2928.0], [8.9, 2943.0], [9.0, 2958.0], [9.1, 2975.0], [9.2, 2986.0], [9.3, 3007.0], [9.4, 3017.0], [9.5, 3026.0], [9.6, 3041.0], [9.7, 3056.0], [9.8, 3069.0], [9.9, 3078.0], [10.0, 3088.0], [10.1, 3108.0], [10.2, 3119.0], [10.3, 3128.0], [10.4, 3138.0], [10.5, 3159.0], [10.6, 3163.0], [10.7, 3168.0], [10.8, 3180.0], [10.9, 3187.0], [11.0, 3193.0], [11.1, 3200.0], [11.2, 3213.0], [11.3, 3218.0], [11.4, 3229.0], [11.5, 3234.0], [11.6, 3243.0], [11.7, 3247.0], [11.8, 3257.0], [11.9, 3261.0], [12.0, 3266.0], [12.1, 3275.0], [12.2, 3287.0], [12.3, 3294.0], [12.4, 3298.0], [12.5, 3304.0], [12.6, 3309.0], [12.7, 3313.0], [12.8, 3318.0], [12.9, 3326.0], [13.0, 3334.0], [13.1, 3347.0], [13.2, 3352.0], [13.3, 3358.0], [13.4, 3363.0], [13.5, 3368.0], [13.6, 3377.0], [13.7, 3384.0], [13.8, 3389.0], [13.9, 3395.0], [14.0, 3400.0], [14.1, 3410.0], [14.2, 3414.0], [14.3, 3422.0], [14.4, 3428.0], [14.5, 3440.0], [14.6, 3448.0], [14.7, 3457.0], [14.8, 3470.0], [14.9, 3478.0], [15.0, 3483.0], [15.1, 3497.0], [15.2, 3516.0], [15.3, 3548.0], [15.4, 3565.0], [15.5, 3581.0], [15.6, 3585.0], [15.7, 3594.0], [15.8, 3606.0], [15.9, 3623.0], [16.0, 3642.0], [16.1, 3653.0], [16.2, 3668.0], [16.3, 3683.0], [16.4, 3690.0], [16.5, 3699.0], [16.6, 3711.0], [16.7, 3715.0], [16.8, 3722.0], [16.9, 3733.0], [17.0, 3739.0], [17.1, 3746.0], [17.2, 3750.0], [17.3, 3759.0], [17.4, 3773.0], [17.5, 3780.0], [17.6, 3789.0], [17.7, 3807.0], [17.8, 3824.0], [17.9, 3827.0], [18.0, 3839.0], [18.1, 3853.0], [18.2, 3867.0], [18.3, 3881.0], [18.4, 3891.0], [18.5, 3903.0], [18.6, 3920.0], [18.7, 3932.0], [18.8, 3950.0], [18.9, 3960.0], [19.0, 3978.0], [19.1, 3987.0], [19.2, 3995.0], [19.3, 4001.0], [19.4, 4009.0], [19.5, 4019.0], [19.6, 4025.0], [19.7, 4035.0], [19.8, 4041.0], [19.9, 4049.0], [20.0, 4057.0], [20.1, 4067.0], [20.2, 4073.0], [20.3, 4079.0], [20.4, 4090.0], [20.5, 4101.0], [20.6, 4109.0], [20.7, 4115.0], [20.8, 4122.0], [20.9, 4128.0], [21.0, 4130.0], [21.1, 4140.0], [21.2, 4147.0], [21.3, 4154.0], [21.4, 4163.0], [21.5, 4170.0], [21.6, 4177.0], [21.7, 4182.0], [21.8, 4186.0], [21.9, 4197.0], [22.0, 4203.0], [22.1, 4213.0], [22.2, 4224.0], [22.3, 4232.0], [22.4, 4238.0], [22.5, 4254.0], [22.6, 4260.0], [22.7, 4265.0], [22.8, 4269.0], [22.9, 4272.0], [23.0, 4281.0], [23.1, 4291.0], [23.2, 4296.0], [23.3, 4307.0], [23.4, 4314.0], [23.5, 4327.0], [23.6, 4335.0], [23.7, 4348.0], [23.8, 4355.0], [23.9, 4359.0], [24.0, 4372.0], [24.1, 4375.0], [24.2, 4377.0], [24.3, 4391.0], [24.4, 4398.0], [24.5, 4405.0], [24.6, 4410.0], [24.7, 4414.0], [24.8, 4423.0], [24.9, 4436.0], [25.0, 4447.0], [25.1, 4452.0], [25.2, 4460.0], [25.3, 4466.0], [25.4, 4475.0], [25.5, 4479.0], [25.6, 4487.0], [25.7, 4492.0], [25.8, 4495.0], [25.9, 4503.0], [26.0, 4508.0], [26.1, 4514.0], [26.2, 4522.0], [26.3, 4528.0], [26.4, 4537.0], [26.5, 4547.0], [26.6, 4551.0], [26.7, 4557.0], [26.8, 4565.0], [26.9, 4570.0], [27.0, 4575.0], [27.1, 4587.0], [27.2, 4590.0], [27.3, 4597.0], [27.4, 4607.0], [27.5, 4612.0], [27.6, 4616.0], [27.7, 4622.0], [27.8, 4630.0], [27.9, 4638.0], [28.0, 4645.0], [28.1, 4653.0], [28.2, 4660.0], [28.3, 4665.0], [28.4, 4671.0], [28.5, 4684.0], [28.6, 4691.0], [28.7, 4695.0], [28.8, 4699.0], [28.9, 4707.0], [29.0, 4717.0], [29.1, 4723.0], [29.2, 4731.0], [29.3, 4737.0], [29.4, 4740.0], [29.5, 4744.0], [29.6, 4750.0], [29.7, 4755.0], [29.8, 4759.0], [29.9, 4765.0], [30.0, 4776.0], [30.1, 4785.0], [30.2, 4790.0], [30.3, 4793.0], [30.4, 4798.0], [30.5, 4811.0], [30.6, 4818.0], [30.7, 4820.0], [30.8, 4826.0], [30.9, 4829.0], [31.0, 4835.0], [31.1, 4842.0], [31.2, 4848.0], [31.3, 4849.0], [31.4, 4856.0], [31.5, 4859.0], [31.6, 4863.0], [31.7, 4866.0], [31.8, 4870.0], [31.9, 4874.0], [32.0, 4880.0], [32.1, 4881.0], [32.2, 4890.0], [32.3, 4894.0], [32.4, 4903.0], [32.5, 4910.0], [32.6, 4914.0], [32.7, 4920.0], [32.8, 4927.0], [32.9, 4936.0], [33.0, 4944.0], [33.1, 4952.0], [33.2, 4955.0], [33.3, 4962.0], [33.4, 4966.0], [33.5, 4968.0], [33.6, 4971.0], [33.7, 4973.0], [33.8, 4977.0], [33.9, 4985.0], [34.0, 4992.0], [34.1, 4995.0], [34.2, 4998.0], [34.3, 5004.0], [34.4, 5012.0], [34.5, 5013.0], [34.6, 5015.0], [34.7, 5023.0], [34.8, 5029.0], [34.9, 5033.0], [35.0, 5039.0], [35.1, 5041.0], [35.2, 5049.0], [35.3, 5060.0], [35.4, 5066.0], [35.5, 5071.0], [35.6, 5076.0], [35.7, 5081.0], [35.8, 5085.0], [35.9, 5090.0], [36.0, 5095.0], [36.1, 5098.0], [36.2, 5101.0], [36.3, 5103.0], [36.4, 5113.0], [36.5, 5118.0], [36.6, 5126.0], [36.7, 5133.0], [36.8, 5136.0], [36.9, 5143.0], [37.0, 5150.0], [37.1, 5154.0], [37.2, 5158.0], [37.3, 5162.0], [37.4, 5168.0], [37.5, 5173.0], [37.6, 5183.0], [37.7, 5187.0], [37.8, 5192.0], [37.9, 5198.0], [38.0, 5202.0], [38.1, 5205.0], [38.2, 5208.0], [38.3, 5212.0], [38.4, 5215.0], [38.5, 5224.0], [38.6, 5227.0], [38.7, 5235.0], [38.8, 5239.0], [38.9, 5244.0], [39.0, 5246.0], [39.1, 5251.0], [39.2, 5255.0], [39.3, 5260.0], [39.4, 5264.0], [39.5, 5273.0], [39.6, 5276.0], [39.7, 5279.0], [39.8, 5284.0], [39.9, 5287.0], [40.0, 5290.0], [40.1, 5291.0], [40.2, 5294.0], [40.3, 5301.0], [40.4, 5304.0], [40.5, 5308.0], [40.6, 5313.0], [40.7, 5317.0], [40.8, 5322.0], [40.9, 5328.0], [41.0, 5332.0], [41.1, 5337.0], [41.2, 5340.0], [41.3, 5345.0], [41.4, 5349.0], [41.5, 5354.0], [41.6, 5358.0], [41.7, 5363.0], [41.8, 5368.0], [41.9, 5376.0], [42.0, 5380.0], [42.1, 5383.0], [42.2, 5391.0], [42.3, 5394.0], [42.4, 5396.0], [42.5, 5402.0], [42.6, 5406.0], [42.7, 5412.0], [42.8, 5421.0], [42.9, 5427.0], [43.0, 5429.0], [43.1, 5432.0], [43.2, 5437.0], [43.3, 5439.0], [43.4, 5444.0], [43.5, 5453.0], [43.6, 5457.0], [43.7, 5464.0], [43.8, 5468.0], [43.9, 5472.0], [44.0, 5474.0], [44.1, 5480.0], [44.2, 5484.0], [44.3, 5486.0], [44.4, 5489.0], [44.5, 5491.0], [44.6, 5494.0], [44.7, 5496.0], [44.8, 5502.0], [44.9, 5505.0], [45.0, 5507.0], [45.1, 5515.0], [45.2, 5519.0], [45.3, 5523.0], [45.4, 5526.0], [45.5, 5532.0], [45.6, 5537.0], [45.7, 5539.0], [45.8, 5543.0], [45.9, 5545.0], [46.0, 5549.0], [46.1, 5553.0], [46.2, 5555.0], [46.3, 5561.0], [46.4, 5566.0], [46.5, 5569.0], [46.6, 5577.0], [46.7, 5580.0], [46.8, 5586.0], [46.9, 5591.0], [47.0, 5597.0], [47.1, 5600.0], [47.2, 5605.0], [47.3, 5608.0], [47.4, 5613.0], [47.5, 5621.0], [47.6, 5626.0], [47.7, 5629.0], [47.8, 5631.0], [47.9, 5634.0], [48.0, 5637.0], [48.1, 5646.0], [48.2, 5648.0], [48.3, 5651.0], [48.4, 5659.0], [48.5, 5662.0], [48.6, 5666.0], [48.7, 5671.0], [48.8, 5674.0], [48.9, 5684.0], [49.0, 5685.0], [49.1, 5694.0], [49.2, 5697.0], [49.3, 5700.0], [49.4, 5705.0], [49.5, 5709.0], [49.6, 5713.0], [49.7, 5718.0], [49.8, 5719.0], [49.9, 5722.0], [50.0, 5725.0], [50.1, 5727.0], [50.2, 5730.0], [50.3, 5732.0], [50.4, 5736.0], [50.5, 5741.0], [50.6, 5743.0], [50.7, 5746.0], [50.8, 5747.0], [50.9, 5752.0], [51.0, 5754.0], [51.1, 5760.0], [51.2, 5762.0], [51.3, 5767.0], [51.4, 5770.0], [51.5, 5772.0], [51.6, 5777.0], [51.7, 5780.0], [51.8, 5784.0], [51.9, 5790.0], [52.0, 5794.0], [52.1, 5798.0], [52.2, 5799.0], [52.3, 5804.0], [52.4, 5810.0], [52.5, 5816.0], [52.6, 5822.0], [52.7, 5824.0], [52.8, 5829.0], [52.9, 5834.0], [53.0, 5837.0], [53.1, 5842.0], [53.2, 5843.0], [53.3, 5848.0], [53.4, 5855.0], [53.5, 5861.0], [53.6, 5866.0], [53.7, 5868.0], [53.8, 5873.0], [53.9, 5875.0], [54.0, 5881.0], [54.1, 5885.0], [54.2, 5890.0], [54.3, 5894.0], [54.4, 5899.0], [54.5, 5905.0], [54.6, 5908.0], [54.7, 5913.0], [54.8, 5919.0], [54.9, 5921.0], [55.0, 5925.0], [55.1, 5928.0], [55.2, 5933.0], [55.3, 5937.0], [55.4, 5940.0], [55.5, 5946.0], [55.6, 5953.0], [55.7, 5956.0], [55.8, 5958.0], [55.9, 5962.0], [56.0, 5965.0], [56.1, 5971.0], [56.2, 5973.0], [56.3, 5978.0], [56.4, 5983.0], [56.5, 5990.0], [56.6, 5993.0], [56.7, 5999.0], [56.8, 6005.0], [56.9, 6009.0], [57.0, 6013.0], [57.1, 6014.0], [57.2, 6019.0], [57.3, 6022.0], [57.4, 6026.0], [57.5, 6029.0], [57.6, 6033.0], [57.7, 6035.0], [57.8, 6041.0], [57.9, 6046.0], [58.0, 6051.0], [58.1, 6059.0], [58.2, 6064.0], [58.3, 6066.0], [58.4, 6071.0], [58.5, 6078.0], [58.6, 6083.0], [58.7, 6085.0], [58.8, 6092.0], [58.9, 6094.0], [59.0, 6096.0], [59.1, 6100.0], [59.2, 6109.0], [59.3, 6119.0], [59.4, 6124.0], [59.5, 6130.0], [59.6, 6134.0], [59.7, 6139.0], [59.8, 6142.0], [59.9, 6150.0], [60.0, 6155.0], [60.1, 6158.0], [60.2, 6162.0], [60.3, 6167.0], [60.4, 6172.0], [60.5, 6179.0], [60.6, 6183.0], [60.7, 6186.0], [60.8, 6191.0], [60.9, 6194.0], [61.0, 6202.0], [61.1, 6206.0], [61.2, 6215.0], [61.3, 6221.0], [61.4, 6227.0], [61.5, 6231.0], [61.6, 6240.0], [61.7, 6245.0], [61.8, 6249.0], [61.9, 6254.0], [62.0, 6261.0], [62.1, 6270.0], [62.2, 6277.0], [62.3, 6279.0], [62.4, 6283.0], [62.5, 6285.0], [62.6, 6294.0], [62.7, 6297.0], [62.8, 6303.0], [62.9, 6307.0], [63.0, 6312.0], [63.1, 6316.0], [63.2, 6325.0], [63.3, 6332.0], [63.4, 6333.0], [63.5, 6338.0], [63.6, 6340.0], [63.7, 6348.0], [63.8, 6349.0], [63.9, 6356.0], [64.0, 6360.0], [64.1, 6366.0], [64.2, 6370.0], [64.3, 6374.0], [64.4, 6380.0], [64.5, 6383.0], [64.6, 6388.0], [64.7, 6391.0], [64.8, 6394.0], [64.9, 6396.0], [65.0, 6401.0], [65.1, 6404.0], [65.2, 6413.0], [65.3, 6417.0], [65.4, 6420.0], [65.5, 6427.0], [65.6, 6432.0], [65.7, 6435.0], [65.8, 6440.0], [65.9, 6442.0], [66.0, 6448.0], [66.1, 6452.0], [66.2, 6457.0], [66.3, 6463.0], [66.4, 6474.0], [66.5, 6477.0], [66.6, 6483.0], [66.7, 6489.0], [66.8, 6495.0], [66.9, 6503.0], [67.0, 6507.0], [67.1, 6511.0], [67.2, 6515.0], [67.3, 6522.0], [67.4, 6527.0], [67.5, 6536.0], [67.6, 6545.0], [67.7, 6550.0], [67.8, 6556.0], [67.9, 6561.0], [68.0, 6564.0], [68.1, 6571.0], [68.2, 6579.0], [68.3, 6580.0], [68.4, 6586.0], [68.5, 6590.0], [68.6, 6602.0], [68.7, 6605.0], [68.8, 6611.0], [68.9, 6615.0], [69.0, 6619.0], [69.1, 6626.0], [69.2, 6631.0], [69.3, 6637.0], [69.4, 6645.0], [69.5, 6655.0], [69.6, 6660.0], [69.7, 6665.0], [69.8, 6672.0], [69.9, 6675.0], [70.0, 6676.0], [70.1, 6682.0], [70.2, 6691.0], [70.3, 6697.0], [70.4, 6707.0], [70.5, 6714.0], [70.6, 6718.0], [70.7, 6728.0], [70.8, 6734.0], [70.9, 6745.0], [71.0, 6748.0], [71.1, 6753.0], [71.2, 6755.0], [71.3, 6768.0], [71.4, 6771.0], [71.5, 6777.0], [71.6, 6790.0], [71.7, 6796.0], [71.8, 6804.0], [71.9, 6806.0], [72.0, 6812.0], [72.1, 6818.0], [72.2, 6828.0], [72.3, 6837.0], [72.4, 6843.0], [72.5, 6849.0], [72.6, 6853.0], [72.7, 6860.0], [72.8, 6866.0], [72.9, 6869.0], [73.0, 6872.0], [73.1, 6880.0], [73.2, 6887.0], [73.3, 6895.0], [73.4, 6897.0], [73.5, 6903.0], [73.6, 6909.0], [73.7, 6914.0], [73.8, 6921.0], [73.9, 6928.0], [74.0, 6932.0], [74.1, 6937.0], [74.2, 6942.0], [74.3, 6949.0], [74.4, 6957.0], [74.5, 6969.0], [74.6, 6975.0], [74.7, 6983.0], [74.8, 6992.0], [74.9, 6998.0], [75.0, 7005.0], [75.1, 7010.0], [75.2, 7013.0], [75.3, 7024.0], [75.4, 7029.0], [75.5, 7039.0], [75.6, 7045.0], [75.7, 7049.0], [75.8, 7055.0], [75.9, 7064.0], [76.0, 7078.0], [76.1, 7081.0], [76.2, 7084.0], [76.3, 7086.0], [76.4, 7094.0], [76.5, 7100.0], [76.6, 7113.0], [76.7, 7115.0], [76.8, 7121.0], [76.9, 7125.0], [77.0, 7131.0], [77.1, 7140.0], [77.2, 7144.0], [77.3, 7148.0], [77.4, 7150.0], [77.5, 7158.0], [77.6, 7164.0], [77.7, 7171.0], [77.8, 7177.0], [77.9, 7180.0], [78.0, 7186.0], [78.1, 7191.0], [78.2, 7197.0], [78.3, 7207.0], [78.4, 7213.0], [78.5, 7219.0], [78.6, 7226.0], [78.7, 7231.0], [78.8, 7235.0], [78.9, 7240.0], [79.0, 7246.0], [79.1, 7254.0], [79.2, 7262.0], [79.3, 7268.0], [79.4, 7271.0], [79.5, 7288.0], [79.6, 7294.0], [79.7, 7300.0], [79.8, 7306.0], [79.9, 7322.0], [80.0, 7333.0], [80.1, 7347.0], [80.2, 7357.0], [80.3, 7361.0], [80.4, 7369.0], [80.5, 7377.0], [80.6, 7382.0], [80.7, 7385.0], [80.8, 7392.0], [80.9, 7403.0], [81.0, 7410.0], [81.1, 7416.0], [81.2, 7420.0], [81.3, 7425.0], [81.4, 7428.0], [81.5, 7431.0], [81.6, 7442.0], [81.7, 7447.0], [81.8, 7449.0], [81.9, 7462.0], [82.0, 7469.0], [82.1, 7481.0], [82.2, 7496.0], [82.3, 7503.0], [82.4, 7509.0], [82.5, 7516.0], [82.6, 7525.0], [82.7, 7534.0], [82.8, 7537.0], [82.9, 7547.0], [83.0, 7557.0], [83.1, 7573.0], [83.2, 7582.0], [83.3, 7593.0], [83.4, 7605.0], [83.5, 7611.0], [83.6, 7620.0], [83.7, 7626.0], [83.8, 7635.0], [83.9, 7640.0], [84.0, 7650.0], [84.1, 7656.0], [84.2, 7661.0], [84.3, 7677.0], [84.4, 7689.0], [84.5, 7696.0], [84.6, 7706.0], [84.7, 7715.0], [84.8, 7723.0], [84.9, 7730.0], [85.0, 7744.0], [85.1, 7754.0], [85.2, 7760.0], [85.3, 7763.0], [85.4, 7775.0], [85.5, 7780.0], [85.6, 7792.0], [85.7, 7809.0], [85.8, 7813.0], [85.9, 7824.0], [86.0, 7837.0], [86.1, 7847.0], [86.2, 7860.0], [86.3, 7873.0], [86.4, 7884.0], [86.5, 7892.0], [86.6, 7903.0], [86.7, 7909.0], [86.8, 7911.0], [86.9, 7917.0], [87.0, 7921.0], [87.1, 7944.0], [87.2, 7961.0], [87.3, 7966.0], [87.4, 7985.0], [87.5, 7990.0], [87.6, 7996.0], [87.7, 8004.0], [87.8, 8011.0], [87.9, 8018.0], [88.0, 8028.0], [88.1, 8038.0], [88.2, 8043.0], [88.3, 8055.0], [88.4, 8074.0], [88.5, 8094.0], [88.6, 8102.0], [88.7, 8114.0], [88.8, 8132.0], [88.9, 8149.0], [89.0, 8168.0], [89.1, 8182.0], [89.2, 8193.0], [89.3, 8203.0], [89.4, 8214.0], [89.5, 8225.0], [89.6, 8261.0], [89.7, 8281.0], [89.8, 8295.0], [89.9, 8306.0], [90.0, 8321.0], [90.1, 8338.0], [90.2, 8344.0], [90.3, 8359.0], [90.4, 8376.0], [90.5, 8384.0], [90.6, 8411.0], [90.7, 8431.0], [90.8, 8451.0], [90.9, 8459.0], [91.0, 8487.0], [91.1, 8507.0], [91.2, 8534.0], [91.3, 8558.0], [91.4, 8573.0], [91.5, 8616.0], [91.6, 8644.0], [91.7, 8663.0], [91.8, 8701.0], [91.9, 8716.0], [92.0, 8729.0], [92.1, 8736.0], [92.2, 8762.0], [92.3, 8768.0], [92.4, 8795.0], [92.5, 8822.0], [92.6, 8850.0], [92.7, 8887.0], [92.8, 8918.0], [92.9, 8947.0], [93.0, 8961.0], [93.1, 8989.0], [93.2, 9027.0], [93.3, 9055.0], [93.4, 9074.0], [93.5, 9098.0], [93.6, 9113.0], [93.7, 9139.0], [93.8, 9151.0], [93.9, 9172.0], [94.0, 9187.0], [94.1, 9207.0], [94.2, 9230.0], [94.3, 9282.0], [94.4, 9304.0], [94.5, 9322.0], [94.6, 9353.0], [94.7, 9372.0], [94.8, 9408.0], [94.9, 9456.0], [95.0, 9480.0], [95.1, 9533.0], [95.2, 9572.0], [95.3, 9603.0], [95.4, 9647.0], [95.5, 9681.0], [95.6, 9720.0], [95.7, 9735.0], [95.8, 9792.0], [95.9, 9830.0], [96.0, 9924.0], [96.1, 9959.0], [96.2, 9996.0], [96.3, 10049.0], [96.4, 10085.0], [96.5, 10190.0], [96.6, 10234.0], [96.7, 10325.0], [96.8, 10383.0], [96.9, 10455.0], [97.0, 10512.0], [97.1, 10587.0], [97.2, 10645.0], [97.3, 10700.0], [97.4, 10818.0], [97.5, 10954.0], [97.6, 11031.0], [97.7, 11215.0], [97.8, 11320.0], [97.9, 11396.0], [98.0, 11526.0], [98.1, 11645.0], [98.2, 11742.0], [98.3, 11951.0], [98.4, 12016.0], [98.5, 12119.0], [98.6, 12187.0], [98.7, 12328.0], [98.8, 12585.0], [98.9, 12752.0], [99.0, 12935.0], [99.1, 13110.0], [99.2, 13357.0], [99.3, 13469.0], [99.4, 13633.0], [99.5, 13775.0], [99.6, 14048.0], [99.7, 14886.0], [99.8, 16996.0], [99.9, 18458.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2000.0, "maxY": 153.0, "series": [{"data": [[2000.0, 4.0], [2100.0, 5.0], [2200.0, 71.0], [2300.0, 80.0], [2400.0, 74.0], [2500.0, 73.0], [2600.0, 39.0], [2700.0, 45.0], [2800.0, 53.0], [2900.0, 36.0], [3000.0, 43.0], [3100.0, 53.0], [3300.0, 78.0], [3200.0, 70.0], [3400.0, 60.0], [3500.0, 34.0], [3600.0, 39.0], [3700.0, 59.0], [3800.0, 44.0], [3900.0, 39.0], [4000.0, 63.0], [4300.0, 63.0], [4200.0, 68.0], [4100.0, 75.0], [4600.0, 77.0], [4500.0, 77.0], [4400.0, 73.0], [4800.0, 100.0], [4700.0, 84.0], [5100.0, 93.0], [4900.0, 97.0], [5000.0, 100.0], [5200.0, 121.0], [5300.0, 113.0], [5600.0, 113.0], [5400.0, 120.0], [5500.0, 121.0], [5800.0, 114.0], [5700.0, 153.0], [5900.0, 119.0], [6100.0, 95.0], [6000.0, 124.0], [6300.0, 114.0], [6200.0, 96.0], [6600.0, 89.0], [6500.0, 91.0], [6400.0, 97.0], [6800.0, 87.0], [6700.0, 74.0], [6900.0, 79.0], [7000.0, 80.0], [7100.0, 90.0], [7200.0, 77.0], [7300.0, 62.0], [7400.0, 71.0], [7500.0, 57.0], [7600.0, 61.0], [7900.0, 56.0], [7800.0, 49.0], [7700.0, 57.0], [8100.0, 37.0], [8000.0, 47.0], [8300.0, 39.0], [8700.0, 34.0], [8500.0, 23.0], [8200.0, 29.0], [8600.0, 16.0], [8400.0, 23.0], [9100.0, 28.0], [8800.0, 17.0], [9200.0, 17.0], [9000.0, 18.0], [8900.0, 21.0], [9500.0, 14.0], [9600.0, 14.0], [9400.0, 12.0], [9700.0, 13.0], [9300.0, 22.0], [9900.0, 12.0], [10000.0, 11.0], [10200.0, 9.0], [9800.0, 8.0], [10100.0, 5.0], [10700.0, 6.0], [10500.0, 8.0], [10400.0, 9.0], [10300.0, 7.0], [10600.0, 7.0], [10900.0, 6.0], [11200.0, 6.0], [11000.0, 3.0], [11100.0, 2.0], [10800.0, 3.0], [11400.0, 3.0], [11300.0, 7.0], [11700.0, 2.0], [11600.0, 6.0], [11500.0, 4.0], [11900.0, 4.0], [12000.0, 7.0], [11800.0, 4.0], [12100.0, 6.0], [12200.0, 4.0], [12300.0, 1.0], [12700.0, 5.0], [12600.0, 2.0], [12500.0, 4.0], [12400.0, 1.0], [12800.0, 2.0], [12900.0, 4.0], [13000.0, 2.0], [13100.0, 4.0], [13300.0, 1.0], [13200.0, 1.0], [13600.0, 3.0], [13700.0, 4.0], [13800.0, 2.0], [13400.0, 7.0], [13500.0, 2.0], [14100.0, 1.0], [13900.0, 1.0], [14000.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15600.0, 1.0], [16800.0, 1.0], [16900.0, 1.0], [17200.0, 1.0], [17500.0, 2.0], [18400.0, 1.0], [18000.0, 1.0], [18600.0, 2.0], [21600.0, 1.0], [22400.0, 1.0], [21800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.428571428571427, "minX": 1.60402128E12, "maxY": 12.0, "series": [{"data": [[1.60402308E12, 12.0], [1.60402278E12, 12.0], [1.60402368E12, 12.0], [1.60402176E12, 12.0], [1.60402338E12, 12.0], [1.60402146E12, 12.0], [1.60402188E12, 12.0], [1.60402158E12, 12.0], [1.60402248E12, 12.0], [1.6040235E12, 12.0], [1.60402218E12, 12.0], [1.6040238E12, 10.428571428571427], [1.6040226E12, 12.0], [1.6040223E12, 12.0], [1.6040232E12, 12.0], [1.60402128E12, 12.0], [1.6040229E12, 12.0], [1.60402332E12, 12.0], [1.6040214E12, 12.0], [1.60402362E12, 12.0], [1.60402302E12, 12.0], [1.604022E12, 12.0], [1.6040217E12, 12.0], [1.60402212E12, 12.0], [1.60402182E12, 12.0], [1.60402272E12, 12.0], [1.60402374E12, 12.0], [1.60402242E12, 12.0], [1.60402284E12, 12.0], [1.60402254E12, 12.0], [1.60402344E12, 12.0], [1.60402152E12, 12.0], [1.60402314E12, 12.0], [1.60402134E12, 12.0], [1.60402164E12, 12.0], [1.60402326E12, 12.0], [1.60402224E12, 12.0], [1.60402194E12, 12.0], [1.60402356E12, 12.0], [1.60402236E12, 12.0], [1.60402206E12, 12.0], [1.60402296E12, 12.0], [1.60402266E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040238E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4952.0, "minX": 1.0, "maxY": 7060.0, "series": [{"data": [[8.0, 4952.0], [4.0, 7054.0], [2.0, 7060.0], [1.0, 6859.0], [9.0, 6129.0], [10.0, 6395.0], [5.0, 6980.0], [11.0, 6490.0], [12.0, 5840.583317242709], [6.0, 6911.0], [3.0, 7048.0], [7.0, 6862.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5842.219845857417]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 325.6166666666667, "minX": 1.60402128E12, "maxY": 810902.9166666666, "series": [{"data": [[1.60402308E12, 654516.15], [1.60402278E12, 557011.0166666667], [1.60402368E12, 543730.35], [1.60402176E12, 526140.7833333333], [1.60402338E12, 547993.3666666667], [1.60402146E12, 465528.76666666666], [1.60402188E12, 714716.4], [1.60402158E12, 439701.4666666667], [1.60402248E12, 529874.6166666667], [1.6040235E12, 626772.85], [1.60402218E12, 561996.6166666667], [1.6040238E12, 184279.21666666667], [1.6040226E12, 697965.75], [1.6040223E12, 810902.9166666666], [1.6040232E12, 766823.5333333333], [1.60402128E12, 534026.6166666667], [1.6040229E12, 333741.11666666664], [1.60402332E12, 566451.5833333334], [1.6040214E12, 521985.3], [1.60402362E12, 508406.43333333335], [1.60402302E12, 481911.56666666665], [1.604022E12, 602435.4], [1.6040217E12, 341501.2], [1.60402212E12, 566039.75], [1.60402182E12, 782282.4333333333], [1.60402272E12, 528760.6833333333], [1.60402374E12, 514788.55], [1.60402242E12, 430044.76666666666], [1.60402284E12, 551133.2], [1.60402254E12, 626475.6], [1.60402344E12, 505429.7166666667], [1.60402152E12, 665595.9166666666], [1.60402314E12, 764836.0833333334], [1.60402134E12, 675026.25], [1.60402164E12, 405114.48333333334], [1.60402326E12, 607017.3333333334], [1.60402224E12, 537278.3833333333], [1.60402194E12, 718997.3833333333], [1.60402356E12, 555795.1666666666], [1.60402236E12, 486251.2], [1.60402206E12, 716653.8833333333], [1.60402296E12, 337400.88333333336], [1.60402266E12, 479566.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60402308E12, 770.3833333333333], [1.60402278E12, 890.4833333333333], [1.60402368E12, 758.4833333333333], [1.60402176E12, 900.0166666666667], [1.60402338E12, 960.0], [1.60402146E12, 815.1], [1.60402188E12, 892.55], [1.60402158E12, 794.3333333333334], [1.60402248E12, 691.2666666666667], [1.6040235E12, 911.8333333333334], [1.60402218E12, 944.9666666666667], [1.6040238E12, 325.6166666666667], [1.6040226E12, 538.3666666666667], [1.6040223E12, 723.0166666666667], [1.6040232E12, 837.5], [1.60402128E12, 593.6333333333333], [1.6040229E12, 593.0], [1.60402332E12, 1199.8], [1.6040214E12, 999.2333333333333], [1.60402362E12, 1149.0333333333333], [1.60402302E12, 1077.8666666666666], [1.604022E12, 1030.9833333333333], [1.6040217E12, 1398.2], [1.60402212E12, 754.0833333333334], [1.60402182E12, 768.7833333333333], [1.60402272E12, 863.0], [1.60402374E12, 781.1], [1.60402242E12, 759.25], [1.60402284E12, 898.4666666666667], [1.60402254E12, 832.2333333333333], [1.60402344E12, 910.9833333333333], [1.60402152E12, 1061.1333333333334], [1.60402314E12, 822.85], [1.60402134E12, 550.2], [1.60402164E12, 773.35], [1.60402326E12, 1060.2666666666667], [1.60402224E12, 1133.3333333333333], [1.60402194E12, 1057.1], [1.60402356E12, 1147.4166666666667], [1.60402236E12, 1248.0833333333333], [1.60402206E12, 1057.2666666666667], [1.60402296E12, 1290.5666666666666], [1.60402266E12, 1012.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040238E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3738.236559139785, "minX": 1.60402128E12, "maxY": 9443.974025974027, "series": [{"data": [[1.60402308E12, 6737.624999999999], [1.60402278E12, 5990.040650406508], [1.60402368E12, 7268.326732673271], [1.60402176E12, 5705.421874999999], [1.60402338E12, 5494.047619047616], [1.60402146E12, 6218.871794871795], [1.60402188E12, 6317.623931623933], [1.60402158E12, 6372.24074074074], [1.60402248E12, 7730.902173913041], [1.6040235E12, 5996.504201680674], [1.60402218E12, 6028.764227642277], [1.6040238E12, 6943.595238095239], [1.6040226E12, 9127.03947368421], [1.6040223E12, 7550.202127659575], [1.6040232E12, 6636.227272727275], [1.60402128E12, 6603.743589743589], [1.6040229E12, 9279.182926829266], [1.60402332E12, 4751.056603773585], [1.6040214E12, 5095.985815602835], [1.60402362E12, 4638.907894736843], [1.60402302E12, 4853.298013245034], [1.604022E12, 5461.0], [1.6040217E12, 3738.236559139785], [1.60402212E12, 7080.5999999999985], [1.60402182E12, 6994.7326732673255], [1.60402272E12, 5617.975609756095], [1.60402374E12, 6794.009523809527], [1.60402242E12, 7171.0392156862745], [1.60402284E12, 5694.66115702479], [1.60402254E12, 6497.1284403669715], [1.60402344E12, 6151.591666666666], [1.60402152E12, 5036.2361111111095], [1.60402314E12, 6664.398148148146], [1.60402134E12, 9443.974025974027], [1.60402164E12, 7015.935185185187], [1.60402326E12, 4952.092857142856], [1.60402224E12, 4824.473333333337], [1.60402194E12, 5094.278571428573], [1.60402356E12, 4721.019736842104], [1.60402236E12, 4385.379518072289], [1.60402206E12, 4919.150000000002], [1.60402296E12, 4023.146892655365], [1.60402266E12, 5370.260563380283]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040238E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3737.311827956988, "minX": 1.60402128E12, "maxY": 9439.81818181818, "series": [{"data": [[1.60402308E12, 6735.009615384615], [1.60402278E12, 5988.154471544714], [1.60402368E12, 7266.237623762378], [1.60402176E12, 5703.429687500002], [1.60402338E12, 5492.365079365079], [1.60402146E12, 6216.923076923078], [1.60402188E12, 6314.7777777777765], [1.60402158E12, 6370.379629629628], [1.60402248E12, 7728.173913043479], [1.6040235E12, 5994.495798319325], [1.60402218E12, 6026.715447154472], [1.6040238E12, 6941.785714285716], [1.6040226E12, 9122.526315789473], [1.6040223E12, 7546.372340425531], [1.6040232E12, 6633.563636363634], [1.60402128E12, 6600.8589743589755], [1.6040229E12, 9277.451219512199], [1.60402332E12, 4749.710691823901], [1.6040214E12, 5094.205673758864], [1.60402362E12, 4637.677631578948], [1.60402302E12, 4851.947019867551], [1.604022E12, 5458.860294117645], [1.6040217E12, 3737.311827956988], [1.60402212E12, 7077.870000000003], [1.60402182E12, 6991.089108910891], [1.60402272E12, 5616.089430894311], [1.60402374E12, 6791.952380952382], [1.60402242E12, 7169.019607843137], [1.60402284E12, 5692.801652892559], [1.60402254E12, 6494.43119266055], [1.60402344E12, 6149.991666666668], [1.60402152E12, 5034.013888888889], [1.60402314E12, 6661.740740740738], [1.60402134E12, 9439.81818181818], [1.60402164E12, 7014.111111111111], [1.60402326E12, 4950.42857142857], [1.60402224E12, 4822.920000000001], [1.60402194E12, 5091.935714285715], [1.60402356E12, 4719.611842105264], [1.60402236E12, 4384.138554216868], [1.60402206E12, 4916.82857142857], [1.60402296E12, 4022.3615819209035], [1.60402266E12, 5368.795774647889]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040238E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03947368421052632, "minX": 1.60402128E12, "maxY": 1.333333333333333, "series": [{"data": [[1.60402308E12, 0.1057692307692308], [1.60402278E12, 0.13008130081300823], [1.60402368E12, 0.1188118811881188], [1.60402176E12, 0.11718750000000001], [1.60402338E12, 0.10317460317460315], [1.60402146E12, 0.13675213675213677], [1.60402188E12, 0.14529914529914528], [1.60402158E12, 0.1574074074074074], [1.60402248E12, 0.14130434782608703], [1.6040235E12, 0.10924369747899157], [1.60402218E12, 0.13821138211382109], [1.6040238E12, 0.14285714285714288], [1.6040226E12, 0.1578947368421053], [1.6040223E12, 0.1170212765957448], [1.6040232E12, 0.10000000000000002], [1.60402128E12, 1.333333333333333], [1.6040229E12, 0.19512195121951223], [1.60402332E12, 0.06918238993710694], [1.6040214E12, 0.10638297872340435], [1.60402362E12, 0.07236842105263161], [1.60402302E12, 0.08609271523178805], [1.604022E12, 0.1176470588235295], [1.6040217E12, 0.06989247311827955], [1.60402212E12, 0.12999999999999998], [1.60402182E12, 0.1188118811881188], [1.60402272E12, 0.0813008130081301], [1.60402374E12, 0.11428571428571427], [1.60402242E12, 0.15686274509803919], [1.60402284E12, 0.08264462809917353], [1.60402254E12, 0.11009174311926609], [1.60402344E12, 0.10833333333333334], [1.60402152E12, 0.10416666666666673], [1.60402314E12, 0.12962962962962968], [1.60402134E12, 0.23376623376623398], [1.60402164E12, 0.12037037037037036], [1.60402326E12, 0.10714285714285716], [1.60402224E12, 0.1066666666666667], [1.60402194E12, 0.08571428571428573], [1.60402356E12, 0.03947368421052632], [1.60402236E12, 0.09036144578313253], [1.60402206E12, 0.09285714285714285], [1.60402296E12, 0.07344632768361582], [1.60402266E12, 0.09154929577464788]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040238E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2088.0, "minX": 1.60402128E12, "maxY": 22468.0, "series": [{"data": [[1.60402308E12, 9574.0], [1.60402278E12, 13774.0], [1.60402368E12, 12571.0], [1.60402176E12, 10234.0], [1.60402338E12, 8221.0], [1.60402146E12, 14886.0], [1.60402188E12, 8395.0], [1.60402158E12, 10513.0], [1.60402248E12, 14048.0], [1.6040235E12, 9139.0], [1.60402218E12, 9176.0], [1.6040238E12, 9200.0], [1.6040226E12, 22468.0], [1.6040223E12, 12640.0], [1.6040232E12, 8850.0], [1.60402128E12, 9244.0], [1.6040229E12, 13562.0], [1.60402332E12, 8691.0], [1.6040214E12, 9750.0], [1.60402362E12, 9683.0], [1.60402302E12, 7809.0], [1.604022E12, 10681.0], [1.6040217E12, 9098.0], [1.60402212E12, 9830.0], [1.60402182E12, 10366.0], [1.60402272E12, 11127.0], [1.60402374E12, 10640.0], [1.60402242E12, 13868.0], [1.60402284E12, 12783.0], [1.60402254E12, 8219.0], [1.60402344E12, 8662.0], [1.60402152E12, 7727.0], [1.60402314E12, 9484.0], [1.60402134E12, 15644.0], [1.60402164E12, 12129.0], [1.60402326E12, 7527.0], [1.60402224E12, 8344.0], [1.60402194E12, 7681.0], [1.60402356E12, 10592.0], [1.60402236E12, 7819.0], [1.60402206E12, 10080.0], [1.60402296E12, 6824.0], [1.60402266E12, 13506.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60402308E12, 3380.0], [1.60402278E12, 3526.5399980783463], [1.60402368E12, 3895.0], [1.60402176E12, 2989.3269936335087], [1.60402338E12, 2445.3399884939195], [1.60402146E12, 2205.3719998311994], [1.60402188E12, 3882.431996173859], [1.60402158E12, 3565.0], [1.60402248E12, 3646.0], [1.6040235E12, 4329.239999198913], [1.60402218E12, 4280.443995299339], [1.6040238E12, 4952.0], [1.6040226E12, 4487.0], [1.6040223E12, 5012.0], [1.6040232E12, 3393.0], [1.60402128E12, 3315.0], [1.6040229E12, 4547.0], [1.60402332E12, 2549.8399995803834], [1.6040214E12, 2230.111999864578], [1.60402362E12, 2184.047999124527], [1.60402302E12, 2543.3039989852905], [1.604022E12, 2446.0869987261294], [1.6040217E12, 2089.3659999108313], [1.60402212E12, 4260.0], [1.60402182E12, 4077.0], [1.60402272E12, 2262.551991958618], [1.60402374E12, 3581.0], [1.60402242E12, 4150.0], [1.60402284E12, 3454.2059928154945], [1.60402254E12, 3885.0], [1.60402344E12, 2834.224999278784], [1.60402152E12, 3236.319999170303], [1.60402314E12, 4740.0], [1.60402134E12, 5152.0], [1.60402164E12, 3584.0], [1.60402326E12, 2330.958999630213], [1.60402224E12, 2358.7179999279974], [1.60402194E12, 2904.021991999149], [1.60402356E12, 2328.130999890566], [1.60402236E12, 2236.1199984073637], [1.60402206E12, 2258.268999966383], [1.60402296E12, 2207.203999915123], [1.60402266E12, 2516.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60402308E12, 3381.1850003004074], [1.60402278E12, 3533.7940007686616], [1.60402368E12, 3897.2736022567747], [1.60402176E12, 3013.3597025465965], [1.60402338E12, 2488.7740046024323], [1.60402146E12, 2206.00920006752], [1.60402188E12, 3896.8752015304567], [1.60402158E12, 3569.0341005301475], [1.60402248E12, 3646.0], [1.6040235E12, 4332.264000320434], [1.60402218E12, 4298.188401880264], [1.6040238E12, 4952.0], [1.6040226E12, 4487.0], [1.6040223E12, 5012.0], [1.6040232E12, 3401.406500899792], [1.60402128E12, 3315.0], [1.6040229E12, 4547.0], [1.60402332E12, 2551.4240001678468], [1.6040214E12, 2230.6232000541686], [1.60402362E12, 2187.352800350189], [1.60402302E12, 2547.1344004058838], [1.604022E12, 2450.895700509548], [1.6040217E12, 2089.7026000356673], [1.60402212E12, 4260.0], [1.60402182E12, 4077.499800496101], [1.60402272E12, 2292.9072032165527], [1.60402374E12, 3586.0388010311126], [1.60402242E12, 4151.45780072689], [1.60402284E12, 3481.326602873802], [1.60402254E12, 3904.2240022659303], [1.60402344E12, 2836.9475002884865], [1.60402152E12, 3239.4520003318785], [1.60402314E12, 4740.31640004158], [1.60402134E12, 5152.0], [1.60402164E12, 3604.8824027442934], [1.60402326E12, 2332.354900147915], [1.60402224E12, 2358.989800028801], [1.60402194E12, 2934.22420320034], [1.60402356E12, 2328.5441000437736], [1.60402236E12, 2242.1320006370543], [1.60402206E12, 2258.395900013447], [1.60402296E12, 2207.5244000339508], [1.60402266E12, 2516.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60402308E12, 3380.0], [1.60402278E12, 3530.569999039173], [1.60402368E12, 3895.0], [1.60402176E12, 3002.6784968167544], [1.60402338E12, 2469.4699942469597], [1.60402146E12, 2205.7259999156], [1.60402188E12, 3890.4559980869294], [1.60402158E12, 3566.8104993373154], [1.60402248E12, 3646.0], [1.6040235E12, 4330.919999599457], [1.60402218E12, 4290.30199764967], [1.6040238E12, 4952.0], [1.6040226E12, 4487.0], [1.6040223E12, 5012.0], [1.6040232E12, 3397.6324988752604], [1.60402128E12, 3315.0], [1.6040229E12, 4547.0], [1.60402332E12, 2550.7199997901917], [1.6040214E12, 2230.395999932289], [1.60402362E12, 2185.8839995622634], [1.60402302E12, 2545.4319994926454], [1.604022E12, 2448.758499363065], [1.6040217E12, 2089.5529999554155], [1.60402212E12, 4260.0], [1.60402182E12, 4077.0], [1.60402272E12, 2279.415995979309], [1.60402374E12, 3581.713998711109], [1.60402242E12, 4150.0], [1.60402284E12, 3469.272996407747], [1.60402254E12, 3894.7199971675873], [1.60402344E12, 2835.737499639392], [1.60402152E12, 3238.0599995851517], [1.60402314E12, 4740.141999948025], [1.60402134E12, 5152.0], [1.60402164E12, 3593.3719965696337], [1.60402326E12, 2331.7344998151066], [1.60402224E12, 2358.8689999639987], [1.60402194E12, 2920.8009959995748], [1.60402356E12, 2328.3604999452828], [1.60402236E12, 2239.459999203682], [1.60402206E12, 2258.3394999831917], [1.60402296E12, 2207.3819999575617], [1.60402266E12, 2516.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60402308E12, 3380.0], [1.60402278E12, 3519.0], [1.60402368E12, 3895.0], [1.60402176E12, 2956.0], [1.60402338E12, 2391.0], [1.60402146E12, 2205.0], [1.60402188E12, 3874.0], [1.60402158E12, 3565.0], [1.60402248E12, 3646.0], [1.6040235E12, 4327.0], [1.60402218E12, 4262.0], [1.6040238E12, 4952.0], [1.6040226E12, 4487.0], [1.6040223E12, 5012.0], [1.6040232E12, 3393.0], [1.60402128E12, 3315.0], [1.6040229E12, 4547.0], [1.60402332E12, 2545.0], [1.6040214E12, 2229.0], [1.60402362E12, 2175.0], [1.60402302E12, 2533.0], [1.604022E12, 2437.0], [1.6040217E12, 2088.0], [1.60402212E12, 4260.0], [1.60402182E12, 4077.0], [1.60402272E12, 2231.0], [1.60402374E12, 3581.0], [1.60402242E12, 4150.0], [1.60402284E12, 3430.0], [1.60402254E12, 3885.0], [1.60402344E12, 2832.0], [1.60402152E12, 3229.0], [1.60402314E12, 4740.0], [1.60402134E12, 5152.0], [1.60402164E12, 3584.0], [1.60402326E12, 2328.0], [1.60402224E12, 2358.0], [1.60402194E12, 2840.0], [1.60402356E12, 2327.0], [1.60402236E12, 2216.0], [1.60402206E12, 2258.0], [1.60402296E12, 2206.0], [1.60402266E12, 2516.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60402308E12, 6865.0], [1.60402278E12, 5088.0], [1.60402368E12, 6806.0], [1.60402176E12, 5292.5], [1.60402338E12, 5830.0], [1.60402146E12, 5569.0], [1.60402188E12, 6412.0], [1.60402158E12, 5970.0], [1.60402248E12, 7365.0], [1.6040235E12, 5760.0], [1.60402218E12, 5795.0], [1.6040238E12, 6714.0], [1.6040226E12, 7406.5], [1.6040223E12, 6941.5], [1.6040232E12, 6588.0], [1.60402128E12, 6711.5], [1.6040229E12, 9191.0], [1.60402332E12, 4563.0], [1.6040214E12, 5074.0], [1.60402362E12, 4729.0], [1.60402302E12, 4800.0], [1.604022E12, 5474.5], [1.6040217E12, 3154.5], [1.60402212E12, 7356.5], [1.60402182E12, 7145.0], [1.60402272E12, 5564.0], [1.60402374E12, 7123.0], [1.60402242E12, 6516.0], [1.60402284E12, 5264.0], [1.60402254E12, 6516.0], [1.60402344E12, 6198.5], [1.60402152E12, 4625.5], [1.60402314E12, 6447.0], [1.60402134E12, 8961.0], [1.60402164E12, 6911.0], [1.60402326E12, 5303.5], [1.60402224E12, 4041.5], [1.60402194E12, 5177.5], [1.60402356E12, 3920.5], [1.60402236E12, 3712.5], [1.60402206E12, 4864.5], [1.60402296E12, 4151.0], [1.60402266E12, 5259.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040238E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2634.0, "minX": 1.0, "maxY": 7085.0, "series": [{"data": [[1.0, 7085.0], [2.0, 6131.0], [4.0, 4679.5], [5.0, 2983.0], [3.0, 5727.5], [6.0, 2634.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2634.0, "minX": 1.0, "maxY": 7079.0, "series": [{"data": [[1.0, 7079.0], [2.0, 6129.0], [4.0, 4678.5], [5.0, 2983.0], [3.0, 5724.5], [6.0, 2634.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.60402128E12, "maxY": 3.1, "series": [{"data": [[1.60402308E12, 1.7333333333333334], [1.60402278E12, 2.05], [1.60402368E12, 1.6833333333333333], [1.60402176E12, 2.1333333333333333], [1.60402338E12, 2.1], [1.60402146E12, 1.95], [1.60402188E12, 1.95], [1.60402158E12, 1.8], [1.60402248E12, 1.5333333333333334], [1.6040235E12, 1.9833333333333334], [1.60402218E12, 2.05], [1.6040238E12, 0.5], [1.6040226E12, 1.2666666666666666], [1.6040223E12, 1.5666666666666667], [1.6040232E12, 1.8333333333333333], [1.60402128E12, 1.5], [1.6040229E12, 1.3666666666666667], [1.60402332E12, 2.65], [1.6040214E12, 2.35], [1.60402362E12, 2.533333333333333], [1.60402302E12, 2.5166666666666666], [1.604022E12, 2.2666666666666666], [1.6040217E12, 3.1], [1.60402212E12, 1.6666666666666667], [1.60402182E12, 1.6833333333333333], [1.60402272E12, 2.05], [1.60402374E12, 1.75], [1.60402242E12, 1.7], [1.60402284E12, 2.0166666666666666], [1.60402254E12, 1.8166666666666667], [1.60402344E12, 2.0], [1.60402152E12, 2.4], [1.60402314E12, 1.8], [1.60402134E12, 1.2833333333333334], [1.60402164E12, 1.8], [1.60402326E12, 2.3333333333333335], [1.60402224E12, 2.5], [1.60402194E12, 2.3333333333333335], [1.60402356E12, 2.533333333333333], [1.60402236E12, 2.7666666666666666], [1.60402206E12, 2.3333333333333335], [1.60402296E12, 2.95], [1.60402266E12, 2.3666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040238E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.60402128E12, "maxY": 3.1, "series": [{"data": [[1.60402308E12, 1.7333333333333334], [1.60402278E12, 2.05], [1.60402368E12, 1.6833333333333333], [1.60402176E12, 2.1333333333333333], [1.60402338E12, 2.1], [1.60402146E12, 1.95], [1.60402188E12, 1.95], [1.60402158E12, 1.8], [1.60402248E12, 1.5333333333333334], [1.6040235E12, 1.9833333333333334], [1.60402218E12, 2.05], [1.6040238E12, 0.7], [1.6040226E12, 1.2666666666666666], [1.6040223E12, 1.5666666666666667], [1.6040232E12, 1.8333333333333333], [1.60402128E12, 1.3], [1.6040229E12, 1.3666666666666667], [1.60402332E12, 2.65], [1.6040214E12, 2.35], [1.60402362E12, 2.533333333333333], [1.60402302E12, 2.5166666666666666], [1.604022E12, 2.2666666666666666], [1.6040217E12, 3.1], [1.60402212E12, 1.6666666666666667], [1.60402182E12, 1.6833333333333333], [1.60402272E12, 2.05], [1.60402374E12, 1.75], [1.60402242E12, 1.7], [1.60402284E12, 2.0166666666666666], [1.60402254E12, 1.8166666666666667], [1.60402344E12, 2.0], [1.60402152E12, 2.4], [1.60402314E12, 1.8], [1.60402134E12, 1.2833333333333334], [1.60402164E12, 1.8], [1.60402326E12, 2.3333333333333335], [1.60402224E12, 2.5], [1.60402194E12, 2.3333333333333335], [1.60402356E12, 2.533333333333333], [1.60402236E12, 2.7666666666666666], [1.60402206E12, 2.3333333333333335], [1.60402296E12, 2.95], [1.60402266E12, 2.3666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040238E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.60402128E12, "maxY": 3.1, "series": [{"data": [[1.60402308E12, 1.7333333333333334], [1.60402278E12, 2.05], [1.60402368E12, 1.6833333333333333], [1.60402176E12, 2.1333333333333333], [1.60402338E12, 2.1], [1.60402146E12, 1.95], [1.60402188E12, 1.95], [1.60402158E12, 1.8], [1.60402248E12, 1.5333333333333334], [1.6040235E12, 1.9833333333333334], [1.60402218E12, 2.05], [1.6040238E12, 0.7], [1.6040226E12, 1.2666666666666666], [1.6040223E12, 1.5666666666666667], [1.6040232E12, 1.8333333333333333], [1.60402128E12, 1.3], [1.6040229E12, 1.3666666666666667], [1.60402332E12, 2.65], [1.6040214E12, 2.35], [1.60402362E12, 2.533333333333333], [1.60402302E12, 2.5166666666666666], [1.604022E12, 2.2666666666666666], [1.6040217E12, 3.1], [1.60402212E12, 1.6666666666666667], [1.60402182E12, 1.6833333333333333], [1.60402272E12, 2.05], [1.60402374E12, 1.75], [1.60402242E12, 1.7], [1.60402284E12, 2.0166666666666666], [1.60402254E12, 1.8166666666666667], [1.60402344E12, 2.0], [1.60402152E12, 2.4], [1.60402314E12, 1.8], [1.60402134E12, 1.2833333333333334], [1.60402164E12, 1.8], [1.60402326E12, 2.3333333333333335], [1.60402224E12, 2.5], [1.60402194E12, 2.3333333333333335], [1.60402356E12, 2.533333333333333], [1.60402236E12, 2.7666666666666666], [1.60402206E12, 2.3333333333333335], [1.60402296E12, 2.95], [1.60402266E12, 2.3666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040238E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.60402128E12, "maxY": 3.1, "series": [{"data": [[1.60402308E12, 1.7333333333333334], [1.60402278E12, 2.05], [1.60402368E12, 1.6833333333333333], [1.60402176E12, 2.1333333333333333], [1.60402338E12, 2.1], [1.60402146E12, 1.95], [1.60402188E12, 1.95], [1.60402158E12, 1.8], [1.60402248E12, 1.5333333333333334], [1.6040235E12, 1.9833333333333334], [1.60402218E12, 2.05], [1.6040238E12, 0.7], [1.6040226E12, 1.2666666666666666], [1.6040223E12, 1.5666666666666667], [1.6040232E12, 1.8333333333333333], [1.60402128E12, 1.3], [1.6040229E12, 1.3666666666666667], [1.60402332E12, 2.65], [1.6040214E12, 2.35], [1.60402362E12, 2.533333333333333], [1.60402302E12, 2.5166666666666666], [1.604022E12, 2.2666666666666666], [1.6040217E12, 3.1], [1.60402212E12, 1.6666666666666667], [1.60402182E12, 1.6833333333333333], [1.60402272E12, 2.05], [1.60402374E12, 1.75], [1.60402242E12, 1.7], [1.60402284E12, 2.0166666666666666], [1.60402254E12, 1.8166666666666667], [1.60402344E12, 2.0], [1.60402152E12, 2.4], [1.60402314E12, 1.8], [1.60402134E12, 1.2833333333333334], [1.60402164E12, 1.8], [1.60402326E12, 2.3333333333333335], [1.60402224E12, 2.5], [1.60402194E12, 2.3333333333333335], [1.60402356E12, 2.533333333333333], [1.60402236E12, 2.7666666666666666], [1.60402206E12, 2.3333333333333335], [1.60402296E12, 2.95], [1.60402266E12, 2.3666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040238E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

