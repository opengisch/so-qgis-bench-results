/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3126.0, "minX": 0.0, "maxY": 45143.0, "series": [{"data": [[0.0, 3126.0], [0.1, 3126.0], [0.2, 6053.0], [0.3, 8280.0], [0.4, 8280.0], [0.5, 11055.0], [0.6, 13650.0], [0.7, 16252.0], [0.8, 16252.0], [0.9, 16633.0], [1.0, 16658.0], [1.1, 16664.0], [1.2, 16664.0], [1.3, 16670.0], [1.4, 17006.0], [1.5, 17012.0], [1.6, 17012.0], [1.7, 17040.0], [1.8, 17062.0], [1.9, 17062.0], [2.0, 17120.0], [2.1, 17198.0], [2.2, 17200.0], [2.3, 17200.0], [2.4, 17216.0], [2.5, 17227.0], [2.6, 17278.0], [2.7, 17278.0], [2.8, 17341.0], [2.9, 17453.0], [3.0, 17461.0], [3.1, 17461.0], [3.2, 17493.0], [3.3, 17498.0], [3.4, 17498.0], [3.5, 17503.0], [3.6, 17523.0], [3.7, 17529.0], [3.8, 17529.0], [3.9, 17533.0], [4.0, 17540.0], [4.1, 17561.0], [4.2, 17561.0], [4.3, 17575.0], [4.4, 17577.0], [4.5, 17623.0], [4.6, 17623.0], [4.7, 17680.0], [4.8, 17706.0], [4.9, 17712.0], [5.0, 17712.0], [5.1, 17720.0], [5.2, 17727.0], [5.3, 17727.0], [5.4, 17736.0], [5.5, 17762.0], [5.6, 17774.0], [5.7, 17774.0], [5.8, 17776.0], [5.9, 17834.0], [6.0, 17932.0], [6.1, 17932.0], [6.2, 17950.0], [6.3, 18008.0], [6.4, 18010.0], [6.5, 18010.0], [6.6, 18036.0], [6.7, 18038.0], [6.8, 18038.0], [6.9, 18046.0], [7.0, 18048.0], [7.1, 18082.0], [7.2, 18082.0], [7.3, 18114.0], [7.4, 18147.0], [7.5, 18173.0], [7.6, 18173.0], [7.7, 18186.0], [7.8, 18202.0], [7.9, 18250.0], [8.0, 18250.0], [8.1, 18255.0], [8.2, 18300.0], [8.3, 18304.0], [8.4, 18304.0], [8.5, 18318.0], [8.6, 18342.0], [8.7, 18342.0], [8.8, 18390.0], [8.9, 18453.0], [9.0, 18470.0], [9.1, 18470.0], [9.2, 18541.0], [9.3, 18573.0], [9.4, 18583.0], [9.5, 18583.0], [9.6, 18587.0], [9.7, 18781.0], [9.8, 18839.0], [9.9, 18839.0], [10.0, 18862.0], [10.1, 18876.0], [10.2, 18876.0], [10.3, 18881.0], [10.4, 18939.0], [10.5, 18944.0], [10.6, 18944.0], [10.7, 18959.0], [10.8, 18998.0], [10.9, 19007.0], [11.0, 19007.0], [11.1, 19228.0], [11.2, 19247.0], [11.3, 19252.0], [11.4, 19252.0], [11.5, 19354.0], [11.6, 19436.0], [11.7, 19436.0], [11.8, 19488.0], [11.9, 19493.0], [12.0, 19513.0], [12.1, 19513.0], [12.2, 19514.0], [12.3, 19548.0], [12.4, 19577.0], [12.5, 19577.0], [12.6, 19592.0], [12.7, 19687.0], [12.8, 19714.0], [12.9, 19714.0], [13.0, 19737.0], [13.1, 19804.0], [13.2, 19811.0], [13.3, 19811.0], [13.4, 19929.0], [13.5, 19935.0], [13.6, 19935.0], [13.7, 19957.0], [13.8, 19974.0], [13.9, 20041.0], [14.0, 20041.0], [14.1, 20044.0], [14.2, 20107.0], [14.3, 20128.0], [14.4, 20128.0], [14.5, 20149.0], [14.6, 20152.0], [14.7, 20168.0], [14.8, 20168.0], [14.9, 20170.0], [15.0, 20179.0], [15.1, 20179.0], [15.2, 20197.0], [15.3, 20220.0], [15.4, 20260.0], [15.5, 20260.0], [15.6, 20327.0], [15.7, 20609.0], [15.8, 20612.0], [15.9, 20612.0], [16.0, 20612.0], [16.1, 20640.0], [16.2, 20663.0], [16.3, 20663.0], [16.4, 20679.0], [16.5, 20716.0], [16.6, 20789.0], [16.7, 20789.0], [16.8, 20818.0], [16.9, 20872.0], [17.0, 20872.0], [17.1, 20893.0], [17.2, 21012.0], [17.3, 21214.0], [17.4, 21214.0], [17.5, 21457.0], [17.6, 21532.0], [17.7, 21674.0], [17.8, 21674.0], [17.9, 21690.0], [18.0, 21765.0], [18.1, 21891.0], [18.2, 21891.0], [18.3, 21964.0], [18.4, 21974.0], [18.5, 21974.0], [18.6, 22009.0], [18.7, 22022.0], [18.8, 22062.0], [18.9, 22062.0], [19.0, 22064.0], [19.1, 22078.0], [19.2, 22087.0], [19.3, 22087.0], [19.4, 22100.0], [19.5, 22143.0], [19.6, 22151.0], [19.7, 22151.0], [19.8, 22166.0], [19.9, 22173.0], [20.0, 22181.0], [20.1, 22181.0], [20.2, 22224.0], [20.3, 22229.0], [20.4, 22229.0], [20.5, 22232.0], [20.6, 22234.0], [20.7, 22256.0], [20.8, 22256.0], [20.9, 22257.0], [21.0, 22265.0], [21.1, 22311.0], [21.2, 22311.0], [21.3, 22342.0], [21.4, 22345.0], [21.5, 22375.0], [21.6, 22375.0], [21.7, 22392.0], [21.8, 22496.0], [21.9, 22496.0], [22.0, 22548.0], [22.1, 22557.0], [22.2, 22581.0], [22.3, 22581.0], [22.4, 22581.0], [22.5, 22617.0], [22.6, 22637.0], [22.7, 22637.0], [22.8, 22716.0], [22.9, 22739.0], [23.0, 22797.0], [23.1, 22797.0], [23.2, 22805.0], [23.3, 22813.0], [23.4, 22813.0], [23.5, 22841.0], [23.6, 22912.0], [23.7, 22974.0], [23.8, 22974.0], [23.9, 22983.0], [24.0, 23055.0], [24.1, 23062.0], [24.2, 23062.0], [24.3, 23171.0], [24.4, 23177.0], [24.5, 23213.0], [24.6, 23213.0], [24.7, 23232.0], [24.8, 23256.0], [24.9, 23303.0], [25.0, 23303.0], [25.1, 23325.0], [25.2, 23343.0], [25.3, 23343.0], [25.4, 23392.0], [25.5, 23425.0], [25.6, 23460.0], [25.7, 23460.0], [25.8, 23501.0], [25.9, 23524.0], [26.0, 23525.0], [26.1, 23525.0], [26.2, 23546.0], [26.3, 23553.0], [26.4, 23576.0], [26.5, 23576.0], [26.6, 23582.0], [26.7, 23605.0], [26.8, 23605.0], [26.9, 23623.0], [27.0, 23624.0], [27.1, 23651.0], [27.2, 23651.0], [27.3, 23669.0], [27.4, 23691.0], [27.5, 23726.0], [27.6, 23726.0], [27.7, 23740.0], [27.8, 23746.0], [27.9, 23756.0], [28.0, 23756.0], [28.1, 23794.0], [28.2, 23799.0], [28.3, 23804.0], [28.4, 23804.0], [28.5, 23827.0], [28.6, 23829.0], [28.7, 23829.0], [28.8, 23860.0], [28.9, 23910.0], [29.0, 23920.0], [29.1, 23920.0], [29.2, 23926.0], [29.3, 23931.0], [29.4, 23944.0], [29.5, 23944.0], [29.6, 23967.0], [29.7, 23973.0], [29.8, 23992.0], [29.9, 23992.0], [30.0, 23994.0], [30.1, 24007.0], [30.2, 24007.0], [30.3, 24012.0], [30.4, 24027.0], [30.5, 24038.0], [30.6, 24038.0], [30.7, 24042.0], [30.8, 24049.0], [30.9, 24051.0], [31.0, 24051.0], [31.1, 24060.0], [31.2, 24089.0], [31.3, 24098.0], [31.4, 24098.0], [31.5, 24102.0], [31.6, 24103.0], [31.7, 24103.0], [31.8, 24136.0], [31.9, 24145.0], [32.0, 24158.0], [32.1, 24158.0], [32.2, 24190.0], [32.3, 24193.0], [32.4, 24303.0], [32.5, 24303.0], [32.6, 24305.0], [32.7, 24314.0], [32.8, 24315.0], [32.9, 24315.0], [33.0, 24322.0], [33.1, 24336.0], [33.2, 24347.0], [33.3, 24347.0], [33.4, 24358.0], [33.5, 24368.0], [33.6, 24368.0], [33.7, 24374.0], [33.8, 24379.0], [33.9, 24423.0], [34.0, 24423.0], [34.1, 24460.0], [34.2, 24510.0], [34.3, 24548.0], [34.4, 24548.0], [34.5, 24561.0], [34.6, 24661.0], [34.7, 24698.0], [34.8, 24698.0], [34.9, 24721.0], [35.0, 24732.0], [35.1, 24732.0], [35.2, 24804.0], [35.3, 24844.0], [35.4, 24859.0], [35.5, 24859.0], [35.6, 24871.0], [35.7, 24871.0], [35.8, 24874.0], [35.9, 24874.0], [36.0, 24881.0], [36.1, 24885.0], [36.2, 24909.0], [36.3, 24909.0], [36.4, 24912.0], [36.5, 24912.0], [36.6, 24941.0], [36.7, 24941.0], [36.8, 24947.0], [36.9, 24949.0], [37.0, 24949.0], [37.1, 24958.0], [37.2, 24958.0], [37.3, 24983.0], [37.4, 24983.0], [37.5, 24988.0], [37.6, 25050.0], [37.7, 25078.0], [37.8, 25078.0], [37.9, 25081.0], [38.0, 25088.0], [38.1, 25089.0], [38.2, 25089.0], [38.3, 25099.0], [38.4, 25116.0], [38.5, 25116.0], [38.6, 25187.0], [38.7, 25190.0], [38.8, 25202.0], [38.9, 25202.0], [39.0, 25212.0], [39.1, 25219.0], [39.2, 25274.0], [39.3, 25274.0], [39.4, 25304.0], [39.5, 25311.0], [39.6, 25352.0], [39.7, 25352.0], [39.8, 25371.0], [39.9, 25388.0], [40.0, 25425.0], [40.1, 25425.0], [40.2, 25489.0], [40.3, 25511.0], [40.4, 25511.0], [40.5, 25516.0], [40.6, 25536.0], [40.7, 25538.0], [40.8, 25538.0], [40.9, 25588.0], [41.0, 25601.0], [41.1, 25637.0], [41.2, 25637.0], [41.3, 25655.0], [41.4, 25664.0], [41.5, 25665.0], [41.6, 25665.0], [41.7, 25700.0], [41.8, 25715.0], [41.9, 25715.0], [42.0, 25770.0], [42.1, 25863.0], [42.2, 25873.0], [42.3, 25873.0], [42.4, 25876.0], [42.5, 25885.0], [42.6, 25919.0], [42.7, 25919.0], [42.8, 25933.0], [42.9, 25943.0], [43.0, 25963.0], [43.1, 25963.0], [43.2, 25978.0], [43.3, 25989.0], [43.4, 25989.0], [43.5, 25996.0], [43.6, 26033.0], [43.7, 26090.0], [43.8, 26090.0], [43.9, 26140.0], [44.0, 26141.0], [44.1, 26153.0], [44.2, 26153.0], [44.3, 26226.0], [44.4, 26244.0], [44.5, 26305.0], [44.6, 26305.0], [44.7, 26353.0], [44.8, 26363.0], [44.9, 26367.0], [45.0, 26367.0], [45.1, 26393.0], [45.2, 26398.0], [45.3, 26398.0], [45.4, 26406.0], [45.5, 26411.0], [45.6, 26412.0], [45.7, 26412.0], [45.8, 26422.0], [45.9, 26436.0], [46.0, 26462.0], [46.1, 26462.0], [46.2, 26482.0], [46.3, 26500.0], [46.4, 26512.0], [46.5, 26512.0], [46.6, 26526.0], [46.7, 26532.0], [46.8, 26532.0], [46.9, 26579.0], [47.0, 26584.0], [47.1, 26616.0], [47.2, 26616.0], [47.3, 26637.0], [47.4, 26671.0], [47.5, 26698.0], [47.6, 26698.0], [47.7, 26715.0], [47.8, 26756.0], [47.9, 26767.0], [48.0, 26767.0], [48.1, 26799.0], [48.2, 26833.0], [48.3, 26846.0], [48.4, 26846.0], [48.5, 26856.0], [48.6, 26872.0], [48.7, 26872.0], [48.8, 27022.0], [48.9, 27062.0], [49.0, 27068.0], [49.1, 27068.0], [49.2, 27083.0], [49.3, 27165.0], [49.4, 27183.0], [49.5, 27183.0], [49.6, 27214.0], [49.7, 27240.0], [49.8, 27262.0], [49.9, 27262.0], [50.0, 27263.0], [50.1, 27288.0], [50.2, 27288.0], [50.3, 27300.0], [50.4, 27305.0], [50.5, 27309.0], [50.6, 27309.0], [50.7, 27311.0], [50.8, 27374.0], [50.9, 27414.0], [51.0, 27414.0], [51.1, 27481.0], [51.2, 27500.0], [51.3, 27507.0], [51.4, 27507.0], [51.5, 27510.0], [51.6, 27544.0], [51.7, 27544.0], [51.8, 27562.0], [51.9, 27562.0], [52.0, 27571.0], [52.1, 27571.0], [52.2, 27602.0], [52.3, 27617.0], [52.4, 27623.0], [52.5, 27623.0], [52.6, 27631.0], [52.7, 27635.0], [52.8, 27674.0], [52.9, 27674.0], [53.0, 27761.0], [53.1, 27778.0], [53.2, 27783.0], [53.3, 27783.0], [53.4, 27793.0], [53.5, 27799.0], [53.6, 27799.0], [53.7, 27855.0], [53.8, 27856.0], [53.9, 27909.0], [54.0, 27909.0], [54.1, 27918.0], [54.2, 27939.0], [54.3, 27947.0], [54.4, 27947.0], [54.5, 28015.0], [54.6, 28032.0], [54.7, 28037.0], [54.8, 28037.0], [54.9, 28045.0], [55.0, 28054.0], [55.1, 28054.0], [55.2, 28055.0], [55.3, 28087.0], [55.4, 28100.0], [55.5, 28100.0], [55.6, 28100.0], [55.7, 28103.0], [55.8, 28109.0], [55.9, 28109.0], [56.0, 28198.0], [56.1, 28216.0], [56.2, 28219.0], [56.3, 28219.0], [56.4, 28231.0], [56.5, 28252.0], [56.6, 28287.0], [56.7, 28287.0], [56.8, 28299.0], [56.9, 28302.0], [57.0, 28302.0], [57.1, 28318.0], [57.2, 28360.0], [57.3, 28362.0], [57.4, 28362.0], [57.5, 28407.0], [57.6, 28418.0], [57.7, 28437.0], [57.8, 28437.0], [57.9, 28464.0], [58.0, 28478.0], [58.1, 28479.0], [58.2, 28479.0], [58.3, 28494.0], [58.4, 28497.0], [58.5, 28497.0], [58.6, 28538.0], [58.7, 28556.0], [58.8, 28558.0], [58.9, 28558.0], [59.0, 28570.0], [59.1, 28582.0], [59.2, 28588.0], [59.3, 28588.0], [59.4, 28589.0], [59.5, 28614.0], [59.6, 28633.0], [59.7, 28633.0], [59.8, 28662.0], [59.9, 28669.0], [60.0, 28679.0], [60.1, 28679.0], [60.2, 28703.0], [60.3, 28704.0], [60.4, 28704.0], [60.5, 28720.0], [60.6, 28757.0], [60.7, 28774.0], [60.8, 28774.0], [60.9, 28775.0], [61.0, 28776.0], [61.1, 28777.0], [61.2, 28777.0], [61.3, 28783.0], [61.4, 28791.0], [61.5, 28797.0], [61.6, 28797.0], [61.7, 28808.0], [61.8, 28820.0], [61.9, 28820.0], [62.0, 28834.0], [62.1, 28848.0], [62.2, 28857.0], [62.3, 28857.0], [62.4, 28881.0], [62.5, 28886.0], [62.6, 28886.0], [62.7, 28886.0], [62.8, 28895.0], [62.9, 28899.0], [63.0, 28904.0], [63.1, 28904.0], [63.2, 28912.0], [63.3, 28926.0], [63.4, 28926.0], [63.5, 28927.0], [63.6, 28930.0], [63.7, 28934.0], [63.8, 28934.0], [63.9, 28941.0], [64.0, 28943.0], [64.1, 28950.0], [64.2, 28950.0], [64.3, 28951.0], [64.4, 28954.0], [64.5, 28958.0], [64.6, 28958.0], [64.7, 28959.0], [64.8, 28972.0], [64.9, 28977.0], [65.0, 28977.0], [65.1, 28991.0], [65.2, 28992.0], [65.3, 28992.0], [65.4, 28996.0], [65.5, 28997.0], [65.6, 28998.0], [65.7, 28998.0], [65.8, 29007.0], [65.9, 29014.0], [66.0, 29015.0], [66.1, 29015.0], [66.2, 29016.0], [66.3, 29028.0], [66.4, 29030.0], [66.5, 29030.0], [66.6, 29036.0], [66.7, 29041.0], [66.8, 29041.0], [66.9, 29043.0], [67.0, 29045.0], [67.1, 29056.0], [67.2, 29056.0], [67.3, 29060.0], [67.4, 29064.0], [67.5, 29071.0], [67.6, 29071.0], [67.7, 29078.0], [67.8, 29088.0], [67.9, 29100.0], [68.0, 29100.0], [68.1, 29110.0], [68.2, 29115.0], [68.3, 29121.0], [68.4, 29121.0], [68.5, 29124.0], [68.6, 29125.0], [68.7, 29125.0], [68.8, 29126.0], [68.9, 29130.0], [69.0, 29130.0], [69.1, 29130.0], [69.2, 29140.0], [69.3, 29142.0], [69.4, 29146.0], [69.5, 29146.0], [69.6, 29158.0], [69.7, 29159.0], [69.8, 29159.0], [69.9, 29159.0], [70.0, 29162.0], [70.1, 29179.0], [70.2, 29179.0], [70.3, 29180.0], [70.4, 29184.0], [70.5, 29185.0], [70.6, 29185.0], [70.7, 29186.0], [70.8, 29195.0], [70.9, 29195.0], [71.0, 29195.0], [71.1, 29197.0], [71.2, 29203.0], [71.3, 29211.0], [71.4, 29211.0], [71.5, 29214.0], [71.6, 29214.0], [71.7, 29214.0], [71.8, 29220.0], [71.9, 29231.0], [72.0, 29239.0], [72.1, 29239.0], [72.2, 29240.0], [72.3, 29241.0], [72.4, 29244.0], [72.5, 29244.0], [72.6, 29246.0], [72.7, 29255.0], [72.8, 29256.0], [72.9, 29256.0], [73.0, 29261.0], [73.1, 29269.0], [73.2, 29270.0], [73.3, 29270.0], [73.4, 29272.0], [73.5, 29284.0], [73.6, 29284.0], [73.7, 29288.0], [73.8, 29290.0], [73.9, 29293.0], [74.0, 29293.0], [74.1, 29300.0], [74.2, 29301.0], [74.3, 29303.0], [74.4, 29303.0], [74.5, 29304.0], [74.6, 29307.0], [74.7, 29310.0], [74.8, 29310.0], [74.9, 29311.0], [75.0, 29321.0], [75.1, 29321.0], [75.2, 29323.0], [75.3, 29332.0], [75.4, 29334.0], [75.5, 29334.0], [75.6, 29344.0], [75.7, 29352.0], [75.8, 29352.0], [75.9, 29352.0], [76.0, 29355.0], [76.1, 29356.0], [76.2, 29358.0], [76.3, 29358.0], [76.4, 29363.0], [76.5, 29365.0], [76.6, 29366.0], [76.7, 29366.0], [76.8, 29369.0], [76.9, 29376.0], [77.0, 29376.0], [77.1, 29379.0], [77.2, 29382.0], [77.3, 29383.0], [77.4, 29383.0], [77.5, 29390.0], [77.6, 29391.0], [77.7, 29394.0], [77.8, 29394.0], [77.9, 29401.0], [78.0, 29405.0], [78.1, 29407.0], [78.2, 29407.0], [78.3, 29412.0], [78.4, 29432.0], [78.5, 29432.0], [78.6, 29434.0], [78.7, 29435.0], [78.8, 29439.0], [78.9, 29439.0], [79.0, 29447.0], [79.1, 29458.0], [79.2, 29458.0], [79.3, 29458.0], [79.4, 29458.0], [79.5, 29459.0], [79.6, 29461.0], [79.7, 29461.0], [79.8, 29463.0], [79.9, 29463.0], [80.0, 29473.0], [80.1, 29473.0], [80.2, 29475.0], [80.3, 29481.0], [80.4, 29481.0], [80.5, 29483.0], [80.6, 29487.0], [80.7, 29488.0], [80.8, 29488.0], [80.9, 29492.0], [81.0, 29494.0], [81.1, 29504.0], [81.2, 29504.0], [81.3, 29505.0], [81.4, 29509.0], [81.5, 29513.0], [81.6, 29513.0], [81.7, 29514.0], [81.8, 29514.0], [81.9, 29514.0], [82.0, 29515.0], [82.1, 29516.0], [82.2, 29525.0], [82.3, 29525.0], [82.4, 29526.0], [82.5, 29528.0], [82.6, 29551.0], [82.7, 29551.0], [82.8, 29553.0], [82.9, 29555.0], [83.0, 29556.0], [83.1, 29556.0], [83.2, 29557.0], [83.3, 29561.0], [83.4, 29561.0], [83.5, 29566.0], [83.6, 29578.0], [83.7, 29583.0], [83.8, 29583.0], [83.9, 29586.0], [84.0, 29587.0], [84.1, 29590.0], [84.2, 29590.0], [84.3, 29591.0], [84.4, 29596.0], [84.5, 29602.0], [84.6, 29602.0], [84.7, 29604.0], [84.8, 29604.0], [84.9, 29609.0], [85.0, 29609.0], [85.1, 29611.0], [85.2, 29623.0], [85.3, 29623.0], [85.4, 29640.0], [85.5, 29640.0], [85.6, 29649.0], [85.7, 29649.0], [85.8, 29650.0], [85.9, 29651.0], [86.0, 29652.0], [86.1, 29652.0], [86.2, 29652.0], [86.3, 29656.0], [86.4, 29657.0], [86.5, 29657.0], [86.6, 29657.0], [86.7, 29664.0], [86.8, 29664.0], [86.9, 29665.0], [87.0, 29665.0], [87.1, 29667.0], [87.2, 29667.0], [87.3, 29690.0], [87.4, 29690.0], [87.5, 29691.0], [87.6, 29691.0], [87.7, 29700.0], [87.8, 29703.0], [87.9, 29707.0], [88.0, 29707.0], [88.1, 29708.0], [88.2, 29722.0], [88.3, 29725.0], [88.4, 29725.0], [88.5, 29726.0], [88.6, 29743.0], [88.7, 29743.0], [88.8, 29757.0], [88.9, 29764.0], [89.0, 29781.0], [89.1, 29781.0], [89.2, 29791.0], [89.3, 29798.0], [89.4, 29802.0], [89.5, 29802.0], [89.6, 29812.0], [89.7, 29852.0], [89.8, 29859.0], [89.9, 29859.0], [90.0, 29863.0], [90.1, 29866.0], [90.2, 29866.0], [90.3, 29872.0], [90.4, 29904.0], [90.5, 29905.0], [90.6, 29905.0], [90.7, 29917.0], [90.8, 29918.0], [90.9, 29923.0], [91.0, 29923.0], [91.1, 29926.0], [91.2, 29952.0], [91.3, 29956.0], [91.4, 29956.0], [91.5, 29963.0], [91.6, 29968.0], [91.7, 29968.0], [91.8, 29981.0], [91.9, 29988.0], [92.0, 29997.0], [92.1, 29997.0], [92.2, 30005.0], [92.3, 30026.0], [92.4, 30038.0], [92.5, 30038.0], [92.6, 30050.0], [92.7, 30073.0], [92.8, 30134.0], [92.9, 30134.0], [93.0, 30174.0], [93.1, 30265.0], [93.2, 30503.0], [93.3, 30503.0], [93.4, 30541.0], [93.5, 30611.0], [93.6, 30611.0], [93.7, 31036.0], [93.8, 31189.0], [93.9, 31283.0], [94.0, 31283.0], [94.1, 31292.0], [94.2, 31392.0], [94.3, 31429.0], [94.4, 31429.0], [94.5, 31453.0], [94.6, 31521.0], [94.7, 31574.0], [94.8, 31574.0], [94.9, 32076.0], [95.0, 32086.0], [95.1, 32086.0], [95.2, 32300.0], [95.3, 32595.0], [95.4, 32718.0], [95.5, 32718.0], [95.6, 32898.0], [95.7, 33021.0], [95.8, 33102.0], [95.9, 33102.0], [96.0, 33162.0], [96.1, 33375.0], [96.2, 33748.0], [96.3, 33748.0], [96.4, 33898.0], [96.5, 34213.0], [96.6, 34462.0], [96.7, 34462.0], [96.8, 34961.0], [96.9, 35443.0], [97.0, 35443.0], [97.1, 35682.0], [97.2, 36187.0], [97.3, 36687.0], [97.4, 36687.0], [97.5, 36697.0], [97.6, 37605.0], [97.7, 37801.0], [97.8, 37801.0], [97.9, 38205.0], [98.0, 39515.0], [98.1, 39589.0], [98.2, 39589.0], [98.3, 40389.0], [98.4, 41537.0], [98.5, 41537.0], [98.6, 41543.0], [98.7, 41950.0], [98.8, 41953.0], [98.9, 41953.0], [99.0, 42802.0], [99.1, 43317.0], [99.2, 43649.0], [99.3, 43649.0], [99.4, 43796.0], [99.5, 44148.0], [99.6, 44321.0], [99.7, 44321.0], [99.8, 44773.0], [99.9, 45143.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 28.0, "series": [{"data": [[33300.0, 1.0], [33100.0, 2.0], [33700.0, 1.0], [34900.0, 1.0], [36100.0, 1.0], [39500.0, 2.0], [40300.0, 1.0], [41900.0, 2.0], [41500.0, 2.0], [43700.0, 1.0], [43300.0, 1.0], [44100.0, 1.0], [44700.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [3100.0, 1.0], [6000.0, 1.0], [8200.0, 1.0], [11000.0, 1.0], [13600.0, 1.0], [16200.0, 1.0], [17400.0, 4.0], [17300.0, 1.0], [17100.0, 2.0], [17200.0, 4.0], [16600.0, 4.0], [17000.0, 4.0], [17600.0, 2.0], [18400.0, 2.0], [18300.0, 5.0], [18000.0, 7.0], [17700.0, 8.0], [17900.0, 2.0], [17500.0, 8.0], [17800.0, 1.0], [18100.0, 4.0], [18200.0, 3.0], [19200.0, 3.0], [18900.0, 4.0], [18800.0, 4.0], [18700.0, 1.0], [18500.0, 4.0], [19000.0, 1.0], [19400.0, 3.0], [19300.0, 1.0], [19700.0, 2.0], [20200.0, 2.0], [19900.0, 4.0], [20100.0, 8.0], [19500.0, 5.0], [20000.0, 2.0], [19800.0, 2.0], [19600.0, 1.0], [20300.0, 1.0], [21000.0, 1.0], [20800.0, 3.0], [20600.0, 6.0], [21400.0, 1.0], [20700.0, 2.0], [21500.0, 1.0], [21200.0, 1.0], [21700.0, 1.0], [21900.0, 2.0], [22100.0, 6.0], [22500.0, 4.0], [21800.0, 1.0], [22200.0, 7.0], [22000.0, 6.0], [22300.0, 5.0], [22400.0, 1.0], [21600.0, 2.0], [23300.0, 4.0], [22900.0, 3.0], [22800.0, 3.0], [22700.0, 3.0], [23200.0, 3.0], [23500.0, 7.0], [23400.0, 2.0], [23000.0, 2.0], [23100.0, 2.0], [22600.0, 2.0], [23700.0, 6.0], [24000.0, 10.0], [23900.0, 9.0], [24100.0, 7.0], [24500.0, 3.0], [23800.0, 4.0], [23600.0, 6.0], [24300.0, 11.0], [24400.0, 2.0], [24700.0, 2.0], [25500.0, 5.0], [24600.0, 2.0], [24900.0, 10.0], [24800.0, 8.0], [25400.0, 2.0], [25000.0, 6.0], [25300.0, 5.0], [25100.0, 3.0], [25200.0, 4.0], [25800.0, 4.0], [26600.0, 4.0], [26200.0, 2.0], [26500.0, 6.0], [25900.0, 7.0], [26000.0, 2.0], [26300.0, 6.0], [25600.0, 5.0], [25700.0, 3.0], [26100.0, 3.0], [26400.0, 7.0], [26800.0, 4.0], [27500.0, 7.0], [27100.0, 2.0], [27200.0, 5.0], [26700.0, 4.0], [27600.0, 6.0], [27400.0, 2.0], [27300.0, 5.0], [27000.0, 4.0], [28500.0, 7.0], [28100.0, 5.0], [27700.0, 5.0], [28200.0, 6.0], [28600.0, 5.0], [28400.0, 8.0], [28300.0, 4.0], [27800.0, 2.0], [27900.0, 4.0], [28000.0, 7.0], [29500.0, 25.0], [29100.0, 24.0], [28800.0, 10.0], [28900.0, 20.0], [28700.0, 11.0], [29600.0, 23.0], [29300.0, 28.0], [29200.0, 21.0], [29000.0, 16.0], [29400.0, 24.0], [29900.0, 13.0], [30500.0, 2.0], [30000.0, 5.0], [29800.0, 7.0], [29700.0, 13.0], [30100.0, 2.0], [30600.0, 1.0], [30200.0, 1.0], [31100.0, 1.0], [31000.0, 1.0], [31400.0, 2.0], [31300.0, 1.0], [31200.0, 2.0], [31500.0, 2.0], [32000.0, 2.0], [32500.0, 1.0], [32700.0, 1.0], [32300.0, 1.0], [33800.0, 1.0], [33000.0, 1.0], [34200.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [36600.0, 2.0], [35400.0, 1.0], [35600.0, 1.0], [38200.0, 1.0], [37800.0, 1.0], [37600.0, 1.0], [42800.0, 1.0], [43600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.352941176470588, "minX": 1.60403658E12, "maxY": 10.0, "series": [{"data": [[1.6040367E12, 10.0], [1.604037E12, 10.0], [1.6040373E12, 10.0], [1.6040376E12, 10.0], [1.60403742E12, 10.0], [1.60403772E12, 10.0], [1.60403802E12, 10.0], [1.60403832E12, 10.0], [1.60403718E12, 10.0], [1.60403748E12, 10.0], [1.60403778E12, 10.0], [1.60403808E12, 10.0], [1.6040379E12, 10.0], [1.6040382E12, 10.0], [1.60403658E12, 10.0], [1.60403688E12, 10.0], [1.6040385E12, 7.352941176470588], [1.60403766E12, 10.0], [1.60403796E12, 10.0], [1.60403664E12, 10.0], [1.60403826E12, 10.0], [1.60403676E12, 10.0], [1.60403838E12, 10.0], [1.60403706E12, 10.0], [1.60403736E12, 10.0], [1.60403814E12, 10.0], [1.60403844E12, 10.0], [1.60403682E12, 10.0], [1.60403712E12, 10.0], [1.60403694E12, 10.0], [1.60403724E12, 10.0], [1.60403754E12, 10.0], [1.60403784E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040385E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17006.0, "minX": 1.0, "maxY": 26291.300275482085, "series": [{"data": [[8.0, 17006.0], [4.0, 17216.0], [2.0, 17278.0], [1.0, 17680.0], [9.0, 17040.0], [10.0, 26291.300275482085], [5.0, 17120.0], [6.0, 17012.0], [3.0, 17200.0], [7.0, 17062.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26179.72517006802]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 113.51666666666667, "minX": 1.60403658E12, "maxY": 204810.3, "series": [{"data": [[1.6040367E12, 152016.0], [1.604037E12, 48149.51666666667], [1.6040373E12, 29134.066666666666], [1.6040376E12, 57531.76666666667], [1.60403742E12, 72091.16666666667], [1.60403772E12, 79691.46666666666], [1.60403802E12, 55359.066666666666], [1.60403832E12, 28857.8], [1.60403718E12, 42389.36666666667], [1.60403748E12, 120154.86666666667], [1.60403778E12, 28502.9], [1.60403808E12, 45697.15], [1.6040379E12, 52538.433333333334], [1.6040382E12, 43275.15], [1.60403658E12, 204810.3], [1.60403688E12, 46239.816666666666], [1.6040385E12, 12796.966666666667], [1.60403766E12, 71088.28333333334], [1.60403796E12, 45378.85], [1.60403664E12, 65695.15], [1.60403826E12, 24957.25], [1.60403676E12, 46864.61666666667], [1.60403838E12, 154994.85], [1.60403706E12, 48162.86666666667], [1.60403736E12, 172643.45], [1.60403814E12, 51918.03333333333], [1.60403844E12, 76218.4], [1.60403682E12, 80040.91666666667], [1.60403712E12, 53942.45], [1.60403694E12, 45203.8], [1.60403724E12, 44842.8], [1.60403754E12, 178152.73333333334], [1.60403784E12, 44120.48333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6040367E12, 157.88333333333333], [1.604037E12, 146.13333333333333], [1.6040373E12, 167.9], [1.6040376E12, 209.3], [1.60403742E12, 163.58333333333334], [1.60403772E12, 191.15], [1.60403802E12, 161.68333333333334], [1.60403832E12, 182.68333333333334], [1.60403718E12, 146.05], [1.60403748E12, 189.4], [1.60403778E12, 116.86666666666666], [1.60403808E12, 146.11666666666667], [1.6040379E12, 153.46666666666667], [1.6040382E12, 160.58333333333334], [1.60403658E12, 117.16666666666667], [1.60403688E12, 153.73333333333332], [1.6040385E12, 113.51666666666667], [1.60403766E12, 164.16666666666666], [1.60403796E12, 146.13333333333333], [1.60403664E12, 207.2], [1.60403826E12, 167.71666666666667], [1.60403676E12, 125.21666666666667], [1.60403838E12, 181.5], [1.60403706E12, 153.41666666666666], [1.60403736E12, 231.83333333333334], [1.60403814E12, 153.41666666666666], [1.60403844E12, 165.51666666666668], [1.60403682E12, 183.56666666666666], [1.60403712E12, 146.36666666666667], [1.60403694E12, 146.11666666666667], [1.60403724E12, 160.65], [1.60403754E12, 183.13333333333333], [1.60403784E12, 146.11666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040385E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17152.117647058825, "minX": 1.60403658E12, "maxY": 38558.705882352944, "series": [{"data": [[1.6040367E12, 23608.2380952381], [1.604037E12, 29338.75], [1.6040373E12, 25743.65217391304], [1.6040376E12, 18835.199999999993], [1.60403742E12, 25476.521739130432], [1.60403772E12, 24131.07692307692], [1.60403802E12, 28055.681818181823], [1.60403832E12, 24239.720000000005], [1.60403718E12, 29580.199999999997], [1.60403748E12, 21765.111111111117], [1.60403778E12, 35395.375], [1.60403808E12, 28691.8], [1.6040379E12, 29244.714285714286], [1.6040382E12, 28516.499999999996], [1.60403658E12, 18922.0625], [1.60403688E12, 27694.23809523809], [1.6040385E12, 17152.117647058825], [1.60403766E12, 27552.90909090909], [1.60403796E12, 29225.85], [1.60403664E12, 21965.827586206895], [1.60403826E12, 25946.65217391304], [1.60403676E12, 38558.705882352944], [1.60403838E12, 22513.92], [1.60403706E12, 29570.666666666668], [1.60403736E12, 20005.187499999996], [1.60403814E12, 29023.04761904762], [1.60403844E12, 29080.565217391308], [1.60403682E12, 24937.48], [1.60403712E12, 29304.550000000003], [1.60403694E12, 29663.850000000006], [1.60403724E12, 29026.500000000007], [1.60403754E12, 24450.8], [1.60403784E12, 29700.300000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040385E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17150.411764705885, "minX": 1.60403658E12, "maxY": 38557.117647058825, "series": [{"data": [[1.6040367E12, 23604.47619047619], [1.604037E12, 29337.449999999997], [1.6040373E12, 25742.869565217392], [1.6040376E12, 18833.600000000002], [1.60403742E12, 25474.04347826087], [1.60403772E12, 24129.384615384617], [1.60403802E12, 28054.409090909092], [1.60403832E12, 24238.76], [1.60403718E12, 29579.049999999996], [1.60403748E12, 21762.000000000007], [1.60403778E12, 35394.625], [1.60403808E12, 28690.4], [1.6040379E12, 29243.380952380958], [1.6040382E12, 28515.363636363632], [1.60403658E12, 18916.75], [1.60403688E12, 27692.95238095238], [1.6040385E12, 17150.411764705885], [1.60403766E12, 27551.227272727272], [1.60403796E12, 29224.649999999994], [1.60403664E12, 21964.482758620692], [1.60403826E12, 25945.782608695652], [1.60403676E12, 38557.117647058825], [1.60403838E12, 22509.84], [1.60403706E12, 29569.380952380954], [1.60403736E12, 20001.75], [1.60403814E12, 29021.714285714283], [1.60403844E12, 29078.130434782608], [1.60403682E12, 24935.719999999998], [1.60403712E12, 29303.35], [1.60403694E12, 29662.700000000004], [1.60403724E12, 29025.500000000004], [1.60403754E12, 24447.039999999997], [1.60403784E12, 29699.100000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040385E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.10000000000000002, "minX": 1.60403658E12, "maxY": 5.5, "series": [{"data": [[1.6040367E12, 0.3333333333333333], [1.604037E12, 0.15], [1.6040373E12, 0.6521739130434783], [1.6040376E12, 0.4000000000000001], [1.60403742E12, 0.21739130434782608], [1.60403772E12, 0.3846153846153846], [1.60403802E12, 0.7272727272727275], [1.60403832E12, 0.52], [1.60403718E12, 0.10000000000000002], [1.60403748E12, 0.2962962962962963], [1.60403778E12, 0.12500000000000003], [1.60403808E12, 0.45], [1.6040379E12, 0.7619047619047619], [1.6040382E12, 0.45454545454545464], [1.60403658E12, 5.5], [1.60403688E12, 0.7142857142857142], [1.6040385E12, 0.47058823529411764], [1.60403766E12, 0.5454545454545454], [1.60403796E12, 0.15000000000000002], [1.60403664E12, 0.5862068965517242], [1.60403826E12, 0.3478260869565217], [1.60403676E12, 0.5882352941176472], [1.60403838E12, 0.44], [1.60403706E12, 0.7142857142857142], [1.60403736E12, 0.5], [1.60403814E12, 0.23809523809523808], [1.60403844E12, 0.30434782608695654], [1.60403682E12, 0.5200000000000002], [1.60403712E12, 0.5499999999999999], [1.60403694E12, 0.45000000000000007], [1.60403724E12, 0.6363636363636365], [1.60403754E12, 0.44000000000000006], [1.60403784E12, 0.6500000000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040385E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3126.0, "minX": 1.60403658E12, "maxY": 45143.0, "series": [{"data": [[1.6040367E12, 36697.0], [1.604037E12, 29609.0], [1.6040373E12, 28669.0], [1.6040376E12, 23910.0], [1.60403742E12, 31453.0], [1.60403772E12, 27544.0], [1.60403802E12, 28927.0], [1.60403832E12, 27947.0], [1.60403718E12, 29852.0], [1.60403748E12, 25943.0], [1.60403778E12, 43649.0], [1.60403808E12, 29458.0], [1.6040379E12, 29649.0], [1.6040382E12, 29557.0], [1.60403658E12, 26616.0], [1.60403688E12, 30503.0], [1.6040385E12, 18186.0], [1.60403766E12, 32718.0], [1.60403796E12, 29664.0], [1.60403664E12, 28100.0], [1.60403826E12, 29401.0], [1.60403676E12, 45143.0], [1.60403838E12, 28219.0], [1.60403706E12, 30005.0], [1.60403736E12, 25770.0], [1.60403814E12, 29363.0], [1.60403844E12, 37605.0], [1.60403682E12, 29130.0], [1.60403712E12, 29956.0], [1.60403694E12, 30134.0], [1.60403724E12, 30050.0], [1.60403754E12, 28720.0], [1.60403784E12, 34213.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6040367E12, 17727.0], [1.604037E12, 29016.0], [1.6040373E12, 23726.0], [1.6040376E12, 17341.0], [1.60403742E12, 19974.0], [1.60403772E12, 22173.0], [1.60403802E12, 27183.0], [1.60403832E12, 20893.0], [1.60403718E12, 29311.0], [1.60403748E12, 18147.0], [1.60403778E12, 24145.0], [1.60403808E12, 28198.0], [1.6040379E12, 28820.0], [1.6040382E12, 25190.0], [1.60403658E12, 3126.0], [1.60403688E12, 24315.0], [1.6040385E12, 16633.0], [1.60403766E12, 22637.0], [1.60403796E12, 28881.0], [1.60403664E12, 17453.0], [1.60403826E12, 22375.0], [1.60403676E12, 29926.0], [1.60403838E12, 18939.0], [1.60403706E12, 29239.0], [1.60403736E12, 17706.0], [1.60403814E12, 28704.0], [1.60403844E12, 19577.0], [1.60403682E12, 22581.0], [1.60403712E12, 28588.0], [1.60403694E12, 29214.0], [1.60403724E12, 26305.0], [1.60403754E12, 19548.0], [1.60403784E12, 26153.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6040367E12, 17727.0], [1.604037E12, 29016.0], [1.6040373E12, 23726.0], [1.6040376E12, 17341.0], [1.60403742E12, 19974.0], [1.60403772E12, 22173.0], [1.60403802E12, 27183.0], [1.60403832E12, 20893.0], [1.60403718E12, 29311.0], [1.60403748E12, 18147.0], [1.60403778E12, 24145.0], [1.60403808E12, 28198.0], [1.6040379E12, 28820.0], [1.6040382E12, 25190.0], [1.60403658E12, 3126.0], [1.60403688E12, 24315.0], [1.6040385E12, 16633.0], [1.60403766E12, 22637.0], [1.60403796E12, 28881.0], [1.60403664E12, 17453.0], [1.60403826E12, 22375.0], [1.60403676E12, 29926.0], [1.60403838E12, 18939.0], [1.60403706E12, 29239.0], [1.60403736E12, 17706.0], [1.60403814E12, 28704.0], [1.60403844E12, 19577.0], [1.60403682E12, 22581.0], [1.60403712E12, 28588.0], [1.60403694E12, 29214.0], [1.60403724E12, 26305.0], [1.60403754E12, 19548.0], [1.60403784E12, 26153.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6040367E12, 17727.0], [1.604037E12, 29016.0], [1.6040373E12, 23726.0], [1.6040376E12, 17341.0], [1.60403742E12, 19974.0], [1.60403772E12, 22173.0], [1.60403802E12, 27183.0], [1.60403832E12, 20893.0], [1.60403718E12, 29311.0], [1.60403748E12, 18147.0], [1.60403778E12, 24145.0], [1.60403808E12, 28198.0], [1.6040379E12, 28820.0], [1.6040382E12, 25190.0], [1.60403658E12, 3126.0], [1.60403688E12, 24315.0], [1.6040385E12, 16633.0], [1.60403766E12, 22637.0], [1.60403796E12, 28881.0], [1.60403664E12, 17453.0], [1.60403826E12, 22375.0], [1.60403676E12, 29926.0], [1.60403838E12, 18939.0], [1.60403706E12, 29239.0], [1.60403736E12, 17706.0], [1.60403814E12, 28704.0], [1.60403844E12, 19577.0], [1.60403682E12, 22581.0], [1.60403712E12, 28588.0], [1.60403694E12, 29214.0], [1.60403724E12, 26305.0], [1.60403754E12, 19548.0], [1.60403784E12, 26153.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6040367E12, 17727.0], [1.604037E12, 29016.0], [1.6040373E12, 23726.0], [1.6040376E12, 17341.0], [1.60403742E12, 19974.0], [1.60403772E12, 22173.0], [1.60403802E12, 27183.0], [1.60403832E12, 20893.0], [1.60403718E12, 29311.0], [1.60403748E12, 18147.0], [1.60403778E12, 24145.0], [1.60403808E12, 28198.0], [1.6040379E12, 28820.0], [1.6040382E12, 25190.0], [1.60403658E12, 3126.0], [1.60403688E12, 24315.0], [1.6040385E12, 16633.0], [1.60403766E12, 22637.0], [1.60403796E12, 28881.0], [1.60403664E12, 17453.0], [1.60403826E12, 22375.0], [1.60403676E12, 29926.0], [1.60403838E12, 18939.0], [1.60403706E12, 29239.0], [1.60403736E12, 17706.0], [1.60403814E12, 28704.0], [1.60403844E12, 19577.0], [1.60403682E12, 22581.0], [1.60403712E12, 28588.0], [1.60403694E12, 29214.0], [1.60403724E12, 26305.0], [1.60403754E12, 19548.0], [1.60403784E12, 26153.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6040367E12, 22983.0], [1.604037E12, 29360.0], [1.6040373E12, 25863.0], [1.6040376E12, 18143.5], [1.60403742E12, 22617.0], [1.60403772E12, 23937.5], [1.60403802E12, 28159.0], [1.60403832E12, 24322.0], [1.60403718E12, 29596.5], [1.60403748E12, 21214.0], [1.60403778E12, 36184.5], [1.60403808E12, 28634.0], [1.6040379E12, 29270.0], [1.6040382E12, 29322.0], [1.60403658E12, 22403.0], [1.60403688E12, 27602.0], [1.6040385E12, 17120.0], [1.60403766E12, 27788.5], [1.60403796E12, 29227.0], [1.60403664E12, 20679.0], [1.60403826E12, 26033.0], [1.60403676E12, 39589.0], [1.60403838E12, 22143.0], [1.60403706E12, 29561.0], [1.60403736E12, 19117.5], [1.60403814E12, 29028.0], [1.60403844E12, 28791.0], [1.60403682E12, 24871.0], [1.60403712E12, 29272.0], [1.60403694E12, 29645.0], [1.60403724E12, 29499.0], [1.60403754E12, 24193.0], [1.60403784E12, 29542.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040385E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27263.0, "minX": 1.0, "maxY": 27263.0, "series": [{"data": [[1.0, 27263.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27262.0, "minX": 1.0, "maxY": 27262.0, "series": [{"data": [[1.0, 27262.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.60403658E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.6040367E12, 0.35], [1.604037E12, 0.3333333333333333], [1.6040373E12, 0.38333333333333336], [1.6040376E12, 0.5], [1.60403742E12, 0.38333333333333336], [1.60403772E12, 0.43333333333333335], [1.60403802E12, 0.36666666666666664], [1.60403832E12, 0.4166666666666667], [1.60403718E12, 0.3333333333333333], [1.60403748E12, 0.45], [1.60403778E12, 0.26666666666666666], [1.60403808E12, 0.3333333333333333], [1.6040379E12, 0.35], [1.6040382E12, 0.36666666666666664], [1.60403658E12, 0.43333333333333335], [1.60403688E12, 0.35], [1.6040385E12, 0.11666666666666667], [1.60403766E12, 0.36666666666666664], [1.60403796E12, 0.3333333333333333], [1.60403664E12, 0.48333333333333334], [1.60403826E12, 0.38333333333333336], [1.60403676E12, 0.2833333333333333], [1.60403838E12, 0.4166666666666667], [1.60403706E12, 0.35], [1.60403736E12, 0.5333333333333333], [1.60403814E12, 0.35], [1.60403844E12, 0.38333333333333336], [1.60403682E12, 0.4166666666666667], [1.60403712E12, 0.3333333333333333], [1.60403694E12, 0.3333333333333333], [1.60403724E12, 0.36666666666666664], [1.60403754E12, 0.4166666666666667], [1.60403784E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040385E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60403658E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.6040367E12, 0.35], [1.604037E12, 0.3333333333333333], [1.6040373E12, 0.38333333333333336], [1.6040376E12, 0.5], [1.60403742E12, 0.38333333333333336], [1.60403772E12, 0.43333333333333335], [1.60403802E12, 0.36666666666666664], [1.60403832E12, 0.4166666666666667], [1.60403718E12, 0.3333333333333333], [1.60403748E12, 0.45], [1.60403778E12, 0.26666666666666666], [1.60403808E12, 0.3333333333333333], [1.6040379E12, 0.35], [1.6040382E12, 0.36666666666666664], [1.60403658E12, 0.26666666666666666], [1.60403688E12, 0.35], [1.6040385E12, 0.2833333333333333], [1.60403766E12, 0.36666666666666664], [1.60403796E12, 0.3333333333333333], [1.60403664E12, 0.48333333333333334], [1.60403826E12, 0.38333333333333336], [1.60403676E12, 0.2833333333333333], [1.60403838E12, 0.4166666666666667], [1.60403706E12, 0.35], [1.60403736E12, 0.5333333333333333], [1.60403814E12, 0.35], [1.60403844E12, 0.38333333333333336], [1.60403682E12, 0.4166666666666667], [1.60403712E12, 0.3333333333333333], [1.60403694E12, 0.3333333333333333], [1.60403724E12, 0.36666666666666664], [1.60403754E12, 0.4166666666666667], [1.60403784E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6040385E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60403658E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.6040367E12, 0.35], [1.604037E12, 0.3333333333333333], [1.6040373E12, 0.38333333333333336], [1.6040376E12, 0.5], [1.60403742E12, 0.38333333333333336], [1.60403772E12, 0.43333333333333335], [1.60403802E12, 0.36666666666666664], [1.60403832E12, 0.4166666666666667], [1.60403718E12, 0.3333333333333333], [1.60403748E12, 0.45], [1.60403778E12, 0.26666666666666666], [1.60403808E12, 0.3333333333333333], [1.6040379E12, 0.35], [1.6040382E12, 0.36666666666666664], [1.60403658E12, 0.26666666666666666], [1.60403688E12, 0.35], [1.6040385E12, 0.2833333333333333], [1.60403766E12, 0.36666666666666664], [1.60403796E12, 0.3333333333333333], [1.60403664E12, 0.48333333333333334], [1.60403826E12, 0.38333333333333336], [1.60403676E12, 0.2833333333333333], [1.60403838E12, 0.4166666666666667], [1.60403706E12, 0.35], [1.60403736E12, 0.5333333333333333], [1.60403814E12, 0.35], [1.60403844E12, 0.38333333333333336], [1.60403682E12, 0.4166666666666667], [1.60403712E12, 0.3333333333333333], [1.60403694E12, 0.3333333333333333], [1.60403724E12, 0.36666666666666664], [1.60403754E12, 0.4166666666666667], [1.60403784E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040385E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60403658E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.6040367E12, 0.35], [1.604037E12, 0.3333333333333333], [1.6040373E12, 0.38333333333333336], [1.6040376E12, 0.5], [1.60403742E12, 0.38333333333333336], [1.60403772E12, 0.43333333333333335], [1.60403802E12, 0.36666666666666664], [1.60403832E12, 0.4166666666666667], [1.60403718E12, 0.3333333333333333], [1.60403748E12, 0.45], [1.60403778E12, 0.26666666666666666], [1.60403808E12, 0.3333333333333333], [1.6040379E12, 0.35], [1.6040382E12, 0.36666666666666664], [1.60403658E12, 0.26666666666666666], [1.60403688E12, 0.35], [1.6040385E12, 0.2833333333333333], [1.60403766E12, 0.36666666666666664], [1.60403796E12, 0.3333333333333333], [1.60403664E12, 0.48333333333333334], [1.60403826E12, 0.38333333333333336], [1.60403676E12, 0.2833333333333333], [1.60403838E12, 0.4166666666666667], [1.60403706E12, 0.35], [1.60403736E12, 0.5333333333333333], [1.60403814E12, 0.35], [1.60403844E12, 0.38333333333333336], [1.60403682E12, 0.4166666666666667], [1.60403712E12, 0.3333333333333333], [1.60403694E12, 0.3333333333333333], [1.60403724E12, 0.36666666666666664], [1.60403754E12, 0.4166666666666667], [1.60403784E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6040385E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

