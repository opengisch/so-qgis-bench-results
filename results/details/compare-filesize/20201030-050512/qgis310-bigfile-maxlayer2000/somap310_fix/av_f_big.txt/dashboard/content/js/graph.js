/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3086.0, "minX": 0.0, "maxY": 44825.0, "series": [{"data": [[0.0, 3086.0], [0.1, 3086.0], [0.2, 6003.0], [0.3, 8125.0], [0.4, 8125.0], [0.5, 10899.0], [0.6, 13318.0], [0.7, 15767.0], [0.8, 15767.0], [0.9, 17278.0], [1.0, 17305.0], [1.1, 17390.0], [1.2, 17390.0], [1.3, 17408.0], [1.4, 17433.0], [1.5, 17482.0], [1.6, 17482.0], [1.7, 17499.0], [1.8, 17534.0], [1.9, 17534.0], [2.0, 17566.0], [2.1, 17569.0], [2.2, 17597.0], [2.3, 17597.0], [2.4, 17614.0], [2.5, 17653.0], [2.6, 17666.0], [2.7, 17666.0], [2.8, 17677.0], [2.9, 17682.0], [3.0, 17691.0], [3.1, 17691.0], [3.2, 17696.0], [3.3, 17702.0], [3.4, 17702.0], [3.5, 17708.0], [3.6, 17732.0], [3.7, 17735.0], [3.8, 17735.0], [3.9, 17742.0], [4.0, 17746.0], [4.1, 17751.0], [4.2, 17751.0], [4.3, 17755.0], [4.4, 17771.0], [4.5, 17775.0], [4.6, 17775.0], [4.7, 17814.0], [4.8, 17832.0], [4.9, 17878.0], [5.0, 17878.0], [5.1, 17922.0], [5.2, 17927.0], [5.3, 17927.0], [5.4, 17966.0], [5.5, 18013.0], [5.6, 18022.0], [5.7, 18022.0], [5.8, 18022.0], [5.9, 18077.0], [6.0, 18096.0], [6.1, 18096.0], [6.2, 18114.0], [6.3, 18197.0], [6.4, 18222.0], [6.5, 18222.0], [6.6, 18255.0], [6.7, 18288.0], [6.8, 18288.0], [6.9, 18304.0], [7.0, 18319.0], [7.1, 18321.0], [7.2, 18321.0], [7.3, 18329.0], [7.4, 18332.0], [7.5, 18333.0], [7.6, 18333.0], [7.7, 18387.0], [7.8, 18415.0], [7.9, 18432.0], [8.0, 18432.0], [8.1, 18448.0], [8.2, 18452.0], [8.3, 18577.0], [8.4, 18577.0], [8.5, 18612.0], [8.6, 18643.0], [8.7, 18643.0], [8.8, 18681.0], [8.9, 18703.0], [9.0, 18794.0], [9.1, 18794.0], [9.2, 18810.0], [9.3, 18837.0], [9.4, 18979.0], [9.5, 18979.0], [9.6, 18979.0], [9.7, 18981.0], [9.8, 19009.0], [9.9, 19009.0], [10.0, 19073.0], [10.1, 19222.0], [10.2, 19222.0], [10.3, 19237.0], [10.4, 19247.0], [10.5, 19340.0], [10.6, 19340.0], [10.7, 19360.0], [10.8, 19386.0], [10.9, 19420.0], [11.0, 19420.0], [11.1, 19637.0], [11.2, 19672.0], [11.3, 19675.0], [11.4, 19675.0], [11.5, 19709.0], [11.6, 19782.0], [11.7, 19782.0], [11.8, 19814.0], [11.9, 19846.0], [12.0, 20016.0], [12.1, 20016.0], [12.2, 20031.0], [12.3, 20034.0], [12.4, 20055.0], [12.5, 20055.0], [12.6, 20057.0], [12.7, 20116.0], [12.8, 20128.0], [12.9, 20128.0], [13.0, 20133.0], [13.1, 20181.0], [13.2, 20209.0], [13.3, 20209.0], [13.4, 20218.0], [13.5, 20239.0], [13.6, 20239.0], [13.7, 20251.0], [13.8, 20271.0], [13.9, 20273.0], [14.0, 20273.0], [14.1, 20283.0], [14.2, 20288.0], [14.3, 20288.0], [14.4, 20288.0], [14.5, 20295.0], [14.6, 20323.0], [14.7, 20350.0], [14.8, 20350.0], [14.9, 20378.0], [15.0, 20411.0], [15.1, 20411.0], [15.2, 20427.0], [15.3, 20450.0], [15.4, 20482.0], [15.5, 20482.0], [15.6, 20543.0], [15.7, 20605.0], [15.8, 20619.0], [15.9, 20619.0], [16.0, 20664.0], [16.1, 20776.0], [16.2, 20778.0], [16.3, 20778.0], [16.4, 20807.0], [16.5, 20838.0], [16.6, 20851.0], [16.7, 20851.0], [16.8, 21065.0], [16.9, 21175.0], [17.0, 21175.0], [17.1, 21291.0], [17.2, 21468.0], [17.3, 21496.0], [17.4, 21496.0], [17.5, 21539.0], [17.6, 21653.0], [17.7, 21808.0], [17.8, 21808.0], [17.9, 21814.0], [18.0, 21855.0], [18.1, 21870.0], [18.2, 21870.0], [18.3, 21895.0], [18.4, 21936.0], [18.5, 21936.0], [18.6, 21938.0], [18.7, 21954.0], [18.8, 21956.0], [18.9, 21956.0], [19.0, 21972.0], [19.1, 21973.0], [19.2, 22016.0], [19.3, 22016.0], [19.4, 22035.0], [19.5, 22083.0], [19.6, 22145.0], [19.7, 22145.0], [19.8, 22202.0], [19.9, 22334.0], [20.0, 22366.0], [20.1, 22366.0], [20.2, 22407.0], [20.3, 22446.0], [20.4, 22446.0], [20.5, 22460.0], [20.6, 22472.0], [20.7, 22487.0], [20.8, 22487.0], [20.9, 22490.0], [21.0, 22494.0], [21.1, 22501.0], [21.2, 22501.0], [21.3, 22522.0], [21.4, 22581.0], [21.5, 22625.0], [21.6, 22625.0], [21.7, 22762.0], [21.8, 22790.0], [21.9, 22790.0], [22.0, 22806.0], [22.1, 22816.0], [22.2, 22824.0], [22.3, 22824.0], [22.4, 22829.0], [22.5, 22834.0], [22.6, 22843.0], [22.7, 22843.0], [22.8, 22868.0], [22.9, 22945.0], [23.0, 22960.0], [23.1, 22960.0], [23.2, 22965.0], [23.3, 22971.0], [23.4, 22971.0], [23.5, 22978.0], [23.6, 23025.0], [23.7, 23076.0], [23.8, 23076.0], [23.9, 23124.0], [24.0, 23167.0], [24.1, 23173.0], [24.2, 23173.0], [24.3, 23220.0], [24.4, 23224.0], [24.5, 23245.0], [24.6, 23245.0], [24.7, 23292.0], [24.8, 23301.0], [24.9, 23305.0], [25.0, 23305.0], [25.1, 23306.0], [25.2, 23388.0], [25.3, 23388.0], [25.4, 23431.0], [25.5, 23442.0], [25.6, 23516.0], [25.7, 23516.0], [25.8, 23552.0], [25.9, 23621.0], [26.0, 23662.0], [26.1, 23662.0], [26.2, 23715.0], [26.3, 23729.0], [26.4, 23731.0], [26.5, 23731.0], [26.6, 23736.0], [26.7, 23798.0], [26.8, 23798.0], [26.9, 23845.0], [27.0, 23849.0], [27.1, 23855.0], [27.2, 23855.0], [27.3, 23860.0], [27.4, 23878.0], [27.5, 23889.0], [27.6, 23889.0], [27.7, 23904.0], [27.8, 23965.0], [27.9, 23969.0], [28.0, 23969.0], [28.1, 23971.0], [28.2, 24089.0], [28.3, 24095.0], [28.4, 24095.0], [28.5, 24116.0], [28.6, 24155.0], [28.7, 24155.0], [28.8, 24158.0], [28.9, 24173.0], [29.0, 24182.0], [29.1, 24182.0], [29.2, 24183.0], [29.3, 24197.0], [29.4, 24206.0], [29.5, 24206.0], [29.6, 24218.0], [29.7, 24221.0], [29.8, 24245.0], [29.9, 24245.0], [30.0, 24252.0], [30.1, 24261.0], [30.2, 24261.0], [30.3, 24275.0], [30.4, 24287.0], [30.5, 24375.0], [30.6, 24375.0], [30.7, 24392.0], [30.8, 24403.0], [30.9, 24435.0], [31.0, 24435.0], [31.1, 24436.0], [31.2, 24452.0], [31.3, 24461.0], [31.4, 24461.0], [31.5, 24483.0], [31.6, 24491.0], [31.7, 24491.0], [31.8, 24523.0], [31.9, 24553.0], [32.0, 24571.0], [32.1, 24571.0], [32.2, 24575.0], [32.3, 24579.0], [32.4, 24585.0], [32.5, 24585.0], [32.6, 24596.0], [32.7, 24613.0], [32.8, 24636.0], [32.9, 24636.0], [33.0, 24638.0], [33.1, 24643.0], [33.2, 24655.0], [33.3, 24655.0], [33.4, 24672.0], [33.5, 24673.0], [33.6, 24673.0], [33.7, 24701.0], [33.8, 24715.0], [33.9, 24730.0], [34.0, 24730.0], [34.1, 24731.0], [34.2, 24753.0], [34.3, 24764.0], [34.4, 24764.0], [34.5, 24784.0], [34.6, 24796.0], [34.7, 24812.0], [34.8, 24812.0], [34.9, 24817.0], [35.0, 24851.0], [35.1, 24851.0], [35.2, 24855.0], [35.3, 24880.0], [35.4, 24895.0], [35.5, 24895.0], [35.6, 24900.0], [35.7, 24906.0], [35.8, 24908.0], [35.9, 24908.0], [36.0, 24915.0], [36.1, 24927.0], [36.2, 24950.0], [36.3, 24950.0], [36.4, 24954.0], [36.5, 24957.0], [36.6, 24997.0], [36.7, 24997.0], [36.8, 24997.0], [36.9, 25004.0], [37.0, 25004.0], [37.1, 25006.0], [37.2, 25023.0], [37.3, 25081.0], [37.4, 25081.0], [37.5, 25106.0], [37.6, 25107.0], [37.7, 25111.0], [37.8, 25111.0], [37.9, 25142.0], [38.0, 25174.0], [38.1, 25175.0], [38.2, 25175.0], [38.3, 25242.0], [38.4, 25264.0], [38.5, 25264.0], [38.6, 25287.0], [38.7, 25288.0], [38.8, 25290.0], [38.9, 25290.0], [39.0, 25300.0], [39.1, 25319.0], [39.2, 25372.0], [39.3, 25372.0], [39.4, 25404.0], [39.5, 25447.0], [39.6, 25508.0], [39.7, 25508.0], [39.8, 25510.0], [39.9, 25546.0], [40.0, 25553.0], [40.1, 25553.0], [40.2, 25619.0], [40.3, 25636.0], [40.4, 25636.0], [40.5, 25645.0], [40.6, 25659.0], [40.7, 25676.0], [40.8, 25676.0], [40.9, 25678.0], [41.0, 25810.0], [41.1, 25811.0], [41.2, 25811.0], [41.3, 25834.0], [41.4, 25911.0], [41.5, 25967.0], [41.6, 25967.0], [41.7, 25989.0], [41.8, 25991.0], [41.9, 25991.0], [42.0, 25992.0], [42.1, 25993.0], [42.2, 26007.0], [42.3, 26007.0], [42.4, 26025.0], [42.5, 26038.0], [42.6, 26113.0], [42.7, 26113.0], [42.8, 26130.0], [42.9, 26172.0], [43.0, 26191.0], [43.1, 26191.0], [43.2, 26196.0], [43.3, 26198.0], [43.4, 26198.0], [43.5, 26203.0], [43.6, 26206.0], [43.7, 26247.0], [43.8, 26247.0], [43.9, 26249.0], [44.0, 26254.0], [44.1, 26257.0], [44.2, 26257.0], [44.3, 26278.0], [44.4, 26282.0], [44.5, 26292.0], [44.6, 26292.0], [44.7, 26298.0], [44.8, 26308.0], [44.9, 26320.0], [45.0, 26320.0], [45.1, 26371.0], [45.2, 26379.0], [45.3, 26379.0], [45.4, 26404.0], [45.5, 26416.0], [45.6, 26425.0], [45.7, 26425.0], [45.8, 26495.0], [45.9, 26498.0], [46.0, 26504.0], [46.1, 26504.0], [46.2, 26508.0], [46.3, 26531.0], [46.4, 26550.0], [46.5, 26550.0], [46.6, 26555.0], [46.7, 26584.0], [46.8, 26584.0], [46.9, 26629.0], [47.0, 26632.0], [47.1, 26637.0], [47.2, 26637.0], [47.3, 26662.0], [47.4, 26791.0], [47.5, 26792.0], [47.6, 26792.0], [47.7, 26828.0], [47.8, 26869.0], [47.9, 26871.0], [48.0, 26871.0], [48.1, 26891.0], [48.2, 26916.0], [48.3, 26943.0], [48.4, 26943.0], [48.5, 26997.0], [48.6, 26997.0], [48.7, 26997.0], [48.8, 27054.0], [48.9, 27069.0], [49.0, 27204.0], [49.1, 27204.0], [49.2, 27213.0], [49.3, 27265.0], [49.4, 27279.0], [49.5, 27279.0], [49.6, 27332.0], [49.7, 27370.0], [49.8, 27397.0], [49.9, 27397.0], [50.0, 27441.0], [50.1, 27492.0], [50.2, 27492.0], [50.3, 27540.0], [50.4, 27576.0], [50.5, 27579.0], [50.6, 27579.0], [50.7, 27608.0], [50.8, 27634.0], [50.9, 27656.0], [51.0, 27656.0], [51.1, 27688.0], [51.2, 27710.0], [51.3, 27729.0], [51.4, 27729.0], [51.5, 27734.0], [51.6, 27746.0], [51.7, 27746.0], [51.8, 27785.0], [51.9, 27801.0], [52.0, 27815.0], [52.1, 27815.0], [52.2, 27858.0], [52.3, 27872.0], [52.4, 27897.0], [52.5, 27897.0], [52.6, 27909.0], [52.7, 27927.0], [52.8, 27971.0], [52.9, 27971.0], [53.0, 28022.0], [53.1, 28064.0], [53.2, 28081.0], [53.3, 28081.0], [53.4, 28088.0], [53.5, 28100.0], [53.6, 28100.0], [53.7, 28129.0], [53.8, 28138.0], [53.9, 28164.0], [54.0, 28164.0], [54.1, 28188.0], [54.2, 28231.0], [54.3, 28275.0], [54.4, 28275.0], [54.5, 28275.0], [54.6, 28293.0], [54.7, 28347.0], [54.8, 28347.0], [54.9, 28347.0], [55.0, 28351.0], [55.1, 28351.0], [55.2, 28354.0], [55.3, 28359.0], [55.4, 28389.0], [55.5, 28389.0], [55.6, 28390.0], [55.7, 28411.0], [55.8, 28422.0], [55.9, 28422.0], [56.0, 28422.0], [56.1, 28433.0], [56.2, 28439.0], [56.3, 28439.0], [56.4, 28472.0], [56.5, 28473.0], [56.6, 28542.0], [56.7, 28542.0], [56.8, 28582.0], [56.9, 28594.0], [57.0, 28594.0], [57.1, 28630.0], [57.2, 28634.0], [57.3, 28644.0], [57.4, 28644.0], [57.5, 28649.0], [57.6, 28677.0], [57.7, 28725.0], [57.8, 28725.0], [57.9, 28757.0], [58.0, 28758.0], [58.1, 28766.0], [58.2, 28766.0], [58.3, 28803.0], [58.4, 28808.0], [58.5, 28808.0], [58.6, 28809.0], [58.7, 28819.0], [58.8, 28827.0], [58.9, 28827.0], [59.0, 28854.0], [59.1, 28859.0], [59.2, 28882.0], [59.3, 28882.0], [59.4, 28885.0], [59.5, 28896.0], [59.6, 28903.0], [59.7, 28903.0], [59.8, 28910.0], [59.9, 28929.0], [60.0, 28938.0], [60.1, 28938.0], [60.2, 28942.0], [60.3, 28944.0], [60.4, 28944.0], [60.5, 28962.0], [60.6, 28976.0], [60.7, 29008.0], [60.8, 29008.0], [60.9, 29040.0], [61.0, 29042.0], [61.1, 29067.0], [61.2, 29067.0], [61.3, 29078.0], [61.4, 29091.0], [61.5, 29099.0], [61.6, 29099.0], [61.7, 29105.0], [61.8, 29111.0], [61.9, 29111.0], [62.0, 29126.0], [62.1, 29156.0], [62.2, 29175.0], [62.3, 29175.0], [62.4, 29187.0], [62.5, 29210.0], [62.6, 29213.0], [62.7, 29213.0], [62.8, 29214.0], [62.9, 29218.0], [63.0, 29225.0], [63.1, 29225.0], [63.2, 29232.0], [63.3, 29309.0], [63.4, 29309.0], [63.5, 29317.0], [63.6, 29321.0], [63.7, 29329.0], [63.8, 29329.0], [63.9, 29350.0], [64.0, 29359.0], [64.1, 29362.0], [64.2, 29362.0], [64.3, 29369.0], [64.4, 29379.0], [64.5, 29388.0], [64.6, 29388.0], [64.7, 29389.0], [64.8, 29391.0], [64.9, 29412.0], [65.0, 29412.0], [65.1, 29418.0], [65.2, 29424.0], [65.3, 29424.0], [65.4, 29426.0], [65.5, 29430.0], [65.6, 29446.0], [65.7, 29446.0], [65.8, 29455.0], [65.9, 29460.0], [66.0, 29466.0], [66.1, 29466.0], [66.2, 29469.0], [66.3, 29470.0], [66.4, 29472.0], [66.5, 29472.0], [66.6, 29474.0], [66.7, 29477.0], [66.8, 29477.0], [66.9, 29483.0], [67.0, 29485.0], [67.1, 29486.0], [67.2, 29486.0], [67.3, 29514.0], [67.4, 29524.0], [67.5, 29561.0], [67.6, 29561.0], [67.7, 29564.0], [67.8, 29567.0], [67.9, 29569.0], [68.0, 29569.0], [68.1, 29574.0], [68.2, 29576.0], [68.3, 29580.0], [68.4, 29580.0], [68.5, 29591.0], [68.6, 29602.0], [68.7, 29602.0], [68.8, 29602.0], [68.9, 29606.0], [69.0, 29608.0], [69.1, 29608.0], [69.2, 29611.0], [69.3, 29613.0], [69.4, 29618.0], [69.5, 29618.0], [69.6, 29628.0], [69.7, 29634.0], [69.8, 29640.0], [69.9, 29640.0], [70.0, 29641.0], [70.1, 29644.0], [70.2, 29644.0], [70.3, 29644.0], [70.4, 29648.0], [70.5, 29654.0], [70.6, 29654.0], [70.7, 29654.0], [70.8, 29654.0], [70.9, 29656.0], [71.0, 29656.0], [71.1, 29659.0], [71.2, 29660.0], [71.3, 29660.0], [71.4, 29660.0], [71.5, 29662.0], [71.6, 29663.0], [71.7, 29663.0], [71.8, 29663.0], [71.9, 29663.0], [72.0, 29667.0], [72.1, 29667.0], [72.2, 29670.0], [72.3, 29674.0], [72.4, 29677.0], [72.5, 29677.0], [72.6, 29690.0], [72.7, 29690.0], [72.8, 29691.0], [72.9, 29691.0], [73.0, 29693.0], [73.1, 29701.0], [73.2, 29706.0], [73.3, 29706.0], [73.4, 29707.0], [73.5, 29713.0], [73.6, 29713.0], [73.7, 29716.0], [73.8, 29727.0], [73.9, 29730.0], [74.0, 29730.0], [74.1, 29730.0], [74.2, 29732.0], [74.3, 29733.0], [74.4, 29733.0], [74.5, 29740.0], [74.6, 29742.0], [74.7, 29754.0], [74.8, 29754.0], [74.9, 29760.0], [75.0, 29762.0], [75.1, 29762.0], [75.2, 29765.0], [75.3, 29766.0], [75.4, 29770.0], [75.5, 29770.0], [75.6, 29772.0], [75.7, 29773.0], [75.8, 29783.0], [75.9, 29783.0], [76.0, 29786.0], [76.1, 29789.0], [76.2, 29792.0], [76.3, 29792.0], [76.4, 29800.0], [76.5, 29804.0], [76.6, 29806.0], [76.7, 29806.0], [76.8, 29808.0], [76.9, 29809.0], [77.0, 29809.0], [77.1, 29814.0], [77.2, 29823.0], [77.3, 29831.0], [77.4, 29831.0], [77.5, 29831.0], [77.6, 29841.0], [77.7, 29842.0], [77.8, 29842.0], [77.9, 29847.0], [78.0, 29849.0], [78.1, 29852.0], [78.2, 29852.0], [78.3, 29856.0], [78.4, 29859.0], [78.5, 29859.0], [78.6, 29863.0], [78.7, 29865.0], [78.8, 29869.0], [78.9, 29869.0], [79.0, 29873.0], [79.1, 29875.0], [79.2, 29876.0], [79.3, 29876.0], [79.4, 29879.0], [79.5, 29879.0], [79.6, 29880.0], [79.7, 29880.0], [79.8, 29880.0], [79.9, 29888.0], [80.0, 29892.0], [80.1, 29892.0], [80.2, 29908.0], [80.3, 29910.0], [80.4, 29910.0], [80.5, 29920.0], [80.6, 29922.0], [80.7, 29927.0], [80.8, 29927.0], [80.9, 29928.0], [81.0, 29930.0], [81.1, 29931.0], [81.2, 29931.0], [81.3, 29932.0], [81.4, 29934.0], [81.5, 29942.0], [81.6, 29942.0], [81.7, 29946.0], [81.8, 29949.0], [81.9, 29949.0], [82.0, 29949.0], [82.1, 29952.0], [82.2, 29959.0], [82.3, 29959.0], [82.4, 29967.0], [82.5, 29974.0], [82.6, 29975.0], [82.7, 29975.0], [82.8, 29976.0], [82.9, 29979.0], [83.0, 29980.0], [83.1, 29980.0], [83.2, 29984.0], [83.3, 29994.0], [83.4, 29994.0], [83.5, 30000.0], [83.6, 30002.0], [83.7, 30004.0], [83.8, 30004.0], [83.9, 30011.0], [84.0, 30024.0], [84.1, 30026.0], [84.2, 30026.0], [84.3, 30034.0], [84.4, 30037.0], [84.5, 30049.0], [84.6, 30049.0], [84.7, 30070.0], [84.8, 30078.0], [84.9, 30081.0], [85.0, 30081.0], [85.1, 30082.0], [85.2, 30087.0], [85.3, 30087.0], [85.4, 30102.0], [85.5, 30117.0], [85.6, 30122.0], [85.7, 30122.0], [85.8, 30126.0], [85.9, 30131.0], [86.0, 30140.0], [86.1, 30140.0], [86.2, 30141.0], [86.3, 30143.0], [86.4, 30145.0], [86.5, 30145.0], [86.6, 30149.0], [86.7, 30177.0], [86.8, 30177.0], [86.9, 30179.0], [87.0, 30186.0], [87.1, 30188.0], [87.2, 30188.0], [87.3, 30189.0], [87.4, 30192.0], [87.5, 30194.0], [87.6, 30194.0], [87.7, 30195.0], [87.8, 30196.0], [87.9, 30207.0], [88.0, 30207.0], [88.1, 30208.0], [88.2, 30217.0], [88.3, 30252.0], [88.4, 30252.0], [88.5, 30281.0], [88.6, 30298.0], [88.7, 30298.0], [88.8, 30330.0], [88.9, 30372.0], [89.0, 30380.0], [89.1, 30380.0], [89.2, 30396.0], [89.3, 30399.0], [89.4, 30436.0], [89.5, 30436.0], [89.6, 30455.0], [89.7, 30494.0], [89.8, 30507.0], [89.9, 30507.0], [90.0, 30533.0], [90.1, 30561.0], [90.2, 30561.0], [90.3, 30564.0], [90.4, 30572.0], [90.5, 30574.0], [90.6, 30574.0], [90.7, 30601.0], [90.8, 30608.0], [90.9, 30608.0], [91.0, 30608.0], [91.1, 30639.0], [91.2, 30644.0], [91.3, 30647.0], [91.4, 30647.0], [91.5, 30664.0], [91.6, 30687.0], [91.7, 30687.0], [91.8, 30702.0], [91.9, 30718.0], [92.0, 30725.0], [92.1, 30725.0], [92.2, 30741.0], [92.3, 30743.0], [92.4, 30745.0], [92.5, 30745.0], [92.6, 30750.0], [92.7, 30840.0], [92.8, 30878.0], [92.9, 30878.0], [93.0, 30890.0], [93.1, 30900.0], [93.2, 30907.0], [93.3, 30907.0], [93.4, 30935.0], [93.5, 31072.0], [93.6, 31072.0], [93.7, 31350.0], [93.8, 31387.0], [93.9, 31416.0], [94.0, 31416.0], [94.1, 31586.0], [94.2, 31812.0], [94.3, 31826.0], [94.4, 31826.0], [94.5, 31846.0], [94.6, 31901.0], [94.7, 31922.0], [94.8, 31922.0], [94.9, 32136.0], [95.0, 32297.0], [95.1, 32297.0], [95.2, 32375.0], [95.3, 32395.0], [95.4, 32822.0], [95.5, 32822.0], [95.6, 33238.0], [95.7, 33332.0], [95.8, 33592.0], [95.9, 33592.0], [96.0, 33613.0], [96.1, 34051.0], [96.2, 34069.0], [96.3, 34069.0], [96.4, 34353.0], [96.5, 34910.0], [96.6, 35158.0], [96.7, 35158.0], [96.8, 35668.0], [96.9, 35719.0], [97.0, 35719.0], [97.1, 35734.0], [97.2, 36430.0], [97.3, 36785.0], [97.4, 36785.0], [97.5, 37599.0], [97.6, 38131.0], [97.7, 38393.0], [97.8, 38393.0], [97.9, 39065.0], [98.0, 39130.0], [98.1, 39401.0], [98.2, 39401.0], [98.3, 40791.0], [98.4, 41393.0], [98.5, 41393.0], [98.6, 41740.0], [98.7, 41974.0], [98.8, 42360.0], [98.9, 42360.0], [99.0, 42920.0], [99.1, 42969.0], [99.2, 43384.0], [99.3, 43384.0], [99.4, 43725.0], [99.5, 43922.0], [99.6, 44352.0], [99.7, 44352.0], [99.8, 44499.0], [99.9, 44825.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 33.0, "series": [{"data": [[33500.0, 1.0], [34300.0, 1.0], [33300.0, 1.0], [35100.0, 1.0], [36700.0, 1.0], [35700.0, 2.0], [34900.0, 1.0], [38300.0, 1.0], [38100.0, 1.0], [37500.0, 1.0], [40700.0, 1.0], [39100.0, 1.0], [41300.0, 1.0], [42900.0, 2.0], [42300.0, 1.0], [41900.0, 1.0], [41700.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [44300.0, 1.0], [43900.0, 1.0], [3000.0, 1.0], [6000.0, 1.0], [8100.0, 1.0], [10800.0, 1.0], [13300.0, 1.0], [15700.0, 1.0], [17300.0, 2.0], [17400.0, 4.0], [17200.0, 1.0], [18300.0, 7.0], [17900.0, 3.0], [18100.0, 2.0], [17600.0, 7.0], [17700.0, 10.0], [17800.0, 3.0], [18200.0, 3.0], [18400.0, 4.0], [18000.0, 5.0], [17500.0, 4.0], [19200.0, 3.0], [19300.0, 3.0], [18600.0, 3.0], [19000.0, 2.0], [18900.0, 3.0], [18800.0, 2.0], [18700.0, 2.0], [19400.0, 1.0], [18500.0, 1.0], [20400.0, 4.0], [20200.0, 10.0], [20000.0, 5.0], [20100.0, 4.0], [19700.0, 2.0], [20300.0, 3.0], [19800.0, 2.0], [19600.0, 3.0], [21000.0, 1.0], [21100.0, 1.0], [20800.0, 3.0], [20600.0, 3.0], [21400.0, 2.0], [21500.0, 1.0], [20700.0, 2.0], [21200.0, 1.0], [20500.0, 1.0], [22400.0, 7.0], [22000.0, 3.0], [22500.0, 3.0], [21800.0, 5.0], [22200.0, 1.0], [22300.0, 2.0], [21900.0, 6.0], [22100.0, 1.0], [21600.0, 1.0], [23400.0, 2.0], [23100.0, 3.0], [22800.0, 7.0], [23000.0, 2.0], [23200.0, 4.0], [23500.0, 2.0], [23300.0, 4.0], [22600.0, 1.0], [22700.0, 2.0], [22900.0, 5.0], [23800.0, 6.0], [24100.0, 7.0], [24300.0, 2.0], [24400.0, 7.0], [24200.0, 8.0], [23900.0, 4.0], [24500.0, 7.0], [24000.0, 2.0], [23700.0, 5.0], [23600.0, 2.0], [24800.0, 6.0], [25100.0, 6.0], [25000.0, 4.0], [24600.0, 7.0], [24700.0, 8.0], [24900.0, 10.0], [25500.0, 4.0], [25400.0, 2.0], [25300.0, 3.0], [25200.0, 5.0], [25600.0, 6.0], [26200.0, 10.0], [25900.0, 6.0], [26500.0, 6.0], [26100.0, 6.0], [26000.0, 3.0], [25800.0, 3.0], [26300.0, 4.0], [26400.0, 5.0], [26600.0, 4.0], [27500.0, 3.0], [27200.0, 4.0], [26900.0, 4.0], [26700.0, 2.0], [26800.0, 4.0], [27600.0, 4.0], [27300.0, 3.0], [27400.0, 2.0], [27000.0, 2.0], [27800.0, 5.0], [27700.0, 5.0], [28600.0, 5.0], [28300.0, 7.0], [28200.0, 4.0], [28100.0, 5.0], [27900.0, 3.0], [28500.0, 3.0], [28400.0, 7.0], [28000.0, 4.0], [29500.0, 10.0], [29600.0, 33.0], [29200.0, 6.0], [28800.0, 10.0], [29300.0, 12.0], [29400.0, 17.0], [29000.0, 7.0], [28900.0, 8.0], [28700.0, 4.0], [29100.0, 6.0], [29900.0, 24.0], [30700.0, 7.0], [30200.0, 6.0], [30000.0, 14.0], [30100.0, 19.0], [30400.0, 3.0], [29800.0, 28.0], [29700.0, 24.0], [30300.0, 5.0], [30600.0, 8.0], [30500.0, 6.0], [31300.0, 2.0], [30900.0, 3.0], [30800.0, 3.0], [31500.0, 1.0], [31400.0, 1.0], [31000.0, 1.0], [32300.0, 2.0], [31800.0, 3.0], [31900.0, 2.0], [32200.0, 1.0], [32100.0, 1.0], [34000.0, 2.0], [33600.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [39000.0, 1.0], [39400.0, 1.0], [44800.0, 1.0], [44400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60404084E12, "maxY": 10.0, "series": [{"data": [[1.60404114E12, 10.0], [1.60404144E12, 10.0], [1.60404276E12, 9.275862068965518], [1.60404084E12, 10.0], [1.60404246E12, 10.0], [1.60404186E12, 10.0], [1.60404216E12, 10.0], [1.60404126E12, 10.0], [1.60404156E12, 10.0], [1.60404162E12, 10.0], [1.60404192E12, 10.0], [1.60404102E12, 10.0], [1.60404132E12, 10.0], [1.60404234E12, 10.0], [1.60404264E12, 10.0], [1.60404174E12, 10.0], [1.60404204E12, 10.0], [1.6040421E12, 10.0], [1.6040424E12, 10.0], [1.6040415E12, 10.0], [1.6040418E12, 10.0], [1.6040409E12, 10.0], [1.6040412E12, 10.0], [1.60404282E12, 2.0], [1.60404222E12, 10.0], [1.60404252E12, 10.0], [1.60404096E12, 10.0], [1.60404258E12, 10.0], [1.60404198E12, 10.0], [1.60404228E12, 10.0], [1.60404138E12, 10.0], [1.60404168E12, 10.0], [1.60404108E12, 10.0], [1.6040427E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404282E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17278.0, "minX": 1.0, "maxY": 26581.61983471073, "series": [{"data": [[8.0, 17677.0], [4.0, 17433.0], [2.0, 17278.0], [1.0, 17569.0], [9.0, 17771.0], [10.0, 26581.61983471073], [5.0, 17597.0], [6.0, 17614.0], [3.0, 17305.0], [7.0, 17666.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26470.974149659847]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.616666666666667, "minX": 1.60404084E12, "maxY": 223705.96666666667, "series": [{"data": [[1.60404114E12, 45780.96666666667], [1.60404144E12, 42463.0], [1.60404276E12, 55564.63333333333], [1.60404084E12, 143231.78333333333], [1.60404246E12, 46979.566666666666], [1.60404186E12, 62748.03333333333], [1.60404216E12, 46590.683333333334], [1.60404126E12, 44036.75], [1.60404156E12, 33221.85], [1.60404162E12, 52356.45], [1.60404192E12, 86123.31666666667], [1.60404102E12, 70228.01666666666], [1.60404132E12, 48749.28333333333], [1.60404234E12, 45699.65], [1.60404264E12, 51796.46666666667], [1.60404174E12, 70686.78333333334], [1.60404204E12, 47206.916666666664], [1.6040421E12, 37292.0], [1.6040424E12, 45378.61666666667], [1.6040415E12, 42578.21666666667], [1.6040418E12, 223705.96666666667], [1.6040409E12, 118673.8], [1.6040412E12, 48012.433333333334], [1.60404282E12, 1177.1833333333334], [1.60404222E12, 49901.433333333334], [1.60404252E12, 35384.55], [1.60404096E12, 124766.08333333333], [1.60404258E12, 28297.15], [1.60404198E12, 65005.38333333333], [1.60404228E12, 54961.63333333333], [1.60404138E12, 53653.65], [1.60404168E12, 167209.1], [1.60404108E12, 80451.63333333333], [1.6040427E12, 153574.43333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60404114E12, 153.7], [1.60404144E12, 146.05], [1.60404276E12, 202.68333333333334], [1.60404084E12, 80.48333333333333], [1.60404246E12, 153.3], [1.60404186E12, 226.31666666666666], [1.60404216E12, 146.15], [1.60404126E12, 146.1], [1.60404156E12, 167.95], [1.60404162E12, 202.05], [1.60404192E12, 176.33333333333334], [1.60404102E12, 111.58333333333333], [1.60404132E12, 146.13333333333333], [1.60404234E12, 146.43333333333334], [1.60404264E12, 195.13333333333333], [1.60404174E12, 183.23333333333332], [1.60404204E12, 147.35], [1.6040421E12, 138.76666666666668], [1.6040424E12, 146.13333333333333], [1.6040415E12, 146.0], [1.6040418E12, 166.31666666666666], [1.6040409E12, 189.15], [1.6040412E12, 146.13333333333333], [1.60404282E12, 19.616666666666667], [1.60404222E12, 146.13333333333333], [1.60404252E12, 160.48333333333332], [1.60404096E12, 189.73333333333332], [1.60404258E12, 182.43333333333334], [1.60404198E12, 160.73333333333332], [1.60404228E12, 161.36666666666667], [1.60404138E12, 146.4], [1.60404168E12, 179.8], [1.60404108E12, 183.58333333333334], [1.6040427E12, 145.51666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404282E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15417.636363636364, "minX": 1.60404084E12, "maxY": 39218.13333333333, "series": [{"data": [[1.60404114E12, 26037.71428571429], [1.60404144E12, 29711.65], [1.60404276E12, 24318.275862068967], [1.60404084E12, 15417.636363636364], [1.60404246E12, 29774.428571428576], [1.60404186E12, 21257.843749999996], [1.60404216E12, 29765.45], [1.60404126E12, 30008.1], [1.60404156E12, 27542.565217391304], [1.60404162E12, 22226.60714285714], [1.60404192E12, 24090.33333333334], [1.60404102E12, 39218.13333333333], [1.60404132E12, 30425.55], [1.60404234E12, 28798.600000000006], [1.60404264E12, 23134.333333333332], [1.60404174E12, 25292.46153846154], [1.60404204E12, 26146.85], [1.6040421E12, 34657.10526315789], [1.6040424E12, 29405.300000000003], [1.6040415E12, 30363.100000000006], [1.6040418E12, 23873.999999999996], [1.6040409E12, 23865.615384615383], [1.6040412E12, 29762.449999999997], [1.60404282E12, 17384.0], [1.60404222E12, 29757.5], [1.60404252E12, 26941.72727272727], [1.60404096E12, 21081.192307692305], [1.60404258E12, 24676.719999999998], [1.60404198E12, 25970.5], [1.60404228E12, 28968.5909090909], [1.60404138E12, 29415.5], [1.60404168E12, 21113.839999999997], [1.60404108E12, 26657.600000000006], [1.6040427E12, 25620.1]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404282E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15412.363636363638, "minX": 1.60404084E12, "maxY": 39215.73333333334, "series": [{"data": [[1.60404114E12, 26036.57142857143], [1.60404144E12, 29710.500000000004], [1.60404276E12, 24316.241379310348], [1.60404084E12, 15412.363636363638], [1.60404246E12, 29773.095238095237], [1.60404186E12, 21256.375], [1.60404216E12, 29764.000000000004], [1.60404126E12, 30006.75], [1.60404156E12, 27541.869565217392], [1.60404162E12, 22224.892857142862], [1.60404192E12, 24088.125000000004], [1.60404102E12, 39215.73333333334], [1.60404132E12, 30423.649999999998], [1.60404234E12, 28797.199999999997], [1.60404264E12, 23132.740740740745], [1.60404174E12, 25289.730769230762], [1.60404204E12, 26145.050000000007], [1.6040421E12, 34655.526315789466], [1.6040424E12, 29404.1], [1.6040415E12, 30361.649999999994], [1.6040418E12, 23869.0], [1.6040409E12, 23863.53846153846], [1.6040412E12, 29760.8], [1.60404282E12, 17382.0], [1.60404222E12, 29756.000000000004], [1.60404252E12, 26940.863636363632], [1.60404096E12, 21078.576923076922], [1.60404258E12, 24675.999999999996], [1.60404198E12, 25968.590909090908], [1.60404228E12, 28967.04545454545], [1.60404138E12, 29414.199999999997], [1.60404168E12, 21109.639999999996], [1.60404108E12, 26655.600000000002], [1.6040427E12, 25615.85]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404282E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60404084E12, "maxY": 8.0, "series": [{"data": [[1.60404114E12, 0.619047619047619], [1.60404144E12, 0.55], [1.60404276E12, 0.5172413793103446], [1.60404084E12, 8.0], [1.60404246E12, 0.47619047619047616], [1.60404186E12, 0.37500000000000006], [1.60404216E12, 0.25], [1.60404126E12, 0.7500000000000002], [1.60404156E12, 0.4782608695652174], [1.60404162E12, 0.3928571428571429], [1.60404192E12, 0.29166666666666674], [1.60404102E12, 1.0666666666666669], [1.60404132E12, 0.65], [1.60404234E12, 0.15], [1.60404264E12, 0.5185185185185186], [1.60404174E12, 0.5], [1.60404204E12, 0.55], [1.6040421E12, 0.5789473684210527], [1.6040424E12, 0.65], [1.6040415E12, 0.6500000000000001], [1.6040418E12, 0.5217391304347826], [1.6040409E12, 0.2692307692307693], [1.6040412E12, 0.1], [1.60404282E12, 0.0], [1.60404222E12, 0.7000000000000001], [1.60404252E12, 0.3181818181818182], [1.60404096E12, 0.30769230769230765], [1.60404258E12, 0.39999999999999997], [1.60404198E12, 0.4090909090909091], [1.60404228E12, 0.5909090909090909], [1.60404138E12, 0.3499999999999999], [1.60404168E12, 0.36], [1.60404108E12, 0.5999999999999999], [1.6040427E12, 0.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404282E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3086.0, "minX": 1.60404084E12, "maxY": 44825.0, "series": [{"data": [[1.60404114E12, 30494.0], [1.60404144E12, 30372.0], [1.60404276E12, 39130.0], [1.60404084E12, 25645.0], [1.60404246E12, 30196.0], [1.60404186E12, 29091.0], [1.60404216E12, 30252.0], [1.60404126E12, 30687.0], [1.60404156E12, 29849.0], [1.60404162E12, 26629.0], [1.60404192E12, 32395.0], [1.60404102E12, 44825.0], [1.60404132E12, 30907.0], [1.60404234E12, 30189.0], [1.60404264E12, 27801.0], [1.60404174E12, 31922.0], [1.60404204E12, 35668.0], [1.6040421E12, 43922.0], [1.6040424E12, 29693.0], [1.6040415E12, 30935.0], [1.6040418E12, 29934.0], [1.6040409E12, 27734.0], [1.6040412E12, 30601.0], [1.60404282E12, 17569.0], [1.60404222E12, 29994.0], [1.60404252E12, 29606.0], [1.60404096E12, 25810.0], [1.60404258E12, 28582.0], [1.60404198E12, 29663.0], [1.60404228E12, 29984.0], [1.60404138E12, 30081.0], [1.60404168E12, 24997.0], [1.60404108E12, 33613.0], [1.6040427E12, 30082.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60404114E12, 23124.0], [1.60404144E12, 28630.0], [1.60404276E12, 17390.0], [1.60404084E12, 3086.0], [1.60404246E12, 29329.0], [1.60404186E12, 17732.0], [1.60404216E12, 29379.0], [1.60404126E12, 29569.0], [1.60404156E12, 25991.0], [1.60404162E12, 17534.0], [1.60404192E12, 17566.0], [1.60404102E12, 26997.0], [1.60404132E12, 29976.0], [1.60404234E12, 28129.0], [1.60404264E12, 19073.0], [1.60404174E12, 18096.0], [1.60404204E12, 22490.0], [1.6040421E12, 25992.0], [1.6040424E12, 29099.0], [1.6040415E12, 29808.0], [1.6040418E12, 19420.0], [1.6040409E12, 19360.0], [1.6040412E12, 26792.0], [1.60404282E12, 17278.0], [1.60404222E12, 29213.0], [1.60404252E12, 24245.0], [1.60404096E12, 17691.0], [1.60404258E12, 21468.0], [1.60404198E12, 23431.0], [1.60404228E12, 27441.0], [1.60404138E12, 28827.0], [1.60404168E12, 18810.0], [1.60404108E12, 22446.0], [1.6040427E12, 20016.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60404114E12, 23124.0], [1.60404144E12, 28630.0], [1.60404276E12, 17390.0], [1.60404084E12, 3086.0], [1.60404246E12, 29329.0], [1.60404186E12, 17732.0], [1.60404216E12, 29379.0], [1.60404126E12, 29569.0], [1.60404156E12, 25991.0], [1.60404162E12, 17534.0], [1.60404192E12, 17566.0], [1.60404102E12, 26997.0], [1.60404132E12, 29976.0], [1.60404234E12, 28129.0], [1.60404264E12, 19073.0], [1.60404174E12, 18096.0], [1.60404204E12, 22490.0], [1.6040421E12, 25992.0], [1.6040424E12, 29099.0], [1.6040415E12, 29808.0], [1.6040418E12, 19420.0], [1.6040409E12, 19360.0], [1.6040412E12, 26792.0], [1.60404282E12, 17278.0], [1.60404222E12, 29213.0], [1.60404252E12, 24245.0], [1.60404096E12, 17691.0], [1.60404258E12, 21468.0], [1.60404198E12, 23431.0], [1.60404228E12, 27441.0], [1.60404138E12, 28827.0], [1.60404168E12, 18810.0], [1.60404108E12, 22446.0], [1.6040427E12, 20016.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60404114E12, 23124.0], [1.60404144E12, 28630.0], [1.60404276E12, 17390.0], [1.60404084E12, 3086.0], [1.60404246E12, 29329.0], [1.60404186E12, 17732.0], [1.60404216E12, 29379.0], [1.60404126E12, 29569.0], [1.60404156E12, 25991.0], [1.60404162E12, 17534.0], [1.60404192E12, 17566.0], [1.60404102E12, 26997.0], [1.60404132E12, 29976.0], [1.60404234E12, 28129.0], [1.60404264E12, 19073.0], [1.60404174E12, 18096.0], [1.60404204E12, 22490.0], [1.6040421E12, 25992.0], [1.6040424E12, 29099.0], [1.6040415E12, 29808.0], [1.6040418E12, 19420.0], [1.6040409E12, 19360.0], [1.6040412E12, 26792.0], [1.60404282E12, 17278.0], [1.60404222E12, 29213.0], [1.60404252E12, 24245.0], [1.60404096E12, 17691.0], [1.60404258E12, 21468.0], [1.60404198E12, 23431.0], [1.60404228E12, 27441.0], [1.60404138E12, 28827.0], [1.60404168E12, 18810.0], [1.60404108E12, 22446.0], [1.6040427E12, 20016.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60404114E12, 23124.0], [1.60404144E12, 28630.0], [1.60404276E12, 17390.0], [1.60404084E12, 3086.0], [1.60404246E12, 29329.0], [1.60404186E12, 17732.0], [1.60404216E12, 29379.0], [1.60404126E12, 29569.0], [1.60404156E12, 25991.0], [1.60404162E12, 17534.0], [1.60404192E12, 17566.0], [1.60404102E12, 26997.0], [1.60404132E12, 29976.0], [1.60404234E12, 28129.0], [1.60404264E12, 19073.0], [1.60404174E12, 18096.0], [1.60404204E12, 22490.0], [1.6040421E12, 25992.0], [1.6040424E12, 29099.0], [1.6040415E12, 29808.0], [1.6040418E12, 19420.0], [1.6040409E12, 19360.0], [1.6040412E12, 26792.0], [1.60404282E12, 17278.0], [1.60404222E12, 29213.0], [1.60404252E12, 24245.0], [1.60404096E12, 17691.0], [1.60404258E12, 21468.0], [1.60404198E12, 23431.0], [1.60404228E12, 27441.0], [1.60404138E12, 28827.0], [1.60404168E12, 18810.0], [1.60404108E12, 22446.0], [1.6040427E12, 20016.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60404114E12, 26257.0], [1.60404144E12, 29736.5], [1.60404276E12, 20239.0], [1.60404084E12, 15767.0], [1.60404246E12, 29742.0], [1.60404186E12, 20192.0], [1.60404216E12, 29746.0], [1.60404126E12, 29926.0], [1.60404156E12, 27213.0], [1.60404162E12, 23857.5], [1.60404192E12, 23760.5], [1.60404102E12, 41393.0], [1.60404132E12, 30392.5], [1.60404234E12, 28701.0], [1.60404264E12, 22960.0], [1.60404174E12, 25614.5], [1.60404204E12, 24657.5], [1.6040421E12, 34353.0], [1.6040424E12, 29419.0], [1.6040415E12, 30312.0], [1.6040418E12, 24655.0], [1.6040409E12, 24279.0], [1.6040412E12, 29822.5], [1.60404282E12, 17305.0], [1.60404222E12, 29826.0], [1.60404252E12, 26331.5], [1.60404096E12, 20838.5], [1.60404258E12, 24197.0], [1.60404198E12, 25098.0], [1.60404228E12, 29096.5], [1.60404138E12, 29407.5], [1.60404168E12, 20378.0], [1.60404108E12, 24957.0], [1.6040427E12, 28072.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404282E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27441.0, "minX": 1.0, "maxY": 27441.0, "series": [{"data": [[1.0, 27441.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27441.0, "minX": 1.0, "maxY": 27441.0, "series": [{"data": [[1.0, 27441.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60404084E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60404114E12, 0.35], [1.60404144E12, 0.3333333333333333], [1.60404276E12, 0.36666666666666664], [1.60404084E12, 0.35], [1.60404246E12, 0.35], [1.60404186E12, 0.5333333333333333], [1.60404216E12, 0.3333333333333333], [1.60404126E12, 0.3333333333333333], [1.60404156E12, 0.38333333333333336], [1.60404162E12, 0.4666666666666667], [1.60404192E12, 0.4], [1.60404102E12, 0.25], [1.60404132E12, 0.3333333333333333], [1.60404234E12, 0.3333333333333333], [1.60404264E12, 0.45], [1.60404174E12, 0.43333333333333335], [1.60404204E12, 0.3333333333333333], [1.6040421E12, 0.31666666666666665], [1.6040424E12, 0.3333333333333333], [1.6040415E12, 0.3333333333333333], [1.6040418E12, 0.38333333333333336], [1.6040409E12, 0.43333333333333335], [1.6040412E12, 0.3333333333333333], [1.60404222E12, 0.3333333333333333], [1.60404252E12, 0.36666666666666664], [1.60404096E12, 0.43333333333333335], [1.60404258E12, 0.4166666666666667], [1.60404198E12, 0.36666666666666664], [1.60404228E12, 0.36666666666666664], [1.60404138E12, 0.3333333333333333], [1.60404168E12, 0.4166666666666667], [1.60404108E12, 0.4166666666666667], [1.6040427E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404276E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60404084E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60404114E12, 0.35], [1.60404144E12, 0.3333333333333333], [1.60404276E12, 0.48333333333333334], [1.60404084E12, 0.18333333333333332], [1.60404246E12, 0.35], [1.60404186E12, 0.5333333333333333], [1.60404216E12, 0.3333333333333333], [1.60404126E12, 0.3333333333333333], [1.60404156E12, 0.38333333333333336], [1.60404162E12, 0.4666666666666667], [1.60404192E12, 0.4], [1.60404102E12, 0.25], [1.60404132E12, 0.3333333333333333], [1.60404234E12, 0.3333333333333333], [1.60404264E12, 0.45], [1.60404174E12, 0.43333333333333335], [1.60404204E12, 0.3333333333333333], [1.6040421E12, 0.31666666666666665], [1.6040424E12, 0.3333333333333333], [1.6040415E12, 0.3333333333333333], [1.6040418E12, 0.38333333333333336], [1.6040409E12, 0.43333333333333335], [1.6040412E12, 0.3333333333333333], [1.60404282E12, 0.05], [1.60404222E12, 0.3333333333333333], [1.60404252E12, 0.36666666666666664], [1.60404096E12, 0.43333333333333335], [1.60404258E12, 0.4166666666666667], [1.60404198E12, 0.36666666666666664], [1.60404228E12, 0.36666666666666664], [1.60404138E12, 0.3333333333333333], [1.60404168E12, 0.4166666666666667], [1.60404108E12, 0.4166666666666667], [1.6040427E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60404282E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60404084E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60404114E12, 0.35], [1.60404144E12, 0.3333333333333333], [1.60404276E12, 0.48333333333333334], [1.60404084E12, 0.18333333333333332], [1.60404246E12, 0.35], [1.60404186E12, 0.5333333333333333], [1.60404216E12, 0.3333333333333333], [1.60404126E12, 0.3333333333333333], [1.60404156E12, 0.38333333333333336], [1.60404162E12, 0.4666666666666667], [1.60404192E12, 0.4], [1.60404102E12, 0.25], [1.60404132E12, 0.3333333333333333], [1.60404234E12, 0.3333333333333333], [1.60404264E12, 0.45], [1.60404174E12, 0.43333333333333335], [1.60404204E12, 0.3333333333333333], [1.6040421E12, 0.31666666666666665], [1.6040424E12, 0.3333333333333333], [1.6040415E12, 0.3333333333333333], [1.6040418E12, 0.38333333333333336], [1.6040409E12, 0.43333333333333335], [1.6040412E12, 0.3333333333333333], [1.60404282E12, 0.05], [1.60404222E12, 0.3333333333333333], [1.60404252E12, 0.36666666666666664], [1.60404096E12, 0.43333333333333335], [1.60404258E12, 0.4166666666666667], [1.60404198E12, 0.36666666666666664], [1.60404228E12, 0.36666666666666664], [1.60404138E12, 0.3333333333333333], [1.60404168E12, 0.4166666666666667], [1.60404108E12, 0.4166666666666667], [1.6040427E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404282E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60404084E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60404114E12, 0.35], [1.60404144E12, 0.3333333333333333], [1.60404276E12, 0.48333333333333334], [1.60404084E12, 0.18333333333333332], [1.60404246E12, 0.35], [1.60404186E12, 0.5333333333333333], [1.60404216E12, 0.3333333333333333], [1.60404126E12, 0.3333333333333333], [1.60404156E12, 0.38333333333333336], [1.60404162E12, 0.4666666666666667], [1.60404192E12, 0.4], [1.60404102E12, 0.25], [1.60404132E12, 0.3333333333333333], [1.60404234E12, 0.3333333333333333], [1.60404264E12, 0.45], [1.60404174E12, 0.43333333333333335], [1.60404204E12, 0.3333333333333333], [1.6040421E12, 0.31666666666666665], [1.6040424E12, 0.3333333333333333], [1.6040415E12, 0.3333333333333333], [1.6040418E12, 0.38333333333333336], [1.6040409E12, 0.43333333333333335], [1.6040412E12, 0.3333333333333333], [1.60404282E12, 0.05], [1.60404222E12, 0.3333333333333333], [1.60404252E12, 0.36666666666666664], [1.60404096E12, 0.43333333333333335], [1.60404258E12, 0.4166666666666667], [1.60404198E12, 0.36666666666666664], [1.60404228E12, 0.36666666666666664], [1.60404138E12, 0.3333333333333333], [1.60404168E12, 0.4166666666666667], [1.60404108E12, 0.4166666666666667], [1.6040427E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60404282E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

