/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3250.0, "minX": 0.0, "maxY": 45476.0, "series": [{"data": [[0.0, 3250.0], [0.1, 3250.0], [0.2, 6195.0], [0.3, 8357.0], [0.4, 8357.0], [0.5, 11141.0], [0.6, 13849.0], [0.7, 16362.0], [0.8, 16362.0], [0.9, 16880.0], [1.0, 16889.0], [1.1, 16982.0], [1.2, 16982.0], [1.3, 17077.0], [1.4, 17089.0], [1.5, 17165.0], [1.6, 17165.0], [1.7, 17221.0], [1.8, 17265.0], [1.9, 17265.0], [2.0, 17330.0], [2.1, 17344.0], [2.2, 17356.0], [2.3, 17356.0], [2.4, 17368.0], [2.5, 17405.0], [2.6, 17438.0], [2.7, 17438.0], [2.8, 17454.0], [2.9, 17464.0], [3.0, 17476.0], [3.1, 17476.0], [3.2, 17530.0], [3.3, 17532.0], [3.4, 17532.0], [3.5, 17550.0], [3.6, 17561.0], [3.7, 17570.0], [3.8, 17570.0], [3.9, 17574.0], [4.0, 17578.0], [4.1, 17584.0], [4.2, 17584.0], [4.3, 17612.0], [4.4, 17615.0], [4.5, 17618.0], [4.6, 17618.0], [4.7, 17663.0], [4.8, 17674.0], [4.9, 17678.0], [5.0, 17678.0], [5.1, 17711.0], [5.2, 17749.0], [5.3, 17749.0], [5.4, 17796.0], [5.5, 17862.0], [5.6, 17877.0], [5.7, 17877.0], [5.8, 17885.0], [5.9, 17904.0], [6.0, 17912.0], [6.1, 17912.0], [6.2, 17931.0], [6.3, 17941.0], [6.4, 17981.0], [6.5, 17981.0], [6.6, 18006.0], [6.7, 18018.0], [6.8, 18018.0], [6.9, 18028.0], [7.0, 18047.0], [7.1, 18098.0], [7.2, 18098.0], [7.3, 18105.0], [7.4, 18135.0], [7.5, 18154.0], [7.6, 18154.0], [7.7, 18181.0], [7.8, 18208.0], [7.9, 18293.0], [8.0, 18293.0], [8.1, 18307.0], [8.2, 18324.0], [8.3, 18328.0], [8.4, 18328.0], [8.5, 18380.0], [8.6, 18405.0], [8.7, 18405.0], [8.8, 18425.0], [8.9, 18429.0], [9.0, 18457.0], [9.1, 18457.0], [9.2, 18474.0], [9.3, 18614.0], [9.4, 18616.0], [9.5, 18616.0], [9.6, 18646.0], [9.7, 18666.0], [9.8, 18827.0], [9.9, 18827.0], [10.0, 18838.0], [10.1, 18860.0], [10.2, 18860.0], [10.3, 18869.0], [10.4, 18984.0], [10.5, 19039.0], [10.6, 19039.0], [10.7, 19108.0], [10.8, 19164.0], [10.9, 19210.0], [11.0, 19210.0], [11.1, 19211.0], [11.2, 19291.0], [11.3, 19314.0], [11.4, 19314.0], [11.5, 19362.0], [11.6, 19408.0], [11.7, 19408.0], [11.8, 19451.0], [11.9, 19507.0], [12.0, 19520.0], [12.1, 19520.0], [12.2, 19553.0], [12.3, 19595.0], [12.4, 19617.0], [12.5, 19617.0], [12.6, 19639.0], [12.7, 19676.0], [12.8, 19765.0], [12.9, 19765.0], [13.0, 19834.0], [13.1, 19849.0], [13.2, 19858.0], [13.3, 19858.0], [13.4, 19901.0], [13.5, 19932.0], [13.6, 19932.0], [13.7, 19946.0], [13.8, 20014.0], [13.9, 20034.0], [14.0, 20034.0], [14.1, 20073.0], [14.2, 20096.0], [14.3, 20098.0], [14.4, 20098.0], [14.5, 20153.0], [14.6, 20157.0], [14.7, 20164.0], [14.8, 20164.0], [14.9, 20206.0], [15.0, 20215.0], [15.1, 20215.0], [15.2, 20220.0], [15.3, 20225.0], [15.4, 20318.0], [15.5, 20318.0], [15.6, 20350.0], [15.7, 20436.0], [15.8, 20439.0], [15.9, 20439.0], [16.0, 20451.0], [16.1, 20485.0], [16.2, 20487.0], [16.3, 20487.0], [16.4, 20492.0], [16.5, 20531.0], [16.6, 20630.0], [16.7, 20630.0], [16.8, 20717.0], [16.9, 20895.0], [17.0, 20895.0], [17.1, 20953.0], [17.2, 21062.0], [17.3, 21145.0], [17.4, 21145.0], [17.5, 21248.0], [17.6, 21271.0], [17.7, 21426.0], [17.8, 21426.0], [17.9, 21444.0], [18.0, 21480.0], [18.1, 21524.0], [18.2, 21524.0], [18.3, 21527.0], [18.4, 21567.0], [18.5, 21567.0], [18.6, 21578.0], [18.7, 21662.0], [18.8, 21857.0], [18.9, 21857.0], [19.0, 21874.0], [19.1, 21914.0], [19.2, 21925.0], [19.3, 21925.0], [19.4, 21950.0], [19.5, 21962.0], [19.6, 21980.0], [19.7, 21980.0], [19.8, 22025.0], [19.9, 22034.0], [20.0, 22040.0], [20.1, 22040.0], [20.2, 22070.0], [20.3, 22108.0], [20.4, 22108.0], [20.5, 22142.0], [20.6, 22153.0], [20.7, 22161.0], [20.8, 22161.0], [20.9, 22195.0], [21.0, 22240.0], [21.1, 22267.0], [21.2, 22267.0], [21.3, 22285.0], [21.4, 22316.0], [21.5, 22325.0], [21.6, 22325.0], [21.7, 22350.0], [21.8, 22412.0], [21.9, 22412.0], [22.0, 22414.0], [22.1, 22424.0], [22.2, 22484.0], [22.3, 22484.0], [22.4, 22532.0], [22.5, 22630.0], [22.6, 22642.0], [22.7, 22642.0], [22.8, 22653.0], [22.9, 22670.0], [23.0, 22673.0], [23.1, 22673.0], [23.2, 22746.0], [23.3, 22782.0], [23.4, 22782.0], [23.5, 22801.0], [23.6, 22814.0], [23.7, 22823.0], [23.8, 22823.0], [23.9, 22836.0], [24.0, 22892.0], [24.1, 22972.0], [24.2, 22972.0], [24.3, 22999.0], [24.4, 23013.0], [24.5, 23019.0], [24.6, 23019.0], [24.7, 23019.0], [24.8, 23027.0], [24.9, 23072.0], [25.0, 23072.0], [25.1, 23080.0], [25.2, 23081.0], [25.3, 23081.0], [25.4, 23100.0], [25.5, 23234.0], [25.6, 23280.0], [25.7, 23280.0], [25.8, 23289.0], [25.9, 23299.0], [26.0, 23319.0], [26.1, 23319.0], [26.2, 23320.0], [26.3, 23332.0], [26.4, 23360.0], [26.5, 23360.0], [26.6, 23451.0], [26.7, 23473.0], [26.8, 23473.0], [26.9, 23489.0], [27.0, 23523.0], [27.1, 23532.0], [27.2, 23532.0], [27.3, 23587.0], [27.4, 23605.0], [27.5, 23632.0], [27.6, 23632.0], [27.7, 23645.0], [27.8, 23665.0], [27.9, 23672.0], [28.0, 23672.0], [28.1, 23734.0], [28.2, 23741.0], [28.3, 23755.0], [28.4, 23755.0], [28.5, 23757.0], [28.6, 23763.0], [28.7, 23763.0], [28.8, 23764.0], [28.9, 23776.0], [29.0, 23787.0], [29.1, 23787.0], [29.2, 23876.0], [29.3, 23925.0], [29.4, 23932.0], [29.5, 23932.0], [29.6, 23933.0], [29.7, 23951.0], [29.8, 23955.0], [29.9, 23955.0], [30.0, 23958.0], [30.1, 23969.0], [30.2, 23969.0], [30.3, 23975.0], [30.4, 24024.0], [30.5, 24061.0], [30.6, 24061.0], [30.7, 24087.0], [30.8, 24097.0], [30.9, 24099.0], [31.0, 24099.0], [31.1, 24101.0], [31.2, 24123.0], [31.3, 24134.0], [31.4, 24134.0], [31.5, 24145.0], [31.6, 24153.0], [31.7, 24153.0], [31.8, 24237.0], [31.9, 24238.0], [32.0, 24267.0], [32.1, 24267.0], [32.2, 24302.0], [32.3, 24352.0], [32.4, 24358.0], [32.5, 24358.0], [32.6, 24362.0], [32.7, 24365.0], [32.8, 24387.0], [32.9, 24387.0], [33.0, 24394.0], [33.1, 24417.0], [33.2, 24427.0], [33.3, 24427.0], [33.4, 24428.0], [33.5, 24430.0], [33.6, 24430.0], [33.7, 24431.0], [33.8, 24438.0], [33.9, 24454.0], [34.0, 24454.0], [34.1, 24455.0], [34.2, 24459.0], [34.3, 24506.0], [34.4, 24506.0], [34.5, 24520.0], [34.6, 24567.0], [34.7, 24569.0], [34.8, 24569.0], [34.9, 24574.0], [35.0, 24600.0], [35.1, 24600.0], [35.2, 24604.0], [35.3, 24610.0], [35.4, 24622.0], [35.5, 24622.0], [35.6, 24623.0], [35.7, 24653.0], [35.8, 24693.0], [35.9, 24693.0], [36.0, 24697.0], [36.1, 24714.0], [36.2, 24728.0], [36.3, 24728.0], [36.4, 24745.0], [36.5, 24756.0], [36.6, 24759.0], [36.7, 24759.0], [36.8, 24766.0], [36.9, 24784.0], [37.0, 24784.0], [37.1, 24820.0], [37.2, 24827.0], [37.3, 24832.0], [37.4, 24832.0], [37.5, 24836.0], [37.6, 24856.0], [37.7, 24862.0], [37.8, 24862.0], [37.9, 24872.0], [38.0, 24921.0], [38.1, 24960.0], [38.2, 24960.0], [38.3, 24969.0], [38.4, 25009.0], [38.5, 25009.0], [38.6, 25049.0], [38.7, 25064.0], [38.8, 25070.0], [38.9, 25070.0], [39.0, 25083.0], [39.1, 25221.0], [39.2, 25238.0], [39.3, 25238.0], [39.4, 25287.0], [39.5, 25292.0], [39.6, 25304.0], [39.7, 25304.0], [39.8, 25409.0], [39.9, 25419.0], [40.0, 25419.0], [40.1, 25419.0], [40.2, 25433.0], [40.3, 25435.0], [40.4, 25435.0], [40.5, 25445.0], [40.6, 25447.0], [40.7, 25481.0], [40.8, 25481.0], [40.9, 25502.0], [41.0, 25507.0], [41.1, 25508.0], [41.2, 25508.0], [41.3, 25531.0], [41.4, 25545.0], [41.5, 25553.0], [41.6, 25553.0], [41.7, 25646.0], [41.8, 25660.0], [41.9, 25660.0], [42.0, 25671.0], [42.1, 25726.0], [42.2, 25727.0], [42.3, 25727.0], [42.4, 25744.0], [42.5, 25819.0], [42.6, 25882.0], [42.7, 25882.0], [42.8, 25883.0], [42.9, 25895.0], [43.0, 25907.0], [43.1, 25907.0], [43.2, 25923.0], [43.3, 25931.0], [43.4, 25931.0], [43.5, 25962.0], [43.6, 25977.0], [43.7, 25983.0], [43.8, 25983.0], [43.9, 25988.0], [44.0, 25989.0], [44.1, 26061.0], [44.2, 26061.0], [44.3, 26065.0], [44.4, 26067.0], [44.5, 26127.0], [44.6, 26127.0], [44.7, 26135.0], [44.8, 26163.0], [44.9, 26205.0], [45.0, 26205.0], [45.1, 26206.0], [45.2, 26231.0], [45.3, 26231.0], [45.4, 26239.0], [45.5, 26273.0], [45.6, 26291.0], [45.7, 26291.0], [45.8, 26304.0], [45.9, 26315.0], [46.0, 26328.0], [46.1, 26328.0], [46.2, 26330.0], [46.3, 26338.0], [46.4, 26341.0], [46.5, 26341.0], [46.6, 26370.0], [46.7, 26383.0], [46.8, 26383.0], [46.9, 26385.0], [47.0, 26409.0], [47.1, 26421.0], [47.2, 26421.0], [47.3, 26446.0], [47.4, 26474.0], [47.5, 26532.0], [47.6, 26532.0], [47.7, 26534.0], [47.8, 26537.0], [47.9, 26579.0], [48.0, 26579.0], [48.1, 26582.0], [48.2, 26803.0], [48.3, 26823.0], [48.4, 26823.0], [48.5, 26833.0], [48.6, 26936.0], [48.7, 26936.0], [48.8, 26972.0], [48.9, 26978.0], [49.0, 27004.0], [49.1, 27004.0], [49.2, 27015.0], [49.3, 27018.0], [49.4, 27063.0], [49.5, 27063.0], [49.6, 27063.0], [49.7, 27082.0], [49.8, 27155.0], [49.9, 27155.0], [50.0, 27159.0], [50.1, 27182.0], [50.2, 27182.0], [50.3, 27185.0], [50.4, 27199.0], [50.5, 27204.0], [50.6, 27204.0], [50.7, 27215.0], [50.8, 27232.0], [50.9, 27256.0], [51.0, 27256.0], [51.1, 27269.0], [51.2, 27291.0], [51.3, 27318.0], [51.4, 27318.0], [51.5, 27358.0], [51.6, 27416.0], [51.7, 27416.0], [51.8, 27417.0], [51.9, 27429.0], [52.0, 27444.0], [52.1, 27444.0], [52.2, 27446.0], [52.3, 27463.0], [52.4, 27489.0], [52.5, 27489.0], [52.6, 27503.0], [52.7, 27523.0], [52.8, 27572.0], [52.9, 27572.0], [53.0, 27596.0], [53.1, 27686.0], [53.2, 27703.0], [53.3, 27703.0], [53.4, 27730.0], [53.5, 27786.0], [53.6, 27786.0], [53.7, 27890.0], [53.8, 27943.0], [53.9, 27965.0], [54.0, 27965.0], [54.1, 27966.0], [54.2, 27973.0], [54.3, 28011.0], [54.4, 28011.0], [54.5, 28030.0], [54.6, 28055.0], [54.7, 28061.0], [54.8, 28061.0], [54.9, 28068.0], [55.0, 28079.0], [55.1, 28079.0], [55.2, 28092.0], [55.3, 28136.0], [55.4, 28168.0], [55.5, 28168.0], [55.6, 28188.0], [55.7, 28208.0], [55.8, 28219.0], [55.9, 28219.0], [56.0, 28220.0], [56.1, 28220.0], [56.2, 28235.0], [56.3, 28235.0], [56.4, 28279.0], [56.5, 28286.0], [56.6, 28304.0], [56.7, 28304.0], [56.8, 28310.0], [56.9, 28325.0], [57.0, 28325.0], [57.1, 28330.0], [57.2, 28334.0], [57.3, 28337.0], [57.4, 28337.0], [57.5, 28339.0], [57.6, 28357.0], [57.7, 28375.0], [57.8, 28375.0], [57.9, 28416.0], [58.0, 28424.0], [58.1, 28443.0], [58.2, 28443.0], [58.3, 28452.0], [58.4, 28471.0], [58.5, 28471.0], [58.6, 28521.0], [58.7, 28525.0], [58.8, 28525.0], [58.9, 28525.0], [59.0, 28540.0], [59.1, 28564.0], [59.2, 28569.0], [59.3, 28569.0], [59.4, 28575.0], [59.5, 28585.0], [59.6, 28593.0], [59.7, 28593.0], [59.8, 28614.0], [59.9, 28618.0], [60.0, 28629.0], [60.1, 28629.0], [60.2, 28648.0], [60.3, 28688.0], [60.4, 28688.0], [60.5, 28708.0], [60.6, 28724.0], [60.7, 28754.0], [60.8, 28754.0], [60.9, 28777.0], [61.0, 28777.0], [61.1, 28807.0], [61.2, 28807.0], [61.3, 28825.0], [61.4, 28829.0], [61.5, 28850.0], [61.6, 28850.0], [61.7, 28876.0], [61.8, 28887.0], [61.9, 28887.0], [62.0, 28887.0], [62.1, 28892.0], [62.2, 28933.0], [62.3, 28933.0], [62.4, 28945.0], [62.5, 28946.0], [62.6, 28949.0], [62.7, 28949.0], [62.8, 28950.0], [62.9, 28961.0], [63.0, 28964.0], [63.1, 28964.0], [63.2, 28971.0], [63.3, 28980.0], [63.4, 28980.0], [63.5, 28985.0], [63.6, 28987.0], [63.7, 28989.0], [63.8, 28989.0], [63.9, 28990.0], [64.0, 28994.0], [64.1, 29009.0], [64.2, 29009.0], [64.3, 29015.0], [64.4, 29019.0], [64.5, 29028.0], [64.6, 29028.0], [64.7, 29035.0], [64.8, 29039.0], [64.9, 29041.0], [65.0, 29041.0], [65.1, 29046.0], [65.2, 29051.0], [65.3, 29051.0], [65.4, 29053.0], [65.5, 29057.0], [65.6, 29057.0], [65.7, 29057.0], [65.8, 29064.0], [65.9, 29065.0], [66.0, 29066.0], [66.1, 29066.0], [66.2, 29067.0], [66.3, 29070.0], [66.4, 29071.0], [66.5, 29071.0], [66.6, 29085.0], [66.7, 29090.0], [66.8, 29090.0], [66.9, 29098.0], [67.0, 29101.0], [67.1, 29110.0], [67.2, 29110.0], [67.3, 29112.0], [67.4, 29113.0], [67.5, 29114.0], [67.6, 29114.0], [67.7, 29122.0], [67.8, 29123.0], [67.9, 29125.0], [68.0, 29125.0], [68.1, 29129.0], [68.2, 29137.0], [68.3, 29140.0], [68.4, 29140.0], [68.5, 29140.0], [68.6, 29145.0], [68.7, 29145.0], [68.8, 29146.0], [68.9, 29148.0], [69.0, 29155.0], [69.1, 29155.0], [69.2, 29157.0], [69.3, 29164.0], [69.4, 29166.0], [69.5, 29166.0], [69.6, 29175.0], [69.7, 29175.0], [69.8, 29178.0], [69.9, 29178.0], [70.0, 29181.0], [70.1, 29186.0], [70.2, 29186.0], [70.3, 29187.0], [70.4, 29187.0], [70.5, 29191.0], [70.6, 29191.0], [70.7, 29196.0], [70.8, 29196.0], [70.9, 29202.0], [71.0, 29202.0], [71.1, 29215.0], [71.2, 29217.0], [71.3, 29220.0], [71.4, 29220.0], [71.5, 29223.0], [71.6, 29224.0], [71.7, 29224.0], [71.8, 29231.0], [71.9, 29231.0], [72.0, 29233.0], [72.1, 29233.0], [72.2, 29233.0], [72.3, 29237.0], [72.4, 29239.0], [72.5, 29239.0], [72.6, 29240.0], [72.7, 29241.0], [72.8, 29242.0], [72.9, 29242.0], [73.0, 29245.0], [73.1, 29251.0], [73.2, 29251.0], [73.3, 29251.0], [73.4, 29254.0], [73.5, 29254.0], [73.6, 29254.0], [73.7, 29258.0], [73.8, 29258.0], [73.9, 29262.0], [74.0, 29262.0], [74.1, 29265.0], [74.2, 29268.0], [74.3, 29271.0], [74.4, 29271.0], [74.5, 29273.0], [74.6, 29274.0], [74.7, 29274.0], [74.8, 29274.0], [74.9, 29275.0], [75.0, 29278.0], [75.1, 29278.0], [75.2, 29278.0], [75.3, 29278.0], [75.4, 29284.0], [75.5, 29284.0], [75.6, 29286.0], [75.7, 29286.0], [75.8, 29288.0], [75.9, 29288.0], [76.0, 29294.0], [76.1, 29297.0], [76.2, 29300.0], [76.3, 29300.0], [76.4, 29305.0], [76.5, 29307.0], [76.6, 29314.0], [76.7, 29314.0], [76.8, 29318.0], [76.9, 29322.0], [77.0, 29322.0], [77.1, 29331.0], [77.2, 29331.0], [77.3, 29334.0], [77.4, 29334.0], [77.5, 29348.0], [77.6, 29349.0], [77.7, 29350.0], [77.8, 29350.0], [77.9, 29355.0], [78.0, 29357.0], [78.1, 29359.0], [78.2, 29359.0], [78.3, 29359.0], [78.4, 29368.0], [78.5, 29368.0], [78.6, 29369.0], [78.7, 29371.0], [78.8, 29372.0], [78.9, 29372.0], [79.0, 29373.0], [79.1, 29375.0], [79.2, 29387.0], [79.3, 29387.0], [79.4, 29387.0], [79.5, 29388.0], [79.6, 29389.0], [79.7, 29389.0], [79.8, 29389.0], [79.9, 29396.0], [80.0, 29398.0], [80.1, 29398.0], [80.2, 29399.0], [80.3, 29400.0], [80.4, 29400.0], [80.5, 29403.0], [80.6, 29406.0], [80.7, 29410.0], [80.8, 29410.0], [80.9, 29412.0], [81.0, 29412.0], [81.1, 29412.0], [81.2, 29412.0], [81.3, 29413.0], [81.4, 29414.0], [81.5, 29418.0], [81.6, 29418.0], [81.7, 29424.0], [81.8, 29425.0], [81.9, 29425.0], [82.0, 29426.0], [82.1, 29430.0], [82.2, 29431.0], [82.3, 29431.0], [82.4, 29440.0], [82.5, 29440.0], [82.6, 29440.0], [82.7, 29440.0], [82.8, 29444.0], [82.9, 29446.0], [83.0, 29449.0], [83.1, 29449.0], [83.2, 29462.0], [83.3, 29464.0], [83.4, 29464.0], [83.5, 29464.0], [83.6, 29470.0], [83.7, 29473.0], [83.8, 29473.0], [83.9, 29476.0], [84.0, 29483.0], [84.1, 29494.0], [84.2, 29494.0], [84.3, 29499.0], [84.4, 29504.0], [84.5, 29505.0], [84.6, 29505.0], [84.7, 29508.0], [84.8, 29515.0], [84.9, 29527.0], [85.0, 29527.0], [85.1, 29531.0], [85.2, 29533.0], [85.3, 29533.0], [85.4, 29550.0], [85.5, 29552.0], [85.6, 29553.0], [85.7, 29553.0], [85.8, 29554.0], [85.9, 29556.0], [86.0, 29557.0], [86.1, 29557.0], [86.2, 29558.0], [86.3, 29558.0], [86.4, 29562.0], [86.5, 29562.0], [86.6, 29564.0], [86.7, 29564.0], [86.8, 29564.0], [86.9, 29566.0], [87.0, 29566.0], [87.1, 29569.0], [87.2, 29569.0], [87.3, 29569.0], [87.4, 29572.0], [87.5, 29572.0], [87.6, 29572.0], [87.7, 29578.0], [87.8, 29581.0], [87.9, 29582.0], [88.0, 29582.0], [88.1, 29586.0], [88.2, 29594.0], [88.3, 29594.0], [88.4, 29594.0], [88.5, 29597.0], [88.6, 29599.0], [88.7, 29599.0], [88.8, 29612.0], [88.9, 29625.0], [89.0, 29630.0], [89.1, 29630.0], [89.2, 29631.0], [89.3, 29635.0], [89.4, 29642.0], [89.5, 29642.0], [89.6, 29659.0], [89.7, 29669.0], [89.8, 29669.0], [89.9, 29669.0], [90.0, 29671.0], [90.1, 29671.0], [90.2, 29671.0], [90.3, 29672.0], [90.4, 29677.0], [90.5, 29709.0], [90.6, 29709.0], [90.7, 29715.0], [90.8, 29716.0], [90.9, 29725.0], [91.0, 29725.0], [91.1, 29747.0], [91.2, 29747.0], [91.3, 29748.0], [91.4, 29748.0], [91.5, 29748.0], [91.6, 29760.0], [91.7, 29760.0], [91.8, 29787.0], [91.9, 29886.0], [92.0, 29890.0], [92.1, 29890.0], [92.2, 29890.0], [92.3, 29954.0], [92.4, 29969.0], [92.5, 29969.0], [92.6, 29980.0], [92.7, 30083.0], [92.8, 30141.0], [92.9, 30141.0], [93.0, 30243.0], [93.1, 30246.0], [93.2, 30267.0], [93.3, 30267.0], [93.4, 30715.0], [93.5, 30857.0], [93.6, 30857.0], [93.7, 30878.0], [93.8, 30952.0], [93.9, 31267.0], [94.0, 31267.0], [94.1, 31433.0], [94.2, 31581.0], [94.3, 31602.0], [94.4, 31602.0], [94.5, 31684.0], [94.6, 31749.0], [94.7, 31836.0], [94.8, 31836.0], [94.9, 31891.0], [95.0, 31966.0], [95.1, 31966.0], [95.2, 31993.0], [95.3, 32040.0], [95.4, 32292.0], [95.5, 32292.0], [95.6, 32835.0], [95.7, 33036.0], [95.8, 33058.0], [95.9, 33058.0], [96.0, 33264.0], [96.1, 33681.0], [96.2, 33885.0], [96.3, 33885.0], [96.4, 34192.0], [96.5, 34515.0], [96.6, 34743.0], [96.7, 34743.0], [96.8, 35115.0], [96.9, 35214.0], [97.0, 35214.0], [97.1, 35420.0], [97.2, 35950.0], [97.3, 36166.0], [97.4, 36166.0], [97.5, 36726.0], [97.6, 37463.0], [97.7, 37529.0], [97.8, 37529.0], [97.9, 38671.0], [98.0, 38688.0], [98.1, 39938.0], [98.2, 39938.0], [98.3, 40299.0], [98.4, 40783.0], [98.5, 40783.0], [98.6, 41251.0], [98.7, 42185.0], [98.8, 42299.0], [98.9, 42299.0], [99.0, 42646.0], [99.1, 43048.0], [99.2, 43621.0], [99.3, 43621.0], [99.4, 44208.0], [99.5, 44494.0], [99.6, 44910.0], [99.7, 44910.0], [99.8, 45064.0], [99.9, 45476.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 39.0, "series": [{"data": [[34700.0, 1.0], [34100.0, 1.0], [34500.0, 1.0], [36700.0, 1.0], [36100.0, 1.0], [35100.0, 1.0], [35900.0, 1.0], [37500.0, 1.0], [39900.0, 1.0], [40700.0, 1.0], [42100.0, 1.0], [44900.0, 1.0], [3200.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11100.0, 1.0], [13800.0, 1.0], [16300.0, 1.0], [17400.0, 5.0], [17200.0, 2.0], [17300.0, 4.0], [17000.0, 2.0], [17100.0, 1.0], [16800.0, 2.0], [16900.0, 1.0], [18200.0, 2.0], [18400.0, 5.0], [18100.0, 4.0], [18300.0, 4.0], [17700.0, 3.0], [17900.0, 5.0], [17500.0, 8.0], [17600.0, 6.0], [18000.0, 5.0], [17800.0, 3.0], [19100.0, 2.0], [18800.0, 4.0], [18600.0, 4.0], [19300.0, 2.0], [19200.0, 3.0], [19000.0, 1.0], [19400.0, 2.0], [18900.0, 1.0], [20000.0, 5.0], [20400.0, 6.0], [20100.0, 3.0], [19800.0, 3.0], [19600.0, 3.0], [20200.0, 4.0], [19500.0, 4.0], [19900.0, 3.0], [20300.0, 2.0], [19700.0, 1.0], [21400.0, 3.0], [21000.0, 1.0], [20800.0, 1.0], [21200.0, 2.0], [20500.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [21500.0, 4.0], [20700.0, 1.0], [20600.0, 1.0], [21600.0, 1.0], [21900.0, 5.0], [22400.0, 4.0], [22200.0, 3.0], [22100.0, 5.0], [22500.0, 1.0], [22000.0, 4.0], [21800.0, 2.0], [22300.0, 3.0], [22700.0, 2.0], [23000.0, 7.0], [22900.0, 2.0], [23400.0, 3.0], [23300.0, 4.0], [23500.0, 3.0], [23100.0, 1.0], [23200.0, 4.0], [22600.0, 5.0], [22800.0, 5.0], [24500.0, 5.0], [23700.0, 8.0], [23900.0, 8.0], [24200.0, 3.0], [24300.0, 7.0], [24000.0, 5.0], [24400.0, 9.0], [23800.0, 1.0], [24100.0, 5.0], [23600.0, 5.0], [24700.0, 7.0], [25400.0, 8.0], [24600.0, 8.0], [24800.0, 7.0], [25500.0, 6.0], [25000.0, 5.0], [24900.0, 3.0], [25200.0, 4.0], [25300.0, 1.0], [25700.0, 3.0], [26400.0, 4.0], [25900.0, 8.0], [26200.0, 6.0], [26500.0, 5.0], [26300.0, 9.0], [25800.0, 4.0], [26100.0, 3.0], [25600.0, 3.0], [26000.0, 3.0], [27400.0, 7.0], [27200.0, 6.0], [26800.0, 3.0], [27300.0, 2.0], [27600.0, 1.0], [27000.0, 6.0], [27100.0, 5.0], [27500.0, 4.0], [26900.0, 3.0], [28500.0, 9.0], [27700.0, 3.0], [28200.0, 7.0], [28300.0, 9.0], [28400.0, 5.0], [28600.0, 5.0], [28000.0, 7.0], [28100.0, 3.0], [27900.0, 4.0], [27800.0, 1.0], [28900.0, 14.0], [29000.0, 21.0], [29600.0, 13.0], [29500.0, 32.0], [29200.0, 39.0], [29100.0, 29.0], [29300.0, 30.0], [29400.0, 30.0], [28800.0, 8.0], [28700.0, 5.0], [29900.0, 3.0], [29800.0, 3.0], [29700.0, 10.0], [30200.0, 3.0], [30100.0, 1.0], [30700.0, 1.0], [30000.0, 1.0], [30900.0, 1.0], [30800.0, 2.0], [31700.0, 1.0], [31600.0, 2.0], [31500.0, 1.0], [31400.0, 1.0], [31200.0, 1.0], [31900.0, 2.0], [31800.0, 2.0], [32000.0, 1.0], [32200.0, 1.0], [33800.0, 1.0], [33000.0, 2.0], [32800.0, 1.0], [33600.0, 1.0], [33200.0, 1.0], [35400.0, 1.0], [35200.0, 1.0], [38600.0, 2.0], [37400.0, 1.0], [40200.0, 1.0], [42600.0, 1.0], [41200.0, 1.0], [42200.0, 1.0], [43000.0, 1.0], [44200.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [45000.0, 1.0], [45400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.392857142857142, "minX": 1.60403442E12, "maxY": 10.0, "series": [{"data": [[1.60403592E12, 10.0], [1.60403562E12, 10.0], [1.60403532E12, 10.0], [1.60403502E12, 10.0], [1.6040352E12, 10.0], [1.6040349E12, 10.0], [1.6040346E12, 10.0], [1.6040361E12, 10.0], [1.60403544E12, 10.0], [1.60403514E12, 10.0], [1.60403484E12, 10.0], [1.60403454E12, 10.0], [1.60403616E12, 10.0], [1.60403472E12, 10.0], [1.60403442E12, 10.0], [1.60403628E12, 10.0], [1.60403604E12, 10.0], [1.60403574E12, 10.0], [1.60403496E12, 10.0], [1.60403466E12, 10.0], [1.60403634E12, 8.392857142857142], [1.60403598E12, 10.0], [1.60403586E12, 10.0], [1.60403556E12, 10.0], [1.60403526E12, 10.0], [1.60403448E12, 10.0], [1.60403622E12, 10.0], [1.6040358E12, 10.0], [1.6040355E12, 10.0], [1.60403568E12, 10.0], [1.60403538E12, 10.0], [1.60403508E12, 10.0], [1.60403478E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403634E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17454.0, "minX": 1.0, "maxY": 26237.853994490364, "series": [{"data": [[8.0, 17578.0], [4.0, 17454.0], [2.0, 17574.0], [1.0, 17912.0], [9.0, 17532.0], [10.0, 26237.853994490364], [5.0, 17678.0], [6.0, 17612.0], [3.0, 17530.0], [7.0, 17674.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26132.280272108845]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 43.9, "minX": 1.60403442E12, "maxY": 225162.11666666667, "series": [{"data": [[1.60403592E12, 48725.4], [1.60403562E12, 42934.6], [1.60403532E12, 70686.78333333334], [1.60403502E12, 42596.21666666667], [1.6040352E12, 36081.583333333336], [1.6040349E12, 50053.416666666664], [1.6040346E12, 108612.13333333333], [1.6040361E12, 31651.75], [1.60403544E12, 61566.1], [1.60403514E12, 34373.86666666667], [1.60403484E12, 45226.11666666667], [1.60403454E12, 85541.88333333333], [1.60403616E12, 31910.916666666668], [1.60403472E12, 45094.816666666666], [1.60403442E12, 83613.38333333333], [1.60403628E12, 78218.96666666666], [1.60403604E12, 43174.98333333333], [1.60403574E12, 51915.35], [1.60403496E12, 55016.98333333333], [1.60403466E12, 76899.16666666667], [1.60403634E12, 49081.583333333336], [1.60403598E12, 46024.23333333333], [1.60403586E12, 51312.8], [1.60403556E12, 69249.68333333333], [1.60403526E12, 185132.63333333333], [1.60403448E12, 172371.78333333333], [1.60403622E12, 127750.55], [1.6040358E12, 51649.36666666667], [1.6040355E12, 87555.26666666666], [1.60403568E12, 39478.05], [1.60403538E12, 225162.11666666667], [1.60403508E12, 44564.63333333333], [1.60403478E12, 50231.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60403592E12, 153.75], [1.60403562E12, 140.06666666666666], [1.60403532E12, 183.23333333333332], [1.60403502E12, 146.06666666666666], [1.6040352E12, 209.01666666666668], [1.6040349E12, 146.15], [1.6040346E12, 105.21666666666667], [1.6040361E12, 167.75], [1.60403544E12, 231.73333333333332], [1.60403514E12, 160.68333333333334], [1.60403484E12, 153.4], [1.60403454E12, 208.78333333333333], [1.60403616E12, 182.51666666666668], [1.60403472E12, 169.28333333333333], [1.60403442E12, 43.9], [1.60403628E12, 131.86666666666667], [1.60403604E12, 145.98333333333332], [1.60403574E12, 153.46666666666667], [1.60403496E12, 153.68333333333334], [1.60403466E12, 168.01666666666668], [1.60403634E12, 191.83333333333334], [1.60403598E12, 146.11666666666667], [1.60403586E12, 154.05], [1.60403556E12, 168.03333333333333], [1.60403526E12, 187.41666666666666], [1.60403448E12, 183.8], [1.60403622E12, 210.0], [1.6040358E12, 153.45], [1.6040355E12, 170.9], [1.60403568E12, 146.05], [1.60403538E12, 173.63333333333333], [1.60403508E12, 153.28333333333333], [1.60403478E12, 146.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403634E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9859.0, "minX": 1.60403442E12, "maxY": 37036.142857142855, "series": [{"data": [[1.60403592E12, 28434.761904761905], [1.60403562E12, 26456.63157894737], [1.60403532E12, 25049.115384615383], [1.60403502E12, 29224.300000000003], [1.6040352E12, 21989.86206896552], [1.6040349E12, 29363.7], [1.6040346E12, 37036.142857142855], [1.6040361E12, 26728.173913043487], [1.60403544E12, 20282.666666666668], [1.60403514E12, 27235.499999999996], [1.60403484E12, 29599.95238095238], [1.60403454E12, 20284.51724137931], [1.60403616E12, 23916.800000000003], [1.60403472E12, 25993.521739130436], [1.60403442E12, 9859.0], [1.60403628E12, 28343.166666666664], [1.60403604E12, 29535.599999999995], [1.60403574E12, 29062.714285714286], [1.60403496E12, 29005.380952380954], [1.60403466E12, 29447.0], [1.60403634E12, 21943.92857142858], [1.60403598E12, 29426.550000000003], [1.60403586E12, 28572.190476190473], [1.60403556E12, 25654.52173913044], [1.60403526E12, 20715.57692307692], [1.60403448E12, 24444.040000000005], [1.60403622E12, 22462.03448275862], [1.6040358E12, 29299.952380952378], [1.6040355E12, 24315.0], [1.60403568E12, 33465.649999999994], [1.60403538E12, 23275.125], [1.60403508E12, 29335.333333333336], [1.60403478E12, 28495.05]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60403634E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9853.333333333334, "minX": 1.60403442E12, "maxY": 37031.857142857145, "series": [{"data": [[1.60403592E12, 28433.52380952381], [1.60403562E12, 26455.473684210523], [1.60403532E12, 25046.5], [1.60403502E12, 29223.05], [1.6040352E12, 21988.862068965518], [1.6040349E12, 29362.4], [1.6040346E12, 37031.857142857145], [1.6040361E12, 26727.26086956522], [1.60403544E12, 20281.272727272728], [1.60403514E12, 27234.681818181816], [1.60403484E12, 29598.57142857143], [1.60403454E12, 20282.758620689652], [1.60403616E12, 23915.960000000003], [1.60403472E12, 25992.65217391304], [1.60403442E12, 9853.333333333334], [1.60403628E12, 28340.333333333332], [1.60403604E12, 29534.6], [1.60403574E12, 29061.571428571428], [1.60403496E12, 29004.047619047615], [1.60403466E12, 29445.347826086956], [1.60403634E12, 21941.642857142862], [1.60403598E12, 29425.4], [1.60403586E12, 28570.809523809523], [1.60403556E12, 25652.913043478256], [1.60403526E12, 20710.923076923078], [1.60403448E12, 24441.199999999997], [1.60403622E12, 22459.000000000004], [1.6040358E12, 29298.61904761905], [1.6040355E12, 24312.91304347826], [1.60403568E12, 33464.75000000001], [1.60403538E12, 23269.833333333332], [1.60403508E12, 29334.047619047622], [1.60403478E12, 28493.850000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60403634E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.09523809523809526, "minX": 1.60403442E12, "maxY": 12.833333333333334, "series": [{"data": [[1.60403592E12, 0.3333333333333333], [1.60403562E12, 0.5263157894736842], [1.60403532E12, 0.42307692307692313], [1.60403502E12, 0.6000000000000002], [1.6040352E12, 0.44827586206896564], [1.6040349E12, 0.5], [1.6040346E12, 1.0000000000000002], [1.6040361E12, 0.6086956521739131], [1.60403544E12, 0.3636363636363637], [1.60403514E12, 0.18181818181818182], [1.60403484E12, 0.7619047619047616], [1.60403454E12, 0.5517241379310347], [1.60403616E12, 0.24000000000000002], [1.60403472E12, 0.5217391304347827], [1.60403442E12, 12.833333333333334], [1.60403628E12, 0.4444444444444444], [1.60403604E12, 0.65], [1.60403574E12, 0.23809523809523814], [1.60403496E12, 0.09523809523809526], [1.60403466E12, 0.5217391304347827], [1.60403634E12, 0.42857142857142866], [1.60403598E12, 0.45000000000000007], [1.60403586E12, 0.6190476190476191], [1.60403556E12, 0.3043478260869566], [1.60403526E12, 0.34615384615384615], [1.60403448E12, 0.32000000000000006], [1.60403622E12, 0.3793103448275862], [1.6040358E12, 0.5714285714285714], [1.6040355E12, 0.17391304347826086], [1.60403568E12, 0.7000000000000001], [1.60403538E12, 0.5], [1.60403508E12, 0.6190476190476191], [1.60403478E12, 0.20000000000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60403634E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3250.0, "minX": 1.60403442E12, "maxY": 45476.0, "series": [{"data": [[1.60403592E12, 29331.0], [1.60403562E12, 37529.0], [1.60403532E12, 31891.0], [1.60403502E12, 29748.0], [1.6040352E12, 26065.0], [1.6040349E12, 29635.0], [1.6040346E12, 45476.0], [1.6040361E12, 29505.0], [1.60403544E12, 27204.0], [1.60403514E12, 29334.0], [1.60403484E12, 29954.0], [1.60403454E12, 24567.0], [1.60403616E12, 27973.0], [1.60403472E12, 30878.0], [1.60403442E12, 16362.0], [1.60403628E12, 33264.0], [1.60403604E12, 29760.0], [1.60403574E12, 29359.0], [1.60403496E12, 29556.0], [1.60403466E12, 42646.0], [1.60403634E12, 37463.0], [1.60403598E12, 29748.0], [1.60403586E12, 29499.0], [1.60403556E12, 29331.0], [1.60403526E12, 24872.0], [1.60403448E12, 27730.0], [1.60403622E12, 27965.0], [1.6040358E12, 29747.0], [1.6040355E12, 32040.0], [1.60403568E12, 43048.0], [1.60403538E12, 28079.0], [1.60403508E12, 29612.0], [1.60403478E12, 29890.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60403592E12, 27063.0], [1.60403562E12, 22025.0], [1.60403532E12, 17862.0], [1.60403502E12, 28575.0], [1.6040352E12, 17221.0], [1.6040349E12, 29053.0], [1.6040346E12, 23757.0], [1.6040361E12, 24024.0], [1.60403544E12, 17089.0], [1.60403514E12, 24921.0], [1.60403484E12, 29278.0], [1.60403454E12, 17796.0], [1.60403616E12, 21145.0], [1.60403472E12, 23027.0], [1.60403442E12, 3250.0], [1.60403628E12, 22673.0], [1.60403604E12, 29123.0], [1.60403574E12, 28825.0], [1.60403496E12, 28416.0], [1.60403466E12, 24438.0], [1.60403634E12, 16880.0], [1.60403598E12, 29057.0], [1.60403586E12, 26972.0], [1.60403556E12, 23332.0], [1.60403526E12, 18293.0], [1.60403448E12, 18474.0], [1.60403622E12, 18984.0], [1.6040358E12, 28971.0], [1.6040355E12, 17561.0], [1.60403568E12, 25744.0], [1.60403538E12, 19164.0], [1.60403508E12, 28989.0], [1.60403478E12, 25009.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60403592E12, 27063.0], [1.60403562E12, 22025.0], [1.60403532E12, 17862.0], [1.60403502E12, 28575.0], [1.6040352E12, 17221.0], [1.6040349E12, 29053.0], [1.6040346E12, 23757.0], [1.6040361E12, 24024.0], [1.60403544E12, 17089.0], [1.60403514E12, 24921.0], [1.60403484E12, 29278.0], [1.60403454E12, 17796.0], [1.60403616E12, 21145.0], [1.60403472E12, 23027.0], [1.60403442E12, 3250.0], [1.60403628E12, 22673.0], [1.60403604E12, 29123.0], [1.60403574E12, 28825.0], [1.60403496E12, 28416.0], [1.60403466E12, 24438.0], [1.60403634E12, 16880.0], [1.60403598E12, 29057.0], [1.60403586E12, 26972.0], [1.60403556E12, 23332.0], [1.60403526E12, 18293.0], [1.60403448E12, 18474.0], [1.60403622E12, 18984.0], [1.6040358E12, 28971.0], [1.6040355E12, 17561.0], [1.60403568E12, 25744.0], [1.60403538E12, 19164.0], [1.60403508E12, 28989.0], [1.60403478E12, 25009.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60403592E12, 27063.0], [1.60403562E12, 22025.0], [1.60403532E12, 17862.0], [1.60403502E12, 28575.0], [1.6040352E12, 17221.0], [1.6040349E12, 29053.0], [1.6040346E12, 23757.0], [1.6040361E12, 24024.0], [1.60403544E12, 17089.0], [1.60403514E12, 24921.0], [1.60403484E12, 29278.0], [1.60403454E12, 17796.0], [1.60403616E12, 21145.0], [1.60403472E12, 23027.0], [1.60403442E12, 3250.0], [1.60403628E12, 22673.0], [1.60403604E12, 29123.0], [1.60403574E12, 28825.0], [1.60403496E12, 28416.0], [1.60403466E12, 24438.0], [1.60403634E12, 16880.0], [1.60403598E12, 29057.0], [1.60403586E12, 26972.0], [1.60403556E12, 23332.0], [1.60403526E12, 18293.0], [1.60403448E12, 18474.0], [1.60403622E12, 18984.0], [1.6040358E12, 28971.0], [1.6040355E12, 17561.0], [1.60403568E12, 25744.0], [1.60403538E12, 19164.0], [1.60403508E12, 28989.0], [1.60403478E12, 25009.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60403592E12, 27063.0], [1.60403562E12, 22025.0], [1.60403532E12, 17862.0], [1.60403502E12, 28575.0], [1.6040352E12, 17221.0], [1.6040349E12, 29053.0], [1.6040346E12, 23757.0], [1.6040361E12, 24024.0], [1.60403544E12, 17089.0], [1.60403514E12, 24921.0], [1.60403484E12, 29278.0], [1.60403454E12, 17796.0], [1.60403616E12, 21145.0], [1.60403472E12, 23027.0], [1.60403442E12, 3250.0], [1.60403628E12, 22673.0], [1.60403604E12, 29123.0], [1.60403574E12, 28825.0], [1.60403496E12, 28416.0], [1.60403466E12, 24438.0], [1.60403634E12, 16880.0], [1.60403598E12, 29057.0], [1.60403586E12, 26972.0], [1.60403556E12, 23332.0], [1.60403526E12, 18293.0], [1.60403448E12, 18474.0], [1.60403622E12, 18984.0], [1.6040358E12, 28971.0], [1.6040355E12, 17561.0], [1.60403568E12, 25744.0], [1.60403538E12, 19164.0], [1.60403508E12, 28989.0], [1.60403478E12, 25009.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60403592E12, 28375.0], [1.60403562E12, 24365.0], [1.60403532E12, 25361.0], [1.60403502E12, 29318.0], [1.6040352E12, 23100.0], [1.6040349E12, 29368.5], [1.6040346E12, 41061.5], [1.6040361E12, 26383.0], [1.60403544E12, 19765.0], [1.60403514E12, 26994.0], [1.60403484E12, 29572.0], [1.60403454E12, 19849.0], [1.60403616E12, 23764.0], [1.60403472E12, 25433.0], [1.60403442E12, 9749.0], [1.60403628E12, 28532.5], [1.60403604E12, 29566.5], [1.60403574E12, 29057.0], [1.60403496E12, 29125.0], [1.60403466E12, 28220.0], [1.60403634E12, 17676.0], [1.60403598E12, 29418.5], [1.60403586E12, 29015.0], [1.60403556E12, 24623.0], [1.60403526E12, 19916.5], [1.60403448E12, 25481.0], [1.60403622E12, 21874.0], [1.6040358E12, 29273.0], [1.6040355E12, 23876.0], [1.60403568E12, 31503.5], [1.60403538E12, 23720.5], [1.60403508E12, 29318.0], [1.60403478E12, 29142.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403634E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27159.0, "minX": 1.0, "maxY": 27159.0, "series": [{"data": [[1.0, 27159.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27158.0, "minX": 1.0, "maxY": 27158.0, "series": [{"data": [[1.0, 27158.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60403442E12, "maxY": 0.55, "series": [{"data": [[1.60403592E12, 0.35], [1.60403562E12, 0.31666666666666665], [1.60403532E12, 0.43333333333333335], [1.60403502E12, 0.3333333333333333], [1.6040352E12, 0.48333333333333334], [1.6040349E12, 0.3333333333333333], [1.6040346E12, 0.23333333333333334], [1.6040361E12, 0.38333333333333336], [1.60403544E12, 0.55], [1.60403514E12, 0.36666666666666664], [1.60403484E12, 0.35], [1.60403454E12, 0.48333333333333334], [1.60403616E12, 0.4166666666666667], [1.60403472E12, 0.38333333333333336], [1.60403442E12, 0.26666666666666666], [1.60403628E12, 0.3], [1.60403604E12, 0.3333333333333333], [1.60403574E12, 0.35], [1.60403496E12, 0.35], [1.60403466E12, 0.38333333333333336], [1.60403634E12, 0.3], [1.60403598E12, 0.3333333333333333], [1.60403586E12, 0.35], [1.60403556E12, 0.38333333333333336], [1.60403526E12, 0.43333333333333335], [1.60403448E12, 0.4166666666666667], [1.60403622E12, 0.48333333333333334], [1.6040358E12, 0.35], [1.6040355E12, 0.38333333333333336], [1.60403568E12, 0.3333333333333333], [1.60403538E12, 0.4], [1.60403508E12, 0.35], [1.60403478E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403634E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60403442E12, "maxY": 0.55, "series": [{"data": [[1.60403592E12, 0.35], [1.60403562E12, 0.31666666666666665], [1.60403532E12, 0.43333333333333335], [1.60403502E12, 0.3333333333333333], [1.6040352E12, 0.48333333333333334], [1.6040349E12, 0.3333333333333333], [1.6040346E12, 0.23333333333333334], [1.6040361E12, 0.38333333333333336], [1.60403544E12, 0.55], [1.60403514E12, 0.36666666666666664], [1.60403484E12, 0.35], [1.60403454E12, 0.48333333333333334], [1.60403616E12, 0.4166666666666667], [1.60403472E12, 0.38333333333333336], [1.60403442E12, 0.1], [1.60403628E12, 0.3], [1.60403604E12, 0.3333333333333333], [1.60403574E12, 0.35], [1.60403496E12, 0.35], [1.60403466E12, 0.38333333333333336], [1.60403634E12, 0.4666666666666667], [1.60403598E12, 0.3333333333333333], [1.60403586E12, 0.35], [1.60403556E12, 0.38333333333333336], [1.60403526E12, 0.43333333333333335], [1.60403448E12, 0.4166666666666667], [1.60403622E12, 0.48333333333333334], [1.6040358E12, 0.35], [1.6040355E12, 0.38333333333333336], [1.60403568E12, 0.3333333333333333], [1.60403538E12, 0.4], [1.60403508E12, 0.35], [1.60403478E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60403634E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60403442E12, "maxY": 0.55, "series": [{"data": [[1.60403592E12, 0.35], [1.60403562E12, 0.31666666666666665], [1.60403532E12, 0.43333333333333335], [1.60403502E12, 0.3333333333333333], [1.6040352E12, 0.48333333333333334], [1.6040349E12, 0.3333333333333333], [1.6040346E12, 0.23333333333333334], [1.6040361E12, 0.38333333333333336], [1.60403544E12, 0.55], [1.60403514E12, 0.36666666666666664], [1.60403484E12, 0.35], [1.60403454E12, 0.48333333333333334], [1.60403616E12, 0.4166666666666667], [1.60403472E12, 0.38333333333333336], [1.60403442E12, 0.1], [1.60403628E12, 0.3], [1.60403604E12, 0.3333333333333333], [1.60403574E12, 0.35], [1.60403496E12, 0.35], [1.60403466E12, 0.38333333333333336], [1.60403634E12, 0.4666666666666667], [1.60403598E12, 0.3333333333333333], [1.60403586E12, 0.35], [1.60403556E12, 0.38333333333333336], [1.60403526E12, 0.43333333333333335], [1.60403448E12, 0.4166666666666667], [1.60403622E12, 0.48333333333333334], [1.6040358E12, 0.35], [1.6040355E12, 0.38333333333333336], [1.60403568E12, 0.3333333333333333], [1.60403538E12, 0.4], [1.60403508E12, 0.35], [1.60403478E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60403634E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60403442E12, "maxY": 0.55, "series": [{"data": [[1.60403592E12, 0.35], [1.60403562E12, 0.31666666666666665], [1.60403532E12, 0.43333333333333335], [1.60403502E12, 0.3333333333333333], [1.6040352E12, 0.48333333333333334], [1.6040349E12, 0.3333333333333333], [1.6040346E12, 0.23333333333333334], [1.6040361E12, 0.38333333333333336], [1.60403544E12, 0.55], [1.60403514E12, 0.36666666666666664], [1.60403484E12, 0.35], [1.60403454E12, 0.48333333333333334], [1.60403616E12, 0.4166666666666667], [1.60403472E12, 0.38333333333333336], [1.60403442E12, 0.1], [1.60403628E12, 0.3], [1.60403604E12, 0.3333333333333333], [1.60403574E12, 0.35], [1.60403496E12, 0.35], [1.60403466E12, 0.38333333333333336], [1.60403634E12, 0.4666666666666667], [1.60403598E12, 0.3333333333333333], [1.60403586E12, 0.35], [1.60403556E12, 0.38333333333333336], [1.60403526E12, 0.43333333333333335], [1.60403448E12, 0.4166666666666667], [1.60403622E12, 0.48333333333333334], [1.6040358E12, 0.35], [1.6040355E12, 0.38333333333333336], [1.60403568E12, 0.3333333333333333], [1.60403538E12, 0.4], [1.60403508E12, 0.35], [1.60403478E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60403634E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

