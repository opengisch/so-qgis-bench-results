/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2517.0, "minX": 0.0, "maxY": 44560.0, "series": [{"data": [[0.0, 2517.0], [0.1, 2517.0], [0.2, 5535.0], [0.3, 8465.0], [0.4, 8465.0], [0.5, 11281.0], [0.6, 14035.0], [0.7, 16541.0], [0.8, 16541.0], [0.9, 16691.0], [1.0, 16752.0], [1.1, 16816.0], [1.2, 16816.0], [1.3, 16871.0], [1.4, 16958.0], [1.5, 16978.0], [1.6, 16978.0], [1.7, 17100.0], [1.8, 17196.0], [1.9, 17196.0], [2.0, 17216.0], [2.1, 17224.0], [2.2, 17249.0], [2.3, 17249.0], [2.4, 17260.0], [2.5, 17272.0], [2.6, 17280.0], [2.7, 17280.0], [2.8, 17288.0], [2.9, 17307.0], [3.0, 17324.0], [3.1, 17324.0], [3.2, 17326.0], [3.3, 17327.0], [3.4, 17327.0], [3.5, 17360.0], [3.6, 17391.0], [3.7, 17400.0], [3.8, 17400.0], [3.9, 17409.0], [4.0, 17414.0], [4.1, 17428.0], [4.2, 17428.0], [4.3, 17445.0], [4.4, 17447.0], [4.5, 17466.0], [4.6, 17466.0], [4.7, 17500.0], [4.8, 17507.0], [4.9, 17507.0], [5.0, 17507.0], [5.1, 17516.0], [5.2, 17517.0], [5.3, 17517.0], [5.4, 17522.0], [5.5, 17529.0], [5.6, 17550.0], [5.7, 17550.0], [5.8, 17550.0], [5.9, 17562.0], [6.0, 17565.0], [6.1, 17565.0], [6.2, 17571.0], [6.3, 17579.0], [6.4, 17640.0], [6.5, 17640.0], [6.6, 17673.0], [6.7, 17679.0], [6.8, 17679.0], [6.9, 17686.0], [7.0, 17687.0], [7.1, 17740.0], [7.2, 17740.0], [7.3, 17781.0], [7.4, 17792.0], [7.5, 17849.0], [7.6, 17849.0], [7.7, 17858.0], [7.8, 17900.0], [7.9, 17935.0], [8.0, 17935.0], [8.1, 17937.0], [8.2, 17955.0], [8.3, 18077.0], [8.4, 18077.0], [8.5, 18141.0], [8.6, 18175.0], [8.7, 18175.0], [8.8, 18317.0], [8.9, 18436.0], [9.0, 18517.0], [9.1, 18517.0], [9.2, 18528.0], [9.3, 18533.0], [9.4, 18556.0], [9.5, 18556.0], [9.6, 18591.0], [9.7, 18644.0], [9.8, 18659.0], [9.9, 18659.0], [10.0, 18707.0], [10.1, 18846.0], [10.2, 18846.0], [10.3, 18880.0], [10.4, 18947.0], [10.5, 18991.0], [10.6, 18991.0], [10.7, 19058.0], [10.8, 19113.0], [10.9, 19114.0], [11.0, 19114.0], [11.1, 19169.0], [11.2, 19223.0], [11.3, 19225.0], [11.4, 19225.0], [11.5, 19308.0], [11.6, 19437.0], [11.7, 19437.0], [11.8, 19470.0], [11.9, 19533.0], [12.0, 19545.0], [12.1, 19545.0], [12.2, 19547.0], [12.3, 19577.0], [12.4, 19596.0], [12.5, 19596.0], [12.6, 19628.0], [12.7, 19643.0], [12.8, 19721.0], [12.9, 19721.0], [13.0, 19748.0], [13.1, 19752.0], [13.2, 19788.0], [13.3, 19788.0], [13.4, 19796.0], [13.5, 19815.0], [13.6, 19815.0], [13.7, 19819.0], [13.8, 19835.0], [13.9, 19923.0], [14.0, 19923.0], [14.1, 19934.0], [14.2, 19958.0], [14.3, 20119.0], [14.4, 20119.0], [14.5, 20139.0], [14.6, 20142.0], [14.7, 20216.0], [14.8, 20216.0], [14.9, 20245.0], [15.0, 20317.0], [15.1, 20317.0], [15.2, 20336.0], [15.3, 20409.0], [15.4, 20419.0], [15.5, 20419.0], [15.6, 20544.0], [15.7, 20652.0], [15.8, 20745.0], [15.9, 20745.0], [16.0, 20757.0], [16.1, 20786.0], [16.2, 20788.0], [16.3, 20788.0], [16.4, 20821.0], [16.5, 20856.0], [16.6, 20904.0], [16.7, 20904.0], [16.8, 20906.0], [16.9, 20933.0], [17.0, 20933.0], [17.1, 20962.0], [17.2, 21101.0], [17.3, 21158.0], [17.4, 21158.0], [17.5, 21190.0], [17.6, 21217.0], [17.7, 21217.0], [17.8, 21217.0], [17.9, 21451.0], [18.0, 21490.0], [18.1, 21518.0], [18.2, 21518.0], [18.3, 21591.0], [18.4, 21665.0], [18.5, 21665.0], [18.6, 21685.0], [18.7, 21711.0], [18.8, 21766.0], [18.9, 21766.0], [19.0, 21780.0], [19.1, 21795.0], [19.2, 21851.0], [19.3, 21851.0], [19.4, 21871.0], [19.5, 21871.0], [19.6, 21896.0], [19.7, 21896.0], [19.8, 21922.0], [19.9, 21922.0], [20.0, 21962.0], [20.1, 21962.0], [20.2, 21963.0], [20.3, 21980.0], [20.4, 21980.0], [20.5, 22023.0], [20.6, 22077.0], [20.7, 22138.0], [20.8, 22138.0], [20.9, 22153.0], [21.0, 22197.0], [21.1, 22227.0], [21.2, 22227.0], [21.3, 22253.0], [21.4, 22257.0], [21.5, 22259.0], [21.6, 22259.0], [21.7, 22273.0], [21.8, 22283.0], [21.9, 22283.0], [22.0, 22300.0], [22.1, 22303.0], [22.2, 22326.0], [22.3, 22326.0], [22.4, 22367.0], [22.5, 22376.0], [22.6, 22390.0], [22.7, 22390.0], [22.8, 22390.0], [22.9, 22431.0], [23.0, 22476.0], [23.1, 22476.0], [23.2, 22476.0], [23.3, 22500.0], [23.4, 22500.0], [23.5, 22509.0], [23.6, 22540.0], [23.7, 22703.0], [23.8, 22703.0], [23.9, 22710.0], [24.0, 22781.0], [24.1, 22903.0], [24.2, 22903.0], [24.3, 22972.0], [24.4, 23016.0], [24.5, 23041.0], [24.6, 23041.0], [24.7, 23116.0], [24.8, 23145.0], [24.9, 23147.0], [25.0, 23147.0], [25.1, 23150.0], [25.2, 23157.0], [25.3, 23157.0], [25.4, 23161.0], [25.5, 23272.0], [25.6, 23272.0], [25.7, 23272.0], [25.8, 23273.0], [25.9, 23281.0], [26.0, 23289.0], [26.1, 23289.0], [26.2, 23313.0], [26.3, 23327.0], [26.4, 23339.0], [26.5, 23339.0], [26.6, 23342.0], [26.7, 23359.0], [26.8, 23359.0], [26.9, 23378.0], [27.0, 23382.0], [27.1, 23389.0], [27.2, 23389.0], [27.3, 23401.0], [27.4, 23406.0], [27.5, 23408.0], [27.6, 23408.0], [27.7, 23420.0], [27.8, 23422.0], [27.9, 23436.0], [28.0, 23436.0], [28.1, 23450.0], [28.2, 23481.0], [28.3, 23492.0], [28.4, 23492.0], [28.5, 23494.0], [28.6, 23505.0], [28.7, 23505.0], [28.8, 23534.0], [28.9, 23625.0], [29.0, 23631.0], [29.1, 23631.0], [29.2, 23668.0], [29.3, 23697.0], [29.4, 23704.0], [29.5, 23704.0], [29.6, 23709.0], [29.7, 23710.0], [29.8, 23755.0], [29.9, 23755.0], [30.0, 23755.0], [30.1, 23772.0], [30.2, 23772.0], [30.3, 23850.0], [30.4, 23888.0], [30.5, 23890.0], [30.6, 23890.0], [30.7, 23911.0], [30.8, 23924.0], [30.9, 23945.0], [31.0, 23945.0], [31.1, 23946.0], [31.2, 23946.0], [31.3, 23983.0], [31.4, 23983.0], [31.5, 23984.0], [31.6, 23989.0], [31.7, 23989.0], [31.8, 23994.0], [31.9, 24000.0], [32.0, 24084.0], [32.1, 24084.0], [32.2, 24111.0], [32.3, 24113.0], [32.4, 24153.0], [32.5, 24153.0], [32.6, 24158.0], [32.7, 24167.0], [32.8, 24171.0], [32.9, 24171.0], [33.0, 24209.0], [33.1, 24227.0], [33.2, 24251.0], [33.3, 24251.0], [33.4, 24256.0], [33.5, 24260.0], [33.6, 24260.0], [33.7, 24263.0], [33.8, 24269.0], [33.9, 24307.0], [34.0, 24307.0], [34.1, 24310.0], [34.2, 24313.0], [34.3, 24343.0], [34.4, 24343.0], [34.5, 24348.0], [34.6, 24438.0], [34.7, 24449.0], [34.8, 24449.0], [34.9, 24472.0], [35.0, 24479.0], [35.1, 24479.0], [35.2, 24508.0], [35.3, 24593.0], [35.4, 24616.0], [35.5, 24616.0], [35.6, 24643.0], [35.7, 24658.0], [35.8, 24664.0], [35.9, 24664.0], [36.0, 24670.0], [36.1, 24686.0], [36.2, 24690.0], [36.3, 24690.0], [36.4, 24692.0], [36.5, 24714.0], [36.6, 24757.0], [36.7, 24757.0], [36.8, 24780.0], [36.9, 24787.0], [37.0, 24787.0], [37.1, 24794.0], [37.2, 24815.0], [37.3, 24817.0], [37.4, 24817.0], [37.5, 24829.0], [37.6, 24848.0], [37.7, 24852.0], [37.8, 24852.0], [37.9, 24872.0], [38.0, 24882.0], [38.1, 24888.0], [38.2, 24888.0], [38.3, 24893.0], [38.4, 24919.0], [38.5, 24919.0], [38.6, 24922.0], [38.7, 24960.0], [38.8, 25019.0], [38.9, 25019.0], [39.0, 25028.0], [39.1, 25096.0], [39.2, 25096.0], [39.3, 25096.0], [39.4, 25111.0], [39.5, 25112.0], [39.6, 25160.0], [39.7, 25160.0], [39.8, 25182.0], [39.9, 25350.0], [40.0, 25372.0], [40.1, 25372.0], [40.2, 25427.0], [40.3, 25429.0], [40.4, 25429.0], [40.5, 25439.0], [40.6, 25458.0], [40.7, 25462.0], [40.8, 25462.0], [40.9, 25493.0], [41.0, 25502.0], [41.1, 25566.0], [41.2, 25566.0], [41.3, 25567.0], [41.4, 25579.0], [41.5, 25580.0], [41.6, 25580.0], [41.7, 25662.0], [41.8, 25673.0], [41.9, 25673.0], [42.0, 25711.0], [42.1, 25717.0], [42.2, 25728.0], [42.3, 25728.0], [42.4, 25798.0], [42.5, 25799.0], [42.6, 25804.0], [42.7, 25804.0], [42.8, 25804.0], [42.9, 25807.0], [43.0, 25859.0], [43.1, 25859.0], [43.2, 25859.0], [43.3, 25879.0], [43.4, 25879.0], [43.5, 25920.0], [43.6, 25931.0], [43.7, 25968.0], [43.8, 25968.0], [43.9, 25991.0], [44.0, 25999.0], [44.1, 26012.0], [44.2, 26012.0], [44.3, 26018.0], [44.4, 26054.0], [44.5, 26079.0], [44.6, 26079.0], [44.7, 26091.0], [44.8, 26094.0], [44.9, 26142.0], [45.0, 26142.0], [45.1, 26158.0], [45.2, 26189.0], [45.3, 26189.0], [45.4, 26274.0], [45.5, 26289.0], [45.6, 26294.0], [45.7, 26294.0], [45.8, 26300.0], [45.9, 26302.0], [46.0, 26305.0], [46.1, 26305.0], [46.2, 26401.0], [46.3, 26422.0], [46.4, 26424.0], [46.5, 26424.0], [46.6, 26435.0], [46.7, 26441.0], [46.8, 26441.0], [46.9, 26449.0], [47.0, 26456.0], [47.1, 26507.0], [47.2, 26507.0], [47.3, 26508.0], [47.4, 26545.0], [47.5, 26560.0], [47.6, 26560.0], [47.7, 26578.0], [47.8, 26593.0], [47.9, 26608.0], [48.0, 26608.0], [48.1, 26610.0], [48.2, 26627.0], [48.3, 26662.0], [48.4, 26662.0], [48.5, 26691.0], [48.6, 26778.0], [48.7, 26778.0], [48.8, 26804.0], [48.9, 26862.0], [49.0, 26868.0], [49.1, 26868.0], [49.2, 26902.0], [49.3, 26902.0], [49.4, 26908.0], [49.5, 26908.0], [49.6, 26911.0], [49.7, 26976.0], [49.8, 26987.0], [49.9, 26987.0], [50.0, 26991.0], [50.1, 27010.0], [50.2, 27010.0], [50.3, 27081.0], [50.4, 27102.0], [50.5, 27119.0], [50.6, 27119.0], [50.7, 27122.0], [50.8, 27170.0], [50.9, 27176.0], [51.0, 27176.0], [51.1, 27257.0], [51.2, 27312.0], [51.3, 27327.0], [51.4, 27327.0], [51.5, 27363.0], [51.6, 27423.0], [51.7, 27423.0], [51.8, 27451.0], [51.9, 27491.0], [52.0, 27497.0], [52.1, 27497.0], [52.2, 27500.0], [52.3, 27532.0], [52.4, 27537.0], [52.5, 27537.0], [52.6, 27551.0], [52.7, 27579.0], [52.8, 27606.0], [52.9, 27606.0], [53.0, 27737.0], [53.1, 27753.0], [53.2, 27759.0], [53.3, 27759.0], [53.4, 27863.0], [53.5, 27870.0], [53.6, 27870.0], [53.7, 27890.0], [53.8, 27897.0], [53.9, 27941.0], [54.0, 27941.0], [54.1, 27956.0], [54.2, 27960.0], [54.3, 27973.0], [54.4, 27973.0], [54.5, 27989.0], [54.6, 27998.0], [54.7, 27999.0], [54.8, 27999.0], [54.9, 28002.0], [55.0, 28011.0], [55.1, 28011.0], [55.2, 28059.0], [55.3, 28061.0], [55.4, 28068.0], [55.5, 28068.0], [55.6, 28094.0], [55.7, 28094.0], [55.8, 28097.0], [55.9, 28097.0], [56.0, 28115.0], [56.1, 28133.0], [56.2, 28134.0], [56.3, 28134.0], [56.4, 28146.0], [56.5, 28164.0], [56.6, 28194.0], [56.7, 28194.0], [56.8, 28196.0], [56.9, 28209.0], [57.0, 28209.0], [57.1, 28220.0], [57.2, 28279.0], [57.3, 28306.0], [57.4, 28306.0], [57.5, 28307.0], [57.6, 28318.0], [57.7, 28350.0], [57.8, 28350.0], [57.9, 28416.0], [58.0, 28436.0], [58.1, 28440.0], [58.2, 28440.0], [58.3, 28440.0], [58.4, 28441.0], [58.5, 28441.0], [58.6, 28463.0], [58.7, 28475.0], [58.8, 28506.0], [58.9, 28506.0], [59.0, 28509.0], [59.1, 28530.0], [59.2, 28543.0], [59.3, 28543.0], [59.4, 28545.0], [59.5, 28555.0], [59.6, 28567.0], [59.7, 28567.0], [59.8, 28592.0], [59.9, 28594.0], [60.0, 28611.0], [60.1, 28611.0], [60.2, 28617.0], [60.3, 28623.0], [60.4, 28623.0], [60.5, 28623.0], [60.6, 28630.0], [60.7, 28637.0], [60.8, 28637.0], [60.9, 28641.0], [61.0, 28660.0], [61.1, 28660.0], [61.2, 28660.0], [61.3, 28702.0], [61.4, 28704.0], [61.5, 28708.0], [61.6, 28708.0], [61.7, 28718.0], [61.8, 28734.0], [61.9, 28734.0], [62.0, 28739.0], [62.1, 28748.0], [62.2, 28755.0], [62.3, 28755.0], [62.4, 28761.0], [62.5, 28764.0], [62.6, 28772.0], [62.7, 28772.0], [62.8, 28776.0], [62.9, 28786.0], [63.0, 28791.0], [63.1, 28791.0], [63.2, 28792.0], [63.3, 28807.0], [63.4, 28807.0], [63.5, 28807.0], [63.6, 28811.0], [63.7, 28844.0], [63.8, 28844.0], [63.9, 28847.0], [64.0, 28847.0], [64.1, 28855.0], [64.2, 28855.0], [64.3, 28863.0], [64.4, 28864.0], [64.5, 28868.0], [64.6, 28868.0], [64.7, 28878.0], [64.8, 28888.0], [64.9, 28889.0], [65.0, 28889.0], [65.1, 28892.0], [65.2, 28893.0], [65.3, 28893.0], [65.4, 28908.0], [65.5, 28930.0], [65.6, 28934.0], [65.7, 28934.0], [65.8, 28938.0], [65.9, 28940.0], [66.0, 28949.0], [66.1, 28949.0], [66.2, 28953.0], [66.3, 28963.0], [66.4, 28977.0], [66.5, 28977.0], [66.6, 28978.0], [66.7, 28987.0], [66.8, 28987.0], [66.9, 28989.0], [67.0, 28991.0], [67.1, 28994.0], [67.2, 28994.0], [67.3, 28997.0], [67.4, 28998.0], [67.5, 29004.0], [67.6, 29004.0], [67.7, 29009.0], [67.8, 29009.0], [67.9, 29012.0], [68.0, 29012.0], [68.1, 29026.0], [68.2, 29026.0], [68.3, 29027.0], [68.4, 29027.0], [68.5, 29033.0], [68.6, 29051.0], [68.7, 29051.0], [68.8, 29056.0], [68.9, 29056.0], [69.0, 29057.0], [69.1, 29057.0], [69.2, 29062.0], [69.3, 29066.0], [69.4, 29073.0], [69.5, 29073.0], [69.6, 29077.0], [69.7, 29088.0], [69.8, 29091.0], [69.9, 29091.0], [70.0, 29092.0], [70.1, 29093.0], [70.2, 29093.0], [70.3, 29095.0], [70.4, 29096.0], [70.5, 29102.0], [70.6, 29102.0], [70.7, 29102.0], [70.8, 29105.0], [70.9, 29106.0], [71.0, 29106.0], [71.1, 29107.0], [71.2, 29108.0], [71.3, 29112.0], [71.4, 29112.0], [71.5, 29120.0], [71.6, 29132.0], [71.7, 29132.0], [71.8, 29135.0], [71.9, 29154.0], [72.0, 29155.0], [72.1, 29155.0], [72.2, 29160.0], [72.3, 29160.0], [72.4, 29164.0], [72.5, 29164.0], [72.6, 29166.0], [72.7, 29166.0], [72.8, 29169.0], [72.9, 29169.0], [73.0, 29175.0], [73.1, 29190.0], [73.2, 29199.0], [73.3, 29199.0], [73.4, 29201.0], [73.5, 29209.0], [73.6, 29209.0], [73.7, 29212.0], [73.8, 29214.0], [73.9, 29215.0], [74.0, 29215.0], [74.1, 29217.0], [74.2, 29217.0], [74.3, 29223.0], [74.4, 29223.0], [74.5, 29223.0], [74.6, 29244.0], [74.7, 29252.0], [74.8, 29252.0], [74.9, 29253.0], [75.0, 29253.0], [75.1, 29253.0], [75.2, 29254.0], [75.3, 29255.0], [75.4, 29255.0], [75.5, 29255.0], [75.6, 29255.0], [75.7, 29258.0], [75.8, 29261.0], [75.9, 29261.0], [76.0, 29262.0], [76.1, 29265.0], [76.2, 29271.0], [76.3, 29271.0], [76.4, 29274.0], [76.5, 29279.0], [76.6, 29281.0], [76.7, 29281.0], [76.8, 29284.0], [76.9, 29285.0], [77.0, 29285.0], [77.1, 29285.0], [77.2, 29286.0], [77.3, 29286.0], [77.4, 29286.0], [77.5, 29289.0], [77.6, 29289.0], [77.7, 29290.0], [77.8, 29290.0], [77.9, 29291.0], [78.0, 29291.0], [78.1, 29295.0], [78.2, 29295.0], [78.3, 29295.0], [78.4, 29296.0], [78.5, 29296.0], [78.6, 29300.0], [78.7, 29304.0], [78.8, 29313.0], [78.9, 29313.0], [79.0, 29315.0], [79.1, 29319.0], [79.2, 29319.0], [79.3, 29319.0], [79.4, 29321.0], [79.5, 29323.0], [79.6, 29324.0], [79.7, 29324.0], [79.8, 29325.0], [79.9, 29326.0], [80.0, 29333.0], [80.1, 29333.0], [80.2, 29340.0], [80.3, 29341.0], [80.4, 29341.0], [80.5, 29346.0], [80.6, 29354.0], [80.7, 29357.0], [80.8, 29357.0], [80.9, 29359.0], [81.0, 29362.0], [81.1, 29371.0], [81.2, 29371.0], [81.3, 29371.0], [81.4, 29371.0], [81.5, 29384.0], [81.6, 29384.0], [81.7, 29385.0], [81.8, 29402.0], [81.9, 29402.0], [82.0, 29402.0], [82.1, 29404.0], [82.2, 29404.0], [82.3, 29404.0], [82.4, 29423.0], [82.5, 29427.0], [82.6, 29433.0], [82.7, 29433.0], [82.8, 29434.0], [82.9, 29435.0], [83.0, 29436.0], [83.1, 29436.0], [83.2, 29437.0], [83.3, 29440.0], [83.4, 29440.0], [83.5, 29440.0], [83.6, 29441.0], [83.7, 29447.0], [83.8, 29447.0], [83.9, 29447.0], [84.0, 29457.0], [84.1, 29462.0], [84.2, 29462.0], [84.3, 29466.0], [84.4, 29472.0], [84.5, 29472.0], [84.6, 29472.0], [84.7, 29486.0], [84.8, 29488.0], [84.9, 29489.0], [85.0, 29489.0], [85.1, 29492.0], [85.2, 29503.0], [85.3, 29503.0], [85.4, 29518.0], [85.5, 29521.0], [85.6, 29525.0], [85.7, 29525.0], [85.8, 29531.0], [85.9, 29536.0], [86.0, 29539.0], [86.1, 29539.0], [86.2, 29539.0], [86.3, 29540.0], [86.4, 29549.0], [86.5, 29549.0], [86.6, 29563.0], [86.7, 29569.0], [86.8, 29569.0], [86.9, 29570.0], [87.0, 29580.0], [87.1, 29580.0], [87.2, 29580.0], [87.3, 29585.0], [87.4, 29593.0], [87.5, 29604.0], [87.6, 29604.0], [87.7, 29610.0], [87.8, 29616.0], [87.9, 29635.0], [88.0, 29635.0], [88.1, 29637.0], [88.2, 29648.0], [88.3, 29655.0], [88.4, 29655.0], [88.5, 29668.0], [88.6, 29671.0], [88.7, 29671.0], [88.8, 29674.0], [88.9, 29681.0], [89.0, 29682.0], [89.1, 29682.0], [89.2, 29685.0], [89.3, 29689.0], [89.4, 29701.0], [89.5, 29701.0], [89.6, 29737.0], [89.7, 29739.0], [89.8, 29741.0], [89.9, 29741.0], [90.0, 29746.0], [90.1, 29749.0], [90.2, 29749.0], [90.3, 29750.0], [90.4, 29752.0], [90.5, 29758.0], [90.6, 29758.0], [90.7, 29761.0], [90.8, 29765.0], [90.9, 29770.0], [91.0, 29770.0], [91.1, 29775.0], [91.2, 29784.0], [91.3, 29792.0], [91.4, 29792.0], [91.5, 29795.0], [91.6, 29859.0], [91.7, 29859.0], [91.8, 29859.0], [91.9, 29859.0], [92.0, 29861.0], [92.1, 29861.0], [92.2, 29974.0], [92.3, 30010.0], [92.4, 30035.0], [92.5, 30035.0], [92.6, 30151.0], [92.7, 30161.0], [92.8, 30164.0], [92.9, 30164.0], [93.0, 30167.0], [93.1, 30197.0], [93.2, 30754.0], [93.3, 30754.0], [93.4, 30756.0], [93.5, 30841.0], [93.6, 30841.0], [93.7, 31075.0], [93.8, 31122.0], [93.9, 31445.0], [94.0, 31445.0], [94.1, 31457.0], [94.2, 31481.0], [94.3, 31488.0], [94.4, 31488.0], [94.5, 31536.0], [94.6, 31579.0], [94.7, 31777.0], [94.8, 31777.0], [94.9, 31827.0], [95.0, 31855.0], [95.1, 31855.0], [95.2, 31943.0], [95.3, 31991.0], [95.4, 32635.0], [95.5, 32635.0], [95.6, 32708.0], [95.7, 32939.0], [95.8, 33207.0], [95.9, 33207.0], [96.0, 33365.0], [96.1, 33629.0], [96.2, 33662.0], [96.3, 33662.0], [96.4, 33945.0], [96.5, 34564.0], [96.6, 34653.0], [96.7, 34653.0], [96.8, 35108.0], [96.9, 35726.0], [97.0, 35726.0], [97.1, 36076.0], [97.2, 36475.0], [97.3, 36664.0], [97.4, 36664.0], [97.5, 37050.0], [97.6, 37739.0], [97.7, 38170.0], [97.8, 38170.0], [97.9, 38221.0], [98.0, 39222.0], [98.1, 39351.0], [98.2, 39351.0], [98.3, 40859.0], [98.4, 41265.0], [98.5, 41265.0], [98.6, 41609.0], [98.7, 41744.0], [98.8, 42068.0], [98.9, 42068.0], [99.0, 42886.0], [99.1, 42896.0], [99.2, 43318.0], [99.3, 43318.0], [99.4, 43608.0], [99.5, 43807.0], [99.6, 43812.0], [99.7, 43812.0], [99.8, 44053.0], [99.9, 44560.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2500.0, "maxY": 38.0, "series": [{"data": [[34500.0, 1.0], [32900.0, 1.0], [33300.0, 1.0], [33900.0, 1.0], [35700.0, 1.0], [35100.0, 1.0], [37700.0, 1.0], [38100.0, 1.0], [39300.0, 1.0], [41700.0, 1.0], [43300.0, 1.0], [44500.0, 1.0], [2500.0, 1.0], [5500.0, 1.0], [8400.0, 1.0], [11200.0, 1.0], [14000.0, 1.0], [17200.0, 7.0], [16500.0, 1.0], [17400.0, 7.0], [17300.0, 6.0], [17100.0, 2.0], [16900.0, 2.0], [16600.0, 1.0], [16700.0, 1.0], [16800.0, 2.0], [17500.0, 13.0], [18300.0, 1.0], [17800.0, 2.0], [17700.0, 3.0], [17900.0, 4.0], [18100.0, 2.0], [17600.0, 5.0], [18400.0, 1.0], [18000.0, 1.0], [18600.0, 2.0], [19200.0, 2.0], [19300.0, 1.0], [18800.0, 2.0], [19000.0, 1.0], [18500.0, 5.0], [18700.0, 1.0], [18900.0, 2.0], [19400.0, 2.0], [19100.0, 3.0], [19700.0, 5.0], [20200.0, 2.0], [19900.0, 3.0], [19800.0, 3.0], [19600.0, 2.0], [19500.0, 5.0], [20400.0, 2.0], [20100.0, 3.0], [20300.0, 2.0], [20700.0, 4.0], [21100.0, 3.0], [20900.0, 4.0], [20800.0, 2.0], [21200.0, 2.0], [21400.0, 2.0], [20500.0, 1.0], [21500.0, 2.0], [20600.0, 1.0], [22400.0, 3.0], [21600.0, 2.0], [21900.0, 5.0], [22100.0, 3.0], [22200.0, 6.0], [22300.0, 7.0], [21700.0, 4.0], [21800.0, 4.0], [22000.0, 2.0], [22500.0, 3.0], [23300.0, 8.0], [23400.0, 10.0], [23100.0, 6.0], [23200.0, 5.0], [23500.0, 2.0], [23000.0, 2.0], [22700.0, 3.0], [22900.0, 2.0], [24400.0, 4.0], [23700.0, 6.0], [23900.0, 9.0], [23800.0, 3.0], [24100.0, 6.0], [24500.0, 2.0], [24000.0, 2.0], [23600.0, 4.0], [24200.0, 7.0], [24300.0, 5.0], [25400.0, 6.0], [25500.0, 5.0], [25000.0, 4.0], [24800.0, 9.0], [24600.0, 8.0], [24900.0, 3.0], [24700.0, 5.0], [25300.0, 2.0], [25100.0, 4.0], [25700.0, 5.0], [26500.0, 6.0], [26000.0, 6.0], [26200.0, 3.0], [26400.0, 7.0], [25800.0, 6.0], [25900.0, 5.0], [26600.0, 5.0], [26300.0, 3.0], [26100.0, 3.0], [25600.0, 2.0], [27500.0, 5.0], [27100.0, 5.0], [27600.0, 1.0], [26900.0, 7.0], [27400.0, 4.0], [27200.0, 1.0], [27000.0, 2.0], [26800.0, 3.0], [26700.0, 1.0], [27300.0, 3.0], [27900.0, 7.0], [28500.0, 9.0], [28100.0, 7.0], [28600.0, 9.0], [28400.0, 7.0], [28300.0, 4.0], [28200.0, 3.0], [27700.0, 3.0], [27800.0, 4.0], [28000.0, 8.0], [29500.0, 17.0], [29200.0, 38.0], [29600.0, 14.0], [29000.0, 22.0], [28800.0, 15.0], [29400.0, 25.0], [28700.0, 15.0], [28900.0, 16.0], [29100.0, 21.0], [29300.0, 24.0], [30700.0, 2.0], [30100.0, 5.0], [29700.0, 16.0], [30000.0, 2.0], [29900.0, 1.0], [29800.0, 4.0], [31000.0, 1.0], [31100.0, 1.0], [31500.0, 2.0], [31400.0, 4.0], [31700.0, 1.0], [30800.0, 1.0], [32600.0, 1.0], [31800.0, 2.0], [31900.0, 2.0], [32700.0, 1.0], [33600.0, 2.0], [34600.0, 1.0], [33200.0, 1.0], [36400.0, 1.0], [36000.0, 1.0], [36600.0, 1.0], [38200.0, 1.0], [37000.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [41200.0, 1.0], [42800.0, 2.0], [41600.0, 1.0], [42000.0, 1.0], [43600.0, 1.0], [44000.0, 1.0], [43800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.60407654E12, "maxY": 10.0, "series": [{"data": [[1.60407696E12, 10.0], [1.60407666E12, 10.0], [1.60407798E12, 10.0], [1.60407768E12, 10.0], [1.60407738E12, 10.0], [1.60407828E12, 10.0], [1.60407708E12, 10.0], [1.60407678E12, 10.0], [1.60407744E12, 10.0], [1.60407714E12, 10.0], [1.60407684E12, 10.0], [1.60407654E12, 10.0], [1.60407816E12, 10.0], [1.60407846E12, 8.333333333333334], [1.60407786E12, 10.0], [1.60407756E12, 10.0], [1.60407726E12, 10.0], [1.60407792E12, 10.0], [1.60407762E12, 10.0], [1.60407804E12, 10.0], [1.60407732E12, 10.0], [1.60407834E12, 10.0], [1.60407702E12, 10.0], [1.60407672E12, 10.0], [1.60407774E12, 10.0], [1.60407822E12, 10.0], [1.6040778E12, 10.0], [1.6040775E12, 10.0], [1.6040772E12, 10.0], [1.6040769E12, 10.0], [1.6040766E12, 10.0], [1.6040781E12, 10.0], [1.6040784E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60407846E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17409.0, "minX": 1.0, "maxY": 26169.553719008258, "series": [{"data": [[8.0, 17414.0], [4.0, 17679.0], [2.0, 17562.0], [1.0, 17935.0], [9.0, 17409.0], [10.0, 26169.553719008258], [5.0, 17740.0], [6.0, 17673.0], [3.0, 17687.0], [7.0, 17571.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26064.987755102036]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 43.9, "minX": 1.60407654E12, "maxY": 228105.33333333334, "series": [{"data": [[1.60407696E12, 45633.25], [1.60407666E12, 85541.88333333333], [1.60407798E12, 52524.7], [1.60407768E12, 74278.38333333333], [1.60407738E12, 167553.38333333333], [1.60407828E12, 29140.5], [1.60407708E12, 54119.98333333333], [1.60407678E12, 77301.9], [1.60407744E12, 70483.01666666666], [1.60407714E12, 43493.21666666667], [1.60407684E12, 44528.05], [1.60407654E12, 83613.38333333333], [1.60407816E12, 45724.28333333333], [1.60407846E12, 37835.05], [1.60407786E12, 50167.416666666664], [1.60407756E12, 59800.13333333333], [1.60407726E12, 33221.85], [1.60407792E12, 48848.683333333334], [1.60407762E12, 87089.66666666667], [1.60407804E12, 49333.6], [1.60407732E12, 53187.833333333336], [1.60407834E12, 143021.13333333333], [1.60407702E12, 49646.28333333333], [1.60407672E12, 110272.03333333334], [1.60407774E12, 37949.11666666667], [1.60407822E12, 33365.11666666667], [1.6040778E12, 42299.666666666664], [1.6040775E12, 228105.33333333334], [1.6040772E12, 44971.76666666667], [1.6040769E12, 51128.25], [1.6040766E12, 172371.78333333333], [1.6040781E12, 45952.066666666666], [1.6040784E12, 70954.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60407696E12, 153.41666666666666], [1.60407666E12, 208.78333333333333], [1.60407798E12, 161.33333333333334], [1.60407768E12, 175.33333333333334], [1.60407738E12, 179.8], [1.60407828E12, 182.5], [1.60407708E12, 153.68333333333334], [1.60407678E12, 168.03333333333333], [1.60407744E12, 188.68333333333334], [1.60407714E12, 146.06666666666666], [1.60407684E12, 169.26666666666668], [1.60407654E12, 43.9], [1.60407816E12, 153.28333333333333], [1.60407846E12, 184.21666666666667], [1.60407786E12, 146.15], [1.60407756E12, 230.8], [1.60407726E12, 167.95], [1.60407792E12, 146.13333333333333], [1.60407762E12, 164.51666666666668], [1.60407804E12, 153.78333333333333], [1.60407732E12, 209.66666666666666], [1.60407834E12, 195.75], [1.60407702E12, 146.13333333333333], [1.60407672E12, 112.51666666666667], [1.60407774E12, 132.76666666666668], [1.60407822E12, 175.03333333333333], [1.6040778E12, 153.38333333333333], [1.6040775E12, 175.18333333333334], [1.6040772E12, 153.3], [1.6040769E12, 146.15], [1.6040766E12, 183.8], [1.6040781E12, 146.11666666666667], [1.6040784E12, 131.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60407846E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9729.0, "minX": 1.60407654E12, "maxY": 36737.46666666667, "series": [{"data": [[1.60407696E12, 29148.904761904763], [1.60407666E12, 20095.241379310348], [1.60407798E12, 28481.13636363636], [1.60407768E12, 25272.375000000004], [1.60407738E12, 21049.84], [1.60407828E12, 23478.64], [1.60407708E12, 29187.809523809523], [1.60407678E12, 28247.565217391304], [1.60407744E12, 24738.85185185185], [1.60407714E12, 29168.95], [1.60407684E12, 25883.60869565217], [1.60407654E12, 9729.0], [1.60407816E12, 29062.619047619046], [1.60407846E12, 21521.96296296296], [1.60407786E12, 29245.699999999997], [1.60407756E12, 19648.939393939392], [1.60407726E12, 26890.695652173912], [1.60407792E12, 29501.0], [1.60407762E12, 24832.181818181823], [1.60407804E12, 28358.190476190477], [1.60407732E12, 21430.275862068967], [1.60407834E12, 22269.407407407405], [1.60407702E12, 29281.7], [1.60407672E12, 36737.46666666667], [1.60407774E12, 27708.44444444444], [1.60407822E12, 26220.291666666668], [1.6040778E12, 33443.0], [1.6040775E12, 23545.875000000004], [1.6040772E12, 29432.333333333336], [1.6040769E12, 28475.0], [1.6040766E12, 24707.2], [1.6040781E12, 29023.1], [1.6040784E12, 29621.94444444445]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60407846E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9723.0, "minX": 1.60407654E12, "maxY": 36733.799999999996, "series": [{"data": [[1.60407696E12, 29147.71428571429], [1.60407666E12, 20093.448275862072], [1.60407798E12, 28480.090909090908], [1.60407768E12, 25270.875000000007], [1.60407738E12, 21045.719999999998], [1.60407828E12, 23477.4], [1.60407708E12, 29186.714285714286], [1.60407678E12, 28245.913043478264], [1.60407744E12, 24736.55555555556], [1.60407714E12, 29167.800000000003], [1.60407684E12, 25882.782608695652], [1.60407654E12, 9723.0], [1.60407816E12, 29061.523809523806], [1.60407846E12, 21519.96296296296], [1.60407786E12, 29244.449999999997], [1.60407756E12, 19647.454545454544], [1.60407726E12, 26889.60869565217], [1.60407792E12, 29499.899999999998], [1.60407762E12, 24830.18181818182], [1.60407804E12, 28357.000000000004], [1.60407732E12, 21428.620689655178], [1.60407834E12, 22265.851851851854], [1.60407702E12, 29280.349999999995], [1.60407672E12, 36733.799999999996], [1.60407774E12, 27707.444444444445], [1.60407822E12, 26218.95833333334], [1.6040778E12, 33441.80952380952], [1.6040775E12, 23541.208333333336], [1.6040772E12, 29431.285714285717], [1.6040769E12, 28473.6], [1.6040766E12, 24704.72], [1.6040781E12, 29021.95], [1.6040784E12, 29619.666666666664]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60407846E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.19047619047619047, "minX": 1.60407654E12, "maxY": 20.166666666666668, "series": [{"data": [[1.60407696E12, 0.6190476190476191], [1.60407666E12, 0.5172413793103446], [1.60407798E12, 0.5], [1.60407768E12, 0.25], [1.60407738E12, 0.39999999999999997], [1.60407828E12, 0.36000000000000004], [1.60407708E12, 0.19047619047619047], [1.60407678E12, 0.7391304347826086], [1.60407744E12, 0.37037037037037035], [1.60407714E12, 0.6000000000000001], [1.60407684E12, 0.4347826086956522], [1.60407654E12, 20.166666666666668], [1.60407816E12, 0.38095238095238093], [1.60407846E12, 0.37037037037037035], [1.60407786E12, 0.25], [1.60407756E12, 0.4545454545454545], [1.60407726E12, 0.34782608695652173], [1.60407792E12, 0.7999999999999999], [1.60407762E12, 0.2727272727272727], [1.60407804E12, 0.3333333333333333], [1.60407732E12, 0.41379310344827586], [1.60407834E12, 0.25925925925925936], [1.60407702E12, 0.65], [1.60407672E12, 0.9999999999999999], [1.60407774E12, 0.6111111111111112], [1.60407822E12, 0.5416666666666667], [1.6040778E12, 0.5714285714285715], [1.6040775E12, 0.45833333333333337], [1.6040772E12, 0.47619047619047616], [1.6040769E12, 0.25], [1.6040766E12, 0.2800000000000001], [1.6040781E12, 0.45], [1.6040784E12, 0.5555555555555556]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60407846E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2517.0, "minX": 1.60407654E12, "maxY": 44560.0, "series": [{"data": [[1.60407696E12, 29371.0], [1.60407666E12, 24171.0], [1.60407798E12, 29536.0], [1.60407768E12, 28847.0], [1.60407738E12, 27863.0], [1.60407828E12, 26691.0], [1.60407708E12, 29974.0], [1.60407678E12, 37739.0], [1.60407744E12, 31579.0], [1.60407714E12, 29635.0], [1.60407684E12, 31122.0], [1.60407654E12, 16541.0], [1.60407816E12, 29593.0], [1.60407846E12, 38170.0], [1.60407786E12, 29563.0], [1.60407756E12, 26868.0], [1.60407726E12, 28864.0], [1.60407792E12, 29795.0], [1.60407762E12, 31991.0], [1.60407804E12, 29254.0], [1.60407732E12, 25804.0], [1.60407834E12, 28220.0], [1.60407702E12, 30010.0], [1.60407672E12, 44560.0], [1.60407774E12, 40859.0], [1.60407822E12, 28908.0], [1.6040778E12, 43807.0], [1.6040775E12, 28764.0], [1.6040772E12, 29861.0], [1.6040769E12, 29765.0], [1.6040766E12, 27941.0], [1.6040781E12, 29371.0], [1.6040784E12, 36664.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60407696E12, 28792.0], [1.60407666E12, 17224.0], [1.60407798E12, 26862.0], [1.60407768E12, 23116.0], [1.60407738E12, 18436.0], [1.60407828E12, 20788.0], [1.60407708E12, 28115.0], [1.60407678E12, 24438.0], [1.60407744E12, 17466.0], [1.60407714E12, 28307.0], [1.60407684E12, 22303.0], [1.60407654E12, 2517.0], [1.60407816E12, 28623.0], [1.60407846E12, 16691.0], [1.60407786E12, 28940.0], [1.60407756E12, 16958.0], [1.60407726E12, 24893.0], [1.60407792E12, 29166.0], [1.60407762E12, 17326.0], [1.60407804E12, 27170.0], [1.60407732E12, 17272.0], [1.60407834E12, 18880.0], [1.60407702E12, 28938.0], [1.60407672E12, 23408.0], [1.60407774E12, 22023.0], [1.60407822E12, 23890.0], [1.6040778E12, 26424.0], [1.6040775E12, 19437.0], [1.6040772E12, 28702.0], [1.6040769E12, 25112.0], [1.6040766E12, 18644.0], [1.6040781E12, 28545.0], [1.6040784E12, 24888.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60407696E12, 28792.0], [1.60407666E12, 17224.0], [1.60407798E12, 26862.0], [1.60407768E12, 23116.0], [1.60407738E12, 18436.0], [1.60407828E12, 20788.0], [1.60407708E12, 28115.0], [1.60407678E12, 24438.0], [1.60407744E12, 17466.0], [1.60407714E12, 28307.0], [1.60407684E12, 22303.0], [1.60407654E12, 2517.0], [1.60407816E12, 28623.0], [1.60407846E12, 16691.0], [1.60407786E12, 28940.0], [1.60407756E12, 16958.0], [1.60407726E12, 24893.0], [1.60407792E12, 29166.0], [1.60407762E12, 17326.0], [1.60407804E12, 27170.0], [1.60407732E12, 17272.0], [1.60407834E12, 18880.0], [1.60407702E12, 28938.0], [1.60407672E12, 23408.0], [1.60407774E12, 22023.0], [1.60407822E12, 23890.0], [1.6040778E12, 26424.0], [1.6040775E12, 19437.0], [1.6040772E12, 28702.0], [1.6040769E12, 25112.0], [1.6040766E12, 18644.0], [1.6040781E12, 28545.0], [1.6040784E12, 24888.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60407696E12, 28792.0], [1.60407666E12, 17224.0], [1.60407798E12, 26862.0], [1.60407768E12, 23116.0], [1.60407738E12, 18436.0], [1.60407828E12, 20788.0], [1.60407708E12, 28115.0], [1.60407678E12, 24438.0], [1.60407744E12, 17466.0], [1.60407714E12, 28307.0], [1.60407684E12, 22303.0], [1.60407654E12, 2517.0], [1.60407816E12, 28623.0], [1.60407846E12, 16691.0], [1.60407786E12, 28940.0], [1.60407756E12, 16958.0], [1.60407726E12, 24893.0], [1.60407792E12, 29166.0], [1.60407762E12, 17326.0], [1.60407804E12, 27170.0], [1.60407732E12, 17272.0], [1.60407834E12, 18880.0], [1.60407702E12, 28938.0], [1.60407672E12, 23408.0], [1.60407774E12, 22023.0], [1.60407822E12, 23890.0], [1.6040778E12, 26424.0], [1.6040775E12, 19437.0], [1.6040772E12, 28702.0], [1.6040769E12, 25112.0], [1.6040766E12, 18644.0], [1.6040781E12, 28545.0], [1.6040784E12, 24888.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60407696E12, 28792.0], [1.60407666E12, 17224.0], [1.60407798E12, 26862.0], [1.60407768E12, 23116.0], [1.60407738E12, 18436.0], [1.60407828E12, 20788.0], [1.60407708E12, 28115.0], [1.60407678E12, 24438.0], [1.60407744E12, 17466.0], [1.60407714E12, 28307.0], [1.60407684E12, 22303.0], [1.60407654E12, 2517.0], [1.60407816E12, 28623.0], [1.60407846E12, 16691.0], [1.60407786E12, 28940.0], [1.60407756E12, 16958.0], [1.60407726E12, 24893.0], [1.60407792E12, 29166.0], [1.60407762E12, 17326.0], [1.60407804E12, 27170.0], [1.60407732E12, 17272.0], [1.60407834E12, 18880.0], [1.60407702E12, 28938.0], [1.60407672E12, 23408.0], [1.60407774E12, 22023.0], [1.60407822E12, 23890.0], [1.6040778E12, 26424.0], [1.6040775E12, 19437.0], [1.6040772E12, 28702.0], [1.6040769E12, 25112.0], [1.6040766E12, 18644.0], [1.6040781E12, 28545.0], [1.6040784E12, 24888.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60407696E12, 29212.0], [1.60407666E12, 19958.0], [1.60407798E12, 29044.5], [1.60407768E12, 24498.0], [1.60407738E12, 21217.0], [1.60407828E12, 23422.0], [1.60407708E12, 29402.0], [1.60407678E12, 26508.0], [1.60407744E12, 25458.0], [1.60407714E12, 29302.5], [1.60407684E12, 25350.0], [1.60407654E12, 9873.0], [1.60407816E12, 29056.0], [1.60407846E12, 17687.0], [1.60407786E12, 29188.5], [1.60407756E12, 19113.0], [1.60407726E12, 26435.0], [1.60407792E12, 29559.0], [1.60407762E12, 23809.5], [1.60407804E12, 28134.0], [1.60407732E12, 23016.0], [1.60407834E12, 21795.0], [1.60407702E12, 29257.0], [1.60407672E12, 41265.0], [1.60407774E12, 24589.0], [1.60407822E12, 26086.5], [1.6040778E12, 30167.0], [1.6040775E12, 23582.5], [1.6040772E12, 29385.0], [1.6040769E12, 28891.0], [1.6040766E12, 25931.0], [1.6040781E12, 29097.0], [1.6040784E12, 29111.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60407846E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26991.0, "minX": 1.0, "maxY": 26991.0, "series": [{"data": [[1.0, 26991.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26989.0, "minX": 1.0, "maxY": 26989.0, "series": [{"data": [[1.0, 26989.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60407654E12, "maxY": 0.55, "series": [{"data": [[1.60407696E12, 0.35], [1.60407666E12, 0.48333333333333334], [1.60407798E12, 0.36666666666666664], [1.60407768E12, 0.4], [1.60407738E12, 0.4166666666666667], [1.60407828E12, 0.4166666666666667], [1.60407708E12, 0.35], [1.60407678E12, 0.38333333333333336], [1.60407744E12, 0.45], [1.60407714E12, 0.3333333333333333], [1.60407684E12, 0.38333333333333336], [1.60407654E12, 0.26666666666666666], [1.60407816E12, 0.35], [1.60407846E12, 0.2833333333333333], [1.60407786E12, 0.3333333333333333], [1.60407756E12, 0.55], [1.60407726E12, 0.38333333333333336], [1.60407792E12, 0.3333333333333333], [1.60407762E12, 0.36666666666666664], [1.60407804E12, 0.35], [1.60407732E12, 0.48333333333333334], [1.60407834E12, 0.45], [1.60407702E12, 0.3333333333333333], [1.60407672E12, 0.25], [1.60407774E12, 0.3], [1.60407822E12, 0.4], [1.6040778E12, 0.35], [1.6040775E12, 0.4], [1.6040772E12, 0.35], [1.6040769E12, 0.3333333333333333], [1.6040766E12, 0.4166666666666667], [1.6040781E12, 0.3333333333333333], [1.6040784E12, 0.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60407846E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60407654E12, "maxY": 0.55, "series": [{"data": [[1.60407696E12, 0.35], [1.60407666E12, 0.48333333333333334], [1.60407798E12, 0.36666666666666664], [1.60407768E12, 0.4], [1.60407738E12, 0.4166666666666667], [1.60407828E12, 0.4166666666666667], [1.60407708E12, 0.35], [1.60407678E12, 0.38333333333333336], [1.60407744E12, 0.45], [1.60407714E12, 0.3333333333333333], [1.60407684E12, 0.38333333333333336], [1.60407654E12, 0.1], [1.60407816E12, 0.35], [1.60407846E12, 0.45], [1.60407786E12, 0.3333333333333333], [1.60407756E12, 0.55], [1.60407726E12, 0.38333333333333336], [1.60407792E12, 0.3333333333333333], [1.60407762E12, 0.36666666666666664], [1.60407804E12, 0.35], [1.60407732E12, 0.48333333333333334], [1.60407834E12, 0.45], [1.60407702E12, 0.3333333333333333], [1.60407672E12, 0.25], [1.60407774E12, 0.3], [1.60407822E12, 0.4], [1.6040778E12, 0.35], [1.6040775E12, 0.4], [1.6040772E12, 0.35], [1.6040769E12, 0.3333333333333333], [1.6040766E12, 0.4166666666666667], [1.6040781E12, 0.3333333333333333], [1.6040784E12, 0.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60407846E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60407654E12, "maxY": 0.55, "series": [{"data": [[1.60407696E12, 0.35], [1.60407666E12, 0.48333333333333334], [1.60407798E12, 0.36666666666666664], [1.60407768E12, 0.4], [1.60407738E12, 0.4166666666666667], [1.60407828E12, 0.4166666666666667], [1.60407708E12, 0.35], [1.60407678E12, 0.38333333333333336], [1.60407744E12, 0.45], [1.60407714E12, 0.3333333333333333], [1.60407684E12, 0.38333333333333336], [1.60407654E12, 0.1], [1.60407816E12, 0.35], [1.60407846E12, 0.45], [1.60407786E12, 0.3333333333333333], [1.60407756E12, 0.55], [1.60407726E12, 0.38333333333333336], [1.60407792E12, 0.3333333333333333], [1.60407762E12, 0.36666666666666664], [1.60407804E12, 0.35], [1.60407732E12, 0.48333333333333334], [1.60407834E12, 0.45], [1.60407702E12, 0.3333333333333333], [1.60407672E12, 0.25], [1.60407774E12, 0.3], [1.60407822E12, 0.4], [1.6040778E12, 0.35], [1.6040775E12, 0.4], [1.6040772E12, 0.35], [1.6040769E12, 0.3333333333333333], [1.6040766E12, 0.4166666666666667], [1.6040781E12, 0.3333333333333333], [1.6040784E12, 0.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60407846E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60407654E12, "maxY": 0.55, "series": [{"data": [[1.60407696E12, 0.35], [1.60407666E12, 0.48333333333333334], [1.60407798E12, 0.36666666666666664], [1.60407768E12, 0.4], [1.60407738E12, 0.4166666666666667], [1.60407828E12, 0.4166666666666667], [1.60407708E12, 0.35], [1.60407678E12, 0.38333333333333336], [1.60407744E12, 0.45], [1.60407714E12, 0.3333333333333333], [1.60407684E12, 0.38333333333333336], [1.60407654E12, 0.1], [1.60407816E12, 0.35], [1.60407846E12, 0.45], [1.60407786E12, 0.3333333333333333], [1.60407756E12, 0.55], [1.60407726E12, 0.38333333333333336], [1.60407792E12, 0.3333333333333333], [1.60407762E12, 0.36666666666666664], [1.60407804E12, 0.35], [1.60407732E12, 0.48333333333333334], [1.60407834E12, 0.45], [1.60407702E12, 0.3333333333333333], [1.60407672E12, 0.25], [1.60407774E12, 0.3], [1.60407822E12, 0.4], [1.6040778E12, 0.35], [1.6040775E12, 0.4], [1.6040772E12, 0.35], [1.6040769E12, 0.3333333333333333], [1.6040766E12, 0.4166666666666667], [1.6040781E12, 0.3333333333333333], [1.6040784E12, 0.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60407846E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

