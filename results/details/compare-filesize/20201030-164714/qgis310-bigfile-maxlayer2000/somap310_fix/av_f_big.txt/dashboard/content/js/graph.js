/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3145.0, "minX": 0.0, "maxY": 44845.0, "series": [{"data": [[0.0, 3145.0], [0.1, 3145.0], [0.2, 6105.0], [0.3, 8200.0], [0.4, 8200.0], [0.5, 10997.0], [0.6, 13473.0], [0.7, 16034.0], [0.8, 16034.0], [0.9, 16923.0], [1.0, 16937.0], [1.1, 16988.0], [1.2, 16988.0], [1.3, 17035.0], [1.4, 17054.0], [1.5, 17123.0], [1.6, 17123.0], [1.7, 17129.0], [1.8, 17157.0], [1.9, 17157.0], [2.0, 17173.0], [2.1, 17183.0], [2.2, 17226.0], [2.3, 17226.0], [2.4, 17238.0], [2.5, 17248.0], [2.6, 17258.0], [2.7, 17258.0], [2.8, 17271.0], [2.9, 17300.0], [3.0, 17304.0], [3.1, 17304.0], [3.2, 17320.0], [3.3, 17343.0], [3.4, 17343.0], [3.5, 17345.0], [3.6, 17351.0], [3.7, 17381.0], [3.8, 17381.0], [3.9, 17386.0], [4.0, 17390.0], [4.1, 17419.0], [4.2, 17419.0], [4.3, 17449.0], [4.4, 17483.0], [4.5, 17543.0], [4.6, 17543.0], [4.7, 17546.0], [4.8, 17552.0], [4.9, 17556.0], [5.0, 17556.0], [5.1, 17566.0], [5.2, 17572.0], [5.3, 17572.0], [5.4, 17601.0], [5.5, 17609.0], [5.6, 17624.0], [5.7, 17624.0], [5.8, 17636.0], [5.9, 17642.0], [6.0, 17646.0], [6.1, 17646.0], [6.2, 17648.0], [6.3, 17679.0], [6.4, 17685.0], [6.5, 17685.0], [6.6, 17710.0], [6.7, 17733.0], [6.8, 17733.0], [6.9, 17751.0], [7.0, 17764.0], [7.1, 17768.0], [7.2, 17768.0], [7.3, 17787.0], [7.4, 17887.0], [7.5, 17918.0], [7.6, 17918.0], [7.7, 17983.0], [7.8, 17993.0], [7.9, 17996.0], [8.0, 17996.0], [8.1, 17997.0], [8.2, 18050.0], [8.3, 18056.0], [8.4, 18056.0], [8.5, 18087.0], [8.6, 18109.0], [8.7, 18109.0], [8.8, 18160.0], [8.9, 18204.0], [9.0, 18372.0], [9.1, 18372.0], [9.2, 18401.0], [9.3, 18406.0], [9.4, 18427.0], [9.5, 18427.0], [9.6, 18460.0], [9.7, 18524.0], [9.8, 18657.0], [9.9, 18657.0], [10.0, 18694.0], [10.1, 18768.0], [10.2, 18768.0], [10.3, 18859.0], [10.4, 18923.0], [10.5, 18978.0], [10.6, 18978.0], [10.7, 19046.0], [10.8, 19233.0], [10.9, 19236.0], [11.0, 19236.0], [11.1, 19243.0], [11.2, 19293.0], [11.3, 19372.0], [11.4, 19372.0], [11.5, 19375.0], [11.6, 19381.0], [11.7, 19381.0], [11.8, 19410.0], [11.9, 19434.0], [12.0, 19435.0], [12.1, 19435.0], [12.2, 19450.0], [12.3, 19478.0], [12.4, 19566.0], [12.5, 19566.0], [12.6, 19575.0], [12.7, 19656.0], [12.8, 19682.0], [12.9, 19682.0], [13.0, 19696.0], [13.1, 19721.0], [13.2, 19729.0], [13.3, 19729.0], [13.4, 19740.0], [13.5, 19836.0], [13.6, 19836.0], [13.7, 19842.0], [13.8, 19876.0], [13.9, 19923.0], [14.0, 19923.0], [14.1, 19994.0], [14.2, 20065.0], [14.3, 20080.0], [14.4, 20080.0], [14.5, 20115.0], [14.6, 20188.0], [14.7, 20217.0], [14.8, 20217.0], [14.9, 20240.0], [15.0, 20256.0], [15.1, 20256.0], [15.2, 20265.0], [15.3, 20288.0], [15.4, 20322.0], [15.5, 20322.0], [15.6, 20347.0], [15.7, 20397.0], [15.8, 20429.0], [15.9, 20429.0], [16.0, 20499.0], [16.1, 20559.0], [16.2, 20561.0], [16.3, 20561.0], [16.4, 20582.0], [16.5, 20645.0], [16.6, 20649.0], [16.7, 20649.0], [16.8, 20710.0], [16.9, 20742.0], [17.0, 20742.0], [17.1, 20927.0], [17.2, 21109.0], [17.3, 21115.0], [17.4, 21115.0], [17.5, 21250.0], [17.6, 21337.0], [17.7, 21346.0], [17.8, 21346.0], [17.9, 21473.0], [18.0, 21619.0], [18.1, 21639.0], [18.2, 21639.0], [18.3, 21643.0], [18.4, 21645.0], [18.5, 21645.0], [18.6, 21668.0], [18.7, 21724.0], [18.8, 21737.0], [18.9, 21737.0], [19.0, 21764.0], [19.1, 21781.0], [19.2, 21843.0], [19.3, 21843.0], [19.4, 21862.0], [19.5, 21946.0], [19.6, 21958.0], [19.7, 21958.0], [19.8, 21963.0], [19.9, 21976.0], [20.0, 21978.0], [20.1, 21978.0], [20.2, 21980.0], [20.3, 22029.0], [20.4, 22029.0], [20.5, 22047.0], [20.6, 22103.0], [20.7, 22117.0], [20.8, 22117.0], [20.9, 22167.0], [21.0, 22170.0], [21.1, 22243.0], [21.2, 22243.0], [21.3, 22345.0], [21.4, 22413.0], [21.5, 22479.0], [21.6, 22479.0], [21.7, 22551.0], [21.8, 22562.0], [21.9, 22562.0], [22.0, 22643.0], [22.1, 22650.0], [22.2, 22653.0], [22.3, 22653.0], [22.4, 22699.0], [22.5, 22702.0], [22.6, 22706.0], [22.7, 22706.0], [22.8, 22747.0], [22.9, 22762.0], [23.0, 22784.0], [23.1, 22784.0], [23.2, 22785.0], [23.3, 22794.0], [23.4, 22794.0], [23.5, 22816.0], [23.6, 22856.0], [23.7, 22907.0], [23.8, 22907.0], [23.9, 22909.0], [24.0, 22910.0], [24.1, 22927.0], [24.2, 22927.0], [24.3, 22971.0], [24.4, 22988.0], [24.5, 22991.0], [24.6, 22991.0], [24.7, 23020.0], [24.8, 23053.0], [24.9, 23055.0], [25.0, 23055.0], [25.1, 23076.0], [25.2, 23079.0], [25.3, 23079.0], [25.4, 23083.0], [25.5, 23172.0], [25.6, 23192.0], [25.7, 23192.0], [25.8, 23206.0], [25.9, 23209.0], [26.0, 23356.0], [26.1, 23356.0], [26.2, 23367.0], [26.3, 23380.0], [26.4, 23429.0], [26.5, 23429.0], [26.6, 23435.0], [26.7, 23445.0], [26.8, 23445.0], [26.9, 23450.0], [27.0, 23472.0], [27.1, 23479.0], [27.2, 23479.0], [27.3, 23494.0], [27.4, 23496.0], [27.5, 23498.0], [27.6, 23498.0], [27.7, 23513.0], [27.8, 23518.0], [27.9, 23526.0], [28.0, 23526.0], [28.1, 23534.0], [28.2, 23551.0], [28.3, 23567.0], [28.4, 23567.0], [28.5, 23572.0], [28.6, 23574.0], [28.7, 23574.0], [28.8, 23583.0], [28.9, 23597.0], [29.0, 23600.0], [29.1, 23600.0], [29.2, 23657.0], [29.3, 23675.0], [29.4, 23680.0], [29.5, 23680.0], [29.6, 23682.0], [29.7, 23685.0], [29.8, 23830.0], [29.9, 23830.0], [30.0, 23849.0], [30.1, 23894.0], [30.2, 23894.0], [30.3, 23899.0], [30.4, 23912.0], [30.5, 23945.0], [30.6, 23945.0], [30.7, 23958.0], [30.8, 23976.0], [30.9, 24012.0], [31.0, 24012.0], [31.1, 24015.0], [31.2, 24051.0], [31.3, 24063.0], [31.4, 24063.0], [31.5, 24094.0], [31.6, 24122.0], [31.7, 24122.0], [31.8, 24131.0], [31.9, 24160.0], [32.0, 24160.0], [32.1, 24160.0], [32.2, 24185.0], [32.3, 24213.0], [32.4, 24231.0], [32.5, 24231.0], [32.6, 24256.0], [32.7, 24282.0], [32.8, 24313.0], [32.9, 24313.0], [33.0, 24324.0], [33.1, 24324.0], [33.2, 24350.0], [33.3, 24350.0], [33.4, 24353.0], [33.5, 24355.0], [33.6, 24355.0], [33.7, 24372.0], [33.8, 24385.0], [33.9, 24396.0], [34.0, 24396.0], [34.1, 24422.0], [34.2, 24448.0], [34.3, 24468.0], [34.4, 24468.0], [34.5, 24496.0], [34.6, 24499.0], [34.7, 24523.0], [34.8, 24523.0], [34.9, 24530.0], [35.0, 24586.0], [35.1, 24586.0], [35.2, 24595.0], [35.3, 24610.0], [35.4, 24633.0], [35.5, 24633.0], [35.6, 24673.0], [35.7, 24679.0], [35.8, 24691.0], [35.9, 24691.0], [36.0, 24716.0], [36.1, 24720.0], [36.2, 24753.0], [36.3, 24753.0], [36.4, 24783.0], [36.5, 24792.0], [36.6, 24810.0], [36.7, 24810.0], [36.8, 24818.0], [36.9, 24840.0], [37.0, 24840.0], [37.1, 24841.0], [37.2, 24858.0], [37.3, 24862.0], [37.4, 24862.0], [37.5, 24887.0], [37.6, 24917.0], [37.7, 25026.0], [37.8, 25026.0], [37.9, 25160.0], [38.0, 25194.0], [38.1, 25200.0], [38.2, 25200.0], [38.3, 25201.0], [38.4, 25202.0], [38.5, 25202.0], [38.6, 25222.0], [38.7, 25226.0], [38.8, 25238.0], [38.9, 25238.0], [39.0, 25277.0], [39.1, 25285.0], [39.2, 25291.0], [39.3, 25291.0], [39.4, 25307.0], [39.5, 25307.0], [39.6, 25318.0], [39.7, 25318.0], [39.8, 25327.0], [39.9, 25343.0], [40.0, 25365.0], [40.1, 25365.0], [40.2, 25380.0], [40.3, 25404.0], [40.4, 25404.0], [40.5, 25415.0], [40.6, 25453.0], [40.7, 25480.0], [40.8, 25480.0], [40.9, 25484.0], [41.0, 25499.0], [41.1, 25509.0], [41.2, 25509.0], [41.3, 25556.0], [41.4, 25582.0], [41.5, 25622.0], [41.6, 25622.0], [41.7, 25623.0], [41.8, 25638.0], [41.9, 25638.0], [42.0, 25653.0], [42.1, 25698.0], [42.2, 25732.0], [42.3, 25732.0], [42.4, 25736.0], [42.5, 25750.0], [42.6, 25755.0], [42.7, 25755.0], [42.8, 25771.0], [42.9, 25787.0], [43.0, 25812.0], [43.1, 25812.0], [43.2, 25834.0], [43.3, 25868.0], [43.4, 25868.0], [43.5, 25877.0], [43.6, 25885.0], [43.7, 25892.0], [43.8, 25892.0], [43.9, 25908.0], [44.0, 25924.0], [44.1, 25971.0], [44.2, 25971.0], [44.3, 25985.0], [44.4, 25986.0], [44.5, 26022.0], [44.6, 26022.0], [44.7, 26023.0], [44.8, 26028.0], [44.9, 26043.0], [45.0, 26043.0], [45.1, 26048.0], [45.2, 26081.0], [45.3, 26081.0], [45.4, 26093.0], [45.5, 26110.0], [45.6, 26117.0], [45.7, 26117.0], [45.8, 26120.0], [45.9, 26144.0], [46.0, 26146.0], [46.1, 26146.0], [46.2, 26161.0], [46.3, 26229.0], [46.4, 26336.0], [46.5, 26336.0], [46.6, 26356.0], [46.7, 26398.0], [46.8, 26398.0], [46.9, 26411.0], [47.0, 26411.0], [47.1, 26426.0], [47.2, 26426.0], [47.3, 26490.0], [47.4, 26499.0], [47.5, 26500.0], [47.6, 26500.0], [47.7, 26550.0], [47.8, 26568.0], [47.9, 26576.0], [48.0, 26576.0], [48.1, 26612.0], [48.2, 26631.0], [48.3, 26667.0], [48.4, 26667.0], [48.5, 26694.0], [48.6, 26699.0], [48.7, 26699.0], [48.8, 26767.0], [48.9, 26776.0], [49.0, 26799.0], [49.1, 26799.0], [49.2, 26811.0], [49.3, 26815.0], [49.4, 26868.0], [49.5, 26868.0], [49.6, 26963.0], [49.7, 26976.0], [49.8, 26989.0], [49.9, 26989.0], [50.0, 27005.0], [50.1, 27018.0], [50.2, 27018.0], [50.3, 27032.0], [50.4, 27052.0], [50.5, 27064.0], [50.6, 27064.0], [50.7, 27093.0], [50.8, 27146.0], [50.9, 27196.0], [51.0, 27196.0], [51.1, 27232.0], [51.2, 27241.0], [51.3, 27258.0], [51.4, 27258.0], [51.5, 27286.0], [51.6, 27300.0], [51.7, 27300.0], [51.8, 27321.0], [51.9, 27362.0], [52.0, 27365.0], [52.1, 27365.0], [52.2, 27381.0], [52.3, 27435.0], [52.4, 27465.0], [52.5, 27465.0], [52.6, 27530.0], [52.7, 27582.0], [52.8, 27616.0], [52.9, 27616.0], [53.0, 27633.0], [53.1, 27655.0], [53.2, 27676.0], [53.3, 27676.0], [53.4, 27687.0], [53.5, 27711.0], [53.6, 27711.0], [53.7, 27756.0], [53.8, 27759.0], [53.9, 27760.0], [54.0, 27760.0], [54.1, 27761.0], [54.2, 27813.0], [54.3, 27834.0], [54.4, 27834.0], [54.5, 27865.0], [54.6, 27912.0], [54.7, 27937.0], [54.8, 27937.0], [54.9, 27938.0], [55.0, 27968.0], [55.1, 27968.0], [55.2, 27988.0], [55.3, 28031.0], [55.4, 28048.0], [55.5, 28048.0], [55.6, 28063.0], [55.7, 28090.0], [55.8, 28103.0], [55.9, 28103.0], [56.0, 28121.0], [56.1, 28155.0], [56.2, 28195.0], [56.3, 28195.0], [56.4, 28229.0], [56.5, 28270.0], [56.6, 28300.0], [56.7, 28300.0], [56.8, 28305.0], [56.9, 28318.0], [57.0, 28318.0], [57.1, 28321.0], [57.2, 28360.0], [57.3, 28361.0], [57.4, 28361.0], [57.5, 28376.0], [57.6, 28380.0], [57.7, 28381.0], [57.8, 28381.0], [57.9, 28396.0], [58.0, 28409.0], [58.1, 28412.0], [58.2, 28412.0], [58.3, 28420.0], [58.4, 28421.0], [58.5, 28421.0], [58.6, 28445.0], [58.7, 28452.0], [58.8, 28467.0], [58.9, 28467.0], [59.0, 28540.0], [59.1, 28572.0], [59.2, 28576.0], [59.3, 28576.0], [59.4, 28592.0], [59.5, 28676.0], [59.6, 28688.0], [59.7, 28688.0], [59.8, 28692.0], [59.9, 28696.0], [60.0, 28707.0], [60.1, 28707.0], [60.2, 28730.0], [60.3, 28758.0], [60.4, 28758.0], [60.5, 28787.0], [60.6, 28808.0], [60.7, 28859.0], [60.8, 28859.0], [60.9, 28878.0], [61.0, 28881.0], [61.1, 28923.0], [61.2, 28923.0], [61.3, 28928.0], [61.4, 28930.0], [61.5, 28930.0], [61.6, 28930.0], [61.7, 28937.0], [61.8, 28944.0], [61.9, 28944.0], [62.0, 28944.0], [62.1, 28947.0], [62.2, 28951.0], [62.3, 28951.0], [62.4, 28952.0], [62.5, 28975.0], [62.6, 28981.0], [62.7, 28981.0], [62.8, 28982.0], [62.9, 29004.0], [63.0, 29018.0], [63.1, 29018.0], [63.2, 29020.0], [63.3, 29022.0], [63.4, 29022.0], [63.5, 29023.0], [63.6, 29024.0], [63.7, 29027.0], [63.8, 29027.0], [63.9, 29032.0], [64.0, 29038.0], [64.1, 29038.0], [64.2, 29038.0], [64.3, 29040.0], [64.4, 29042.0], [64.5, 29049.0], [64.6, 29049.0], [64.7, 29050.0], [64.8, 29051.0], [64.9, 29059.0], [65.0, 29059.0], [65.1, 29068.0], [65.2, 29070.0], [65.3, 29070.0], [65.4, 29083.0], [65.5, 29085.0], [65.6, 29089.0], [65.7, 29089.0], [65.8, 29091.0], [65.9, 29097.0], [66.0, 29105.0], [66.1, 29105.0], [66.2, 29107.0], [66.3, 29114.0], [66.4, 29118.0], [66.5, 29118.0], [66.6, 29128.0], [66.7, 29130.0], [66.8, 29130.0], [66.9, 29140.0], [67.0, 29141.0], [67.1, 29142.0], [67.2, 29142.0], [67.3, 29147.0], [67.4, 29149.0], [67.5, 29149.0], [67.6, 29149.0], [67.7, 29150.0], [67.8, 29151.0], [67.9, 29157.0], [68.0, 29157.0], [68.1, 29157.0], [68.2, 29159.0], [68.3, 29162.0], [68.4, 29162.0], [68.5, 29163.0], [68.6, 29168.0], [68.7, 29168.0], [68.8, 29170.0], [68.9, 29181.0], [69.0, 29186.0], [69.1, 29186.0], [69.2, 29187.0], [69.3, 29204.0], [69.4, 29214.0], [69.5, 29214.0], [69.6, 29217.0], [69.7, 29219.0], [69.8, 29224.0], [69.9, 29224.0], [70.0, 29226.0], [70.1, 29234.0], [70.2, 29234.0], [70.3, 29237.0], [70.4, 29259.0], [70.5, 29260.0], [70.6, 29260.0], [70.7, 29263.0], [70.8, 29270.0], [70.9, 29272.0], [71.0, 29272.0], [71.1, 29276.0], [71.2, 29280.0], [71.3, 29292.0], [71.4, 29292.0], [71.5, 29294.0], [71.6, 29295.0], [71.7, 29295.0], [71.8, 29296.0], [71.9, 29304.0], [72.0, 29305.0], [72.1, 29305.0], [72.2, 29306.0], [72.3, 29311.0], [72.4, 29325.0], [72.5, 29325.0], [72.6, 29326.0], [72.7, 29327.0], [72.8, 29328.0], [72.9, 29328.0], [73.0, 29332.0], [73.1, 29333.0], [73.2, 29349.0], [73.3, 29349.0], [73.4, 29354.0], [73.5, 29354.0], [73.6, 29354.0], [73.7, 29355.0], [73.8, 29362.0], [73.9, 29363.0], [74.0, 29363.0], [74.1, 29365.0], [74.2, 29366.0], [74.3, 29371.0], [74.4, 29371.0], [74.5, 29373.0], [74.6, 29378.0], [74.7, 29382.0], [74.8, 29382.0], [74.9, 29385.0], [75.0, 29388.0], [75.1, 29388.0], [75.2, 29392.0], [75.3, 29395.0], [75.4, 29396.0], [75.5, 29396.0], [75.6, 29397.0], [75.7, 29404.0], [75.8, 29409.0], [75.9, 29409.0], [76.0, 29410.0], [76.1, 29411.0], [76.2, 29413.0], [76.3, 29413.0], [76.4, 29419.0], [76.5, 29420.0], [76.6, 29420.0], [76.7, 29420.0], [76.8, 29426.0], [76.9, 29428.0], [77.0, 29428.0], [77.1, 29435.0], [77.2, 29438.0], [77.3, 29439.0], [77.4, 29439.0], [77.5, 29441.0], [77.6, 29446.0], [77.7, 29446.0], [77.8, 29446.0], [77.9, 29448.0], [78.0, 29449.0], [78.1, 29450.0], [78.2, 29450.0], [78.3, 29452.0], [78.4, 29452.0], [78.5, 29452.0], [78.6, 29457.0], [78.7, 29459.0], [78.8, 29471.0], [78.9, 29471.0], [79.0, 29473.0], [79.1, 29483.0], [79.2, 29484.0], [79.3, 29484.0], [79.4, 29492.0], [79.5, 29495.0], [79.6, 29500.0], [79.7, 29500.0], [79.8, 29500.0], [79.9, 29502.0], [80.0, 29507.0], [80.1, 29507.0], [80.2, 29513.0], [80.3, 29514.0], [80.4, 29514.0], [80.5, 29514.0], [80.6, 29531.0], [80.7, 29535.0], [80.8, 29535.0], [80.9, 29537.0], [81.0, 29542.0], [81.1, 29545.0], [81.2, 29545.0], [81.3, 29545.0], [81.4, 29547.0], [81.5, 29559.0], [81.6, 29559.0], [81.7, 29562.0], [81.8, 29566.0], [81.9, 29566.0], [82.0, 29566.0], [82.1, 29574.0], [82.2, 29578.0], [82.3, 29578.0], [82.4, 29580.0], [82.5, 29584.0], [82.6, 29585.0], [82.7, 29585.0], [82.8, 29590.0], [82.9, 29592.0], [83.0, 29596.0], [83.1, 29596.0], [83.2, 29621.0], [83.3, 29624.0], [83.4, 29624.0], [83.5, 29625.0], [83.6, 29634.0], [83.7, 29638.0], [83.8, 29638.0], [83.9, 29641.0], [84.0, 29662.0], [84.1, 29662.0], [84.2, 29662.0], [84.3, 29662.0], [84.4, 29686.0], [84.5, 29687.0], [84.6, 29687.0], [84.7, 29697.0], [84.8, 29700.0], [84.9, 29716.0], [85.0, 29716.0], [85.1, 29718.0], [85.2, 29729.0], [85.3, 29729.0], [85.4, 29731.0], [85.5, 29738.0], [85.6, 29739.0], [85.7, 29739.0], [85.8, 29742.0], [85.9, 29762.0], [86.0, 29774.0], [86.1, 29774.0], [86.2, 29783.0], [86.3, 29793.0], [86.4, 29796.0], [86.5, 29796.0], [86.6, 29796.0], [86.7, 29798.0], [86.8, 29798.0], [86.9, 29803.0], [87.0, 29807.0], [87.1, 29831.0], [87.2, 29831.0], [87.3, 29841.0], [87.4, 29848.0], [87.5, 29862.0], [87.6, 29862.0], [87.7, 29867.0], [87.8, 29922.0], [87.9, 29935.0], [88.0, 29935.0], [88.1, 30013.0], [88.2, 30018.0], [88.3, 30025.0], [88.4, 30025.0], [88.5, 30025.0], [88.6, 30044.0], [88.7, 30044.0], [88.8, 30047.0], [88.9, 30054.0], [89.0, 30063.0], [89.1, 30063.0], [89.2, 30063.0], [89.3, 30064.0], [89.4, 30068.0], [89.5, 30068.0], [89.6, 30081.0], [89.7, 30090.0], [89.8, 30108.0], [89.9, 30108.0], [90.0, 30125.0], [90.1, 30150.0], [90.2, 30150.0], [90.3, 30152.0], [90.4, 30163.0], [90.5, 30167.0], [90.6, 30167.0], [90.7, 30185.0], [90.8, 30185.0], [90.9, 30192.0], [91.0, 30192.0], [91.1, 30194.0], [91.2, 30247.0], [91.3, 30256.0], [91.4, 30256.0], [91.5, 30276.0], [91.6, 30324.0], [91.7, 30324.0], [91.8, 30386.0], [91.9, 30392.0], [92.0, 30413.0], [92.1, 30413.0], [92.2, 30416.0], [92.3, 30462.0], [92.4, 30487.0], [92.5, 30487.0], [92.6, 30520.0], [92.7, 30531.0], [92.8, 30531.0], [92.9, 30531.0], [93.0, 30537.0], [93.1, 30595.0], [93.2, 30612.0], [93.3, 30612.0], [93.4, 30624.0], [93.5, 30743.0], [93.6, 30743.0], [93.7, 30752.0], [93.8, 30840.0], [93.9, 31107.0], [94.0, 31107.0], [94.1, 31201.0], [94.2, 31483.0], [94.3, 31511.0], [94.4, 31511.0], [94.5, 31518.0], [94.6, 31702.0], [94.7, 31724.0], [94.8, 31724.0], [94.9, 31794.0], [95.0, 31802.0], [95.1, 31802.0], [95.2, 31817.0], [95.3, 31968.0], [95.4, 32548.0], [95.5, 32548.0], [95.6, 32559.0], [95.7, 32828.0], [95.8, 33027.0], [95.9, 33027.0], [96.0, 33144.0], [96.1, 33453.0], [96.2, 33720.0], [96.3, 33720.0], [96.4, 33962.0], [96.5, 34683.0], [96.6, 34804.0], [96.7, 34804.0], [96.8, 34984.0], [96.9, 35327.0], [97.0, 35327.0], [97.1, 36270.0], [97.2, 36414.0], [97.3, 36666.0], [97.4, 36666.0], [97.5, 37409.0], [97.6, 37924.0], [97.7, 38125.0], [97.8, 38125.0], [97.9, 38129.0], [98.0, 39258.0], [98.1, 39930.0], [98.2, 39930.0], [98.3, 40782.0], [98.4, 41462.0], [98.5, 41462.0], [98.6, 42030.0], [98.7, 42145.0], [98.8, 42467.0], [98.9, 42467.0], [99.0, 43083.0], [99.1, 43427.0], [99.2, 43458.0], [99.3, 43458.0], [99.4, 43854.0], [99.5, 44350.0], [99.6, 44370.0], [99.7, 44370.0], [99.8, 44495.0], [99.9, 44845.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 29.0, "series": [{"data": [[33700.0, 1.0], [33100.0, 1.0], [33900.0, 1.0], [35300.0, 1.0], [34900.0, 1.0], [38100.0, 2.0], [37900.0, 1.0], [40700.0, 1.0], [39900.0, 1.0], [42100.0, 1.0], [44300.0, 2.0], [3100.0, 1.0], [6100.0, 1.0], [8200.0, 1.0], [10900.0, 1.0], [13400.0, 1.0], [16000.0, 1.0], [17400.0, 3.0], [17200.0, 5.0], [17300.0, 9.0], [17100.0, 5.0], [16900.0, 3.0], [17000.0, 2.0], [18400.0, 4.0], [18000.0, 3.0], [17900.0, 5.0], [17600.0, 9.0], [17500.0, 6.0], [18300.0, 1.0], [18200.0, 1.0], [17700.0, 6.0], [18100.0, 2.0], [17800.0, 1.0], [19200.0, 4.0], [19400.0, 5.0], [18600.0, 2.0], [18900.0, 2.0], [18800.0, 1.0], [18700.0, 1.0], [18500.0, 1.0], [19000.0, 1.0], [19300.0, 3.0], [20000.0, 2.0], [20200.0, 5.0], [19900.0, 2.0], [19500.0, 2.0], [19600.0, 3.0], [20100.0, 2.0], [19700.0, 3.0], [19800.0, 3.0], [20400.0, 2.0], [20300.0, 3.0], [20600.0, 2.0], [20500.0, 3.0], [21400.0, 1.0], [20900.0, 1.0], [21200.0, 1.0], [21100.0, 2.0], [21300.0, 2.0], [20700.0, 2.0], [22400.0, 2.0], [21600.0, 5.0], [21900.0, 6.0], [22100.0, 4.0], [22000.0, 2.0], [22200.0, 1.0], [22500.0, 2.0], [21800.0, 2.0], [21700.0, 4.0], [22300.0, 1.0], [22600.0, 4.0], [23400.0, 9.0], [22900.0, 7.0], [23500.0, 10.0], [22800.0, 2.0], [22700.0, 7.0], [23000.0, 6.0], [23100.0, 2.0], [23200.0, 2.0], [23300.0, 3.0], [24400.0, 5.0], [23600.0, 6.0], [24000.0, 5.0], [24300.0, 9.0], [24200.0, 4.0], [23800.0, 4.0], [24500.0, 4.0], [24100.0, 5.0], [23900.0, 4.0], [25500.0, 3.0], [25200.0, 9.0], [25300.0, 7.0], [24600.0, 5.0], [24700.0, 5.0], [24800.0, 7.0], [25100.0, 2.0], [25400.0, 6.0], [24900.0, 1.0], [25000.0, 1.0], [25700.0, 6.0], [26000.0, 7.0], [25900.0, 5.0], [26400.0, 5.0], [26600.0, 5.0], [26100.0, 6.0], [25600.0, 5.0], [25800.0, 6.0], [26500.0, 4.0], [26300.0, 3.0], [26200.0, 1.0], [27500.0, 2.0], [27200.0, 4.0], [27300.0, 5.0], [27600.0, 5.0], [27000.0, 6.0], [26700.0, 3.0], [27100.0, 2.0], [26900.0, 3.0], [26800.0, 3.0], [27400.0, 2.0], [28500.0, 4.0], [28300.0, 10.0], [28400.0, 7.0], [27700.0, 5.0], [28200.0, 2.0], [28600.0, 4.0], [28000.0, 4.0], [27800.0, 3.0], [27900.0, 5.0], [28100.0, 4.0], [28900.0, 13.0], [29600.0, 12.0], [29000.0, 23.0], [29400.0, 29.0], [29500.0, 26.0], [29300.0, 28.0], [29100.0, 24.0], [29200.0, 19.0], [28800.0, 4.0], [28700.0, 4.0], [30600.0, 2.0], [30700.0, 2.0], [29700.0, 15.0], [29800.0, 7.0], [30000.0, 13.0], [30100.0, 10.0], [30200.0, 3.0], [30500.0, 5.0], [29900.0, 2.0], [30400.0, 4.0], [30300.0, 3.0], [31700.0, 3.0], [30800.0, 1.0], [31500.0, 2.0], [31400.0, 1.0], [31200.0, 1.0], [31100.0, 1.0], [32500.0, 2.0], [31900.0, 1.0], [31800.0, 2.0], [34800.0, 1.0], [33000.0, 1.0], [32800.0, 1.0], [34600.0, 1.0], [33400.0, 1.0], [36400.0, 1.0], [36200.0, 1.0], [36600.0, 1.0], [37400.0, 1.0], [39200.0, 1.0], [41400.0, 1.0], [43000.0, 1.0], [42400.0, 1.0], [42000.0, 1.0], [43400.0, 2.0], [43800.0, 1.0], [44800.0, 1.0], [44400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.63157894736842, "minX": 1.60408296E12, "maxY": 10.0, "series": [{"data": [[1.60408314E12, 10.0], [1.60408344E12, 10.0], [1.60408476E12, 10.0], [1.60408446E12, 10.0], [1.60408464E12, 10.0], [1.60408434E12, 10.0], [1.60408374E12, 10.0], [1.60408404E12, 10.0], [1.60408362E12, 10.0], [1.60408392E12, 10.0], [1.60408302E12, 10.0], [1.60408332E12, 10.0], [1.6040832E12, 10.0], [1.60408482E12, 10.0], [1.60408422E12, 10.0], [1.60408452E12, 10.0], [1.6040841E12, 10.0], [1.6040844E12, 10.0], [1.6040835E12, 10.0], [1.6040838E12, 10.0], [1.60408338E12, 10.0], [1.60408368E12, 10.0], [1.60408308E12, 10.0], [1.6040847E12, 10.0], [1.60408488E12, 7.63157894736842], [1.60408296E12, 10.0], [1.60408458E12, 10.0], [1.60408398E12, 10.0], [1.60408428E12, 10.0], [1.60408386E12, 10.0], [1.60408416E12, 10.0], [1.60408326E12, 10.0], [1.60408356E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408488E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16937.0, "minX": 1.0, "maxY": 26259.422865013785, "series": [{"data": [[8.0, 17343.0], [4.0, 17173.0], [2.0, 16937.0], [1.0, 17320.0], [9.0, 17386.0], [10.0, 26259.422865013785], [5.0, 17157.0], [6.0, 17123.0], [3.0, 17129.0], [7.0, 17248.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26148.512925170082]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.43333333333334, "minX": 1.60408296E12, "maxY": 193620.11666666667, "series": [{"data": [[1.60408314E12, 57683.5], [1.60408344E12, 45769.316666666666], [1.60408476E12, 154436.8], [1.60408446E12, 48497.833333333336], [1.60408464E12, 28291.516666666666], [1.60408434E12, 47772.4], [1.60408374E12, 159100.86666666667], [1.60408404E12, 66595.36666666667], [1.60408362E12, 45600.433333333334], [1.60408392E12, 193620.11666666667], [1.60408302E12, 101745.8], [1.60408332E12, 45203.8], [1.6040832E12, 77145.86666666667], [1.60408482E12, 76118.06666666667], [1.60408422E12, 45302.13333333333], [1.60408452E12, 48627.48333333333], [1.6040841E12, 82710.88333333333], [1.6040844E12, 52273.73333333333], [1.6040835E12, 53577.0], [1.6040838E12, 88695.31666666667], [1.60408338E12, 47825.96666666667], [1.60408368E12, 26839.983333333334], [1.60408308E12, 143358.78333333333], [1.6040847E12, 29656.933333333334], [1.60408488E12, 13455.35], [1.60408296E12, 164758.48333333334], [1.60408458E12, 43928.85], [1.60408398E12, 71303.18333333333], [1.60408428E12, 50144.88333333333], [1.60408386E12, 91418.96666666666], [1.60408416E12, 27953.883333333335], [1.60408326E12, 49474.316666666666], [1.60408356E12, 44574.916666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60408314E12, 125.55], [1.60408344E12, 146.11666666666667], [1.60408476E12, 174.93333333333334], [1.60408446E12, 153.43333333333334], [1.60408464E12, 175.05], [1.60408434E12, 153.43333333333334], [1.60408374E12, 224.55], [1.60408404E12, 164.46666666666667], [1.60408362E12, 153.35], [1.60408392E12, 183.16666666666666], [1.60408302E12, 207.3], [1.60408332E12, 146.11666666666667], [1.6040832E12, 176.26666666666668], [1.60408482E12, 158.98333333333332], [1.60408422E12, 146.13333333333333], [1.60408452E12, 146.11666666666667], [1.6040841E12, 191.15], [1.6040844E12, 154.35], [1.6040835E12, 153.66666666666666], [1.6040838E12, 165.03333333333333], [1.60408338E12, 146.11666666666667], [1.60408368E12, 175.2], [1.60408308E12, 164.88333333333333], [1.6040847E12, 189.96666666666667], [1.60408488E12, 126.61666666666666], [1.60408296E12, 102.43333333333334], [1.60408458E12, 160.56666666666666], [1.60408398E12, 216.28333333333333], [1.60408428E12, 146.16666666666666], [1.60408386E12, 187.9], [1.60408416E12, 116.88333333333334], [1.60408326E12, 161.03333333333333], [1.60408356E12, 146.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408488E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17628.5, "minX": 1.60408296E12, "maxY": 38713.88235294116, "series": [{"data": [[1.60408314E12, 38713.88235294116], [1.60408344E12, 29842.25], [1.60408476E12, 22178.666666666668], [1.60408446E12, 28803.95238095238], [1.60408464E12, 25643.791666666668], [1.60408434E12, 29411.428571428572], [1.60408374E12, 20294.09677419355], [1.60408404E12, 26903.363636363632], [1.60408362E12, 29675.904761904763], [1.60408392E12, 24675.0], [1.60408302E12, 22200.51724137931], [1.60408332E12, 29849.199999999997], [1.6040832E12, 25426.083333333336], [1.60408482E12, 30327.363636363643], [1.60408422E12, 30189.100000000002], [1.60408452E12, 29318.950000000008], [1.6040841E12, 24212.076923076926], [1.6040844E12, 28117.904761904767], [1.6040835E12, 29098.190476190477], [1.6040838E12, 24949.608695652176], [1.60408338E12, 29560.499999999996], [1.60408368E12, 25466.791666666668], [1.60408308E12, 22362.636363636364], [1.6040847E12, 23704.115384615383], [1.60408488E12, 17708.631578947374], [1.60408296E12, 17628.5], [1.60408458E12, 28562.045454545452], [1.60408398E12, 18647.193548387095], [1.60408428E12, 29125.800000000003], [1.60408386E12, 22110.185185185186], [1.60408416E12, 34724.125], [1.60408326E12, 27062.545454545456], [1.60408356E12, 29436.55]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408488E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17623.571428571428, "minX": 1.60408296E12, "maxY": 38712.23529411765, "series": [{"data": [[1.60408314E12, 38712.23529411765], [1.60408344E12, 29841.149999999998], [1.60408476E12, 22175.000000000004], [1.60408446E12, 28802.761904761905], [1.60408464E12, 25642.374999999996], [1.60408434E12, 29410.52380952381], [1.60408374E12, 20290.709677419356], [1.60408404E12, 26901.81818181818], [1.60408362E12, 29674.714285714286], [1.60408392E12, 24671.12], [1.60408302E12, 22198.448275862065], [1.60408332E12, 29848.249999999996], [1.6040832E12, 25424.583333333336], [1.60408482E12, 30325.181818181813], [1.60408422E12, 30187.750000000004], [1.60408452E12, 29317.850000000006], [1.6040841E12, 24210.38461538461], [1.6040844E12, 28116.428571428572], [1.6040835E12, 29096.95238095238], [1.6040838E12, 24946.95652173913], [1.60408338E12, 29559.25], [1.60408368E12, 25465.500000000004], [1.60408308E12, 22359.454545454544], [1.6040847E12, 23702.846153846156], [1.60408488E12, 17706.84210526316], [1.60408296E12, 17623.571428571428], [1.60408458E12, 28560.95454545454], [1.60408398E12, 18645.322580645156], [1.60408428E12, 29124.549999999996], [1.60408386E12, 22107.518518518515], [1.60408416E12, 34723.25], [1.60408326E12, 27061.36363636364], [1.60408356E12, 29435.4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408488E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.13043478260869565, "minX": 1.60408296E12, "maxY": 6.285714285714286, "series": [{"data": [[1.60408314E12, 0.5882352941176471], [1.60408344E12, 0.6500000000000001], [1.60408476E12, 0.4166666666666667], [1.60408446E12, 0.7619047619047621], [1.60408464E12, 0.41666666666666663], [1.60408434E12, 0.2857142857142857], [1.60408374E12, 0.4516129032258064], [1.60408404E12, 0.5], [1.60408362E12, 0.6666666666666667], [1.60408392E12, 0.48], [1.60408302E12, 0.48275862068965514], [1.60408332E12, 0.19999999999999998], [1.6040832E12, 0.5], [1.60408482E12, 0.3181818181818182], [1.60408422E12, 0.6000000000000001], [1.60408452E12, 0.15000000000000005], [1.6040841E12, 0.2692307692307692], [1.6040844E12, 0.47619047619047616], [1.6040835E12, 0.23809523809523808], [1.6040838E12, 0.13043478260869565], [1.60408338E12, 0.5], [1.60408368E12, 0.41666666666666663], [1.60408308E12, 0.13636363636363635], [1.6040847E12, 0.5], [1.60408488E12, 0.4736842105263158], [1.60408296E12, 6.285714285714286], [1.60408458E12, 0.5909090909090909], [1.60408398E12, 0.45161290322580644], [1.60408428E12, 0.7000000000000001], [1.60408386E12, 0.37037037037037035], [1.60408416E12, 0.18749999999999997], [1.60408326E12, 0.681818181818182], [1.60408356E12, 0.4000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408488E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3145.0, "minX": 1.60408296E12, "maxY": 44845.0, "series": [{"data": [[1.60408314E12, 44845.0], [1.60408344E12, 30537.0], [1.60408476E12, 28688.0], [1.60408446E12, 29514.0], [1.60408464E12, 29280.0], [1.60408434E12, 29793.0], [1.60408374E12, 26120.0], [1.60408404E12, 31802.0], [1.60408362E12, 30612.0], [1.60408392E12, 28381.0], [1.60408302E12, 27633.0], [1.60408332E12, 30256.0], [1.6040832E12, 29798.0], [1.60408482E12, 38125.0], [1.60408422E12, 36270.0], [1.60408452E12, 29662.0], [1.6040841E12, 27435.0], [1.6040844E12, 29404.0], [1.6040835E12, 29803.0], [1.6040838E12, 31968.0], [1.60408338E12, 30520.0], [1.60408368E12, 28540.0], [1.60408308E12, 30743.0], [1.6040847E12, 26811.0], [1.60408488E12, 22653.0], [1.60408296E12, 25986.0], [1.60408458E12, 29739.0], [1.60408398E12, 22170.0], [1.60408428E12, 29441.0], [1.60408386E12, 28758.0], [1.60408416E12, 44370.0], [1.60408326E12, 30624.0], [1.60408356E12, 29848.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60408314E12, 30840.0], [1.60408344E12, 29292.0], [1.60408476E12, 18978.0], [1.60408446E12, 27968.0], [1.60408464E12, 22907.0], [1.60408434E12, 29107.0], [1.60408374E12, 17556.0], [1.60408404E12, 22747.0], [1.60408362E12, 26976.0], [1.60408392E12, 19836.0], [1.60408302E12, 17238.0], [1.60408332E12, 29151.0], [1.6040832E12, 22784.0], [1.60408482E12, 24122.0], [1.60408422E12, 26229.0], [1.60408452E12, 29023.0], [1.6040841E12, 21958.0], [1.6040844E12, 26815.0], [1.6040835E12, 28380.0], [1.6040838E12, 18160.0], [1.60408338E12, 28787.0], [1.60408368E12, 22988.0], [1.60408308E12, 17258.0], [1.6040847E12, 20499.0], [1.60408488E12, 16923.0], [1.60408296E12, 3145.0], [1.60408458E12, 25698.0], [1.60408398E12, 17183.0], [1.60408428E12, 28930.0], [1.60408386E12, 17543.0], [1.60408416E12, 22927.0], [1.60408326E12, 23682.0], [1.60408356E12, 29004.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60408314E12, 30840.0], [1.60408344E12, 29292.0], [1.60408476E12, 18978.0], [1.60408446E12, 27968.0], [1.60408464E12, 22907.0], [1.60408434E12, 29107.0], [1.60408374E12, 17556.0], [1.60408404E12, 22747.0], [1.60408362E12, 26976.0], [1.60408392E12, 19836.0], [1.60408302E12, 17238.0], [1.60408332E12, 29151.0], [1.6040832E12, 22784.0], [1.60408482E12, 24122.0], [1.60408422E12, 26229.0], [1.60408452E12, 29023.0], [1.6040841E12, 21958.0], [1.6040844E12, 26815.0], [1.6040835E12, 28380.0], [1.6040838E12, 18160.0], [1.60408338E12, 28787.0], [1.60408368E12, 22988.0], [1.60408308E12, 17258.0], [1.6040847E12, 20499.0], [1.60408488E12, 16923.0], [1.60408296E12, 3145.0], [1.60408458E12, 25698.0], [1.60408398E12, 17183.0], [1.60408428E12, 28930.0], [1.60408386E12, 17543.0], [1.60408416E12, 22927.0], [1.60408326E12, 23682.0], [1.60408356E12, 29004.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60408314E12, 30840.0], [1.60408344E12, 29292.0], [1.60408476E12, 18978.0], [1.60408446E12, 27968.0], [1.60408464E12, 22907.0], [1.60408434E12, 29107.0], [1.60408374E12, 17556.0], [1.60408404E12, 22747.0], [1.60408362E12, 26976.0], [1.60408392E12, 19836.0], [1.60408302E12, 17238.0], [1.60408332E12, 29151.0], [1.6040832E12, 22784.0], [1.60408482E12, 24122.0], [1.60408422E12, 26229.0], [1.60408452E12, 29023.0], [1.6040841E12, 21958.0], [1.6040844E12, 26815.0], [1.6040835E12, 28380.0], [1.6040838E12, 18160.0], [1.60408338E12, 28787.0], [1.60408368E12, 22988.0], [1.60408308E12, 17258.0], [1.6040847E12, 20499.0], [1.60408488E12, 16923.0], [1.60408296E12, 3145.0], [1.60408458E12, 25698.0], [1.60408398E12, 17183.0], [1.60408428E12, 28930.0], [1.60408386E12, 17543.0], [1.60408416E12, 22927.0], [1.60408326E12, 23682.0], [1.60408356E12, 29004.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60408314E12, 30840.0], [1.60408344E12, 29292.0], [1.60408476E12, 18978.0], [1.60408446E12, 27968.0], [1.60408464E12, 22907.0], [1.60408434E12, 29107.0], [1.60408374E12, 17556.0], [1.60408404E12, 22747.0], [1.60408362E12, 26976.0], [1.60408392E12, 19836.0], [1.60408302E12, 17238.0], [1.60408332E12, 29151.0], [1.6040832E12, 22784.0], [1.60408482E12, 24122.0], [1.60408422E12, 26229.0], [1.60408452E12, 29023.0], [1.6040841E12, 21958.0], [1.6040844E12, 26815.0], [1.6040835E12, 28380.0], [1.6040838E12, 18160.0], [1.60408338E12, 28787.0], [1.60408368E12, 22988.0], [1.60408308E12, 17258.0], [1.6040847E12, 20499.0], [1.60408488E12, 16923.0], [1.60408296E12, 3145.0], [1.60408458E12, 25698.0], [1.60408398E12, 17183.0], [1.60408428E12, 28930.0], [1.60408386E12, 17543.0], [1.60408416E12, 22927.0], [1.60408326E12, 23682.0], [1.60408356E12, 29004.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60408314E12, 39258.0], [1.60408344E12, 29714.5], [1.60408476E12, 21696.0], [1.60408446E12, 29020.0], [1.60408464E12, 25595.5], [1.60408434E12, 29420.0], [1.60408374E12, 19236.0], [1.60408404E12, 27199.0], [1.60408362E12, 29841.0], [1.60408392E12, 24350.0], [1.60408302E12, 20645.0], [1.60408332E12, 29864.5], [1.6040832E12, 25261.5], [1.60408482E12, 29522.5], [1.60408422E12, 29717.5], [1.60408452E12, 29353.0], [1.6040841E12, 24145.5], [1.6040844E12, 27938.0], [1.6040835E12, 29032.0], [1.6040838E12, 22762.0], [1.60408338E12, 29502.5], [1.60408368E12, 25785.0], [1.60408308E12, 22733.0], [1.6040847E12, 23508.0], [1.60408488E12, 17248.0], [1.60408296E12, 19352.5], [1.60408458E12, 29002.0], [1.60408398E12, 17751.0], [1.60408428E12, 29123.0], [1.60408386E12, 21619.0], [1.60408416E12, 36368.0], [1.60408326E12, 27041.0], [1.60408356E12, 29451.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408488E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27005.0, "minX": 1.0, "maxY": 27005.0, "series": [{"data": [[1.0, 27005.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27004.0, "minX": 1.0, "maxY": 27004.0, "series": [{"data": [[1.0, 27004.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60408296E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60408314E12, 0.2833333333333333], [1.60408344E12, 0.3333333333333333], [1.60408476E12, 0.4], [1.60408446E12, 0.35], [1.60408464E12, 0.4], [1.60408434E12, 0.35], [1.60408374E12, 0.5166666666666667], [1.60408404E12, 0.36666666666666664], [1.60408362E12, 0.35], [1.60408392E12, 0.4166666666666667], [1.60408302E12, 0.48333333333333334], [1.60408332E12, 0.3333333333333333], [1.6040832E12, 0.4], [1.60408482E12, 0.36666666666666664], [1.60408422E12, 0.3333333333333333], [1.60408452E12, 0.3333333333333333], [1.6040841E12, 0.43333333333333335], [1.6040844E12, 0.35], [1.6040835E12, 0.35], [1.6040838E12, 0.38333333333333336], [1.60408338E12, 0.3333333333333333], [1.60408368E12, 0.4], [1.60408308E12, 0.36666666666666664], [1.6040847E12, 0.43333333333333335], [1.60408488E12, 0.15], [1.60408296E12, 0.4], [1.60408458E12, 0.36666666666666664], [1.60408398E12, 0.5166666666666667], [1.60408428E12, 0.3333333333333333], [1.60408386E12, 0.45], [1.60408416E12, 0.26666666666666666], [1.60408326E12, 0.36666666666666664], [1.60408356E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408488E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60408296E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60408314E12, 0.2833333333333333], [1.60408344E12, 0.3333333333333333], [1.60408476E12, 0.4], [1.60408446E12, 0.35], [1.60408464E12, 0.4], [1.60408434E12, 0.35], [1.60408374E12, 0.5166666666666667], [1.60408404E12, 0.36666666666666664], [1.60408362E12, 0.35], [1.60408392E12, 0.4166666666666667], [1.60408302E12, 0.48333333333333334], [1.60408332E12, 0.3333333333333333], [1.6040832E12, 0.4], [1.60408482E12, 0.36666666666666664], [1.60408422E12, 0.3333333333333333], [1.60408452E12, 0.3333333333333333], [1.6040841E12, 0.43333333333333335], [1.6040844E12, 0.35], [1.6040835E12, 0.35], [1.6040838E12, 0.38333333333333336], [1.60408338E12, 0.3333333333333333], [1.60408368E12, 0.4], [1.60408308E12, 0.36666666666666664], [1.6040847E12, 0.43333333333333335], [1.60408488E12, 0.31666666666666665], [1.60408296E12, 0.23333333333333334], [1.60408458E12, 0.36666666666666664], [1.60408398E12, 0.5166666666666667], [1.60408428E12, 0.3333333333333333], [1.60408386E12, 0.45], [1.60408416E12, 0.26666666666666666], [1.60408326E12, 0.36666666666666664], [1.60408356E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408488E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60408296E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60408314E12, 0.2833333333333333], [1.60408344E12, 0.3333333333333333], [1.60408476E12, 0.4], [1.60408446E12, 0.35], [1.60408464E12, 0.4], [1.60408434E12, 0.35], [1.60408374E12, 0.5166666666666667], [1.60408404E12, 0.36666666666666664], [1.60408362E12, 0.35], [1.60408392E12, 0.4166666666666667], [1.60408302E12, 0.48333333333333334], [1.60408332E12, 0.3333333333333333], [1.6040832E12, 0.4], [1.60408482E12, 0.36666666666666664], [1.60408422E12, 0.3333333333333333], [1.60408452E12, 0.3333333333333333], [1.6040841E12, 0.43333333333333335], [1.6040844E12, 0.35], [1.6040835E12, 0.35], [1.6040838E12, 0.38333333333333336], [1.60408338E12, 0.3333333333333333], [1.60408368E12, 0.4], [1.60408308E12, 0.36666666666666664], [1.6040847E12, 0.43333333333333335], [1.60408488E12, 0.31666666666666665], [1.60408296E12, 0.23333333333333334], [1.60408458E12, 0.36666666666666664], [1.60408398E12, 0.5166666666666667], [1.60408428E12, 0.3333333333333333], [1.60408386E12, 0.45], [1.60408416E12, 0.26666666666666666], [1.60408326E12, 0.36666666666666664], [1.60408356E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408488E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60408296E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60408314E12, 0.2833333333333333], [1.60408344E12, 0.3333333333333333], [1.60408476E12, 0.4], [1.60408446E12, 0.35], [1.60408464E12, 0.4], [1.60408434E12, 0.35], [1.60408374E12, 0.5166666666666667], [1.60408404E12, 0.36666666666666664], [1.60408362E12, 0.35], [1.60408392E12, 0.4166666666666667], [1.60408302E12, 0.48333333333333334], [1.60408332E12, 0.3333333333333333], [1.6040832E12, 0.4], [1.60408482E12, 0.36666666666666664], [1.60408422E12, 0.3333333333333333], [1.60408452E12, 0.3333333333333333], [1.6040841E12, 0.43333333333333335], [1.6040844E12, 0.35], [1.6040835E12, 0.35], [1.6040838E12, 0.38333333333333336], [1.60408338E12, 0.3333333333333333], [1.60408368E12, 0.4], [1.60408308E12, 0.36666666666666664], [1.6040847E12, 0.43333333333333335], [1.60408488E12, 0.31666666666666665], [1.60408296E12, 0.23333333333333334], [1.60408458E12, 0.36666666666666664], [1.60408398E12, 0.5166666666666667], [1.60408428E12, 0.3333333333333333], [1.60408386E12, 0.45], [1.60408416E12, 0.26666666666666666], [1.60408326E12, 0.36666666666666664], [1.60408356E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408488E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

