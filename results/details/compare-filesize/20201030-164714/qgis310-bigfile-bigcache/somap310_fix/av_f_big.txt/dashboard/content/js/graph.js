/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3046.0, "minX": 0.0, "maxY": 44999.0, "series": [{"data": [[0.0, 3046.0], [0.1, 3046.0], [0.2, 6006.0], [0.3, 8169.0], [0.4, 8169.0], [0.5, 11019.0], [0.6, 13502.0], [0.7, 15968.0], [0.8, 15968.0], [0.9, 16802.0], [1.0, 16875.0], [1.1, 16977.0], [1.2, 16977.0], [1.3, 17031.0], [1.4, 17037.0], [1.5, 17041.0], [1.6, 17041.0], [1.7, 17056.0], [1.8, 17076.0], [1.9, 17076.0], [2.0, 17111.0], [2.1, 17131.0], [2.2, 17167.0], [2.3, 17167.0], [2.4, 17173.0], [2.5, 17185.0], [2.6, 17190.0], [2.7, 17190.0], [2.8, 17201.0], [2.9, 17254.0], [3.0, 17256.0], [3.1, 17256.0], [3.2, 17315.0], [3.3, 17350.0], [3.4, 17350.0], [3.5, 17424.0], [3.6, 17429.0], [3.7, 17456.0], [3.8, 17456.0], [3.9, 17470.0], [4.0, 17500.0], [4.1, 17525.0], [4.2, 17525.0], [4.3, 17528.0], [4.4, 17555.0], [4.5, 17558.0], [4.6, 17558.0], [4.7, 17565.0], [4.8, 17579.0], [4.9, 17583.0], [5.0, 17583.0], [5.1, 17595.0], [5.2, 17599.0], [5.3, 17599.0], [5.4, 17605.0], [5.5, 17607.0], [5.6, 17608.0], [5.7, 17608.0], [5.8, 17617.0], [5.9, 17618.0], [6.0, 17633.0], [6.1, 17633.0], [6.2, 17660.0], [6.3, 17663.0], [6.4, 17669.0], [6.5, 17669.0], [6.6, 17727.0], [6.7, 17728.0], [6.8, 17728.0], [6.9, 17761.0], [7.0, 17783.0], [7.1, 17823.0], [7.2, 17823.0], [7.3, 17855.0], [7.4, 17857.0], [7.5, 17960.0], [7.6, 17960.0], [7.7, 17974.0], [7.8, 18011.0], [7.9, 18031.0], [8.0, 18031.0], [8.1, 18035.0], [8.2, 18050.0], [8.3, 18167.0], [8.4, 18167.0], [8.5, 18194.0], [8.6, 18220.0], [8.7, 18220.0], [8.8, 18223.0], [8.9, 18287.0], [9.0, 18292.0], [9.1, 18292.0], [9.2, 18294.0], [9.3, 18328.0], [9.4, 18347.0], [9.5, 18347.0], [9.6, 18406.0], [9.7, 18573.0], [9.8, 18592.0], [9.9, 18592.0], [10.0, 18622.0], [10.1, 18622.0], [10.2, 18622.0], [10.3, 18649.0], [10.4, 18778.0], [10.5, 18783.0], [10.6, 18783.0], [10.7, 18921.0], [10.8, 18928.0], [10.9, 18952.0], [11.0, 18952.0], [11.1, 18955.0], [11.2, 19033.0], [11.3, 19033.0], [11.4, 19033.0], [11.5, 19113.0], [11.6, 19145.0], [11.7, 19145.0], [11.8, 19216.0], [11.9, 19222.0], [12.0, 19317.0], [12.1, 19317.0], [12.2, 19421.0], [12.3, 19433.0], [12.4, 19446.0], [12.5, 19446.0], [12.6, 19490.0], [12.7, 19493.0], [12.8, 19526.0], [12.9, 19526.0], [13.0, 19559.0], [13.1, 19591.0], [13.2, 19621.0], [13.3, 19621.0], [13.4, 19627.0], [13.5, 19656.0], [13.6, 19656.0], [13.7, 19670.0], [13.8, 19673.0], [13.9, 19688.0], [14.0, 19688.0], [14.1, 19726.0], [14.2, 19727.0], [14.3, 19797.0], [14.4, 19797.0], [14.5, 19816.0], [14.6, 19817.0], [14.7, 19887.0], [14.8, 19887.0], [14.9, 19944.0], [15.0, 20038.0], [15.1, 20038.0], [15.2, 20085.0], [15.3, 20108.0], [15.4, 20117.0], [15.5, 20117.0], [15.6, 20151.0], [15.7, 20157.0], [15.8, 20162.0], [15.9, 20162.0], [16.0, 20186.0], [16.1, 20189.0], [16.2, 20286.0], [16.3, 20286.0], [16.4, 20347.0], [16.5, 20365.0], [16.6, 20404.0], [16.7, 20404.0], [16.8, 20499.0], [16.9, 20621.0], [17.0, 20621.0], [17.1, 20666.0], [17.2, 20778.0], [17.3, 20827.0], [17.4, 20827.0], [17.5, 20909.0], [17.6, 21064.0], [17.7, 21101.0], [17.8, 21101.0], [17.9, 21354.0], [18.0, 21378.0], [18.1, 21384.0], [18.2, 21384.0], [18.3, 21391.0], [18.4, 21394.0], [18.5, 21394.0], [18.6, 21411.0], [18.7, 21418.0], [18.8, 21438.0], [18.9, 21438.0], [19.0, 21441.0], [19.1, 21478.0], [19.2, 21514.0], [19.3, 21514.0], [19.4, 21592.0], [19.5, 21670.0], [19.6, 21672.0], [19.7, 21672.0], [19.8, 21709.0], [19.9, 21785.0], [20.0, 22015.0], [20.1, 22015.0], [20.2, 22035.0], [20.3, 22035.0], [20.4, 22035.0], [20.5, 22132.0], [20.6, 22160.0], [20.7, 22216.0], [20.8, 22216.0], [20.9, 22282.0], [21.0, 22307.0], [21.1, 22339.0], [21.2, 22339.0], [21.3, 22376.0], [21.4, 22401.0], [21.5, 22405.0], [21.6, 22405.0], [21.7, 22420.0], [21.8, 22433.0], [21.9, 22433.0], [22.0, 22466.0], [22.1, 22470.0], [22.2, 22504.0], [22.3, 22504.0], [22.4, 22532.0], [22.5, 22534.0], [22.6, 22543.0], [22.7, 22543.0], [22.8, 22565.0], [22.9, 22569.0], [23.0, 22659.0], [23.1, 22659.0], [23.2, 22687.0], [23.3, 22743.0], [23.4, 22743.0], [23.5, 22755.0], [23.6, 22759.0], [23.7, 22768.0], [23.8, 22768.0], [23.9, 22774.0], [24.0, 22794.0], [24.1, 22806.0], [24.2, 22806.0], [24.3, 22887.0], [24.4, 22892.0], [24.5, 22991.0], [24.6, 22991.0], [24.7, 23053.0], [24.8, 23112.0], [24.9, 23127.0], [25.0, 23127.0], [25.1, 23138.0], [25.2, 23144.0], [25.3, 23144.0], [25.4, 23160.0], [25.5, 23161.0], [25.6, 23190.0], [25.7, 23190.0], [25.8, 23192.0], [25.9, 23220.0], [26.0, 23246.0], [26.1, 23246.0], [26.2, 23301.0], [26.3, 23304.0], [26.4, 23339.0], [26.5, 23339.0], [26.6, 23353.0], [26.7, 23388.0], [26.8, 23388.0], [26.9, 23409.0], [27.0, 23456.0], [27.1, 23476.0], [27.2, 23476.0], [27.3, 23512.0], [27.4, 23528.0], [27.5, 23545.0], [27.6, 23545.0], [27.7, 23579.0], [27.8, 23637.0], [27.9, 23638.0], [28.0, 23638.0], [28.1, 23661.0], [28.2, 23724.0], [28.3, 23732.0], [28.4, 23732.0], [28.5, 23754.0], [28.6, 23754.0], [28.7, 23754.0], [28.8, 23760.0], [28.9, 23789.0], [29.0, 23791.0], [29.1, 23791.0], [29.2, 23813.0], [29.3, 23840.0], [29.4, 23933.0], [29.5, 23933.0], [29.6, 23935.0], [29.7, 23961.0], [29.8, 23978.0], [29.9, 23978.0], [30.0, 23981.0], [30.1, 24023.0], [30.2, 24023.0], [30.3, 24061.0], [30.4, 24084.0], [30.5, 24113.0], [30.6, 24113.0], [30.7, 24144.0], [30.8, 24159.0], [30.9, 24176.0], [31.0, 24176.0], [31.1, 24211.0], [31.2, 24214.0], [31.3, 24248.0], [31.4, 24248.0], [31.5, 24250.0], [31.6, 24278.0], [31.7, 24278.0], [31.8, 24286.0], [31.9, 24294.0], [32.0, 24296.0], [32.1, 24296.0], [32.2, 24306.0], [32.3, 24340.0], [32.4, 24343.0], [32.5, 24343.0], [32.6, 24350.0], [32.7, 24365.0], [32.8, 24376.0], [32.9, 24376.0], [33.0, 24395.0], [33.1, 24409.0], [33.2, 24424.0], [33.3, 24424.0], [33.4, 24426.0], [33.5, 24429.0], [33.6, 24429.0], [33.7, 24458.0], [33.8, 24458.0], [33.9, 24484.0], [34.0, 24484.0], [34.1, 24484.0], [34.2, 24503.0], [34.3, 24516.0], [34.4, 24516.0], [34.5, 24556.0], [34.6, 24565.0], [34.7, 24576.0], [34.8, 24576.0], [34.9, 24581.0], [35.0, 24583.0], [35.1, 24583.0], [35.2, 24602.0], [35.3, 24621.0], [35.4, 24625.0], [35.5, 24625.0], [35.6, 24641.0], [35.7, 24642.0], [35.8, 24651.0], [35.9, 24651.0], [36.0, 24688.0], [36.1, 24692.0], [36.2, 24693.0], [36.3, 24693.0], [36.4, 24696.0], [36.5, 24713.0], [36.6, 24723.0], [36.7, 24723.0], [36.8, 24823.0], [36.9, 24823.0], [37.0, 24823.0], [37.1, 24829.0], [37.2, 24856.0], [37.3, 24868.0], [37.4, 24868.0], [37.5, 24882.0], [37.6, 24898.0], [37.7, 24910.0], [37.8, 24910.0], [37.9, 24956.0], [38.0, 24964.0], [38.1, 24980.0], [38.2, 24980.0], [38.3, 25023.0], [38.4, 25025.0], [38.5, 25025.0], [38.6, 25056.0], [38.7, 25106.0], [38.8, 25107.0], [38.9, 25107.0], [39.0, 25113.0], [39.1, 25172.0], [39.2, 25251.0], [39.3, 25251.0], [39.4, 25354.0], [39.5, 25366.0], [39.6, 25377.0], [39.7, 25377.0], [39.8, 25399.0], [39.9, 25411.0], [40.0, 25415.0], [40.1, 25415.0], [40.2, 25421.0], [40.3, 25422.0], [40.4, 25422.0], [40.5, 25431.0], [40.6, 25449.0], [40.7, 25469.0], [40.8, 25469.0], [40.9, 25474.0], [41.0, 25500.0], [41.1, 25532.0], [41.2, 25532.0], [41.3, 25557.0], [41.4, 25571.0], [41.5, 25573.0], [41.6, 25573.0], [41.7, 25575.0], [41.8, 25662.0], [41.9, 25662.0], [42.0, 25680.0], [42.1, 25685.0], [42.2, 25720.0], [42.3, 25720.0], [42.4, 25739.0], [42.5, 25792.0], [42.6, 25840.0], [42.7, 25840.0], [42.8, 25889.0], [42.9, 25919.0], [43.0, 25946.0], [43.1, 25946.0], [43.2, 25994.0], [43.3, 26027.0], [43.4, 26027.0], [43.5, 26034.0], [43.6, 26051.0], [43.7, 26085.0], [43.8, 26085.0], [43.9, 26093.0], [44.0, 26106.0], [44.1, 26138.0], [44.2, 26138.0], [44.3, 26139.0], [44.4, 26167.0], [44.5, 26170.0], [44.6, 26170.0], [44.7, 26179.0], [44.8, 26192.0], [44.9, 26216.0], [45.0, 26216.0], [45.1, 26254.0], [45.2, 26261.0], [45.3, 26261.0], [45.4, 26299.0], [45.5, 26307.0], [45.6, 26307.0], [45.7, 26307.0], [45.8, 26351.0], [45.9, 26356.0], [46.0, 26361.0], [46.1, 26361.0], [46.2, 26392.0], [46.3, 26453.0], [46.4, 26484.0], [46.5, 26484.0], [46.6, 26487.0], [46.7, 26489.0], [46.8, 26489.0], [46.9, 26492.0], [47.0, 26544.0], [47.1, 26577.0], [47.2, 26577.0], [47.3, 26590.0], [47.4, 26611.0], [47.5, 26612.0], [47.6, 26612.0], [47.7, 26668.0], [47.8, 26681.0], [47.9, 26694.0], [48.0, 26694.0], [48.1, 26694.0], [48.2, 26698.0], [48.3, 26738.0], [48.4, 26738.0], [48.5, 26818.0], [48.6, 26833.0], [48.7, 26833.0], [48.8, 26898.0], [48.9, 26914.0], [49.0, 26916.0], [49.1, 26916.0], [49.2, 26925.0], [49.3, 26974.0], [49.4, 26998.0], [49.5, 26998.0], [49.6, 27013.0], [49.7, 27141.0], [49.8, 27151.0], [49.9, 27151.0], [50.0, 27179.0], [50.1, 27180.0], [50.2, 27180.0], [50.3, 27181.0], [50.4, 27196.0], [50.5, 27247.0], [50.6, 27247.0], [50.7, 27291.0], [50.8, 27322.0], [50.9, 27325.0], [51.0, 27325.0], [51.1, 27344.0], [51.2, 27355.0], [51.3, 27377.0], [51.4, 27377.0], [51.5, 27406.0], [51.6, 27453.0], [51.7, 27453.0], [51.8, 27453.0], [51.9, 27473.0], [52.0, 27487.0], [52.1, 27487.0], [52.2, 27500.0], [52.3, 27562.0], [52.4, 27589.0], [52.5, 27589.0], [52.6, 27652.0], [52.7, 27666.0], [52.8, 27747.0], [52.9, 27747.0], [53.0, 27752.0], [53.1, 27757.0], [53.2, 27783.0], [53.3, 27783.0], [53.4, 27800.0], [53.5, 27829.0], [53.6, 27829.0], [53.7, 27834.0], [53.8, 27851.0], [53.9, 27877.0], [54.0, 27877.0], [54.1, 27879.0], [54.2, 27885.0], [54.3, 27920.0], [54.4, 27920.0], [54.5, 27929.0], [54.6, 28051.0], [54.7, 28065.0], [54.8, 28065.0], [54.9, 28079.0], [55.0, 28082.0], [55.1, 28082.0], [55.2, 28090.0], [55.3, 28233.0], [55.4, 28245.0], [55.5, 28245.0], [55.6, 28246.0], [55.7, 28278.0], [55.8, 28282.0], [55.9, 28282.0], [56.0, 28305.0], [56.1, 28333.0], [56.2, 28356.0], [56.3, 28356.0], [56.4, 28402.0], [56.5, 28432.0], [56.6, 28460.0], [56.7, 28460.0], [56.8, 28496.0], [56.9, 28527.0], [57.0, 28527.0], [57.1, 28533.0], [57.2, 28606.0], [57.3, 28615.0], [57.4, 28615.0], [57.5, 28624.0], [57.6, 28631.0], [57.7, 28641.0], [57.8, 28641.0], [57.9, 28644.0], [58.0, 28698.0], [58.1, 28716.0], [58.2, 28716.0], [58.3, 28739.0], [58.4, 28745.0], [58.5, 28745.0], [58.6, 28754.0], [58.7, 28769.0], [58.8, 28780.0], [58.9, 28780.0], [59.0, 28786.0], [59.1, 28796.0], [59.2, 28798.0], [59.3, 28798.0], [59.4, 28842.0], [59.5, 28850.0], [59.6, 28852.0], [59.7, 28852.0], [59.8, 28883.0], [59.9, 28893.0], [60.0, 28894.0], [60.1, 28894.0], [60.2, 28894.0], [60.3, 28902.0], [60.4, 28902.0], [60.5, 28921.0], [60.6, 28953.0], [60.7, 28955.0], [60.8, 28955.0], [60.9, 28958.0], [61.0, 28965.0], [61.1, 28972.0], [61.2, 28972.0], [61.3, 28979.0], [61.4, 28981.0], [61.5, 28989.0], [61.6, 28989.0], [61.7, 29003.0], [61.8, 29003.0], [61.9, 29003.0], [62.0, 29010.0], [62.1, 29013.0], [62.2, 29016.0], [62.3, 29016.0], [62.4, 29024.0], [62.5, 29027.0], [62.6, 29027.0], [62.7, 29027.0], [62.8, 29028.0], [62.9, 29037.0], [63.0, 29040.0], [63.1, 29040.0], [63.2, 29041.0], [63.3, 29046.0], [63.4, 29046.0], [63.5, 29046.0], [63.6, 29055.0], [63.7, 29055.0], [63.8, 29055.0], [63.9, 29058.0], [64.0, 29061.0], [64.1, 29070.0], [64.2, 29070.0], [64.3, 29073.0], [64.4, 29080.0], [64.5, 29083.0], [64.6, 29083.0], [64.7, 29086.0], [64.8, 29087.0], [64.9, 29088.0], [65.0, 29088.0], [65.1, 29095.0], [65.2, 29096.0], [65.3, 29096.0], [65.4, 29099.0], [65.5, 29099.0], [65.6, 29101.0], [65.7, 29101.0], [65.8, 29101.0], [65.9, 29103.0], [66.0, 29118.0], [66.1, 29118.0], [66.2, 29138.0], [66.3, 29138.0], [66.4, 29142.0], [66.5, 29142.0], [66.6, 29149.0], [66.7, 29149.0], [66.8, 29149.0], [66.9, 29151.0], [67.0, 29155.0], [67.1, 29168.0], [67.2, 29168.0], [67.3, 29176.0], [67.4, 29180.0], [67.5, 29180.0], [67.6, 29180.0], [67.7, 29181.0], [67.8, 29183.0], [67.9, 29188.0], [68.0, 29188.0], [68.1, 29196.0], [68.2, 29196.0], [68.3, 29197.0], [68.4, 29197.0], [68.5, 29199.0], [68.6, 29200.0], [68.7, 29200.0], [68.8, 29202.0], [68.9, 29202.0], [69.0, 29207.0], [69.1, 29207.0], [69.2, 29209.0], [69.3, 29209.0], [69.4, 29210.0], [69.5, 29210.0], [69.6, 29210.0], [69.7, 29216.0], [69.8, 29220.0], [69.9, 29220.0], [70.0, 29224.0], [70.1, 29232.0], [70.2, 29232.0], [70.3, 29235.0], [70.4, 29236.0], [70.5, 29237.0], [70.6, 29237.0], [70.7, 29244.0], [70.8, 29247.0], [70.9, 29247.0], [71.0, 29247.0], [71.1, 29248.0], [71.2, 29251.0], [71.3, 29258.0], [71.4, 29258.0], [71.5, 29258.0], [71.6, 29270.0], [71.7, 29270.0], [71.8, 29274.0], [71.9, 29279.0], [72.0, 29285.0], [72.1, 29285.0], [72.2, 29288.0], [72.3, 29292.0], [72.4, 29294.0], [72.5, 29294.0], [72.6, 29299.0], [72.7, 29300.0], [72.8, 29303.0], [72.9, 29303.0], [73.0, 29303.0], [73.1, 29311.0], [73.2, 29313.0], [73.3, 29313.0], [73.4, 29313.0], [73.5, 29316.0], [73.6, 29316.0], [73.7, 29321.0], [73.8, 29322.0], [73.9, 29330.0], [74.0, 29330.0], [74.1, 29339.0], [74.2, 29342.0], [74.3, 29344.0], [74.4, 29344.0], [74.5, 29347.0], [74.6, 29350.0], [74.7, 29358.0], [74.8, 29358.0], [74.9, 29360.0], [75.0, 29361.0], [75.1, 29361.0], [75.2, 29369.0], [75.3, 29375.0], [75.4, 29378.0], [75.5, 29378.0], [75.6, 29379.0], [75.7, 29390.0], [75.8, 29396.0], [75.9, 29396.0], [76.0, 29398.0], [76.1, 29398.0], [76.2, 29399.0], [76.3, 29399.0], [76.4, 29400.0], [76.5, 29405.0], [76.6, 29408.0], [76.7, 29408.0], [76.8, 29415.0], [76.9, 29416.0], [77.0, 29416.0], [77.1, 29416.0], [77.2, 29417.0], [77.3, 29417.0], [77.4, 29417.0], [77.5, 29418.0], [77.6, 29418.0], [77.7, 29422.0], [77.8, 29422.0], [77.9, 29426.0], [78.0, 29431.0], [78.1, 29431.0], [78.2, 29431.0], [78.3, 29435.0], [78.4, 29436.0], [78.5, 29436.0], [78.6, 29437.0], [78.7, 29442.0], [78.8, 29448.0], [78.9, 29448.0], [79.0, 29450.0], [79.1, 29451.0], [79.2, 29452.0], [79.3, 29452.0], [79.4, 29468.0], [79.5, 29476.0], [79.6, 29483.0], [79.7, 29483.0], [79.8, 29486.0], [79.9, 29493.0], [80.0, 29493.0], [80.1, 29493.0], [80.2, 29500.0], [80.3, 29500.0], [80.4, 29500.0], [80.5, 29512.0], [80.6, 29514.0], [80.7, 29515.0], [80.8, 29515.0], [80.9, 29515.0], [81.0, 29516.0], [81.1, 29520.0], [81.2, 29520.0], [81.3, 29528.0], [81.4, 29529.0], [81.5, 29530.0], [81.6, 29530.0], [81.7, 29531.0], [81.8, 29533.0], [81.9, 29533.0], [82.0, 29537.0], [82.1, 29544.0], [82.2, 29545.0], [82.3, 29545.0], [82.4, 29552.0], [82.5, 29554.0], [82.6, 29558.0], [82.7, 29558.0], [82.8, 29561.0], [82.9, 29563.0], [83.0, 29584.0], [83.1, 29584.0], [83.2, 29594.0], [83.3, 29601.0], [83.4, 29601.0], [83.5, 29608.0], [83.6, 29625.0], [83.7, 29625.0], [83.8, 29625.0], [83.9, 29627.0], [84.0, 29629.0], [84.1, 29630.0], [84.2, 29630.0], [84.3, 29641.0], [84.4, 29646.0], [84.5, 29646.0], [84.6, 29646.0], [84.7, 29650.0], [84.8, 29653.0], [84.9, 29670.0], [85.0, 29670.0], [85.1, 29671.0], [85.2, 29683.0], [85.3, 29683.0], [85.4, 29696.0], [85.5, 29700.0], [85.6, 29709.0], [85.7, 29709.0], [85.8, 29717.0], [85.9, 29722.0], [86.0, 29729.0], [86.1, 29729.0], [86.2, 29738.0], [86.3, 29763.0], [86.4, 29770.0], [86.5, 29770.0], [86.6, 29784.0], [86.7, 29784.0], [86.8, 29784.0], [86.9, 29793.0], [87.0, 29801.0], [87.1, 29804.0], [87.2, 29804.0], [87.3, 29809.0], [87.4, 29809.0], [87.5, 29815.0], [87.6, 29815.0], [87.7, 29827.0], [87.8, 29828.0], [87.9, 29842.0], [88.0, 29842.0], [88.1, 29849.0], [88.2, 29855.0], [88.3, 29859.0], [88.4, 29859.0], [88.5, 29878.0], [88.6, 29899.0], [88.7, 29899.0], [88.8, 29907.0], [88.9, 29907.0], [89.0, 29914.0], [89.1, 29914.0], [89.2, 29915.0], [89.3, 29923.0], [89.4, 29953.0], [89.5, 29953.0], [89.6, 29962.0], [89.7, 29966.0], [89.8, 29973.0], [89.9, 29973.0], [90.0, 29973.0], [90.1, 29973.0], [90.2, 29973.0], [90.3, 29989.0], [90.4, 30003.0], [90.5, 30006.0], [90.6, 30006.0], [90.7, 30008.0], [90.8, 30013.0], [90.9, 30014.0], [91.0, 30014.0], [91.1, 30016.0], [91.2, 30022.0], [91.3, 30030.0], [91.4, 30030.0], [91.5, 30057.0], [91.6, 30112.0], [91.7, 30112.0], [91.8, 30141.0], [91.9, 30185.0], [92.0, 30201.0], [92.1, 30201.0], [92.2, 30328.0], [92.3, 30344.0], [92.4, 30402.0], [92.5, 30402.0], [92.6, 30440.0], [92.7, 30461.0], [92.8, 30498.0], [92.9, 30498.0], [93.0, 30504.0], [93.1, 30622.0], [93.2, 30696.0], [93.3, 30696.0], [93.4, 30798.0], [93.5, 30850.0], [93.6, 30850.0], [93.7, 31230.0], [93.8, 31393.0], [93.9, 31467.0], [94.0, 31467.0], [94.1, 31474.0], [94.2, 31508.0], [94.3, 31914.0], [94.4, 31914.0], [94.5, 31939.0], [94.6, 31970.0], [94.7, 32153.0], [94.8, 32153.0], [94.9, 32253.0], [95.0, 32320.0], [95.1, 32320.0], [95.2, 32349.0], [95.3, 32455.0], [95.4, 32645.0], [95.5, 32645.0], [95.6, 32870.0], [95.7, 33038.0], [95.8, 33379.0], [95.9, 33379.0], [96.0, 33717.0], [96.1, 33983.0], [96.2, 34156.0], [96.3, 34156.0], [96.4, 34176.0], [96.5, 34597.0], [96.6, 35204.0], [96.7, 35204.0], [96.8, 35295.0], [96.9, 35538.0], [97.0, 35538.0], [97.1, 35746.0], [97.2, 36479.0], [97.3, 36515.0], [97.4, 36515.0], [97.5, 37553.0], [97.6, 37791.0], [97.7, 37952.0], [97.8, 37952.0], [97.9, 38739.0], [98.0, 38867.0], [98.1, 39432.0], [98.2, 39432.0], [98.3, 40478.0], [98.4, 41079.0], [98.5, 41079.0], [98.6, 41513.0], [98.7, 41654.0], [98.8, 42154.0], [98.9, 42154.0], [99.0, 42662.0], [99.1, 42968.0], [99.2, 43476.0], [99.3, 43476.0], [99.4, 43507.0], [99.5, 43908.0], [99.6, 44319.0], [99.7, 44319.0], [99.8, 44595.0], [99.9, 44999.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 30.0, "series": [{"data": [[34500.0, 1.0], [33900.0, 1.0], [33300.0, 1.0], [34100.0, 2.0], [33700.0, 1.0], [36500.0, 1.0], [35500.0, 1.0], [35700.0, 1.0], [37900.0, 1.0], [37700.0, 1.0], [38700.0, 1.0], [37500.0, 1.0], [41500.0, 1.0], [42900.0, 1.0], [42100.0, 1.0], [43500.0, 1.0], [43900.0, 1.0], [44900.0, 1.0], [44500.0, 1.0], [44300.0, 1.0], [3000.0, 1.0], [6000.0, 1.0], [8100.0, 1.0], [11000.0, 1.0], [13500.0, 1.0], [15900.0, 1.0], [17100.0, 6.0], [17400.0, 4.0], [17000.0, 5.0], [17200.0, 3.0], [17300.0, 2.0], [16900.0, 1.0], [16800.0, 2.0], [18200.0, 5.0], [18000.0, 4.0], [17900.0, 2.0], [17700.0, 4.0], [17500.0, 10.0], [17600.0, 9.0], [17800.0, 3.0], [18100.0, 2.0], [18300.0, 2.0], [18400.0, 1.0], [18600.0, 3.0], [19400.0, 5.0], [18700.0, 2.0], [18900.0, 4.0], [18500.0, 2.0], [19200.0, 2.0], [19300.0, 1.0], [19100.0, 2.0], [19000.0, 2.0], [20400.0, 2.0], [20100.0, 7.0], [19600.0, 6.0], [20000.0, 2.0], [19500.0, 3.0], [19800.0, 3.0], [19900.0, 1.0], [19700.0, 3.0], [20300.0, 2.0], [20200.0, 1.0], [21300.0, 5.0], [20600.0, 2.0], [21400.0, 5.0], [20700.0, 1.0], [20800.0, 1.0], [21500.0, 2.0], [21000.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [22000.0, 3.0], [22400.0, 6.0], [22500.0, 6.0], [22100.0, 2.0], [22300.0, 3.0], [21700.0, 2.0], [22200.0, 2.0], [21600.0, 2.0], [23300.0, 5.0], [23500.0, 4.0], [23100.0, 8.0], [23200.0, 2.0], [22600.0, 2.0], [23400.0, 3.0], [22700.0, 6.0], [22900.0, 1.0], [22800.0, 3.0], [23000.0, 1.0], [24500.0, 7.0], [24000.0, 3.0], [23600.0, 3.0], [24200.0, 8.0], [24300.0, 7.0], [24400.0, 8.0], [23700.0, 7.0], [23900.0, 5.0], [24100.0, 4.0], [23800.0, 2.0], [25400.0, 8.0], [25500.0, 6.0], [24600.0, 10.0], [24900.0, 4.0], [25100.0, 4.0], [24800.0, 7.0], [24700.0, 2.0], [25300.0, 4.0], [25000.0, 3.0], [25200.0, 1.0], [26500.0, 3.0], [25600.0, 3.0], [26100.0, 7.0], [26200.0, 4.0], [26600.0, 7.0], [26300.0, 6.0], [26400.0, 5.0], [26000.0, 5.0], [25900.0, 3.0], [25700.0, 3.0], [25800.0, 2.0], [27400.0, 5.0], [27500.0, 3.0], [26900.0, 5.0], [27000.0, 1.0], [26800.0, 3.0], [27200.0, 2.0], [27100.0, 6.0], [27300.0, 5.0], [27600.0, 2.0], [26700.0, 1.0], [28500.0, 2.0], [27700.0, 4.0], [27800.0, 7.0], [28000.0, 5.0], [28200.0, 5.0], [28400.0, 4.0], [28600.0, 7.0], [28300.0, 3.0], [27900.0, 2.0], [28800.0, 7.0], [29000.0, 29.0], [29600.0, 16.0], [29500.0, 23.0], [29200.0, 30.0], [28900.0, 10.0], [28700.0, 9.0], [29100.0, 22.0], [29300.0, 27.0], [29400.0, 28.0], [29800.0, 13.0], [30600.0, 2.0], [29700.0, 11.0], [29900.0, 12.0], [30300.0, 2.0], [30700.0, 1.0], [30500.0, 1.0], [30400.0, 4.0], [30200.0, 1.0], [30000.0, 9.0], [30100.0, 3.0], [30800.0, 1.0], [31400.0, 2.0], [31300.0, 1.0], [31500.0, 1.0], [31200.0, 1.0], [31900.0, 3.0], [32300.0, 2.0], [32200.0, 1.0], [32400.0, 1.0], [32100.0, 1.0], [32600.0, 1.0], [33000.0, 1.0], [32800.0, 1.0], [36400.0, 1.0], [35200.0, 2.0], [38800.0, 1.0], [39400.0, 1.0], [40400.0, 1.0], [41600.0, 1.0], [42600.0, 1.0], [41000.0, 1.0], [43400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.25, "minX": 1.6040787E12, "maxY": 10.0, "series": [{"data": [[1.6040787E12, 10.0], [1.604079E12, 10.0], [1.60408062E12, 6.25], [1.6040793E12, 10.0], [1.6040796E12, 10.0], [1.6040799E12, 10.0], [1.6040802E12, 10.0], [1.60407888E12, 10.0], [1.6040805E12, 10.0], [1.60407918E12, 10.0], [1.60407948E12, 10.0], [1.60407978E12, 10.0], [1.60408008E12, 10.0], [1.60407876E12, 10.0], [1.60408038E12, 10.0], [1.60407906E12, 10.0], [1.60407936E12, 10.0], [1.60407966E12, 10.0], [1.60407996E12, 10.0], [1.60408056E12, 10.0], [1.60408026E12, 10.0], [1.60407894E12, 10.0], [1.60407924E12, 10.0], [1.60407954E12, 10.0], [1.60407984E12, 10.0], [1.60408044E12, 10.0], [1.60408014E12, 10.0], [1.60407882E12, 10.0], [1.60407912E12, 10.0], [1.60407942E12, 10.0], [1.60407972E12, 10.0], [1.60408002E12, 10.0], [1.60408032E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408062E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17037.0, "minX": 1.0, "maxY": 26266.8994490358, "series": [{"data": [[8.0, 17167.0], [4.0, 17041.0], [2.0, 17076.0], [1.0, 17579.0], [9.0, 17190.0], [10.0, 26266.8994490358], [5.0, 17131.0], [6.0, 17173.0], [3.0, 17037.0], [7.0, 17185.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26155.57551020407]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 80.71666666666667, "minX": 1.6040787E12, "maxY": 212817.18333333332, "series": [{"data": [[1.6040787E12, 212817.18333333332], [1.604079E12, 48587.61666666667], [1.60408062E12, 11172.783333333333], [1.6040793E12, 45579.96666666667], [1.6040796E12, 156112.25], [1.6040799E12, 32044.716666666667], [1.6040802E12, 43667.35], [1.60407888E12, 58915.01666666667], [1.6040805E12, 143324.81666666668], [1.60407918E12, 47517.25], [1.60407948E12, 174458.41666666666], [1.60407978E12, 66626.55], [1.60408008E12, 45716.28333333333], [1.60407876E12, 65582.05], [1.60408038E12, 25840.916666666668], [1.60407906E12, 44630.35], [1.60407936E12, 37797.23333333333], [1.60407966E12, 147214.41666666666], [1.60407996E12, 43223.48333333333], [1.60408056E12, 76515.26666666666], [1.60408026E12, 52407.9], [1.60407894E12, 69878.9], [1.60407924E12, 55869.666666666664], [1.60407954E12, 66286.63333333333], [1.60407984E12, 72105.25], [1.60408044E12, 39450.71666666667], [1.60408014E12, 56176.96666666667], [1.60407882E12, 144986.85], [1.60407912E12, 48722.96666666667], [1.60407942E12, 32534.883333333335], [1.60407972E12, 66032.65], [1.60408002E12, 51664.96666666667], [1.60408032E12, 40008.816666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6040787E12, 132.41666666666666], [1.604079E12, 160.7], [1.60408062E12, 80.71666666666667], [1.6040793E12, 153.33333333333334], [1.6040796E12, 178.53333333333333], [1.6040799E12, 124.2], [1.6040802E12, 146.1], [1.60407888E12, 146.81666666666666], [1.6040805E12, 177.25], [1.60407918E12, 153.43333333333334], [1.60407948E12, 217.83333333333334], [1.60407978E12, 178.15], [1.60408008E12, 153.4], [1.60407876E12, 221.21666666666667], [1.60408038E12, 175.08333333333334], [1.60407906E12, 146.13333333333333], [1.60407936E12, 153.38333333333333], [1.60407966E12, 196.76666666666668], [1.60407996E12, 146.11666666666667], [1.60408056E12, 172.05], [1.60408026E12, 153.4], [1.60407894E12, 169.26666666666668], [1.60407924E12, 146.38333333333333], [1.60407954E12, 181.18333333333334], [1.60407984E12, 176.51666666666668], [1.60408044E12, 191.3], [1.60408014E12, 154.41666666666666], [1.60407882E12, 136.23333333333332], [1.60407912E12, 146.11666666666667], [1.60407942E12, 175.18333333333334], [1.60407972E12, 188.96666666666667], [1.60408002E12, 146.16666666666666], [1.60408032E12, 160.51666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408062E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17102.75, "minX": 1.6040787E12, "maxY": 36213.75000000001, "series": [{"data": [[1.6040787E12, 19680.11111111111], [1.604079E12, 27871.72727272727], [1.60408062E12, 17102.75], [1.6040793E12, 29555.714285714286], [1.6040796E12, 22607.200000000004], [1.6040799E12, 36063.47058823529], [1.6040802E12, 29175.649999999994], [1.60407888E12, 36213.75000000001], [1.6040805E12, 22950.319999999996], [1.60407918E12, 29147.047619047615], [1.60407948E12, 19234.833333333332], [1.60407978E12, 27040.70833333333], [1.60408008E12, 29374.714285714286], [1.60407876E12, 20933.741935483875], [1.60408038E12, 25085.000000000004], [1.60407906E12, 29824.600000000006], [1.60407936E12, 28899.095238095244], [1.60407966E12, 23395.666666666668], [1.60407996E12, 29343.55], [1.60408056E12, 27584.833333333332], [1.60408026E12, 29114.000000000004], [1.60407894E12, 24257.695652173912], [1.60407924E12, 29288.399999999998], [1.60407954E12, 25052.26923076923], [1.60407984E12, 23954.125], [1.60408044E12, 23717.5], [1.60408014E12, 28345.380952380947], [1.60407882E12, 25448.22222222222], [1.60407912E12, 29308.600000000002], [1.60407942E12, 25826.08333333333], [1.60407972E12, 19109.85185185185], [1.60408002E12, 29742.55], [1.60408032E12, 27870.636363636364]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408062E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17100.833333333336, "minX": 1.6040787E12, "maxY": 36212.30000000001, "series": [{"data": [[1.6040787E12, 19675.444444444438], [1.604079E12, 27870.590909090908], [1.60408062E12, 17100.833333333336], [1.6040793E12, 29554.619047619046], [1.6040796E12, 22603.479999999996], [1.6040799E12, 36062.882352941175], [1.6040802E12, 29174.35], [1.60407888E12, 36212.30000000001], [1.6040805E12, 22946.519999999997], [1.60407918E12, 29145.90476190476], [1.60407948E12, 19231.166666666664], [1.60407978E12, 27039.16666666666], [1.60408008E12, 29373.285714285717], [1.60407876E12, 20932.548387096776], [1.60408038E12, 25084.458333333336], [1.60407906E12, 29823.6], [1.60407936E12, 28898.142857142855], [1.60407966E12, 23392.703703703708], [1.60407996E12, 29342.349999999995], [1.60408056E12, 27582.541666666664], [1.60408026E12, 29112.619047619046], [1.60407894E12, 24255.999999999996], [1.60407924E12, 29287.05], [1.60407954E12, 25049.846153846156], [1.60407984E12, 23952.625000000004], [1.60408044E12, 23716.80769230769], [1.60408014E12, 28343.85714285714], [1.60407882E12, 25444.222222222226], [1.60407912E12, 29307.100000000002], [1.60407942E12, 25825.54166666667], [1.60407972E12, 19108.03703703704], [1.60408002E12, 29740.9], [1.60408032E12, 27869.68181818182]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408062E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.08333333333333334, "minX": 1.6040787E12, "maxY": 4.944444444444444, "series": [{"data": [[1.6040787E12, 4.944444444444444], [1.604079E12, 0.6363636363636365], [1.60408062E12, 0.08333333333333334], [1.6040793E12, 0.23809523809523814], [1.6040796E12, 0.32000000000000006], [1.6040799E12, 0.1764705882352941], [1.6040802E12, 0.55], [1.60407888E12, 0.7499999999999999], [1.6040805E12, 0.56], [1.60407918E12, 0.6666666666666667], [1.60407948E12, 0.4333333333333334], [1.60407978E12, 0.41666666666666663], [1.60408008E12, 0.19047619047619047], [1.60407876E12, 0.5161290322580645], [1.60408038E12, 0.5], [1.60407906E12, 0.6], [1.60407936E12, 0.5238095238095238], [1.60407966E12, 0.2962962962962963], [1.60407996E12, 0.65], [1.60408056E12, 0.41666666666666663], [1.60408026E12, 0.38095238095238093], [1.60407894E12, 0.43478260869565216], [1.60407924E12, 0.65], [1.60407954E12, 0.4230769230769231], [1.60407984E12, 0.49999999999999994], [1.60408044E12, 0.42307692307692313], [1.60408014E12, 0.5714285714285714], [1.60407882E12, 0.22222222222222224], [1.60407912E12, 0.20000000000000004], [1.60407942E12, 0.5833333333333334], [1.60407972E12, 0.40740740740740744], [1.60408002E12, 0.7000000000000001], [1.60408032E12, 0.31818181818181823]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408062E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3046.0, "minX": 1.6040787E12, "maxY": 44999.0, "series": [{"data": [[1.6040787E12, 27783.0], [1.604079E12, 30622.0], [1.60408062E12, 17579.0], [1.6040793E12, 30014.0], [1.6040796E12, 25792.0], [1.6040799E12, 43476.0], [1.6040802E12, 29738.0], [1.60407888E12, 44999.0], [1.6040805E12, 28356.0], [1.60407918E12, 29451.0], [1.60407948E12, 23112.0], [1.60407978E12, 31939.0], [1.60408008E12, 29544.0], [1.60407876E12, 27879.0], [1.60408038E12, 28533.0], [1.60407906E12, 30504.0], [1.60407936E12, 30185.0], [1.60407966E12, 28496.0], [1.60407996E12, 30141.0], [1.60408056E12, 38867.0], [1.60408026E12, 29709.0], [1.60407894E12, 25573.0], [1.60407924E12, 29953.0], [1.60407954E12, 32455.0], [1.60407984E12, 25662.0], [1.60408044E12, 28065.0], [1.60408014E12, 29232.0], [1.60407882E12, 39432.0], [1.60407912E12, 29529.0], [1.60407942E12, 28883.0], [1.60407972E12, 28615.0], [1.60408002E12, 30022.0], [1.60408032E12, 29417.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6040787E12, 3046.0], [1.604079E12, 25106.0], [1.60408062E12, 16802.0], [1.6040793E12, 29180.0], [1.6040796E12, 17565.0], [1.6040799E12, 27487.0], [1.6040802E12, 28631.0], [1.60407888E12, 26392.0], [1.6040805E12, 18573.0], [1.60407918E12, 28786.0], [1.60407948E12, 17111.0], [1.60407978E12, 22405.0], [1.60408008E12, 29010.0], [1.60407876E12, 17528.0], [1.60408038E12, 21709.0], [1.60407906E12, 28739.0], [1.60407936E12, 26487.0], [1.60407966E12, 18921.0], [1.60407996E12, 26453.0], [1.60408056E12, 17056.0], [1.60408026E12, 28641.0], [1.60407894E12, 22401.0], [1.60407924E12, 28698.0], [1.60407954E12, 17525.0], [1.60407984E12, 22035.0], [1.60408044E12, 20621.0], [1.60408014E12, 27180.0], [1.60407882E12, 20085.0], [1.60407912E12, 28981.0], [1.60407942E12, 24144.0], [1.60407972E12, 17031.0], [1.60408002E12, 29251.0], [1.60408032E12, 24248.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6040787E12, 3046.0], [1.604079E12, 25106.0], [1.60408062E12, 16802.0], [1.6040793E12, 29180.0], [1.6040796E12, 17565.0], [1.6040799E12, 27487.0], [1.6040802E12, 28631.0], [1.60407888E12, 26392.0], [1.6040805E12, 18573.0], [1.60407918E12, 28786.0], [1.60407948E12, 17111.0], [1.60407978E12, 22405.0], [1.60408008E12, 29010.0], [1.60407876E12, 17528.0], [1.60408038E12, 21709.0], [1.60407906E12, 28739.0], [1.60407936E12, 26487.0], [1.60407966E12, 18921.0], [1.60407996E12, 26453.0], [1.60408056E12, 17056.0], [1.60408026E12, 28641.0], [1.60407894E12, 22401.0], [1.60407924E12, 28698.0], [1.60407954E12, 17525.0], [1.60407984E12, 22035.0], [1.60408044E12, 20621.0], [1.60408014E12, 27180.0], [1.60407882E12, 20085.0], [1.60407912E12, 28981.0], [1.60407942E12, 24144.0], [1.60407972E12, 17031.0], [1.60408002E12, 29251.0], [1.60408032E12, 24248.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6040787E12, 3046.0], [1.604079E12, 25106.0], [1.60408062E12, 16802.0], [1.6040793E12, 29180.0], [1.6040796E12, 17565.0], [1.6040799E12, 27487.0], [1.6040802E12, 28631.0], [1.60407888E12, 26392.0], [1.6040805E12, 18573.0], [1.60407918E12, 28786.0], [1.60407948E12, 17111.0], [1.60407978E12, 22405.0], [1.60408008E12, 29010.0], [1.60407876E12, 17528.0], [1.60408038E12, 21709.0], [1.60407906E12, 28739.0], [1.60407936E12, 26487.0], [1.60407966E12, 18921.0], [1.60407996E12, 26453.0], [1.60408056E12, 17056.0], [1.60408026E12, 28641.0], [1.60407894E12, 22401.0], [1.60407924E12, 28698.0], [1.60407954E12, 17525.0], [1.60407984E12, 22035.0], [1.60408044E12, 20621.0], [1.60408014E12, 27180.0], [1.60407882E12, 20085.0], [1.60407912E12, 28981.0], [1.60407942E12, 24144.0], [1.60407972E12, 17031.0], [1.60408002E12, 29251.0], [1.60408032E12, 24248.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6040787E12, 3046.0], [1.604079E12, 25106.0], [1.60408062E12, 16802.0], [1.6040793E12, 29180.0], [1.6040796E12, 17565.0], [1.6040799E12, 27487.0], [1.6040802E12, 28631.0], [1.60407888E12, 26392.0], [1.6040805E12, 18573.0], [1.60407918E12, 28786.0], [1.60407948E12, 17111.0], [1.60407978E12, 22405.0], [1.60408008E12, 29010.0], [1.60407876E12, 17528.0], [1.60408038E12, 21709.0], [1.60407906E12, 28739.0], [1.60407936E12, 26487.0], [1.60407966E12, 18921.0], [1.60407996E12, 26453.0], [1.60408056E12, 17056.0], [1.60408026E12, 28641.0], [1.60407894E12, 22401.0], [1.60407924E12, 28698.0], [1.60407954E12, 17525.0], [1.60407984E12, 22035.0], [1.60408044E12, 20621.0], [1.60408014E12, 27180.0], [1.60407882E12, 20085.0], [1.60407912E12, 28981.0], [1.60407942E12, 24144.0], [1.60407972E12, 17031.0], [1.60408002E12, 29251.0], [1.60408032E12, 24248.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6040787E12, 24077.5], [1.604079E12, 27933.5], [1.60408062E12, 17103.5], [1.6040793E12, 29545.0], [1.6040796E12, 23840.0], [1.6040799E12, 35538.0], [1.6040802E12, 29202.5], [1.60407888E12, 34290.0], [1.6040805E12, 21391.0], [1.60407918E12, 29138.0], [1.60407948E12, 18940.0], [1.60407978E12, 27195.0], [1.60408008E12, 29415.0], [1.60407876E12, 20117.0], [1.60408038E12, 25371.5], [1.60407906E12, 29887.5], [1.60407936E12, 29516.0], [1.60407966E12, 24395.0], [1.60407996E12, 29626.0], [1.60408056E12, 29364.5], [1.60408026E12, 29086.0], [1.60407894E12, 24458.0], [1.60407924E12, 29378.0], [1.60407954E12, 23098.5], [1.60407984E12, 23875.0], [1.60408044E12, 23667.0], [1.60408014E12, 28624.0], [1.60407882E12, 24092.5], [1.60407912E12, 29310.5], [1.60407942E12, 25814.0], [1.60407972E12, 17855.0], [1.60408002E12, 29806.5], [1.60408032E12, 28998.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408062E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27179.0, "minX": 1.0, "maxY": 27179.0, "series": [{"data": [[1.0, 27179.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27178.0, "minX": 1.0, "maxY": 27178.0, "series": [{"data": [[1.0, 27178.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6040787E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6040787E12, 0.4666666666666667], [1.604079E12, 0.36666666666666664], [1.60408062E12, 0.03333333333333333], [1.6040793E12, 0.35], [1.6040796E12, 0.4166666666666667], [1.6040799E12, 0.2833333333333333], [1.6040802E12, 0.3333333333333333], [1.60407888E12, 0.3333333333333333], [1.6040805E12, 0.4166666666666667], [1.60407918E12, 0.35], [1.60407948E12, 0.5], [1.60407978E12, 0.4], [1.60408008E12, 0.35], [1.60407876E12, 0.5166666666666667], [1.60408038E12, 0.4], [1.60407906E12, 0.3333333333333333], [1.60407936E12, 0.35], [1.60407966E12, 0.45], [1.60407996E12, 0.3333333333333333], [1.60408056E12, 0.4], [1.60408026E12, 0.35], [1.60407894E12, 0.38333333333333336], [1.60407924E12, 0.3333333333333333], [1.60407954E12, 0.43333333333333335], [1.60407984E12, 0.4], [1.60408044E12, 0.43333333333333335], [1.60408014E12, 0.35], [1.60407882E12, 0.3], [1.60407912E12, 0.3333333333333333], [1.60407942E12, 0.4], [1.60407972E12, 0.45], [1.60408002E12, 0.3333333333333333], [1.60408032E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408062E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.6040787E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6040787E12, 0.3], [1.604079E12, 0.36666666666666664], [1.60408062E12, 0.2], [1.6040793E12, 0.35], [1.6040796E12, 0.4166666666666667], [1.6040799E12, 0.2833333333333333], [1.6040802E12, 0.3333333333333333], [1.60407888E12, 0.3333333333333333], [1.6040805E12, 0.4166666666666667], [1.60407918E12, 0.35], [1.60407948E12, 0.5], [1.60407978E12, 0.4], [1.60408008E12, 0.35], [1.60407876E12, 0.5166666666666667], [1.60408038E12, 0.4], [1.60407906E12, 0.3333333333333333], [1.60407936E12, 0.35], [1.60407966E12, 0.45], [1.60407996E12, 0.3333333333333333], [1.60408056E12, 0.4], [1.60408026E12, 0.35], [1.60407894E12, 0.38333333333333336], [1.60407924E12, 0.3333333333333333], [1.60407954E12, 0.43333333333333335], [1.60407984E12, 0.4], [1.60408044E12, 0.43333333333333335], [1.60408014E12, 0.35], [1.60407882E12, 0.3], [1.60407912E12, 0.3333333333333333], [1.60407942E12, 0.4], [1.60407972E12, 0.45], [1.60408002E12, 0.3333333333333333], [1.60408032E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408062E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.6040787E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6040787E12, 0.3], [1.604079E12, 0.36666666666666664], [1.60408062E12, 0.2], [1.6040793E12, 0.35], [1.6040796E12, 0.4166666666666667], [1.6040799E12, 0.2833333333333333], [1.6040802E12, 0.3333333333333333], [1.60407888E12, 0.3333333333333333], [1.6040805E12, 0.4166666666666667], [1.60407918E12, 0.35], [1.60407948E12, 0.5], [1.60407978E12, 0.4], [1.60408008E12, 0.35], [1.60407876E12, 0.5166666666666667], [1.60408038E12, 0.4], [1.60407906E12, 0.3333333333333333], [1.60407936E12, 0.35], [1.60407966E12, 0.45], [1.60407996E12, 0.3333333333333333], [1.60408056E12, 0.4], [1.60408026E12, 0.35], [1.60407894E12, 0.38333333333333336], [1.60407924E12, 0.3333333333333333], [1.60407954E12, 0.43333333333333335], [1.60407984E12, 0.4], [1.60408044E12, 0.43333333333333335], [1.60408014E12, 0.35], [1.60407882E12, 0.3], [1.60407912E12, 0.3333333333333333], [1.60407942E12, 0.4], [1.60407972E12, 0.45], [1.60408002E12, 0.3333333333333333], [1.60408032E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408062E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.6040787E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6040787E12, 0.3], [1.604079E12, 0.36666666666666664], [1.60408062E12, 0.2], [1.6040793E12, 0.35], [1.6040796E12, 0.4166666666666667], [1.6040799E12, 0.2833333333333333], [1.6040802E12, 0.3333333333333333], [1.60407888E12, 0.3333333333333333], [1.6040805E12, 0.4166666666666667], [1.60407918E12, 0.35], [1.60407948E12, 0.5], [1.60407978E12, 0.4], [1.60408008E12, 0.35], [1.60407876E12, 0.5166666666666667], [1.60408038E12, 0.4], [1.60407906E12, 0.3333333333333333], [1.60407936E12, 0.35], [1.60407966E12, 0.45], [1.60407996E12, 0.3333333333333333], [1.60408056E12, 0.4], [1.60408026E12, 0.35], [1.60407894E12, 0.38333333333333336], [1.60407924E12, 0.3333333333333333], [1.60407954E12, 0.43333333333333335], [1.60407984E12, 0.4], [1.60408044E12, 0.43333333333333335], [1.60408014E12, 0.35], [1.60407882E12, 0.3], [1.60407912E12, 0.3333333333333333], [1.60407942E12, 0.4], [1.60407972E12, 0.45], [1.60408002E12, 0.3333333333333333], [1.60408032E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408062E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

