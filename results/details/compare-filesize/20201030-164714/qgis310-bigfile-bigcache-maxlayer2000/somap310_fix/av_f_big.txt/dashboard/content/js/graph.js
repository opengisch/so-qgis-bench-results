/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3150.0, "minX": 0.0, "maxY": 44955.0, "series": [{"data": [[0.0, 3150.0], [0.1, 3150.0], [0.2, 5402.0], [0.3, 8495.0], [0.4, 8495.0], [0.5, 11364.0], [0.6, 13872.0], [0.7, 16421.0], [0.8, 16421.0], [0.9, 16696.0], [1.0, 16738.0], [1.1, 16760.0], [1.2, 16760.0], [1.3, 16806.0], [1.4, 16899.0], [1.5, 16948.0], [1.6, 16948.0], [1.7, 16985.0], [1.8, 17017.0], [1.9, 17017.0], [2.0, 17028.0], [2.1, 17041.0], [2.2, 17041.0], [2.3, 17041.0], [2.4, 17078.0], [2.5, 17095.0], [2.6, 17096.0], [2.7, 17096.0], [2.8, 17114.0], [2.9, 17199.0], [3.0, 17247.0], [3.1, 17247.0], [3.2, 17273.0], [3.3, 17341.0], [3.4, 17341.0], [3.5, 17406.0], [3.6, 17429.0], [3.7, 17440.0], [3.8, 17440.0], [3.9, 17448.0], [4.0, 17487.0], [4.1, 17511.0], [4.2, 17511.0], [4.3, 17528.0], [4.4, 17530.0], [4.5, 17540.0], [4.6, 17540.0], [4.7, 17564.0], [4.8, 17569.0], [4.9, 17585.0], [5.0, 17585.0], [5.1, 17589.0], [5.2, 17597.0], [5.3, 17597.0], [5.4, 17612.0], [5.5, 17613.0], [5.6, 17616.0], [5.7, 17616.0], [5.8, 17702.0], [5.9, 17719.0], [6.0, 17726.0], [6.1, 17726.0], [6.2, 17745.0], [6.3, 17753.0], [6.4, 17775.0], [6.5, 17775.0], [6.6, 17798.0], [6.7, 17822.0], [6.8, 17822.0], [6.9, 17843.0], [7.0, 17851.0], [7.1, 17888.0], [7.2, 17888.0], [7.3, 17927.0], [7.4, 17957.0], [7.5, 17958.0], [7.6, 17958.0], [7.7, 17967.0], [7.8, 17994.0], [7.9, 18008.0], [8.0, 18008.0], [8.1, 18020.0], [8.2, 18069.0], [8.3, 18126.0], [8.4, 18126.0], [8.5, 18166.0], [8.6, 18230.0], [8.7, 18230.0], [8.8, 18245.0], [8.9, 18259.0], [9.0, 18268.0], [9.1, 18268.0], [9.2, 18278.0], [9.3, 18291.0], [9.4, 18319.0], [9.5, 18319.0], [9.6, 18379.0], [9.7, 18419.0], [9.8, 18516.0], [9.9, 18516.0], [10.0, 18574.0], [10.1, 18679.0], [10.2, 18679.0], [10.3, 18691.0], [10.4, 18715.0], [10.5, 18732.0], [10.6, 18732.0], [10.7, 18733.0], [10.8, 18776.0], [10.9, 19016.0], [11.0, 19016.0], [11.1, 19056.0], [11.2, 19382.0], [11.3, 19403.0], [11.4, 19403.0], [11.5, 19404.0], [11.6, 19433.0], [11.7, 19433.0], [11.8, 19466.0], [11.9, 19480.0], [12.0, 19551.0], [12.1, 19551.0], [12.2, 19562.0], [12.3, 19630.0], [12.4, 19641.0], [12.5, 19641.0], [12.6, 19642.0], [12.7, 19646.0], [12.8, 19681.0], [12.9, 19681.0], [13.0, 19682.0], [13.1, 19704.0], [13.2, 19707.0], [13.3, 19707.0], [13.4, 19755.0], [13.5, 19771.0], [13.6, 19771.0], [13.7, 19806.0], [13.8, 19835.0], [13.9, 19952.0], [14.0, 19952.0], [14.1, 19955.0], [14.2, 19970.0], [14.3, 20021.0], [14.4, 20021.0], [14.5, 20076.0], [14.6, 20107.0], [14.7, 20138.0], [14.8, 20138.0], [14.9, 20139.0], [15.0, 20141.0], [15.1, 20141.0], [15.2, 20154.0], [15.3, 20160.0], [15.4, 20182.0], [15.5, 20182.0], [15.6, 20210.0], [15.7, 20212.0], [15.8, 20241.0], [15.9, 20241.0], [16.0, 20336.0], [16.1, 20400.0], [16.2, 20473.0], [16.3, 20473.0], [16.4, 20557.0], [16.5, 20619.0], [16.6, 20688.0], [16.7, 20688.0], [16.8, 20749.0], [16.9, 20790.0], [17.0, 20790.0], [17.1, 20947.0], [17.2, 20991.0], [17.3, 21070.0], [17.4, 21070.0], [17.5, 21205.0], [17.6, 21207.0], [17.7, 21347.0], [17.8, 21347.0], [17.9, 21353.0], [18.0, 21392.0], [18.1, 21438.0], [18.2, 21438.0], [18.3, 21456.0], [18.4, 21471.0], [18.5, 21471.0], [18.6, 21497.0], [18.7, 21497.0], [18.8, 21523.0], [18.9, 21523.0], [19.0, 21586.0], [19.1, 21593.0], [19.2, 21624.0], [19.3, 21624.0], [19.4, 21663.0], [19.5, 21691.0], [19.6, 21766.0], [19.7, 21766.0], [19.8, 21869.0], [19.9, 22007.0], [20.0, 22030.0], [20.1, 22030.0], [20.2, 22043.0], [20.3, 22135.0], [20.4, 22135.0], [20.5, 22235.0], [20.6, 22245.0], [20.7, 22246.0], [20.8, 22246.0], [20.9, 22270.0], [21.0, 22277.0], [21.1, 22352.0], [21.2, 22352.0], [21.3, 22369.0], [21.4, 22392.0], [21.5, 22409.0], [21.6, 22409.0], [21.7, 22413.0], [21.8, 22450.0], [21.9, 22450.0], [22.0, 22458.0], [22.1, 22480.0], [22.2, 22503.0], [22.3, 22503.0], [22.4, 22512.0], [22.5, 22606.0], [22.6, 22637.0], [22.7, 22637.0], [22.8, 22681.0], [22.9, 22688.0], [23.0, 22766.0], [23.1, 22766.0], [23.2, 22784.0], [23.3, 22786.0], [23.4, 22786.0], [23.5, 22889.0], [23.6, 22890.0], [23.7, 22967.0], [23.8, 22967.0], [23.9, 22971.0], [24.0, 23017.0], [24.1, 23029.0], [24.2, 23029.0], [24.3, 23031.0], [24.4, 23086.0], [24.5, 23094.0], [24.6, 23094.0], [24.7, 23128.0], [24.8, 23132.0], [24.9, 23152.0], [25.0, 23152.0], [25.1, 23218.0], [25.2, 23263.0], [25.3, 23263.0], [25.4, 23276.0], [25.5, 23299.0], [25.6, 23308.0], [25.7, 23308.0], [25.8, 23311.0], [25.9, 23312.0], [26.0, 23313.0], [26.1, 23313.0], [26.2, 23356.0], [26.3, 23379.0], [26.4, 23435.0], [26.5, 23435.0], [26.6, 23436.0], [26.7, 23470.0], [26.8, 23470.0], [26.9, 23478.0], [27.0, 23482.0], [27.1, 23495.0], [27.2, 23495.0], [27.3, 23496.0], [27.4, 23537.0], [27.5, 23539.0], [27.6, 23539.0], [27.7, 23570.0], [27.8, 23586.0], [27.9, 23600.0], [28.0, 23600.0], [28.1, 23609.0], [28.2, 23615.0], [28.3, 23636.0], [28.4, 23636.0], [28.5, 23643.0], [28.6, 23657.0], [28.7, 23657.0], [28.8, 23658.0], [28.9, 23686.0], [29.0, 23719.0], [29.1, 23719.0], [29.2, 23720.0], [29.3, 23743.0], [29.4, 23750.0], [29.5, 23750.0], [29.6, 23755.0], [29.7, 23763.0], [29.8, 23773.0], [29.9, 23773.0], [30.0, 23784.0], [30.1, 23824.0], [30.2, 23824.0], [30.3, 23829.0], [30.4, 23841.0], [30.5, 23850.0], [30.6, 23850.0], [30.7, 23884.0], [30.8, 23894.0], [30.9, 23900.0], [31.0, 23900.0], [31.1, 23905.0], [31.2, 23923.0], [31.3, 23928.0], [31.4, 23928.0], [31.5, 23969.0], [31.6, 24023.0], [31.7, 24023.0], [31.8, 24066.0], [31.9, 24074.0], [32.0, 24091.0], [32.1, 24091.0], [32.2, 24093.0], [32.3, 24111.0], [32.4, 24117.0], [32.5, 24117.0], [32.6, 24120.0], [32.7, 24127.0], [32.8, 24133.0], [32.9, 24133.0], [33.0, 24159.0], [33.1, 24164.0], [33.2, 24169.0], [33.3, 24169.0], [33.4, 24192.0], [33.5, 24195.0], [33.6, 24195.0], [33.7, 24215.0], [33.8, 24217.0], [33.9, 24238.0], [34.0, 24238.0], [34.1, 24262.0], [34.2, 24294.0], [34.3, 24321.0], [34.4, 24321.0], [34.5, 24332.0], [34.6, 24344.0], [34.7, 24387.0], [34.8, 24387.0], [34.9, 24433.0], [35.0, 24439.0], [35.1, 24439.0], [35.2, 24443.0], [35.3, 24451.0], [35.4, 24487.0], [35.5, 24487.0], [35.6, 24496.0], [35.7, 24511.0], [35.8, 24543.0], [35.9, 24543.0], [36.0, 24593.0], [36.1, 24596.0], [36.2, 24601.0], [36.3, 24601.0], [36.4, 24606.0], [36.5, 24607.0], [36.6, 24654.0], [36.7, 24654.0], [36.8, 24654.0], [36.9, 24688.0], [37.0, 24688.0], [37.1, 24742.0], [37.2, 24767.0], [37.3, 24768.0], [37.4, 24768.0], [37.5, 24769.0], [37.6, 24776.0], [37.7, 24827.0], [37.8, 24827.0], [37.9, 24832.0], [38.0, 24835.0], [38.1, 24884.0], [38.2, 24884.0], [38.3, 24888.0], [38.4, 24912.0], [38.5, 24912.0], [38.6, 24969.0], [38.7, 24975.0], [38.8, 24982.0], [38.9, 24982.0], [39.0, 24991.0], [39.1, 24998.0], [39.2, 25003.0], [39.3, 25003.0], [39.4, 25008.0], [39.5, 25060.0], [39.6, 25102.0], [39.7, 25102.0], [39.8, 25188.0], [39.9, 25202.0], [40.0, 25278.0], [40.1, 25278.0], [40.2, 25372.0], [40.3, 25411.0], [40.4, 25411.0], [40.5, 25424.0], [40.6, 25456.0], [40.7, 25460.0], [40.8, 25460.0], [40.9, 25491.0], [41.0, 25492.0], [41.1, 25507.0], [41.2, 25507.0], [41.3, 25521.0], [41.4, 25531.0], [41.5, 25535.0], [41.6, 25535.0], [41.7, 25540.0], [41.8, 25547.0], [41.9, 25547.0], [42.0, 25557.0], [42.1, 25579.0], [42.2, 25610.0], [42.3, 25610.0], [42.4, 25665.0], [42.5, 25683.0], [42.6, 25701.0], [42.7, 25701.0], [42.8, 25718.0], [42.9, 25725.0], [43.0, 25753.0], [43.1, 25753.0], [43.2, 25797.0], [43.3, 25837.0], [43.4, 25837.0], [43.5, 25884.0], [43.6, 25892.0], [43.7, 25904.0], [43.8, 25904.0], [43.9, 25950.0], [44.0, 25956.0], [44.1, 25987.0], [44.2, 25987.0], [44.3, 25990.0], [44.4, 26000.0], [44.5, 26007.0], [44.6, 26007.0], [44.7, 26022.0], [44.8, 26050.0], [44.9, 26087.0], [45.0, 26087.0], [45.1, 26108.0], [45.2, 26128.0], [45.3, 26128.0], [45.4, 26136.0], [45.5, 26142.0], [45.6, 26157.0], [45.7, 26157.0], [45.8, 26158.0], [45.9, 26162.0], [46.0, 26176.0], [46.1, 26176.0], [46.2, 26232.0], [46.3, 26264.0], [46.4, 26268.0], [46.5, 26268.0], [46.6, 26273.0], [46.7, 26288.0], [46.8, 26288.0], [46.9, 26312.0], [47.0, 26333.0], [47.1, 26343.0], [47.2, 26343.0], [47.3, 26357.0], [47.4, 26365.0], [47.5, 26381.0], [47.6, 26381.0], [47.7, 26381.0], [47.8, 26383.0], [47.9, 26385.0], [48.0, 26385.0], [48.1, 26423.0], [48.2, 26438.0], [48.3, 26461.0], [48.4, 26461.0], [48.5, 26491.0], [48.6, 26640.0], [48.7, 26640.0], [48.8, 26729.0], [48.9, 26786.0], [49.0, 26834.0], [49.1, 26834.0], [49.2, 26883.0], [49.3, 26912.0], [49.4, 26959.0], [49.5, 26959.0], [49.6, 27103.0], [49.7, 27108.0], [49.8, 27111.0], [49.9, 27111.0], [50.0, 27118.0], [50.1, 27121.0], [50.2, 27121.0], [50.3, 27145.0], [50.4, 27165.0], [50.5, 27212.0], [50.6, 27212.0], [50.7, 27228.0], [50.8, 27275.0], [50.9, 27281.0], [51.0, 27281.0], [51.1, 27318.0], [51.2, 27320.0], [51.3, 27348.0], [51.4, 27348.0], [51.5, 27472.0], [51.6, 27474.0], [51.7, 27474.0], [51.8, 27484.0], [51.9, 27486.0], [52.0, 27501.0], [52.1, 27501.0], [52.2, 27513.0], [52.3, 27528.0], [52.4, 27541.0], [52.5, 27541.0], [52.6, 27546.0], [52.7, 27657.0], [52.8, 27658.0], [52.9, 27658.0], [53.0, 27676.0], [53.1, 27697.0], [53.2, 27703.0], [53.3, 27703.0], [53.4, 27710.0], [53.5, 27717.0], [53.6, 27717.0], [53.7, 27723.0], [53.8, 27748.0], [53.9, 27774.0], [54.0, 27774.0], [54.1, 27799.0], [54.2, 27805.0], [54.3, 27833.0], [54.4, 27833.0], [54.5, 27868.0], [54.6, 27875.0], [54.7, 27907.0], [54.8, 27907.0], [54.9, 27936.0], [55.0, 27967.0], [55.1, 27967.0], [55.2, 27976.0], [55.3, 27978.0], [55.4, 27981.0], [55.5, 27981.0], [55.6, 27993.0], [55.7, 28002.0], [55.8, 28004.0], [55.9, 28004.0], [56.0, 28004.0], [56.1, 28017.0], [56.2, 28092.0], [56.3, 28092.0], [56.4, 28126.0], [56.5, 28202.0], [56.6, 28227.0], [56.7, 28227.0], [56.8, 28235.0], [56.9, 28296.0], [57.0, 28296.0], [57.1, 28314.0], [57.2, 28326.0], [57.3, 28347.0], [57.4, 28347.0], [57.5, 28350.0], [57.6, 28368.0], [57.7, 28378.0], [57.8, 28378.0], [57.9, 28386.0], [58.0, 28406.0], [58.1, 28456.0], [58.2, 28456.0], [58.3, 28460.0], [58.4, 28469.0], [58.5, 28469.0], [58.6, 28485.0], [58.7, 28494.0], [58.8, 28553.0], [58.9, 28553.0], [59.0, 28558.0], [59.1, 28561.0], [59.2, 28561.0], [59.3, 28561.0], [59.4, 28563.0], [59.5, 28597.0], [59.6, 28615.0], [59.7, 28615.0], [59.8, 28623.0], [59.9, 28633.0], [60.0, 28649.0], [60.1, 28649.0], [60.2, 28698.0], [60.3, 28735.0], [60.4, 28735.0], [60.5, 28748.0], [60.6, 28773.0], [60.7, 28778.0], [60.8, 28778.0], [60.9, 28784.0], [61.0, 28811.0], [61.1, 28825.0], [61.2, 28825.0], [61.3, 28825.0], [61.4, 28826.0], [61.5, 28860.0], [61.6, 28860.0], [61.7, 28871.0], [61.8, 28888.0], [61.9, 28888.0], [62.0, 28895.0], [62.1, 28903.0], [62.2, 28910.0], [62.3, 28910.0], [62.4, 28913.0], [62.5, 28915.0], [62.6, 28920.0], [62.7, 28920.0], [62.8, 28925.0], [62.9, 28927.0], [63.0, 28940.0], [63.1, 28940.0], [63.2, 28940.0], [63.3, 28941.0], [63.4, 28941.0], [63.5, 28949.0], [63.6, 28953.0], [63.7, 28953.0], [63.8, 28953.0], [63.9, 28954.0], [64.0, 28955.0], [64.1, 28959.0], [64.2, 28959.0], [64.3, 28967.0], [64.4, 28967.0], [64.5, 28985.0], [64.6, 28985.0], [64.7, 28994.0], [64.8, 28997.0], [64.9, 28998.0], [65.0, 28998.0], [65.1, 29000.0], [65.2, 29001.0], [65.3, 29001.0], [65.4, 29010.0], [65.5, 29020.0], [65.6, 29020.0], [65.7, 29020.0], [65.8, 29028.0], [65.9, 29029.0], [66.0, 29031.0], [66.1, 29031.0], [66.2, 29034.0], [66.3, 29035.0], [66.4, 29039.0], [66.5, 29039.0], [66.6, 29049.0], [66.7, 29050.0], [66.8, 29050.0], [66.9, 29057.0], [67.0, 29058.0], [67.1, 29064.0], [67.2, 29064.0], [67.3, 29068.0], [67.4, 29072.0], [67.5, 29074.0], [67.6, 29074.0], [67.7, 29089.0], [67.8, 29098.0], [67.9, 29098.0], [68.0, 29098.0], [68.1, 29102.0], [68.2, 29103.0], [68.3, 29106.0], [68.4, 29106.0], [68.5, 29108.0], [68.6, 29109.0], [68.7, 29109.0], [68.8, 29112.0], [68.9, 29113.0], [69.0, 29113.0], [69.1, 29113.0], [69.2, 29124.0], [69.3, 29127.0], [69.4, 29142.0], [69.5, 29142.0], [69.6, 29148.0], [69.7, 29148.0], [69.8, 29160.0], [69.9, 29160.0], [70.0, 29165.0], [70.1, 29165.0], [70.2, 29165.0], [70.3, 29167.0], [70.4, 29172.0], [70.5, 29173.0], [70.6, 29173.0], [70.7, 29177.0], [70.8, 29181.0], [70.9, 29189.0], [71.0, 29189.0], [71.1, 29193.0], [71.2, 29195.0], [71.3, 29202.0], [71.4, 29202.0], [71.5, 29204.0], [71.6, 29205.0], [71.7, 29205.0], [71.8, 29206.0], [71.9, 29207.0], [72.0, 29209.0], [72.1, 29209.0], [72.2, 29224.0], [72.3, 29228.0], [72.4, 29228.0], [72.5, 29228.0], [72.6, 29241.0], [72.7, 29244.0], [72.8, 29244.0], [72.9, 29244.0], [73.0, 29245.0], [73.1, 29248.0], [73.2, 29251.0], [73.3, 29251.0], [73.4, 29252.0], [73.5, 29256.0], [73.6, 29256.0], [73.7, 29260.0], [73.8, 29260.0], [73.9, 29261.0], [74.0, 29261.0], [74.1, 29268.0], [74.2, 29275.0], [74.3, 29281.0], [74.4, 29281.0], [74.5, 29288.0], [74.6, 29294.0], [74.7, 29302.0], [74.8, 29302.0], [74.9, 29303.0], [75.0, 29308.0], [75.1, 29308.0], [75.2, 29313.0], [75.3, 29316.0], [75.4, 29318.0], [75.5, 29318.0], [75.6, 29318.0], [75.7, 29320.0], [75.8, 29325.0], [75.9, 29325.0], [76.0, 29328.0], [76.1, 29332.0], [76.2, 29333.0], [76.3, 29333.0], [76.4, 29336.0], [76.5, 29338.0], [76.6, 29343.0], [76.7, 29343.0], [76.8, 29343.0], [76.9, 29349.0], [77.0, 29349.0], [77.1, 29361.0], [77.2, 29363.0], [77.3, 29366.0], [77.4, 29366.0], [77.5, 29369.0], [77.6, 29372.0], [77.7, 29377.0], [77.8, 29377.0], [77.9, 29382.0], [78.0, 29386.0], [78.1, 29387.0], [78.2, 29387.0], [78.3, 29387.0], [78.4, 29402.0], [78.5, 29402.0], [78.6, 29406.0], [78.7, 29418.0], [78.8, 29418.0], [78.9, 29418.0], [79.0, 29421.0], [79.1, 29423.0], [79.2, 29425.0], [79.3, 29425.0], [79.4, 29429.0], [79.5, 29430.0], [79.6, 29432.0], [79.7, 29432.0], [79.8, 29435.0], [79.9, 29439.0], [80.0, 29445.0], [80.1, 29445.0], [80.2, 29447.0], [80.3, 29456.0], [80.4, 29456.0], [80.5, 29472.0], [80.6, 29475.0], [80.7, 29476.0], [80.8, 29476.0], [80.9, 29483.0], [81.0, 29485.0], [81.1, 29486.0], [81.2, 29486.0], [81.3, 29497.0], [81.4, 29498.0], [81.5, 29498.0], [81.6, 29498.0], [81.7, 29500.0], [81.8, 29503.0], [81.9, 29503.0], [82.0, 29504.0], [82.1, 29505.0], [82.2, 29506.0], [82.3, 29506.0], [82.4, 29508.0], [82.5, 29509.0], [82.6, 29515.0], [82.7, 29515.0], [82.8, 29525.0], [82.9, 29526.0], [83.0, 29529.0], [83.1, 29529.0], [83.2, 29529.0], [83.3, 29530.0], [83.4, 29530.0], [83.5, 29532.0], [83.6, 29535.0], [83.7, 29540.0], [83.8, 29540.0], [83.9, 29554.0], [84.0, 29567.0], [84.1, 29570.0], [84.2, 29570.0], [84.3, 29572.0], [84.4, 29575.0], [84.5, 29579.0], [84.6, 29579.0], [84.7, 29582.0], [84.8, 29586.0], [84.9, 29588.0], [85.0, 29588.0], [85.1, 29593.0], [85.2, 29607.0], [85.3, 29607.0], [85.4, 29608.0], [85.5, 29633.0], [85.6, 29635.0], [85.7, 29635.0], [85.8, 29640.0], [85.9, 29649.0], [86.0, 29651.0], [86.1, 29651.0], [86.2, 29654.0], [86.3, 29658.0], [86.4, 29671.0], [86.5, 29671.0], [86.6, 29675.0], [86.7, 29680.0], [86.8, 29680.0], [86.9, 29681.0], [87.0, 29681.0], [87.1, 29692.0], [87.2, 29692.0], [87.3, 29698.0], [87.4, 29713.0], [87.5, 29716.0], [87.6, 29716.0], [87.7, 29723.0], [87.8, 29724.0], [87.9, 29728.0], [88.0, 29728.0], [88.1, 29729.0], [88.2, 29756.0], [88.3, 29762.0], [88.4, 29762.0], [88.5, 29780.0], [88.6, 29792.0], [88.7, 29792.0], [88.8, 29798.0], [88.9, 29800.0], [89.0, 29810.0], [89.1, 29810.0], [89.2, 29824.0], [89.3, 29837.0], [89.4, 29837.0], [89.5, 29837.0], [89.6, 29838.0], [89.7, 29876.0], [89.8, 29877.0], [89.9, 29877.0], [90.0, 29901.0], [90.1, 29911.0], [90.2, 29911.0], [90.3, 29932.0], [90.4, 29937.0], [90.5, 29946.0], [90.6, 29946.0], [90.7, 29953.0], [90.8, 29955.0], [90.9, 29958.0], [91.0, 29958.0], [91.1, 30044.0], [91.2, 30053.0], [91.3, 30062.0], [91.4, 30062.0], [91.5, 30123.0], [91.6, 30128.0], [91.7, 30128.0], [91.8, 30161.0], [91.9, 30174.0], [92.0, 30190.0], [92.1, 30190.0], [92.2, 30202.0], [92.3, 30208.0], [92.4, 30230.0], [92.5, 30230.0], [92.6, 30265.0], [92.7, 30269.0], [92.8, 30317.0], [92.9, 30317.0], [93.0, 30326.0], [93.1, 30395.0], [93.2, 30421.0], [93.3, 30421.0], [93.4, 30486.0], [93.5, 30502.0], [93.6, 30502.0], [93.7, 30654.0], [93.8, 30968.0], [93.9, 31230.0], [94.0, 31230.0], [94.1, 31232.0], [94.2, 31397.0], [94.3, 31403.0], [94.4, 31403.0], [94.5, 31433.0], [94.6, 31503.0], [94.7, 31634.0], [94.8, 31634.0], [94.9, 31718.0], [95.0, 32226.0], [95.1, 32226.0], [95.2, 32257.0], [95.3, 32415.0], [95.4, 32535.0], [95.5, 32535.0], [95.6, 32651.0], [95.7, 32817.0], [95.8, 33471.0], [95.9, 33471.0], [96.0, 33550.0], [96.1, 33941.0], [96.2, 33978.0], [96.3, 33978.0], [96.4, 34028.0], [96.5, 34571.0], [96.6, 34683.0], [96.7, 34683.0], [96.8, 35001.0], [96.9, 35213.0], [97.0, 35213.0], [97.1, 35432.0], [97.2, 36175.0], [97.3, 36454.0], [97.4, 36454.0], [97.5, 36586.0], [97.6, 37200.0], [97.7, 38169.0], [97.8, 38169.0], [97.9, 38417.0], [98.0, 38810.0], [98.1, 39039.0], [98.2, 39039.0], [98.3, 39708.0], [98.4, 40858.0], [98.5, 40858.0], [98.6, 41003.0], [98.7, 41259.0], [98.8, 42212.0], [98.9, 42212.0], [99.0, 42993.0], [99.1, 43008.0], [99.2, 43064.0], [99.3, 43064.0], [99.4, 43340.0], [99.5, 43736.0], [99.6, 44651.0], [99.7, 44651.0], [99.8, 44895.0], [99.9, 44955.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 27.0, "series": [{"data": [[34500.0, 1.0], [33900.0, 2.0], [33500.0, 1.0], [36100.0, 1.0], [36500.0, 1.0], [38100.0, 1.0], [39700.0, 1.0], [42900.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [44900.0, 1.0], [3100.0, 1.0], [5400.0, 1.0], [8400.0, 1.0], [11300.0, 1.0], [13800.0, 1.0], [17300.0, 1.0], [16400.0, 1.0], [17400.0, 5.0], [16900.0, 2.0], [17200.0, 2.0], [17100.0, 2.0], [16800.0, 2.0], [17000.0, 7.0], [16700.0, 2.0], [16600.0, 1.0], [18200.0, 6.0], [17800.0, 4.0], [17700.0, 7.0], [17500.0, 9.0], [17600.0, 3.0], [18000.0, 3.0], [17900.0, 5.0], [18300.0, 2.0], [18100.0, 2.0], [18400.0, 1.0], [18500.0, 2.0], [19300.0, 1.0], [18700.0, 4.0], [19400.0, 5.0], [18600.0, 2.0], [19000.0, 2.0], [20400.0, 2.0], [20300.0, 1.0], [20100.0, 7.0], [20200.0, 3.0], [19600.0, 6.0], [19900.0, 3.0], [19500.0, 2.0], [19700.0, 4.0], [19800.0, 2.0], [20000.0, 2.0], [21400.0, 5.0], [21000.0, 1.0], [20900.0, 2.0], [20700.0, 2.0], [21200.0, 2.0], [21500.0, 3.0], [21300.0, 3.0], [20600.0, 2.0], [20500.0, 1.0], [21600.0, 3.0], [22000.0, 3.0], [22500.0, 2.0], [22400.0, 5.0], [22300.0, 3.0], [22200.0, 5.0], [21800.0, 1.0], [22100.0, 1.0], [21700.0, 1.0], [22600.0, 4.0], [23000.0, 5.0], [23300.0, 6.0], [23400.0, 7.0], [23100.0, 3.0], [23200.0, 4.0], [23500.0, 4.0], [22700.0, 3.0], [22800.0, 2.0], [22900.0, 2.0], [23800.0, 6.0], [24500.0, 4.0], [23900.0, 5.0], [23600.0, 8.0], [23700.0, 8.0], [24200.0, 5.0], [24000.0, 5.0], [24100.0, 10.0], [24300.0, 4.0], [24400.0, 6.0], [25500.0, 8.0], [25400.0, 6.0], [25100.0, 2.0], [24600.0, 6.0], [25000.0, 3.0], [24900.0, 6.0], [25200.0, 2.0], [25300.0, 1.0], [24800.0, 5.0], [24700.0, 5.0], [25800.0, 3.0], [26000.0, 5.0], [26300.0, 9.0], [26200.0, 5.0], [26400.0, 4.0], [26600.0, 1.0], [26100.0, 8.0], [25900.0, 5.0], [25600.0, 3.0], [25700.0, 5.0], [27500.0, 5.0], [27300.0, 3.0], [26800.0, 2.0], [27200.0, 4.0], [26700.0, 2.0], [27400.0, 4.0], [27100.0, 7.0], [26900.0, 2.0], [27600.0, 4.0], [28500.0, 6.0], [27800.0, 4.0], [28200.0, 4.0], [27900.0, 7.0], [28600.0, 5.0], [28400.0, 6.0], [28000.0, 5.0], [27700.0, 7.0], [28100.0, 1.0], [28300.0, 7.0], [29500.0, 26.0], [29100.0, 24.0], [29400.0, 24.0], [29300.0, 27.0], [29000.0, 22.0], [29200.0, 25.0], [28800.0, 8.0], [28700.0, 5.0], [28900.0, 22.0], [29600.0, 16.0], [29900.0, 8.0], [30300.0, 3.0], [30200.0, 5.0], [29700.0, 11.0], [29800.0, 8.0], [30100.0, 5.0], [30400.0, 2.0], [30000.0, 3.0], [30500.0, 1.0], [30600.0, 1.0], [31600.0, 1.0], [31300.0, 1.0], [31200.0, 2.0], [31400.0, 2.0], [31500.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [32200.0, 2.0], [32400.0, 1.0], [32600.0, 1.0], [32500.0, 1.0], [32800.0, 1.0], [34600.0, 1.0], [34000.0, 1.0], [33400.0, 1.0], [35200.0, 1.0], [36400.0, 1.0], [35400.0, 1.0], [35000.0, 1.0], [38400.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [39000.0, 1.0], [40800.0, 1.0], [41200.0, 1.0], [43000.0, 2.0], [41000.0, 1.0], [42200.0, 1.0], [44800.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60408506E12, "maxY": 10.0, "series": [{"data": [[1.60408536E12, 10.0], [1.60408506E12, 10.0], [1.60408644E12, 10.0], [1.60408674E12, 10.0], [1.60408638E12, 10.0], [1.60408704E12, 1.0], [1.60408686E12, 10.0], [1.60408626E12, 10.0], [1.60408596E12, 10.0], [1.60408566E12, 10.0], [1.60408584E12, 10.0], [1.60408554E12, 10.0], [1.60408524E12, 10.0], [1.60408656E12, 10.0], [1.60408512E12, 10.0], [1.60408668E12, 10.0], [1.60408698E12, 8.8], [1.60408614E12, 10.0], [1.60408632E12, 10.0], [1.60408602E12, 10.0], [1.60408572E12, 10.0], [1.60408542E12, 10.0], [1.6040856E12, 10.0], [1.6040853E12, 10.0], [1.6040865E12, 10.0], [1.6040868E12, 10.0], [1.60408662E12, 10.0], [1.60408692E12, 10.0], [1.6040862E12, 10.0], [1.6040859E12, 10.0], [1.60408608E12, 10.0], [1.60408578E12, 10.0], [1.60408548E12, 10.0], [1.60408518E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408704E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16948.0, "minX": 1.0, "maxY": 26193.176308539914, "series": [{"data": [[8.0, 17041.0], [4.0, 17028.0], [2.0, 17095.0], [1.0, 17429.0], [9.0, 17078.0], [10.0, 26193.176308539914], [5.0, 16985.0], [6.0, 16948.0], [3.0, 17041.0], [7.0, 17017.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26081.507482993165]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.533333333333333, "minX": 1.60408506E12, "maxY": 209910.3, "series": [{"data": [[1.60408536E12, 56444.11666666667], [1.60408506E12, 15506.35], [1.60408644E12, 50152.816666666666], [1.60408674E12, 36596.45], [1.60408638E12, 49056.4], [1.60408704E12, 520.8333333333334], [1.60408686E12, 51796.46666666667], [1.60408626E12, 63379.833333333336], [1.60408596E12, 75760.78333333334], [1.60408566E12, 40756.05], [1.60408584E12, 42852.2], [1.60408554E12, 46279.083333333336], [1.60408524E12, 144977.2], [1.60408656E12, 47447.583333333336], [1.60408512E12, 209350.65], [1.60408668E12, 45767.666666666664], [1.60408698E12, 55003.066666666666], [1.60408614E12, 88290.38333333333], [1.60408632E12, 34834.75], [1.60408602E12, 209910.3], [1.60408572E12, 44656.86666666667], [1.60408542E12, 51767.3], [1.6040856E12, 59399.51666666667], [1.6040853E12, 61406.36666666667], [1.6040865E12, 53498.35], [1.6040868E12, 28297.15], [1.60408662E12, 46590.51666666667], [1.60408692E12, 154792.35], [1.6040862E12, 51207.63333333333], [1.6040859E12, 162990.26666666666], [1.60408608E12, 89561.7], [1.60408578E12, 33387.21666666667], [1.60408548E12, 45941.433333333334], [1.60408518E12, 75275.23333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60408536E12, 176.6], [1.60408506E12, 7.316666666666666], [1.60408644E12, 146.15], [1.60408674E12, 167.76666666666668], [1.60408638E12, 153.45], [1.60408704E12, 6.533333333333333], [1.60408686E12, 195.13333333333333], [1.60408626E12, 161.96666666666667], [1.60408596E12, 163.61666666666667], [1.60408566E12, 146.01666666666668], [1.60408584E12, 206.15], [1.60408554E12, 146.1], [1.60408524E12, 128.68333333333334], [1.60408656E12, 153.75], [1.60408512E12, 169.25], [1.60408668E12, 146.01666666666668], [1.60408698E12, 208.16666666666666], [1.60408614E12, 180.86666666666667], [1.60408632E12, 131.45], [1.60408602E12, 186.48333333333332], [1.60408572E12, 146.01666666666668], [1.60408542E12, 153.43333333333334], [1.6040856E12, 153.76666666666668], [1.6040853E12, 153.43333333333334], [1.6040865E12, 154.06666666666666], [1.6040868E12, 182.43333333333334], [1.60408662E12, 153.41666666666666], [1.60408692E12, 153.11666666666667], [1.6040862E12, 168.96666666666667], [1.6040859E12, 203.9], [1.60408608E12, 213.96666666666667], [1.60408578E12, 160.66666666666666], [1.60408548E12, 146.13333333333333], [1.60408518E12, 214.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408704E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3150.0, "minX": 1.60408506E12, "maxY": 34789.16666666667, "series": [{"data": [[1.60408536E12, 25108.916666666668], [1.60408506E12, 3150.0], [1.60408644E12, 29326.5], [1.60408674E12, 26585.956521739132], [1.60408638E12, 29064.285714285717], [1.60408704E12, 17429.0], [1.60408686E12, 22719.259259259255], [1.60408626E12, 25080.045454545452], [1.60408596E12, 24568.260869565212], [1.60408566E12, 29126.199999999997], [1.60408584E12, 23784.250000000004], [1.60408554E12, 29850.95], [1.60408524E12, 30370.823529411766], [1.60408656E12, 28093.66666666667], [1.60408512E12, 22366.73913043478], [1.60408668E12, 29517.95], [1.60408698E12, 23035.066666666662], [1.60408614E12, 22635.719999999998], [1.60408632E12, 34789.16666666667], [1.60408602E12, 23416.80769230769], [1.60408572E12, 29534.050000000003], [1.60408542E12, 27980.0], [1.6040856E12, 29542.095238095237], [1.6040853E12, 32528.2380952381], [1.6040865E12, 29378.95238095238], [1.6040868E12, 24397.0], [1.60408662E12, 29290.857142857145], [1.60408692E12, 25469.619047619046], [1.6040862E12, 25302.73913043478], [1.6040859E12, 19730.068965517246], [1.60408608E12, 21957.3], [1.60408578E12, 27673.77272727273], [1.60408548E12, 29235.999999999996], [1.60408518E12, 19818.833333333332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408704E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3141.0, "minX": 1.60408506E12, "maxY": 34788.16666666667, "series": [{"data": [[1.60408536E12, 25107.833333333343], [1.60408506E12, 3141.0], [1.60408644E12, 29325.2], [1.60408674E12, 26584.869565217392], [1.60408638E12, 29062.95238095238], [1.60408704E12, 17427.0], [1.60408686E12, 22717.666666666668], [1.60408626E12, 25078.636363636368], [1.60408596E12, 24566.0], [1.60408566E12, 29125.15], [1.60408584E12, 23782.821428571428], [1.60408554E12, 29849.800000000003], [1.60408524E12, 30367.117647058825], [1.60408656E12, 28092.523809523806], [1.60408512E12, 22363.08695652174], [1.60408668E12, 29516.7], [1.60408698E12, 23033.066666666662], [1.60408614E12, 22633.64], [1.60408632E12, 34788.16666666667], [1.60408602E12, 23412.76923076923], [1.60408572E12, 29532.749999999996], [1.60408542E12, 27978.666666666668], [1.6040856E12, 29540.714285714283], [1.6040853E12, 32526.809523809523], [1.6040865E12, 29377.619047619046], [1.6040868E12, 24395.640000000003], [1.60408662E12, 29289.714285714286], [1.60408692E12, 25465.52380952381], [1.6040862E12, 25301.695652173912], [1.6040859E12, 19726.48275862069], [1.60408608E12, 21955.5], [1.60408578E12, 27672.545454545456], [1.60408548E12, 29234.9], [1.60408518E12, 19817.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408704E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60408506E12, "maxY": 43.0, "series": [{"data": [[1.60408536E12, 0.3333333333333333], [1.60408506E12, 43.0], [1.60408644E12, 0.7000000000000001], [1.60408674E12, 0.30434782608695654], [1.60408638E12, 0.2857142857142857], [1.60408704E12, 0.0], [1.60408686E12, 0.4814814814814815], [1.60408626E12, 0.5], [1.60408596E12, 0.5652173913043479], [1.60408566E12, 0.55], [1.60408584E12, 0.5357142857142856], [1.60408554E12, 0.25], [1.60408524E12, 0.5294117647058824], [1.60408656E12, 0.19047619047619052], [1.60408512E12, 2.5652173913043477], [1.60408668E12, 0.5], [1.60408698E12, 0.4666666666666668], [1.60408614E12, 0.04000000000000001], [1.60408632E12, 0.5555555555555556], [1.60408602E12, 0.4230769230769231], [1.60408572E12, 0.3], [1.60408542E12, 0.5238095238095238], [1.6040856E12, 0.5238095238095238], [1.6040853E12, 0.7619047619047621], [1.6040865E12, 0.6190476190476191], [1.6040868E12, 0.39999999999999997], [1.60408662E12, 0.4761904761904763], [1.60408692E12, 0.47619047619047616], [1.6040862E12, 0.6086956521739132], [1.6040859E12, 0.37931034482758624], [1.60408608E12, 0.3666666666666666], [1.60408578E12, 0.5], [1.60408548E12, 0.7999999999999999], [1.60408518E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408704E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3150.0, "minX": 1.60408506E12, "maxY": 44955.0, "series": [{"data": [[1.60408536E12, 30230.0], [1.60408506E12, 3150.0], [1.60408644E12, 29698.0], [1.60408674E12, 29472.0], [1.60408638E12, 29313.0], [1.60408704E12, 17429.0], [1.60408686E12, 27501.0], [1.60408626E12, 32415.0], [1.60408596E12, 31503.0], [1.60408566E12, 29658.0], [1.60408584E12, 28002.0], [1.60408554E12, 30421.0], [1.60408524E12, 43736.0], [1.60408656E12, 29245.0], [1.60408512E12, 27833.0], [1.60408668E12, 30161.0], [1.60408698E12, 38169.0], [1.60408614E12, 32257.0], [1.60408632E12, 43064.0], [1.60408602E12, 25753.0], [1.60408572E12, 29946.0], [1.60408542E12, 29435.0], [1.6040856E12, 30502.0], [1.6040853E12, 44955.0], [1.6040865E12, 29798.0], [1.6040868E12, 29020.0], [1.60408662E12, 29680.0], [1.60408692E12, 29068.0], [1.6040862E12, 28649.0], [1.6040859E12, 23313.0], [1.60408608E12, 28615.0], [1.60408578E12, 29113.0], [1.60408548E12, 29588.0], [1.60408518E12, 23900.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60408536E12, 22458.0], [1.60408506E12, 3150.0], [1.60408644E12, 28871.0], [1.60408674E12, 23470.0], [1.60408638E12, 28811.0], [1.60408704E12, 17429.0], [1.60408686E12, 18574.0], [1.60408626E12, 22277.0], [1.60408596E12, 17702.0], [1.60408566E12, 28494.0], [1.60408584E12, 17719.0], [1.60408554E12, 29228.0], [1.60408524E12, 22369.0], [1.60408656E12, 27121.0], [1.60408512E12, 5402.0], [1.60408668E12, 28953.0], [1.60408698E12, 16696.0], [1.60408614E12, 17273.0], [1.60408632E12, 25987.0], [1.60408602E12, 19681.0], [1.60408572E12, 29260.0], [1.60408542E12, 24768.0], [1.6040856E12, 28778.0], [1.6040853E12, 24344.0], [1.6040865E12, 27275.0], [1.6040868E12, 20473.0], [1.60408662E12, 28860.0], [1.60408692E12, 19704.0], [1.6040862E12, 22890.0], [1.6040859E12, 16899.0], [1.60408608E12, 17440.0], [1.60408578E12, 25535.0], [1.60408548E12, 28895.0], [1.60408518E12, 17341.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60408536E12, 22458.0], [1.60408506E12, 3150.0], [1.60408644E12, 28871.0], [1.60408674E12, 23470.0], [1.60408638E12, 28811.0], [1.60408704E12, 17429.0], [1.60408686E12, 18574.0], [1.60408626E12, 22277.0], [1.60408596E12, 17702.0], [1.60408566E12, 28494.0], [1.60408584E12, 17719.0], [1.60408554E12, 29228.0], [1.60408524E12, 22369.0], [1.60408656E12, 27121.0], [1.60408512E12, 5402.0], [1.60408668E12, 28953.0], [1.60408698E12, 16696.0], [1.60408614E12, 17273.0], [1.60408632E12, 25987.0], [1.60408602E12, 19681.0], [1.60408572E12, 29260.0], [1.60408542E12, 24768.0], [1.6040856E12, 28778.0], [1.6040853E12, 24344.0], [1.6040865E12, 27275.0], [1.6040868E12, 20473.0], [1.60408662E12, 28860.0], [1.60408692E12, 19704.0], [1.6040862E12, 22890.0], [1.6040859E12, 16899.0], [1.60408608E12, 17440.0], [1.60408578E12, 25535.0], [1.60408548E12, 28895.0], [1.60408518E12, 17341.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60408536E12, 22458.0], [1.60408506E12, 3150.0], [1.60408644E12, 28871.0], [1.60408674E12, 23470.0], [1.60408638E12, 28811.0], [1.60408704E12, 17429.0], [1.60408686E12, 18574.0], [1.60408626E12, 22277.0], [1.60408596E12, 17702.0], [1.60408566E12, 28494.0], [1.60408584E12, 17719.0], [1.60408554E12, 29228.0], [1.60408524E12, 22369.0], [1.60408656E12, 27121.0], [1.60408512E12, 5402.0], [1.60408668E12, 28953.0], [1.60408698E12, 16696.0], [1.60408614E12, 17273.0], [1.60408632E12, 25987.0], [1.60408602E12, 19681.0], [1.60408572E12, 29260.0], [1.60408542E12, 24768.0], [1.6040856E12, 28778.0], [1.6040853E12, 24344.0], [1.6040865E12, 27275.0], [1.6040868E12, 20473.0], [1.60408662E12, 28860.0], [1.60408692E12, 19704.0], [1.6040862E12, 22890.0], [1.6040859E12, 16899.0], [1.60408608E12, 17440.0], [1.60408578E12, 25535.0], [1.60408548E12, 28895.0], [1.60408518E12, 17341.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60408536E12, 22458.0], [1.60408506E12, 3150.0], [1.60408644E12, 28871.0], [1.60408674E12, 23470.0], [1.60408638E12, 28811.0], [1.60408704E12, 17429.0], [1.60408686E12, 18574.0], [1.60408626E12, 22277.0], [1.60408596E12, 17702.0], [1.60408566E12, 28494.0], [1.60408584E12, 17719.0], [1.60408554E12, 29228.0], [1.60408524E12, 22369.0], [1.60408656E12, 27121.0], [1.60408512E12, 5402.0], [1.60408668E12, 28953.0], [1.60408698E12, 16696.0], [1.60408614E12, 17273.0], [1.60408632E12, 25987.0], [1.60408602E12, 19681.0], [1.60408572E12, 29260.0], [1.60408542E12, 24768.0], [1.6040856E12, 28778.0], [1.6040853E12, 24344.0], [1.6040865E12, 27275.0], [1.6040868E12, 20473.0], [1.60408662E12, 28860.0], [1.60408692E12, 19704.0], [1.6040862E12, 22890.0], [1.6040859E12, 16899.0], [1.60408608E12, 17440.0], [1.60408578E12, 25535.0], [1.60408548E12, 28895.0], [1.60408518E12, 17341.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60408536E12, 24665.5], [1.60408506E12, 3150.0], [1.60408644E12, 29339.5], [1.60408674E12, 26157.0], [1.60408638E12, 29057.0], [1.60408704E12, 17429.0], [1.60408686E12, 22245.0], [1.60408626E12, 24175.5], [1.60408596E12, 24742.0], [1.60408566E12, 29249.5], [1.60408584E12, 24359.0], [1.60408554E12, 29817.0], [1.60408524E12, 25102.0], [1.60408656E12, 28017.0], [1.60408512E12, 25956.0], [1.60408668E12, 29590.0], [1.60408698E12, 17740.5], [1.60408614E12, 19970.0], [1.60408632E12, 35057.5], [1.60408602E12, 23853.5], [1.60408572E12, 29491.5], [1.60408542E12, 29072.0], [1.6040856E12, 29421.0], [1.6040853E12, 31634.0], [1.6040865E12, 29526.0], [1.6040868E12, 24066.0], [1.60408662E12, 29268.0], [1.60408692E12, 27658.0], [1.6040862E12, 24688.0], [1.6040859E12, 19016.0], [1.60408608E12, 20107.0], [1.60408578E12, 28401.5], [1.60408548E12, 29232.5], [1.60408518E12, 19817.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408704E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27118.0, "minX": 1.0, "maxY": 27118.0, "series": [{"data": [[1.0, 27118.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27116.0, "minX": 1.0, "maxY": 27116.0, "series": [{"data": [[1.0, 27116.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.60408506E12, "maxY": 0.5, "series": [{"data": [[1.60408536E12, 0.4], [1.60408506E12, 0.18333333333333332], [1.60408644E12, 0.3333333333333333], [1.60408674E12, 0.38333333333333336], [1.60408638E12, 0.35], [1.60408686E12, 0.45], [1.60408626E12, 0.36666666666666664], [1.60408596E12, 0.38333333333333336], [1.60408566E12, 0.3333333333333333], [1.60408584E12, 0.4666666666666667], [1.60408554E12, 0.3333333333333333], [1.60408524E12, 0.2833333333333333], [1.60408656E12, 0.35], [1.60408512E12, 0.38333333333333336], [1.60408668E12, 0.3333333333333333], [1.60408698E12, 0.35], [1.60408614E12, 0.4166666666666667], [1.60408632E12, 0.3], [1.60408602E12, 0.43333333333333335], [1.60408572E12, 0.3333333333333333], [1.60408542E12, 0.35], [1.6040856E12, 0.35], [1.6040853E12, 0.35], [1.6040865E12, 0.35], [1.6040868E12, 0.4166666666666667], [1.60408662E12, 0.35], [1.60408692E12, 0.35], [1.6040862E12, 0.38333333333333336], [1.6040859E12, 0.48333333333333334], [1.60408608E12, 0.5], [1.60408578E12, 0.36666666666666664], [1.60408548E12, 0.3333333333333333], [1.60408518E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408698E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60408506E12, "maxY": 0.5, "series": [{"data": [[1.60408536E12, 0.4], [1.60408506E12, 0.016666666666666666], [1.60408644E12, 0.3333333333333333], [1.60408674E12, 0.38333333333333336], [1.60408638E12, 0.35], [1.60408704E12, 0.016666666666666666], [1.60408686E12, 0.45], [1.60408626E12, 0.36666666666666664], [1.60408596E12, 0.38333333333333336], [1.60408566E12, 0.3333333333333333], [1.60408584E12, 0.4666666666666667], [1.60408554E12, 0.3333333333333333], [1.60408524E12, 0.2833333333333333], [1.60408656E12, 0.35], [1.60408512E12, 0.38333333333333336], [1.60408668E12, 0.3333333333333333], [1.60408698E12, 0.5], [1.60408614E12, 0.4166666666666667], [1.60408632E12, 0.3], [1.60408602E12, 0.43333333333333335], [1.60408572E12, 0.3333333333333333], [1.60408542E12, 0.35], [1.6040856E12, 0.35], [1.6040853E12, 0.35], [1.6040865E12, 0.35], [1.6040868E12, 0.4166666666666667], [1.60408662E12, 0.35], [1.60408692E12, 0.35], [1.6040862E12, 0.38333333333333336], [1.6040859E12, 0.48333333333333334], [1.60408608E12, 0.5], [1.60408578E12, 0.36666666666666664], [1.60408548E12, 0.3333333333333333], [1.60408518E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408704E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60408506E12, "maxY": 0.5, "series": [{"data": [[1.60408536E12, 0.4], [1.60408506E12, 0.016666666666666666], [1.60408644E12, 0.3333333333333333], [1.60408674E12, 0.38333333333333336], [1.60408638E12, 0.35], [1.60408704E12, 0.016666666666666666], [1.60408686E12, 0.45], [1.60408626E12, 0.36666666666666664], [1.60408596E12, 0.38333333333333336], [1.60408566E12, 0.3333333333333333], [1.60408584E12, 0.4666666666666667], [1.60408554E12, 0.3333333333333333], [1.60408524E12, 0.2833333333333333], [1.60408656E12, 0.35], [1.60408512E12, 0.38333333333333336], [1.60408668E12, 0.3333333333333333], [1.60408698E12, 0.5], [1.60408614E12, 0.4166666666666667], [1.60408632E12, 0.3], [1.60408602E12, 0.43333333333333335], [1.60408572E12, 0.3333333333333333], [1.60408542E12, 0.35], [1.6040856E12, 0.35], [1.6040853E12, 0.35], [1.6040865E12, 0.35], [1.6040868E12, 0.4166666666666667], [1.60408662E12, 0.35], [1.60408692E12, 0.35], [1.6040862E12, 0.38333333333333336], [1.6040859E12, 0.48333333333333334], [1.60408608E12, 0.5], [1.60408578E12, 0.36666666666666664], [1.60408548E12, 0.3333333333333333], [1.60408518E12, 0.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408704E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60408506E12, "maxY": 0.5, "series": [{"data": [[1.60408536E12, 0.4], [1.60408506E12, 0.016666666666666666], [1.60408644E12, 0.3333333333333333], [1.60408674E12, 0.38333333333333336], [1.60408638E12, 0.35], [1.60408704E12, 0.016666666666666666], [1.60408686E12, 0.45], [1.60408626E12, 0.36666666666666664], [1.60408596E12, 0.38333333333333336], [1.60408566E12, 0.3333333333333333], [1.60408584E12, 0.4666666666666667], [1.60408554E12, 0.3333333333333333], [1.60408524E12, 0.2833333333333333], [1.60408656E12, 0.35], [1.60408512E12, 0.38333333333333336], [1.60408668E12, 0.3333333333333333], [1.60408698E12, 0.5], [1.60408614E12, 0.4166666666666667], [1.60408632E12, 0.3], [1.60408602E12, 0.43333333333333335], [1.60408572E12, 0.3333333333333333], [1.60408542E12, 0.35], [1.6040856E12, 0.35], [1.6040853E12, 0.35], [1.6040865E12, 0.35], [1.6040868E12, 0.4166666666666667], [1.60408662E12, 0.35], [1.60408692E12, 0.35], [1.6040862E12, 0.38333333333333336], [1.6040859E12, 0.48333333333333334], [1.60408608E12, 0.5], [1.60408578E12, 0.36666666666666664], [1.60408548E12, 0.3333333333333333], [1.60408518E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408704E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

