/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3077.0, "minX": 0.0, "maxY": 44936.0, "series": [{"data": [[0.0, 3077.0], [0.1, 3077.0], [0.2, 5353.0], [0.3, 8447.0], [0.4, 8447.0], [0.5, 11229.0], [0.6, 13722.0], [0.7, 16327.0], [0.8, 16327.0], [0.9, 16999.0], [1.0, 17050.0], [1.1, 17091.0], [1.2, 17091.0], [1.3, 17328.0], [1.4, 17337.0], [1.5, 17403.0], [1.6, 17403.0], [1.7, 17429.0], [1.8, 17496.0], [1.9, 17496.0], [2.0, 17536.0], [2.1, 17540.0], [2.2, 17643.0], [2.3, 17643.0], [2.4, 17659.0], [2.5, 17803.0], [2.6, 17836.0], [2.7, 17836.0], [2.8, 17841.0], [2.9, 17858.0], [3.0, 17905.0], [3.1, 17905.0], [3.2, 17909.0], [3.3, 17915.0], [3.4, 17915.0], [3.5, 17946.0], [3.6, 17952.0], [3.7, 17966.0], [3.8, 17966.0], [3.9, 17971.0], [4.0, 17995.0], [4.1, 18004.0], [4.2, 18004.0], [4.3, 18009.0], [4.4, 18013.0], [4.5, 18021.0], [4.6, 18021.0], [4.7, 18022.0], [4.8, 18032.0], [4.9, 18033.0], [5.0, 18033.0], [5.1, 18034.0], [5.2, 18045.0], [5.3, 18045.0], [5.4, 18056.0], [5.5, 18066.0], [5.6, 18071.0], [5.7, 18071.0], [5.8, 18079.0], [5.9, 18082.0], [6.0, 18089.0], [6.1, 18089.0], [6.2, 18090.0], [6.3, 18102.0], [6.4, 18105.0], [6.5, 18105.0], [6.6, 18117.0], [6.7, 18125.0], [6.8, 18125.0], [6.9, 18156.0], [7.0, 18165.0], [7.1, 18233.0], [7.2, 18233.0], [7.3, 18272.0], [7.4, 18276.0], [7.5, 18276.0], [7.6, 18276.0], [7.7, 18278.0], [7.8, 18309.0], [7.9, 18331.0], [8.0, 18331.0], [8.1, 18369.0], [8.2, 18373.0], [8.3, 18432.0], [8.4, 18432.0], [8.5, 18438.0], [8.6, 18439.0], [8.7, 18439.0], [8.8, 18461.0], [8.9, 18485.0], [9.0, 18543.0], [9.1, 18543.0], [9.2, 18556.0], [9.3, 18620.0], [9.4, 18646.0], [9.5, 18646.0], [9.6, 18693.0], [9.7, 18721.0], [9.8, 18741.0], [9.9, 18741.0], [10.0, 18769.0], [10.1, 18938.0], [10.2, 18938.0], [10.3, 18994.0], [10.4, 19035.0], [10.5, 19056.0], [10.6, 19056.0], [10.7, 19072.0], [10.8, 19116.0], [10.9, 19147.0], [11.0, 19147.0], [11.1, 19197.0], [11.2, 19212.0], [11.3, 19317.0], [11.4, 19317.0], [11.5, 19345.0], [11.6, 19464.0], [11.7, 19464.0], [11.8, 19485.0], [11.9, 19603.0], [12.0, 19621.0], [12.1, 19621.0], [12.2, 19629.0], [12.3, 19629.0], [12.4, 19636.0], [12.5, 19636.0], [12.6, 19645.0], [12.7, 19652.0], [12.8, 19662.0], [12.9, 19662.0], [13.0, 19745.0], [13.1, 19766.0], [13.2, 19768.0], [13.3, 19768.0], [13.4, 19772.0], [13.5, 19773.0], [13.6, 19773.0], [13.7, 19780.0], [13.8, 19802.0], [13.9, 19826.0], [14.0, 19826.0], [14.1, 19892.0], [14.2, 19901.0], [14.3, 19943.0], [14.4, 19943.0], [14.5, 19958.0], [14.6, 19961.0], [14.7, 20003.0], [14.8, 20003.0], [14.9, 20022.0], [15.0, 20036.0], [15.1, 20036.0], [15.2, 20094.0], [15.3, 20116.0], [15.4, 20339.0], [15.5, 20339.0], [15.6, 20351.0], [15.7, 20351.0], [15.8, 20353.0], [15.9, 20353.0], [16.0, 20372.0], [16.1, 20382.0], [16.2, 20536.0], [16.3, 20536.0], [16.4, 20747.0], [16.5, 20755.0], [16.6, 20840.0], [16.7, 20840.0], [16.8, 20866.0], [16.9, 20876.0], [17.0, 20876.0], [17.1, 21130.0], [17.2, 21182.0], [17.3, 21306.0], [17.4, 21306.0], [17.5, 21443.0], [17.6, 21458.0], [17.7, 21512.0], [17.8, 21512.0], [17.9, 21607.0], [18.0, 21657.0], [18.1, 21662.0], [18.2, 21662.0], [18.3, 21698.0], [18.4, 21772.0], [18.5, 21772.0], [18.6, 21773.0], [18.7, 21781.0], [18.8, 21802.0], [18.9, 21802.0], [19.0, 21810.0], [19.1, 21836.0], [19.2, 21934.0], [19.3, 21934.0], [19.4, 22040.0], [19.5, 22042.0], [19.6, 22069.0], [19.7, 22069.0], [19.8, 22071.0], [19.9, 22094.0], [20.0, 22111.0], [20.1, 22111.0], [20.2, 22158.0], [20.3, 22287.0], [20.4, 22287.0], [20.5, 22346.0], [20.6, 22350.0], [20.7, 22401.0], [20.8, 22401.0], [20.9, 22406.0], [21.0, 22407.0], [21.1, 22408.0], [21.2, 22408.0], [21.3, 22518.0], [21.4, 22575.0], [21.5, 22639.0], [21.6, 22639.0], [21.7, 22642.0], [21.8, 22645.0], [21.9, 22645.0], [22.0, 22665.0], [22.1, 22665.0], [22.2, 22676.0], [22.3, 22676.0], [22.4, 22684.0], [22.5, 22689.0], [22.6, 22717.0], [22.7, 22717.0], [22.8, 22739.0], [22.9, 22772.0], [23.0, 22787.0], [23.1, 22787.0], [23.2, 22804.0], [23.3, 22856.0], [23.4, 22856.0], [23.5, 22879.0], [23.6, 22880.0], [23.7, 22882.0], [23.8, 22882.0], [23.9, 22949.0], [24.0, 22958.0], [24.1, 23068.0], [24.2, 23068.0], [24.3, 23148.0], [24.4, 23162.0], [24.5, 23171.0], [24.6, 23171.0], [24.7, 23197.0], [24.8, 23200.0], [24.9, 23212.0], [25.0, 23212.0], [25.1, 23221.0], [25.2, 23271.0], [25.3, 23271.0], [25.4, 23299.0], [25.5, 23314.0], [25.6, 23325.0], [25.7, 23325.0], [25.8, 23332.0], [25.9, 23357.0], [26.0, 23382.0], [26.1, 23382.0], [26.2, 23416.0], [26.3, 23479.0], [26.4, 23564.0], [26.5, 23564.0], [26.6, 23570.0], [26.7, 23603.0], [26.8, 23603.0], [26.9, 23674.0], [27.0, 23693.0], [27.1, 23714.0], [27.2, 23714.0], [27.3, 23715.0], [27.4, 23769.0], [27.5, 23774.0], [27.6, 23774.0], [27.7, 23780.0], [27.8, 23780.0], [27.9, 23788.0], [28.0, 23788.0], [28.1, 23858.0], [28.2, 23859.0], [28.3, 23861.0], [28.4, 23861.0], [28.5, 23868.0], [28.6, 23912.0], [28.7, 23912.0], [28.8, 23930.0], [28.9, 23955.0], [29.0, 23960.0], [29.1, 23960.0], [29.2, 23972.0], [29.3, 23990.0], [29.4, 23996.0], [29.5, 23996.0], [29.6, 24012.0], [29.7, 24042.0], [29.8, 24070.0], [29.9, 24070.0], [30.0, 24071.0], [30.1, 24089.0], [30.2, 24089.0], [30.3, 24094.0], [30.4, 24098.0], [30.5, 24111.0], [30.6, 24111.0], [30.7, 24129.0], [30.8, 24148.0], [30.9, 24162.0], [31.0, 24162.0], [31.1, 24169.0], [31.2, 24194.0], [31.3, 24201.0], [31.4, 24201.0], [31.5, 24236.0], [31.6, 24285.0], [31.7, 24285.0], [31.8, 24302.0], [31.9, 24304.0], [32.0, 24331.0], [32.1, 24331.0], [32.2, 24363.0], [32.3, 24377.0], [32.4, 24405.0], [32.5, 24405.0], [32.6, 24435.0], [32.7, 24438.0], [32.8, 24469.0], [32.9, 24469.0], [33.0, 24472.0], [33.1, 24487.0], [33.2, 24488.0], [33.3, 24488.0], [33.4, 24511.0], [33.5, 24544.0], [33.6, 24544.0], [33.7, 24556.0], [33.8, 24569.0], [33.9, 24577.0], [34.0, 24577.0], [34.1, 24631.0], [34.2, 24649.0], [34.3, 24682.0], [34.4, 24682.0], [34.5, 24685.0], [34.6, 24690.0], [34.7, 24709.0], [34.8, 24709.0], [34.9, 24739.0], [35.0, 24745.0], [35.1, 24745.0], [35.2, 24781.0], [35.3, 24789.0], [35.4, 24791.0], [35.5, 24791.0], [35.6, 24802.0], [35.7, 24810.0], [35.8, 24827.0], [35.9, 24827.0], [36.0, 24881.0], [36.1, 24905.0], [36.2, 24905.0], [36.3, 24905.0], [36.4, 24912.0], [36.5, 24944.0], [36.6, 24963.0], [36.7, 24963.0], [36.8, 24981.0], [36.9, 25063.0], [37.0, 25063.0], [37.1, 25072.0], [37.2, 25096.0], [37.3, 25106.0], [37.4, 25106.0], [37.5, 25111.0], [37.6, 25112.0], [37.7, 25119.0], [37.8, 25119.0], [37.9, 25123.0], [38.0, 25125.0], [38.1, 25135.0], [38.2, 25135.0], [38.3, 25146.0], [38.4, 25151.0], [38.5, 25151.0], [38.6, 25228.0], [38.7, 25249.0], [38.8, 25250.0], [38.9, 25250.0], [39.0, 25309.0], [39.1, 25323.0], [39.2, 25333.0], [39.3, 25333.0], [39.4, 25348.0], [39.5, 25377.0], [39.6, 25389.0], [39.7, 25389.0], [39.8, 25395.0], [39.9, 25414.0], [40.0, 25425.0], [40.1, 25425.0], [40.2, 25471.0], [40.3, 25489.0], [40.4, 25489.0], [40.5, 25520.0], [40.6, 25580.0], [40.7, 25611.0], [40.8, 25611.0], [40.9, 25643.0], [41.0, 25649.0], [41.1, 25651.0], [41.2, 25651.0], [41.3, 25660.0], [41.4, 25680.0], [41.5, 25704.0], [41.6, 25704.0], [41.7, 25804.0], [41.8, 25806.0], [41.9, 25806.0], [42.0, 25813.0], [42.1, 25825.0], [42.2, 25839.0], [42.3, 25839.0], [42.4, 25872.0], [42.5, 25897.0], [42.6, 25905.0], [42.7, 25905.0], [42.8, 25912.0], [42.9, 25955.0], [43.0, 25976.0], [43.1, 25976.0], [43.2, 25987.0], [43.3, 25987.0], [43.4, 25987.0], [43.5, 26047.0], [43.6, 26132.0], [43.7, 26154.0], [43.8, 26154.0], [43.9, 26157.0], [44.0, 26166.0], [44.1, 26190.0], [44.2, 26190.0], [44.3, 26195.0], [44.4, 26208.0], [44.5, 26225.0], [44.6, 26225.0], [44.7, 26254.0], [44.8, 26277.0], [44.9, 26279.0], [45.0, 26279.0], [45.1, 26333.0], [45.2, 26339.0], [45.3, 26339.0], [45.4, 26350.0], [45.5, 26381.0], [45.6, 26409.0], [45.7, 26409.0], [45.8, 26454.0], [45.9, 26508.0], [46.0, 26531.0], [46.1, 26531.0], [46.2, 26539.0], [46.3, 26545.0], [46.4, 26566.0], [46.5, 26566.0], [46.6, 26583.0], [46.7, 26585.0], [46.8, 26585.0], [46.9, 26723.0], [47.0, 26724.0], [47.1, 26770.0], [47.2, 26770.0], [47.3, 26784.0], [47.4, 26846.0], [47.5, 26862.0], [47.6, 26862.0], [47.7, 26871.0], [47.8, 26877.0], [47.9, 26888.0], [48.0, 26888.0], [48.1, 26906.0], [48.2, 26925.0], [48.3, 26951.0], [48.4, 26951.0], [48.5, 26977.0], [48.6, 26990.0], [48.7, 26990.0], [48.8, 27009.0], [48.9, 27017.0], [49.0, 27039.0], [49.1, 27039.0], [49.2, 27063.0], [49.3, 27100.0], [49.4, 27119.0], [49.5, 27119.0], [49.6, 27127.0], [49.7, 27171.0], [49.8, 27184.0], [49.9, 27184.0], [50.0, 27193.0], [50.1, 27201.0], [50.2, 27201.0], [50.3, 27234.0], [50.4, 27336.0], [50.5, 27367.0], [50.6, 27367.0], [50.7, 27369.0], [50.8, 27411.0], [50.9, 27425.0], [51.0, 27425.0], [51.1, 27582.0], [51.2, 27592.0], [51.3, 27630.0], [51.4, 27630.0], [51.5, 27655.0], [51.6, 27662.0], [51.7, 27662.0], [51.8, 27680.0], [51.9, 27696.0], [52.0, 27705.0], [52.1, 27705.0], [52.2, 27708.0], [52.3, 27711.0], [52.4, 27771.0], [52.5, 27771.0], [52.6, 27786.0], [52.7, 27798.0], [52.8, 27809.0], [52.9, 27809.0], [53.0, 27821.0], [53.1, 27824.0], [53.2, 27834.0], [53.3, 27834.0], [53.4, 27853.0], [53.5, 27868.0], [53.6, 27868.0], [53.7, 27886.0], [53.8, 27891.0], [53.9, 27892.0], [54.0, 27892.0], [54.1, 27959.0], [54.2, 27966.0], [54.3, 27998.0], [54.4, 27998.0], [54.5, 28024.0], [54.6, 28027.0], [54.7, 28032.0], [54.8, 28032.0], [54.9, 28053.0], [55.0, 28057.0], [55.1, 28057.0], [55.2, 28060.0], [55.3, 28062.0], [55.4, 28068.0], [55.5, 28068.0], [55.6, 28104.0], [55.7, 28130.0], [55.8, 28142.0], [55.9, 28142.0], [56.0, 28153.0], [56.1, 28206.0], [56.2, 28228.0], [56.3, 28228.0], [56.4, 28239.0], [56.5, 28258.0], [56.6, 28331.0], [56.7, 28331.0], [56.8, 28348.0], [56.9, 28348.0], [57.0, 28348.0], [57.1, 28361.0], [57.2, 28374.0], [57.3, 28417.0], [57.4, 28417.0], [57.5, 28467.0], [57.6, 28470.0], [57.7, 28481.0], [57.8, 28481.0], [57.9, 28515.0], [58.0, 28556.0], [58.1, 28557.0], [58.2, 28557.0], [58.3, 28562.0], [58.4, 28597.0], [58.5, 28597.0], [58.6, 28620.0], [58.7, 28644.0], [58.8, 28699.0], [58.9, 28699.0], [59.0, 28753.0], [59.1, 28763.0], [59.2, 28813.0], [59.3, 28813.0], [59.4, 28840.0], [59.5, 28859.0], [59.6, 28862.0], [59.7, 28862.0], [59.8, 28894.0], [59.9, 28902.0], [60.0, 28940.0], [60.1, 28940.0], [60.2, 28945.0], [60.3, 28956.0], [60.4, 28956.0], [60.5, 28960.0], [60.6, 28976.0], [60.7, 28977.0], [60.8, 28977.0], [60.9, 28979.0], [61.0, 28984.0], [61.1, 28998.0], [61.2, 28998.0], [61.3, 29004.0], [61.4, 29004.0], [61.5, 29024.0], [61.6, 29024.0], [61.7, 29044.0], [61.8, 29046.0], [61.9, 29046.0], [62.0, 29062.0], [62.1, 29063.0], [62.2, 29066.0], [62.3, 29066.0], [62.4, 29073.0], [62.5, 29074.0], [62.6, 29081.0], [62.7, 29081.0], [62.8, 29084.0], [62.9, 29090.0], [63.0, 29090.0], [63.1, 29090.0], [63.2, 29097.0], [63.3, 29111.0], [63.4, 29111.0], [63.5, 29112.0], [63.6, 29118.0], [63.7, 29128.0], [63.8, 29128.0], [63.9, 29131.0], [64.0, 29131.0], [64.1, 29140.0], [64.2, 29140.0], [64.3, 29159.0], [64.4, 29182.0], [64.5, 29197.0], [64.6, 29197.0], [64.7, 29201.0], [64.8, 29214.0], [64.9, 29220.0], [65.0, 29220.0], [65.1, 29229.0], [65.2, 29229.0], [65.3, 29229.0], [65.4, 29230.0], [65.5, 29236.0], [65.6, 29246.0], [65.7, 29246.0], [65.8, 29247.0], [65.9, 29247.0], [66.0, 29256.0], [66.1, 29256.0], [66.2, 29258.0], [66.3, 29264.0], [66.4, 29287.0], [66.5, 29287.0], [66.6, 29288.0], [66.7, 29289.0], [66.8, 29289.0], [66.9, 29294.0], [67.0, 29302.0], [67.1, 29315.0], [67.2, 29315.0], [67.3, 29316.0], [67.4, 29318.0], [67.5, 29326.0], [67.6, 29326.0], [67.7, 29331.0], [67.8, 29331.0], [67.9, 29332.0], [68.0, 29332.0], [68.1, 29333.0], [68.2, 29334.0], [68.3, 29337.0], [68.4, 29337.0], [68.5, 29337.0], [68.6, 29341.0], [68.7, 29341.0], [68.8, 29351.0], [68.9, 29358.0], [69.0, 29374.0], [69.1, 29374.0], [69.2, 29389.0], [69.3, 29392.0], [69.4, 29393.0], [69.5, 29393.0], [69.6, 29394.0], [69.7, 29401.0], [69.8, 29403.0], [69.9, 29403.0], [70.0, 29406.0], [70.1, 29407.0], [70.2, 29407.0], [70.3, 29420.0], [70.4, 29425.0], [70.5, 29425.0], [70.6, 29425.0], [70.7, 29429.0], [70.8, 29431.0], [70.9, 29434.0], [71.0, 29434.0], [71.1, 29435.0], [71.2, 29471.0], [71.3, 29482.0], [71.4, 29482.0], [71.5, 29488.0], [71.6, 29496.0], [71.7, 29496.0], [71.8, 29496.0], [71.9, 29499.0], [72.0, 29500.0], [72.1, 29500.0], [72.2, 29510.0], [72.3, 29528.0], [72.4, 29531.0], [72.5, 29531.0], [72.6, 29542.0], [72.7, 29545.0], [72.8, 29547.0], [72.9, 29547.0], [73.0, 29555.0], [73.1, 29563.0], [73.2, 29566.0], [73.3, 29566.0], [73.4, 29569.0], [73.5, 29574.0], [73.6, 29574.0], [73.7, 29575.0], [73.8, 29576.0], [73.9, 29582.0], [74.0, 29582.0], [74.1, 29583.0], [74.2, 29596.0], [74.3, 29600.0], [74.4, 29600.0], [74.5, 29605.0], [74.6, 29606.0], [74.7, 29607.0], [74.8, 29607.0], [74.9, 29610.0], [75.0, 29613.0], [75.1, 29613.0], [75.2, 29627.0], [75.3, 29635.0], [75.4, 29656.0], [75.5, 29656.0], [75.6, 29659.0], [75.7, 29661.0], [75.8, 29667.0], [75.9, 29667.0], [76.0, 29675.0], [76.1, 29685.0], [76.2, 29689.0], [76.3, 29689.0], [76.4, 29695.0], [76.5, 29709.0], [76.6, 29709.0], [76.7, 29709.0], [76.8, 29712.0], [76.9, 29718.0], [77.0, 29718.0], [77.1, 29718.0], [77.2, 29724.0], [77.3, 29730.0], [77.4, 29730.0], [77.5, 29730.0], [77.6, 29732.0], [77.7, 29743.0], [77.8, 29743.0], [77.9, 29743.0], [78.0, 29745.0], [78.1, 29749.0], [78.2, 29749.0], [78.3, 29760.0], [78.4, 29772.0], [78.5, 29772.0], [78.6, 29775.0], [78.7, 29777.0], [78.8, 29779.0], [78.9, 29779.0], [79.0, 29782.0], [79.1, 29784.0], [79.2, 29784.0], [79.3, 29784.0], [79.4, 29789.0], [79.5, 29790.0], [79.6, 29793.0], [79.7, 29793.0], [79.8, 29798.0], [79.9, 29798.0], [80.0, 29804.0], [80.1, 29804.0], [80.2, 29805.0], [80.3, 29808.0], [80.4, 29808.0], [80.5, 29810.0], [80.6, 29812.0], [80.7, 29815.0], [80.8, 29815.0], [80.9, 29816.0], [81.0, 29819.0], [81.1, 29820.0], [81.2, 29820.0], [81.3, 29822.0], [81.4, 29822.0], [81.5, 29823.0], [81.6, 29823.0], [81.7, 29824.0], [81.8, 29827.0], [81.9, 29827.0], [82.0, 29827.0], [82.1, 29830.0], [82.2, 29844.0], [82.3, 29844.0], [82.4, 29854.0], [82.5, 29857.0], [82.6, 29857.0], [82.7, 29857.0], [82.8, 29861.0], [82.9, 29863.0], [83.0, 29867.0], [83.1, 29867.0], [83.2, 29883.0], [83.3, 29884.0], [83.4, 29884.0], [83.5, 29893.0], [83.6, 29911.0], [83.7, 29913.0], [83.8, 29913.0], [83.9, 29914.0], [84.0, 29931.0], [84.1, 29932.0], [84.2, 29932.0], [84.3, 29935.0], [84.4, 29944.0], [84.5, 29952.0], [84.6, 29952.0], [84.7, 29954.0], [84.8, 29963.0], [84.9, 29970.0], [85.0, 29970.0], [85.1, 29976.0], [85.2, 29985.0], [85.3, 29985.0], [85.4, 29985.0], [85.5, 29986.0], [85.6, 29987.0], [85.7, 29987.0], [85.8, 29988.0], [85.9, 29990.0], [86.0, 30011.0], [86.1, 30011.0], [86.2, 30022.0], [86.3, 30026.0], [86.4, 30027.0], [86.5, 30027.0], [86.6, 30028.0], [86.7, 30045.0], [86.8, 30045.0], [86.9, 30047.0], [87.0, 30047.0], [87.1, 30048.0], [87.2, 30048.0], [87.3, 30049.0], [87.4, 30062.0], [87.5, 30065.0], [87.6, 30065.0], [87.7, 30083.0], [87.8, 30088.0], [87.9, 30099.0], [88.0, 30099.0], [88.1, 30101.0], [88.2, 30119.0], [88.3, 30121.0], [88.4, 30121.0], [88.5, 30121.0], [88.6, 30131.0], [88.7, 30131.0], [88.8, 30138.0], [88.9, 30140.0], [89.0, 30141.0], [89.1, 30141.0], [89.2, 30142.0], [89.3, 30145.0], [89.4, 30151.0], [89.5, 30151.0], [89.6, 30156.0], [89.7, 30156.0], [89.8, 30177.0], [89.9, 30177.0], [90.0, 30187.0], [90.1, 30191.0], [90.2, 30191.0], [90.3, 30228.0], [90.4, 30233.0], [90.5, 30236.0], [90.6, 30236.0], [90.7, 30254.0], [90.8, 30260.0], [90.9, 30272.0], [91.0, 30272.0], [91.1, 30305.0], [91.2, 30305.0], [91.3, 30310.0], [91.4, 30310.0], [91.5, 30325.0], [91.6, 30328.0], [91.7, 30328.0], [91.8, 30336.0], [91.9, 30338.0], [92.0, 30346.0], [92.1, 30346.0], [92.2, 30358.0], [92.3, 30378.0], [92.4, 30379.0], [92.5, 30379.0], [92.6, 30413.0], [92.7, 30421.0], [92.8, 30481.0], [92.9, 30481.0], [93.0, 30541.0], [93.1, 30551.0], [93.2, 30644.0], [93.3, 30644.0], [93.4, 30688.0], [93.5, 30884.0], [93.6, 30884.0], [93.7, 30937.0], [93.8, 31253.0], [93.9, 31424.0], [94.0, 31424.0], [94.1, 31514.0], [94.2, 31588.0], [94.3, 31988.0], [94.4, 31988.0], [94.5, 32065.0], [94.6, 32106.0], [94.7, 32112.0], [94.8, 32112.0], [94.9, 32131.0], [95.0, 32135.0], [95.1, 32135.0], [95.2, 32141.0], [95.3, 32171.0], [95.4, 32798.0], [95.5, 32798.0], [95.6, 32876.0], [95.7, 33064.0], [95.8, 33282.0], [95.9, 33282.0], [96.0, 33388.0], [96.1, 33801.0], [96.2, 33961.0], [96.3, 33961.0], [96.4, 34344.0], [96.5, 34854.0], [96.6, 34909.0], [96.7, 34909.0], [96.8, 35492.0], [96.9, 35611.0], [97.0, 35611.0], [97.1, 36254.0], [97.2, 36541.0], [97.3, 36814.0], [97.4, 36814.0], [97.5, 37706.0], [97.6, 38218.0], [97.7, 38308.0], [97.8, 38308.0], [97.9, 38421.0], [98.0, 39317.0], [98.1, 39935.0], [98.2, 39935.0], [98.3, 40933.0], [98.4, 41619.0], [98.5, 41619.0], [98.6, 42060.0], [98.7, 42333.0], [98.8, 42371.0], [98.9, 42371.0], [99.0, 43197.0], [99.1, 43301.0], [99.2, 43657.0], [99.3, 43657.0], [99.4, 43974.0], [99.5, 44195.0], [99.6, 44374.0], [99.7, 44374.0], [99.8, 44523.0], [99.9, 44936.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 26.0, "series": [{"data": [[33300.0, 1.0], [34300.0, 1.0], [33900.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [38300.0, 1.0], [37700.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [39900.0, 1.0], [42300.0, 2.0], [43100.0, 1.0], [43900.0, 1.0], [44900.0, 1.0], [44500.0, 1.0], [44300.0, 1.0], [43300.0, 1.0], [44100.0, 1.0], [3000.0, 1.0], [5300.0, 1.0], [8400.0, 1.0], [11200.0, 1.0], [13700.0, 1.0], [16300.0, 1.0], [17300.0, 2.0], [17400.0, 3.0], [17000.0, 2.0], [16900.0, 1.0], [18200.0, 5.0], [18300.0, 4.0], [17900.0, 8.0], [17500.0, 2.0], [17800.0, 4.0], [18000.0, 16.0], [18100.0, 6.0], [17600.0, 2.0], [18400.0, 5.0], [19200.0, 1.0], [19000.0, 3.0], [18700.0, 3.0], [19100.0, 3.0], [18900.0, 2.0], [19400.0, 2.0], [18500.0, 2.0], [18600.0, 3.0], [19300.0, 2.0], [20300.0, 6.0], [20000.0, 4.0], [19700.0, 6.0], [19600.0, 8.0], [19800.0, 3.0], [19900.0, 4.0], [20100.0, 1.0], [20800.0, 3.0], [20700.0, 2.0], [20500.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [21100.0, 2.0], [21400.0, 2.0], [21600.0, 4.0], [22000.0, 5.0], [22100.0, 2.0], [22400.0, 4.0], [22500.0, 2.0], [22200.0, 1.0], [21700.0, 3.0], [21900.0, 1.0], [21800.0, 3.0], [22300.0, 2.0], [23400.0, 2.0], [23200.0, 5.0], [22600.0, 8.0], [22800.0, 5.0], [23100.0, 4.0], [23300.0, 5.0], [23500.0, 2.0], [22900.0, 2.0], [23000.0, 1.0], [22700.0, 4.0], [23800.0, 4.0], [23600.0, 3.0], [24000.0, 7.0], [23900.0, 7.0], [24300.0, 5.0], [24500.0, 5.0], [24100.0, 6.0], [24200.0, 3.0], [24400.0, 7.0], [23700.0, 7.0], [24700.0, 6.0], [25300.0, 7.0], [24900.0, 6.0], [24800.0, 4.0], [25100.0, 9.0], [25400.0, 4.0], [25500.0, 2.0], [25200.0, 3.0], [24600.0, 5.0], [25000.0, 3.0], [25700.0, 1.0], [26500.0, 7.0], [25800.0, 7.0], [26200.0, 5.0], [26000.0, 1.0], [26300.0, 4.0], [26400.0, 2.0], [25600.0, 6.0], [26100.0, 6.0], [25900.0, 6.0], [27600.0, 5.0], [27500.0, 2.0], [27300.0, 3.0], [27000.0, 4.0], [26700.0, 4.0], [26900.0, 5.0], [27100.0, 6.0], [27200.0, 2.0], [26800.0, 5.0], [27400.0, 2.0], [28600.0, 3.0], [27800.0, 9.0], [28000.0, 8.0], [28300.0, 5.0], [27700.0, 6.0], [28400.0, 4.0], [28500.0, 5.0], [27900.0, 3.0], [28200.0, 4.0], [28100.0, 4.0], [28900.0, 10.0], [29100.0, 10.0], [29200.0, 17.0], [29600.0, 16.0], [29500.0, 17.0], [29400.0, 17.0], [29300.0, 20.0], [29000.0, 15.0], [28800.0, 5.0], [28700.0, 2.0], [29900.0, 18.0], [30600.0, 2.0], [30500.0, 2.0], [29700.0, 26.0], [29800.0, 26.0], [30200.0, 6.0], [30100.0, 16.0], [30000.0, 15.0], [30300.0, 11.0], [30400.0, 3.0], [31200.0, 1.0], [30800.0, 1.0], [31400.0, 1.0], [31500.0, 2.0], [30900.0, 1.0], [32100.0, 6.0], [31900.0, 1.0], [32000.0, 1.0], [32700.0, 1.0], [34800.0, 1.0], [33800.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [33000.0, 1.0], [35600.0, 1.0], [36200.0, 1.0], [36800.0, 1.0], [35400.0, 1.0], [38200.0, 1.0], [38400.0, 1.0], [41600.0, 1.0], [42000.0, 1.0], [43600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.60408722E12, "maxY": 10.0, "series": [{"data": [[1.60408806E12, 10.0], [1.60408836E12, 10.0], [1.60408896E12, 10.0], [1.60408866E12, 10.0], [1.60408908E12, 10.0], [1.60408878E12, 10.0], [1.60408746E12, 10.0], [1.60408776E12, 10.0], [1.60408758E12, 10.0], [1.60408788E12, 10.0], [1.60408818E12, 10.0], [1.60408848E12, 10.0], [1.6040883E12, 10.0], [1.6040886E12, 10.0], [1.60408728E12, 10.0], [1.6040889E12, 10.0], [1.6040874E12, 10.0], [1.60408902E12, 10.0], [1.6040877E12, 10.0], [1.604088E12, 10.0], [1.60408782E12, 10.0], [1.60408812E12, 10.0], [1.60408842E12, 10.0], [1.60408872E12, 10.0], [1.60408884E12, 10.0], [1.60408854E12, 10.0], [1.60408722E12, 10.0], [1.60408752E12, 10.0], [1.60408914E12, 8.333333333333334], [1.60408734E12, 10.0], [1.60408764E12, 10.0], [1.60408794E12, 10.0], [1.60408824E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408914E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17858.0, "minX": 1.0, "maxY": 26435.322314049587, "series": [{"data": [[8.0, 18004.0], [4.0, 18021.0], [2.0, 18071.0], [1.0, 18432.0], [9.0, 17952.0], [10.0, 26435.322314049587], [5.0, 17971.0], [6.0, 17858.0], [3.0, 18034.0], [7.0, 18022.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26332.529251700682]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 95.11666666666666, "minX": 1.60408722E12, "maxY": 213951.1, "series": [{"data": [[1.60408806E12, 132153.45], [1.60408836E12, 76496.2], [1.60408896E12, 29742.0], [1.60408866E12, 51028.15], [1.60408908E12, 89465.5], [1.60408878E12, 45952.066666666666], [1.60408746E12, 77456.88333333333], [1.60408776E12, 55762.55], [1.60408758E12, 46234.01666666667], [1.60408788E12, 45015.15], [1.60408818E12, 213951.1], [1.60408848E12, 42952.13333333333], [1.6040883E12, 84622.85], [1.6040886E12, 48597.3], [1.60408728E12, 106955.85], [1.6040889E12, 31380.366666666665], [1.6040874E12, 72413.11666666667], [1.60408902E12, 125893.61666666667], [1.6040877E12, 47445.15], [1.604088E12, 108557.38333333333], [1.60408782E12, 43929.3], [1.60408812E12, 66851.68333333333], [1.60408842E12, 35789.75], [1.60408872E12, 49333.6], [1.60408884E12, 45724.28333333333], [1.60408854E12, 49521.8], [1.60408722E12, 157271.61666666667], [1.60408752E12, 49897.11666666667], [1.60408914E12, 37835.05], [1.60408734E12, 124952.13333333333], [1.60408764E12, 44036.75], [1.60408794E12, 27788.2], [1.60408824E12, 58475.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60408806E12, 165.48333333333332], [1.60408836E12, 182.63333333333333], [1.60408896E12, 182.46666666666667], [1.60408866E12, 154.03333333333333], [1.60408908E12, 139.48333333333332], [1.60408878E12, 146.11666666666667], [1.60408746E12, 176.26666666666668], [1.60408776E12, 153.68333333333334], [1.60408758E12, 146.13333333333333], [1.60408788E12, 146.03333333333333], [1.60408818E12, 175.95], [1.60408848E12, 153.38333333333333], [1.6040883E12, 150.83333333333334], [1.6040886E12, 146.11666666666667], [1.60408728E12, 194.56666666666666], [1.6040889E12, 167.75], [1.6040874E12, 118.58333333333333], [1.60408902E12, 195.43333333333334], [1.6040877E12, 146.11666666666667], [1.604088E12, 210.03333333333333], [1.60408782E12, 146.08333333333334], [1.60408812E12, 194.63333333333333], [1.60408842E12, 125.45], [1.60408872E12, 153.78333333333333], [1.60408884E12, 153.28333333333333], [1.60408854E12, 146.16666666666666], [1.60408722E12, 95.11666666666666], [1.60408752E12, 161.0], [1.60408914E12, 184.21666666666667], [1.60408734E12, 177.3], [1.60408764E12, 146.1], [1.60408794E12, 175.18333333333334], [1.60408824E12, 229.86666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408914E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17299.153846153848, "minX": 1.60408722E12, "maxY": 39264.25000000001, "series": [{"data": [[1.60408806E12, 22511.695652173912], [1.60408836E12, 25531.08], [1.60408896E12, 23606.560000000005], [1.60408866E12, 28728.285714285714], [1.60408908E12, 29007.789473684214], [1.60408878E12, 29356.399999999998], [1.60408746E12, 25892.166666666668], [1.60408776E12, 29640.285714285717], [1.60408758E12, 29815.100000000002], [1.60408788E12, 29964.9], [1.60408818E12, 24830.333333333332], [1.60408848E12, 32679.571428571424], [1.6040883E12, 26098.400000000005], [1.6040886E12, 30096.100000000002], [1.60408728E12, 23151.888888888887], [1.6040889E12, 26832.999999999996], [1.6040874E12, 39264.25000000001], [1.60408902E12, 22352.111111111113], [1.6040877E12, 30073.25], [1.604088E12, 21065.275862068967], [1.60408782E12, 29554.649999999998], [1.60408812E12, 24166.17857142857], [1.60408842E12, 28907.117647058825], [1.60408872E12, 28472.380952380954], [1.60408884E12, 29477.619047619046], [1.60408854E12, 29817.199999999997], [1.60408722E12, 17299.153846153848], [1.60408752E12, 26546.0], [1.60408914E12, 21848.555555555555], [1.60408734E12, 21374.833333333332], [1.60408764E12, 29386.55], [1.60408794E12, 26235.5], [1.60408824E12, 19184.151515151516]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408914E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17293.923076923078, "minX": 1.60408722E12, "maxY": 39261.875, "series": [{"data": [[1.60408806E12, 22508.08695652174], [1.60408836E12, 25529.6], [1.60408896E12, 23605.760000000006], [1.60408866E12, 28727.09523809524], [1.60408908E12, 29005.105263157897], [1.60408878E12, 29355.0], [1.60408746E12, 25890.5], [1.60408776E12, 29638.904761904763], [1.60408758E12, 29814.000000000004], [1.60408788E12, 29963.75], [1.60408818E12, 24826.041666666664], [1.60408848E12, 32678.571428571424], [1.6040883E12, 26096.450000000004], [1.6040886E12, 30094.700000000004], [1.60408728E12, 23150.0], [1.6040889E12, 26832.304347826088], [1.6040874E12, 39261.875], [1.60408902E12, 22348.85185185185], [1.6040877E12, 30071.849999999995], [1.604088E12, 21062.896551724134], [1.60408782E12, 29553.550000000007], [1.60408812E12, 24163.857142857145], [1.60408842E12, 28906.176470588238], [1.60408872E12, 28471.09523809524], [1.60408884E12, 29476.285714285717], [1.60408854E12, 29816.1], [1.60408722E12, 17293.923076923078], [1.60408752E12, 26544.81818181818], [1.60408914E12, 21846.481481481478], [1.60408734E12, 21372.083333333336], [1.60408764E12, 29385.4], [1.60408794E12, 26234.791666666668], [1.60408824E12, 19182.636363636368]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408914E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.19999999999999998, "minX": 1.60408722E12, "maxY": 10.076923076923075, "series": [{"data": [[1.60408806E12, 0.34782608695652173], [1.60408836E12, 0.28], [1.60408896E12, 0.6000000000000001], [1.60408866E12, 0.4285714285714286], [1.60408908E12, 0.368421052631579], [1.60408878E12, 0.19999999999999998], [1.60408746E12, 0.7083333333333335], [1.60408776E12, 0.38095238095238093], [1.60408758E12, 0.35], [1.60408788E12, 0.6], [1.60408818E12, 0.5833333333333335], [1.60408848E12, 0.6666666666666667], [1.6040883E12, 0.4], [1.6040886E12, 0.7499999999999999], [1.60408728E12, 0.5555555555555556], [1.6040889E12, 0.6086956521739132], [1.6040874E12, 0.6875], [1.60408902E12, 0.2592592592592593], [1.6040877E12, 0.65], [1.604088E12, 0.4827586206896552], [1.60408782E12, 0.5499999999999999], [1.60408812E12, 0.3214285714285714], [1.60408842E12, 0.5294117647058824], [1.60408872E12, 0.5714285714285714], [1.60408884E12, 0.4285714285714286], [1.60408854E12, 0.3], [1.60408722E12, 10.076923076923075], [1.60408752E12, 0.6818181818181818], [1.60408914E12, 0.40740740740740744], [1.60408734E12, 0.20833333333333337], [1.60408764E12, 0.39999999999999997], [1.60408794E12, 0.375], [1.60408824E12, 0.3636363636363637]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408914E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3077.0, "minX": 1.60408722E12, "maxY": 44936.0, "series": [{"data": [[1.60408806E12, 31988.0], [1.60408836E12, 28862.0], [1.60408896E12, 26190.0], [1.60408866E12, 29990.0], [1.60408908E12, 36814.0], [1.60408878E12, 30022.0], [1.60408746E12, 32112.0], [1.60408776E12, 30644.0], [1.60408758E12, 30236.0], [1.60408788E12, 30378.0], [1.60408818E12, 29302.0], [1.60408848E12, 44195.0], [1.6040883E12, 32106.0], [1.6040886E12, 30379.0], [1.60408728E12, 28057.0], [1.6040889E12, 29635.0], [1.6040874E12, 44936.0], [1.60408902E12, 28060.0], [1.6040877E12, 30413.0], [1.604088E12, 26583.0], [1.60408782E12, 29883.0], [1.60408812E12, 32171.0], [1.60408842E12, 42333.0], [1.60408872E12, 29596.0], [1.60408884E12, 29867.0], [1.60408854E12, 30305.0], [1.60408722E12, 26277.0], [1.60408752E12, 30884.0], [1.60408914E12, 38421.0], [1.60408734E12, 26906.0], [1.60408764E12, 29824.0], [1.60408794E12, 29341.0], [1.60408824E12, 25135.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60408806E12, 18485.0], [1.60408836E12, 23774.0], [1.60408896E12, 21130.0], [1.60408866E12, 27234.0], [1.60408908E12, 22642.0], [1.60408878E12, 28998.0], [1.60408746E12, 22406.0], [1.60408776E12, 28562.0], [1.60408758E12, 29510.0], [1.60408788E12, 29332.0], [1.60408818E12, 19645.0], [1.60408848E12, 25912.0], [1.6040883E12, 19892.0], [1.6040886E12, 29804.0], [1.60408728E12, 17946.0], [1.6040889E12, 24488.0], [1.6040874E12, 30688.0], [1.60408902E12, 18620.0], [1.6040877E12, 29659.0], [1.604088E12, 17643.0], [1.60408782E12, 29230.0], [1.60408812E12, 18013.0], [1.60408842E12, 22094.0], [1.60408872E12, 26925.0], [1.60408884E12, 29073.0], [1.60408854E12, 29392.0], [1.60408722E12, 3077.0], [1.60408752E12, 23212.0], [1.60408914E12, 16999.0], [1.60408734E12, 17337.0], [1.60408764E12, 28840.0], [1.60408794E12, 23861.0], [1.60408824E12, 17909.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60408806E12, 18485.0], [1.60408836E12, 23774.0], [1.60408896E12, 21130.0], [1.60408866E12, 27234.0], [1.60408908E12, 22642.0], [1.60408878E12, 28998.0], [1.60408746E12, 22406.0], [1.60408776E12, 28562.0], [1.60408758E12, 29510.0], [1.60408788E12, 29332.0], [1.60408818E12, 19645.0], [1.60408848E12, 25912.0], [1.6040883E12, 19892.0], [1.6040886E12, 29804.0], [1.60408728E12, 17946.0], [1.6040889E12, 24488.0], [1.6040874E12, 30688.0], [1.60408902E12, 18620.0], [1.6040877E12, 29659.0], [1.604088E12, 17643.0], [1.60408782E12, 29230.0], [1.60408812E12, 18013.0], [1.60408842E12, 22094.0], [1.60408872E12, 26925.0], [1.60408884E12, 29073.0], [1.60408854E12, 29392.0], [1.60408722E12, 3077.0], [1.60408752E12, 23212.0], [1.60408914E12, 16999.0], [1.60408734E12, 17337.0], [1.60408764E12, 28840.0], [1.60408794E12, 23861.0], [1.60408824E12, 17909.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60408806E12, 18485.0], [1.60408836E12, 23774.0], [1.60408896E12, 21130.0], [1.60408866E12, 27234.0], [1.60408908E12, 22642.0], [1.60408878E12, 28998.0], [1.60408746E12, 22406.0], [1.60408776E12, 28562.0], [1.60408758E12, 29510.0], [1.60408788E12, 29332.0], [1.60408818E12, 19645.0], [1.60408848E12, 25912.0], [1.6040883E12, 19892.0], [1.6040886E12, 29804.0], [1.60408728E12, 17946.0], [1.6040889E12, 24488.0], [1.6040874E12, 30688.0], [1.60408902E12, 18620.0], [1.6040877E12, 29659.0], [1.604088E12, 17643.0], [1.60408782E12, 29230.0], [1.60408812E12, 18013.0], [1.60408842E12, 22094.0], [1.60408872E12, 26925.0], [1.60408884E12, 29073.0], [1.60408854E12, 29392.0], [1.60408722E12, 3077.0], [1.60408752E12, 23212.0], [1.60408914E12, 16999.0], [1.60408734E12, 17337.0], [1.60408764E12, 28840.0], [1.60408794E12, 23861.0], [1.60408824E12, 17909.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60408806E12, 18485.0], [1.60408836E12, 23774.0], [1.60408896E12, 21130.0], [1.60408866E12, 27234.0], [1.60408908E12, 22642.0], [1.60408878E12, 28998.0], [1.60408746E12, 22406.0], [1.60408776E12, 28562.0], [1.60408758E12, 29510.0], [1.60408788E12, 29332.0], [1.60408818E12, 19645.0], [1.60408848E12, 25912.0], [1.6040883E12, 19892.0], [1.6040886E12, 29804.0], [1.60408728E12, 17946.0], [1.6040889E12, 24488.0], [1.6040874E12, 30688.0], [1.60408902E12, 18620.0], [1.6040877E12, 29659.0], [1.604088E12, 17643.0], [1.60408782E12, 29230.0], [1.60408812E12, 18013.0], [1.60408842E12, 22094.0], [1.60408872E12, 26925.0], [1.60408884E12, 29073.0], [1.60408854E12, 29392.0], [1.60408722E12, 3077.0], [1.60408752E12, 23212.0], [1.60408914E12, 16999.0], [1.60408734E12, 17337.0], [1.60408764E12, 28840.0], [1.60408794E12, 23861.0], [1.60408824E12, 17909.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60408806E12, 22518.0], [1.60408836E12, 24685.0], [1.60408896E12, 23715.0], [1.60408866E12, 29046.0], [1.60408908E12, 28753.0], [1.60408878E12, 29270.0], [1.60408746E12, 25109.0], [1.60408776E12, 29709.0], [1.60408758E12, 29779.0], [1.60408788E12, 30093.5], [1.60408818E12, 24395.5], [1.60408848E12, 29420.0], [1.6040883E12, 25475.0], [1.6040886E12, 30055.5], [1.60408728E12, 23299.0], [1.6040889E12, 26877.0], [1.6040874E12, 40468.0], [1.60408902E12, 21772.0], [1.6040877E12, 30073.0], [1.604088E12, 19212.0], [1.60408782E12, 29523.5], [1.60408812E12, 25316.0], [1.60408842E12, 25976.0], [1.60408872E12, 28348.0], [1.60408884E12, 29499.0], [1.60408854E12, 29813.5], [1.60408722E12, 18373.0], [1.60408752E12, 26758.0], [1.60408914E12, 18034.0], [1.60408734E12, 22282.5], [1.60408764E12, 29391.5], [1.60408794E12, 25971.0], [1.60408824E12, 18461.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408914E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27193.0, "minX": 1.0, "maxY": 27193.0, "series": [{"data": [[1.0, 27193.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27193.0, "minX": 1.0, "maxY": 27193.0, "series": [{"data": [[1.0, 27193.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60408722E12, "maxY": 0.55, "series": [{"data": [[1.60408806E12, 0.38333333333333336], [1.60408836E12, 0.4166666666666667], [1.60408896E12, 0.4166666666666667], [1.60408866E12, 0.35], [1.60408908E12, 0.31666666666666665], [1.60408878E12, 0.3333333333333333], [1.60408746E12, 0.4], [1.60408776E12, 0.35], [1.60408758E12, 0.3333333333333333], [1.60408788E12, 0.3333333333333333], [1.60408818E12, 0.4], [1.60408848E12, 0.35], [1.6040883E12, 0.3333333333333333], [1.6040886E12, 0.3333333333333333], [1.60408728E12, 0.45], [1.6040889E12, 0.38333333333333336], [1.6040874E12, 0.26666666666666666], [1.60408902E12, 0.45], [1.6040877E12, 0.3333333333333333], [1.604088E12, 0.48333333333333334], [1.60408782E12, 0.3333333333333333], [1.60408812E12, 0.4666666666666667], [1.60408842E12, 0.2833333333333333], [1.60408872E12, 0.35], [1.60408884E12, 0.35], [1.60408854E12, 0.3333333333333333], [1.60408722E12, 0.38333333333333336], [1.60408752E12, 0.36666666666666664], [1.60408914E12, 0.2833333333333333], [1.60408734E12, 0.4], [1.60408764E12, 0.3333333333333333], [1.60408794E12, 0.4], [1.60408824E12, 0.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408914E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60408722E12, "maxY": 0.55, "series": [{"data": [[1.60408806E12, 0.38333333333333336], [1.60408836E12, 0.4166666666666667], [1.60408896E12, 0.4166666666666667], [1.60408866E12, 0.35], [1.60408908E12, 0.31666666666666665], [1.60408878E12, 0.3333333333333333], [1.60408746E12, 0.4], [1.60408776E12, 0.35], [1.60408758E12, 0.3333333333333333], [1.60408788E12, 0.3333333333333333], [1.60408818E12, 0.4], [1.60408848E12, 0.35], [1.6040883E12, 0.3333333333333333], [1.6040886E12, 0.3333333333333333], [1.60408728E12, 0.45], [1.6040889E12, 0.38333333333333336], [1.6040874E12, 0.26666666666666666], [1.60408902E12, 0.45], [1.6040877E12, 0.3333333333333333], [1.604088E12, 0.48333333333333334], [1.60408782E12, 0.3333333333333333], [1.60408812E12, 0.4666666666666667], [1.60408842E12, 0.2833333333333333], [1.60408872E12, 0.35], [1.60408884E12, 0.35], [1.60408854E12, 0.3333333333333333], [1.60408722E12, 0.21666666666666667], [1.60408752E12, 0.36666666666666664], [1.60408914E12, 0.45], [1.60408734E12, 0.4], [1.60408764E12, 0.3333333333333333], [1.60408794E12, 0.4], [1.60408824E12, 0.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408914E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60408722E12, "maxY": 0.55, "series": [{"data": [[1.60408806E12, 0.38333333333333336], [1.60408836E12, 0.4166666666666667], [1.60408896E12, 0.4166666666666667], [1.60408866E12, 0.35], [1.60408908E12, 0.31666666666666665], [1.60408878E12, 0.3333333333333333], [1.60408746E12, 0.4], [1.60408776E12, 0.35], [1.60408758E12, 0.3333333333333333], [1.60408788E12, 0.3333333333333333], [1.60408818E12, 0.4], [1.60408848E12, 0.35], [1.6040883E12, 0.3333333333333333], [1.6040886E12, 0.3333333333333333], [1.60408728E12, 0.45], [1.6040889E12, 0.38333333333333336], [1.6040874E12, 0.26666666666666666], [1.60408902E12, 0.45], [1.6040877E12, 0.3333333333333333], [1.604088E12, 0.48333333333333334], [1.60408782E12, 0.3333333333333333], [1.60408812E12, 0.4666666666666667], [1.60408842E12, 0.2833333333333333], [1.60408872E12, 0.35], [1.60408884E12, 0.35], [1.60408854E12, 0.3333333333333333], [1.60408722E12, 0.21666666666666667], [1.60408752E12, 0.36666666666666664], [1.60408914E12, 0.45], [1.60408734E12, 0.4], [1.60408764E12, 0.3333333333333333], [1.60408794E12, 0.4], [1.60408824E12, 0.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408914E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60408722E12, "maxY": 0.55, "series": [{"data": [[1.60408806E12, 0.38333333333333336], [1.60408836E12, 0.4166666666666667], [1.60408896E12, 0.4166666666666667], [1.60408866E12, 0.35], [1.60408908E12, 0.31666666666666665], [1.60408878E12, 0.3333333333333333], [1.60408746E12, 0.4], [1.60408776E12, 0.35], [1.60408758E12, 0.3333333333333333], [1.60408788E12, 0.3333333333333333], [1.60408818E12, 0.4], [1.60408848E12, 0.35], [1.6040883E12, 0.3333333333333333], [1.6040886E12, 0.3333333333333333], [1.60408728E12, 0.45], [1.6040889E12, 0.38333333333333336], [1.6040874E12, 0.26666666666666666], [1.60408902E12, 0.45], [1.6040877E12, 0.3333333333333333], [1.604088E12, 0.48333333333333334], [1.60408782E12, 0.3333333333333333], [1.60408812E12, 0.4666666666666667], [1.60408842E12, 0.2833333333333333], [1.60408872E12, 0.35], [1.60408884E12, 0.35], [1.60408854E12, 0.3333333333333333], [1.60408722E12, 0.21666666666666667], [1.60408752E12, 0.36666666666666664], [1.60408914E12, 0.45], [1.60408734E12, 0.4], [1.60408764E12, 0.3333333333333333], [1.60408794E12, 0.4], [1.60408824E12, 0.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408914E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

