/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3404.0, "minX": 0.0, "maxY": 45259.0, "series": [{"data": [[0.0, 3404.0], [0.1, 3404.0], [0.2, 5641.0], [0.3, 8580.0], [0.4, 8580.0], [0.5, 11589.0], [0.6, 14131.0], [0.7, 16639.0], [0.8, 16639.0], [0.9, 17185.0], [1.0, 17267.0], [1.1, 17273.0], [1.2, 17273.0], [1.3, 17306.0], [1.4, 17320.0], [1.5, 17326.0], [1.6, 17326.0], [1.7, 17327.0], [1.8, 17346.0], [1.9, 17346.0], [2.0, 17392.0], [2.1, 17412.0], [2.2, 17429.0], [2.3, 17429.0], [2.4, 17437.0], [2.5, 17479.0], [2.6, 17487.0], [2.7, 17487.0], [2.8, 17489.0], [2.9, 17526.0], [3.0, 17530.0], [3.1, 17530.0], [3.2, 17534.0], [3.3, 17587.0], [3.4, 17587.0], [3.5, 17587.0], [3.6, 17602.0], [3.7, 17611.0], [3.8, 17611.0], [3.9, 17628.0], [4.0, 17629.0], [4.1, 17629.0], [4.2, 17629.0], [4.3, 17638.0], [4.4, 17644.0], [4.5, 17657.0], [4.6, 17657.0], [4.7, 17667.0], [4.8, 17679.0], [4.9, 17683.0], [5.0, 17683.0], [5.1, 17691.0], [5.2, 17696.0], [5.3, 17696.0], [5.4, 17697.0], [5.5, 17699.0], [5.6, 17725.0], [5.7, 17725.0], [5.8, 17764.0], [5.9, 17764.0], [6.0, 17771.0], [6.1, 17771.0], [6.2, 17815.0], [6.3, 17873.0], [6.4, 17893.0], [6.5, 17893.0], [6.6, 17919.0], [6.7, 17927.0], [6.8, 17927.0], [6.9, 18026.0], [7.0, 18057.0], [7.1, 18065.0], [7.2, 18065.0], [7.3, 18095.0], [7.4, 18103.0], [7.5, 18118.0], [7.6, 18118.0], [7.7, 18142.0], [7.8, 18151.0], [7.9, 18153.0], [8.0, 18153.0], [8.1, 18194.0], [8.2, 18267.0], [8.3, 18314.0], [8.4, 18314.0], [8.5, 18366.0], [8.6, 18391.0], [8.7, 18391.0], [8.8, 18445.0], [8.9, 18464.0], [9.0, 18468.0], [9.1, 18468.0], [9.2, 18486.0], [9.3, 18565.0], [9.4, 18632.0], [9.5, 18632.0], [9.6, 18717.0], [9.7, 18727.0], [9.8, 18731.0], [9.9, 18731.0], [10.0, 18783.0], [10.1, 18811.0], [10.2, 18811.0], [10.3, 18866.0], [10.4, 18882.0], [10.5, 18886.0], [10.6, 18886.0], [10.7, 18892.0], [10.8, 19009.0], [10.9, 19077.0], [11.0, 19077.0], [11.1, 19162.0], [11.2, 19169.0], [11.3, 19169.0], [11.4, 19169.0], [11.5, 19224.0], [11.6, 19341.0], [11.7, 19341.0], [11.8, 19372.0], [11.9, 19553.0], [12.0, 19604.0], [12.1, 19604.0], [12.2, 19652.0], [12.3, 19703.0], [12.4, 19739.0], [12.5, 19739.0], [12.6, 19748.0], [12.7, 19756.0], [12.8, 19758.0], [12.9, 19758.0], [13.0, 19771.0], [13.1, 19833.0], [13.2, 19924.0], [13.3, 19924.0], [13.4, 19927.0], [13.5, 19943.0], [13.6, 19943.0], [13.7, 19979.0], [13.8, 20009.0], [13.9, 20021.0], [14.0, 20021.0], [14.1, 20085.0], [14.2, 20091.0], [14.3, 20102.0], [14.4, 20102.0], [14.5, 20134.0], [14.6, 20189.0], [14.7, 20225.0], [14.8, 20225.0], [14.9, 20247.0], [15.0, 20252.0], [15.1, 20252.0], [15.2, 20262.0], [15.3, 20331.0], [15.4, 20390.0], [15.5, 20390.0], [15.6, 20409.0], [15.7, 20423.0], [15.8, 20423.0], [15.9, 20423.0], [16.0, 20428.0], [16.1, 20447.0], [16.2, 20451.0], [16.3, 20451.0], [16.4, 20477.0], [16.5, 20577.0], [16.6, 20685.0], [16.7, 20685.0], [16.8, 20710.0], [16.9, 20721.0], [17.0, 20721.0], [17.1, 20727.0], [17.2, 20793.0], [17.3, 21166.0], [17.4, 21166.0], [17.5, 21193.0], [17.6, 21208.0], [17.7, 21284.0], [17.8, 21284.0], [17.9, 21333.0], [18.0, 21369.0], [18.1, 21396.0], [18.2, 21396.0], [18.3, 21403.0], [18.4, 21415.0], [18.5, 21415.0], [18.6, 21467.0], [18.7, 21488.0], [18.8, 21521.0], [18.9, 21521.0], [19.0, 21543.0], [19.1, 21574.0], [19.2, 21720.0], [19.3, 21720.0], [19.4, 21760.0], [19.5, 21766.0], [19.6, 21850.0], [19.7, 21850.0], [19.8, 21863.0], [19.9, 21864.0], [20.0, 21895.0], [20.1, 21895.0], [20.2, 21897.0], [20.3, 21913.0], [20.4, 21913.0], [20.5, 21925.0], [20.6, 21971.0], [20.7, 22030.0], [20.8, 22030.0], [20.9, 22074.0], [21.0, 22076.0], [21.1, 22130.0], [21.2, 22130.0], [21.3, 22141.0], [21.4, 22147.0], [21.5, 22258.0], [21.6, 22258.0], [21.7, 22268.0], [21.8, 22319.0], [21.9, 22319.0], [22.0, 22325.0], [22.1, 22355.0], [22.2, 22363.0], [22.3, 22363.0], [22.4, 22424.0], [22.5, 22436.0], [22.6, 22436.0], [22.7, 22436.0], [22.8, 22459.0], [22.9, 22481.0], [23.0, 22514.0], [23.1, 22514.0], [23.2, 22537.0], [23.3, 22563.0], [23.4, 22563.0], [23.5, 22588.0], [23.6, 22601.0], [23.7, 22616.0], [23.8, 22616.0], [23.9, 22657.0], [24.0, 22664.0], [24.1, 22757.0], [24.2, 22757.0], [24.3, 22770.0], [24.4, 22794.0], [24.5, 22803.0], [24.6, 22803.0], [24.7, 22919.0], [24.8, 22924.0], [24.9, 22969.0], [25.0, 22969.0], [25.1, 22971.0], [25.2, 23113.0], [25.3, 23113.0], [25.4, 23150.0], [25.5, 23167.0], [25.6, 23182.0], [25.7, 23182.0], [25.8, 23187.0], [25.9, 23242.0], [26.0, 23256.0], [26.1, 23256.0], [26.2, 23285.0], [26.3, 23302.0], [26.4, 23334.0], [26.5, 23334.0], [26.6, 23457.0], [26.7, 23463.0], [26.8, 23463.0], [26.9, 23485.0], [27.0, 23494.0], [27.1, 23502.0], [27.2, 23502.0], [27.3, 23504.0], [27.4, 23591.0], [27.5, 23602.0], [27.6, 23602.0], [27.7, 23603.0], [27.8, 23607.0], [27.9, 23613.0], [28.0, 23613.0], [28.1, 23651.0], [28.2, 23663.0], [28.3, 23686.0], [28.4, 23686.0], [28.5, 23698.0], [28.6, 23701.0], [28.7, 23701.0], [28.8, 23740.0], [28.9, 23747.0], [29.0, 23747.0], [29.1, 23747.0], [29.2, 23750.0], [29.3, 23768.0], [29.4, 23823.0], [29.5, 23823.0], [29.6, 23835.0], [29.7, 23838.0], [29.8, 23894.0], [29.9, 23894.0], [30.0, 23896.0], [30.1, 23902.0], [30.2, 23902.0], [30.3, 23909.0], [30.4, 23933.0], [30.5, 23970.0], [30.6, 23970.0], [30.7, 23978.0], [30.8, 23987.0], [30.9, 23995.0], [31.0, 23995.0], [31.1, 24041.0], [31.2, 24042.0], [31.3, 24074.0], [31.4, 24074.0], [31.5, 24086.0], [31.6, 24100.0], [31.7, 24100.0], [31.8, 24160.0], [31.9, 24182.0], [32.0, 24203.0], [32.1, 24203.0], [32.2, 24203.0], [32.3, 24208.0], [32.4, 24212.0], [32.5, 24212.0], [32.6, 24222.0], [32.7, 24232.0], [32.8, 24233.0], [32.9, 24233.0], [33.0, 24239.0], [33.1, 24307.0], [33.2, 24313.0], [33.3, 24313.0], [33.4, 24349.0], [33.5, 24349.0], [33.6, 24349.0], [33.7, 24353.0], [33.8, 24367.0], [33.9, 24379.0], [34.0, 24379.0], [34.1, 24391.0], [34.2, 24424.0], [34.3, 24458.0], [34.4, 24458.0], [34.5, 24478.0], [34.6, 24480.0], [34.7, 24483.0], [34.8, 24483.0], [34.9, 24490.0], [35.0, 24494.0], [35.1, 24494.0], [35.2, 24495.0], [35.3, 24553.0], [35.4, 24554.0], [35.5, 24554.0], [35.6, 24581.0], [35.7, 24583.0], [35.8, 24593.0], [35.9, 24593.0], [36.0, 24597.0], [36.1, 24604.0], [36.2, 24654.0], [36.3, 24654.0], [36.4, 24661.0], [36.5, 24674.0], [36.6, 24688.0], [36.7, 24688.0], [36.8, 24709.0], [36.9, 24731.0], [37.0, 24731.0], [37.1, 24737.0], [37.2, 24800.0], [37.3, 24864.0], [37.4, 24864.0], [37.5, 24887.0], [37.6, 24891.0], [37.7, 24894.0], [37.8, 24894.0], [37.9, 24916.0], [38.0, 24926.0], [38.1, 24926.0], [38.2, 24926.0], [38.3, 24931.0], [38.4, 24934.0], [38.5, 24934.0], [38.6, 24967.0], [38.7, 24989.0], [38.8, 25046.0], [38.9, 25046.0], [39.0, 25089.0], [39.1, 25107.0], [39.2, 25124.0], [39.3, 25124.0], [39.4, 25127.0], [39.5, 25148.0], [39.6, 25163.0], [39.7, 25163.0], [39.8, 25380.0], [39.9, 25448.0], [40.0, 25523.0], [40.1, 25523.0], [40.2, 25553.0], [40.3, 25574.0], [40.4, 25574.0], [40.5, 25598.0], [40.6, 25606.0], [40.7, 25612.0], [40.8, 25612.0], [40.9, 25625.0], [41.0, 25643.0], [41.1, 25665.0], [41.2, 25665.0], [41.3, 25667.0], [41.4, 25671.0], [41.5, 25676.0], [41.6, 25676.0], [41.7, 25713.0], [41.8, 25713.0], [41.9, 25713.0], [42.0, 25724.0], [42.1, 25724.0], [42.2, 25739.0], [42.3, 25739.0], [42.4, 25740.0], [42.5, 25772.0], [42.6, 25793.0], [42.7, 25793.0], [42.8, 25800.0], [42.9, 25842.0], [43.0, 25856.0], [43.1, 25856.0], [43.2, 25862.0], [43.3, 25886.0], [43.4, 25886.0], [43.5, 25933.0], [43.6, 25954.0], [43.7, 25970.0], [43.8, 25970.0], [43.9, 25996.0], [44.0, 26038.0], [44.1, 26044.0], [44.2, 26044.0], [44.3, 26054.0], [44.4, 26091.0], [44.5, 26186.0], [44.6, 26186.0], [44.7, 26188.0], [44.8, 26191.0], [44.9, 26210.0], [45.0, 26210.0], [45.1, 26214.0], [45.2, 26257.0], [45.3, 26257.0], [45.4, 26290.0], [45.5, 26318.0], [45.6, 26336.0], [45.7, 26336.0], [45.8, 26373.0], [45.9, 26418.0], [46.0, 26430.0], [46.1, 26430.0], [46.2, 26434.0], [46.3, 26471.0], [46.4, 26473.0], [46.5, 26473.0], [46.6, 26512.0], [46.7, 26554.0], [46.8, 26554.0], [46.9, 26590.0], [47.0, 26594.0], [47.1, 26601.0], [47.2, 26601.0], [47.3, 26603.0], [47.4, 26608.0], [47.5, 26827.0], [47.6, 26827.0], [47.7, 26828.0], [47.8, 26833.0], [47.9, 26846.0], [48.0, 26846.0], [48.1, 26850.0], [48.2, 26880.0], [48.3, 26934.0], [48.4, 26934.0], [48.5, 26947.0], [48.6, 26954.0], [48.7, 26954.0], [48.8, 26973.0], [48.9, 26996.0], [49.0, 27034.0], [49.1, 27034.0], [49.2, 27048.0], [49.3, 27050.0], [49.4, 27081.0], [49.5, 27081.0], [49.6, 27100.0], [49.7, 27114.0], [49.8, 27134.0], [49.9, 27134.0], [50.0, 27145.0], [50.1, 27172.0], [50.2, 27172.0], [50.3, 27246.0], [50.4, 27271.0], [50.5, 27298.0], [50.6, 27298.0], [50.7, 27313.0], [50.8, 27319.0], [50.9, 27323.0], [51.0, 27323.0], [51.1, 27345.0], [51.2, 27393.0], [51.3, 27408.0], [51.4, 27408.0], [51.5, 27436.0], [51.6, 27440.0], [51.7, 27440.0], [51.8, 27440.0], [51.9, 27451.0], [52.0, 27487.0], [52.1, 27487.0], [52.2, 27514.0], [52.3, 27521.0], [52.4, 27527.0], [52.5, 27527.0], [52.6, 27529.0], [52.7, 27530.0], [52.8, 27633.0], [52.9, 27633.0], [53.0, 27641.0], [53.1, 27701.0], [53.2, 27718.0], [53.3, 27718.0], [53.4, 27724.0], [53.5, 27738.0], [53.6, 27738.0], [53.7, 27759.0], [53.8, 27788.0], [53.9, 27803.0], [54.0, 27803.0], [54.1, 27823.0], [54.2, 27825.0], [54.3, 27855.0], [54.4, 27855.0], [54.5, 27885.0], [54.6, 27895.0], [54.7, 27896.0], [54.8, 27896.0], [54.9, 27913.0], [55.0, 27915.0], [55.1, 27915.0], [55.2, 27919.0], [55.3, 27924.0], [55.4, 27969.0], [55.5, 27969.0], [55.6, 28030.0], [55.7, 28035.0], [55.8, 28061.0], [55.9, 28061.0], [56.0, 28066.0], [56.1, 28068.0], [56.2, 28143.0], [56.3, 28143.0], [56.4, 28173.0], [56.5, 28175.0], [56.6, 28214.0], [56.7, 28214.0], [56.8, 28222.0], [56.9, 28248.0], [57.0, 28248.0], [57.1, 28252.0], [57.2, 28289.0], [57.3, 28294.0], [57.4, 28294.0], [57.5, 28320.0], [57.6, 28320.0], [57.7, 28349.0], [57.8, 28349.0], [57.9, 28369.0], [58.0, 28380.0], [58.1, 28385.0], [58.2, 28385.0], [58.3, 28391.0], [58.4, 28418.0], [58.5, 28418.0], [58.6, 28433.0], [58.7, 28508.0], [58.8, 28548.0], [58.9, 28548.0], [59.0, 28592.0], [59.1, 28627.0], [59.2, 28628.0], [59.3, 28628.0], [59.4, 28718.0], [59.5, 28722.0], [59.6, 28724.0], [59.7, 28724.0], [59.8, 28728.0], [59.9, 28736.0], [60.0, 28761.0], [60.1, 28761.0], [60.2, 28768.0], [60.3, 28775.0], [60.4, 28775.0], [60.5, 28777.0], [60.6, 28799.0], [60.7, 28804.0], [60.8, 28804.0], [60.9, 28821.0], [61.0, 28838.0], [61.1, 28847.0], [61.2, 28847.0], [61.3, 28852.0], [61.4, 28858.0], [61.5, 28858.0], [61.6, 28858.0], [61.7, 28859.0], [61.8, 28880.0], [61.9, 28880.0], [62.0, 28880.0], [62.1, 28880.0], [62.2, 28881.0], [62.3, 28881.0], [62.4, 28889.0], [62.5, 28904.0], [62.6, 28906.0], [62.7, 28906.0], [62.8, 28909.0], [62.9, 28912.0], [63.0, 28914.0], [63.1, 28914.0], [63.2, 28922.0], [63.3, 28926.0], [63.4, 28926.0], [63.5, 28928.0], [63.6, 28930.0], [63.7, 28931.0], [63.8, 28931.0], [63.9, 28935.0], [64.0, 28937.0], [64.1, 28938.0], [64.2, 28938.0], [64.3, 28942.0], [64.4, 28947.0], [64.5, 28948.0], [64.6, 28948.0], [64.7, 28949.0], [64.8, 28949.0], [64.9, 28955.0], [65.0, 28955.0], [65.1, 28957.0], [65.2, 28961.0], [65.3, 28961.0], [65.4, 28974.0], [65.5, 28975.0], [65.6, 28984.0], [65.7, 28984.0], [65.8, 28993.0], [65.9, 29000.0], [66.0, 29000.0], [66.1, 29000.0], [66.2, 29006.0], [66.3, 29022.0], [66.4, 29025.0], [66.5, 29025.0], [66.6, 29025.0], [66.7, 29028.0], [66.8, 29028.0], [66.9, 29035.0], [67.0, 29045.0], [67.1, 29047.0], [67.2, 29047.0], [67.3, 29053.0], [67.4, 29055.0], [67.5, 29057.0], [67.6, 29057.0], [67.7, 29062.0], [67.8, 29069.0], [67.9, 29073.0], [68.0, 29073.0], [68.1, 29073.0], [68.2, 29077.0], [68.3, 29085.0], [68.4, 29085.0], [68.5, 29090.0], [68.6, 29093.0], [68.7, 29093.0], [68.8, 29102.0], [68.9, 29106.0], [69.0, 29113.0], [69.1, 29113.0], [69.2, 29118.0], [69.3, 29121.0], [69.4, 29121.0], [69.5, 29121.0], [69.6, 29137.0], [69.7, 29141.0], [69.8, 29152.0], [69.9, 29152.0], [70.0, 29161.0], [70.1, 29162.0], [70.2, 29162.0], [70.3, 29162.0], [70.4, 29165.0], [70.5, 29167.0], [70.6, 29167.0], [70.7, 29174.0], [70.8, 29178.0], [70.9, 29181.0], [71.0, 29181.0], [71.1, 29183.0], [71.2, 29186.0], [71.3, 29194.0], [71.4, 29194.0], [71.5, 29194.0], [71.6, 29196.0], [71.7, 29196.0], [71.8, 29205.0], [71.9, 29207.0], [72.0, 29209.0], [72.1, 29209.0], [72.2, 29220.0], [72.3, 29221.0], [72.4, 29243.0], [72.5, 29243.0], [72.6, 29243.0], [72.7, 29250.0], [72.8, 29255.0], [72.9, 29255.0], [73.0, 29259.0], [73.1, 29260.0], [73.2, 29262.0], [73.3, 29262.0], [73.4, 29264.0], [73.5, 29276.0], [73.6, 29276.0], [73.7, 29284.0], [73.8, 29286.0], [73.9, 29286.0], [74.0, 29286.0], [74.1, 29288.0], [74.2, 29289.0], [74.3, 29292.0], [74.4, 29292.0], [74.5, 29297.0], [74.6, 29306.0], [74.7, 29307.0], [74.8, 29307.0], [74.9, 29313.0], [75.0, 29313.0], [75.1, 29313.0], [75.2, 29313.0], [75.3, 29315.0], [75.4, 29330.0], [75.5, 29330.0], [75.6, 29339.0], [75.7, 29339.0], [75.8, 29344.0], [75.9, 29344.0], [76.0, 29351.0], [76.1, 29352.0], [76.2, 29355.0], [76.3, 29355.0], [76.4, 29371.0], [76.5, 29374.0], [76.6, 29374.0], [76.7, 29374.0], [76.8, 29374.0], [76.9, 29376.0], [77.0, 29376.0], [77.1, 29377.0], [77.2, 29378.0], [77.3, 29385.0], [77.4, 29385.0], [77.5, 29393.0], [77.6, 29397.0], [77.7, 29399.0], [77.8, 29399.0], [77.9, 29402.0], [78.0, 29403.0], [78.1, 29405.0], [78.2, 29405.0], [78.3, 29407.0], [78.4, 29410.0], [78.5, 29410.0], [78.6, 29410.0], [78.7, 29411.0], [78.8, 29412.0], [78.9, 29412.0], [79.0, 29413.0], [79.1, 29413.0], [79.2, 29415.0], [79.3, 29415.0], [79.4, 29416.0], [79.5, 29419.0], [79.6, 29426.0], [79.7, 29426.0], [79.8, 29432.0], [79.9, 29432.0], [80.0, 29441.0], [80.1, 29441.0], [80.2, 29462.0], [80.3, 29465.0], [80.4, 29465.0], [80.5, 29467.0], [80.6, 29488.0], [80.7, 29494.0], [80.8, 29494.0], [80.9, 29495.0], [81.0, 29504.0], [81.1, 29506.0], [81.2, 29506.0], [81.3, 29506.0], [81.4, 29508.0], [81.5, 29512.0], [81.6, 29512.0], [81.7, 29513.0], [81.8, 29514.0], [81.9, 29514.0], [82.0, 29514.0], [82.1, 29515.0], [82.2, 29518.0], [82.3, 29518.0], [82.4, 29522.0], [82.5, 29526.0], [82.6, 29526.0], [82.7, 29526.0], [82.8, 29533.0], [82.9, 29533.0], [83.0, 29539.0], [83.1, 29539.0], [83.2, 29542.0], [83.3, 29546.0], [83.4, 29546.0], [83.5, 29554.0], [83.6, 29555.0], [83.7, 29562.0], [83.8, 29562.0], [83.9, 29568.0], [84.0, 29569.0], [84.1, 29570.0], [84.2, 29570.0], [84.3, 29575.0], [84.4, 29575.0], [84.5, 29576.0], [84.6, 29576.0], [84.7, 29577.0], [84.8, 29578.0], [84.9, 29580.0], [85.0, 29580.0], [85.1, 29587.0], [85.2, 29589.0], [85.3, 29589.0], [85.4, 29608.0], [85.5, 29616.0], [85.6, 29616.0], [85.7, 29616.0], [85.8, 29629.0], [85.9, 29635.0], [86.0, 29640.0], [86.1, 29640.0], [86.2, 29641.0], [86.3, 29644.0], [86.4, 29652.0], [86.5, 29652.0], [86.6, 29661.0], [86.7, 29662.0], [86.8, 29662.0], [86.9, 29665.0], [87.0, 29665.0], [87.1, 29667.0], [87.2, 29667.0], [87.3, 29680.0], [87.4, 29681.0], [87.5, 29682.0], [87.6, 29682.0], [87.7, 29694.0], [87.8, 29707.0], [87.9, 29709.0], [88.0, 29709.0], [88.1, 29710.0], [88.2, 29713.0], [88.3, 29715.0], [88.4, 29715.0], [88.5, 29716.0], [88.6, 29727.0], [88.7, 29727.0], [88.8, 29755.0], [88.9, 29757.0], [89.0, 29770.0], [89.1, 29770.0], [89.2, 29782.0], [89.3, 29788.0], [89.4, 29788.0], [89.5, 29788.0], [89.6, 29797.0], [89.7, 29809.0], [89.8, 29818.0], [89.9, 29818.0], [90.0, 29819.0], [90.1, 29825.0], [90.2, 29825.0], [90.3, 29870.0], [90.4, 29890.0], [90.5, 29914.0], [90.6, 29914.0], [90.7, 30007.0], [90.8, 30022.0], [90.9, 30032.0], [91.0, 30032.0], [91.1, 30060.0], [91.2, 30116.0], [91.3, 30130.0], [91.4, 30130.0], [91.5, 30147.0], [91.6, 30230.0], [91.7, 30230.0], [91.8, 30336.0], [91.9, 30338.0], [92.0, 30342.0], [92.1, 30342.0], [92.2, 30374.0], [92.3, 30383.0], [92.4, 30410.0], [92.5, 30410.0], [92.6, 30453.0], [92.7, 30558.0], [92.8, 30605.0], [92.9, 30605.0], [93.0, 30699.0], [93.1, 30724.0], [93.2, 30781.0], [93.3, 30781.0], [93.4, 30809.0], [93.5, 30849.0], [93.6, 30849.0], [93.7, 30914.0], [93.8, 30932.0], [93.9, 31314.0], [94.0, 31314.0], [94.1, 31394.0], [94.2, 31422.0], [94.3, 31661.0], [94.4, 31661.0], [94.5, 31701.0], [94.6, 31755.0], [94.7, 31779.0], [94.8, 31779.0], [94.9, 31963.0], [95.0, 32054.0], [95.1, 32054.0], [95.2, 32367.0], [95.3, 32460.0], [95.4, 32605.0], [95.5, 32605.0], [95.6, 32640.0], [95.7, 32965.0], [95.8, 33139.0], [95.9, 33139.0], [96.0, 33265.0], [96.1, 33476.0], [96.2, 33976.0], [96.3, 33976.0], [96.4, 34121.0], [96.5, 34194.0], [96.6, 34891.0], [96.7, 34891.0], [96.8, 34894.0], [96.9, 35262.0], [97.0, 35262.0], [97.1, 35633.0], [97.2, 36482.0], [97.3, 36595.0], [97.4, 36595.0], [97.5, 36666.0], [97.6, 37940.0], [97.7, 38027.0], [97.8, 38027.0], [97.9, 38241.0], [98.0, 39183.0], [98.1, 39350.0], [98.2, 39350.0], [98.3, 40630.0], [98.4, 41307.0], [98.5, 41307.0], [98.6, 41484.0], [98.7, 41744.0], [98.8, 42417.0], [98.9, 42417.0], [99.0, 42813.0], [99.1, 43062.0], [99.2, 43502.0], [99.3, 43502.0], [99.4, 43513.0], [99.5, 44131.0], [99.6, 44809.0], [99.7, 44809.0], [99.8, 44935.0], [99.9, 45259.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3400.0, "maxY": 32.0, "series": [{"data": [[34100.0, 2.0], [33100.0, 1.0], [32900.0, 1.0], [33900.0, 1.0], [36500.0, 1.0], [37900.0, 1.0], [39300.0, 1.0], [39100.0, 1.0], [41700.0, 1.0], [41300.0, 1.0], [43500.0, 2.0], [44100.0, 1.0], [44900.0, 1.0], [3400.0, 1.0], [5600.0, 1.0], [8500.0, 1.0], [11500.0, 1.0], [14100.0, 1.0], [16600.0, 1.0], [17300.0, 6.0], [17400.0, 6.0], [17200.0, 2.0], [17100.0, 1.0], [17600.0, 15.0], [18000.0, 4.0], [18300.0, 3.0], [18100.0, 6.0], [17800.0, 3.0], [17700.0, 4.0], [17900.0, 2.0], [18400.0, 4.0], [18200.0, 1.0], [17500.0, 5.0], [18700.0, 4.0], [19200.0, 1.0], [18800.0, 5.0], [19300.0, 2.0], [19000.0, 2.0], [19100.0, 3.0], [18600.0, 1.0], [18500.0, 1.0], [20300.0, 2.0], [20400.0, 7.0], [19900.0, 4.0], [19800.0, 1.0], [19700.0, 6.0], [20000.0, 4.0], [20100.0, 3.0], [19500.0, 1.0], [19600.0, 2.0], [20200.0, 4.0], [21300.0, 3.0], [20700.0, 4.0], [20500.0, 1.0], [21100.0, 2.0], [20600.0, 1.0], [21200.0, 2.0], [21500.0, 3.0], [21400.0, 4.0], [22000.0, 3.0], [21800.0, 5.0], [22400.0, 5.0], [22500.0, 4.0], [22300.0, 4.0], [22200.0, 2.0], [21900.0, 3.0], [22100.0, 3.0], [21700.0, 3.0], [23400.0, 4.0], [23100.0, 5.0], [23300.0, 2.0], [22900.0, 4.0], [23200.0, 3.0], [22600.0, 4.0], [23500.0, 3.0], [22800.0, 1.0], [22700.0, 3.0], [23700.0, 6.0], [24300.0, 8.0], [23900.0, 7.0], [24400.0, 8.0], [24500.0, 6.0], [23600.0, 8.0], [24000.0, 4.0], [23800.0, 5.0], [24200.0, 8.0], [24100.0, 3.0], [24800.0, 5.0], [24600.0, 5.0], [25500.0, 4.0], [25400.0, 1.0], [24700.0, 3.0], [24900.0, 7.0], [25100.0, 5.0], [25000.0, 2.0], [25300.0, 1.0], [26400.0, 5.0], [26200.0, 4.0], [26300.0, 3.0], [25700.0, 8.0], [25900.0, 4.0], [26000.0, 4.0], [26500.0, 4.0], [26600.0, 3.0], [26100.0, 3.0], [25600.0, 8.0], [25800.0, 5.0], [27500.0, 5.0], [27300.0, 5.0], [26800.0, 6.0], [26900.0, 5.0], [27400.0, 6.0], [27000.0, 4.0], [27600.0, 2.0], [27100.0, 5.0], [27200.0, 3.0], [27900.0, 5.0], [27700.0, 6.0], [28100.0, 3.0], [28200.0, 6.0], [28300.0, 7.0], [27800.0, 7.0], [28000.0, 5.0], [28600.0, 2.0], [28500.0, 3.0], [28400.0, 2.0], [28900.0, 25.0], [29600.0, 18.0], [29200.0, 21.0], [29100.0, 22.0], [29400.0, 23.0], [29500.0, 32.0], [29300.0, 24.0], [29000.0, 21.0], [28800.0, 13.0], [28700.0, 10.0], [30600.0, 2.0], [29700.0, 14.0], [29800.0, 6.0], [30000.0, 4.0], [30400.0, 2.0], [30300.0, 5.0], [30200.0, 1.0], [30100.0, 3.0], [30700.0, 2.0], [30500.0, 1.0], [29900.0, 1.0], [30800.0, 2.0], [30900.0, 2.0], [31300.0, 2.0], [31400.0, 1.0], [31600.0, 1.0], [31700.0, 3.0], [32000.0, 1.0], [31900.0, 1.0], [32600.0, 2.0], [32400.0, 1.0], [32300.0, 1.0], [34800.0, 2.0], [33400.0, 1.0], [33200.0, 1.0], [35200.0, 1.0], [36600.0, 1.0], [35600.0, 1.0], [36400.0, 1.0], [38200.0, 1.0], [38000.0, 1.0], [40600.0, 1.0], [41400.0, 1.0], [43000.0, 1.0], [42400.0, 1.0], [42800.0, 1.0], [44800.0, 1.0], [45200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.500000000000002, "minX": 1.6040808E12, "maxY": 10.0, "series": [{"data": [[1.60408092E12, 10.0], [1.60408152E12, 10.0], [1.60408254E12, 10.0], [1.60408122E12, 10.0], [1.60408212E12, 10.0], [1.60408242E12, 10.0], [1.60408182E12, 10.0], [1.60408272E12, 8.500000000000002], [1.6040808E12, 10.0], [1.6040814E12, 10.0], [1.6040811E12, 10.0], [1.604082E12, 10.0], [1.6040817E12, 10.0], [1.60408128E12, 10.0], [1.6040823E12, 10.0], [1.60408098E12, 10.0], [1.6040826E12, 10.0], [1.60408188E12, 10.0], [1.60408158E12, 10.0], [1.60408248E12, 10.0], [1.60408218E12, 10.0], [1.60408116E12, 10.0], [1.60408086E12, 10.0], [1.60408176E12, 10.0], [1.60408146E12, 10.0], [1.60408266E12, 10.0], [1.60408206E12, 10.0], [1.60408104E12, 10.0], [1.60408236E12, 10.0], [1.60408164E12, 10.0], [1.60408134E12, 10.0], [1.60408224E12, 10.0], [1.60408194E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408272E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17326.0, "minX": 1.0, "maxY": 26244.573002754812, "series": [{"data": [[8.0, 17487.0], [4.0, 17530.0], [2.0, 17326.0], [1.0, 17725.0], [9.0, 17644.0], [10.0, 26244.573002754812], [5.0, 17657.0], [6.0, 17534.0], [3.0, 17392.0], [7.0, 17526.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26137.933333333323]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.95, "minX": 1.6040808E12, "maxY": 205260.48333333334, "series": [{"data": [[1.60408092E12, 69864.53333333334], [1.60408152E12, 34429.26666666667], [1.60408254E12, 30862.2], [1.60408122E12, 45549.666666666664], [1.60408212E12, 47236.3], [1.60408242E12, 46979.566666666666], [1.60408182E12, 91346.21666666666], [1.60408272E12, 55125.5], [1.6040808E12, 37759.666666666664], [1.6040814E12, 42060.183333333334], [1.6040811E12, 48227.566666666666], [1.604082E12, 57049.98333333333], [1.6040817E12, 85417.03333333334], [1.60408128E12, 47544.316666666666], [1.6040823E12, 47447.583333333336], [1.60408098E12, 133915.65], [1.6040826E12, 85814.2], [1.60408188E12, 86738.95], [1.60408158E12, 39264.166666666664], [1.60408248E12, 36232.86666666667], [1.60408218E12, 51649.36666666667], [1.60408116E12, 51808.6], [1.60408086E12, 205260.48333333334], [1.60408176E12, 200260.11666666667], [1.60408146E12, 43604.11666666667], [1.60408266E12, 117759.65], [1.60408206E12, 36654.85], [1.60408104E12, 71318.21666666666], [1.60408236E12, 45378.61666666667], [1.60408164E12, 162789.36666666667], [1.60408134E12, 57810.73333333333], [1.60408224E12, 53213.7], [1.60408194E12, 57088.11666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60408092E12, 215.43333333333334], [1.60408152E12, 160.68333333333334], [1.60408254E12, 189.76666666666668], [1.60408122E12, 153.41666666666666], [1.60408212E12, 146.13333333333333], [1.60408242E12, 153.3], [1.60408182E12, 213.66666666666666], [1.60408272E12, 207.08333333333334], [1.6040808E12, 21.95], [1.6040814E12, 146.03333333333333], [1.6040811E12, 176.6], [1.604082E12, 154.66666666666666], [1.6040817E12, 163.63333333333333], [1.60408128E12, 146.11666666666667], [1.6040823E12, 153.75], [1.60408098E12, 113.16666666666667], [1.6040826E12, 195.41666666666666], [1.60408188E12, 181.16666666666666], [1.60408158E12, 198.1], [1.60408248E12, 167.78333333333333], [1.60408218E12, 153.45], [1.60408116E12, 146.13333333333333], [1.60408086E12, 176.51666666666668], [1.60408176E12, 186.46666666666667], [1.60408146E12, 146.01666666666668], [1.60408266E12, 145.81666666666666], [1.60408206E12, 138.76666666666668], [1.60408104E12, 160.73333333333332], [1.60408236E12, 146.13333333333333], [1.60408164E12, 204.95], [1.60408134E12, 153.73333333333332], [1.60408224E12, 154.05], [1.60408194E12, 168.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408272E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5875.0, "minX": 1.6040808E12, "maxY": 34646.94736842105, "series": [{"data": [[1.60408092E12, 19944.966666666667], [1.60408152E12, 28420.227272727272], [1.60408254E12, 23775.576923076926], [1.60408122E12, 29355.57142857143], [1.60408212E12, 29096.25], [1.60408242E12, 29363.47619047619], [1.60408182E12, 21769.633333333328], [1.60408272E12, 22834.599999999995], [1.6040808E12, 5875.0], [1.6040814E12, 29200.099999999995], [1.6040811E12, 25635.958333333336], [1.604082E12, 25208.714285714286], [1.6040817E12, 24728.86956521739], [1.60408128E12, 29355.149999999994], [1.6040823E12, 28128.85714285714], [1.60408098E12, 33201.333333333336], [1.6040826E12, 22413.037037037033], [1.60408188E12, 23302.000000000004], [1.60408158E12, 23311.59259259259], [1.60408248E12, 26661.565217391304], [1.60408218E12, 29410.0], [1.60408116E12, 28498.75], [1.60408086E12, 23933.791666666664], [1.60408176E12, 23310.34615384615], [1.60408146E12, 30032.15], [1.60408266E12, 26191.799999999996], [1.60408206E12, 34646.94736842105], [1.60408104E12, 31061.09090909091], [1.60408236E12, 29163.7], [1.60408164E12, 19931.068965517243], [1.60408134E12, 29321.33333333333], [1.60408224E12, 28642.19047619048], [1.60408194E12, 25329.73913043478]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408272E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5869.666666666667, "minX": 1.6040808E12, "maxY": 34646.00000000001, "series": [{"data": [[1.60408092E12, 19943.63333333333], [1.60408152E12, 28419.63636363636], [1.60408254E12, 23775.19230769231], [1.60408122E12, 29354.38095238095], [1.60408212E12, 29094.95], [1.60408242E12, 29362.285714285714], [1.60408182E12, 21767.833333333332], [1.60408272E12, 22832.6], [1.6040808E12, 5869.666666666667], [1.6040814E12, 29198.85], [1.6040811E12, 25634.958333333336], [1.604082E12, 25207.380952380954], [1.6040817E12, 24725.913043478264], [1.60408128E12, 29354.0], [1.6040823E12, 28127.61904761905], [1.60408098E12, 33196.933333333334], [1.6040826E12, 22411.037037037036], [1.60408188E12, 23300.08], [1.60408158E12, 23311.037037037036], [1.60408248E12, 26660.913043478264], [1.60408218E12, 29408.80952380952], [1.60408116E12, 28497.5], [1.60408086E12, 23930.33333333333], [1.60408176E12, 23306.53846153846], [1.60408146E12, 30030.800000000003], [1.60408266E12, 26188.6], [1.60408206E12, 34646.00000000001], [1.60408104E12, 31059.454545454544], [1.60408236E12, 29162.55], [1.60408164E12, 19926.999999999996], [1.60408134E12, 29320.142857142855], [1.60408224E12, 28640.95238095238], [1.60408194E12, 25328.73913043478]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408272E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04761904761904763, "minX": 1.6040808E12, "maxY": 29.666666666666668, "series": [{"data": [[1.60408092E12, 0.49999999999999983], [1.60408152E12, 0.6363636363636365], [1.60408254E12, 0.26923076923076933], [1.60408122E12, 0.7619047619047619], [1.60408212E12, 0.20000000000000004], [1.60408242E12, 0.47619047619047616], [1.60408182E12, 0.43333333333333335], [1.60408272E12, 0.46666666666666684], [1.6040808E12, 29.666666666666668], [1.6040814E12, 0.7000000000000001], [1.6040811E12, 0.37499999999999994], [1.604082E12, 0.47619047619047616], [1.6040817E12, 0.5652173913043479], [1.60408128E12, 0.45], [1.6040823E12, 0.04761904761904763], [1.60408098E12, 0.9333333333333333], [1.6040826E12, 0.5555555555555555], [1.60408188E12, 0.08], [1.60408158E12, 0.4814814814814815], [1.60408248E12, 0.3043478260869565], [1.60408218E12, 0.6666666666666667], [1.60408116E12, 0.25], [1.60408086E12, 0.5], [1.60408176E12, 0.4615384615384615], [1.60408146E12, 0.5499999999999999], [1.60408266E12, 0.5], [1.60408206E12, 0.5789473684210527], [1.60408104E12, 0.5454545454545453], [1.60408236E12, 0.6], [1.60408164E12, 0.17241379310344826], [1.60408134E12, 0.19047619047619052], [1.60408224E12, 0.6666666666666667], [1.60408194E12, 0.43478260869565216]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408272E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3404.0, "minX": 1.6040808E12, "maxY": 45259.0, "series": [{"data": [[1.60408092E12, 24349.0], [1.60408152E12, 30147.0], [1.60408254E12, 28289.0], [1.60408122E12, 29757.0], [1.60408212E12, 29432.0], [1.60408242E12, 29870.0], [1.60408182E12, 28628.0], [1.60408272E12, 37940.0], [1.6040808E12, 8580.0], [1.6040814E12, 29616.0], [1.6040811E12, 31314.0], [1.604082E12, 32965.0], [1.6040817E12, 31779.0], [1.60408128E12, 29667.0], [1.6040823E12, 29196.0], [1.60408098E12, 45259.0], [1.6040826E12, 27114.0], [1.60408188E12, 32605.0], [1.60408158E12, 26603.0], [1.60408248E12, 29533.0], [1.60408218E12, 29788.0], [1.60408116E12, 29819.0], [1.60408086E12, 27701.0], [1.60408176E12, 25954.0], [1.60408146E12, 30781.0], [1.60408266E12, 30809.0], [1.60408206E12, 43502.0], [1.60408104E12, 44935.0], [1.60408236E12, 29770.0], [1.60408164E12, 22616.0], [1.60408134E12, 29680.0], [1.60408224E12, 29410.0], [1.60408194E12, 29006.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60408092E12, 17611.0], [1.60408152E12, 26430.0], [1.60408254E12, 20793.0], [1.60408122E12, 28906.0], [1.60408212E12, 28838.0], [1.60408242E12, 28955.0], [1.60408182E12, 17346.0], [1.60408272E12, 17185.0], [1.6040808E12, 3404.0], [1.6040814E12, 28718.0], [1.6040811E12, 22537.0], [1.604082E12, 22130.0], [1.6040817E12, 17587.0], [1.60408128E12, 28859.0], [1.6040823E12, 27298.0], [1.60408098E12, 23686.0], [1.6040826E12, 18731.0], [1.60408188E12, 17479.0], [1.60408158E12, 17327.0], [1.60408248E12, 23591.0], [1.60408218E12, 28821.0], [1.60408116E12, 24916.0], [1.60408086E12, 11589.0], [1.60408176E12, 19077.0], [1.60408146E12, 29286.0], [1.60408266E12, 19771.0], [1.60408206E12, 25625.0], [1.60408104E12, 24483.0], [1.60408236E12, 28724.0], [1.60408164E12, 17267.0], [1.60408134E12, 28775.0], [1.60408224E12, 26954.0], [1.60408194E12, 22664.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60408092E12, 17611.0], [1.60408152E12, 26430.0], [1.60408254E12, 20793.0], [1.60408122E12, 28906.0], [1.60408212E12, 28838.0], [1.60408242E12, 28955.0], [1.60408182E12, 17346.0], [1.60408272E12, 17185.0], [1.6040808E12, 3404.0], [1.6040814E12, 28718.0], [1.6040811E12, 22537.0], [1.604082E12, 22130.0], [1.6040817E12, 17587.0], [1.60408128E12, 28859.0], [1.6040823E12, 27298.0], [1.60408098E12, 23686.0], [1.6040826E12, 18731.0], [1.60408188E12, 17479.0], [1.60408158E12, 17327.0], [1.60408248E12, 23591.0], [1.60408218E12, 28821.0], [1.60408116E12, 24916.0], [1.60408086E12, 11589.0], [1.60408176E12, 19077.0], [1.60408146E12, 29286.0], [1.60408266E12, 19771.0], [1.60408206E12, 25625.0], [1.60408104E12, 24483.0], [1.60408236E12, 28724.0], [1.60408164E12, 17267.0], [1.60408134E12, 28775.0], [1.60408224E12, 26954.0], [1.60408194E12, 22664.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60408092E12, 17611.0], [1.60408152E12, 26430.0], [1.60408254E12, 20793.0], [1.60408122E12, 28906.0], [1.60408212E12, 28838.0], [1.60408242E12, 28955.0], [1.60408182E12, 17346.0], [1.60408272E12, 17185.0], [1.6040808E12, 3404.0], [1.6040814E12, 28718.0], [1.6040811E12, 22537.0], [1.604082E12, 22130.0], [1.6040817E12, 17587.0], [1.60408128E12, 28859.0], [1.6040823E12, 27298.0], [1.60408098E12, 23686.0], [1.6040826E12, 18731.0], [1.60408188E12, 17479.0], [1.60408158E12, 17327.0], [1.60408248E12, 23591.0], [1.60408218E12, 28821.0], [1.60408116E12, 24916.0], [1.60408086E12, 11589.0], [1.60408176E12, 19077.0], [1.60408146E12, 29286.0], [1.60408266E12, 19771.0], [1.60408206E12, 25625.0], [1.60408104E12, 24483.0], [1.60408236E12, 28724.0], [1.60408164E12, 17267.0], [1.60408134E12, 28775.0], [1.60408224E12, 26954.0], [1.60408194E12, 22664.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60408092E12, 17611.0], [1.60408152E12, 26430.0], [1.60408254E12, 20793.0], [1.60408122E12, 28906.0], [1.60408212E12, 28838.0], [1.60408242E12, 28955.0], [1.60408182E12, 17346.0], [1.60408272E12, 17185.0], [1.6040808E12, 3404.0], [1.6040814E12, 28718.0], [1.6040811E12, 22537.0], [1.604082E12, 22130.0], [1.6040817E12, 17587.0], [1.60408128E12, 28859.0], [1.6040823E12, 27298.0], [1.60408098E12, 23686.0], [1.6040826E12, 18731.0], [1.60408188E12, 17479.0], [1.60408158E12, 17327.0], [1.60408248E12, 23591.0], [1.60408218E12, 28821.0], [1.60408116E12, 24916.0], [1.60408086E12, 11589.0], [1.60408176E12, 19077.0], [1.60408146E12, 29286.0], [1.60408266E12, 19771.0], [1.60408206E12, 25625.0], [1.60408104E12, 24483.0], [1.60408236E12, 28724.0], [1.60408164E12, 17267.0], [1.60408134E12, 28775.0], [1.60408224E12, 26954.0], [1.60408194E12, 22664.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60408092E12, 19994.0], [1.60408152E12, 27981.0], [1.60408254E12, 23338.0], [1.60408122E12, 29441.0], [1.60408212E12, 29030.0], [1.60408242E12, 29307.0], [1.60408182E12, 20254.5], [1.60408272E12, 17744.5], [1.6040808E12, 5641.0], [1.6040814E12, 29254.5], [1.6040811E12, 24681.0], [1.604082E12, 24367.0], [1.6040817E12, 25046.0], [1.60408128E12, 29460.0], [1.6040823E12, 28214.0], [1.60408098E12, 30849.0], [1.6040826E12, 21850.0], [1.60408188E12, 22436.0], [1.60408158E12, 23978.0], [1.60408248E12, 26188.0], [1.60408218E12, 29377.0], [1.60408116E12, 29510.5], [1.60408086E12, 25951.5], [1.60408176E12, 23831.0], [1.60408146E12, 30118.5], [1.60408266E12, 27773.5], [1.60408206E12, 35262.0], [1.60408104E12, 29367.0], [1.60408236E12, 29241.5], [1.60408164E12, 19756.0], [1.60408134E12, 29410.0], [1.60408224E12, 28804.0], [1.60408194E12, 24239.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408272E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27145.0, "minX": 1.0, "maxY": 27145.0, "series": [{"data": [[1.0, 27145.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27144.0, "minX": 1.0, "maxY": 27144.0, "series": [{"data": [[1.0, 27144.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.6040808E12, "maxY": 0.5, "series": [{"data": [[1.60408092E12, 0.5], [1.60408152E12, 0.36666666666666664], [1.60408254E12, 0.43333333333333335], [1.60408122E12, 0.35], [1.60408212E12, 0.3333333333333333], [1.60408242E12, 0.35], [1.60408182E12, 0.5], [1.60408272E12, 0.3333333333333333], [1.6040808E12, 0.21666666666666667], [1.6040814E12, 0.3333333333333333], [1.6040811E12, 0.4], [1.604082E12, 0.35], [1.6040817E12, 0.38333333333333336], [1.60408128E12, 0.3333333333333333], [1.6040823E12, 0.35], [1.60408098E12, 0.25], [1.6040826E12, 0.45], [1.60408188E12, 0.4166666666666667], [1.60408158E12, 0.45], [1.60408248E12, 0.38333333333333336], [1.60408218E12, 0.35], [1.60408116E12, 0.3333333333333333], [1.60408086E12, 0.4], [1.60408176E12, 0.43333333333333335], [1.60408146E12, 0.3333333333333333], [1.60408266E12, 0.3333333333333333], [1.60408206E12, 0.31666666666666665], [1.60408104E12, 0.36666666666666664], [1.60408236E12, 0.3333333333333333], [1.60408164E12, 0.48333333333333334], [1.60408134E12, 0.35], [1.60408224E12, 0.35], [1.60408194E12, 0.38333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408272E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6040808E12, "maxY": 0.5, "series": [{"data": [[1.60408092E12, 0.5], [1.60408152E12, 0.36666666666666664], [1.60408254E12, 0.43333333333333335], [1.60408122E12, 0.35], [1.60408212E12, 0.3333333333333333], [1.60408242E12, 0.35], [1.60408182E12, 0.5], [1.60408272E12, 0.5], [1.6040808E12, 0.05], [1.6040814E12, 0.3333333333333333], [1.6040811E12, 0.4], [1.604082E12, 0.35], [1.6040817E12, 0.38333333333333336], [1.60408128E12, 0.3333333333333333], [1.6040823E12, 0.35], [1.60408098E12, 0.25], [1.6040826E12, 0.45], [1.60408188E12, 0.4166666666666667], [1.60408158E12, 0.45], [1.60408248E12, 0.38333333333333336], [1.60408218E12, 0.35], [1.60408116E12, 0.3333333333333333], [1.60408086E12, 0.4], [1.60408176E12, 0.43333333333333335], [1.60408146E12, 0.3333333333333333], [1.60408266E12, 0.3333333333333333], [1.60408206E12, 0.31666666666666665], [1.60408104E12, 0.36666666666666664], [1.60408236E12, 0.3333333333333333], [1.60408164E12, 0.48333333333333334], [1.60408134E12, 0.35], [1.60408224E12, 0.35], [1.60408194E12, 0.38333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60408272E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6040808E12, "maxY": 0.5, "series": [{"data": [[1.60408092E12, 0.5], [1.60408152E12, 0.36666666666666664], [1.60408254E12, 0.43333333333333335], [1.60408122E12, 0.35], [1.60408212E12, 0.3333333333333333], [1.60408242E12, 0.35], [1.60408182E12, 0.5], [1.60408272E12, 0.5], [1.6040808E12, 0.05], [1.6040814E12, 0.3333333333333333], [1.6040811E12, 0.4], [1.604082E12, 0.35], [1.6040817E12, 0.38333333333333336], [1.60408128E12, 0.3333333333333333], [1.6040823E12, 0.35], [1.60408098E12, 0.25], [1.6040826E12, 0.45], [1.60408188E12, 0.4166666666666667], [1.60408158E12, 0.45], [1.60408248E12, 0.38333333333333336], [1.60408218E12, 0.35], [1.60408116E12, 0.3333333333333333], [1.60408086E12, 0.4], [1.60408176E12, 0.43333333333333335], [1.60408146E12, 0.3333333333333333], [1.60408266E12, 0.3333333333333333], [1.60408206E12, 0.31666666666666665], [1.60408104E12, 0.36666666666666664], [1.60408236E12, 0.3333333333333333], [1.60408164E12, 0.48333333333333334], [1.60408134E12, 0.35], [1.60408224E12, 0.35], [1.60408194E12, 0.38333333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408272E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6040808E12, "maxY": 0.5, "series": [{"data": [[1.60408092E12, 0.5], [1.60408152E12, 0.36666666666666664], [1.60408254E12, 0.43333333333333335], [1.60408122E12, 0.35], [1.60408212E12, 0.3333333333333333], [1.60408242E12, 0.35], [1.60408182E12, 0.5], [1.60408272E12, 0.5], [1.6040808E12, 0.05], [1.6040814E12, 0.3333333333333333], [1.6040811E12, 0.4], [1.604082E12, 0.35], [1.6040817E12, 0.38333333333333336], [1.60408128E12, 0.3333333333333333], [1.6040823E12, 0.35], [1.60408098E12, 0.25], [1.6040826E12, 0.45], [1.60408188E12, 0.4166666666666667], [1.60408158E12, 0.45], [1.60408248E12, 0.38333333333333336], [1.60408218E12, 0.35], [1.60408116E12, 0.3333333333333333], [1.60408086E12, 0.4], [1.60408176E12, 0.43333333333333335], [1.60408146E12, 0.3333333333333333], [1.60408266E12, 0.3333333333333333], [1.60408206E12, 0.31666666666666665], [1.60408104E12, 0.36666666666666664], [1.60408236E12, 0.3333333333333333], [1.60408164E12, 0.48333333333333334], [1.60408134E12, 0.35], [1.60408224E12, 0.35], [1.60408194E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60408272E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

