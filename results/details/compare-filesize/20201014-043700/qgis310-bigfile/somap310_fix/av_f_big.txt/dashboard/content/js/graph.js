/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3082.0, "minX": 0.0, "maxY": 44053.0, "series": [{"data": [[0.0, 3082.0], [0.1, 3082.0], [0.2, 5909.0], [0.3, 8077.0], [0.4, 8077.0], [0.5, 10898.0], [0.6, 13396.0], [0.7, 15979.0], [0.8, 15979.0], [0.9, 16736.0], [1.0, 16906.0], [1.1, 16963.0], [1.2, 16963.0], [1.3, 16998.0], [1.4, 17009.0], [1.5, 17009.0], [1.6, 17009.0], [1.7, 17014.0], [1.8, 17024.0], [1.9, 17024.0], [2.0, 17035.0], [2.1, 17055.0], [2.2, 17091.0], [2.3, 17091.0], [2.4, 17108.0], [2.5, 17112.0], [2.6, 17149.0], [2.7, 17149.0], [2.8, 17155.0], [2.9, 17202.0], [3.0, 17232.0], [3.1, 17232.0], [3.2, 17245.0], [3.3, 17255.0], [3.4, 17255.0], [3.5, 17277.0], [3.6, 17288.0], [3.7, 17312.0], [3.8, 17312.0], [3.9, 17318.0], [4.0, 17345.0], [4.1, 17438.0], [4.2, 17438.0], [4.3, 17473.0], [4.4, 17491.0], [4.5, 17499.0], [4.6, 17499.0], [4.7, 17505.0], [4.8, 17514.0], [4.9, 17526.0], [5.0, 17526.0], [5.1, 17572.0], [5.2, 17581.0], [5.3, 17581.0], [5.4, 17591.0], [5.5, 17633.0], [5.6, 17641.0], [5.7, 17641.0], [5.8, 17643.0], [5.9, 17660.0], [6.0, 17674.0], [6.1, 17674.0], [6.2, 17695.0], [6.3, 17708.0], [6.4, 17732.0], [6.5, 17732.0], [6.6, 17741.0], [6.7, 17745.0], [6.8, 17745.0], [6.9, 17783.0], [7.0, 17787.0], [7.1, 17805.0], [7.2, 17805.0], [7.3, 17846.0], [7.4, 17848.0], [7.5, 17852.0], [7.6, 17852.0], [7.7, 17854.0], [7.8, 17896.0], [7.9, 17899.0], [8.0, 17899.0], [8.1, 17909.0], [8.2, 17994.0], [8.3, 18005.0], [8.4, 18005.0], [8.5, 18030.0], [8.6, 18143.0], [8.7, 18143.0], [8.8, 18154.0], [8.9, 18205.0], [9.0, 18228.0], [9.1, 18228.0], [9.2, 18310.0], [9.3, 18315.0], [9.4, 18380.0], [9.5, 18380.0], [9.6, 18425.0], [9.7, 18456.0], [9.8, 18574.0], [9.9, 18574.0], [10.0, 18601.0], [10.1, 18625.0], [10.2, 18625.0], [10.3, 18678.0], [10.4, 18685.0], [10.5, 18692.0], [10.6, 18692.0], [10.7, 18749.0], [10.8, 18836.0], [10.9, 18846.0], [11.0, 18846.0], [11.1, 18946.0], [11.2, 18978.0], [11.3, 19051.0], [11.4, 19051.0], [11.5, 19107.0], [11.6, 19113.0], [11.7, 19113.0], [11.8, 19169.0], [11.9, 19175.0], [12.0, 19179.0], [12.1, 19179.0], [12.2, 19201.0], [12.3, 19247.0], [12.4, 19301.0], [12.5, 19301.0], [12.6, 19440.0], [12.7, 19464.0], [12.8, 19469.0], [12.9, 19469.0], [13.0, 19477.0], [13.1, 19480.0], [13.2, 19482.0], [13.3, 19482.0], [13.4, 19517.0], [13.5, 19645.0], [13.6, 19645.0], [13.7, 19652.0], [13.8, 19705.0], [13.9, 19712.0], [14.0, 19712.0], [14.1, 19712.0], [14.2, 19712.0], [14.3, 19752.0], [14.4, 19752.0], [14.5, 19832.0], [14.6, 19859.0], [14.7, 19865.0], [14.8, 19865.0], [14.9, 19918.0], [15.0, 19933.0], [15.1, 19933.0], [15.2, 19965.0], [15.3, 19972.0], [15.4, 19997.0], [15.5, 19997.0], [15.6, 20022.0], [15.7, 20045.0], [15.8, 20047.0], [15.9, 20047.0], [16.0, 20152.0], [16.1, 20160.0], [16.2, 20295.0], [16.3, 20295.0], [16.4, 20332.0], [16.5, 20354.0], [16.6, 20507.0], [16.7, 20507.0], [16.8, 20524.0], [16.9, 20598.0], [17.0, 20598.0], [17.1, 20647.0], [17.2, 20738.0], [17.3, 20852.0], [17.4, 20852.0], [17.5, 20918.0], [17.6, 21028.0], [17.7, 21037.0], [17.8, 21037.0], [17.9, 21143.0], [18.0, 21183.0], [18.1, 21281.0], [18.2, 21281.0], [18.3, 21285.0], [18.4, 21313.0], [18.5, 21313.0], [18.6, 21320.0], [18.7, 21334.0], [18.8, 21398.0], [18.9, 21398.0], [19.0, 21445.0], [19.1, 21464.0], [19.2, 21479.0], [19.3, 21479.0], [19.4, 21512.0], [19.5, 21565.0], [19.6, 21568.0], [19.7, 21568.0], [19.8, 21568.0], [19.9, 21578.0], [20.0, 21589.0], [20.1, 21589.0], [20.2, 21619.0], [20.3, 21620.0], [20.4, 21620.0], [20.5, 21624.0], [20.6, 21634.0], [20.7, 21677.0], [20.8, 21677.0], [20.9, 21732.0], [21.0, 21782.0], [21.1, 21872.0], [21.2, 21872.0], [21.3, 21878.0], [21.4, 21986.0], [21.5, 21992.0], [21.6, 21992.0], [21.7, 22059.0], [21.8, 22061.0], [21.9, 22061.0], [22.0, 22073.0], [22.1, 22101.0], [22.2, 22109.0], [22.3, 22109.0], [22.4, 22186.0], [22.5, 22224.0], [22.6, 22230.0], [22.7, 22230.0], [22.8, 22247.0], [22.9, 22261.0], [23.0, 22339.0], [23.1, 22339.0], [23.2, 22361.0], [23.3, 22423.0], [23.4, 22423.0], [23.5, 22519.0], [23.6, 22572.0], [23.7, 22621.0], [23.8, 22621.0], [23.9, 22627.0], [24.0, 22654.0], [24.1, 22665.0], [24.2, 22665.0], [24.3, 22665.0], [24.4, 22699.0], [24.5, 22700.0], [24.6, 22700.0], [24.7, 22720.0], [24.8, 22754.0], [24.9, 22847.0], [25.0, 22847.0], [25.1, 22853.0], [25.2, 22861.0], [25.3, 22861.0], [25.4, 22868.0], [25.5, 22870.0], [25.6, 22881.0], [25.7, 22881.0], [25.8, 22941.0], [25.9, 22944.0], [26.0, 22956.0], [26.1, 22956.0], [26.2, 22972.0], [26.3, 23015.0], [26.4, 23056.0], [26.5, 23056.0], [26.6, 23060.0], [26.7, 23070.0], [26.8, 23070.0], [26.9, 23074.0], [27.0, 23083.0], [27.1, 23088.0], [27.2, 23088.0], [27.3, 23101.0], [27.4, 23135.0], [27.5, 23148.0], [27.6, 23148.0], [27.7, 23154.0], [27.8, 23202.0], [27.9, 23203.0], [28.0, 23203.0], [28.1, 23209.0], [28.2, 23228.0], [28.3, 23234.0], [28.4, 23234.0], [28.5, 23265.0], [28.6, 23266.0], [28.7, 23266.0], [28.8, 23293.0], [28.9, 23337.0], [29.0, 23387.0], [29.1, 23387.0], [29.2, 23434.0], [29.3, 23448.0], [29.4, 23459.0], [29.5, 23459.0], [29.6, 23465.0], [29.7, 23466.0], [29.8, 23475.0], [29.9, 23475.0], [30.0, 23503.0], [30.1, 23532.0], [30.2, 23532.0], [30.3, 23536.0], [30.4, 23539.0], [30.5, 23554.0], [30.6, 23554.0], [30.7, 23598.0], [30.8, 23633.0], [30.9, 23635.0], [31.0, 23635.0], [31.1, 23645.0], [31.2, 23645.0], [31.3, 23649.0], [31.4, 23649.0], [31.5, 23652.0], [31.6, 23684.0], [31.7, 23684.0], [31.8, 23694.0], [31.9, 23697.0], [32.0, 23713.0], [32.1, 23713.0], [32.2, 23753.0], [32.3, 23775.0], [32.4, 23779.0], [32.5, 23779.0], [32.6, 23782.0], [32.7, 23783.0], [32.8, 23787.0], [32.9, 23787.0], [33.0, 23821.0], [33.1, 23893.0], [33.2, 23914.0], [33.3, 23914.0], [33.4, 23930.0], [33.5, 23931.0], [33.6, 23931.0], [33.7, 23934.0], [33.8, 23942.0], [33.9, 24001.0], [34.0, 24001.0], [34.1, 24014.0], [34.2, 24030.0], [34.3, 24037.0], [34.4, 24037.0], [34.5, 24042.0], [34.6, 24077.0], [34.7, 24080.0], [34.8, 24080.0], [34.9, 24083.0], [35.0, 24092.0], [35.1, 24092.0], [35.2, 24104.0], [35.3, 24130.0], [35.4, 24144.0], [35.5, 24144.0], [35.6, 24194.0], [35.7, 24197.0], [35.8, 24254.0], [35.9, 24254.0], [36.0, 24297.0], [36.1, 24299.0], [36.2, 24313.0], [36.3, 24313.0], [36.4, 24329.0], [36.5, 24335.0], [36.6, 24342.0], [36.7, 24342.0], [36.8, 24368.0], [36.9, 24383.0], [37.0, 24383.0], [37.1, 24390.0], [37.2, 24420.0], [37.3, 24435.0], [37.4, 24435.0], [37.5, 24485.0], [37.6, 24488.0], [37.7, 24497.0], [37.8, 24497.0], [37.9, 24521.0], [38.0, 24553.0], [38.1, 24629.0], [38.2, 24629.0], [38.3, 24675.0], [38.4, 24676.0], [38.5, 24676.0], [38.6, 24686.0], [38.7, 24689.0], [38.8, 24714.0], [38.9, 24714.0], [39.0, 24843.0], [39.1, 24856.0], [39.2, 24922.0], [39.3, 24922.0], [39.4, 24925.0], [39.5, 24954.0], [39.6, 25012.0], [39.7, 25012.0], [39.8, 25053.0], [39.9, 25064.0], [40.0, 25112.0], [40.1, 25112.0], [40.2, 25120.0], [40.3, 25123.0], [40.4, 25123.0], [40.5, 25128.0], [40.6, 25174.0], [40.7, 25181.0], [40.8, 25181.0], [40.9, 25199.0], [41.0, 25205.0], [41.1, 25217.0], [41.2, 25217.0], [41.3, 25236.0], [41.4, 25254.0], [41.5, 25269.0], [41.6, 25269.0], [41.7, 25287.0], [41.8, 25301.0], [41.9, 25301.0], [42.0, 25314.0], [42.1, 25315.0], [42.2, 25326.0], [42.3, 25326.0], [42.4, 25336.0], [42.5, 25337.0], [42.6, 25352.0], [42.7, 25352.0], [42.8, 25368.0], [42.9, 25397.0], [43.0, 25400.0], [43.1, 25400.0], [43.2, 25407.0], [43.3, 25414.0], [43.4, 25414.0], [43.5, 25429.0], [43.6, 25435.0], [43.7, 25474.0], [43.8, 25474.0], [43.9, 25484.0], [44.0, 25488.0], [44.1, 25502.0], [44.2, 25502.0], [44.3, 25539.0], [44.4, 25549.0], [44.5, 25557.0], [44.6, 25557.0], [44.7, 25560.0], [44.8, 25639.0], [44.9, 25647.0], [45.0, 25647.0], [45.1, 25665.0], [45.2, 25697.0], [45.3, 25697.0], [45.4, 25713.0], [45.5, 25746.0], [45.6, 25750.0], [45.7, 25750.0], [45.8, 25803.0], [45.9, 25827.0], [46.0, 25829.0], [46.1, 25829.0], [46.2, 25844.0], [46.3, 25899.0], [46.4, 25901.0], [46.5, 25901.0], [46.6, 25964.0], [46.7, 25978.0], [46.8, 25978.0], [46.9, 26007.0], [47.0, 26008.0], [47.1, 26023.0], [47.2, 26023.0], [47.3, 26051.0], [47.4, 26073.0], [47.5, 26100.0], [47.6, 26100.0], [47.7, 26111.0], [47.8, 26158.0], [47.9, 26158.0], [48.0, 26158.0], [48.1, 26178.0], [48.2, 26192.0], [48.3, 26245.0], [48.4, 26245.0], [48.5, 26283.0], [48.6, 26303.0], [48.7, 26303.0], [48.8, 26314.0], [48.9, 26393.0], [49.0, 26421.0], [49.1, 26421.0], [49.2, 26429.0], [49.3, 26545.0], [49.4, 26630.0], [49.5, 26630.0], [49.6, 26640.0], [49.7, 26647.0], [49.8, 26659.0], [49.9, 26659.0], [50.0, 26678.0], [50.1, 26733.0], [50.2, 26733.0], [50.3, 26748.0], [50.4, 26764.0], [50.5, 26787.0], [50.6, 26787.0], [50.7, 26822.0], [50.8, 26838.0], [50.9, 26887.0], [51.0, 26887.0], [51.1, 26945.0], [51.2, 26946.0], [51.3, 26989.0], [51.4, 26989.0], [51.5, 27008.0], [51.6, 27010.0], [51.7, 27010.0], [51.8, 27012.0], [51.9, 27040.0], [52.0, 27060.0], [52.1, 27060.0], [52.2, 27096.0], [52.3, 27106.0], [52.4, 27112.0], [52.5, 27112.0], [52.6, 27115.0], [52.7, 27116.0], [52.8, 27144.0], [52.9, 27144.0], [53.0, 27159.0], [53.1, 27164.0], [53.2, 27183.0], [53.3, 27183.0], [53.4, 27188.0], [53.5, 27199.0], [53.6, 27199.0], [53.7, 27216.0], [53.8, 27226.0], [53.9, 27239.0], [54.0, 27239.0], [54.1, 27252.0], [54.2, 27257.0], [54.3, 27267.0], [54.4, 27267.0], [54.5, 27326.0], [54.6, 27427.0], [54.7, 27448.0], [54.8, 27448.0], [54.9, 27460.0], [55.0, 27487.0], [55.1, 27487.0], [55.2, 27524.0], [55.3, 27571.0], [55.4, 27577.0], [55.5, 27577.0], [55.6, 27580.0], [55.7, 27627.0], [55.8, 27636.0], [55.9, 27636.0], [56.0, 27646.0], [56.1, 27667.0], [56.2, 27720.0], [56.3, 27720.0], [56.4, 27727.0], [56.5, 27730.0], [56.6, 27733.0], [56.7, 27733.0], [56.8, 27749.0], [56.9, 27759.0], [57.0, 27759.0], [57.1, 27780.0], [57.2, 27796.0], [57.3, 27803.0], [57.4, 27803.0], [57.5, 27819.0], [57.6, 27831.0], [57.7, 27871.0], [57.8, 27871.0], [57.9, 27911.0], [58.0, 27911.0], [58.1, 27927.0], [58.2, 27927.0], [58.3, 27959.0], [58.4, 27964.0], [58.5, 27964.0], [58.6, 28005.0], [58.7, 28008.0], [58.8, 28010.0], [58.9, 28010.0], [59.0, 28037.0], [59.1, 28044.0], [59.2, 28048.0], [59.3, 28048.0], [59.4, 28069.0], [59.5, 28082.0], [59.6, 28126.0], [59.7, 28126.0], [59.8, 28165.0], [59.9, 28215.0], [60.0, 28233.0], [60.1, 28233.0], [60.2, 28238.0], [60.3, 28254.0], [60.4, 28254.0], [60.5, 28260.0], [60.6, 28262.0], [60.7, 28264.0], [60.8, 28264.0], [60.9, 28272.0], [61.0, 28290.0], [61.1, 28292.0], [61.2, 28292.0], [61.3, 28292.0], [61.4, 28328.0], [61.5, 28331.0], [61.6, 28331.0], [61.7, 28340.0], [61.8, 28348.0], [61.9, 28348.0], [62.0, 28362.0], [62.1, 28365.0], [62.2, 28372.0], [62.3, 28372.0], [62.4, 28383.0], [62.5, 28408.0], [62.6, 28414.0], [62.7, 28414.0], [62.8, 28434.0], [62.9, 28448.0], [63.0, 28449.0], [63.1, 28449.0], [63.2, 28461.0], [63.3, 28464.0], [63.4, 28464.0], [63.5, 28477.0], [63.6, 28488.0], [63.7, 28506.0], [63.8, 28506.0], [63.9, 28506.0], [64.0, 28519.0], [64.1, 28530.0], [64.2, 28530.0], [64.3, 28530.0], [64.4, 28531.0], [64.5, 28542.0], [64.6, 28542.0], [64.7, 28542.0], [64.8, 28563.0], [64.9, 28582.0], [65.0, 28582.0], [65.1, 28584.0], [65.2, 28584.0], [65.3, 28584.0], [65.4, 28591.0], [65.5, 28610.0], [65.6, 28611.0], [65.7, 28611.0], [65.8, 28623.0], [65.9, 28624.0], [66.0, 28627.0], [66.1, 28627.0], [66.2, 28643.0], [66.3, 28647.0], [66.4, 28657.0], [66.5, 28657.0], [66.6, 28660.0], [66.7, 28661.0], [66.8, 28661.0], [66.9, 28662.0], [67.0, 28662.0], [67.1, 28662.0], [67.2, 28662.0], [67.3, 28666.0], [67.4, 28673.0], [67.5, 28675.0], [67.6, 28675.0], [67.7, 28685.0], [67.8, 28688.0], [67.9, 28706.0], [68.0, 28706.0], [68.1, 28711.0], [68.2, 28711.0], [68.3, 28712.0], [68.4, 28712.0], [68.5, 28715.0], [68.6, 28730.0], [68.7, 28730.0], [68.8, 28733.0], [68.9, 28737.0], [69.0, 28747.0], [69.1, 28747.0], [69.2, 28755.0], [69.3, 28756.0], [69.4, 28760.0], [69.5, 28760.0], [69.6, 28761.0], [69.7, 28761.0], [69.8, 28778.0], [69.9, 28778.0], [70.0, 28779.0], [70.1, 28782.0], [70.2, 28782.0], [70.3, 28785.0], [70.4, 28786.0], [70.5, 28791.0], [70.6, 28791.0], [70.7, 28791.0], [70.8, 28797.0], [70.9, 28798.0], [71.0, 28798.0], [71.1, 28799.0], [71.2, 28808.0], [71.3, 28812.0], [71.4, 28812.0], [71.5, 28816.0], [71.6, 28817.0], [71.7, 28817.0], [71.8, 28820.0], [71.9, 28821.0], [72.0, 28828.0], [72.1, 28828.0], [72.2, 28829.0], [72.3, 28829.0], [72.4, 28831.0], [72.5, 28831.0], [72.6, 28832.0], [72.7, 28834.0], [72.8, 28838.0], [72.9, 28838.0], [73.0, 28842.0], [73.1, 28845.0], [73.2, 28846.0], [73.3, 28846.0], [73.4, 28849.0], [73.5, 28862.0], [73.6, 28862.0], [73.7, 28864.0], [73.8, 28867.0], [73.9, 28867.0], [74.0, 28867.0], [74.1, 28867.0], [74.2, 28871.0], [74.3, 28872.0], [74.4, 28872.0], [74.5, 28873.0], [74.6, 28876.0], [74.7, 28876.0], [74.8, 28876.0], [74.9, 28879.0], [75.0, 28887.0], [75.1, 28887.0], [75.2, 28888.0], [75.3, 28892.0], [75.4, 28899.0], [75.5, 28899.0], [75.6, 28902.0], [75.7, 28904.0], [75.8, 28906.0], [75.9, 28906.0], [76.0, 28908.0], [76.1, 28908.0], [76.2, 28913.0], [76.3, 28913.0], [76.4, 28919.0], [76.5, 28920.0], [76.6, 28920.0], [76.7, 28920.0], [76.8, 28922.0], [76.9, 28927.0], [77.0, 28927.0], [77.1, 28927.0], [77.2, 28946.0], [77.3, 28953.0], [77.4, 28953.0], [77.5, 28959.0], [77.6, 28959.0], [77.7, 28962.0], [77.8, 28962.0], [77.9, 28964.0], [78.0, 28965.0], [78.1, 28973.0], [78.2, 28973.0], [78.3, 28975.0], [78.4, 28975.0], [78.5, 28975.0], [78.6, 28975.0], [78.7, 28977.0], [78.8, 28981.0], [78.9, 28981.0], [79.0, 28982.0], [79.1, 28986.0], [79.2, 28988.0], [79.3, 28988.0], [79.4, 28992.0], [79.5, 28993.0], [79.6, 29010.0], [79.7, 29010.0], [79.8, 29011.0], [79.9, 29014.0], [80.0, 29032.0], [80.1, 29032.0], [80.2, 29034.0], [80.3, 29042.0], [80.4, 29042.0], [80.5, 29044.0], [80.6, 29054.0], [80.7, 29055.0], [80.8, 29055.0], [80.9, 29067.0], [81.0, 29069.0], [81.1, 29082.0], [81.2, 29082.0], [81.3, 29087.0], [81.4, 29094.0], [81.5, 29097.0], [81.6, 29097.0], [81.7, 29102.0], [81.8, 29103.0], [81.9, 29103.0], [82.0, 29115.0], [82.1, 29119.0], [82.2, 29121.0], [82.3, 29121.0], [82.4, 29125.0], [82.5, 29126.0], [82.6, 29129.0], [82.7, 29129.0], [82.8, 29131.0], [82.9, 29135.0], [83.0, 29136.0], [83.1, 29136.0], [83.2, 29138.0], [83.3, 29142.0], [83.4, 29142.0], [83.5, 29143.0], [83.6, 29150.0], [83.7, 29157.0], [83.8, 29157.0], [83.9, 29157.0], [84.0, 29160.0], [84.1, 29164.0], [84.2, 29164.0], [84.3, 29167.0], [84.4, 29172.0], [84.5, 29176.0], [84.6, 29176.0], [84.7, 29188.0], [84.8, 29189.0], [84.9, 29189.0], [85.0, 29189.0], [85.1, 29212.0], [85.2, 29213.0], [85.3, 29213.0], [85.4, 29225.0], [85.5, 29232.0], [85.6, 29234.0], [85.7, 29234.0], [85.8, 29243.0], [85.9, 29248.0], [86.0, 29259.0], [86.1, 29259.0], [86.2, 29260.0], [86.3, 29267.0], [86.4, 29279.0], [86.5, 29279.0], [86.6, 29281.0], [86.7, 29286.0], [86.8, 29286.0], [86.9, 29286.0], [87.0, 29305.0], [87.1, 29311.0], [87.2, 29311.0], [87.3, 29314.0], [87.4, 29316.0], [87.5, 29328.0], [87.6, 29328.0], [87.7, 29334.0], [87.8, 29334.0], [87.9, 29357.0], [88.0, 29357.0], [88.1, 29358.0], [88.2, 29364.0], [88.3, 29368.0], [88.4, 29368.0], [88.5, 29379.0], [88.6, 29384.0], [88.7, 29384.0], [88.8, 29387.0], [88.9, 29392.0], [89.0, 29401.0], [89.1, 29401.0], [89.2, 29406.0], [89.3, 29426.0], [89.4, 29443.0], [89.5, 29443.0], [89.6, 29467.0], [89.7, 29485.0], [89.8, 29522.0], [89.9, 29522.0], [90.0, 29531.0], [90.1, 29532.0], [90.2, 29532.0], [90.3, 29537.0], [90.4, 29539.0], [90.5, 29547.0], [90.6, 29547.0], [90.7, 29548.0], [90.8, 29574.0], [90.9, 29586.0], [91.0, 29586.0], [91.1, 29591.0], [91.2, 29600.0], [91.3, 29600.0], [91.4, 29600.0], [91.5, 29615.0], [91.6, 29627.0], [91.7, 29627.0], [91.8, 29638.0], [91.9, 29642.0], [92.0, 29645.0], [92.1, 29645.0], [92.2, 29654.0], [92.3, 29689.0], [92.4, 29698.0], [92.5, 29698.0], [92.6, 29732.0], [92.7, 29758.0], [92.8, 29858.0], [92.9, 29858.0], [93.0, 29891.0], [93.1, 29899.0], [93.2, 30132.0], [93.3, 30132.0], [93.4, 30150.0], [93.5, 30364.0], [93.6, 30364.0], [93.7, 30735.0], [93.8, 30777.0], [93.9, 30823.0], [94.0, 30823.0], [94.1, 30830.0], [94.2, 30858.0], [94.3, 30956.0], [94.4, 30956.0], [94.5, 30956.0], [94.6, 31047.0], [94.7, 31058.0], [94.8, 31058.0], [94.9, 31073.0], [95.0, 31166.0], [95.1, 31166.0], [95.2, 31182.0], [95.3, 31201.0], [95.4, 31905.0], [95.5, 31905.0], [95.6, 32229.0], [95.7, 32306.0], [95.8, 32434.0], [95.9, 32434.0], [96.0, 32761.0], [96.1, 32915.0], [96.2, 33619.0], [96.3, 33619.0], [96.4, 33691.0], [96.5, 33827.0], [96.6, 34417.0], [96.7, 34417.0], [96.8, 34791.0], [96.9, 35137.0], [97.0, 35137.0], [97.1, 35139.0], [97.2, 36255.0], [97.3, 36465.0], [97.4, 36465.0], [97.5, 36796.0], [97.6, 36817.0], [97.7, 37179.0], [97.8, 37179.0], [97.9, 38246.0], [98.0, 38903.0], [98.1, 39177.0], [98.2, 39177.0], [98.3, 39946.0], [98.4, 40871.0], [98.5, 40871.0], [98.6, 40937.0], [98.7, 40962.0], [98.8, 41089.0], [98.9, 41089.0], [99.0, 42042.0], [99.1, 42532.0], [99.2, 42927.0], [99.3, 42927.0], [99.4, 43011.0], [99.5, 43031.0], [99.6, 43158.0], [99.7, 43158.0], [99.8, 43252.0], [99.9, 44053.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 32.0, "series": [{"data": [[32900.0, 1.0], [34700.0, 1.0], [36700.0, 1.0], [35100.0, 2.0], [37100.0, 1.0], [38900.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [40900.0, 2.0], [42500.0, 1.0], [42900.0, 1.0], [43100.0, 1.0], [3000.0, 1.0], [5900.0, 1.0], [8000.0, 1.0], [10800.0, 1.0], [13300.0, 1.0], [15900.0, 1.0], [17200.0, 6.0], [17300.0, 3.0], [17400.0, 4.0], [17100.0, 4.0], [17000.0, 7.0], [16900.0, 3.0], [16700.0, 1.0], [17500.0, 6.0], [17900.0, 2.0], [18400.0, 2.0], [18000.0, 2.0], [17700.0, 6.0], [17800.0, 7.0], [17600.0, 6.0], [18100.0, 2.0], [18300.0, 3.0], [18200.0, 2.0], [19200.0, 2.0], [19400.0, 6.0], [19100.0, 5.0], [18600.0, 5.0], [18800.0, 2.0], [18700.0, 1.0], [19300.0, 1.0], [18900.0, 2.0], [18500.0, 1.0], [19000.0, 1.0], [20300.0, 2.0], [20200.0, 1.0], [19900.0, 5.0], [20000.0, 3.0], [19700.0, 5.0], [19800.0, 3.0], [19500.0, 1.0], [19600.0, 2.0], [20100.0, 2.0], [21500.0, 6.0], [20600.0, 1.0], [21000.0, 2.0], [21400.0, 3.0], [20500.0, 3.0], [20900.0, 1.0], [20800.0, 1.0], [21300.0, 4.0], [20700.0, 1.0], [21200.0, 2.0], [21100.0, 2.0], [21600.0, 5.0], [21900.0, 2.0], [22100.0, 3.0], [21800.0, 2.0], [22000.0, 3.0], [21700.0, 2.0], [22300.0, 2.0], [22500.0, 2.0], [22400.0, 1.0], [22200.0, 4.0], [23300.0, 2.0], [22900.0, 4.0], [23500.0, 6.0], [23400.0, 6.0], [22800.0, 6.0], [23100.0, 4.0], [23200.0, 8.0], [23000.0, 7.0], [22600.0, 6.0], [22700.0, 3.0], [24400.0, 5.0], [23700.0, 7.0], [23900.0, 5.0], [24000.0, 9.0], [23800.0, 2.0], [24500.0, 2.0], [24100.0, 5.0], [24200.0, 3.0], [24300.0, 7.0], [23600.0, 9.0], [25400.0, 8.0], [25300.0, 9.0], [25100.0, 7.0], [25500.0, 5.0], [24600.0, 5.0], [24900.0, 3.0], [25200.0, 6.0], [24700.0, 1.0], [24800.0, 2.0], [25000.0, 3.0], [25600.0, 4.0], [25900.0, 3.0], [26100.0, 6.0], [26000.0, 5.0], [26200.0, 2.0], [26300.0, 3.0], [25800.0, 5.0], [25700.0, 3.0], [26400.0, 2.0], [26500.0, 1.0], [26600.0, 5.0], [26800.0, 3.0], [27200.0, 6.0], [27300.0, 1.0], [26900.0, 3.0], [27100.0, 10.0], [27600.0, 4.0], [27000.0, 6.0], [26700.0, 4.0], [27500.0, 4.0], [27400.0, 4.0], [27900.0, 5.0], [28200.0, 11.0], [28400.0, 9.0], [28500.0, 13.0], [27800.0, 4.0], [27700.0, 8.0], [28600.0, 18.0], [28300.0, 8.0], [28100.0, 2.0], [28000.0, 8.0], [28900.0, 30.0], [29100.0, 25.0], [29200.0, 14.0], [29500.0, 10.0], [29600.0, 10.0], [29300.0, 15.0], [29400.0, 6.0], [29000.0, 15.0], [28700.0, 24.0], [28800.0, 32.0], [30700.0, 2.0], [30100.0, 2.0], [29800.0, 3.0], [29700.0, 2.0], [30300.0, 1.0], [31000.0, 3.0], [31200.0, 1.0], [31100.0, 2.0], [30800.0, 3.0], [30900.0, 2.0], [32200.0, 1.0], [31900.0, 1.0], [32400.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [33600.0, 2.0], [34400.0, 1.0], [33800.0, 1.0], [36400.0, 1.0], [36200.0, 1.0], [36800.0, 1.0], [38200.0, 1.0], [40800.0, 1.0], [41000.0, 1.0], [43000.0, 2.0], [42000.0, 1.0], [44000.0, 1.0], [43200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60265034E12, "maxY": 10.0, "series": [{"data": [[1.60265184E12, 10.0], [1.60265154E12, 10.0], [1.60265196E12, 10.0], [1.60265124E12, 10.0], [1.60265226E12, 2.0], [1.60265094E12, 10.0], [1.60265064E12, 10.0], [1.60265034E12, 10.0], [1.60265166E12, 10.0], [1.60265136E12, 10.0], [1.60265106E12, 10.0], [1.60265076E12, 10.0], [1.60265046E12, 10.0], [1.60265208E12, 10.0], [1.60265178E12, 10.0], [1.60265148E12, 10.0], [1.60265118E12, 10.0], [1.60265088E12, 10.0], [1.60265058E12, 10.0], [1.6026519E12, 10.0], [1.6026516E12, 10.0], [1.6026513E12, 10.0], [1.6026522E12, 9.275862068965518], [1.602651E12, 10.0], [1.6026507E12, 10.0], [1.6026504E12, 10.0], [1.60265214E12, 10.0], [1.60265172E12, 10.0], [1.60265142E12, 10.0], [1.60265112E12, 10.0], [1.60265082E12, 10.0], [1.60265052E12, 10.0], [1.60265202E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265226E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17491.0, "minX": 1.0, "maxY": 25836.19421487602, "series": [{"data": [[8.0, 17695.0], [4.0, 17643.0], [2.0, 17491.0], [1.0, 17732.0], [9.0, 17741.0], [10.0, 25836.19421487602], [5.0, 17633.0], [6.0, 17505.0], [3.0, 17572.0], [7.0, 17674.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25735.731972789108]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.616666666666667, "minX": 1.60265034E12, "maxY": 175439.56666666668, "series": [{"data": [[1.60265184E12, 45286.03333333333], [1.60265154E12, 32723.8], [1.60265196E12, 38814.316666666666], [1.60265124E12, 156525.66666666666], [1.60265226E12, 1177.1333333333334], [1.60265094E12, 45964.21666666667], [1.60265064E12, 46640.63333333333], [1.60265034E12, 157271.4], [1.60265166E12, 50690.96666666667], [1.60265136E12, 66368.76666666666], [1.60265106E12, 32375.75], [1.60265076E12, 48149.183333333334], [1.60265046E12, 143508.36666666667], [1.60265208E12, 52226.0], [1.60265178E12, 54063.23333333333], [1.60265148E12, 70830.6], [1.60265118E12, 65872.36666666667], [1.60265088E12, 55154.0], [1.60265058E12, 79979.23333333334], [1.6026519E12, 48568.0], [1.6026516E12, 48209.36666666667], [1.6026513E12, 147204.98333333334], [1.6026522E12, 55564.15], [1.602651E12, 41761.03333333333], [1.6026507E12, 46700.0], [1.6026504E12, 109063.7], [1.60265214E12, 154405.46666666667], [1.60265172E12, 49060.6], [1.60265142E12, 69277.11666666667], [1.60265112E12, 175439.56666666668], [1.60265082E12, 48162.51666666667], [1.60265052E12, 57683.21666666667], [1.60265202E12, 28707.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60265184E12, 153.4], [1.60265154E12, 124.18333333333334], [1.60265196E12, 167.78333333333333], [1.60265124E12, 185.1], [1.60265226E12, 19.616666666666667], [1.60265094E12, 153.36666666666667], [1.60265064E12, 153.73333333333332], [1.60265034E12, 95.11666666666666], [1.60265166E12, 153.43333333333334], [1.60265136E12, 196.56666666666666], [1.60265106E12, 175.18333333333334], [1.60265076E12, 146.13333333333333], [1.60265046E12, 171.25], [1.60265208E12, 194.83333333333334], [1.60265178E12, 154.4], [1.60265148E12, 176.53333333333333], [1.60265118E12, 174.61666666666667], [1.60265088E12, 153.65], [1.60265058E12, 183.56666666666666], [1.6026519E12, 153.33333333333334], [1.6026516E12, 153.45], [1.6026513E12, 196.76666666666668], [1.6026522E12, 202.68333333333334], [1.602651E12, 160.68333333333334], [1.6026507E12, 153.41666666666666], [1.6026504E12, 208.25], [1.60265214E12, 153.13333333333333], [1.60265172E12, 153.45], [1.60265142E12, 177.85], [1.60265112E12, 225.13333333333333], [1.60265082E12, 153.41666666666666], [1.60265052E12, 125.55], [1.60265202E12, 189.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265226E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17008.923076923078, "minX": 1.60265034E12, "maxY": 37960.352941176476, "series": [{"data": [[1.60265184E12, 28742.380952380954], [1.60265154E12, 35741.82352941176], [1.60265196E12, 26443.391304347828], [1.60265124E12, 22290.884615384613], [1.60265226E12, 17598.333333333332], [1.60265094E12, 28947.380952380954], [1.60265064E12, 26772.285714285714], [1.60265034E12, 17008.923076923078], [1.60265166E12, 29170.714285714286], [1.60265136E12, 19020.17857142857], [1.60265106E12, 25278.916666666668], [1.60265076E12, 28924.75], [1.60265046E12, 21707.652173913044], [1.60265208E12, 22657.333333333325], [1.60265178E12, 27525.761904761905], [1.60265148E12, 23560.499999999996], [1.60265118E12, 24722.2], [1.60265088E12, 28480.428571428572], [1.60265058E12, 24614.32], [1.6026519E12, 28995.809523809523], [1.6026516E12, 28652.571428571428], [1.6026513E12, 23062.185185185182], [1.6026522E12, 24038.79310344828], [1.602651E12, 28366.136363636364], [1.6026507E12, 29253.95238095238], [1.6026504E12, 22282.27586206896], [1.60265214E12, 24558.428571428576], [1.60265172E12, 28903.714285714283], [1.60265142E12, 26413.375], [1.60265112E12, 19384.451612903227], [1.60265082E12, 29151.52380952381], [1.60265052E12, 37960.352941176476], [1.60265202E12, 24091.269230769234]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265226E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17003.846153846156, "minX": 1.60265034E12, "maxY": 37958.76470588235, "series": [{"data": [[1.60265184E12, 28741.19047619048], [1.60265154E12, 35740.76470588235], [1.60265196E12, 26442.478260869568], [1.60265124E12, 22287.461538461535], [1.60265226E12, 17596.666666666668], [1.60265094E12, 28946.190476190477], [1.60265064E12, 26771.190476190477], [1.60265034E12, 17003.846153846156], [1.60265166E12, 29169.52380952381], [1.60265136E12, 19018.392857142862], [1.60265106E12, 25277.749999999993], [1.60265076E12, 28923.65], [1.60265046E12, 21704.608695652172], [1.60265208E12, 22655.777777777774], [1.60265178E12, 27524.52380952381], [1.60265148E12, 23559.041666666668], [1.60265118E12, 24719.68], [1.60265088E12, 28479.2380952381], [1.60265058E12, 24612.440000000002], [1.6026519E12, 28994.619047619046], [1.6026516E12, 28651.333333333336], [1.6026513E12, 23059.55555555556], [1.6026522E12, 24036.68965517241], [1.602651E12, 28365.09090909091], [1.6026507E12, 29253.0], [1.6026504E12, 22280.241379310348], [1.60265214E12, 24554.190476190477], [1.60265172E12, 28902.714285714283], [1.60265142E12, 26412.041666666664], [1.60265112E12, 19381.06451612903], [1.60265082E12, 29150.428571428576], [1.60265052E12, 37958.76470588235], [1.60265202E12, 24090.000000000007]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265226E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60265034E12, "maxY": 6.4615384615384635, "series": [{"data": [[1.60265184E12, 0.47619047619047616], [1.60265154E12, 0.23529411764705882], [1.60265196E12, 0.13043478260869568], [1.60265124E12, 0.2692307692307692], [1.60265226E12, 0.0], [1.60265094E12, 0.33333333333333337], [1.60265064E12, 0.761904761904762], [1.60265034E12, 6.4615384615384635], [1.60265166E12, 0.6190476190476191], [1.60265136E12, 0.3928571428571429], [1.60265106E12, 0.4166666666666667], [1.60265076E12, 0.6], [1.60265046E12, 0.08695652173913045], [1.60265208E12, 0.4814814814814815], [1.60265178E12, 0.38095238095238093], [1.60265148E12, 0.4583333333333333], [1.60265118E12, 0.36], [1.60265088E12, 0.2857142857142857], [1.60265058E12, 0.39999999999999997], [1.6026519E12, 0.5714285714285715], [1.6026516E12, 0.5714285714285714], [1.6026513E12, 0.3333333333333333], [1.6026522E12, 0.4827586206896552], [1.602651E12, 0.7272727272727272], [1.6026507E12, 0.19047619047619047], [1.6026504E12, 0.5172413793103448], [1.60265214E12, 0.4285714285714286], [1.60265172E12, 0.4285714285714286], [1.60265142E12, 0.375], [1.60265112E12, 0.4193548387096774], [1.60265082E12, 0.6190476190476191], [1.60265052E12, 0.8235294117647061], [1.60265202E12, 0.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265226E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3082.0, "minX": 1.60265034E12, "maxY": 44053.0, "series": [{"data": [[1.60265184E12, 29157.0], [1.60265154E12, 42927.0], [1.60265196E12, 28610.0], [1.60265124E12, 25539.0], [1.60265226E12, 17732.0], [1.60265094E12, 29364.0], [1.60265064E12, 30132.0], [1.60265034E12, 25901.0], [1.60265166E12, 29732.0], [1.60265136E12, 28975.0], [1.60265106E12, 28010.0], [1.60265076E12, 29591.0], [1.60265046E12, 30735.0], [1.60265208E12, 27183.0], [1.60265178E12, 28044.0], [1.60265148E12, 26733.0], [1.60265118E12, 31201.0], [1.60265088E12, 29042.0], [1.60265058E12, 29176.0], [1.6026519E12, 29281.0], [1.6026516E12, 29358.0], [1.6026513E12, 27831.0], [1.6026522E12, 38246.0], [1.602651E12, 29654.0], [1.6026507E12, 29899.0], [1.6026504E12, 27252.0], [1.60265214E12, 28887.0], [1.60265172E12, 29328.0], [1.60265142E12, 31047.0], [1.60265112E12, 23649.0], [1.60265082E12, 29858.0], [1.60265052E12, 44053.0], [1.60265202E12, 27646.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60265184E12, 27460.0], [1.60265154E12, 28821.0], [1.60265196E12, 23465.0], [1.60265124E12, 17846.0], [1.60265226E12, 17491.0], [1.60265094E12, 28666.0], [1.60265064E12, 23697.0], [1.60265034E12, 3082.0], [1.60265166E12, 28563.0], [1.60265136E12, 16736.0], [1.60265106E12, 23466.0], [1.60265076E12, 28611.0], [1.60265046E12, 17202.0], [1.60265208E12, 18678.0], [1.60265178E12, 26787.0], [1.60265148E12, 21565.0], [1.60265118E12, 17805.0], [1.60265088E12, 28037.0], [1.60265058E12, 22073.0], [1.6026519E12, 28506.0], [1.6026516E12, 26111.0], [1.6026513E12, 19113.0], [1.6026522E12, 16906.0], [1.602651E12, 25746.0], [1.6026507E12, 28584.0], [1.6026504E12, 17514.0], [1.60265214E12, 18315.0], [1.60265172E12, 28448.0], [1.60265142E12, 22572.0], [1.60265112E12, 17245.0], [1.60265082E12, 28264.0], [1.60265052E12, 30150.0], [1.60265202E12, 20738.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60265184E12, 27460.0], [1.60265154E12, 28821.0], [1.60265196E12, 23465.0], [1.60265124E12, 17846.0], [1.60265226E12, 17491.0], [1.60265094E12, 28666.0], [1.60265064E12, 23697.0], [1.60265034E12, 3082.0], [1.60265166E12, 28563.0], [1.60265136E12, 16736.0], [1.60265106E12, 23466.0], [1.60265076E12, 28611.0], [1.60265046E12, 17202.0], [1.60265208E12, 18678.0], [1.60265178E12, 26787.0], [1.60265148E12, 21565.0], [1.60265118E12, 17805.0], [1.60265088E12, 28037.0], [1.60265058E12, 22073.0], [1.6026519E12, 28506.0], [1.6026516E12, 26111.0], [1.6026513E12, 19113.0], [1.6026522E12, 16906.0], [1.602651E12, 25746.0], [1.6026507E12, 28584.0], [1.6026504E12, 17514.0], [1.60265214E12, 18315.0], [1.60265172E12, 28448.0], [1.60265142E12, 22572.0], [1.60265112E12, 17245.0], [1.60265082E12, 28264.0], [1.60265052E12, 30150.0], [1.60265202E12, 20738.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60265184E12, 27460.0], [1.60265154E12, 28821.0], [1.60265196E12, 23465.0], [1.60265124E12, 17846.0], [1.60265226E12, 17491.0], [1.60265094E12, 28666.0], [1.60265064E12, 23697.0], [1.60265034E12, 3082.0], [1.60265166E12, 28563.0], [1.60265136E12, 16736.0], [1.60265106E12, 23466.0], [1.60265076E12, 28611.0], [1.60265046E12, 17202.0], [1.60265208E12, 18678.0], [1.60265178E12, 26787.0], [1.60265148E12, 21565.0], [1.60265118E12, 17805.0], [1.60265088E12, 28037.0], [1.60265058E12, 22073.0], [1.6026519E12, 28506.0], [1.6026516E12, 26111.0], [1.6026513E12, 19113.0], [1.6026522E12, 16906.0], [1.602651E12, 25746.0], [1.6026507E12, 28584.0], [1.6026504E12, 17514.0], [1.60265214E12, 18315.0], [1.60265172E12, 28448.0], [1.60265142E12, 22572.0], [1.60265112E12, 17245.0], [1.60265082E12, 28264.0], [1.60265052E12, 30150.0], [1.60265202E12, 20738.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60265184E12, 27460.0], [1.60265154E12, 28821.0], [1.60265196E12, 23465.0], [1.60265124E12, 17846.0], [1.60265226E12, 17491.0], [1.60265094E12, 28666.0], [1.60265064E12, 23697.0], [1.60265034E12, 3082.0], [1.60265166E12, 28563.0], [1.60265136E12, 16736.0], [1.60265106E12, 23466.0], [1.60265076E12, 28611.0], [1.60265046E12, 17202.0], [1.60265208E12, 18678.0], [1.60265178E12, 26787.0], [1.60265148E12, 21565.0], [1.60265118E12, 17805.0], [1.60265088E12, 28037.0], [1.60265058E12, 22073.0], [1.6026519E12, 28506.0], [1.6026516E12, 26111.0], [1.6026513E12, 19113.0], [1.6026522E12, 16906.0], [1.602651E12, 25746.0], [1.6026507E12, 28584.0], [1.6026504E12, 17514.0], [1.60265214E12, 18315.0], [1.60265172E12, 28448.0], [1.60265142E12, 22572.0], [1.60265112E12, 17245.0], [1.60265082E12, 28264.0], [1.60265052E12, 30150.0], [1.60265202E12, 20738.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60265184E12, 28791.0], [1.60265154E12, 35137.0], [1.60265196E12, 25899.0], [1.60265124E12, 22917.5], [1.60265226E12, 17572.0], [1.60265094E12, 28908.0], [1.60265064E12, 26647.0], [1.60265034E12, 17994.0], [1.60265166E12, 29188.0], [1.60265136E12, 17328.5], [1.60265106E12, 25326.0], [1.60265076E12, 28867.5], [1.60265046E12, 21872.0], [1.60265208E12, 22061.0], [1.60265178E12, 27727.0], [1.60265148E12, 23592.0], [1.60265118E12, 22665.0], [1.60265088E12, 28292.0], [1.60265058E12, 24368.0], [1.6026519E12, 28993.0], [1.6026516E12, 28849.0], [1.6026513E12, 23448.0], [1.6026522E12, 19997.0], [1.602651E12, 28736.0], [1.6026507E12, 29248.0], [1.6026504E12, 21568.0], [1.60265214E12, 27188.0], [1.60265172E12, 28834.0], [1.60265142E12, 26868.5], [1.60265112E12, 18836.0], [1.60265082E12, 29387.0], [1.60265052E12, 39177.0], [1.60265202E12, 24058.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265226E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26678.0, "minX": 1.0, "maxY": 26678.0, "series": [{"data": [[1.0, 26678.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26678.0, "minX": 1.0, "maxY": 26678.0, "series": [{"data": [[1.0, 26678.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60265034E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265184E12, 0.35], [1.60265154E12, 0.2833333333333333], [1.60265196E12, 0.38333333333333336], [1.60265124E12, 0.43333333333333335], [1.60265094E12, 0.35], [1.60265064E12, 0.35], [1.60265034E12, 0.38333333333333336], [1.60265166E12, 0.35], [1.60265136E12, 0.4666666666666667], [1.60265106E12, 0.4], [1.60265076E12, 0.3333333333333333], [1.60265046E12, 0.38333333333333336], [1.60265208E12, 0.45], [1.60265178E12, 0.35], [1.60265148E12, 0.4], [1.60265118E12, 0.4166666666666667], [1.60265088E12, 0.35], [1.60265058E12, 0.4166666666666667], [1.6026519E12, 0.35], [1.6026516E12, 0.35], [1.6026513E12, 0.45], [1.6026522E12, 0.36666666666666664], [1.602651E12, 0.36666666666666664], [1.6026507E12, 0.35], [1.6026504E12, 0.48333333333333334], [1.60265214E12, 0.35], [1.60265172E12, 0.35], [1.60265142E12, 0.4], [1.60265112E12, 0.5166666666666667], [1.60265082E12, 0.35], [1.60265052E12, 0.2833333333333333], [1.60265202E12, 0.43333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6026522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265034E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265184E12, 0.35], [1.60265154E12, 0.2833333333333333], [1.60265196E12, 0.38333333333333336], [1.60265124E12, 0.43333333333333335], [1.60265226E12, 0.05], [1.60265094E12, 0.35], [1.60265064E12, 0.35], [1.60265034E12, 0.21666666666666667], [1.60265166E12, 0.35], [1.60265136E12, 0.4666666666666667], [1.60265106E12, 0.4], [1.60265076E12, 0.3333333333333333], [1.60265046E12, 0.38333333333333336], [1.60265208E12, 0.45], [1.60265178E12, 0.35], [1.60265148E12, 0.4], [1.60265118E12, 0.4166666666666667], [1.60265088E12, 0.35], [1.60265058E12, 0.4166666666666667], [1.6026519E12, 0.35], [1.6026516E12, 0.35], [1.6026513E12, 0.45], [1.6026522E12, 0.48333333333333334], [1.602651E12, 0.36666666666666664], [1.6026507E12, 0.35], [1.6026504E12, 0.48333333333333334], [1.60265214E12, 0.35], [1.60265172E12, 0.35], [1.60265142E12, 0.4], [1.60265112E12, 0.5166666666666667], [1.60265082E12, 0.35], [1.60265052E12, 0.2833333333333333], [1.60265202E12, 0.43333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265226E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265034E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265184E12, 0.35], [1.60265154E12, 0.2833333333333333], [1.60265196E12, 0.38333333333333336], [1.60265124E12, 0.43333333333333335], [1.60265226E12, 0.05], [1.60265094E12, 0.35], [1.60265064E12, 0.35], [1.60265034E12, 0.21666666666666667], [1.60265166E12, 0.35], [1.60265136E12, 0.4666666666666667], [1.60265106E12, 0.4], [1.60265076E12, 0.3333333333333333], [1.60265046E12, 0.38333333333333336], [1.60265208E12, 0.45], [1.60265178E12, 0.35], [1.60265148E12, 0.4], [1.60265118E12, 0.4166666666666667], [1.60265088E12, 0.35], [1.60265058E12, 0.4166666666666667], [1.6026519E12, 0.35], [1.6026516E12, 0.35], [1.6026513E12, 0.45], [1.6026522E12, 0.48333333333333334], [1.602651E12, 0.36666666666666664], [1.6026507E12, 0.35], [1.6026504E12, 0.48333333333333334], [1.60265214E12, 0.35], [1.60265172E12, 0.35], [1.60265142E12, 0.4], [1.60265112E12, 0.5166666666666667], [1.60265082E12, 0.35], [1.60265052E12, 0.2833333333333333], [1.60265202E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265226E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265034E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265184E12, 0.35], [1.60265154E12, 0.2833333333333333], [1.60265196E12, 0.38333333333333336], [1.60265124E12, 0.43333333333333335], [1.60265226E12, 0.05], [1.60265094E12, 0.35], [1.60265064E12, 0.35], [1.60265034E12, 0.21666666666666667], [1.60265166E12, 0.35], [1.60265136E12, 0.4666666666666667], [1.60265106E12, 0.4], [1.60265076E12, 0.3333333333333333], [1.60265046E12, 0.38333333333333336], [1.60265208E12, 0.45], [1.60265178E12, 0.35], [1.60265148E12, 0.4], [1.60265118E12, 0.4166666666666667], [1.60265088E12, 0.35], [1.60265058E12, 0.4166666666666667], [1.6026519E12, 0.35], [1.6026516E12, 0.35], [1.6026513E12, 0.45], [1.6026522E12, 0.48333333333333334], [1.602651E12, 0.36666666666666664], [1.6026507E12, 0.35], [1.6026504E12, 0.48333333333333334], [1.60265214E12, 0.35], [1.60265172E12, 0.35], [1.60265142E12, 0.4], [1.60265112E12, 0.5166666666666667], [1.60265082E12, 0.35], [1.60265052E12, 0.2833333333333333], [1.60265202E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265226E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

