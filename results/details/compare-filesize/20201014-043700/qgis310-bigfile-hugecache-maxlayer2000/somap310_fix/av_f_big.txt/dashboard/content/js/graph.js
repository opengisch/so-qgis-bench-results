/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3189.0, "minX": 0.0, "maxY": 44681.0, "series": [{"data": [[0.0, 3189.0], [0.1, 3189.0], [0.2, 6413.0], [0.3, 8769.0], [0.4, 8769.0], [0.5, 11622.0], [0.6, 14220.0], [0.7, 16861.0], [0.8, 16861.0], [0.9, 16899.0], [1.0, 16900.0], [1.1, 16916.0], [1.2, 16916.0], [1.3, 16941.0], [1.4, 17038.0], [1.5, 17088.0], [1.6, 17088.0], [1.7, 17091.0], [1.8, 17105.0], [1.9, 17105.0], [2.0, 17111.0], [2.1, 17191.0], [2.2, 17203.0], [2.3, 17203.0], [2.4, 17204.0], [2.5, 17206.0], [2.6, 17217.0], [2.7, 17217.0], [2.8, 17272.0], [2.9, 17306.0], [3.0, 17368.0], [3.1, 17368.0], [3.2, 17465.0], [3.3, 17548.0], [3.4, 17548.0], [3.5, 17611.0], [3.6, 17617.0], [3.7, 17662.0], [3.8, 17662.0], [3.9, 17678.0], [4.0, 17694.0], [4.1, 17720.0], [4.2, 17720.0], [4.3, 17746.0], [4.4, 17790.0], [4.5, 17796.0], [4.6, 17796.0], [4.7, 17828.0], [4.8, 17830.0], [4.9, 17837.0], [5.0, 17837.0], [5.1, 17839.0], [5.2, 17851.0], [5.3, 17851.0], [5.4, 17878.0], [5.5, 17888.0], [5.6, 17902.0], [5.7, 17902.0], [5.8, 17903.0], [5.9, 17921.0], [6.0, 17966.0], [6.1, 17966.0], [6.2, 17973.0], [6.3, 17979.0], [6.4, 17989.0], [6.5, 17989.0], [6.6, 18018.0], [6.7, 18028.0], [6.8, 18028.0], [6.9, 18036.0], [7.0, 18039.0], [7.1, 18162.0], [7.2, 18162.0], [7.3, 18163.0], [7.4, 18181.0], [7.5, 18201.0], [7.6, 18201.0], [7.7, 18256.0], [7.8, 18274.0], [7.9, 18326.0], [8.0, 18326.0], [8.1, 18349.0], [8.2, 18362.0], [8.3, 18380.0], [8.4, 18380.0], [8.5, 18439.0], [8.6, 18449.0], [8.7, 18449.0], [8.8, 18467.0], [8.9, 18504.0], [9.0, 18516.0], [9.1, 18516.0], [9.2, 18583.0], [9.3, 18625.0], [9.4, 18676.0], [9.5, 18676.0], [9.6, 18693.0], [9.7, 18719.0], [9.8, 18859.0], [9.9, 18859.0], [10.0, 18910.0], [10.1, 18948.0], [10.2, 18948.0], [10.3, 18963.0], [10.4, 19023.0], [10.5, 19154.0], [10.6, 19154.0], [10.7, 19200.0], [10.8, 19273.0], [10.9, 19302.0], [11.0, 19302.0], [11.1, 19324.0], [11.2, 19328.0], [11.3, 19335.0], [11.4, 19335.0], [11.5, 19338.0], [11.6, 19350.0], [11.7, 19350.0], [11.8, 19379.0], [11.9, 19434.0], [12.0, 19532.0], [12.1, 19532.0], [12.2, 19563.0], [12.3, 19569.0], [12.4, 19611.0], [12.5, 19611.0], [12.6, 19649.0], [12.7, 19727.0], [12.8, 19815.0], [12.9, 19815.0], [13.0, 19896.0], [13.1, 19921.0], [13.2, 19922.0], [13.3, 19922.0], [13.4, 19933.0], [13.5, 19935.0], [13.6, 19935.0], [13.7, 19978.0], [13.8, 19982.0], [13.9, 20094.0], [14.0, 20094.0], [14.1, 20129.0], [14.2, 20135.0], [14.3, 20193.0], [14.4, 20193.0], [14.5, 20241.0], [14.6, 20253.0], [14.7, 20288.0], [14.8, 20288.0], [14.9, 20348.0], [15.0, 20359.0], [15.1, 20359.0], [15.2, 20372.0], [15.3, 20420.0], [15.4, 20429.0], [15.5, 20429.0], [15.6, 20457.0], [15.7, 20503.0], [15.8, 20517.0], [15.9, 20517.0], [16.0, 20532.0], [16.1, 20619.0], [16.2, 20630.0], [16.3, 20630.0], [16.4, 20728.0], [16.5, 20780.0], [16.6, 20816.0], [16.7, 20816.0], [16.8, 20833.0], [16.9, 20865.0], [17.0, 20865.0], [17.1, 20869.0], [17.2, 20888.0], [17.3, 21195.0], [17.4, 21195.0], [17.5, 21391.0], [17.6, 21568.0], [17.7, 21571.0], [17.8, 21571.0], [17.9, 21616.0], [18.0, 21642.0], [18.1, 21650.0], [18.2, 21650.0], [18.3, 21674.0], [18.4, 21727.0], [18.5, 21727.0], [18.6, 21788.0], [18.7, 21816.0], [18.8, 21825.0], [18.9, 21825.0], [19.0, 21875.0], [19.1, 21881.0], [19.2, 21923.0], [19.3, 21923.0], [19.4, 21947.0], [19.5, 21972.0], [19.6, 21976.0], [19.7, 21976.0], [19.8, 22017.0], [19.9, 22019.0], [20.0, 22046.0], [20.1, 22046.0], [20.2, 22065.0], [20.3, 22098.0], [20.4, 22098.0], [20.5, 22120.0], [20.6, 22130.0], [20.7, 22130.0], [20.8, 22130.0], [20.9, 22238.0], [21.0, 22401.0], [21.1, 22412.0], [21.2, 22412.0], [21.3, 22423.0], [21.4, 22506.0], [21.5, 22518.0], [21.6, 22518.0], [21.7, 22521.0], [21.8, 22539.0], [21.9, 22539.0], [22.0, 22544.0], [22.1, 22595.0], [22.2, 22624.0], [22.3, 22624.0], [22.4, 22627.0], [22.5, 22631.0], [22.6, 22640.0], [22.7, 22640.0], [22.8, 22649.0], [22.9, 22709.0], [23.0, 22714.0], [23.1, 22714.0], [23.2, 22723.0], [23.3, 22750.0], [23.4, 22750.0], [23.5, 22782.0], [23.6, 22797.0], [23.7, 22926.0], [23.8, 22926.0], [23.9, 22932.0], [24.0, 22938.0], [24.1, 22945.0], [24.2, 22945.0], [24.3, 22956.0], [24.4, 23024.0], [24.5, 23047.0], [24.6, 23047.0], [24.7, 23100.0], [24.8, 23198.0], [24.9, 23216.0], [25.0, 23216.0], [25.1, 23248.0], [25.2, 23253.0], [25.3, 23253.0], [25.4, 23257.0], [25.5, 23258.0], [25.6, 23283.0], [25.7, 23283.0], [25.8, 23391.0], [25.9, 23393.0], [26.0, 23447.0], [26.1, 23447.0], [26.2, 23450.0], [26.3, 23465.0], [26.4, 23541.0], [26.5, 23541.0], [26.6, 23573.0], [26.7, 23582.0], [26.8, 23582.0], [26.9, 23603.0], [27.0, 23619.0], [27.1, 23620.0], [27.2, 23620.0], [27.3, 23645.0], [27.4, 23691.0], [27.5, 23729.0], [27.6, 23729.0], [27.7, 23755.0], [27.8, 23760.0], [27.9, 23803.0], [28.0, 23803.0], [28.1, 23809.0], [28.2, 23864.0], [28.3, 23885.0], [28.4, 23885.0], [28.5, 23900.0], [28.6, 23913.0], [28.7, 23913.0], [28.8, 23918.0], [28.9, 23932.0], [29.0, 23949.0], [29.1, 23949.0], [29.2, 23977.0], [29.3, 24008.0], [29.4, 24027.0], [29.5, 24027.0], [29.6, 24053.0], [29.7, 24054.0], [29.8, 24077.0], [29.9, 24077.0], [30.0, 24077.0], [30.1, 24091.0], [30.2, 24091.0], [30.3, 24103.0], [30.4, 24115.0], [30.5, 24134.0], [30.6, 24134.0], [30.7, 24149.0], [30.8, 24153.0], [30.9, 24165.0], [31.0, 24165.0], [31.1, 24167.0], [31.2, 24179.0], [31.3, 24195.0], [31.4, 24195.0], [31.5, 24218.0], [31.6, 24256.0], [31.7, 24256.0], [31.8, 24256.0], [31.9, 24258.0], [32.0, 24295.0], [32.1, 24295.0], [32.2, 24310.0], [32.3, 24351.0], [32.4, 24356.0], [32.5, 24356.0], [32.6, 24409.0], [32.7, 24430.0], [32.8, 24432.0], [32.9, 24432.0], [33.0, 24447.0], [33.1, 24461.0], [33.2, 24468.0], [33.3, 24468.0], [33.4, 24468.0], [33.5, 24489.0], [33.6, 24489.0], [33.7, 24495.0], [33.8, 24499.0], [33.9, 24523.0], [34.0, 24523.0], [34.1, 24534.0], [34.2, 24538.0], [34.3, 24597.0], [34.4, 24597.0], [34.5, 24607.0], [34.6, 24613.0], [34.7, 24637.0], [34.8, 24637.0], [34.9, 24664.0], [35.0, 24676.0], [35.1, 24676.0], [35.2, 24717.0], [35.3, 24731.0], [35.4, 24734.0], [35.5, 24734.0], [35.6, 24760.0], [35.7, 24773.0], [35.8, 24800.0], [35.9, 24800.0], [36.0, 24842.0], [36.1, 24844.0], [36.2, 24845.0], [36.3, 24845.0], [36.4, 24875.0], [36.5, 24917.0], [36.6, 24920.0], [36.7, 24920.0], [36.8, 24921.0], [36.9, 24926.0], [37.0, 24926.0], [37.1, 24947.0], [37.2, 24975.0], [37.3, 24991.0], [37.4, 24991.0], [37.5, 24992.0], [37.6, 24993.0], [37.7, 25024.0], [37.8, 25024.0], [37.9, 25026.0], [38.0, 25040.0], [38.1, 25047.0], [38.2, 25047.0], [38.3, 25074.0], [38.4, 25087.0], [38.5, 25087.0], [38.6, 25090.0], [38.7, 25172.0], [38.8, 25177.0], [38.9, 25177.0], [39.0, 25222.0], [39.1, 25225.0], [39.2, 25225.0], [39.3, 25225.0], [39.4, 25263.0], [39.5, 25270.0], [39.6, 25320.0], [39.7, 25320.0], [39.8, 25323.0], [39.9, 25364.0], [40.0, 25366.0], [40.1, 25366.0], [40.2, 25388.0], [40.3, 25439.0], [40.4, 25439.0], [40.5, 25441.0], [40.6, 25482.0], [40.7, 25519.0], [40.8, 25519.0], [40.9, 25527.0], [41.0, 25546.0], [41.1, 25567.0], [41.2, 25567.0], [41.3, 25609.0], [41.4, 25612.0], [41.5, 25625.0], [41.6, 25625.0], [41.7, 25636.0], [41.8, 25640.0], [41.9, 25640.0], [42.0, 25669.0], [42.1, 25672.0], [42.2, 25672.0], [42.3, 25672.0], [42.4, 25689.0], [42.5, 25707.0], [42.6, 25781.0], [42.7, 25781.0], [42.8, 25787.0], [42.9, 25802.0], [43.0, 25802.0], [43.1, 25802.0], [43.2, 25832.0], [43.3, 25878.0], [43.4, 25878.0], [43.5, 25923.0], [43.6, 25996.0], [43.7, 26005.0], [43.8, 26005.0], [43.9, 26062.0], [44.0, 26083.0], [44.1, 26156.0], [44.2, 26156.0], [44.3, 26163.0], [44.4, 26166.0], [44.5, 26174.0], [44.6, 26174.0], [44.7, 26174.0], [44.8, 26193.0], [44.9, 26290.0], [45.0, 26290.0], [45.1, 26307.0], [45.2, 26318.0], [45.3, 26318.0], [45.4, 26342.0], [45.5, 26383.0], [45.6, 26404.0], [45.7, 26404.0], [45.8, 26433.0], [45.9, 26449.0], [46.0, 26475.0], [46.1, 26475.0], [46.2, 26489.0], [46.3, 26510.0], [46.4, 26524.0], [46.5, 26524.0], [46.6, 26560.0], [46.7, 26570.0], [46.8, 26570.0], [46.9, 26578.0], [47.0, 26662.0], [47.1, 26674.0], [47.2, 26674.0], [47.3, 26697.0], [47.4, 26717.0], [47.5, 26735.0], [47.6, 26735.0], [47.7, 26743.0], [47.8, 26785.0], [47.9, 26824.0], [48.0, 26824.0], [48.1, 26842.0], [48.2, 26848.0], [48.3, 26849.0], [48.4, 26849.0], [48.5, 26849.0], [48.6, 26862.0], [48.7, 26862.0], [48.8, 26868.0], [48.9, 26950.0], [49.0, 26961.0], [49.1, 26961.0], [49.2, 26996.0], [49.3, 27001.0], [49.4, 27023.0], [49.5, 27023.0], [49.6, 27034.0], [49.7, 27057.0], [49.8, 27077.0], [49.9, 27077.0], [50.0, 27087.0], [50.1, 27113.0], [50.2, 27113.0], [50.3, 27139.0], [50.4, 27161.0], [50.5, 27179.0], [50.6, 27179.0], [50.7, 27189.0], [50.8, 27189.0], [50.9, 27191.0], [51.0, 27191.0], [51.1, 27195.0], [51.2, 27251.0], [51.3, 27255.0], [51.4, 27255.0], [51.5, 27312.0], [51.6, 27321.0], [51.7, 27321.0], [51.8, 27373.0], [51.9, 27375.0], [52.0, 27395.0], [52.1, 27395.0], [52.2, 27437.0], [52.3, 27477.0], [52.4, 27537.0], [52.5, 27537.0], [52.6, 27572.0], [52.7, 27577.0], [52.8, 27630.0], [52.9, 27630.0], [53.0, 27642.0], [53.1, 27652.0], [53.2, 27675.0], [53.3, 27675.0], [53.4, 27686.0], [53.5, 27694.0], [53.6, 27694.0], [53.7, 27705.0], [53.8, 27735.0], [53.9, 27740.0], [54.0, 27740.0], [54.1, 27761.0], [54.2, 27829.0], [54.3, 27846.0], [54.4, 27846.0], [54.5, 27856.0], [54.6, 27869.0], [54.7, 27883.0], [54.8, 27883.0], [54.9, 27888.0], [55.0, 27897.0], [55.1, 27897.0], [55.2, 27937.0], [55.3, 27946.0], [55.4, 27965.0], [55.5, 27965.0], [55.6, 27982.0], [55.7, 27982.0], [55.8, 28024.0], [55.9, 28024.0], [56.0, 28031.0], [56.1, 28161.0], [56.2, 28167.0], [56.3, 28167.0], [56.4, 28173.0], [56.5, 28179.0], [56.6, 28179.0], [56.7, 28179.0], [56.8, 28183.0], [56.9, 28213.0], [57.0, 28213.0], [57.1, 28218.0], [57.2, 28307.0], [57.3, 28341.0], [57.4, 28341.0], [57.5, 28406.0], [57.6, 28415.0], [57.7, 28432.0], [57.8, 28432.0], [57.9, 28462.0], [58.0, 28483.0], [58.1, 28484.0], [58.2, 28484.0], [58.3, 28499.0], [58.4, 28506.0], [58.5, 28506.0], [58.6, 28622.0], [58.7, 28634.0], [58.8, 28652.0], [58.9, 28652.0], [59.0, 28672.0], [59.1, 28709.0], [59.2, 28709.0], [59.3, 28709.0], [59.4, 28716.0], [59.5, 28716.0], [59.6, 28723.0], [59.7, 28723.0], [59.8, 28735.0], [59.9, 28751.0], [60.0, 28779.0], [60.1, 28779.0], [60.2, 28791.0], [60.3, 28850.0], [60.4, 28850.0], [60.5, 28871.0], [60.6, 28890.0], [60.7, 28892.0], [60.8, 28892.0], [60.9, 28912.0], [61.0, 28923.0], [61.1, 28925.0], [61.2, 28925.0], [61.3, 28927.0], [61.4, 28938.0], [61.5, 28950.0], [61.6, 28950.0], [61.7, 28952.0], [61.8, 28957.0], [61.9, 28957.0], [62.0, 28959.0], [62.1, 28963.0], [62.2, 28976.0], [62.3, 28976.0], [62.4, 28982.0], [62.5, 28989.0], [62.6, 28994.0], [62.7, 28994.0], [62.8, 28996.0], [62.9, 28997.0], [63.0, 29000.0], [63.1, 29000.0], [63.2, 29011.0], [63.3, 29020.0], [63.4, 29020.0], [63.5, 29023.0], [63.6, 29034.0], [63.7, 29038.0], [63.8, 29038.0], [63.9, 29049.0], [64.0, 29050.0], [64.1, 29074.0], [64.2, 29074.0], [64.3, 29078.0], [64.4, 29089.0], [64.5, 29095.0], [64.6, 29095.0], [64.7, 29097.0], [64.8, 29099.0], [64.9, 29102.0], [65.0, 29102.0], [65.1, 29107.0], [65.2, 29111.0], [65.3, 29111.0], [65.4, 29115.0], [65.5, 29120.0], [65.6, 29124.0], [65.7, 29124.0], [65.8, 29129.0], [65.9, 29131.0], [66.0, 29133.0], [66.1, 29133.0], [66.2, 29135.0], [66.3, 29136.0], [66.4, 29137.0], [66.5, 29137.0], [66.6, 29140.0], [66.7, 29141.0], [66.8, 29141.0], [66.9, 29149.0], [67.0, 29151.0], [67.1, 29167.0], [67.2, 29167.0], [67.3, 29173.0], [67.4, 29181.0], [67.5, 29182.0], [67.6, 29182.0], [67.7, 29184.0], [67.8, 29187.0], [67.9, 29190.0], [68.0, 29190.0], [68.1, 29195.0], [68.2, 29198.0], [68.3, 29209.0], [68.4, 29209.0], [68.5, 29211.0], [68.6, 29214.0], [68.7, 29214.0], [68.8, 29215.0], [68.9, 29215.0], [69.0, 29216.0], [69.1, 29216.0], [69.2, 29216.0], [69.3, 29231.0], [69.4, 29232.0], [69.5, 29232.0], [69.6, 29242.0], [69.7, 29249.0], [69.8, 29254.0], [69.9, 29254.0], [70.0, 29255.0], [70.1, 29259.0], [70.2, 29259.0], [70.3, 29264.0], [70.4, 29266.0], [70.5, 29266.0], [70.6, 29266.0], [70.7, 29273.0], [70.8, 29279.0], [70.9, 29282.0], [71.0, 29282.0], [71.1, 29290.0], [71.2, 29290.0], [71.3, 29296.0], [71.4, 29296.0], [71.5, 29297.0], [71.6, 29297.0], [71.7, 29297.0], [71.8, 29315.0], [71.9, 29317.0], [72.0, 29321.0], [72.1, 29321.0], [72.2, 29325.0], [72.3, 29325.0], [72.4, 29326.0], [72.5, 29326.0], [72.6, 29330.0], [72.7, 29330.0], [72.8, 29338.0], [72.9, 29338.0], [73.0, 29340.0], [73.1, 29340.0], [73.2, 29343.0], [73.3, 29343.0], [73.4, 29346.0], [73.5, 29350.0], [73.6, 29350.0], [73.7, 29354.0], [73.8, 29368.0], [73.9, 29369.0], [74.0, 29369.0], [74.1, 29369.0], [74.2, 29370.0], [74.3, 29372.0], [74.4, 29372.0], [74.5, 29374.0], [74.6, 29374.0], [74.7, 29376.0], [74.8, 29376.0], [74.9, 29377.0], [75.0, 29385.0], [75.1, 29385.0], [75.2, 29390.0], [75.3, 29399.0], [75.4, 29401.0], [75.5, 29401.0], [75.6, 29403.0], [75.7, 29404.0], [75.8, 29404.0], [75.9, 29404.0], [76.0, 29405.0], [76.1, 29406.0], [76.2, 29408.0], [76.3, 29408.0], [76.4, 29411.0], [76.5, 29413.0], [76.6, 29424.0], [76.7, 29424.0], [76.8, 29437.0], [76.9, 29446.0], [77.0, 29446.0], [77.1, 29457.0], [77.2, 29460.0], [77.3, 29465.0], [77.4, 29465.0], [77.5, 29466.0], [77.6, 29467.0], [77.7, 29468.0], [77.8, 29468.0], [77.9, 29481.0], [78.0, 29489.0], [78.1, 29495.0], [78.2, 29495.0], [78.3, 29499.0], [78.4, 29501.0], [78.5, 29501.0], [78.6, 29502.0], [78.7, 29506.0], [78.8, 29509.0], [78.9, 29509.0], [79.0, 29512.0], [79.1, 29514.0], [79.2, 29517.0], [79.3, 29517.0], [79.4, 29519.0], [79.5, 29525.0], [79.6, 29535.0], [79.7, 29535.0], [79.8, 29536.0], [79.9, 29538.0], [80.0, 29542.0], [80.1, 29542.0], [80.2, 29542.0], [80.3, 29543.0], [80.4, 29543.0], [80.5, 29557.0], [80.6, 29558.0], [80.7, 29562.0], [80.8, 29562.0], [80.9, 29568.0], [81.0, 29568.0], [81.1, 29569.0], [81.2, 29569.0], [81.3, 29571.0], [81.4, 29574.0], [81.5, 29584.0], [81.6, 29584.0], [81.7, 29585.0], [81.8, 29586.0], [81.9, 29586.0], [82.0, 29589.0], [82.1, 29598.0], [82.2, 29599.0], [82.3, 29599.0], [82.4, 29603.0], [82.5, 29612.0], [82.6, 29615.0], [82.7, 29615.0], [82.8, 29616.0], [82.9, 29617.0], [83.0, 29618.0], [83.1, 29618.0], [83.2, 29621.0], [83.3, 29622.0], [83.4, 29622.0], [83.5, 29624.0], [83.6, 29636.0], [83.7, 29637.0], [83.8, 29637.0], [83.9, 29638.0], [84.0, 29641.0], [84.1, 29647.0], [84.2, 29647.0], [84.3, 29651.0], [84.4, 29661.0], [84.5, 29662.0], [84.6, 29662.0], [84.7, 29669.0], [84.8, 29679.0], [84.9, 29679.0], [85.0, 29679.0], [85.1, 29706.0], [85.2, 29707.0], [85.3, 29707.0], [85.4, 29713.0], [85.5, 29716.0], [85.6, 29717.0], [85.7, 29717.0], [85.8, 29726.0], [85.9, 29727.0], [86.0, 29730.0], [86.1, 29730.0], [86.2, 29731.0], [86.3, 29738.0], [86.4, 29742.0], [86.5, 29742.0], [86.6, 29747.0], [86.7, 29761.0], [86.8, 29761.0], [86.9, 29763.0], [87.0, 29765.0], [87.1, 29770.0], [87.2, 29770.0], [87.3, 29776.0], [87.4, 29789.0], [87.5, 29794.0], [87.6, 29794.0], [87.7, 29801.0], [87.8, 29804.0], [87.9, 29809.0], [88.0, 29809.0], [88.1, 29814.0], [88.2, 29826.0], [88.3, 29830.0], [88.4, 29830.0], [88.5, 29838.0], [88.6, 29843.0], [88.7, 29843.0], [88.8, 29875.0], [88.9, 29894.0], [89.0, 29907.0], [89.1, 29907.0], [89.2, 29914.0], [89.3, 29924.0], [89.4, 29934.0], [89.5, 29934.0], [89.6, 29935.0], [89.7, 29946.0], [89.8, 29952.0], [89.9, 29952.0], [90.0, 29958.0], [90.1, 29970.0], [90.2, 29970.0], [90.3, 29970.0], [90.4, 29985.0], [90.5, 29996.0], [90.6, 29996.0], [90.7, 30003.0], [90.8, 30013.0], [90.9, 30014.0], [91.0, 30014.0], [91.1, 30020.0], [91.2, 30033.0], [91.3, 30043.0], [91.4, 30043.0], [91.5, 30043.0], [91.6, 30057.0], [91.7, 30057.0], [91.8, 30085.0], [91.9, 30105.0], [92.0, 30106.0], [92.1, 30106.0], [92.2, 30140.0], [92.3, 30143.0], [92.4, 30149.0], [92.5, 30149.0], [92.6, 30178.0], [92.7, 30239.0], [92.8, 30327.0], [92.9, 30327.0], [93.0, 30351.0], [93.1, 30442.0], [93.2, 30709.0], [93.3, 30709.0], [93.4, 30824.0], [93.5, 30849.0], [93.6, 30849.0], [93.7, 30925.0], [93.8, 31026.0], [93.9, 31382.0], [94.0, 31382.0], [94.1, 31675.0], [94.2, 31880.0], [94.3, 31885.0], [94.4, 31885.0], [94.5, 31889.0], [94.6, 31933.0], [94.7, 32034.0], [94.8, 32034.0], [94.9, 32068.0], [95.0, 32261.0], [95.1, 32261.0], [95.2, 32719.0], [95.3, 32748.0], [95.4, 32898.0], [95.5, 32898.0], [95.6, 33009.0], [95.7, 33057.0], [95.8, 33067.0], [95.9, 33067.0], [96.0, 33109.0], [96.1, 33296.0], [96.2, 33894.0], [96.3, 33894.0], [96.4, 34304.0], [96.5, 34621.0], [96.6, 34814.0], [96.7, 34814.0], [96.8, 34972.0], [96.9, 35587.0], [97.0, 35587.0], [97.1, 36357.0], [97.2, 36577.0], [97.3, 36724.0], [97.4, 36724.0], [97.5, 37388.0], [97.6, 38048.0], [97.7, 38096.0], [97.8, 38096.0], [97.9, 38270.0], [98.0, 39270.0], [98.1, 39584.0], [98.2, 39584.0], [98.3, 40831.0], [98.4, 41480.0], [98.5, 41480.0], [98.6, 41571.0], [98.7, 41951.0], [98.8, 42255.0], [98.9, 42255.0], [99.0, 42948.0], [99.1, 43057.0], [99.2, 43378.0], [99.3, 43378.0], [99.4, 43747.0], [99.5, 43901.0], [99.6, 44160.0], [99.7, 44160.0], [99.8, 44318.0], [99.9, 44681.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 29.0, "series": [{"data": [[33100.0, 1.0], [34300.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [35500.0, 1.0], [36300.0, 1.0], [36700.0, 1.0], [37300.0, 1.0], [39500.0, 1.0], [42900.0, 1.0], [41900.0, 1.0], [41500.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [44300.0, 1.0], [44100.0, 1.0], [43900.0, 1.0], [3100.0, 1.0], [6400.0, 1.0], [8700.0, 1.0], [11600.0, 1.0], [14200.0, 1.0], [16800.0, 2.0], [17300.0, 2.0], [17000.0, 3.0], [17400.0, 1.0], [17100.0, 3.0], [17200.0, 5.0], [16900.0, 3.0], [18200.0, 3.0], [18400.0, 3.0], [17900.0, 7.0], [18000.0, 4.0], [18100.0, 3.0], [18300.0, 4.0], [17700.0, 4.0], [17800.0, 7.0], [17600.0, 5.0], [17500.0, 1.0], [19300.0, 7.0], [19000.0, 1.0], [19400.0, 1.0], [18900.0, 3.0], [18500.0, 3.0], [18600.0, 3.0], [18700.0, 1.0], [19200.0, 2.0], [19100.0, 1.0], [18800.0, 1.0], [20400.0, 3.0], [20300.0, 3.0], [20100.0, 3.0], [19900.0, 6.0], [19800.0, 2.0], [20200.0, 3.0], [19600.0, 2.0], [19500.0, 3.0], [19700.0, 1.0], [20000.0, 1.0], [20800.0, 5.0], [20500.0, 3.0], [21500.0, 2.0], [20700.0, 2.0], [21300.0, 1.0], [20600.0, 2.0], [21100.0, 1.0], [22000.0, 5.0], [21600.0, 4.0], [21800.0, 4.0], [22400.0, 3.0], [22500.0, 6.0], [21700.0, 2.0], [21900.0, 4.0], [22200.0, 1.0], [22100.0, 3.0], [22700.0, 6.0], [23200.0, 6.0], [22600.0, 5.0], [23400.0, 3.0], [23500.0, 3.0], [23000.0, 2.0], [22900.0, 5.0], [23100.0, 2.0], [23300.0, 2.0], [24400.0, 10.0], [24000.0, 7.0], [23600.0, 5.0], [24300.0, 3.0], [24200.0, 5.0], [24100.0, 9.0], [24500.0, 4.0], [23800.0, 4.0], [23700.0, 3.0], [23900.0, 6.0], [24800.0, 5.0], [25200.0, 5.0], [24600.0, 5.0], [24900.0, 9.0], [24700.0, 5.0], [25000.0, 7.0], [25300.0, 5.0], [25400.0, 3.0], [25500.0, 4.0], [25100.0, 2.0], [26400.0, 5.0], [26600.0, 3.0], [26100.0, 6.0], [25900.0, 2.0], [26300.0, 4.0], [26200.0, 1.0], [25700.0, 3.0], [25800.0, 4.0], [26500.0, 5.0], [26000.0, 3.0], [25600.0, 9.0], [26700.0, 4.0], [27100.0, 8.0], [27600.0, 6.0], [27500.0, 3.0], [26800.0, 7.0], [27400.0, 2.0], [27300.0, 5.0], [27200.0, 2.0], [27000.0, 6.0], [26900.0, 3.0], [27900.0, 5.0], [28100.0, 6.0], [28000.0, 2.0], [28300.0, 2.0], [28200.0, 2.0], [28600.0, 4.0], [27700.0, 4.0], [27800.0, 7.0], [28400.0, 7.0], [28500.0, 1.0], [28700.0, 9.0], [29100.0, 25.0], [29600.0, 20.0], [29500.0, 29.0], [29300.0, 27.0], [29200.0, 25.0], [29400.0, 22.0], [29000.0, 14.0], [28900.0, 16.0], [28800.0, 4.0], [29800.0, 10.0], [29700.0, 19.0], [30300.0, 2.0], [29900.0, 12.0], [30000.0, 9.0], [30100.0, 6.0], [30400.0, 1.0], [30700.0, 1.0], [30200.0, 1.0], [30800.0, 2.0], [30900.0, 1.0], [31000.0, 1.0], [31300.0, 1.0], [31600.0, 1.0], [32700.0, 2.0], [31800.0, 3.0], [32000.0, 2.0], [31900.0, 1.0], [32200.0, 1.0], [33800.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [33000.0, 3.0], [34800.0, 1.0], [34600.0, 1.0], [38000.0, 2.0], [38200.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [43000.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.60266096E12, "maxY": 10.0, "series": [{"data": [[1.60266102E12, 10.0], [1.60266132E12, 10.0], [1.60266162E12, 10.0], [1.60266192E12, 10.0], [1.60266174E12, 10.0], [1.60266204E12, 10.0], [1.60266234E12, 10.0], [1.60266264E12, 10.0], [1.6026615E12, 10.0], [1.6026618E12, 10.0], [1.6026621E12, 10.0], [1.6026624E12, 10.0], [1.60266222E12, 10.0], [1.60266252E12, 10.0], [1.6026612E12, 10.0], [1.60266282E12, 10.0], [1.60266198E12, 10.0], [1.60266228E12, 10.0], [1.60266288E12, 8.333333333333334], [1.60266096E12, 10.0], [1.60266258E12, 10.0], [1.60266108E12, 10.0], [1.6026627E12, 10.0], [1.60266138E12, 10.0], [1.60266168E12, 10.0], [1.60266276E12, 10.0], [1.60266246E12, 10.0], [1.60266114E12, 10.0], [1.60266144E12, 10.0], [1.60266126E12, 10.0], [1.60266156E12, 10.0], [1.60266186E12, 10.0], [1.60266216E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60266288E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17088.0, "minX": 1.0, "maxY": 26326.27134986223, "series": [{"data": [[8.0, 17206.0], [4.0, 17105.0], [2.0, 17204.0], [1.0, 17678.0], [9.0, 17203.0], [10.0, 26326.27134986223], [5.0, 17088.0], [6.0, 17111.0], [3.0, 17091.0], [7.0, 17217.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26214.66122448977]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 73.16666666666667, "minX": 1.60266096E12, "maxY": 229681.41666666666, "series": [{"data": [[1.60266102E12, 132499.91666666666], [1.60266132E12, 46084.88333333333], [1.60266162E12, 41932.26666666667], [1.60266192E12, 229681.41666666666], [1.60266174E12, 70899.7], [1.60266204E12, 87089.3], [1.60266234E12, 51649.01666666667], [1.60266264E12, 32137.866666666665], [1.6026615E12, 54865.2], [1.6026618E12, 149057.1], [1.6026621E12, 69402.65], [1.6026624E12, 51312.45], [1.60266222E12, 40551.4], [1.60266252E12, 46023.9], [1.6026612E12, 79695.51666666666], [1.60266282E12, 89465.18333333333], [1.60266198E12, 57731.1], [1.60266228E12, 49114.333333333336], [1.60266288E12, 37834.6], [1.60266096E12, 129251.41666666667], [1.60266258E12, 44671.183333333334], [1.60266108E12, 110869.26666666666], [1.6026627E12, 31784.366666666665], [1.60266138E12, 47460.166666666664], [1.60266168E12, 32257.066666666666], [1.60266276E12, 125893.16666666667], [1.60266246E12, 48725.05], [1.60266114E12, 82599.41666666667], [1.60266144E12, 48748.95], [1.60266126E12, 46714.03333333333], [1.60266156E12, 43644.316666666666], [1.60266186E12, 71003.38333333333], [1.60266216E12, 42824.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60266102E12, 190.1], [1.60266132E12, 146.11666666666667], [1.60266162E12, 146.01666666666668], [1.60266192E12, 175.96666666666667], [1.60266174E12, 217.3], [1.60266204E12, 164.51666666666668], [1.60266234E12, 153.45], [1.60266264E12, 167.76666666666668], [1.6026615E12, 153.68333333333334], [1.6026618E12, 164.86666666666667], [1.6026621E12, 168.03333333333333], [1.6026624E12, 154.05], [1.60266222E12, 146.06666666666666], [1.60266252E12, 146.11666666666667], [1.6026612E12, 175.65], [1.60266282E12, 139.48333333333332], [1.60266198E12, 223.48333333333332], [1.60266228E12, 146.15], [1.60266288E12, 184.21666666666667], [1.60266096E12, 73.16666666666667], [1.60266258E12, 153.28333333333333], [1.60266108E12, 188.46666666666667], [1.6026627E12, 189.76666666666668], [1.60266138E12, 153.41666666666666], [1.60266168E12, 167.93333333333334], [1.60266276E12, 195.43333333333334], [1.60266246E12, 153.75], [1.60266114E12, 111.9], [1.60266144E12, 146.13333333333333], [1.60266126E12, 161.65], [1.60266156E12, 146.06666666666666], [1.60266186E12, 195.21666666666667], [1.60266216E12, 140.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60266288E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15300.5, "minX": 1.60266096E12, "maxY": 38681.333333333336, "series": [{"data": [[1.60266102E12, 24238.346153846156], [1.60266132E12, 29499.300000000007], [1.60266162E12, 29696.3], [1.60266192E12, 24100.791666666668], [1.60266174E12, 21283.066666666673], [1.60266204E12, 25513.86363636364], [1.60266234E12, 29219.619047619042], [1.60266264E12, 26112.304347826088], [1.6026615E12, 29181.19047619048], [1.6026618E12, 21418.347826086956], [1.6026621E12, 25827.565217391304], [1.6026624E12, 28447.0], [1.60266222E12, 33492.39999999999], [1.60266252E12, 29622.0], [1.6026612E12, 27111.416666666668], [1.60266282E12, 28841.631578947367], [1.60266198E12, 19783.656249999996], [1.60266228E12, 29430.5], [1.60266288E12, 21254.111111111117], [1.60266096E12, 15300.5], [1.60266258E12, 29084.095238095237], [1.60266108E12, 20851.230769230773], [1.6026627E12, 23467.076923076922], [1.60266138E12, 29499.0], [1.60266168E12, 27011.521739130436], [1.60266276E12, 22353.481481481478], [1.60266246E12, 28650.333333333336], [1.60266114E12, 38681.333333333336], [1.60266144E12, 29652.000000000004], [1.60266126E12, 25749.999999999996], [1.60266156E12, 29266.4], [1.60266186E12, 24930.464285714294], [1.60266216E12, 27514.421052631576]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60266288E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15294.800000000001, "minX": 1.60266096E12, "maxY": 38678.4, "series": [{"data": [[1.60266102E12, 24236.192307692305], [1.60266132E12, 29498.2], [1.60266162E12, 29695.2], [1.60266192E12, 24096.375], [1.60266174E12, 21281.300000000003], [1.60266204E12, 25512.18181818182], [1.60266234E12, 29218.285714285714], [1.60266264E12, 26111.826086956524], [1.6026615E12, 29179.90476190476], [1.6026618E12, 21414.17391304348], [1.6026621E12, 25826.217391304344], [1.6026624E12, 28445.761904761905], [1.60266222E12, 33491.5], [1.60266252E12, 29620.699999999997], [1.6026612E12, 27109.916666666668], [1.60266282E12, 28838.842105263157], [1.60266198E12, 19782.1875], [1.60266228E12, 29429.35], [1.60266288E12, 21252.222222222223], [1.60266096E12, 15294.800000000001], [1.60266258E12, 29083.0], [1.60266108E12, 20848.846153846163], [1.6026627E12, 23466.653846153848], [1.60266138E12, 29497.85714285714], [1.60266168E12, 27011.0], [1.60266276E12, 22350.4074074074], [1.60266246E12, 28648.95238095238], [1.60266114E12, 38678.4], [1.60266144E12, 29650.7], [1.60266126E12, 25748.909090909092], [1.60266156E12, 29265.35], [1.60266186E12, 24928.21428571429], [1.60266216E12, 27513.368421052633]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60266288E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60266096E12, "maxY": 7.5, "series": [{"data": [[1.60266102E12, 0.34615384615384615], [1.60266132E12, 0.1], [1.60266162E12, 0.55], [1.60266192E12, 0.45833333333333337], [1.60266174E12, 0.43333333333333335], [1.60266204E12, 0.36363636363636365], [1.60266234E12, 0.6666666666666667], [1.60266264E12, 0.5217391304347826], [1.6026615E12, 0.23809523809523808], [1.6026618E12, 0.3478260869565218], [1.6026621E12, 0.1739130434782609], [1.6026624E12, 0.47619047619047616], [1.60266222E12, 0.6000000000000001], [1.60266252E12, 0.45], [1.6026612E12, 0.5416666666666667], [1.60266282E12, 0.5263157894736842], [1.60266198E12, 0.375], [1.60266228E12, 0.15], [1.60266288E12, 0.37037037037037035], [1.60266096E12, 7.5], [1.60266258E12, 0.4761904761904763], [1.60266108E12, 0.3846153846153846], [1.6026627E12, 0.2692307692307693], [1.60266138E12, 0.5238095238095238], [1.60266168E12, 0.391304347826087], [1.60266276E12, 0.3333333333333333], [1.60266246E12, 0.2857142857142857], [1.60266114E12, 1.0], [1.60266144E12, 0.6000000000000001], [1.60266126E12, 0.6818181818181819], [1.60266156E12, 0.35000000000000003], [1.60266186E12, 0.3928571428571429], [1.60266216E12, 0.631578947368421]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60266288E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3189.0, "minX": 1.60266096E12, "maxY": 44681.0, "series": [{"data": [[1.60266102E12, 27982.0], [1.60266132E12, 30149.0], [1.60266162E12, 30178.0], [1.60266192E12, 29167.0], [1.60266174E12, 26307.0], [1.60266204E12, 33057.0], [1.60266234E12, 29727.0], [1.60266264E12, 28791.0], [1.6026615E12, 29747.0], [1.6026618E12, 27883.0], [1.6026621E12, 29255.0], [1.6026624E12, 29135.0], [1.60266222E12, 43901.0], [1.60266252E12, 29809.0], [1.6026612E12, 33894.0], [1.60266282E12, 36724.0], [1.60266198E12, 27001.0], [1.60266228E12, 29770.0], [1.60266288E12, 38048.0], [1.60266096E12, 26697.0], [1.60266258E12, 29517.0], [1.60266108E12, 24920.0], [1.6026627E12, 26524.0], [1.60266138E12, 29765.0], [1.60266168E12, 29102.0], [1.60266276E12, 27869.0], [1.60266246E12, 30057.0], [1.60266114E12, 44681.0], [1.60266144E12, 29924.0], [1.60266126E12, 30351.0], [1.60266156E12, 29446.0], [1.60266186E12, 32068.0], [1.60266216E12, 40831.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60266102E12, 19935.0], [1.60266132E12, 25923.0], [1.60266162E12, 28982.0], [1.60266192E12, 19273.0], [1.60266174E12, 17038.0], [1.60266204E12, 17839.0], [1.60266234E12, 28957.0], [1.60266264E12, 23760.0], [1.6026615E12, 28634.0], [1.6026618E12, 18181.0], [1.6026621E12, 23932.0], [1.6026624E12, 27057.0], [1.60266222E12, 26166.0], [1.60266252E12, 29424.0], [1.6026612E12, 24115.0], [1.60266282E12, 22120.0], [1.60266198E12, 17465.0], [1.60266228E12, 29011.0], [1.60266288E12, 16861.0], [1.60266096E12, 3189.0], [1.60266258E12, 28483.0], [1.60266108E12, 17973.0], [1.6026627E12, 20888.0], [1.60266138E12, 29181.0], [1.60266168E12, 24992.0], [1.60266276E12, 18948.0], [1.60266246E12, 26824.0], [1.60266114E12, 26193.0], [1.60266144E12, 29343.0], [1.60266126E12, 22624.0], [1.60266156E12, 28723.0], [1.60266186E12, 17902.0], [1.60266216E12, 21947.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60266102E12, 19935.0], [1.60266132E12, 25923.0], [1.60266162E12, 28982.0], [1.60266192E12, 19273.0], [1.60266174E12, 17038.0], [1.60266204E12, 17839.0], [1.60266234E12, 28957.0], [1.60266264E12, 23760.0], [1.6026615E12, 28634.0], [1.6026618E12, 18181.0], [1.6026621E12, 23932.0], [1.6026624E12, 27057.0], [1.60266222E12, 26166.0], [1.60266252E12, 29424.0], [1.6026612E12, 24115.0], [1.60266282E12, 22120.0], [1.60266198E12, 17465.0], [1.60266228E12, 29011.0], [1.60266288E12, 16861.0], [1.60266096E12, 3189.0], [1.60266258E12, 28483.0], [1.60266108E12, 17973.0], [1.6026627E12, 20888.0], [1.60266138E12, 29181.0], [1.60266168E12, 24992.0], [1.60266276E12, 18948.0], [1.60266246E12, 26824.0], [1.60266114E12, 26193.0], [1.60266144E12, 29343.0], [1.60266126E12, 22624.0], [1.60266156E12, 28723.0], [1.60266186E12, 17902.0], [1.60266216E12, 21947.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60266102E12, 19935.0], [1.60266132E12, 25923.0], [1.60266162E12, 28982.0], [1.60266192E12, 19273.0], [1.60266174E12, 17038.0], [1.60266204E12, 17839.0], [1.60266234E12, 28957.0], [1.60266264E12, 23760.0], [1.6026615E12, 28634.0], [1.6026618E12, 18181.0], [1.6026621E12, 23932.0], [1.6026624E12, 27057.0], [1.60266222E12, 26166.0], [1.60266252E12, 29424.0], [1.6026612E12, 24115.0], [1.60266282E12, 22120.0], [1.60266198E12, 17465.0], [1.60266228E12, 29011.0], [1.60266288E12, 16861.0], [1.60266096E12, 3189.0], [1.60266258E12, 28483.0], [1.60266108E12, 17973.0], [1.6026627E12, 20888.0], [1.60266138E12, 29181.0], [1.60266168E12, 24992.0], [1.60266276E12, 18948.0], [1.60266246E12, 26824.0], [1.60266114E12, 26193.0], [1.60266144E12, 29343.0], [1.60266126E12, 22624.0], [1.60266156E12, 28723.0], [1.60266186E12, 17902.0], [1.60266216E12, 21947.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60266102E12, 19935.0], [1.60266132E12, 25923.0], [1.60266162E12, 28982.0], [1.60266192E12, 19273.0], [1.60266174E12, 17038.0], [1.60266204E12, 17839.0], [1.60266234E12, 28957.0], [1.60266264E12, 23760.0], [1.6026615E12, 28634.0], [1.6026618E12, 18181.0], [1.6026621E12, 23932.0], [1.6026624E12, 27057.0], [1.60266222E12, 26166.0], [1.60266252E12, 29424.0], [1.6026612E12, 24115.0], [1.60266282E12, 22120.0], [1.60266198E12, 17465.0], [1.60266228E12, 29011.0], [1.60266288E12, 16861.0], [1.60266096E12, 3189.0], [1.60266258E12, 28483.0], [1.60266108E12, 17973.0], [1.6026627E12, 20888.0], [1.60266138E12, 29181.0], [1.60266168E12, 24992.0], [1.60266276E12, 18948.0], [1.60266246E12, 26824.0], [1.60266114E12, 26193.0], [1.60266144E12, 29343.0], [1.60266126E12, 22624.0], [1.60266156E12, 28723.0], [1.60266186E12, 17902.0], [1.60266216E12, 21947.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60266102E12, 25610.5], [1.60266132E12, 29961.0], [1.60266162E12, 29753.0], [1.60266192E12, 24257.0], [1.60266174E12, 21426.0], [1.60266204E12, 24426.5], [1.60266234E12, 29211.0], [1.60266264E12, 25802.0], [1.6026615E12, 29209.0], [1.6026618E12, 22506.0], [1.6026621E12, 24676.0], [1.6026624E12, 28952.0], [1.60266222E12, 30816.5], [1.60266252E12, 29602.0], [1.6026612E12, 25088.5], [1.60266282E12, 28024.0], [1.60266198E12, 19266.5], [1.60266228E12, 29432.0], [1.60266288E12, 17272.0], [1.60266096E12, 15559.5], [1.60266258E12, 29215.0], [1.60266108E12, 19789.5], [1.6026627E12, 23588.0], [1.60266138E12, 29535.0], [1.60266168E12, 26862.0], [1.60266276E12, 21825.0], [1.60266246E12, 28484.0], [1.60266114E12, 41480.0], [1.60266144E12, 29654.0], [1.60266126E12, 25763.5], [1.60266156E12, 29278.0], [1.60266186E12, 25414.5], [1.60266216E12, 24760.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60266288E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27087.0, "minX": 1.0, "maxY": 27087.0, "series": [{"data": [[1.0, 27087.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27086.0, "minX": 1.0, "maxY": 27086.0, "series": [{"data": [[1.0, 27086.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60266096E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60266102E12, 0.43333333333333335], [1.60266132E12, 0.3333333333333333], [1.60266162E12, 0.3333333333333333], [1.60266192E12, 0.4], [1.60266174E12, 0.5], [1.60266204E12, 0.36666666666666664], [1.60266234E12, 0.35], [1.60266264E12, 0.38333333333333336], [1.6026615E12, 0.35], [1.6026618E12, 0.38333333333333336], [1.6026621E12, 0.38333333333333336], [1.6026624E12, 0.35], [1.60266222E12, 0.3333333333333333], [1.60266252E12, 0.3333333333333333], [1.6026612E12, 0.4], [1.60266282E12, 0.31666666666666665], [1.60266198E12, 0.5333333333333333], [1.60266228E12, 0.3333333333333333], [1.60266288E12, 0.2833333333333333], [1.60266096E12, 0.3333333333333333], [1.60266258E12, 0.35], [1.60266108E12, 0.43333333333333335], [1.6026627E12, 0.43333333333333335], [1.60266138E12, 0.35], [1.60266168E12, 0.38333333333333336], [1.60266276E12, 0.45], [1.60266246E12, 0.35], [1.60266114E12, 0.25], [1.60266144E12, 0.3333333333333333], [1.60266126E12, 0.36666666666666664], [1.60266156E12, 0.3333333333333333], [1.60266186E12, 0.4666666666666667], [1.60266216E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60266288E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60266096E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60266102E12, 0.43333333333333335], [1.60266132E12, 0.3333333333333333], [1.60266162E12, 0.3333333333333333], [1.60266192E12, 0.4], [1.60266174E12, 0.5], [1.60266204E12, 0.36666666666666664], [1.60266234E12, 0.35], [1.60266264E12, 0.38333333333333336], [1.6026615E12, 0.35], [1.6026618E12, 0.38333333333333336], [1.6026621E12, 0.38333333333333336], [1.6026624E12, 0.35], [1.60266222E12, 0.3333333333333333], [1.60266252E12, 0.3333333333333333], [1.6026612E12, 0.4], [1.60266282E12, 0.31666666666666665], [1.60266198E12, 0.5333333333333333], [1.60266228E12, 0.3333333333333333], [1.60266288E12, 0.45], [1.60266096E12, 0.16666666666666666], [1.60266258E12, 0.35], [1.60266108E12, 0.43333333333333335], [1.6026627E12, 0.43333333333333335], [1.60266138E12, 0.35], [1.60266168E12, 0.38333333333333336], [1.60266276E12, 0.45], [1.60266246E12, 0.35], [1.60266114E12, 0.25], [1.60266144E12, 0.3333333333333333], [1.60266126E12, 0.36666666666666664], [1.60266156E12, 0.3333333333333333], [1.60266186E12, 0.4666666666666667], [1.60266216E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60266288E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60266096E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60266102E12, 0.43333333333333335], [1.60266132E12, 0.3333333333333333], [1.60266162E12, 0.3333333333333333], [1.60266192E12, 0.4], [1.60266174E12, 0.5], [1.60266204E12, 0.36666666666666664], [1.60266234E12, 0.35], [1.60266264E12, 0.38333333333333336], [1.6026615E12, 0.35], [1.6026618E12, 0.38333333333333336], [1.6026621E12, 0.38333333333333336], [1.6026624E12, 0.35], [1.60266222E12, 0.3333333333333333], [1.60266252E12, 0.3333333333333333], [1.6026612E12, 0.4], [1.60266282E12, 0.31666666666666665], [1.60266198E12, 0.5333333333333333], [1.60266228E12, 0.3333333333333333], [1.60266288E12, 0.45], [1.60266096E12, 0.16666666666666666], [1.60266258E12, 0.35], [1.60266108E12, 0.43333333333333335], [1.6026627E12, 0.43333333333333335], [1.60266138E12, 0.35], [1.60266168E12, 0.38333333333333336], [1.60266276E12, 0.45], [1.60266246E12, 0.35], [1.60266114E12, 0.25], [1.60266144E12, 0.3333333333333333], [1.60266126E12, 0.36666666666666664], [1.60266156E12, 0.3333333333333333], [1.60266186E12, 0.4666666666666667], [1.60266216E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60266288E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60266096E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60266102E12, 0.43333333333333335], [1.60266132E12, 0.3333333333333333], [1.60266162E12, 0.3333333333333333], [1.60266192E12, 0.4], [1.60266174E12, 0.5], [1.60266204E12, 0.36666666666666664], [1.60266234E12, 0.35], [1.60266264E12, 0.38333333333333336], [1.6026615E12, 0.35], [1.6026618E12, 0.38333333333333336], [1.6026621E12, 0.38333333333333336], [1.6026624E12, 0.35], [1.60266222E12, 0.3333333333333333], [1.60266252E12, 0.3333333333333333], [1.6026612E12, 0.4], [1.60266282E12, 0.31666666666666665], [1.60266198E12, 0.5333333333333333], [1.60266228E12, 0.3333333333333333], [1.60266288E12, 0.45], [1.60266096E12, 0.16666666666666666], [1.60266258E12, 0.35], [1.60266108E12, 0.43333333333333335], [1.6026627E12, 0.43333333333333335], [1.60266138E12, 0.35], [1.60266168E12, 0.38333333333333336], [1.60266276E12, 0.45], [1.60266246E12, 0.35], [1.60266114E12, 0.25], [1.60266144E12, 0.3333333333333333], [1.60266126E12, 0.36666666666666664], [1.60266156E12, 0.3333333333333333], [1.60266186E12, 0.4666666666666667], [1.60266216E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60266288E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

