/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3082.0, "minX": 0.0, "maxY": 44187.0, "series": [{"data": [[0.0, 3082.0], [0.1, 3082.0], [0.2, 6109.0], [0.3, 8355.0], [0.4, 8355.0], [0.5, 11554.0], [0.6, 14204.0], [0.7, 16998.0], [0.8, 16998.0], [0.9, 17143.0], [1.0, 17146.0], [1.1, 17204.0], [1.2, 17204.0], [1.3, 17253.0], [1.4, 17342.0], [1.5, 17347.0], [1.6, 17347.0], [1.7, 17348.0], [1.8, 17363.0], [1.9, 17363.0], [2.0, 17379.0], [2.1, 17384.0], [2.2, 17396.0], [2.3, 17396.0], [2.4, 17416.0], [2.5, 17440.0], [2.6, 17635.0], [2.7, 17635.0], [2.8, 17661.0], [2.9, 17678.0], [3.0, 17684.0], [3.1, 17684.0], [3.2, 17693.0], [3.3, 17728.0], [3.4, 17728.0], [3.5, 17755.0], [3.6, 17763.0], [3.7, 17771.0], [3.8, 17771.0], [3.9, 17783.0], [4.0, 17786.0], [4.1, 17794.0], [4.2, 17794.0], [4.3, 17820.0], [4.4, 17905.0], [4.5, 17908.0], [4.6, 17908.0], [4.7, 17936.0], [4.8, 17969.0], [4.9, 17995.0], [5.0, 17995.0], [5.1, 17998.0], [5.2, 18001.0], [5.3, 18001.0], [5.4, 18011.0], [5.5, 18031.0], [5.6, 18057.0], [5.7, 18057.0], [5.8, 18060.0], [5.9, 18065.0], [6.0, 18074.0], [6.1, 18074.0], [6.2, 18075.0], [6.3, 18076.0], [6.4, 18084.0], [6.5, 18084.0], [6.6, 18092.0], [6.7, 18107.0], [6.8, 18107.0], [6.9, 18199.0], [7.0, 18212.0], [7.1, 18229.0], [7.2, 18229.0], [7.3, 18242.0], [7.4, 18288.0], [7.5, 18291.0], [7.6, 18291.0], [7.7, 18332.0], [7.8, 18332.0], [7.9, 18351.0], [8.0, 18351.0], [8.1, 18399.0], [8.2, 18439.0], [8.3, 18462.0], [8.4, 18462.0], [8.5, 18492.0], [8.6, 18566.0], [8.7, 18566.0], [8.8, 18596.0], [8.9, 18618.0], [9.0, 18698.0], [9.1, 18698.0], [9.2, 18758.0], [9.3, 18801.0], [9.4, 18802.0], [9.5, 18802.0], [9.6, 18805.0], [9.7, 18845.0], [9.8, 18855.0], [9.9, 18855.0], [10.0, 18954.0], [10.1, 19016.0], [10.2, 19016.0], [10.3, 19079.0], [10.4, 19086.0], [10.5, 19127.0], [10.6, 19127.0], [10.7, 19127.0], [10.8, 19178.0], [10.9, 19235.0], [11.0, 19235.0], [11.1, 19267.0], [11.2, 19294.0], [11.3, 19378.0], [11.4, 19378.0], [11.5, 19512.0], [11.6, 19614.0], [11.7, 19614.0], [11.8, 19622.0], [11.9, 19644.0], [12.0, 19675.0], [12.1, 19675.0], [12.2, 19703.0], [12.3, 19734.0], [12.4, 19745.0], [12.5, 19745.0], [12.6, 19812.0], [12.7, 19819.0], [12.8, 19842.0], [12.9, 19842.0], [13.0, 19853.0], [13.1, 19874.0], [13.2, 19886.0], [13.3, 19886.0], [13.4, 19897.0], [13.5, 19902.0], [13.6, 19902.0], [13.7, 19926.0], [13.8, 19957.0], [13.9, 19968.0], [14.0, 19968.0], [14.1, 19991.0], [14.2, 20013.0], [14.3, 20021.0], [14.4, 20021.0], [14.5, 20045.0], [14.6, 20093.0], [14.7, 20171.0], [14.8, 20171.0], [14.9, 20232.0], [15.0, 20454.0], [15.1, 20454.0], [15.2, 20456.0], [15.3, 20463.0], [15.4, 20469.0], [15.5, 20469.0], [15.6, 20496.0], [15.7, 20499.0], [15.8, 20555.0], [15.9, 20555.0], [16.0, 20589.0], [16.1, 20763.0], [16.2, 20786.0], [16.3, 20786.0], [16.4, 20833.0], [16.5, 20886.0], [16.6, 20890.0], [16.7, 20890.0], [16.8, 20917.0], [16.9, 20982.0], [17.0, 20982.0], [17.1, 21092.0], [17.2, 21150.0], [17.3, 21156.0], [17.4, 21156.0], [17.5, 21201.0], [17.6, 21214.0], [17.7, 21250.0], [17.8, 21250.0], [17.9, 21290.0], [18.0, 21418.0], [18.1, 21419.0], [18.2, 21419.0], [18.3, 21460.0], [18.4, 21465.0], [18.5, 21465.0], [18.6, 21468.0], [18.7, 21570.0], [18.8, 21592.0], [18.9, 21592.0], [19.0, 21595.0], [19.1, 21642.0], [19.2, 21694.0], [19.3, 21694.0], [19.4, 21794.0], [19.5, 21862.0], [19.6, 21903.0], [19.7, 21903.0], [19.8, 21940.0], [19.9, 22013.0], [20.0, 22029.0], [20.1, 22029.0], [20.2, 22036.0], [20.3, 22086.0], [20.4, 22086.0], [20.5, 22134.0], [20.6, 22148.0], [20.7, 22198.0], [20.8, 22198.0], [20.9, 22293.0], [21.0, 22333.0], [21.1, 22375.0], [21.2, 22375.0], [21.3, 22398.0], [21.4, 22410.0], [21.5, 22412.0], [21.6, 22412.0], [21.7, 22413.0], [21.8, 22418.0], [21.9, 22418.0], [22.0, 22421.0], [22.1, 22425.0], [22.2, 22458.0], [22.3, 22458.0], [22.4, 22546.0], [22.5, 22554.0], [22.6, 22557.0], [22.7, 22557.0], [22.8, 22645.0], [22.9, 22710.0], [23.0, 22718.0], [23.1, 22718.0], [23.2, 22749.0], [23.3, 22796.0], [23.4, 22796.0], [23.5, 22842.0], [23.6, 22848.0], [23.7, 22860.0], [23.8, 22860.0], [23.9, 22945.0], [24.0, 22957.0], [24.1, 23006.0], [24.2, 23006.0], [24.3, 23017.0], [24.4, 23053.0], [24.5, 23074.0], [24.6, 23074.0], [24.7, 23082.0], [24.8, 23099.0], [24.9, 23107.0], [25.0, 23107.0], [25.1, 23111.0], [25.2, 23134.0], [25.3, 23134.0], [25.4, 23141.0], [25.5, 23148.0], [25.6, 23192.0], [25.7, 23192.0], [25.8, 23209.0], [25.9, 23212.0], [26.0, 23230.0], [26.1, 23230.0], [26.2, 23243.0], [26.3, 23271.0], [26.4, 23276.0], [26.5, 23276.0], [26.6, 23285.0], [26.7, 23306.0], [26.8, 23306.0], [26.9, 23333.0], [27.0, 23367.0], [27.1, 23406.0], [27.2, 23406.0], [27.3, 23478.0], [27.4, 23509.0], [27.5, 23518.0], [27.6, 23518.0], [27.7, 23532.0], [27.8, 23555.0], [27.9, 23557.0], [28.0, 23557.0], [28.1, 23569.0], [28.2, 23590.0], [28.3, 23597.0], [28.4, 23597.0], [28.5, 23617.0], [28.6, 23657.0], [28.7, 23657.0], [28.8, 23706.0], [28.9, 23719.0], [29.0, 23729.0], [29.1, 23729.0], [29.2, 23763.0], [29.3, 23770.0], [29.4, 23797.0], [29.5, 23797.0], [29.6, 23809.0], [29.7, 23825.0], [29.8, 23831.0], [29.9, 23831.0], [30.0, 23833.0], [30.1, 23841.0], [30.2, 23841.0], [30.3, 23841.0], [30.4, 23846.0], [30.5, 23862.0], [30.6, 23862.0], [30.7, 23897.0], [30.8, 23909.0], [30.9, 23918.0], [31.0, 23918.0], [31.1, 23924.0], [31.2, 23932.0], [31.3, 23952.0], [31.4, 23952.0], [31.5, 23967.0], [31.6, 24017.0], [31.7, 24017.0], [31.8, 24041.0], [31.9, 24044.0], [32.0, 24057.0], [32.1, 24057.0], [32.2, 24062.0], [32.3, 24077.0], [32.4, 24093.0], [32.5, 24093.0], [32.6, 24095.0], [32.7, 24100.0], [32.8, 24110.0], [32.9, 24110.0], [33.0, 24118.0], [33.1, 24157.0], [33.2, 24225.0], [33.3, 24225.0], [33.4, 24249.0], [33.5, 24273.0], [33.6, 24273.0], [33.7, 24278.0], [33.8, 24315.0], [33.9, 24348.0], [34.0, 24348.0], [34.1, 24386.0], [34.2, 24405.0], [34.3, 24419.0], [34.4, 24419.0], [34.5, 24476.0], [34.6, 24489.0], [34.7, 24517.0], [34.8, 24517.0], [34.9, 24519.0], [35.0, 24551.0], [35.1, 24551.0], [35.2, 24567.0], [35.3, 24570.0], [35.4, 24577.0], [35.5, 24577.0], [35.6, 24643.0], [35.7, 24678.0], [35.8, 24686.0], [35.9, 24686.0], [36.0, 24704.0], [36.1, 24709.0], [36.2, 24763.0], [36.3, 24763.0], [36.4, 24767.0], [36.5, 24780.0], [36.6, 24838.0], [36.7, 24838.0], [36.8, 24851.0], [36.9, 24884.0], [37.0, 24884.0], [37.1, 24892.0], [37.2, 24908.0], [37.3, 24934.0], [37.4, 24934.0], [37.5, 24947.0], [37.6, 24989.0], [37.7, 25035.0], [37.8, 25035.0], [37.9, 25037.0], [38.0, 25072.0], [38.1, 25118.0], [38.2, 25118.0], [38.3, 25120.0], [38.4, 25138.0], [38.5, 25138.0], [38.6, 25161.0], [38.7, 25167.0], [38.8, 25197.0], [38.9, 25197.0], [39.0, 25259.0], [39.1, 25313.0], [39.2, 25359.0], [39.3, 25359.0], [39.4, 25369.0], [39.5, 25380.0], [39.6, 25382.0], [39.7, 25382.0], [39.8, 25392.0], [39.9, 25415.0], [40.0, 25480.0], [40.1, 25480.0], [40.2, 25482.0], [40.3, 25503.0], [40.4, 25503.0], [40.5, 25516.0], [40.6, 25562.0], [40.7, 25576.0], [40.8, 25576.0], [40.9, 25605.0], [41.0, 25658.0], [41.1, 25677.0], [41.2, 25677.0], [41.3, 25728.0], [41.4, 25732.0], [41.5, 25734.0], [41.6, 25734.0], [41.7, 25766.0], [41.8, 25768.0], [41.9, 25768.0], [42.0, 25772.0], [42.1, 25806.0], [42.2, 25824.0], [42.3, 25824.0], [42.4, 25824.0], [42.5, 25825.0], [42.6, 25843.0], [42.7, 25843.0], [42.8, 25852.0], [42.9, 25862.0], [43.0, 25862.0], [43.1, 25862.0], [43.2, 25868.0], [43.3, 25902.0], [43.4, 25902.0], [43.5, 25902.0], [43.6, 25936.0], [43.7, 25966.0], [43.8, 25966.0], [43.9, 25976.0], [44.0, 26007.0], [44.1, 26037.0], [44.2, 26037.0], [44.3, 26037.0], [44.4, 26041.0], [44.5, 26105.0], [44.6, 26105.0], [44.7, 26108.0], [44.8, 26116.0], [44.9, 26124.0], [45.0, 26124.0], [45.1, 26131.0], [45.2, 26170.0], [45.3, 26170.0], [45.4, 26204.0], [45.5, 26216.0], [45.6, 26224.0], [45.7, 26224.0], [45.8, 26234.0], [45.9, 26234.0], [46.0, 26250.0], [46.1, 26250.0], [46.2, 26256.0], [46.3, 26291.0], [46.4, 26310.0], [46.5, 26310.0], [46.6, 26323.0], [46.7, 26358.0], [46.8, 26358.0], [46.9, 26370.0], [47.0, 26451.0], [47.1, 26577.0], [47.2, 26577.0], [47.3, 26597.0], [47.4, 26629.0], [47.5, 26659.0], [47.6, 26659.0], [47.7, 26722.0], [47.8, 26750.0], [47.9, 26825.0], [48.0, 26825.0], [48.1, 26861.0], [48.2, 26862.0], [48.3, 26873.0], [48.4, 26873.0], [48.5, 26881.0], [48.6, 26921.0], [48.7, 26921.0], [48.8, 26923.0], [48.9, 26948.0], [49.0, 26969.0], [49.1, 26969.0], [49.2, 26996.0], [49.3, 27003.0], [49.4, 27014.0], [49.5, 27014.0], [49.6, 27022.0], [49.7, 27049.0], [49.8, 27062.0], [49.9, 27062.0], [50.0, 27063.0], [50.1, 27064.0], [50.2, 27064.0], [50.3, 27103.0], [50.4, 27107.0], [50.5, 27116.0], [50.6, 27116.0], [50.7, 27142.0], [50.8, 27146.0], [50.9, 27150.0], [51.0, 27150.0], [51.1, 27186.0], [51.2, 27245.0], [51.3, 27291.0], [51.4, 27291.0], [51.5, 27291.0], [51.6, 27300.0], [51.7, 27300.0], [51.8, 27310.0], [51.9, 27313.0], [52.0, 27378.0], [52.1, 27378.0], [52.2, 27383.0], [52.3, 27407.0], [52.4, 27442.0], [52.5, 27442.0], [52.6, 27447.0], [52.7, 27476.0], [52.8, 27504.0], [52.9, 27504.0], [53.0, 27525.0], [53.1, 27620.0], [53.2, 27621.0], [53.3, 27621.0], [53.4, 27625.0], [53.5, 27631.0], [53.6, 27631.0], [53.7, 27663.0], [53.8, 27678.0], [53.9, 27704.0], [54.0, 27704.0], [54.1, 27714.0], [54.2, 27735.0], [54.3, 27770.0], [54.4, 27770.0], [54.5, 27785.0], [54.6, 27814.0], [54.7, 27815.0], [54.8, 27815.0], [54.9, 27816.0], [55.0, 27875.0], [55.1, 27875.0], [55.2, 27904.0], [55.3, 27933.0], [55.4, 27974.0], [55.5, 27974.0], [55.6, 27996.0], [55.7, 28017.0], [55.8, 28036.0], [55.9, 28036.0], [56.0, 28040.0], [56.1, 28040.0], [56.2, 28051.0], [56.3, 28051.0], [56.4, 28071.0], [56.5, 28071.0], [56.6, 28076.0], [56.7, 28076.0], [56.8, 28090.0], [56.9, 28128.0], [57.0, 28128.0], [57.1, 28130.0], [57.2, 28139.0], [57.3, 28140.0], [57.4, 28140.0], [57.5, 28174.0], [57.6, 28176.0], [57.7, 28176.0], [57.8, 28176.0], [57.9, 28201.0], [58.0, 28205.0], [58.1, 28224.0], [58.2, 28224.0], [58.3, 28236.0], [58.4, 28237.0], [58.5, 28237.0], [58.6, 28239.0], [58.7, 28261.0], [58.8, 28306.0], [58.9, 28306.0], [59.0, 28336.0], [59.1, 28336.0], [59.2, 28364.0], [59.3, 28364.0], [59.4, 28397.0], [59.5, 28404.0], [59.6, 28420.0], [59.7, 28420.0], [59.8, 28456.0], [59.9, 28502.0], [60.0, 28524.0], [60.1, 28524.0], [60.2, 28549.0], [60.3, 28556.0], [60.4, 28556.0], [60.5, 28593.0], [60.6, 28598.0], [60.7, 28604.0], [60.8, 28604.0], [60.9, 28631.0], [61.0, 28645.0], [61.1, 28660.0], [61.2, 28660.0], [61.3, 28660.0], [61.4, 28667.0], [61.5, 28671.0], [61.6, 28671.0], [61.7, 28699.0], [61.8, 28732.0], [61.9, 28732.0], [62.0, 28735.0], [62.1, 28752.0], [62.2, 28767.0], [62.3, 28767.0], [62.4, 28776.0], [62.5, 28778.0], [62.6, 28780.0], [62.7, 28780.0], [62.8, 28798.0], [62.9, 28821.0], [63.0, 28821.0], [63.1, 28821.0], [63.2, 28838.0], [63.3, 28840.0], [63.4, 28840.0], [63.5, 28845.0], [63.6, 28867.0], [63.7, 28880.0], [63.8, 28880.0], [63.9, 28883.0], [64.0, 28918.0], [64.1, 28931.0], [64.2, 28931.0], [64.3, 28938.0], [64.4, 28940.0], [64.5, 28965.0], [64.6, 28965.0], [64.7, 28981.0], [64.8, 28994.0], [64.9, 28995.0], [65.0, 28995.0], [65.1, 29005.0], [65.2, 29005.0], [65.3, 29005.0], [65.4, 29009.0], [65.5, 29035.0], [65.6, 29037.0], [65.7, 29037.0], [65.8, 29040.0], [65.9, 29045.0], [66.0, 29046.0], [66.1, 29046.0], [66.2, 29050.0], [66.3, 29051.0], [66.4, 29056.0], [66.5, 29056.0], [66.6, 29058.0], [66.7, 29060.0], [66.8, 29060.0], [66.9, 29064.0], [67.0, 29067.0], [67.1, 29068.0], [67.2, 29068.0], [67.3, 29070.0], [67.4, 29072.0], [67.5, 29074.0], [67.6, 29074.0], [67.7, 29077.0], [67.8, 29084.0], [67.9, 29087.0], [68.0, 29087.0], [68.1, 29093.0], [68.2, 29094.0], [68.3, 29099.0], [68.4, 29099.0], [68.5, 29103.0], [68.6, 29110.0], [68.7, 29110.0], [68.8, 29111.0], [68.9, 29112.0], [69.0, 29112.0], [69.1, 29112.0], [69.2, 29119.0], [69.3, 29123.0], [69.4, 29126.0], [69.5, 29126.0], [69.6, 29130.0], [69.7, 29132.0], [69.8, 29135.0], [69.9, 29135.0], [70.0, 29147.0], [70.1, 29162.0], [70.2, 29162.0], [70.3, 29164.0], [70.4, 29167.0], [70.5, 29167.0], [70.6, 29167.0], [70.7, 29169.0], [70.8, 29171.0], [70.9, 29182.0], [71.0, 29182.0], [71.1, 29189.0], [71.2, 29202.0], [71.3, 29206.0], [71.4, 29206.0], [71.5, 29211.0], [71.6, 29213.0], [71.7, 29213.0], [71.8, 29219.0], [71.9, 29219.0], [72.0, 29231.0], [72.1, 29231.0], [72.2, 29233.0], [72.3, 29239.0], [72.4, 29240.0], [72.5, 29240.0], [72.6, 29240.0], [72.7, 29246.0], [72.8, 29248.0], [72.9, 29248.0], [73.0, 29252.0], [73.1, 29257.0], [73.2, 29258.0], [73.3, 29258.0], [73.4, 29260.0], [73.5, 29266.0], [73.6, 29266.0], [73.7, 29269.0], [73.8, 29270.0], [73.9, 29274.0], [74.0, 29274.0], [74.1, 29275.0], [74.2, 29278.0], [74.3, 29282.0], [74.4, 29282.0], [74.5, 29283.0], [74.6, 29287.0], [74.7, 29288.0], [74.8, 29288.0], [74.9, 29293.0], [75.0, 29295.0], [75.1, 29295.0], [75.2, 29299.0], [75.3, 29301.0], [75.4, 29302.0], [75.5, 29302.0], [75.6, 29303.0], [75.7, 29309.0], [75.8, 29313.0], [75.9, 29313.0], [76.0, 29313.0], [76.1, 29321.0], [76.2, 29331.0], [76.3, 29331.0], [76.4, 29338.0], [76.5, 29343.0], [76.6, 29344.0], [76.7, 29344.0], [76.8, 29347.0], [76.9, 29347.0], [77.0, 29347.0], [77.1, 29352.0], [77.2, 29355.0], [77.3, 29355.0], [77.4, 29355.0], [77.5, 29357.0], [77.6, 29360.0], [77.7, 29362.0], [77.8, 29362.0], [77.9, 29364.0], [78.0, 29365.0], [78.1, 29366.0], [78.2, 29366.0], [78.3, 29368.0], [78.4, 29369.0], [78.5, 29369.0], [78.6, 29370.0], [78.7, 29376.0], [78.8, 29396.0], [78.9, 29396.0], [79.0, 29398.0], [79.1, 29398.0], [79.2, 29399.0], [79.3, 29399.0], [79.4, 29402.0], [79.5, 29406.0], [79.6, 29406.0], [79.7, 29406.0], [79.8, 29407.0], [79.9, 29408.0], [80.0, 29409.0], [80.1, 29409.0], [80.2, 29422.0], [80.3, 29427.0], [80.4, 29427.0], [80.5, 29430.0], [80.6, 29438.0], [80.7, 29441.0], [80.8, 29441.0], [80.9, 29443.0], [81.0, 29450.0], [81.1, 29450.0], [81.2, 29450.0], [81.3, 29452.0], [81.4, 29454.0], [81.5, 29456.0], [81.6, 29456.0], [81.7, 29460.0], [81.8, 29465.0], [81.9, 29465.0], [82.0, 29469.0], [82.1, 29471.0], [82.2, 29477.0], [82.3, 29477.0], [82.4, 29479.0], [82.5, 29480.0], [82.6, 29484.0], [82.7, 29484.0], [82.8, 29484.0], [82.9, 29487.0], [83.0, 29488.0], [83.1, 29488.0], [83.2, 29490.0], [83.3, 29493.0], [83.4, 29493.0], [83.5, 29507.0], [83.6, 29512.0], [83.7, 29525.0], [83.8, 29525.0], [83.9, 29539.0], [84.0, 29539.0], [84.1, 29541.0], [84.2, 29541.0], [84.3, 29542.0], [84.4, 29542.0], [84.5, 29549.0], [84.6, 29549.0], [84.7, 29551.0], [84.8, 29561.0], [84.9, 29564.0], [85.0, 29564.0], [85.1, 29571.0], [85.2, 29575.0], [85.3, 29575.0], [85.4, 29576.0], [85.5, 29578.0], [85.6, 29580.0], [85.7, 29580.0], [85.8, 29580.0], [85.9, 29590.0], [86.0, 29591.0], [86.1, 29591.0], [86.2, 29594.0], [86.3, 29594.0], [86.4, 29596.0], [86.5, 29596.0], [86.6, 29598.0], [86.7, 29599.0], [86.8, 29599.0], [86.9, 29620.0], [87.0, 29621.0], [87.1, 29624.0], [87.2, 29624.0], [87.3, 29626.0], [87.4, 29626.0], [87.5, 29627.0], [87.6, 29627.0], [87.7, 29646.0], [87.8, 29647.0], [87.9, 29653.0], [88.0, 29653.0], [88.1, 29657.0], [88.2, 29671.0], [88.3, 29676.0], [88.4, 29676.0], [88.5, 29687.0], [88.6, 29687.0], [88.7, 29687.0], [88.8, 29691.0], [88.9, 29708.0], [89.0, 29709.0], [89.1, 29709.0], [89.2, 29710.0], [89.3, 29717.0], [89.4, 29719.0], [89.5, 29719.0], [89.6, 29725.0], [89.7, 29731.0], [89.8, 29736.0], [89.9, 29736.0], [90.0, 29743.0], [90.1, 29746.0], [90.2, 29746.0], [90.3, 29746.0], [90.4, 29759.0], [90.5, 29759.0], [90.6, 29759.0], [90.7, 29768.0], [90.8, 29773.0], [90.9, 29789.0], [91.0, 29789.0], [91.1, 29806.0], [91.2, 29807.0], [91.3, 29821.0], [91.4, 29821.0], [91.5, 29827.0], [91.6, 29832.0], [91.7, 29832.0], [91.8, 29843.0], [91.9, 29849.0], [92.0, 29857.0], [92.1, 29857.0], [92.2, 29864.0], [92.3, 29872.0], [92.4, 29900.0], [92.5, 29900.0], [92.6, 29921.0], [92.7, 29993.0], [92.8, 30065.0], [92.9, 30065.0], [93.0, 30095.0], [93.1, 30278.0], [93.2, 30618.0], [93.3, 30618.0], [93.4, 30641.0], [93.5, 30751.0], [93.6, 30751.0], [93.7, 30834.0], [93.8, 31171.0], [93.9, 31256.0], [94.0, 31256.0], [94.1, 31301.0], [94.2, 31357.0], [94.3, 31490.0], [94.4, 31490.0], [94.5, 31839.0], [94.6, 31931.0], [94.7, 31981.0], [94.8, 31981.0], [94.9, 32052.0], [95.0, 32084.0], [95.1, 32084.0], [95.2, 32207.0], [95.3, 32266.0], [95.4, 32308.0], [95.5, 32308.0], [95.6, 32576.0], [95.7, 32644.0], [95.8, 32771.0], [95.9, 32771.0], [96.0, 33085.0], [96.1, 33339.0], [96.2, 33882.0], [96.3, 33882.0], [96.4, 34168.0], [96.5, 34239.0], [96.6, 34648.0], [96.7, 34648.0], [96.8, 35057.0], [96.9, 35353.0], [97.0, 35353.0], [97.1, 35768.0], [97.2, 36431.0], [97.3, 36728.0], [97.4, 36728.0], [97.5, 37069.0], [97.6, 37572.0], [97.7, 37752.0], [97.8, 37752.0], [97.9, 38426.0], [98.0, 38985.0], [98.1, 39444.0], [98.2, 39444.0], [98.3, 40087.0], [98.4, 41162.0], [98.5, 41162.0], [98.6, 41295.0], [98.7, 41500.0], [98.8, 41747.0], [98.9, 41747.0], [99.0, 42170.0], [99.1, 42878.0], [99.2, 43199.0], [99.3, 43199.0], [99.4, 43467.0], [99.5, 43505.0], [99.6, 43752.0], [99.7, 43752.0], [99.8, 43754.0], [99.9, 44187.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 30.0, "series": [{"data": [[33300.0, 1.0], [34100.0, 1.0], [36700.0, 1.0], [35700.0, 1.0], [35300.0, 1.0], [37700.0, 1.0], [37500.0, 1.0], [38900.0, 1.0], [41500.0, 1.0], [41700.0, 1.0], [42100.0, 1.0], [41100.0, 1.0], [43500.0, 1.0], [44100.0, 1.0], [43700.0, 2.0], [43100.0, 1.0], [3000.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11500.0, 1.0], [14200.0, 1.0], [16900.0, 1.0], [17400.0, 2.0], [17300.0, 7.0], [17200.0, 2.0], [17100.0, 2.0], [17600.0, 5.0], [18200.0, 5.0], [17900.0, 6.0], [17700.0, 7.0], [18000.0, 11.0], [18300.0, 4.0], [18100.0, 2.0], [17800.0, 1.0], [18400.0, 3.0], [19200.0, 3.0], [19100.0, 3.0], [18900.0, 1.0], [18500.0, 2.0], [19000.0, 3.0], [18800.0, 5.0], [18700.0, 1.0], [18600.0, 2.0], [19300.0, 1.0], [20400.0, 6.0], [20100.0, 1.0], [19800.0, 7.0], [19900.0, 5.0], [19500.0, 1.0], [19600.0, 4.0], [19700.0, 3.0], [20000.0, 4.0], [20200.0, 1.0], [20900.0, 2.0], [20800.0, 3.0], [20500.0, 2.0], [21200.0, 4.0], [21500.0, 3.0], [21400.0, 5.0], [20700.0, 2.0], [21000.0, 1.0], [21100.0, 2.0], [21600.0, 2.0], [21900.0, 2.0], [22000.0, 4.0], [21800.0, 1.0], [22400.0, 7.0], [22500.0, 3.0], [22100.0, 3.0], [22200.0, 1.0], [22300.0, 3.0], [21700.0, 1.0], [23300.0, 3.0], [23100.0, 6.0], [23200.0, 7.0], [23500.0, 8.0], [22700.0, 4.0], [22600.0, 1.0], [22800.0, 3.0], [23000.0, 6.0], [23400.0, 2.0], [22900.0, 2.0], [23700.0, 6.0], [23600.0, 2.0], [24100.0, 4.0], [24400.0, 4.0], [23800.0, 9.0], [24500.0, 6.0], [24000.0, 8.0], [24300.0, 3.0], [23900.0, 6.0], [24200.0, 4.0], [24800.0, 4.0], [24700.0, 5.0], [25500.0, 4.0], [24600.0, 3.0], [25100.0, 6.0], [25000.0, 3.0], [24900.0, 4.0], [25400.0, 3.0], [25300.0, 6.0], [25200.0, 1.0], [25800.0, 9.0], [26500.0, 2.0], [26400.0, 1.0], [26200.0, 8.0], [26600.0, 2.0], [26300.0, 4.0], [26100.0, 6.0], [25700.0, 6.0], [25900.0, 5.0], [26000.0, 4.0], [25600.0, 3.0], [26800.0, 5.0], [26900.0, 5.0], [27400.0, 4.0], [27000.0, 7.0], [26700.0, 2.0], [27300.0, 5.0], [27500.0, 2.0], [27100.0, 7.0], [27200.0, 3.0], [27600.0, 6.0], [28500.0, 6.0], [27800.0, 4.0], [28000.0, 9.0], [27900.0, 4.0], [28300.0, 5.0], [28100.0, 7.0], [28200.0, 7.0], [28600.0, 8.0], [27700.0, 5.0], [28400.0, 3.0], [29500.0, 25.0], [28700.0, 8.0], [29100.0, 20.0], [29300.0, 30.0], [29200.0, 30.0], [29400.0, 30.0], [29600.0, 15.0], [29000.0, 25.0], [28900.0, 8.0], [28800.0, 8.0], [30600.0, 2.0], [30000.0, 2.0], [29900.0, 3.0], [29800.0, 10.0], [29700.0, 16.0], [30700.0, 1.0], [30200.0, 1.0], [30800.0, 1.0], [31400.0, 1.0], [31300.0, 2.0], [31200.0, 1.0], [31100.0, 1.0], [32500.0, 1.0], [32200.0, 2.0], [32300.0, 1.0], [32000.0, 2.0], [31900.0, 2.0], [31800.0, 1.0], [32700.0, 1.0], [32600.0, 1.0], [34200.0, 1.0], [33000.0, 1.0], [34600.0, 1.0], [33800.0, 1.0], [36400.0, 1.0], [35000.0, 1.0], [37000.0, 1.0], [38400.0, 1.0], [39400.0, 1.0], [40000.0, 1.0], [42800.0, 1.0], [41200.0, 1.0], [43400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.500000000000002, "minX": 1.60265664E12, "maxY": 10.0, "series": [{"data": [[1.60265802E12, 10.0], [1.60265832E12, 10.0], [1.60265742E12, 10.0], [1.60265772E12, 10.0], [1.6026573E12, 10.0], [1.6026576E12, 10.0], [1.6026567E12, 10.0], [1.602657E12, 10.0], [1.60265754E12, 10.0], [1.60265784E12, 10.0], [1.60265694E12, 10.0], [1.60265724E12, 10.0], [1.60265682E12, 10.0], [1.60265712E12, 10.0], [1.60265814E12, 10.0], [1.60265844E12, 10.0], [1.60265706E12, 10.0], [1.60265736E12, 10.0], [1.60265676E12, 10.0], [1.60265838E12, 10.0], [1.60265856E12, 8.500000000000002], [1.60265664E12, 10.0], [1.60265826E12, 10.0], [1.60265766E12, 10.0], [1.60265796E12, 10.0], [1.60265688E12, 10.0], [1.6026585E12, 10.0], [1.6026579E12, 10.0], [1.6026582E12, 10.0], [1.60265778E12, 10.0], [1.60265808E12, 10.0], [1.60265718E12, 10.0], [1.60265748E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265856E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17253.0, "minX": 1.0, "maxY": 26228.28787878789, "series": [{"data": [[8.0, 17379.0], [4.0, 17342.0], [2.0, 17348.0], [1.0, 17786.0], [9.0, 17363.0], [10.0, 26228.28787878789], [5.0, 17416.0], [6.0, 17384.0], [3.0, 17253.0], [7.0, 17396.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26120.277551020423]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.95, "minX": 1.60265664E12, "maxY": 199821.2, "series": [{"data": [[1.60265802E12, 49901.1], [1.60265832E12, 36232.48333333333], [1.60265742E12, 36001.5], [1.60265772E12, 87572.73333333334], [1.6026573E12, 43603.78333333333], [1.6026576E12, 193798.71666666667], [1.6026567E12, 199821.2], [1.602657E12, 53304.8], [1.60265754E12, 87402.51666666666], [1.60265784E12, 57050.316666666666], [1.60265694E12, 46730.63333333333], [1.60265724E12, 43271.73333333333], [1.60265682E12, 142357.26666666666], [1.60265712E12, 48755.86666666667], [1.60265814E12, 47447.23333333333], [1.60265844E12, 85813.75], [1.60265706E12, 44337.433333333334], [1.60265736E12, 38598.916666666664], [1.60265676E12, 66859.16666666667], [1.60265838E12, 30861.766666666666], [1.60265856E12, 55125.0], [1.60265664E12, 37759.61666666667], [1.60265826E12, 42400.13333333333], [1.60265766E12, 91327.18333333333], [1.60265796E12, 48983.88333333333], [1.60265688E12, 71319.16666666667], [1.6026585E12, 117759.31666666667], [1.6026579E12, 36654.53333333333], [1.6026582E12, 49957.36666666667], [1.60265778E12, 56253.53333333333], [1.60265808E12, 53213.35], [1.60265718E12, 56598.5], [1.60265748E12, 166356.18333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60265802E12, 146.13333333333333], [1.60265832E12, 167.78333333333333], [1.60265742E12, 196.61666666666667], [1.60265772E12, 188.78333333333333], [1.6026573E12, 146.01666666666668], [1.6026576E12, 178.83333333333334], [1.6026567E12, 169.21666666666667], [1.602657E12, 153.43333333333334], [1.60265754E12, 163.63333333333333], [1.60265784E12, 154.66666666666666], [1.60265694E12, 169.3], [1.60265724E12, 153.31666666666666], [1.60265682E12, 120.78333333333333], [1.60265712E12, 153.4], [1.60265814E12, 153.75], [1.60265844E12, 195.41666666666666], [1.60265706E12, 146.13333333333333], [1.60265736E12, 175.28333333333333], [1.60265676E12, 215.11666666666667], [1.60265838E12, 189.76666666666668], [1.60265856E12, 207.08333333333334], [1.60265664E12, 21.95], [1.60265826E12, 145.98333333333332], [1.60265766E12, 213.66666666666666], [1.60265796E12, 153.45], [1.60265688E12, 160.73333333333332], [1.6026585E12, 145.81666666666666], [1.6026579E12, 138.76666666666668], [1.6026582E12, 153.45], [1.60265778E12, 161.03333333333333], [1.60265808E12, 154.05], [1.60265718E12, 146.45], [1.60265748E12, 199.46666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265856E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5848.666666666667, "minX": 1.60265664E12, "maxY": 34687.68421052632, "series": [{"data": [[1.60265802E12, 29584.600000000002], [1.60265832E12, 26580.652173913044], [1.60265742E12, 22656.59259259259], [1.60265772E12, 23117.961538461535], [1.6026573E12, 29324.25], [1.6026576E12, 23483.000000000004], [1.6026567E12, 24166.608695652176], [1.602657E12, 28104.42857142857], [1.60265754E12, 25232.521739130436], [1.60265784E12, 24752.285714285714], [1.60265694E12, 25119.608695652172], [1.60265724E12, 28937.476190476194], [1.60265682E12, 32599.8125], [1.60265712E12, 29349.619047619046], [1.60265814E12, 27826.04761904762], [1.60265844E12, 22793.629629629628], [1.60265706E12, 29733.850000000002], [1.60265736E12, 27388.999999999996], [1.60265676E12, 19981.600000000002], [1.60265838E12, 24223.76923076923], [1.60265856E12, 23001.033333333336], [1.60265664E12, 5848.666666666667], [1.60265826E12, 29122.5], [1.60265766E12, 21986.999999999993], [1.60265796E12, 29497.666666666668], [1.60265688E12, 30754.227272727272], [1.6026585E12, 26491.6], [1.6026579E12, 34687.68421052632], [1.6026582E12, 28975.76190476191], [1.60265778E12, 25296.227272727272], [1.60265808E12, 28934.52380952381], [1.60265718E12, 29005.6], [1.60265748E12, 20395.571428571424]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265856E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5843.666666666667, "minX": 1.60265664E12, "maxY": 34686.89473684211, "series": [{"data": [[1.60265802E12, 29583.249999999996], [1.60265832E12, 26579.391304347828], [1.60265742E12, 22655.03703703704], [1.60265772E12, 23116.076923076922], [1.6026573E12, 29323.049999999996], [1.6026576E12, 23479.120000000006], [1.6026567E12, 24163.130434782608], [1.602657E12, 28103.238095238095], [1.60265754E12, 25229.782608695652], [1.60265784E12, 24751.04761904762], [1.60265694E12, 25118.608695652172], [1.60265724E12, 28936.333333333336], [1.60265682E12, 32595.312500000004], [1.60265712E12, 29348.38095238095], [1.60265814E12, 27825.04761904762], [1.60265844E12, 22791.22222222222], [1.60265706E12, 29732.8], [1.60265736E12, 27387.458333333332], [1.60265676E12, 19980.166666666668], [1.60265838E12, 24222.230769230766], [1.60265856E12, 22998.9], [1.60265664E12, 5843.666666666667], [1.60265826E12, 29121.449999999997], [1.60265766E12, 21985.099999999995], [1.60265796E12, 29496.61904761905], [1.60265688E12, 30752.636363636364], [1.6026585E12, 26488.35], [1.6026579E12, 34686.89473684211], [1.6026582E12, 28974.523809523816], [1.60265778E12, 25295.09090909091], [1.60265808E12, 28933.23809523809], [1.60265718E12, 29004.149999999998], [1.60265748E12, 20391.71428571428]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265856E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.07692307692307693, "minX": 1.60265664E12, "maxY": 23.333333333333336, "series": [{"data": [[1.60265802E12, 0.7499999999999999], [1.60265832E12, 0.30434782608695654], [1.60265742E12, 0.2962962962962963], [1.60265772E12, 0.07692307692307693], [1.6026573E12, 0.5499999999999999], [1.6026576E12, 0.44000000000000006], [1.6026567E12, 0.5652173913043481], [1.602657E12, 0.33333333333333337], [1.60265754E12, 0.5217391304347827], [1.60265784E12, 0.5714285714285715], [1.60265694E12, 0.30434782608695654], [1.60265724E12, 0.6190476190476191], [1.60265682E12, 1.0], [1.60265712E12, 0.42857142857142855], [1.60265814E12, 0.14285714285714288], [1.60265844E12, 0.4814814814814815], [1.60265706E12, 0.65], [1.60265736E12, 0.20833333333333337], [1.60265676E12, 0.5999999999999999], [1.60265838E12, 0.3076923076923076], [1.60265856E12, 0.46666666666666684], [1.60265664E12, 23.333333333333336], [1.60265826E12, 0.5], [1.60265766E12, 0.3666666666666666], [1.60265796E12, 0.28571428571428575], [1.60265688E12, 0.5909090909090909], [1.6026585E12, 0.45], [1.6026579E12, 0.4210526315789474], [1.6026582E12, 0.6190476190476191], [1.60265778E12, 0.31818181818181823], [1.60265808E12, 0.5238095238095238], [1.60265718E12, 0.25], [1.60265748E12, 0.42857142857142877]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265856E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3082.0, "minX": 1.60265664E12, "maxY": 44187.0, "series": [{"data": [[1.60265802E12, 29849.0], [1.60265832E12, 29288.0], [1.60265742E12, 26310.0], [1.60265772E12, 32052.0], [1.6026573E12, 29676.0], [1.6026576E12, 26037.0], [1.6026567E12, 27525.0], [1.602657E12, 29900.0], [1.60265754E12, 32308.0], [1.60265784E12, 32771.0], [1.60265694E12, 30095.0], [1.60265724E12, 29653.0], [1.60265682E12, 44187.0], [1.60265712E12, 29591.0], [1.60265814E12, 29406.0], [1.60265844E12, 28176.0], [1.60265706E12, 29921.0], [1.60265736E12, 29450.0], [1.60265676E12, 23657.0], [1.60265838E12, 28556.0], [1.60265856E12, 38426.0], [1.60265664E12, 8355.0], [1.60265826E12, 29471.0], [1.60265766E12, 29257.0], [1.60265796E12, 29864.0], [1.60265688E12, 43754.0], [1.6026585E12, 31171.0], [1.6026579E12, 43199.0], [1.6026582E12, 29507.0], [1.60265778E12, 29252.0], [1.60265808E12, 29872.0], [1.60265718E12, 29313.0], [1.60265748E12, 23617.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60265802E12, 29269.0], [1.60265832E12, 23569.0], [1.60265742E12, 17635.0], [1.60265772E12, 17661.0], [1.6026573E12, 28931.0], [1.6026576E12, 19614.0], [1.6026567E12, 11554.0], [1.602657E12, 24767.0], [1.60265754E12, 17969.0], [1.60265784E12, 21694.0], [1.60265694E12, 22412.0], [1.60265724E12, 28071.0], [1.60265682E12, 24044.0], [1.60265712E12, 29050.0], [1.60265814E12, 26921.0], [1.60265844E12, 18802.0], [1.60265706E12, 29427.0], [1.60265736E12, 25138.0], [1.60265676E12, 17684.0], [1.60265838E12, 21156.0], [1.60265856E12, 17143.0], [1.60265664E12, 3082.0], [1.60265826E12, 28660.0], [1.60265766E12, 18084.0], [1.60265796E12, 29240.0], [1.60265688E12, 24678.0], [1.6026585E12, 20469.0], [1.6026579E12, 26116.0], [1.6026582E12, 28631.0], [1.60265778E12, 23006.0], [1.60265808E12, 26881.0], [1.60265718E12, 28174.0], [1.60265748E12, 17440.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60265802E12, 29269.0], [1.60265832E12, 23569.0], [1.60265742E12, 17635.0], [1.60265772E12, 17661.0], [1.6026573E12, 28931.0], [1.6026576E12, 19614.0], [1.6026567E12, 11554.0], [1.602657E12, 24767.0], [1.60265754E12, 17969.0], [1.60265784E12, 21694.0], [1.60265694E12, 22412.0], [1.60265724E12, 28071.0], [1.60265682E12, 24044.0], [1.60265712E12, 29050.0], [1.60265814E12, 26921.0], [1.60265844E12, 18802.0], [1.60265706E12, 29427.0], [1.60265736E12, 25138.0], [1.60265676E12, 17684.0], [1.60265838E12, 21156.0], [1.60265856E12, 17143.0], [1.60265664E12, 3082.0], [1.60265826E12, 28660.0], [1.60265766E12, 18084.0], [1.60265796E12, 29240.0], [1.60265688E12, 24678.0], [1.6026585E12, 20469.0], [1.6026579E12, 26116.0], [1.6026582E12, 28631.0], [1.60265778E12, 23006.0], [1.60265808E12, 26881.0], [1.60265718E12, 28174.0], [1.60265748E12, 17440.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60265802E12, 29269.0], [1.60265832E12, 23569.0], [1.60265742E12, 17635.0], [1.60265772E12, 17661.0], [1.6026573E12, 28931.0], [1.6026576E12, 19614.0], [1.6026567E12, 11554.0], [1.602657E12, 24767.0], [1.60265754E12, 17969.0], [1.60265784E12, 21694.0], [1.60265694E12, 22412.0], [1.60265724E12, 28071.0], [1.60265682E12, 24044.0], [1.60265712E12, 29050.0], [1.60265814E12, 26921.0], [1.60265844E12, 18802.0], [1.60265706E12, 29427.0], [1.60265736E12, 25138.0], [1.60265676E12, 17684.0], [1.60265838E12, 21156.0], [1.60265856E12, 17143.0], [1.60265664E12, 3082.0], [1.60265826E12, 28660.0], [1.60265766E12, 18084.0], [1.60265796E12, 29240.0], [1.60265688E12, 24678.0], [1.6026585E12, 20469.0], [1.6026579E12, 26116.0], [1.6026582E12, 28631.0], [1.60265778E12, 23006.0], [1.60265808E12, 26881.0], [1.60265718E12, 28174.0], [1.60265748E12, 17440.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60265802E12, 29269.0], [1.60265832E12, 23569.0], [1.60265742E12, 17635.0], [1.60265772E12, 17661.0], [1.6026573E12, 28931.0], [1.6026576E12, 19614.0], [1.6026567E12, 11554.0], [1.602657E12, 24767.0], [1.60265754E12, 17969.0], [1.60265784E12, 21694.0], [1.60265694E12, 22412.0], [1.60265724E12, 28071.0], [1.60265682E12, 24044.0], [1.60265712E12, 29050.0], [1.60265814E12, 26921.0], [1.60265844E12, 18802.0], [1.60265706E12, 29427.0], [1.60265736E12, 25138.0], [1.60265676E12, 17684.0], [1.60265838E12, 21156.0], [1.60265856E12, 17143.0], [1.60265664E12, 3082.0], [1.60265826E12, 28660.0], [1.60265766E12, 18084.0], [1.60265796E12, 29240.0], [1.60265688E12, 24678.0], [1.6026585E12, 20469.0], [1.6026579E12, 26116.0], [1.6026582E12, 28631.0], [1.60265778E12, 23006.0], [1.60265808E12, 26881.0], [1.60265718E12, 28174.0], [1.60265748E12, 17440.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60265802E12, 29584.0], [1.60265832E12, 25966.0], [1.60265742E12, 23555.0], [1.60265772E12, 21835.5], [1.6026573E12, 29292.5], [1.6026576E12, 23952.0], [1.6026567E12, 26234.0], [1.602657E12, 29130.0], [1.60265754E12, 25415.0], [1.60265784E12, 23831.0], [1.60265694E12, 24405.0], [1.60265724E12, 29147.0], [1.60265682E12, 28988.0], [1.60265712E12, 29364.0], [1.60265814E12, 27735.0], [1.60265844E12, 22410.0], [1.60265706E12, 29752.5], [1.60265736E12, 27018.0], [1.60265676E12, 20048.5], [1.60265838E12, 23764.5], [1.60265856E12, 17930.0], [1.60265664E12, 6109.0], [1.60265826E12, 29173.5], [1.60265766E12, 20002.0], [1.60265796E12, 29484.0], [1.60265688E12, 29175.5], [1.6026585E12, 27709.0], [1.6026579E12, 35057.0], [1.6026582E12, 28965.0], [1.60265778E12, 24401.0], [1.60265808E12, 29283.0], [1.60265718E12, 29096.5], [1.60265748E12, 19830.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265856E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27063.0, "minX": 1.0, "maxY": 27063.0, "series": [{"data": [[1.0, 27063.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27063.0, "minX": 1.0, "maxY": 27063.0, "series": [{"data": [[1.0, 27063.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60265664E12, "maxY": 0.5, "series": [{"data": [[1.60265802E12, 0.3333333333333333], [1.60265832E12, 0.38333333333333336], [1.60265742E12, 0.45], [1.60265772E12, 0.43333333333333335], [1.6026573E12, 0.3333333333333333], [1.6026576E12, 0.4166666666666667], [1.6026567E12, 0.38333333333333336], [1.602657E12, 0.35], [1.60265754E12, 0.38333333333333336], [1.60265784E12, 0.35], [1.60265694E12, 0.38333333333333336], [1.60265724E12, 0.35], [1.60265682E12, 0.26666666666666666], [1.60265712E12, 0.35], [1.60265814E12, 0.35], [1.60265844E12, 0.45], [1.60265706E12, 0.3333333333333333], [1.60265736E12, 0.4], [1.60265676E12, 0.5], [1.60265838E12, 0.43333333333333335], [1.60265856E12, 0.3333333333333333], [1.60265664E12, 0.21666666666666667], [1.60265826E12, 0.3333333333333333], [1.60265766E12, 0.5], [1.60265796E12, 0.35], [1.60265688E12, 0.36666666666666664], [1.6026585E12, 0.3333333333333333], [1.6026579E12, 0.31666666666666665], [1.6026582E12, 0.35], [1.60265778E12, 0.36666666666666664], [1.60265808E12, 0.35], [1.60265718E12, 0.3333333333333333], [1.60265748E12, 0.4666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265856E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265664E12, "maxY": 0.5, "series": [{"data": [[1.60265802E12, 0.3333333333333333], [1.60265832E12, 0.38333333333333336], [1.60265742E12, 0.45], [1.60265772E12, 0.43333333333333335], [1.6026573E12, 0.3333333333333333], [1.6026576E12, 0.4166666666666667], [1.6026567E12, 0.38333333333333336], [1.602657E12, 0.35], [1.60265754E12, 0.38333333333333336], [1.60265784E12, 0.35], [1.60265694E12, 0.38333333333333336], [1.60265724E12, 0.35], [1.60265682E12, 0.26666666666666666], [1.60265712E12, 0.35], [1.60265814E12, 0.35], [1.60265844E12, 0.45], [1.60265706E12, 0.3333333333333333], [1.60265736E12, 0.4], [1.60265676E12, 0.5], [1.60265838E12, 0.43333333333333335], [1.60265856E12, 0.5], [1.60265664E12, 0.05], [1.60265826E12, 0.3333333333333333], [1.60265766E12, 0.5], [1.60265796E12, 0.35], [1.60265688E12, 0.36666666666666664], [1.6026585E12, 0.3333333333333333], [1.6026579E12, 0.31666666666666665], [1.6026582E12, 0.35], [1.60265778E12, 0.36666666666666664], [1.60265808E12, 0.35], [1.60265718E12, 0.3333333333333333], [1.60265748E12, 0.4666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265856E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265664E12, "maxY": 0.5, "series": [{"data": [[1.60265802E12, 0.3333333333333333], [1.60265832E12, 0.38333333333333336], [1.60265742E12, 0.45], [1.60265772E12, 0.43333333333333335], [1.6026573E12, 0.3333333333333333], [1.6026576E12, 0.4166666666666667], [1.6026567E12, 0.38333333333333336], [1.602657E12, 0.35], [1.60265754E12, 0.38333333333333336], [1.60265784E12, 0.35], [1.60265694E12, 0.38333333333333336], [1.60265724E12, 0.35], [1.60265682E12, 0.26666666666666666], [1.60265712E12, 0.35], [1.60265814E12, 0.35], [1.60265844E12, 0.45], [1.60265706E12, 0.3333333333333333], [1.60265736E12, 0.4], [1.60265676E12, 0.5], [1.60265838E12, 0.43333333333333335], [1.60265856E12, 0.5], [1.60265664E12, 0.05], [1.60265826E12, 0.3333333333333333], [1.60265766E12, 0.5], [1.60265796E12, 0.35], [1.60265688E12, 0.36666666666666664], [1.6026585E12, 0.3333333333333333], [1.6026579E12, 0.31666666666666665], [1.6026582E12, 0.35], [1.60265778E12, 0.36666666666666664], [1.60265808E12, 0.35], [1.60265718E12, 0.3333333333333333], [1.60265748E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265856E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60265664E12, "maxY": 0.5, "series": [{"data": [[1.60265802E12, 0.3333333333333333], [1.60265832E12, 0.38333333333333336], [1.60265742E12, 0.45], [1.60265772E12, 0.43333333333333335], [1.6026573E12, 0.3333333333333333], [1.6026576E12, 0.4166666666666667], [1.6026567E12, 0.38333333333333336], [1.602657E12, 0.35], [1.60265754E12, 0.38333333333333336], [1.60265784E12, 0.35], [1.60265694E12, 0.38333333333333336], [1.60265724E12, 0.35], [1.60265682E12, 0.26666666666666666], [1.60265712E12, 0.35], [1.60265814E12, 0.35], [1.60265844E12, 0.45], [1.60265706E12, 0.3333333333333333], [1.60265736E12, 0.4], [1.60265676E12, 0.5], [1.60265838E12, 0.43333333333333335], [1.60265856E12, 0.5], [1.60265664E12, 0.05], [1.60265826E12, 0.3333333333333333], [1.60265766E12, 0.5], [1.60265796E12, 0.35], [1.60265688E12, 0.36666666666666664], [1.6026585E12, 0.3333333333333333], [1.6026579E12, 0.31666666666666665], [1.6026582E12, 0.35], [1.60265778E12, 0.36666666666666664], [1.60265808E12, 0.35], [1.60265718E12, 0.3333333333333333], [1.60265748E12, 0.4666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265856E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

