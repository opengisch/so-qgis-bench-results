/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2427.0, "minX": 0.0, "maxY": 44072.0, "series": [{"data": [[0.0, 2427.0], [0.1, 2427.0], [0.2, 5368.0], [0.3, 8354.0], [0.4, 8354.0], [0.5, 11099.0], [0.6, 13521.0], [0.7, 15997.0], [0.8, 15997.0], [0.9, 16567.0], [1.0, 16594.0], [1.1, 16598.0], [1.2, 16598.0], [1.3, 16632.0], [1.4, 16654.0], [1.5, 16692.0], [1.6, 16692.0], [1.7, 16693.0], [1.8, 16726.0], [1.9, 16726.0], [2.0, 16855.0], [2.1, 16865.0], [2.2, 16922.0], [2.3, 16922.0], [2.4, 16931.0], [2.5, 17027.0], [2.6, 17065.0], [2.7, 17065.0], [2.8, 17079.0], [2.9, 17114.0], [3.0, 17414.0], [3.1, 17414.0], [3.2, 17432.0], [3.3, 17443.0], [3.4, 17443.0], [3.5, 17451.0], [3.6, 17452.0], [3.7, 17471.0], [3.8, 17471.0], [3.9, 17472.0], [4.0, 17473.0], [4.1, 17507.0], [4.2, 17507.0], [4.3, 17513.0], [4.4, 17528.0], [4.5, 17549.0], [4.6, 17549.0], [4.7, 17565.0], [4.8, 17572.0], [4.9, 17582.0], [5.0, 17582.0], [5.1, 17586.0], [5.2, 17594.0], [5.3, 17594.0], [5.4, 17609.0], [5.5, 17616.0], [5.6, 17625.0], [5.7, 17625.0], [5.8, 17655.0], [5.9, 17661.0], [6.0, 17669.0], [6.1, 17669.0], [6.2, 17744.0], [6.3, 17752.0], [6.4, 17770.0], [6.5, 17770.0], [6.6, 17779.0], [6.7, 17791.0], [6.8, 17791.0], [6.9, 17796.0], [7.0, 17797.0], [7.1, 17880.0], [7.2, 17880.0], [7.3, 17882.0], [7.4, 17896.0], [7.5, 17938.0], [7.6, 17938.0], [7.7, 17957.0], [7.8, 17972.0], [7.9, 17972.0], [8.0, 17972.0], [8.1, 17973.0], [8.2, 17979.0], [8.3, 18007.0], [8.4, 18007.0], [8.5, 18055.0], [8.6, 18060.0], [8.7, 18060.0], [8.8, 18207.0], [8.9, 18210.0], [9.0, 18276.0], [9.1, 18276.0], [9.2, 18295.0], [9.3, 18377.0], [9.4, 18403.0], [9.5, 18403.0], [9.6, 18408.0], [9.7, 18434.0], [9.8, 18435.0], [9.9, 18435.0], [10.0, 18458.0], [10.1, 18528.0], [10.2, 18528.0], [10.3, 18573.0], [10.4, 18584.0], [10.5, 18590.0], [10.6, 18590.0], [10.7, 18664.0], [10.8, 18852.0], [10.9, 19002.0], [11.0, 19002.0], [11.1, 19004.0], [11.2, 19027.0], [11.3, 19038.0], [11.4, 19038.0], [11.5, 19162.0], [11.6, 19169.0], [11.7, 19169.0], [11.8, 19222.0], [11.9, 19284.0], [12.0, 19299.0], [12.1, 19299.0], [12.2, 19321.0], [12.3, 19349.0], [12.4, 19352.0], [12.5, 19352.0], [12.6, 19357.0], [12.7, 19357.0], [12.8, 19365.0], [12.9, 19365.0], [13.0, 19388.0], [13.1, 19389.0], [13.2, 19444.0], [13.3, 19444.0], [13.4, 19575.0], [13.5, 19577.0], [13.6, 19577.0], [13.7, 19645.0], [13.8, 19647.0], [13.9, 19659.0], [14.0, 19659.0], [14.1, 19782.0], [14.2, 19882.0], [14.3, 19908.0], [14.4, 19908.0], [14.5, 19910.0], [14.6, 19937.0], [14.7, 19973.0], [14.8, 19973.0], [14.9, 19982.0], [15.0, 19993.0], [15.1, 19993.0], [15.2, 19999.0], [15.3, 20007.0], [15.4, 20014.0], [15.5, 20014.0], [15.6, 20129.0], [15.7, 20189.0], [15.8, 20199.0], [15.9, 20199.0], [16.0, 20234.0], [16.1, 20246.0], [16.2, 20248.0], [16.3, 20248.0], [16.4, 20298.0], [16.5, 20308.0], [16.6, 20318.0], [16.7, 20318.0], [16.8, 20322.0], [16.9, 20377.0], [17.0, 20377.0], [17.1, 20442.0], [17.2, 20788.0], [17.3, 20795.0], [17.4, 20795.0], [17.5, 20891.0], [17.6, 20891.0], [17.7, 20913.0], [17.8, 20913.0], [17.9, 20972.0], [18.0, 21009.0], [18.1, 21041.0], [18.2, 21041.0], [18.3, 21080.0], [18.4, 21094.0], [18.5, 21094.0], [18.6, 21170.0], [18.7, 21207.0], [18.8, 21262.0], [18.9, 21262.0], [19.0, 21334.0], [19.1, 21374.0], [19.2, 21445.0], [19.3, 21445.0], [19.4, 21460.0], [19.5, 21491.0], [19.6, 21531.0], [19.7, 21531.0], [19.8, 21532.0], [19.9, 21545.0], [20.0, 21552.0], [20.1, 21552.0], [20.2, 21555.0], [20.3, 21579.0], [20.4, 21579.0], [20.5, 21629.0], [20.6, 21642.0], [20.7, 21723.0], [20.8, 21723.0], [20.9, 21752.0], [21.0, 21804.0], [21.1, 21811.0], [21.2, 21811.0], [21.3, 21841.0], [21.4, 21864.0], [21.5, 21887.0], [21.6, 21887.0], [21.7, 21901.0], [21.8, 21905.0], [21.9, 21905.0], [22.0, 21949.0], [22.1, 21974.0], [22.2, 21999.0], [22.3, 21999.0], [22.4, 22013.0], [22.5, 22040.0], [22.6, 22089.0], [22.7, 22089.0], [22.8, 22186.0], [22.9, 22187.0], [23.0, 22225.0], [23.1, 22225.0], [23.2, 22233.0], [23.3, 22261.0], [23.4, 22261.0], [23.5, 22268.0], [23.6, 22411.0], [23.7, 22429.0], [23.8, 22429.0], [23.9, 22442.0], [24.0, 22481.0], [24.1, 22498.0], [24.2, 22498.0], [24.3, 22524.0], [24.4, 22612.0], [24.5, 22667.0], [24.6, 22667.0], [24.7, 22690.0], [24.8, 22801.0], [24.9, 22812.0], [25.0, 22812.0], [25.1, 22818.0], [25.2, 22841.0], [25.3, 22841.0], [25.4, 22845.0], [25.5, 22861.0], [25.6, 22891.0], [25.7, 22891.0], [25.8, 23000.0], [25.9, 23005.0], [26.0, 23023.0], [26.1, 23023.0], [26.2, 23029.0], [26.3, 23050.0], [26.4, 23056.0], [26.5, 23056.0], [26.6, 23079.0], [26.7, 23094.0], [26.8, 23094.0], [26.9, 23139.0], [27.0, 23163.0], [27.1, 23175.0], [27.2, 23175.0], [27.3, 23176.0], [27.4, 23226.0], [27.5, 23244.0], [27.6, 23244.0], [27.7, 23257.0], [27.8, 23263.0], [27.9, 23293.0], [28.0, 23293.0], [28.1, 23294.0], [28.2, 23329.0], [28.3, 23352.0], [28.4, 23352.0], [28.5, 23353.0], [28.6, 23402.0], [28.7, 23402.0], [28.8, 23403.0], [28.9, 23409.0], [29.0, 23420.0], [29.1, 23420.0], [29.2, 23436.0], [29.3, 23460.0], [29.4, 23470.0], [29.5, 23470.0], [29.6, 23490.0], [29.7, 23492.0], [29.8, 23499.0], [29.9, 23499.0], [30.0, 23511.0], [30.1, 23524.0], [30.2, 23524.0], [30.3, 23571.0], [30.4, 23631.0], [30.5, 23652.0], [30.6, 23652.0], [30.7, 23661.0], [30.8, 23663.0], [30.9, 23663.0], [31.0, 23663.0], [31.1, 23667.0], [31.2, 23674.0], [31.3, 23680.0], [31.4, 23680.0], [31.5, 23684.0], [31.6, 23701.0], [31.7, 23701.0], [31.8, 23701.0], [31.9, 23719.0], [32.0, 23729.0], [32.1, 23729.0], [32.2, 23828.0], [32.3, 23838.0], [32.4, 23861.0], [32.5, 23861.0], [32.6, 23870.0], [32.7, 23930.0], [32.8, 23936.0], [32.9, 23936.0], [33.0, 23942.0], [33.1, 23958.0], [33.2, 23971.0], [33.3, 23971.0], [33.4, 23973.0], [33.5, 23980.0], [33.6, 23980.0], [33.7, 23986.0], [33.8, 23994.0], [33.9, 24001.0], [34.0, 24001.0], [34.1, 24041.0], [34.2, 24052.0], [34.3, 24066.0], [34.4, 24066.0], [34.5, 24067.0], [34.6, 24080.0], [34.7, 24083.0], [34.8, 24083.0], [34.9, 24126.0], [35.0, 24151.0], [35.1, 24151.0], [35.2, 24203.0], [35.3, 24218.0], [35.4, 24219.0], [35.5, 24219.0], [35.6, 24219.0], [35.7, 24222.0], [35.8, 24223.0], [35.9, 24223.0], [36.0, 24244.0], [36.1, 24265.0], [36.2, 24273.0], [36.3, 24273.0], [36.4, 24277.0], [36.5, 24364.0], [36.6, 24371.0], [36.7, 24371.0], [36.8, 24372.0], [36.9, 24376.0], [37.0, 24376.0], [37.1, 24392.0], [37.2, 24409.0], [37.3, 24421.0], [37.4, 24421.0], [37.5, 24437.0], [37.6, 24466.0], [37.7, 24514.0], [37.8, 24514.0], [37.9, 24529.0], [38.0, 24548.0], [38.1, 24596.0], [38.2, 24596.0], [38.3, 24661.0], [38.4, 24712.0], [38.5, 24712.0], [38.6, 24712.0], [38.7, 24715.0], [38.8, 24746.0], [38.9, 24746.0], [39.0, 24752.0], [39.1, 24796.0], [39.2, 24811.0], [39.3, 24811.0], [39.4, 24827.0], [39.5, 24842.0], [39.6, 24852.0], [39.7, 24852.0], [39.8, 24879.0], [39.9, 24957.0], [40.0, 24964.0], [40.1, 24964.0], [40.2, 24964.0], [40.3, 25007.0], [40.4, 25007.0], [40.5, 25010.0], [40.6, 25020.0], [40.7, 25041.0], [40.8, 25041.0], [40.9, 25065.0], [41.0, 25076.0], [41.1, 25088.0], [41.2, 25088.0], [41.3, 25093.0], [41.4, 25110.0], [41.5, 25120.0], [41.6, 25120.0], [41.7, 25140.0], [41.8, 25181.0], [41.9, 25181.0], [42.0, 25238.0], [42.1, 25265.0], [42.2, 25280.0], [42.3, 25280.0], [42.4, 25280.0], [42.5, 25295.0], [42.6, 25298.0], [42.7, 25298.0], [42.8, 25325.0], [42.9, 25342.0], [43.0, 25345.0], [43.1, 25345.0], [43.2, 25353.0], [43.3, 25394.0], [43.4, 25394.0], [43.5, 25406.0], [43.6, 25409.0], [43.7, 25421.0], [43.8, 25421.0], [43.9, 25433.0], [44.0, 25451.0], [44.1, 25462.0], [44.2, 25462.0], [44.3, 25479.0], [44.4, 25491.0], [44.5, 25531.0], [44.6, 25531.0], [44.7, 25554.0], [44.8, 25569.0], [44.9, 25577.0], [45.0, 25577.0], [45.1, 25611.0], [45.2, 25619.0], [45.3, 25619.0], [45.4, 25629.0], [45.5, 25679.0], [45.6, 25718.0], [45.7, 25718.0], [45.8, 25786.0], [45.9, 25788.0], [46.0, 25791.0], [46.1, 25791.0], [46.2, 25798.0], [46.3, 25823.0], [46.4, 25863.0], [46.5, 25863.0], [46.6, 25925.0], [46.7, 26007.0], [46.8, 26007.0], [46.9, 26011.0], [47.0, 26029.0], [47.1, 26030.0], [47.2, 26030.0], [47.3, 26073.0], [47.4, 26124.0], [47.5, 26157.0], [47.6, 26157.0], [47.7, 26210.0], [47.8, 26215.0], [47.9, 26238.0], [48.0, 26238.0], [48.1, 26244.0], [48.2, 26267.0], [48.3, 26276.0], [48.4, 26276.0], [48.5, 26281.0], [48.6, 26345.0], [48.7, 26345.0], [48.8, 26369.0], [48.9, 26465.0], [49.0, 26508.0], [49.1, 26508.0], [49.2, 26524.0], [49.3, 26542.0], [49.4, 26547.0], [49.5, 26547.0], [49.6, 26556.0], [49.7, 26558.0], [49.8, 26560.0], [49.9, 26560.0], [50.0, 26604.0], [50.1, 26666.0], [50.2, 26666.0], [50.3, 26676.0], [50.4, 26738.0], [50.5, 26784.0], [50.6, 26784.0], [50.7, 26814.0], [50.8, 26848.0], [50.9, 26875.0], [51.0, 26875.0], [51.1, 26885.0], [51.2, 26912.0], [51.3, 26973.0], [51.4, 26973.0], [51.5, 27003.0], [51.6, 27005.0], [51.7, 27005.0], [51.8, 27033.0], [51.9, 27070.0], [52.0, 27093.0], [52.1, 27093.0], [52.2, 27100.0], [52.3, 27101.0], [52.4, 27119.0], [52.5, 27119.0], [52.6, 27159.0], [52.7, 27229.0], [52.8, 27238.0], [52.9, 27238.0], [53.0, 27304.0], [53.1, 27310.0], [53.2, 27331.0], [53.3, 27331.0], [53.4, 27332.0], [53.5, 27339.0], [53.6, 27339.0], [53.7, 27347.0], [53.8, 27348.0], [53.9, 27363.0], [54.0, 27363.0], [54.1, 27382.0], [54.2, 27390.0], [54.3, 27408.0], [54.4, 27408.0], [54.5, 27512.0], [54.6, 27512.0], [54.7, 27513.0], [54.8, 27513.0], [54.9, 27534.0], [55.0, 27539.0], [55.1, 27539.0], [55.2, 27546.0], [55.3, 27595.0], [55.4, 27610.0], [55.5, 27610.0], [55.6, 27636.0], [55.7, 27659.0], [55.8, 27677.0], [55.9, 27677.0], [56.0, 27687.0], [56.1, 27689.0], [56.2, 27695.0], [56.3, 27695.0], [56.4, 27703.0], [56.5, 27707.0], [56.6, 27724.0], [56.7, 27724.0], [56.8, 27741.0], [56.9, 27760.0], [57.0, 27760.0], [57.1, 27796.0], [57.2, 27798.0], [57.3, 27816.0], [57.4, 27816.0], [57.5, 27832.0], [57.6, 27848.0], [57.7, 27867.0], [57.8, 27867.0], [57.9, 27868.0], [58.0, 27889.0], [58.1, 27900.0], [58.2, 27900.0], [58.3, 27918.0], [58.4, 27954.0], [58.5, 27954.0], [58.6, 27961.0], [58.7, 27962.0], [58.8, 27973.0], [58.9, 27973.0], [59.0, 27973.0], [59.1, 27985.0], [59.2, 28004.0], [59.3, 28004.0], [59.4, 28018.0], [59.5, 28032.0], [59.6, 28058.0], [59.7, 28058.0], [59.8, 28060.0], [59.9, 28065.0], [60.0, 28075.0], [60.1, 28075.0], [60.2, 28116.0], [60.3, 28136.0], [60.4, 28136.0], [60.5, 28146.0], [60.6, 28159.0], [60.7, 28197.0], [60.8, 28197.0], [60.9, 28201.0], [61.0, 28210.0], [61.1, 28216.0], [61.2, 28216.0], [61.3, 28241.0], [61.4, 28249.0], [61.5, 28297.0], [61.6, 28297.0], [61.7, 28299.0], [61.8, 28309.0], [61.9, 28309.0], [62.0, 28314.0], [62.1, 28341.0], [62.2, 28354.0], [62.3, 28354.0], [62.4, 28362.0], [62.5, 28386.0], [62.6, 28422.0], [62.7, 28422.0], [62.8, 28425.0], [62.9, 28429.0], [63.0, 28459.0], [63.1, 28459.0], [63.2, 28466.0], [63.3, 28467.0], [63.4, 28467.0], [63.5, 28479.0], [63.6, 28491.0], [63.7, 28504.0], [63.8, 28504.0], [63.9, 28510.0], [64.0, 28537.0], [64.1, 28538.0], [64.2, 28538.0], [64.3, 28547.0], [64.4, 28550.0], [64.5, 28553.0], [64.6, 28553.0], [64.7, 28565.0], [64.8, 28567.0], [64.9, 28581.0], [65.0, 28581.0], [65.1, 28585.0], [65.2, 28587.0], [65.3, 28587.0], [65.4, 28595.0], [65.5, 28597.0], [65.6, 28606.0], [65.7, 28606.0], [65.8, 28614.0], [65.9, 28625.0], [66.0, 28628.0], [66.1, 28628.0], [66.2, 28639.0], [66.3, 28646.0], [66.4, 28646.0], [66.5, 28646.0], [66.6, 28647.0], [66.7, 28649.0], [66.8, 28649.0], [66.9, 28650.0], [67.0, 28663.0], [67.1, 28668.0], [67.2, 28668.0], [67.3, 28671.0], [67.4, 28676.0], [67.5, 28676.0], [67.6, 28676.0], [67.7, 28679.0], [67.8, 28681.0], [67.9, 28686.0], [68.0, 28686.0], [68.1, 28688.0], [68.2, 28694.0], [68.3, 28701.0], [68.4, 28701.0], [68.5, 28701.0], [68.6, 28708.0], [68.7, 28708.0], [68.8, 28709.0], [68.9, 28710.0], [69.0, 28711.0], [69.1, 28711.0], [69.2, 28713.0], [69.3, 28721.0], [69.4, 28726.0], [69.5, 28726.0], [69.6, 28727.0], [69.7, 28734.0], [69.8, 28736.0], [69.9, 28736.0], [70.0, 28736.0], [70.1, 28750.0], [70.2, 28750.0], [70.3, 28761.0], [70.4, 28762.0], [70.5, 28773.0], [70.6, 28773.0], [70.7, 28773.0], [70.8, 28778.0], [70.9, 28786.0], [71.0, 28786.0], [71.1, 28792.0], [71.2, 28794.0], [71.3, 28796.0], [71.4, 28796.0], [71.5, 28798.0], [71.6, 28799.0], [71.7, 28799.0], [71.8, 28800.0], [71.9, 28803.0], [72.0, 28804.0], [72.1, 28804.0], [72.2, 28807.0], [72.3, 28811.0], [72.4, 28812.0], [72.5, 28812.0], [72.6, 28819.0], [72.7, 28822.0], [72.8, 28828.0], [72.9, 28828.0], [73.0, 28829.0], [73.1, 28832.0], [73.2, 28833.0], [73.3, 28833.0], [73.4, 28834.0], [73.5, 28837.0], [73.6, 28837.0], [73.7, 28839.0], [73.8, 28850.0], [73.9, 28860.0], [74.0, 28860.0], [74.1, 28864.0], [74.2, 28869.0], [74.3, 28870.0], [74.4, 28870.0], [74.5, 28877.0], [74.6, 28880.0], [74.7, 28883.0], [74.8, 28883.0], [74.9, 28888.0], [75.0, 28888.0], [75.1, 28888.0], [75.2, 28896.0], [75.3, 28896.0], [75.4, 28896.0], [75.5, 28896.0], [75.6, 28898.0], [75.7, 28908.0], [75.8, 28909.0], [75.9, 28909.0], [76.0, 28910.0], [76.1, 28919.0], [76.2, 28921.0], [76.3, 28921.0], [76.4, 28929.0], [76.5, 28932.0], [76.6, 28933.0], [76.7, 28933.0], [76.8, 28933.0], [76.9, 28933.0], [77.0, 28933.0], [77.1, 28933.0], [77.2, 28933.0], [77.3, 28937.0], [77.4, 28937.0], [77.5, 28938.0], [77.6, 28946.0], [77.7, 28949.0], [77.8, 28949.0], [77.9, 28951.0], [78.0, 28952.0], [78.1, 28958.0], [78.2, 28958.0], [78.3, 28958.0], [78.4, 28958.0], [78.5, 28958.0], [78.6, 28961.0], [78.7, 28963.0], [78.8, 28967.0], [78.9, 28967.0], [79.0, 28967.0], [79.1, 28975.0], [79.2, 28978.0], [79.3, 28978.0], [79.4, 28979.0], [79.5, 28980.0], [79.6, 28981.0], [79.7, 28981.0], [79.8, 28988.0], [79.9, 28990.0], [80.0, 28996.0], [80.1, 28996.0], [80.2, 29007.0], [80.3, 29011.0], [80.4, 29011.0], [80.5, 29011.0], [80.6, 29014.0], [80.7, 29028.0], [80.8, 29028.0], [80.9, 29031.0], [81.0, 29034.0], [81.1, 29043.0], [81.2, 29043.0], [81.3, 29046.0], [81.4, 29051.0], [81.5, 29057.0], [81.6, 29057.0], [81.7, 29057.0], [81.8, 29060.0], [81.9, 29060.0], [82.0, 29062.0], [82.1, 29063.0], [82.2, 29075.0], [82.3, 29075.0], [82.4, 29094.0], [82.5, 29096.0], [82.6, 29097.0], [82.7, 29097.0], [82.8, 29099.0], [82.9, 29100.0], [83.0, 29103.0], [83.1, 29103.0], [83.2, 29106.0], [83.3, 29107.0], [83.4, 29107.0], [83.5, 29114.0], [83.6, 29115.0], [83.7, 29124.0], [83.8, 29124.0], [83.9, 29125.0], [84.0, 29125.0], [84.1, 29133.0], [84.2, 29133.0], [84.3, 29135.0], [84.4, 29141.0], [84.5, 29152.0], [84.6, 29152.0], [84.7, 29153.0], [84.8, 29161.0], [84.9, 29171.0], [85.0, 29171.0], [85.1, 29176.0], [85.2, 29179.0], [85.3, 29179.0], [85.4, 29181.0], [85.5, 29181.0], [85.6, 29181.0], [85.7, 29181.0], [85.8, 29183.0], [85.9, 29187.0], [86.0, 29193.0], [86.1, 29193.0], [86.2, 29194.0], [86.3, 29211.0], [86.4, 29224.0], [86.5, 29224.0], [86.6, 29227.0], [86.7, 29235.0], [86.8, 29235.0], [86.9, 29243.0], [87.0, 29244.0], [87.1, 29248.0], [87.2, 29248.0], [87.3, 29255.0], [87.4, 29275.0], [87.5, 29285.0], [87.6, 29285.0], [87.7, 29286.0], [87.8, 29306.0], [87.9, 29324.0], [88.0, 29324.0], [88.1, 29340.0], [88.2, 29341.0], [88.3, 29348.0], [88.4, 29348.0], [88.5, 29350.0], [88.6, 29360.0], [88.7, 29360.0], [88.8, 29362.0], [88.9, 29364.0], [89.0, 29383.0], [89.1, 29383.0], [89.2, 29393.0], [89.3, 29395.0], [89.4, 29401.0], [89.5, 29401.0], [89.6, 29409.0], [89.7, 29416.0], [89.8, 29429.0], [89.9, 29429.0], [90.0, 29431.0], [90.1, 29452.0], [90.2, 29452.0], [90.3, 29487.0], [90.4, 29487.0], [90.5, 29508.0], [90.6, 29508.0], [90.7, 29519.0], [90.8, 29524.0], [90.9, 29531.0], [91.0, 29531.0], [91.1, 29542.0], [91.2, 29546.0], [91.3, 29566.0], [91.4, 29566.0], [91.5, 29582.0], [91.6, 29584.0], [91.7, 29584.0], [91.8, 29595.0], [91.9, 29599.0], [92.0, 29604.0], [92.1, 29604.0], [92.2, 29629.0], [92.3, 29632.0], [92.4, 29687.0], [92.5, 29687.0], [92.6, 29736.0], [92.7, 29801.0], [92.8, 29822.0], [92.9, 29822.0], [93.0, 29886.0], [93.1, 29905.0], [93.2, 29999.0], [93.3, 29999.0], [93.4, 30096.0], [93.5, 30209.0], [93.6, 30209.0], [93.7, 30213.0], [93.8, 30989.0], [93.9, 31101.0], [94.0, 31101.0], [94.1, 31268.0], [94.2, 31274.0], [94.3, 31364.0], [94.4, 31364.0], [94.5, 31375.0], [94.6, 31399.0], [94.7, 31440.0], [94.8, 31440.0], [94.9, 31444.0], [95.0, 31780.0], [95.1, 31780.0], [95.2, 31906.0], [95.3, 32048.0], [95.4, 32203.0], [95.5, 32203.0], [95.6, 32527.0], [95.7, 32560.0], [95.8, 33022.0], [95.9, 33022.0], [96.0, 33079.0], [96.1, 33282.0], [96.2, 33717.0], [96.3, 33717.0], [96.4, 33858.0], [96.5, 33908.0], [96.6, 34562.0], [96.7, 34562.0], [96.8, 34766.0], [96.9, 34875.0], [97.0, 34875.0], [97.1, 35287.0], [97.2, 35435.0], [97.3, 36142.0], [97.4, 36142.0], [97.5, 36375.0], [97.6, 37248.0], [97.7, 37607.0], [97.8, 37607.0], [97.9, 37955.0], [98.0, 38390.0], [98.1, 38409.0], [98.2, 38409.0], [98.3, 39664.0], [98.4, 40655.0], [98.5, 40655.0], [98.6, 40710.0], [98.7, 40755.0], [98.8, 41673.0], [98.9, 41673.0], [99.0, 42083.0], [99.1, 42296.0], [99.2, 42729.0], [99.3, 42729.0], [99.4, 42764.0], [99.5, 43106.0], [99.6, 43911.0], [99.7, 43911.0], [99.8, 43975.0], [99.9, 44072.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2400.0, "maxY": 33.0, "series": [{"data": [[34700.0, 1.0], [33900.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [36300.0, 1.0], [36100.0, 1.0], [37900.0, 1.0], [38300.0, 1.0], [40700.0, 2.0], [42700.0, 2.0], [43100.0, 1.0], [43900.0, 2.0], [2400.0, 1.0], [5300.0, 1.0], [8300.0, 1.0], [11000.0, 1.0], [13500.0, 1.0], [15900.0, 1.0], [17400.0, 8.0], [17000.0, 3.0], [17100.0, 1.0], [16600.0, 4.0], [16500.0, 3.0], [16900.0, 2.0], [16800.0, 2.0], [16700.0, 1.0], [18200.0, 4.0], [18400.0, 5.0], [17900.0, 6.0], [17700.0, 7.0], [17600.0, 6.0], [17800.0, 3.0], [18000.0, 3.0], [18300.0, 1.0], [17500.0, 9.0], [19300.0, 8.0], [19000.0, 4.0], [18500.0, 4.0], [19200.0, 3.0], [18600.0, 1.0], [19400.0, 1.0], [19100.0, 2.0], [18800.0, 1.0], [19700.0, 1.0], [20000.0, 2.0], [20200.0, 4.0], [19900.0, 7.0], [19800.0, 1.0], [20300.0, 4.0], [20400.0, 1.0], [20100.0, 3.0], [19600.0, 3.0], [19500.0, 2.0], [21500.0, 6.0], [20700.0, 2.0], [21200.0, 2.0], [21000.0, 4.0], [20900.0, 2.0], [21400.0, 3.0], [21300.0, 2.0], [21100.0, 1.0], [20800.0, 2.0], [22400.0, 5.0], [21900.0, 5.0], [22500.0, 1.0], [22100.0, 2.0], [22200.0, 4.0], [21800.0, 5.0], [22000.0, 3.0], [21600.0, 2.0], [21700.0, 2.0], [23400.0, 10.0], [23200.0, 6.0], [22600.0, 3.0], [23000.0, 8.0], [23100.0, 4.0], [22800.0, 7.0], [23300.0, 3.0], [23500.0, 3.0], [23800.0, 4.0], [24500.0, 4.0], [24100.0, 2.0], [23900.0, 9.0], [24000.0, 7.0], [24300.0, 5.0], [24200.0, 10.0], [24400.0, 4.0], [23600.0, 9.0], [23700.0, 4.0], [24800.0, 5.0], [25100.0, 4.0], [25500.0, 4.0], [25200.0, 6.0], [24900.0, 3.0], [25300.0, 5.0], [25000.0, 8.0], [25400.0, 8.0], [24700.0, 6.0], [24600.0, 1.0], [26400.0, 1.0], [26600.0, 3.0], [26000.0, 5.0], [25900.0, 1.0], [26200.0, 7.0], [25600.0, 4.0], [25700.0, 5.0], [25800.0, 2.0], [26100.0, 2.0], [26500.0, 7.0], [26300.0, 2.0], [27500.0, 7.0], [27000.0, 5.0], [27300.0, 10.0], [26800.0, 4.0], [27400.0, 1.0], [27200.0, 2.0], [27600.0, 7.0], [27100.0, 4.0], [26700.0, 2.0], [26900.0, 2.0], [27900.0, 8.0], [28100.0, 5.0], [28200.0, 7.0], [28600.0, 20.0], [28000.0, 7.0], [27700.0, 7.0], [28400.0, 8.0], [28300.0, 6.0], [28500.0, 14.0], [27800.0, 6.0], [29500.0, 11.0], [29100.0, 25.0], [29000.0, 20.0], [28900.0, 33.0], [29200.0, 11.0], [29300.0, 12.0], [29600.0, 4.0], [29400.0, 8.0], [28800.0, 29.0], [28700.0, 25.0], [29800.0, 3.0], [30000.0, 1.0], [30200.0, 2.0], [29700.0, 1.0], [29900.0, 2.0], [31200.0, 2.0], [31300.0, 3.0], [31400.0, 2.0], [31100.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [32200.0, 1.0], [31900.0, 1.0], [32500.0, 2.0], [32000.0, 1.0], [33800.0, 1.0], [33200.0, 1.0], [33000.0, 2.0], [34800.0, 1.0], [35400.0, 1.0], [35200.0, 1.0], [38400.0, 1.0], [37200.0, 1.0], [37600.0, 1.0], [40600.0, 1.0], [39600.0, 1.0], [42200.0, 1.0], [41600.0, 1.0], [42000.0, 1.0], [44000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.60265244E12, "maxY": 10.0, "series": [{"data": [[1.60265358E12, 10.0], [1.60265388E12, 10.0], [1.60265256E12, 10.0], [1.60265418E12, 10.0], [1.60265286E12, 10.0], [1.60265316E12, 10.0], [1.60265346E12, 10.0], [1.60265376E12, 10.0], [1.6026531E12, 10.0], [1.6026534E12, 10.0], [1.6026537E12, 10.0], [1.602654E12, 10.0], [1.60265268E12, 10.0], [1.6026543E12, 9.03448275862069], [1.60265298E12, 10.0], [1.60265328E12, 10.0], [1.60265262E12, 10.0], [1.60265292E12, 10.0], [1.60265322E12, 10.0], [1.60265352E12, 10.0], [1.60265382E12, 10.0], [1.60265412E12, 10.0], [1.6026525E12, 10.0], [1.6026528E12, 10.0], [1.60265436E12, 1.5], [1.60265244E12, 10.0], [1.60265406E12, 10.0], [1.60265274E12, 10.0], [1.60265304E12, 10.0], [1.60265334E12, 10.0], [1.60265364E12, 10.0], [1.60265394E12, 10.0], [1.60265424E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16632.0, "minX": 1.0, "maxY": 25836.152892561993, "series": [{"data": [[8.0, 16855.0], [4.0, 16692.0], [2.0, 16931.0], [1.0, 17549.0], [9.0, 16922.0], [10.0, 25836.152892561993], [5.0, 16693.0], [6.0, 16632.0], [3.0, 16865.0], [7.0, 16726.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25726.410884353754]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13.083333333333334, "minX": 1.60265244E12, "maxY": 175439.56666666668, "series": [{"data": [[1.60265358E12, 70829.9], [1.60265388E12, 57486.98333333333], [1.60265256E12, 143358.41666666666], [1.60265418E12, 52226.0], [1.60265286E12, 50542.71666666667], [1.60265316E12, 32375.75], [1.60265346E12, 64369.38333333333], [1.60265376E12, 47890.3], [1.6026531E12, 41761.03333333333], [1.6026534E12, 142151.76666666666], [1.6026537E12, 48209.36666666667], [1.602654E12, 48568.0], [1.60265268E12, 79978.9], [1.6026543E12, 54652.8], [1.60265298E12, 56901.916666666664], [1.60265328E12, 66286.2], [1.60265262E12, 57683.21666666667], [1.60265292E12, 45768.98333333333], [1.60265322E12, 175439.56666666668], [1.60265352E12, 69277.55], [1.60265382E12, 48437.51666666667], [1.60265412E12, 28707.2], [1.6026525E12, 101739.86666666667], [1.6026528E12, 45203.46666666667], [1.60265436E12, 870.5833333333334], [1.60265244E12, 164758.25], [1.60265406E12, 38814.316666666666], [1.60265274E12, 48137.166666666664], [1.60265304E12, 44216.3], [1.60265334E12, 163162.18333333332], [1.60265364E12, 32723.8], [1.60265394E12, 45286.03333333333], [1.60265424E12, 155623.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60265358E12, 176.53333333333333], [1.60265388E12, 161.71666666666667], [1.60265256E12, 164.88333333333333], [1.60265418E12, 194.83333333333334], [1.60265286E12, 153.43333333333334], [1.60265316E12, 175.18333333333334], [1.60265346E12, 189.25], [1.60265376E12, 146.11666666666667], [1.6026531E12, 160.68333333333334], [1.6026534E12, 196.76666666666668], [1.6026537E12, 153.45], [1.602654E12, 153.33333333333334], [1.60265268E12, 183.56666666666666], [1.6026543E12, 201.61666666666667], [1.60265298E12, 160.96666666666667], [1.60265328E12, 181.18333333333334], [1.60265262E12, 125.55], [1.60265292E12, 146.11666666666667], [1.60265322E12, 225.13333333333333], [1.60265352E12, 177.85], [1.60265382E12, 153.45], [1.60265412E12, 189.7], [1.6026525E12, 207.3], [1.6026528E12, 146.11666666666667], [1.60265436E12, 13.083333333333334], [1.60265244E12, 102.43333333333334], [1.60265406E12, 167.78333333333333], [1.60265274E12, 161.03333333333333], [1.60265304E12, 146.05], [1.60265334E12, 185.85], [1.60265364E12, 124.18333333333334], [1.60265394E12, 153.4], [1.60265424E12, 160.73333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17240.0, "minX": 1.60265244E12, "maxY": 38392.82352941176, "series": [{"data": [[1.60265358E12, 23914.500000000004], [1.60265388E12, 27457.227272727272], [1.60265256E12, 22104.86363636364], [1.60265418E12, 22553.51851851852], [1.60265286E12, 28893.523809523813], [1.60265316E12, 25180.333333333332], [1.60265346E12, 19495.44444444444], [1.60265376E12, 29063.55], [1.6026531E12, 28393.863636363632], [1.6026534E12, 23150.7037037037], [1.6026537E12, 28536.38095238095], [1.602654E12, 28696.857142857138], [1.60265268E12, 24652.52], [1.6026543E12, 22967.379310344826], [1.60265298E12, 28369.22727272727], [1.60265328E12, 24279.576923076922], [1.60265262E12, 38392.82352941176], [1.60265292E12, 29187.800000000007], [1.60265322E12, 19375.387096774193], [1.60265352E12, 26759.916666666664], [1.60265382E12, 28770.04761904762], [1.60265412E12, 24084.88461538462], [1.6026525E12, 21975.275862068975], [1.6026528E12, 29264.8], [1.60265436E12, 17240.0], [1.60265244E12, 17665.214285714286], [1.60265406E12, 26305.434782608696], [1.60265274E12, 26865.454545454544], [1.60265304E12, 28936.1], [1.60265334E12, 22196.76923076923], [1.60265364E12, 35817.64705882353], [1.60265394E12, 28914.285714285714], [1.60265424E12, 24793.636363636364]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17238.0, "minX": 1.60265244E12, "maxY": 38391.0, "series": [{"data": [[1.60265358E12, 23913.000000000004], [1.60265388E12, 27455.954545454548], [1.60265256E12, 22101.772727272724], [1.60265418E12, 22551.999999999996], [1.60265286E12, 28892.333333333332], [1.60265316E12, 25179.875], [1.60265346E12, 19493.62962962963], [1.60265376E12, 29062.149999999998], [1.6026531E12, 28392.909090909096], [1.6026534E12, 23148.11111111111], [1.6026537E12, 28535.142857142855], [1.602654E12, 28695.380952380954], [1.60265268E12, 24651.079999999998], [1.6026543E12, 22965.310344827583], [1.60265298E12, 28367.86363636364], [1.60265328E12, 24277.26923076923], [1.60265262E12, 38391.0], [1.60265292E12, 29186.800000000003], [1.60265322E12, 19372.064516129038], [1.60265352E12, 26758.333333333336], [1.60265382E12, 28768.904761904767], [1.60265412E12, 24084.57692307693], [1.6026525E12, 21973.413793103442], [1.6026528E12, 29263.750000000004], [1.60265436E12, 17238.0], [1.60265244E12, 17660.214285714286], [1.60265406E12, 26304.304347826088], [1.60265274E12, 26864.31818181818], [1.60265304E12, 28934.999999999996], [1.60265334E12, 22193.30769230769], [1.60265364E12, 35816.76470588236], [1.60265394E12, 28913.142857142855], [1.60265424E12, 24789.772727272728]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60265244E12, "maxY": 6.571428571428573, "series": [{"data": [[1.60265358E12, 0.5], [1.60265388E12, 0.40909090909090917], [1.60265256E12, 0.13636363636363635], [1.60265418E12, 0.4814814814814815], [1.60265286E12, 0.38095238095238104], [1.60265316E12, 0.5416666666666667], [1.60265346E12, 0.40740740740740744], [1.60265376E12, 0.8499999999999999], [1.6026531E12, 0.681818181818182], [1.6026534E12, 0.18518518518518517], [1.6026537E12, 0.47619047619047616], [1.602654E12, 0.5714285714285714], [1.60265268E12, 0.5600000000000002], [1.6026543E12, 0.4482758620689655], [1.60265298E12, 0.45454545454545453], [1.60265328E12, 0.3461538461538461], [1.60265262E12, 0.7647058823529413], [1.60265292E12, 0.65], [1.60265322E12, 0.4193548387096774], [1.60265352E12, 0.6249999999999999], [1.60265382E12, 0.2857142857142857], [1.60265412E12, 0.4615384615384615], [1.6026525E12, 0.5172413793103449], [1.6026528E12, 0.3], [1.60265436E12, 0.0], [1.60265244E12, 6.571428571428573], [1.60265406E12, 0.1739130434782609], [1.60265274E12, 0.5454545454545455], [1.60265304E12, 0.20000000000000004], [1.60265334E12, 0.2692307692307692], [1.60265364E12, 0.23529411764705882], [1.60265394E12, 0.47619047619047616], [1.60265424E12, 0.4090909090909091]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2427.0, "minX": 1.60265244E12, "maxY": 44072.0, "series": [{"data": [[1.60265358E12, 27005.0], [1.60265388E12, 28504.0], [1.60265256E12, 29822.0], [1.60265418E12, 27347.0], [1.60265286E12, 29409.0], [1.60265316E12, 27900.0], [1.60265346E12, 29508.0], [1.60265376E12, 29340.0], [1.6026531E12, 29599.0], [1.6026534E12, 28297.0], [1.6026537E12, 29057.0], [1.602654E12, 29133.0], [1.60265268E12, 30096.0], [1.6026543E12, 37607.0], [1.60265298E12, 28929.0], [1.60265328E12, 31440.0], [1.60265262E12, 44072.0], [1.60265292E12, 29632.0], [1.60265322E12, 24219.0], [1.60265352E12, 31906.0], [1.60265382E12, 29057.0], [1.60265412E12, 28386.0], [1.6026525E12, 27304.0], [1.6026528E12, 29736.0], [1.60265436E12, 17549.0], [1.60265244E12, 26666.0], [1.60265406E12, 28425.0], [1.60265274E12, 30213.0], [1.60265304E12, 29524.0], [1.60265334E12, 25409.0], [1.60265364E12, 42764.0], [1.60265394E12, 29255.0], [1.60265424E12, 28597.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60265358E12, 21804.0], [1.60265388E12, 26547.0], [1.60265256E12, 17744.0], [1.60265418E12, 18852.0], [1.60265286E12, 28467.0], [1.60265316E12, 23353.0], [1.60265346E12, 17114.0], [1.60265376E12, 28864.0], [1.6026531E12, 25238.0], [1.6026534E12, 19357.0], [1.6026537E12, 25823.0], [1.602654E12, 28354.0], [1.60265268E12, 21974.0], [1.6026543E12, 16567.0], [1.60265298E12, 27796.0], [1.60265328E12, 17473.0], [1.60265262E12, 31274.0], [1.60265292E12, 28650.0], [1.60265322E12, 17027.0], [1.60265352E12, 22891.0], [1.60265382E12, 28249.0], [1.60265412E12, 20234.0], [1.6026525E12, 17616.0], [1.6026528E12, 28694.0], [1.60265436E12, 16931.0], [1.60265244E12, 2427.0], [1.60265406E12, 23263.0], [1.60265274E12, 23701.0], [1.60265304E12, 28547.0], [1.60265334E12, 17471.0], [1.60265364E12, 29416.0], [1.60265394E12, 27390.0], [1.60265424E12, 18528.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60265358E12, 21804.0], [1.60265388E12, 26547.0], [1.60265256E12, 17744.0], [1.60265418E12, 18852.0], [1.60265286E12, 28467.0], [1.60265316E12, 23353.0], [1.60265346E12, 17114.0], [1.60265376E12, 28864.0], [1.6026531E12, 25238.0], [1.6026534E12, 19357.0], [1.6026537E12, 25823.0], [1.602654E12, 28354.0], [1.60265268E12, 21974.0], [1.6026543E12, 16567.0], [1.60265298E12, 27796.0], [1.60265328E12, 17473.0], [1.60265262E12, 31274.0], [1.60265292E12, 28650.0], [1.60265322E12, 17027.0], [1.60265352E12, 22891.0], [1.60265382E12, 28249.0], [1.60265412E12, 20234.0], [1.6026525E12, 17616.0], [1.6026528E12, 28694.0], [1.60265436E12, 16931.0], [1.60265244E12, 2427.0], [1.60265406E12, 23263.0], [1.60265274E12, 23701.0], [1.60265304E12, 28547.0], [1.60265334E12, 17471.0], [1.60265364E12, 29416.0], [1.60265394E12, 27390.0], [1.60265424E12, 18528.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60265358E12, 21804.0], [1.60265388E12, 26547.0], [1.60265256E12, 17744.0], [1.60265418E12, 18852.0], [1.60265286E12, 28467.0], [1.60265316E12, 23353.0], [1.60265346E12, 17114.0], [1.60265376E12, 28864.0], [1.6026531E12, 25238.0], [1.6026534E12, 19357.0], [1.6026537E12, 25823.0], [1.602654E12, 28354.0], [1.60265268E12, 21974.0], [1.6026543E12, 16567.0], [1.60265298E12, 27796.0], [1.60265328E12, 17473.0], [1.60265262E12, 31274.0], [1.60265292E12, 28650.0], [1.60265322E12, 17027.0], [1.60265352E12, 22891.0], [1.60265382E12, 28249.0], [1.60265412E12, 20234.0], [1.6026525E12, 17616.0], [1.6026528E12, 28694.0], [1.60265436E12, 16931.0], [1.60265244E12, 2427.0], [1.60265406E12, 23263.0], [1.60265274E12, 23701.0], [1.60265304E12, 28547.0], [1.60265334E12, 17471.0], [1.60265364E12, 29416.0], [1.60265394E12, 27390.0], [1.60265424E12, 18528.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60265358E12, 21804.0], [1.60265388E12, 26547.0], [1.60265256E12, 17744.0], [1.60265418E12, 18852.0], [1.60265286E12, 28467.0], [1.60265316E12, 23353.0], [1.60265346E12, 17114.0], [1.60265376E12, 28864.0], [1.6026531E12, 25238.0], [1.6026534E12, 19357.0], [1.6026537E12, 25823.0], [1.602654E12, 28354.0], [1.60265268E12, 21974.0], [1.6026543E12, 16567.0], [1.60265298E12, 27796.0], [1.60265328E12, 17473.0], [1.60265262E12, 31274.0], [1.60265292E12, 28650.0], [1.60265322E12, 17027.0], [1.60265352E12, 22891.0], [1.60265382E12, 28249.0], [1.60265412E12, 20234.0], [1.6026525E12, 17616.0], [1.6026528E12, 28694.0], [1.60265436E12, 16931.0], [1.60265244E12, 2427.0], [1.60265406E12, 23263.0], [1.60265274E12, 23701.0], [1.60265304E12, 28547.0], [1.60265334E12, 17471.0], [1.60265364E12, 29416.0], [1.60265394E12, 27390.0], [1.60265424E12, 18528.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60265358E12, 23906.0], [1.60265388E12, 27634.5], [1.60265256E12, 22476.5], [1.60265418E12, 21811.0], [1.60265286E12, 28762.0], [1.60265316E12, 25002.5], [1.60265346E12, 17791.0], [1.60265376E12, 29054.5], [1.6026531E12, 29136.0], [1.6026534E12, 23226.0], [1.6026537E12, 28877.0], [1.602654E12, 28708.0], [1.60265268E12, 24219.0], [1.6026543E12, 18060.0], [1.60265298E12, 28478.5], [1.60265328E12, 21925.0], [1.60265262E12, 38409.0], [1.60265292E12, 29243.5], [1.60265322E12, 18664.0], [1.60265352E12, 26780.5], [1.60265382E12, 28828.0], [1.60265412E12, 23656.5], [1.6026525E12, 20298.0], [1.6026528E12, 29218.0], [1.60265436E12, 17240.0], [1.60265244E12, 19545.0], [1.60265406E12, 25863.0], [1.60265274E12, 26685.0], [1.60265304E12, 28892.0], [1.60265334E12, 22822.0], [1.60265364E12, 35287.0], [1.60265394E12, 28958.0], [1.60265424E12, 27321.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265436E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26604.0, "minX": 1.0, "maxY": 26604.0, "series": [{"data": [[1.0, 26604.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26603.0, "minX": 1.0, "maxY": 26603.0, "series": [{"data": [[1.0, 26603.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60265244E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265358E12, 0.4], [1.60265388E12, 0.36666666666666664], [1.60265256E12, 0.36666666666666664], [1.60265418E12, 0.45], [1.60265286E12, 0.35], [1.60265316E12, 0.4], [1.60265346E12, 0.45], [1.60265376E12, 0.3333333333333333], [1.6026531E12, 0.36666666666666664], [1.6026534E12, 0.45], [1.6026537E12, 0.35], [1.602654E12, 0.35], [1.60265268E12, 0.4166666666666667], [1.6026543E12, 0.35], [1.60265298E12, 0.36666666666666664], [1.60265328E12, 0.43333333333333335], [1.60265262E12, 0.2833333333333333], [1.60265292E12, 0.3333333333333333], [1.60265322E12, 0.5166666666666667], [1.60265352E12, 0.4], [1.60265382E12, 0.35], [1.60265412E12, 0.43333333333333335], [1.6026525E12, 0.48333333333333334], [1.6026528E12, 0.3333333333333333], [1.60265244E12, 0.4], [1.60265406E12, 0.38333333333333336], [1.60265274E12, 0.36666666666666664], [1.60265304E12, 0.3333333333333333], [1.60265334E12, 0.43333333333333335], [1.60265364E12, 0.2833333333333333], [1.60265394E12, 0.35], [1.60265424E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6026543E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60265244E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265358E12, 0.4], [1.60265388E12, 0.36666666666666664], [1.60265256E12, 0.36666666666666664], [1.60265418E12, 0.45], [1.60265286E12, 0.35], [1.60265316E12, 0.4], [1.60265346E12, 0.45], [1.60265376E12, 0.3333333333333333], [1.6026531E12, 0.36666666666666664], [1.6026534E12, 0.45], [1.6026537E12, 0.35], [1.602654E12, 0.35], [1.60265268E12, 0.4166666666666667], [1.6026543E12, 0.48333333333333334], [1.60265298E12, 0.36666666666666664], [1.60265328E12, 0.43333333333333335], [1.60265262E12, 0.2833333333333333], [1.60265292E12, 0.3333333333333333], [1.60265322E12, 0.5166666666666667], [1.60265352E12, 0.4], [1.60265382E12, 0.35], [1.60265412E12, 0.43333333333333335], [1.6026525E12, 0.48333333333333334], [1.6026528E12, 0.3333333333333333], [1.60265436E12, 0.03333333333333333], [1.60265244E12, 0.23333333333333334], [1.60265406E12, 0.38333333333333336], [1.60265274E12, 0.36666666666666664], [1.60265304E12, 0.3333333333333333], [1.60265334E12, 0.43333333333333335], [1.60265364E12, 0.2833333333333333], [1.60265394E12, 0.35], [1.60265424E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60265244E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265358E12, 0.4], [1.60265388E12, 0.36666666666666664], [1.60265256E12, 0.36666666666666664], [1.60265418E12, 0.45], [1.60265286E12, 0.35], [1.60265316E12, 0.4], [1.60265346E12, 0.45], [1.60265376E12, 0.3333333333333333], [1.6026531E12, 0.36666666666666664], [1.6026534E12, 0.45], [1.6026537E12, 0.35], [1.602654E12, 0.35], [1.60265268E12, 0.4166666666666667], [1.6026543E12, 0.48333333333333334], [1.60265298E12, 0.36666666666666664], [1.60265328E12, 0.43333333333333335], [1.60265262E12, 0.2833333333333333], [1.60265292E12, 0.3333333333333333], [1.60265322E12, 0.5166666666666667], [1.60265352E12, 0.4], [1.60265382E12, 0.35], [1.60265412E12, 0.43333333333333335], [1.6026525E12, 0.48333333333333334], [1.6026528E12, 0.3333333333333333], [1.60265436E12, 0.03333333333333333], [1.60265244E12, 0.23333333333333334], [1.60265406E12, 0.38333333333333336], [1.60265274E12, 0.36666666666666664], [1.60265304E12, 0.3333333333333333], [1.60265334E12, 0.43333333333333335], [1.60265364E12, 0.2833333333333333], [1.60265394E12, 0.35], [1.60265424E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60265244E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60265358E12, 0.4], [1.60265388E12, 0.36666666666666664], [1.60265256E12, 0.36666666666666664], [1.60265418E12, 0.45], [1.60265286E12, 0.35], [1.60265316E12, 0.4], [1.60265346E12, 0.45], [1.60265376E12, 0.3333333333333333], [1.6026531E12, 0.36666666666666664], [1.6026534E12, 0.45], [1.6026537E12, 0.35], [1.602654E12, 0.35], [1.60265268E12, 0.4166666666666667], [1.6026543E12, 0.48333333333333334], [1.60265298E12, 0.36666666666666664], [1.60265328E12, 0.43333333333333335], [1.60265262E12, 0.2833333333333333], [1.60265292E12, 0.3333333333333333], [1.60265322E12, 0.5166666666666667], [1.60265352E12, 0.4], [1.60265382E12, 0.35], [1.60265412E12, 0.43333333333333335], [1.6026525E12, 0.48333333333333334], [1.6026528E12, 0.3333333333333333], [1.60265436E12, 0.03333333333333333], [1.60265244E12, 0.23333333333333334], [1.60265406E12, 0.38333333333333336], [1.60265274E12, 0.36666666666666664], [1.60265304E12, 0.3333333333333333], [1.60265334E12, 0.43333333333333335], [1.60265364E12, 0.2833333333333333], [1.60265394E12, 0.35], [1.60265424E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

