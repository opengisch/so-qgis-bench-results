/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3061.0, "minX": 0.0, "maxY": 44069.0, "series": [{"data": [[0.0, 3061.0], [0.1, 3061.0], [0.2, 5211.0], [0.3, 8235.0], [0.4, 8235.0], [0.5, 10980.0], [0.6, 13445.0], [0.7, 15891.0], [0.8, 15891.0], [0.9, 16784.0], [1.0, 16908.0], [1.1, 17022.0], [1.2, 17022.0], [1.3, 17040.0], [1.4, 17084.0], [1.5, 17105.0], [1.6, 17105.0], [1.7, 17133.0], [1.8, 17285.0], [1.9, 17285.0], [2.0, 17321.0], [2.1, 17334.0], [2.2, 17372.0], [2.3, 17372.0], [2.4, 17377.0], [2.5, 17439.0], [2.6, 17440.0], [2.7, 17440.0], [2.8, 17498.0], [2.9, 17507.0], [3.0, 17512.0], [3.1, 17512.0], [3.2, 17518.0], [3.3, 17523.0], [3.4, 17523.0], [3.5, 17526.0], [3.6, 17564.0], [3.7, 17567.0], [3.8, 17567.0], [3.9, 17567.0], [4.0, 17574.0], [4.1, 17596.0], [4.2, 17596.0], [4.3, 17644.0], [4.4, 17702.0], [4.5, 17741.0], [4.6, 17741.0], [4.7, 17745.0], [4.8, 17761.0], [4.9, 17804.0], [5.0, 17804.0], [5.1, 17805.0], [5.2, 17813.0], [5.3, 17813.0], [5.4, 17827.0], [5.5, 17901.0], [5.6, 17916.0], [5.7, 17916.0], [5.8, 17952.0], [5.9, 17962.0], [6.0, 17967.0], [6.1, 17967.0], [6.2, 17993.0], [6.3, 18058.0], [6.4, 18080.0], [6.5, 18080.0], [6.6, 18090.0], [6.7, 18151.0], [6.8, 18151.0], [6.9, 18162.0], [7.0, 18192.0], [7.1, 18244.0], [7.2, 18244.0], [7.3, 18263.0], [7.4, 18322.0], [7.5, 18332.0], [7.6, 18332.0], [7.7, 18346.0], [7.8, 18370.0], [7.9, 18378.0], [8.0, 18378.0], [8.1, 18401.0], [8.2, 18415.0], [8.3, 18466.0], [8.4, 18466.0], [8.5, 18508.0], [8.6, 18535.0], [8.7, 18535.0], [8.8, 18540.0], [8.9, 18542.0], [9.0, 18652.0], [9.1, 18652.0], [9.2, 18687.0], [9.3, 18705.0], [9.4, 18709.0], [9.5, 18709.0], [9.6, 18728.0], [9.7, 18736.0], [9.8, 18763.0], [9.9, 18763.0], [10.0, 18815.0], [10.1, 18978.0], [10.2, 18978.0], [10.3, 18992.0], [10.4, 19057.0], [10.5, 19068.0], [10.6, 19068.0], [10.7, 19111.0], [10.8, 19213.0], [10.9, 19215.0], [11.0, 19215.0], [11.1, 19217.0], [11.2, 19261.0], [11.3, 19266.0], [11.4, 19266.0], [11.5, 19368.0], [11.6, 19399.0], [11.7, 19399.0], [11.8, 19426.0], [11.9, 19427.0], [12.0, 19442.0], [12.1, 19442.0], [12.2, 19497.0], [12.3, 19556.0], [12.4, 19600.0], [12.5, 19600.0], [12.6, 19659.0], [12.7, 19675.0], [12.8, 19683.0], [12.9, 19683.0], [13.0, 19698.0], [13.1, 19794.0], [13.2, 19851.0], [13.3, 19851.0], [13.4, 19858.0], [13.5, 19919.0], [13.6, 19919.0], [13.7, 19919.0], [13.8, 19936.0], [13.9, 19945.0], [14.0, 19945.0], [14.1, 19950.0], [14.2, 20034.0], [14.3, 20038.0], [14.4, 20038.0], [14.5, 20074.0], [14.6, 20111.0], [14.7, 20113.0], [14.8, 20113.0], [14.9, 20135.0], [15.0, 20136.0], [15.1, 20136.0], [15.2, 20189.0], [15.3, 20192.0], [15.4, 20215.0], [15.5, 20215.0], [15.6, 20223.0], [15.7, 20232.0], [15.8, 20303.0], [15.9, 20303.0], [16.0, 20404.0], [16.1, 20408.0], [16.2, 20450.0], [16.3, 20450.0], [16.4, 20452.0], [16.5, 20546.0], [16.6, 20572.0], [16.7, 20572.0], [16.8, 20744.0], [16.9, 20860.0], [17.0, 20860.0], [17.1, 20961.0], [17.2, 21047.0], [17.3, 21275.0], [17.4, 21275.0], [17.5, 21401.0], [17.6, 21465.0], [17.7, 21467.0], [17.8, 21467.0], [17.9, 21590.0], [18.0, 21597.0], [18.1, 21632.0], [18.2, 21632.0], [18.3, 21646.0], [18.4, 21677.0], [18.5, 21677.0], [18.6, 21680.0], [18.7, 21687.0], [18.8, 21689.0], [18.9, 21689.0], [19.0, 21718.0], [19.1, 21721.0], [19.2, 21786.0], [19.3, 21786.0], [19.4, 21814.0], [19.5, 21888.0], [19.6, 21900.0], [19.7, 21900.0], [19.8, 21927.0], [19.9, 22068.0], [20.0, 22091.0], [20.1, 22091.0], [20.2, 22103.0], [20.3, 22107.0], [20.4, 22107.0], [20.5, 22147.0], [20.6, 22289.0], [20.7, 22309.0], [20.8, 22309.0], [20.9, 22331.0], [21.0, 22341.0], [21.1, 22380.0], [21.2, 22380.0], [21.3, 22384.0], [21.4, 22415.0], [21.5, 22437.0], [21.6, 22437.0], [21.7, 22534.0], [21.8, 22542.0], [21.9, 22542.0], [22.0, 22554.0], [22.1, 22572.0], [22.2, 22594.0], [22.3, 22594.0], [22.4, 22626.0], [22.5, 22628.0], [22.6, 22649.0], [22.7, 22649.0], [22.8, 22658.0], [22.9, 22663.0], [23.0, 22665.0], [23.1, 22665.0], [23.2, 22710.0], [23.3, 22810.0], [23.4, 22810.0], [23.5, 22855.0], [23.6, 22860.0], [23.7, 22939.0], [23.8, 22939.0], [23.9, 22943.0], [24.0, 22978.0], [24.1, 23012.0], [24.2, 23012.0], [24.3, 23053.0], [24.4, 23064.0], [24.5, 23078.0], [24.6, 23078.0], [24.7, 23084.0], [24.8, 23107.0], [24.9, 23116.0], [25.0, 23116.0], [25.1, 23143.0], [25.2, 23181.0], [25.3, 23181.0], [25.4, 23190.0], [25.5, 23193.0], [25.6, 23201.0], [25.7, 23201.0], [25.8, 23202.0], [25.9, 23227.0], [26.0, 23238.0], [26.1, 23238.0], [26.2, 23241.0], [26.3, 23272.0], [26.4, 23350.0], [26.5, 23350.0], [26.6, 23376.0], [26.7, 23418.0], [26.8, 23418.0], [26.9, 23483.0], [27.0, 23491.0], [27.1, 23514.0], [27.2, 23514.0], [27.3, 23515.0], [27.4, 23540.0], [27.5, 23561.0], [27.6, 23561.0], [27.7, 23603.0], [27.8, 23615.0], [27.9, 23616.0], [28.0, 23616.0], [28.1, 23632.0], [28.2, 23669.0], [28.3, 23693.0], [28.4, 23693.0], [28.5, 23722.0], [28.6, 23738.0], [28.7, 23738.0], [28.8, 23799.0], [28.9, 23852.0], [29.0, 23864.0], [29.1, 23864.0], [29.2, 23914.0], [29.3, 23977.0], [29.4, 23990.0], [29.5, 23990.0], [29.6, 24006.0], [29.7, 24037.0], [29.8, 24049.0], [29.9, 24049.0], [30.0, 24077.0], [30.1, 24080.0], [30.2, 24080.0], [30.3, 24080.0], [30.4, 24081.0], [30.5, 24120.0], [30.6, 24120.0], [30.7, 24128.0], [30.8, 24148.0], [30.9, 24164.0], [31.0, 24164.0], [31.1, 24171.0], [31.2, 24171.0], [31.3, 24181.0], [31.4, 24181.0], [31.5, 24191.0], [31.6, 24192.0], [31.7, 24192.0], [31.8, 24269.0], [31.9, 24272.0], [32.0, 24281.0], [32.1, 24281.0], [32.2, 24293.0], [32.3, 24301.0], [32.4, 24305.0], [32.5, 24305.0], [32.6, 24336.0], [32.7, 24351.0], [32.8, 24401.0], [32.9, 24401.0], [33.0, 24401.0], [33.1, 24422.0], [33.2, 24445.0], [33.3, 24445.0], [33.4, 24459.0], [33.5, 24471.0], [33.6, 24471.0], [33.7, 24473.0], [33.8, 24474.0], [33.9, 24482.0], [34.0, 24482.0], [34.1, 24504.0], [34.2, 24516.0], [34.3, 24517.0], [34.4, 24517.0], [34.5, 24532.0], [34.6, 24568.0], [34.7, 24585.0], [34.8, 24585.0], [34.9, 24595.0], [35.0, 24613.0], [35.1, 24613.0], [35.2, 24624.0], [35.3, 24624.0], [35.4, 24624.0], [35.5, 24624.0], [35.6, 24628.0], [35.7, 24651.0], [35.8, 24654.0], [35.9, 24654.0], [36.0, 24656.0], [36.1, 24665.0], [36.2, 24676.0], [36.3, 24676.0], [36.4, 24682.0], [36.5, 24682.0], [36.6, 24716.0], [36.7, 24716.0], [36.8, 24735.0], [36.9, 24751.0], [37.0, 24751.0], [37.1, 24754.0], [37.2, 24755.0], [37.3, 24773.0], [37.4, 24773.0], [37.5, 24812.0], [37.6, 24823.0], [37.7, 24825.0], [37.8, 24825.0], [37.9, 24844.0], [38.0, 24846.0], [38.1, 24859.0], [38.2, 24859.0], [38.3, 24868.0], [38.4, 24876.0], [38.5, 24876.0], [38.6, 24882.0], [38.7, 24892.0], [38.8, 24896.0], [38.9, 24896.0], [39.0, 24905.0], [39.1, 24975.0], [39.2, 24977.0], [39.3, 24977.0], [39.4, 25108.0], [39.5, 25123.0], [39.6, 25154.0], [39.7, 25154.0], [39.8, 25170.0], [39.9, 25212.0], [40.0, 25244.0], [40.1, 25244.0], [40.2, 25346.0], [40.3, 25419.0], [40.4, 25419.0], [40.5, 25496.0], [40.6, 25518.0], [40.7, 25540.0], [40.8, 25540.0], [40.9, 25545.0], [41.0, 25558.0], [41.1, 25563.0], [41.2, 25563.0], [41.3, 25568.0], [41.4, 25604.0], [41.5, 25610.0], [41.6, 25610.0], [41.7, 25610.0], [41.8, 25687.0], [41.9, 25687.0], [42.0, 25692.0], [42.1, 25722.0], [42.2, 25745.0], [42.3, 25745.0], [42.4, 25809.0], [42.5, 25818.0], [42.6, 25820.0], [42.7, 25820.0], [42.8, 25824.0], [42.9, 25872.0], [43.0, 25889.0], [43.1, 25889.0], [43.2, 25893.0], [43.3, 25908.0], [43.4, 25908.0], [43.5, 25914.0], [43.6, 25954.0], [43.7, 25978.0], [43.8, 25978.0], [43.9, 25997.0], [44.0, 26010.0], [44.1, 26030.0], [44.2, 26030.0], [44.3, 26035.0], [44.4, 26084.0], [44.5, 26089.0], [44.6, 26089.0], [44.7, 26110.0], [44.8, 26111.0], [44.9, 26139.0], [45.0, 26139.0], [45.1, 26153.0], [45.2, 26188.0], [45.3, 26188.0], [45.4, 26221.0], [45.5, 26238.0], [45.6, 26255.0], [45.7, 26255.0], [45.8, 26322.0], [45.9, 26339.0], [46.0, 26349.0], [46.1, 26349.0], [46.2, 26370.0], [46.3, 26383.0], [46.4, 26384.0], [46.5, 26384.0], [46.6, 26402.0], [46.7, 26403.0], [46.8, 26403.0], [46.9, 26449.0], [47.0, 26460.0], [47.1, 26466.0], [47.2, 26466.0], [47.3, 26494.0], [47.4, 26505.0], [47.5, 26516.0], [47.6, 26516.0], [47.7, 26540.0], [47.8, 26554.0], [47.9, 26580.0], [48.0, 26580.0], [48.1, 26581.0], [48.2, 26584.0], [48.3, 26687.0], [48.4, 26687.0], [48.5, 26696.0], [48.6, 26711.0], [48.7, 26711.0], [48.8, 26744.0], [48.9, 26757.0], [49.0, 26857.0], [49.1, 26857.0], [49.2, 26862.0], [49.3, 26906.0], [49.4, 26915.0], [49.5, 26915.0], [49.6, 26934.0], [49.7, 26948.0], [49.8, 26949.0], [49.9, 26949.0], [50.0, 26992.0], [50.1, 26994.0], [50.2, 26994.0], [50.3, 27047.0], [50.4, 27051.0], [50.5, 27111.0], [50.6, 27111.0], [50.7, 27186.0], [50.8, 27200.0], [50.9, 27269.0], [51.0, 27269.0], [51.1, 27288.0], [51.2, 27394.0], [51.3, 27451.0], [51.4, 27451.0], [51.5, 27461.0], [51.6, 27463.0], [51.7, 27463.0], [51.8, 27469.0], [51.9, 27513.0], [52.0, 27514.0], [52.1, 27514.0], [52.2, 27520.0], [52.3, 27534.0], [52.4, 27564.0], [52.5, 27564.0], [52.6, 27574.0], [52.7, 27595.0], [52.8, 27607.0], [52.9, 27607.0], [53.0, 27609.0], [53.1, 27621.0], [53.2, 27629.0], [53.3, 27629.0], [53.4, 27651.0], [53.5, 27678.0], [53.6, 27678.0], [53.7, 27683.0], [53.8, 27699.0], [53.9, 27735.0], [54.0, 27735.0], [54.1, 27741.0], [54.2, 27741.0], [54.3, 27765.0], [54.4, 27765.0], [54.5, 27778.0], [54.6, 27779.0], [54.7, 27787.0], [54.8, 27787.0], [54.9, 27790.0], [55.0, 27822.0], [55.1, 27822.0], [55.2, 27824.0], [55.3, 27848.0], [55.4, 27860.0], [55.5, 27860.0], [55.6, 27909.0], [55.7, 27920.0], [55.8, 27929.0], [55.9, 27929.0], [56.0, 27937.0], [56.1, 27994.0], [56.2, 28012.0], [56.3, 28012.0], [56.4, 28027.0], [56.5, 28043.0], [56.6, 28070.0], [56.7, 28070.0], [56.8, 28084.0], [56.9, 28087.0], [57.0, 28087.0], [57.1, 28090.0], [57.2, 28092.0], [57.3, 28122.0], [57.4, 28122.0], [57.5, 28153.0], [57.6, 28154.0], [57.7, 28159.0], [57.8, 28159.0], [57.9, 28173.0], [58.0, 28191.0], [58.1, 28191.0], [58.2, 28191.0], [58.3, 28197.0], [58.4, 28210.0], [58.5, 28210.0], [58.6, 28250.0], [58.7, 28250.0], [58.8, 28257.0], [58.9, 28257.0], [59.0, 28258.0], [59.1, 28311.0], [59.2, 28320.0], [59.3, 28320.0], [59.4, 28342.0], [59.5, 28346.0], [59.6, 28358.0], [59.7, 28358.0], [59.8, 28367.0], [59.9, 28373.0], [60.0, 28394.0], [60.1, 28394.0], [60.2, 28411.0], [60.3, 28412.0], [60.4, 28412.0], [60.5, 28426.0], [60.6, 28430.0], [60.7, 28434.0], [60.8, 28434.0], [60.9, 28481.0], [61.0, 28486.0], [61.1, 28499.0], [61.2, 28499.0], [61.3, 28511.0], [61.4, 28515.0], [61.5, 28530.0], [61.6, 28530.0], [61.7, 28532.0], [61.8, 28549.0], [61.9, 28549.0], [62.0, 28558.0], [62.1, 28562.0], [62.2, 28572.0], [62.3, 28572.0], [62.4, 28577.0], [62.5, 28578.0], [62.6, 28579.0], [62.7, 28579.0], [62.8, 28581.0], [62.9, 28582.0], [63.0, 28644.0], [63.1, 28644.0], [63.2, 28653.0], [63.3, 28658.0], [63.4, 28658.0], [63.5, 28660.0], [63.6, 28666.0], [63.7, 28677.0], [63.8, 28677.0], [63.9, 28678.0], [64.0, 28685.0], [64.1, 28686.0], [64.2, 28686.0], [64.3, 28698.0], [64.4, 28726.0], [64.5, 28737.0], [64.6, 28737.0], [64.7, 28740.0], [64.8, 28757.0], [64.9, 28764.0], [65.0, 28764.0], [65.1, 28778.0], [65.2, 28791.0], [65.3, 28791.0], [65.4, 28802.0], [65.5, 28804.0], [65.6, 28810.0], [65.7, 28810.0], [65.8, 28812.0], [65.9, 28821.0], [66.0, 28825.0], [66.1, 28825.0], [66.2, 28834.0], [66.3, 28840.0], [66.4, 28847.0], [66.5, 28847.0], [66.6, 28854.0], [66.7, 28866.0], [66.8, 28866.0], [66.9, 28884.0], [67.0, 28886.0], [67.1, 28907.0], [67.2, 28907.0], [67.3, 28911.0], [67.4, 28920.0], [67.5, 28924.0], [67.6, 28924.0], [67.7, 28926.0], [67.8, 28931.0], [67.9, 28932.0], [68.0, 28932.0], [68.1, 28935.0], [68.2, 28941.0], [68.3, 28945.0], [68.4, 28945.0], [68.5, 28958.0], [68.6, 28970.0], [68.7, 28970.0], [68.8, 28970.0], [68.9, 28971.0], [69.0, 28972.0], [69.1, 28972.0], [69.2, 28973.0], [69.3, 28976.0], [69.4, 28976.0], [69.5, 28976.0], [69.6, 28982.0], [69.7, 28985.0], [69.8, 28998.0], [69.9, 28998.0], [70.0, 29005.0], [70.1, 29008.0], [70.2, 29008.0], [70.3, 29008.0], [70.4, 29012.0], [70.5, 29014.0], [70.6, 29014.0], [70.7, 29041.0], [70.8, 29042.0], [70.9, 29042.0], [71.0, 29042.0], [71.1, 29050.0], [71.2, 29057.0], [71.3, 29060.0], [71.4, 29060.0], [71.5, 29072.0], [71.6, 29075.0], [71.7, 29075.0], [71.8, 29078.0], [71.9, 29081.0], [72.0, 29094.0], [72.1, 29094.0], [72.2, 29111.0], [72.3, 29113.0], [72.4, 29119.0], [72.5, 29119.0], [72.6, 29121.0], [72.7, 29128.0], [72.8, 29131.0], [72.9, 29131.0], [73.0, 29132.0], [73.1, 29140.0], [73.2, 29150.0], [73.3, 29150.0], [73.4, 29150.0], [73.5, 29153.0], [73.6, 29153.0], [73.7, 29168.0], [73.8, 29172.0], [73.9, 29173.0], [74.0, 29173.0], [74.1, 29176.0], [74.2, 29181.0], [74.3, 29194.0], [74.4, 29194.0], [74.5, 29199.0], [74.6, 29216.0], [74.7, 29216.0], [74.8, 29216.0], [74.9, 29226.0], [75.0, 29233.0], [75.1, 29233.0], [75.2, 29258.0], [75.3, 29263.0], [75.4, 29265.0], [75.5, 29265.0], [75.6, 29268.0], [75.7, 29270.0], [75.8, 29271.0], [75.9, 29271.0], [76.0, 29275.0], [76.1, 29288.0], [76.2, 29290.0], [76.3, 29290.0], [76.4, 29291.0], [76.5, 29300.0], [76.6, 29322.0], [76.7, 29322.0], [76.8, 29327.0], [76.9, 29352.0], [77.0, 29352.0], [77.1, 29355.0], [77.2, 29365.0], [77.3, 29373.0], [77.4, 29373.0], [77.5, 29374.0], [77.6, 29375.0], [77.7, 29377.0], [77.8, 29377.0], [77.9, 29385.0], [78.0, 29390.0], [78.1, 29401.0], [78.2, 29401.0], [78.3, 29410.0], [78.4, 29416.0], [78.5, 29416.0], [78.6, 29420.0], [78.7, 29424.0], [78.8, 29444.0], [78.9, 29444.0], [79.0, 29447.0], [79.1, 29451.0], [79.2, 29455.0], [79.3, 29455.0], [79.4, 29459.0], [79.5, 29461.0], [79.6, 29466.0], [79.7, 29466.0], [79.8, 29476.0], [79.9, 29480.0], [80.0, 29495.0], [80.1, 29495.0], [80.2, 29504.0], [80.3, 29505.0], [80.4, 29505.0], [80.5, 29516.0], [80.6, 29518.0], [80.7, 29534.0], [80.8, 29534.0], [80.9, 29537.0], [81.0, 29539.0], [81.1, 29539.0], [81.2, 29539.0], [81.3, 29547.0], [81.4, 29557.0], [81.5, 29560.0], [81.6, 29560.0], [81.7, 29560.0], [81.8, 29562.0], [81.9, 29562.0], [82.0, 29566.0], [82.1, 29568.0], [82.2, 29571.0], [82.3, 29571.0], [82.4, 29573.0], [82.5, 29574.0], [82.6, 29574.0], [82.7, 29574.0], [82.8, 29585.0], [82.9, 29588.0], [83.0, 29597.0], [83.1, 29597.0], [83.2, 29598.0], [83.3, 29601.0], [83.4, 29601.0], [83.5, 29608.0], [83.6, 29610.0], [83.7, 29615.0], [83.8, 29615.0], [83.9, 29616.0], [84.0, 29622.0], [84.1, 29626.0], [84.2, 29626.0], [84.3, 29629.0], [84.4, 29632.0], [84.5, 29633.0], [84.6, 29633.0], [84.7, 29635.0], [84.8, 29652.0], [84.9, 29655.0], [85.0, 29655.0], [85.1, 29657.0], [85.2, 29659.0], [85.3, 29659.0], [85.4, 29664.0], [85.5, 29674.0], [85.6, 29675.0], [85.7, 29675.0], [85.8, 29677.0], [85.9, 29681.0], [86.0, 29686.0], [86.1, 29686.0], [86.2, 29699.0], [86.3, 29719.0], [86.4, 29743.0], [86.5, 29743.0], [86.6, 29744.0], [86.7, 29745.0], [86.8, 29745.0], [86.9, 29747.0], [87.0, 29753.0], [87.1, 29759.0], [87.2, 29759.0], [87.3, 29759.0], [87.4, 29760.0], [87.5, 29764.0], [87.6, 29764.0], [87.7, 29774.0], [87.8, 29779.0], [87.9, 29796.0], [88.0, 29796.0], [88.1, 29798.0], [88.2, 29807.0], [88.3, 29814.0], [88.4, 29814.0], [88.5, 29826.0], [88.6, 29842.0], [88.7, 29842.0], [88.8, 29842.0], [88.9, 29875.0], [89.0, 29881.0], [89.1, 29881.0], [89.2, 29882.0], [89.3, 29887.0], [89.4, 29924.0], [89.5, 29924.0], [89.6, 29927.0], [89.7, 29931.0], [89.8, 29963.0], [89.9, 29963.0], [90.0, 29994.0], [90.1, 29998.0], [90.2, 29998.0], [90.3, 30018.0], [90.4, 30024.0], [90.5, 30026.0], [90.6, 30026.0], [90.7, 30038.0], [90.8, 30064.0], [90.9, 30067.0], [91.0, 30067.0], [91.1, 30069.0], [91.2, 30085.0], [91.3, 30132.0], [91.4, 30132.0], [91.5, 30142.0], [91.6, 30158.0], [91.7, 30158.0], [91.8, 30183.0], [91.9, 30188.0], [92.0, 30194.0], [92.1, 30194.0], [92.2, 30197.0], [92.3, 30211.0], [92.4, 30276.0], [92.5, 30276.0], [92.6, 30285.0], [92.7, 30306.0], [92.8, 30362.0], [92.9, 30362.0], [93.0, 30375.0], [93.1, 30396.0], [93.2, 30680.0], [93.3, 30680.0], [93.4, 30809.0], [93.5, 30858.0], [93.6, 30858.0], [93.7, 31224.0], [93.8, 31227.0], [93.9, 31295.0], [94.0, 31295.0], [94.1, 31613.0], [94.2, 31733.0], [94.3, 31838.0], [94.4, 31838.0], [94.5, 32070.0], [94.6, 32122.0], [94.7, 32362.0], [94.8, 32362.0], [94.9, 32377.0], [95.0, 32422.0], [95.1, 32422.0], [95.2, 32481.0], [95.3, 32482.0], [95.4, 32525.0], [95.5, 32525.0], [95.6, 32732.0], [95.7, 32859.0], [95.8, 33109.0], [95.9, 33109.0], [96.0, 33166.0], [96.1, 33270.0], [96.2, 33935.0], [96.3, 33935.0], [96.4, 33979.0], [96.5, 34346.0], [96.6, 34640.0], [96.7, 34640.0], [96.8, 35347.0], [96.9, 35590.0], [97.0, 35590.0], [97.1, 35748.0], [97.2, 36324.0], [97.3, 36804.0], [97.4, 36804.0], [97.5, 37077.0], [97.6, 37479.0], [97.7, 38132.0], [97.8, 38132.0], [97.9, 38410.0], [98.0, 38468.0], [98.1, 39798.0], [98.2, 39798.0], [98.3, 40583.0], [98.4, 40824.0], [98.5, 40824.0], [98.6, 41090.0], [98.7, 41916.0], [98.8, 41980.0], [98.9, 41980.0], [99.0, 42118.0], [99.1, 42414.0], [99.2, 42642.0], [99.3, 42642.0], [99.4, 43064.0], [99.5, 43163.0], [99.6, 43245.0], [99.7, 43245.0], [99.8, 43618.0], [99.9, 44069.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 23.0, "series": [{"data": [[33900.0, 2.0], [33100.0, 2.0], [34300.0, 1.0], [35500.0, 1.0], [35700.0, 1.0], [36300.0, 1.0], [35300.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [39700.0, 1.0], [41900.0, 2.0], [42100.0, 1.0], [43100.0, 1.0], [3000.0, 1.0], [5200.0, 1.0], [8200.0, 1.0], [10900.0, 1.0], [13400.0, 1.0], [15800.0, 1.0], [17300.0, 4.0], [17400.0, 3.0], [17000.0, 3.0], [17200.0, 1.0], [16900.0, 1.0], [16700.0, 1.0], [17100.0, 2.0], [17900.0, 6.0], [18300.0, 5.0], [17700.0, 4.0], [17500.0, 10.0], [17800.0, 4.0], [18000.0, 3.0], [18400.0, 3.0], [18100.0, 3.0], [18200.0, 2.0], [17600.0, 1.0], [19200.0, 5.0], [19400.0, 4.0], [18700.0, 5.0], [18800.0, 1.0], [19300.0, 2.0], [19100.0, 1.0], [19000.0, 2.0], [18900.0, 2.0], [18600.0, 2.0], [18500.0, 4.0], [20000.0, 3.0], [20400.0, 4.0], [20100.0, 6.0], [19900.0, 5.0], [19600.0, 5.0], [19700.0, 1.0], [20300.0, 1.0], [19800.0, 2.0], [20200.0, 3.0], [19500.0, 1.0], [20500.0, 2.0], [20900.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [21500.0, 2.0], [21400.0, 3.0], [21000.0, 1.0], [20700.0, 1.0], [22300.0, 5.0], [21600.0, 6.0], [22100.0, 3.0], [21900.0, 2.0], [22500.0, 5.0], [22400.0, 2.0], [21700.0, 3.0], [21800.0, 2.0], [22200.0, 1.0], [22000.0, 2.0], [23000.0, 5.0], [23400.0, 3.0], [22900.0, 3.0], [23200.0, 6.0], [22800.0, 3.0], [22600.0, 6.0], [23100.0, 6.0], [23500.0, 4.0], [23300.0, 2.0], [22700.0, 1.0], [24400.0, 9.0], [24000.0, 7.0], [24300.0, 4.0], [23600.0, 6.0], [23900.0, 3.0], [24500.0, 7.0], [24100.0, 9.0], [23700.0, 3.0], [23800.0, 2.0], [24200.0, 4.0], [25500.0, 6.0], [25100.0, 4.0], [24800.0, 11.0], [25200.0, 2.0], [24600.0, 12.0], [24700.0, 6.0], [25300.0, 1.0], [25400.0, 2.0], [24900.0, 3.0], [25700.0, 2.0], [25800.0, 7.0], [26100.0, 5.0], [25600.0, 5.0], [26500.0, 7.0], [26200.0, 3.0], [26600.0, 2.0], [26400.0, 6.0], [26000.0, 5.0], [26300.0, 6.0], [25900.0, 5.0], [27400.0, 4.0], [27200.0, 3.0], [27300.0, 1.0], [27600.0, 8.0], [27500.0, 7.0], [26900.0, 7.0], [27100.0, 2.0], [26700.0, 3.0], [27000.0, 2.0], [26800.0, 2.0], [27900.0, 5.0], [28000.0, 8.0], [28400.0, 8.0], [28600.0, 10.0], [28500.0, 13.0], [28300.0, 8.0], [28200.0, 5.0], [28100.0, 8.0], [27700.0, 8.0], [27800.0, 4.0], [28800.0, 13.0], [29000.0, 16.0], [28900.0, 21.0], [29100.0, 18.0], [28700.0, 7.0], [29200.0, 14.0], [29400.0, 15.0], [29300.0, 12.0], [29500.0, 23.0], [29600.0, 22.0], [29900.0, 6.0], [29700.0, 14.0], [29800.0, 9.0], [30600.0, 1.0], [30000.0, 8.0], [30100.0, 7.0], [30200.0, 3.0], [30300.0, 4.0], [31700.0, 1.0], [30800.0, 2.0], [31200.0, 3.0], [31600.0, 1.0], [32700.0, 1.0], [32400.0, 3.0], [32300.0, 2.0], [32500.0, 1.0], [32000.0, 1.0], [32100.0, 1.0], [31800.0, 1.0], [34600.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [36800.0, 1.0], [38400.0, 2.0], [37000.0, 1.0], [37400.0, 1.0], [40800.0, 1.0], [42400.0, 1.0], [42600.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [43600.0, 1.0], [43200.0, 1.0], [44000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.352941176470588, "minX": 1.60265454E12, "maxY": 10.0, "series": [{"data": [[1.6026558E12, 10.0], [1.6026555E12, 10.0], [1.6026564E12, 10.0], [1.6026561E12, 10.0], [1.60265508E12, 10.0], [1.60265478E12, 10.0], [1.60265568E12, 10.0], [1.60265538E12, 10.0], [1.60265532E12, 10.0], [1.60265502E12, 10.0], [1.60265592E12, 10.0], [1.60265562E12, 10.0], [1.6026546E12, 10.0], [1.6026552E12, 10.0], [1.60265622E12, 10.0], [1.6026549E12, 10.0], [1.60265484E12, 10.0], [1.60265454E12, 10.0], [1.60265544E12, 10.0], [1.60265646E12, 7.352941176470588], [1.60265514E12, 10.0], [1.60265604E12, 10.0], [1.60265634E12, 10.0], [1.60265574E12, 10.0], [1.60265472E12, 10.0], [1.60265598E12, 10.0], [1.60265496E12, 10.0], [1.60265466E12, 10.0], [1.60265628E12, 10.0], [1.60265556E12, 10.0], [1.60265526E12, 10.0], [1.60265616E12, 10.0], [1.60265586E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17507.0, "minX": 1.0, "maxY": 26208.853994490342, "series": [{"data": [[8.0, 17507.0], [4.0, 17916.0], [2.0, 17596.0], [1.0, 17962.0], [9.0, 17523.0], [10.0, 26208.853994490342], [5.0, 17805.0], [6.0, 17567.0], [3.0, 17741.0], [7.0, 17526.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26104.450340136038]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.43333333333334, "minX": 1.60265454E12, "maxY": 175439.56666666668, "series": [{"data": [[1.6026558E12, 44120.15], [1.6026555E12, 166788.26666666666], [1.6026564E12, 75910.21666666666], [1.6026561E12, 49524.15], [1.60265508E12, 55405.38333333333], [1.60265478E12, 79979.91666666667], [1.60265568E12, 75642.91666666667], [1.60265538E12, 65351.55], [1.60265532E12, 175439.56666666668], [1.60265502E12, 45768.98333333333], [1.60265592E12, 45378.51666666667], [1.60265562E12, 68702.66666666667], [1.6026546E12, 101743.45], [1.6026552E12, 39367.5], [1.60265622E12, 26923.416666666668], [1.6026549E12, 47023.55], [1.60265484E12, 48137.166666666664], [1.60265454E12, 164758.25], [1.60265544E12, 134655.6], [1.60265646E12, 12796.683333333332], [1.60265514E12, 46609.833333333336], [1.60265604E12, 48497.48333333333], [1.60265634E12, 155302.23333333334], [1.60265574E12, 28502.633333333335], [1.60265472E12, 57683.21666666667], [1.60265598E12, 52558.03333333333], [1.60265496E12, 50219.166666666664], [1.60265466E12, 143358.41666666666], [1.60265628E12, 28857.383333333335], [1.60265556E12, 59807.2], [1.60265526E12, 32375.75], [1.60265616E12, 43701.76666666667], [1.60265586E12, 52538.083333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6026558E12, 146.11666666666667], [1.6026555E12, 190.41666666666666], [1.6026564E12, 158.95], [1.6026561E12, 146.11666666666667], [1.60265508E12, 153.66666666666666], [1.60265478E12, 183.56666666666666], [1.60265568E12, 176.53333333333333], [1.60265538E12, 168.05], [1.60265532E12, 225.13333333333333], [1.60265502E12, 146.11666666666667], [1.60265592E12, 146.13333333333333], [1.60265562E12, 171.16666666666666], [1.6026546E12, 207.3], [1.6026552E12, 153.38333333333333], [1.60265622E12, 175.03333333333333], [1.6026549E12, 153.43333333333334], [1.60265484E12, 161.03333333333333], [1.60265454E12, 102.43333333333334], [1.60265544E12, 177.03333333333333], [1.60265646E12, 113.51666666666667], [1.60265514E12, 153.35], [1.60265604E12, 153.43333333333334], [1.60265634E12, 188.06666666666666], [1.60265574E12, 116.86666666666666], [1.60265472E12, 125.55], [1.60265598E12, 154.36666666666667], [1.60265496E12, 153.41666666666666], [1.60265466E12, 164.88333333333333], [1.60265628E12, 182.68333333333334], [1.60265556E12, 202.31666666666666], [1.60265526E12, 175.18333333333334], [1.60265616E12, 160.56666666666666], [1.60265586E12, 153.46666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17405.0, "minX": 1.60265454E12, "maxY": 37924.23529411764, "series": [{"data": [[1.6026558E12, 30104.600000000002], [1.6026555E12, 24257.96153846154], [1.6026564E12, 29487.22727272728], [1.6026561E12, 29612.1], [1.60265508E12, 28595.809523809527], [1.60265478E12, 24926.16], [1.60265568E12, 24364.291666666668], [1.60265538E12, 25816.58333333333], [1.60265532E12, 19735.903225806454], [1.60265502E12, 29321.5], [1.60265592E12, 29835.749999999996], [1.60265562E12, 27355.82608695652], [1.6026546E12, 22198.06896551724], [1.6026552E12, 28760.333333333332], [1.60265622E12, 25392.250000000007], [1.6026549E12, 28805.571428571435], [1.60265484E12, 26637.681818181823], [1.60265454E12, 17405.0], [1.60265544E12, 22709.399999999998], [1.60265646E12, 17445.11764705882], [1.60265514E12, 29122.76190476191], [1.60265604E12, 28813.238095238095], [1.60265634E12, 22460.807692307688], [1.60265574E12, 35735.437500000015], [1.60265472E12, 37924.23529411764], [1.60265598E12, 28144.0], [1.60265496E12, 28578.28571428571], [1.60265466E12, 22332.68181818182], [1.60265628E12, 23803.12], [1.60265556E12, 19021.27586206897], [1.60265526E12, 25299.124999999996], [1.60265616E12, 28473.909090909092], [1.60265586E12, 29757.904761904763]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17399.928571428572, "minX": 1.60265454E12, "maxY": 37922.411764705874, "series": [{"data": [[1.6026558E12, 30103.45], [1.6026555E12, 24254.846153846156], [1.6026564E12, 29485.000000000004], [1.6026561E12, 29610.5], [1.60265508E12, 28594.47619047619], [1.60265478E12, 24924.64], [1.60265568E12, 24362.916666666668], [1.60265538E12, 25814.125000000004], [1.60265532E12, 19732.354838709678], [1.60265502E12, 29320.1], [1.60265592E12, 29834.6], [1.60265562E12, 27354.478260869564], [1.6026546E12, 22196.24137931034], [1.6026552E12, 28759.523809523813], [1.60265622E12, 25391.75], [1.6026549E12, 28804.476190476198], [1.60265484E12, 26636.636363636368], [1.60265454E12, 17399.928571428572], [1.60265544E12, 22705.760000000002], [1.60265646E12, 17442.999999999996], [1.60265514E12, 29121.71428571429], [1.60265604E12, 28812.047619047622], [1.60265634E12, 22456.846153846152], [1.60265574E12, 35734.75], [1.60265472E12, 37922.411764705874], [1.60265598E12, 28142.52380952381], [1.60265496E12, 28577.14285714286], [1.60265466E12, 22329.363636363636], [1.60265628E12, 23802.640000000003], [1.60265556E12, 19019.689655172413], [1.60265526E12, 25298.5], [1.60265616E12, 28472.909090909092], [1.60265586E12, 29756.571428571424]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.09523809523809526, "minX": 1.60265454E12, "maxY": 6.714285714285714, "series": [{"data": [[1.6026558E12, 0.6], [1.6026555E12, 0.30769230769230765], [1.6026564E12, 0.2727272727272727], [1.6026561E12, 0.30000000000000004], [1.60265508E12, 0.4761904761904762], [1.60265478E12, 0.6400000000000001], [1.60265568E12, 0.41666666666666663], [1.60265538E12, 0.375], [1.60265532E12, 0.3548387096774194], [1.60265502E12, 0.7499999999999999], [1.60265592E12, 0.25], [1.60265562E12, 0.5217391304347827], [1.6026546E12, 0.6206896551724138], [1.6026552E12, 0.6666666666666667], [1.60265622E12, 0.4583333333333333], [1.6026549E12, 0.38095238095238093], [1.60265484E12, 0.5909090909090909], [1.60265454E12, 6.714285714285714], [1.60265544E12, 0.28], [1.60265646E12, 0.29411764705882354], [1.60265514E12, 0.09523809523809526], [1.60265604E12, 0.5238095238095238], [1.60265634E12, 0.5], [1.60265574E12, 0.12500000000000003], [1.60265472E12, 0.5882352941176471], [1.60265598E12, 0.380952380952381], [1.60265496E12, 0.2857142857142857], [1.60265466E12, 0.18181818181818182], [1.60265628E12, 0.52], [1.60265556E12, 0.4482758620689655], [1.60265526E12, 0.5833333333333335], [1.60265616E12, 0.40909090909090906], [1.60265586E12, 0.6190476190476192]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3061.0, "minX": 1.60265454E12, "maxY": 44069.0, "series": [{"data": [[1.6026558E12, 34640.0], [1.6026555E12, 29042.0], [1.6026564E12, 38410.0], [1.6026561E12, 29882.0], [1.60265508E12, 29270.0], [1.60265478E12, 29779.0], [1.60265568E12, 26584.0], [1.60265538E12, 32525.0], [1.60265532E12, 24080.0], [1.60265502E12, 29881.0], [1.60265592E12, 30375.0], [1.60265562E12, 32122.0], [1.6026546E12, 27683.0], [1.6026552E12, 29842.0], [1.60265622E12, 28698.0], [1.6026549E12, 29131.0], [1.60265484E12, 29931.0], [1.60265454E12, 25722.0], [1.60265544E12, 26862.0], [1.60265646E12, 17993.0], [1.60265514E12, 29796.0], [1.60265604E12, 29629.0], [1.60265634E12, 28572.0], [1.60265574E12, 44069.0], [1.60265472E12, 43618.0], [1.60265598E12, 29887.0], [1.60265496E12, 29008.0], [1.60265466E12, 29963.0], [1.60265628E12, 27574.0], [1.60265556E12, 25872.0], [1.60265526E12, 28122.0], [1.60265616E12, 29657.0], [1.60265586E12, 30197.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6026558E12, 26505.0], [1.6026555E12, 19213.0], [1.6026564E12, 19675.0], [1.6026561E12, 29401.0], [1.60265508E12, 27920.0], [1.60265478E12, 22309.0], [1.60265568E12, 22380.0], [1.60265538E12, 18401.0], [1.60265532E12, 17804.0], [1.60265502E12, 28825.0], [1.60265592E12, 29375.0], [1.60265562E12, 22542.0], [1.6026546E12, 17334.0], [1.6026552E12, 26035.0], [1.60265622E12, 21467.0], [1.6026549E12, 28530.0], [1.60265484E12, 23616.0], [1.60265454E12, 3061.0], [1.60265544E12, 18244.0], [1.60265646E12, 16784.0], [1.60265514E12, 28726.0], [1.60265604E12, 27461.0], [1.60265634E12, 18415.0], [1.60265574E12, 24595.0], [1.60265472E12, 30858.0], [1.60265598E12, 26948.0], [1.60265496E12, 28311.0], [1.60265466E12, 17440.0], [1.60265628E12, 20744.0], [1.60265556E12, 17084.0], [1.60265526E12, 23181.0], [1.60265616E12, 25563.0], [1.60265586E12, 29373.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6026558E12, 26505.0], [1.6026555E12, 19213.0], [1.6026564E12, 19675.0], [1.6026561E12, 29401.0], [1.60265508E12, 27920.0], [1.60265478E12, 22309.0], [1.60265568E12, 22380.0], [1.60265538E12, 18401.0], [1.60265532E12, 17804.0], [1.60265502E12, 28825.0], [1.60265592E12, 29375.0], [1.60265562E12, 22542.0], [1.6026546E12, 17334.0], [1.6026552E12, 26035.0], [1.60265622E12, 21467.0], [1.6026549E12, 28530.0], [1.60265484E12, 23616.0], [1.60265454E12, 3061.0], [1.60265544E12, 18244.0], [1.60265646E12, 16784.0], [1.60265514E12, 28726.0], [1.60265604E12, 27461.0], [1.60265634E12, 18415.0], [1.60265574E12, 24595.0], [1.60265472E12, 30858.0], [1.60265598E12, 26948.0], [1.60265496E12, 28311.0], [1.60265466E12, 17440.0], [1.60265628E12, 20744.0], [1.60265556E12, 17084.0], [1.60265526E12, 23181.0], [1.60265616E12, 25563.0], [1.60265586E12, 29373.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6026558E12, 26505.0], [1.6026555E12, 19213.0], [1.6026564E12, 19675.0], [1.6026561E12, 29401.0], [1.60265508E12, 27920.0], [1.60265478E12, 22309.0], [1.60265568E12, 22380.0], [1.60265538E12, 18401.0], [1.60265532E12, 17804.0], [1.60265502E12, 28825.0], [1.60265592E12, 29375.0], [1.60265562E12, 22542.0], [1.6026546E12, 17334.0], [1.6026552E12, 26035.0], [1.60265622E12, 21467.0], [1.6026549E12, 28530.0], [1.60265484E12, 23616.0], [1.60265454E12, 3061.0], [1.60265544E12, 18244.0], [1.60265646E12, 16784.0], [1.60265514E12, 28726.0], [1.60265604E12, 27461.0], [1.60265634E12, 18415.0], [1.60265574E12, 24595.0], [1.60265472E12, 30858.0], [1.60265598E12, 26948.0], [1.60265496E12, 28311.0], [1.60265466E12, 17440.0], [1.60265628E12, 20744.0], [1.60265556E12, 17084.0], [1.60265526E12, 23181.0], [1.60265616E12, 25563.0], [1.60265586E12, 29373.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6026558E12, 26505.0], [1.6026555E12, 19213.0], [1.6026564E12, 19675.0], [1.6026561E12, 29401.0], [1.60265508E12, 27920.0], [1.60265478E12, 22309.0], [1.60265568E12, 22380.0], [1.60265538E12, 18401.0], [1.60265532E12, 17804.0], [1.60265502E12, 28825.0], [1.60265592E12, 29375.0], [1.60265562E12, 22542.0], [1.6026546E12, 17334.0], [1.6026552E12, 26035.0], [1.60265622E12, 21467.0], [1.6026549E12, 28530.0], [1.60265484E12, 23616.0], [1.60265454E12, 3061.0], [1.60265544E12, 18244.0], [1.60265646E12, 16784.0], [1.60265514E12, 28726.0], [1.60265604E12, 27461.0], [1.60265634E12, 18415.0], [1.60265574E12, 24595.0], [1.60265472E12, 30858.0], [1.60265598E12, 26948.0], [1.60265496E12, 28311.0], [1.60265466E12, 17440.0], [1.60265628E12, 20744.0], [1.60265556E12, 17084.0], [1.60265526E12, 23181.0], [1.60265616E12, 25563.0], [1.60265586E12, 29373.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6026558E12, 30010.0], [1.6026555E12, 24637.5], [1.6026564E12, 28943.0], [1.6026561E12, 29619.0], [1.60265508E12, 28757.0], [1.60265478E12, 24654.0], [1.60265568E12, 24376.0], [1.60265538E12, 22887.0], [1.60265532E12, 19215.0], [1.60265502E12, 29295.0], [1.60265592E12, 29681.5], [1.60265562E12, 27824.0], [1.6026546E12, 20546.0], [1.6026552E12, 29424.0], [1.60265622E12, 25361.0], [1.6026549E12, 28804.0], [1.60265484E12, 26448.0], [1.60265454E12, 19178.0], [1.60265544E12, 22594.0], [1.60265646E12, 17523.0], [1.60265514E12, 28982.0], [1.60265604E12, 29128.0], [1.60265634E12, 21678.5], [1.60265574E12, 36901.5], [1.60265472E12, 38468.0], [1.60265598E12, 27765.0], [1.60265496E12, 28549.0], [1.60265466E12, 22897.0], [1.60265628E12, 23693.0], [1.60265556E12, 18332.0], [1.60265526E12, 25482.0], [1.60265616E12, 29152.5], [1.60265586E12, 29674.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26992.0, "minX": 1.0, "maxY": 26992.0, "series": [{"data": [[1.0, 26992.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26992.0, "minX": 1.0, "maxY": 26992.0, "series": [{"data": [[1.0, 26992.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.60265454E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6026558E12, 0.3333333333333333], [1.6026555E12, 0.43333333333333335], [1.6026564E12, 0.36666666666666664], [1.6026561E12, 0.3333333333333333], [1.60265508E12, 0.35], [1.60265478E12, 0.4166666666666667], [1.60265568E12, 0.4], [1.60265538E12, 0.4], [1.60265532E12, 0.5166666666666667], [1.60265502E12, 0.3333333333333333], [1.60265592E12, 0.3333333333333333], [1.60265562E12, 0.38333333333333336], [1.6026546E12, 0.48333333333333334], [1.6026552E12, 0.35], [1.60265622E12, 0.4], [1.6026549E12, 0.35], [1.60265484E12, 0.36666666666666664], [1.60265454E12, 0.4], [1.60265544E12, 0.4166666666666667], [1.60265646E12, 0.11666666666666667], [1.60265514E12, 0.35], [1.60265604E12, 0.35], [1.60265634E12, 0.43333333333333335], [1.60265574E12, 0.26666666666666666], [1.60265472E12, 0.2833333333333333], [1.60265598E12, 0.35], [1.60265496E12, 0.35], [1.60265466E12, 0.36666666666666664], [1.60265628E12, 0.4166666666666667], [1.60265556E12, 0.48333333333333334], [1.60265526E12, 0.4], [1.60265616E12, 0.36666666666666664], [1.60265586E12, 0.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60265454E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6026558E12, 0.3333333333333333], [1.6026555E12, 0.43333333333333335], [1.6026564E12, 0.36666666666666664], [1.6026561E12, 0.3333333333333333], [1.60265508E12, 0.35], [1.60265478E12, 0.4166666666666667], [1.60265568E12, 0.4], [1.60265538E12, 0.4], [1.60265532E12, 0.5166666666666667], [1.60265502E12, 0.3333333333333333], [1.60265592E12, 0.3333333333333333], [1.60265562E12, 0.38333333333333336], [1.6026546E12, 0.48333333333333334], [1.6026552E12, 0.35], [1.60265622E12, 0.4], [1.6026549E12, 0.35], [1.60265484E12, 0.36666666666666664], [1.60265454E12, 0.23333333333333334], [1.60265544E12, 0.4166666666666667], [1.60265646E12, 0.2833333333333333], [1.60265514E12, 0.35], [1.60265604E12, 0.35], [1.60265634E12, 0.43333333333333335], [1.60265574E12, 0.26666666666666666], [1.60265472E12, 0.2833333333333333], [1.60265598E12, 0.35], [1.60265496E12, 0.35], [1.60265466E12, 0.36666666666666664], [1.60265628E12, 0.4166666666666667], [1.60265556E12, 0.48333333333333334], [1.60265526E12, 0.4], [1.60265616E12, 0.36666666666666664], [1.60265586E12, 0.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60265454E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6026558E12, 0.3333333333333333], [1.6026555E12, 0.43333333333333335], [1.6026564E12, 0.36666666666666664], [1.6026561E12, 0.3333333333333333], [1.60265508E12, 0.35], [1.60265478E12, 0.4166666666666667], [1.60265568E12, 0.4], [1.60265538E12, 0.4], [1.60265532E12, 0.5166666666666667], [1.60265502E12, 0.3333333333333333], [1.60265592E12, 0.3333333333333333], [1.60265562E12, 0.38333333333333336], [1.6026546E12, 0.48333333333333334], [1.6026552E12, 0.35], [1.60265622E12, 0.4], [1.6026549E12, 0.35], [1.60265484E12, 0.36666666666666664], [1.60265454E12, 0.23333333333333334], [1.60265544E12, 0.4166666666666667], [1.60265646E12, 0.2833333333333333], [1.60265514E12, 0.35], [1.60265604E12, 0.35], [1.60265634E12, 0.43333333333333335], [1.60265574E12, 0.26666666666666666], [1.60265472E12, 0.2833333333333333], [1.60265598E12, 0.35], [1.60265496E12, 0.35], [1.60265466E12, 0.36666666666666664], [1.60265628E12, 0.4166666666666667], [1.60265556E12, 0.48333333333333334], [1.60265526E12, 0.4], [1.60265616E12, 0.36666666666666664], [1.60265586E12, 0.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60265454E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6026558E12, 0.3333333333333333], [1.6026555E12, 0.43333333333333335], [1.6026564E12, 0.36666666666666664], [1.6026561E12, 0.3333333333333333], [1.60265508E12, 0.35], [1.60265478E12, 0.4166666666666667], [1.60265568E12, 0.4], [1.60265538E12, 0.4], [1.60265532E12, 0.5166666666666667], [1.60265502E12, 0.3333333333333333], [1.60265592E12, 0.3333333333333333], [1.60265562E12, 0.38333333333333336], [1.6026546E12, 0.48333333333333334], [1.6026552E12, 0.35], [1.60265622E12, 0.4], [1.6026549E12, 0.35], [1.60265484E12, 0.36666666666666664], [1.60265454E12, 0.23333333333333334], [1.60265544E12, 0.4166666666666667], [1.60265646E12, 0.2833333333333333], [1.60265514E12, 0.35], [1.60265604E12, 0.35], [1.60265634E12, 0.43333333333333335], [1.60265574E12, 0.26666666666666666], [1.60265472E12, 0.2833333333333333], [1.60265598E12, 0.35], [1.60265496E12, 0.35], [1.60265466E12, 0.36666666666666664], [1.60265628E12, 0.4166666666666667], [1.60265556E12, 0.48333333333333334], [1.60265526E12, 0.4], [1.60265616E12, 0.36666666666666664], [1.60265586E12, 0.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

