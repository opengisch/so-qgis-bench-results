/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3158.0, "minX": 0.0, "maxY": 46222.0, "series": [{"data": [[0.0, 3158.0], [0.1, 3158.0], [0.2, 6050.0], [0.3, 8286.0], [0.4, 8286.0], [0.5, 11089.0], [0.6, 13661.0], [0.7, 16298.0], [0.8, 16298.0], [0.9, 16723.0], [1.0, 16950.0], [1.1, 16957.0], [1.2, 16957.0], [1.3, 17116.0], [1.4, 17175.0], [1.5, 17176.0], [1.6, 17176.0], [1.7, 17376.0], [1.8, 17461.0], [1.9, 17461.0], [2.0, 17546.0], [2.1, 17593.0], [2.2, 17612.0], [2.3, 17612.0], [2.4, 17619.0], [2.5, 17625.0], [2.6, 17631.0], [2.7, 17631.0], [2.8, 17659.0], [2.9, 17661.0], [3.0, 17661.0], [3.1, 17661.0], [3.2, 17665.0], [3.3, 17674.0], [3.4, 17674.0], [3.5, 17681.0], [3.6, 17714.0], [3.7, 17719.0], [3.8, 17719.0], [3.9, 17720.0], [4.0, 17741.0], [4.1, 17751.0], [4.2, 17751.0], [4.3, 17762.0], [4.4, 17776.0], [4.5, 17795.0], [4.6, 17795.0], [4.7, 17816.0], [4.8, 17839.0], [4.9, 17860.0], [5.0, 17860.0], [5.1, 17864.0], [5.2, 17892.0], [5.3, 17892.0], [5.4, 17923.0], [5.5, 17934.0], [5.6, 17938.0], [5.7, 17938.0], [5.8, 17998.0], [5.9, 18001.0], [6.0, 18007.0], [6.1, 18007.0], [6.2, 18015.0], [6.3, 18017.0], [6.4, 18067.0], [6.5, 18067.0], [6.6, 18085.0], [6.7, 18116.0], [6.8, 18116.0], [6.9, 18155.0], [7.0, 18228.0], [7.1, 18249.0], [7.2, 18249.0], [7.3, 18270.0], [7.4, 18286.0], [7.5, 18327.0], [7.6, 18327.0], [7.7, 18345.0], [7.8, 18361.0], [7.9, 18377.0], [8.0, 18377.0], [8.1, 18417.0], [8.2, 18516.0], [8.3, 18522.0], [8.4, 18522.0], [8.5, 18537.0], [8.6, 18570.0], [8.7, 18570.0], [8.8, 18582.0], [8.9, 18591.0], [9.0, 18677.0], [9.1, 18677.0], [9.2, 18707.0], [9.3, 18734.0], [9.4, 18751.0], [9.5, 18751.0], [9.6, 18864.0], [9.7, 18877.0], [9.8, 18914.0], [9.9, 18914.0], [10.0, 18930.0], [10.1, 19251.0], [10.2, 19251.0], [10.3, 19359.0], [10.4, 19475.0], [10.5, 19499.0], [10.6, 19499.0], [10.7, 19525.0], [10.8, 19663.0], [10.9, 19664.0], [11.0, 19664.0], [11.1, 19699.0], [11.2, 19708.0], [11.3, 19729.0], [11.4, 19729.0], [11.5, 19778.0], [11.6, 19855.0], [11.7, 19855.0], [11.8, 19861.0], [11.9, 19892.0], [12.0, 19918.0], [12.1, 19918.0], [12.2, 19949.0], [12.3, 20002.0], [12.4, 20030.0], [12.5, 20030.0], [12.6, 20049.0], [12.7, 20072.0], [12.8, 20214.0], [12.9, 20214.0], [13.0, 20236.0], [13.1, 20329.0], [13.2, 20391.0], [13.3, 20391.0], [13.4, 20426.0], [13.5, 20444.0], [13.6, 20444.0], [13.7, 20444.0], [13.8, 20469.0], [13.9, 20470.0], [14.0, 20470.0], [14.1, 20495.0], [14.2, 20621.0], [14.3, 20692.0], [14.4, 20692.0], [14.5, 20818.0], [14.6, 20831.0], [14.7, 20850.0], [14.8, 20850.0], [14.9, 20894.0], [15.0, 20900.0], [15.1, 20900.0], [15.2, 20926.0], [15.3, 20986.0], [15.4, 20987.0], [15.5, 20987.0], [15.6, 21019.0], [15.7, 21030.0], [15.8, 21055.0], [15.9, 21055.0], [16.0, 21113.0], [16.1, 21183.0], [16.2, 21243.0], [16.3, 21243.0], [16.4, 21248.0], [16.5, 21255.0], [16.6, 21289.0], [16.7, 21289.0], [16.8, 21313.0], [16.9, 21358.0], [17.0, 21358.0], [17.1, 21409.0], [17.2, 21472.0], [17.3, 21841.0], [17.4, 21841.0], [17.5, 21931.0], [17.6, 21933.0], [17.7, 21982.0], [17.8, 21982.0], [17.9, 22050.0], [18.0, 22159.0], [18.1, 22171.0], [18.2, 22171.0], [18.3, 22230.0], [18.4, 22269.0], [18.5, 22269.0], [18.6, 22331.0], [18.7, 22333.0], [18.8, 22394.0], [18.9, 22394.0], [19.0, 22452.0], [19.1, 22487.0], [19.2, 22498.0], [19.3, 22498.0], [19.4, 22541.0], [19.5, 22601.0], [19.6, 22614.0], [19.7, 22614.0], [19.8, 22618.0], [19.9, 22633.0], [20.0, 22675.0], [20.1, 22675.0], [20.2, 22754.0], [20.3, 22763.0], [20.4, 22763.0], [20.5, 22783.0], [20.6, 22793.0], [20.7, 22885.0], [20.8, 22885.0], [20.9, 22894.0], [21.0, 22897.0], [21.1, 22932.0], [21.2, 22932.0], [21.3, 22932.0], [21.4, 22947.0], [21.5, 22983.0], [21.6, 22983.0], [21.7, 22989.0], [21.8, 23042.0], [21.9, 23042.0], [22.0, 23050.0], [22.1, 23076.0], [22.2, 23099.0], [22.3, 23099.0], [22.4, 23120.0], [22.5, 23139.0], [22.6, 23152.0], [22.7, 23152.0], [22.8, 23203.0], [22.9, 23207.0], [23.0, 23239.0], [23.1, 23239.0], [23.2, 23255.0], [23.3, 23260.0], [23.4, 23260.0], [23.5, 23260.0], [23.6, 23326.0], [23.7, 23335.0], [23.8, 23335.0], [23.9, 23335.0], [24.0, 23423.0], [24.1, 23479.0], [24.2, 23479.0], [24.3, 23503.0], [24.4, 23522.0], [24.5, 23546.0], [24.6, 23546.0], [24.7, 23626.0], [24.8, 23794.0], [24.9, 23823.0], [25.0, 23823.0], [25.1, 23859.0], [25.2, 23952.0], [25.3, 23952.0], [25.4, 23975.0], [25.5, 24008.0], [25.6, 24087.0], [25.7, 24087.0], [25.8, 24094.0], [25.9, 24150.0], [26.0, 24177.0], [26.1, 24177.0], [26.2, 24223.0], [26.3, 24237.0], [26.4, 24244.0], [26.5, 24244.0], [26.6, 24254.0], [26.7, 24257.0], [26.8, 24257.0], [26.9, 24273.0], [27.0, 24291.0], [27.1, 24321.0], [27.2, 24321.0], [27.3, 24336.0], [27.4, 24338.0], [27.5, 24389.0], [27.6, 24389.0], [27.7, 24392.0], [27.8, 24418.0], [27.9, 24440.0], [28.0, 24440.0], [28.1, 24483.0], [28.2, 24487.0], [28.3, 24491.0], [28.4, 24491.0], [28.5, 24566.0], [28.6, 24611.0], [28.7, 24611.0], [28.8, 24612.0], [28.9, 24627.0], [29.0, 24629.0], [29.1, 24629.0], [29.2, 24644.0], [29.3, 24673.0], [29.4, 24688.0], [29.5, 24688.0], [29.6, 24739.0], [29.7, 24741.0], [29.8, 24755.0], [29.9, 24755.0], [30.0, 24758.0], [30.1, 24789.0], [30.2, 24789.0], [30.3, 24845.0], [30.4, 24874.0], [30.5, 24882.0], [30.6, 24882.0], [30.7, 24886.0], [30.8, 24912.0], [30.9, 24915.0], [31.0, 24915.0], [31.1, 24922.0], [31.2, 24925.0], [31.3, 24986.0], [31.4, 24986.0], [31.5, 24987.0], [31.6, 25029.0], [31.7, 25029.0], [31.8, 25043.0], [31.9, 25055.0], [32.0, 25061.0], [32.1, 25061.0], [32.2, 25078.0], [32.3, 25089.0], [32.4, 25093.0], [32.5, 25093.0], [32.6, 25112.0], [32.7, 25118.0], [32.8, 25125.0], [32.9, 25125.0], [33.0, 25140.0], [33.1, 25147.0], [33.2, 25151.0], [33.3, 25151.0], [33.4, 25189.0], [33.5, 25190.0], [33.6, 25190.0], [33.7, 25192.0], [33.8, 25197.0], [33.9, 25199.0], [34.0, 25199.0], [34.1, 25200.0], [34.2, 25202.0], [34.3, 25223.0], [34.4, 25223.0], [34.5, 25253.0], [34.6, 25299.0], [34.7, 25303.0], [34.8, 25303.0], [34.9, 25343.0], [35.0, 25356.0], [35.1, 25356.0], [35.2, 25387.0], [35.3, 25407.0], [35.4, 25444.0], [35.5, 25444.0], [35.6, 25450.0], [35.7, 25487.0], [35.8, 25501.0], [35.9, 25501.0], [36.0, 25549.0], [36.1, 25549.0], [36.2, 25593.0], [36.3, 25593.0], [36.4, 25600.0], [36.5, 25613.0], [36.6, 25627.0], [36.7, 25627.0], [36.8, 25651.0], [36.9, 25658.0], [37.0, 25658.0], [37.1, 25663.0], [37.2, 25665.0], [37.3, 25665.0], [37.4, 25665.0], [37.5, 25700.0], [37.6, 25716.0], [37.7, 25733.0], [37.8, 25733.0], [37.9, 25741.0], [38.0, 25772.0], [38.1, 25779.0], [38.2, 25779.0], [38.3, 25787.0], [38.4, 25795.0], [38.5, 25795.0], [38.6, 25802.0], [38.7, 25821.0], [38.8, 25844.0], [38.9, 25844.0], [39.0, 25845.0], [39.1, 25899.0], [39.2, 25918.0], [39.3, 25918.0], [39.4, 25936.0], [39.5, 25954.0], [39.6, 25972.0], [39.7, 25972.0], [39.8, 26021.0], [39.9, 26028.0], [40.0, 26039.0], [40.1, 26039.0], [40.2, 26068.0], [40.3, 26106.0], [40.4, 26106.0], [40.5, 26147.0], [40.6, 26215.0], [40.7, 26228.0], [40.8, 26228.0], [40.9, 26239.0], [41.0, 26259.0], [41.1, 26264.0], [41.2, 26264.0], [41.3, 26277.0], [41.4, 26282.0], [41.5, 26286.0], [41.6, 26286.0], [41.7, 26314.0], [41.8, 26356.0], [41.9, 26356.0], [42.0, 26390.0], [42.1, 26393.0], [42.2, 26412.0], [42.3, 26412.0], [42.4, 26424.0], [42.5, 26449.0], [42.6, 26459.0], [42.7, 26459.0], [42.8, 26470.0], [42.9, 26500.0], [43.0, 26500.0], [43.1, 26500.0], [43.2, 26511.0], [43.3, 26554.0], [43.4, 26554.0], [43.5, 26570.0], [43.6, 26574.0], [43.7, 26579.0], [43.8, 26579.0], [43.9, 26593.0], [44.0, 26659.0], [44.1, 26701.0], [44.2, 26701.0], [44.3, 26704.0], [44.4, 26717.0], [44.5, 26743.0], [44.6, 26743.0], [44.7, 26814.0], [44.8, 26860.0], [44.9, 26868.0], [45.0, 26868.0], [45.1, 26889.0], [45.2, 26910.0], [45.3, 26910.0], [45.4, 26930.0], [45.5, 26931.0], [45.6, 26952.0], [45.7, 26952.0], [45.8, 26958.0], [45.9, 26998.0], [46.0, 27071.0], [46.1, 27071.0], [46.2, 27083.0], [46.3, 27115.0], [46.4, 27139.0], [46.5, 27139.0], [46.6, 27191.0], [46.7, 27194.0], [46.8, 27194.0], [46.9, 27200.0], [47.0, 27215.0], [47.1, 27217.0], [47.2, 27217.0], [47.3, 27266.0], [47.4, 27279.0], [47.5, 27289.0], [47.6, 27289.0], [47.7, 27295.0], [47.8, 27342.0], [47.9, 27381.0], [48.0, 27381.0], [48.1, 27405.0], [48.2, 27455.0], [48.3, 27490.0], [48.4, 27490.0], [48.5, 27552.0], [48.6, 27600.0], [48.7, 27600.0], [48.8, 27619.0], [48.9, 27650.0], [49.0, 27656.0], [49.1, 27656.0], [49.2, 27688.0], [49.3, 27692.0], [49.4, 27715.0], [49.5, 27715.0], [49.6, 27744.0], [49.7, 27780.0], [49.8, 27782.0], [49.9, 27782.0], [50.0, 27805.0], [50.1, 27815.0], [50.2, 27815.0], [50.3, 27871.0], [50.4, 27896.0], [50.5, 27907.0], [50.6, 27907.0], [50.7, 27934.0], [50.8, 27941.0], [50.9, 27955.0], [51.0, 27955.0], [51.1, 27958.0], [51.2, 28070.0], [51.3, 28078.0], [51.4, 28078.0], [51.5, 28088.0], [51.6, 28103.0], [51.7, 28103.0], [51.8, 28136.0], [51.9, 28192.0], [52.0, 28232.0], [52.1, 28232.0], [52.2, 28259.0], [52.3, 28276.0], [52.4, 28318.0], [52.5, 28318.0], [52.6, 28336.0], [52.7, 28337.0], [52.8, 28349.0], [52.9, 28349.0], [53.0, 28350.0], [53.1, 28384.0], [53.2, 28421.0], [53.3, 28421.0], [53.4, 28424.0], [53.5, 28425.0], [53.6, 28425.0], [53.7, 28440.0], [53.8, 28482.0], [53.9, 28503.0], [54.0, 28503.0], [54.1, 28504.0], [54.2, 28529.0], [54.3, 28540.0], [54.4, 28540.0], [54.5, 28544.0], [54.6, 28557.0], [54.7, 28574.0], [54.8, 28574.0], [54.9, 28585.0], [55.0, 28601.0], [55.1, 28601.0], [55.2, 28618.0], [55.3, 28697.0], [55.4, 28745.0], [55.5, 28745.0], [55.6, 28757.0], [55.7, 28846.0], [55.8, 28871.0], [55.9, 28871.0], [56.0, 28895.0], [56.1, 28920.0], [56.2, 28929.0], [56.3, 28929.0], [56.4, 29012.0], [56.5, 29029.0], [56.6, 29040.0], [56.7, 29040.0], [56.8, 29044.0], [56.9, 29048.0], [57.0, 29048.0], [57.1, 29094.0], [57.2, 29113.0], [57.3, 29133.0], [57.4, 29133.0], [57.5, 29153.0], [57.6, 29174.0], [57.7, 29175.0], [57.8, 29175.0], [57.9, 29178.0], [58.0, 29237.0], [58.1, 29241.0], [58.2, 29241.0], [58.3, 29249.0], [58.4, 29251.0], [58.5, 29251.0], [58.6, 29299.0], [58.7, 29326.0], [58.8, 29354.0], [58.9, 29354.0], [59.0, 29374.0], [59.1, 29380.0], [59.2, 29407.0], [59.3, 29407.0], [59.4, 29421.0], [59.5, 29429.0], [59.6, 29439.0], [59.7, 29439.0], [59.8, 29450.0], [59.9, 29469.0], [60.0, 29532.0], [60.1, 29532.0], [60.2, 29536.0], [60.3, 29584.0], [60.4, 29584.0], [60.5, 29587.0], [60.6, 29590.0], [60.7, 29637.0], [60.8, 29637.0], [60.9, 29684.0], [61.0, 29695.0], [61.1, 29702.0], [61.2, 29702.0], [61.3, 29704.0], [61.4, 29734.0], [61.5, 29735.0], [61.6, 29735.0], [61.7, 29759.0], [61.8, 29759.0], [61.9, 29759.0], [62.0, 29777.0], [62.1, 29833.0], [62.2, 29833.0], [62.3, 29833.0], [62.4, 29838.0], [62.5, 29852.0], [62.6, 29865.0], [62.7, 29865.0], [62.8, 29869.0], [62.9, 29870.0], [63.0, 29882.0], [63.1, 29882.0], [63.2, 29906.0], [63.3, 29908.0], [63.4, 29908.0], [63.5, 29909.0], [63.6, 29920.0], [63.7, 29922.0], [63.8, 29922.0], [63.9, 29928.0], [64.0, 29928.0], [64.1, 29936.0], [64.2, 29936.0], [64.3, 29945.0], [64.4, 29974.0], [64.5, 29984.0], [64.6, 29984.0], [64.7, 29991.0], [64.8, 29999.0], [64.9, 30008.0], [65.0, 30008.0], [65.1, 30008.0], [65.2, 30013.0], [65.3, 30013.0], [65.4, 30018.0], [65.5, 30019.0], [65.6, 30020.0], [65.7, 30020.0], [65.8, 30030.0], [65.9, 30034.0], [66.0, 30048.0], [66.1, 30048.0], [66.2, 30052.0], [66.3, 30055.0], [66.4, 30067.0], [66.5, 30067.0], [66.6, 30076.0], [66.7, 30076.0], [66.8, 30076.0], [66.9, 30080.0], [67.0, 30089.0], [67.1, 30096.0], [67.2, 30096.0], [67.3, 30111.0], [67.4, 30119.0], [67.5, 30129.0], [67.6, 30129.0], [67.7, 30132.0], [67.8, 30136.0], [67.9, 30146.0], [68.0, 30146.0], [68.1, 30157.0], [68.2, 30165.0], [68.3, 30181.0], [68.4, 30181.0], [68.5, 30185.0], [68.6, 30194.0], [68.7, 30194.0], [68.8, 30194.0], [68.9, 30195.0], [69.0, 30198.0], [69.1, 30198.0], [69.2, 30199.0], [69.3, 30204.0], [69.4, 30207.0], [69.5, 30207.0], [69.6, 30213.0], [69.7, 30214.0], [69.8, 30215.0], [69.9, 30215.0], [70.0, 30217.0], [70.1, 30217.0], [70.2, 30217.0], [70.3, 30221.0], [70.4, 30225.0], [70.5, 30233.0], [70.6, 30233.0], [70.7, 30237.0], [70.8, 30242.0], [70.9, 30249.0], [71.0, 30249.0], [71.1, 30250.0], [71.2, 30252.0], [71.3, 30253.0], [71.4, 30253.0], [71.5, 30265.0], [71.6, 30267.0], [71.7, 30267.0], [71.8, 30267.0], [71.9, 30273.0], [72.0, 30281.0], [72.1, 30281.0], [72.2, 30285.0], [72.3, 30286.0], [72.4, 30296.0], [72.5, 30296.0], [72.6, 30302.0], [72.7, 30303.0], [72.8, 30311.0], [72.9, 30311.0], [73.0, 30320.0], [73.1, 30325.0], [73.2, 30331.0], [73.3, 30331.0], [73.4, 30339.0], [73.5, 30346.0], [73.6, 30346.0], [73.7, 30360.0], [73.8, 30365.0], [73.9, 30366.0], [74.0, 30366.0], [74.1, 30374.0], [74.2, 30376.0], [74.3, 30383.0], [74.4, 30383.0], [74.5, 30419.0], [74.6, 30425.0], [74.7, 30431.0], [74.8, 30431.0], [74.9, 30434.0], [75.0, 30443.0], [75.1, 30443.0], [75.2, 30445.0], [75.3, 30452.0], [75.4, 30453.0], [75.5, 30453.0], [75.6, 30454.0], [75.7, 30456.0], [75.8, 30457.0], [75.9, 30457.0], [76.0, 30457.0], [76.1, 30459.0], [76.2, 30464.0], [76.3, 30464.0], [76.4, 30466.0], [76.5, 30466.0], [76.6, 30467.0], [76.7, 30467.0], [76.8, 30471.0], [76.9, 30499.0], [77.0, 30499.0], [77.1, 30499.0], [77.2, 30522.0], [77.3, 30525.0], [77.4, 30525.0], [77.5, 30529.0], [77.6, 30538.0], [77.7, 30551.0], [77.8, 30551.0], [77.9, 30563.0], [78.0, 30566.0], [78.1, 30572.0], [78.2, 30572.0], [78.3, 30574.0], [78.4, 30586.0], [78.5, 30586.0], [78.6, 30586.0], [78.7, 30594.0], [78.8, 30600.0], [78.9, 30600.0], [79.0, 30604.0], [79.1, 30608.0], [79.2, 30617.0], [79.3, 30617.0], [79.4, 30617.0], [79.5, 30620.0], [79.6, 30629.0], [79.7, 30629.0], [79.8, 30629.0], [79.9, 30638.0], [80.0, 30638.0], [80.1, 30638.0], [80.2, 30639.0], [80.3, 30643.0], [80.4, 30643.0], [80.5, 30654.0], [80.6, 30663.0], [80.7, 30665.0], [80.8, 30665.0], [80.9, 30666.0], [81.0, 30673.0], [81.1, 30679.0], [81.2, 30679.0], [81.3, 30679.0], [81.4, 30686.0], [81.5, 30687.0], [81.6, 30687.0], [81.7, 30695.0], [81.8, 30695.0], [81.9, 30695.0], [82.0, 30698.0], [82.1, 30710.0], [82.2, 30711.0], [82.3, 30711.0], [82.4, 30735.0], [82.5, 30736.0], [82.6, 30739.0], [82.7, 30739.0], [82.8, 30749.0], [82.9, 30757.0], [83.0, 30765.0], [83.1, 30765.0], [83.2, 30768.0], [83.3, 30771.0], [83.4, 30771.0], [83.5, 30773.0], [83.6, 30776.0], [83.7, 30801.0], [83.8, 30801.0], [83.9, 30808.0], [84.0, 30812.0], [84.1, 30815.0], [84.2, 30815.0], [84.3, 30830.0], [84.4, 30838.0], [84.5, 30840.0], [84.6, 30840.0], [84.7, 30848.0], [84.8, 30874.0], [84.9, 30888.0], [85.0, 30888.0], [85.1, 30898.0], [85.2, 30904.0], [85.3, 30904.0], [85.4, 30918.0], [85.5, 30921.0], [85.6, 30928.0], [85.7, 30928.0], [85.8, 30937.0], [85.9, 30940.0], [86.0, 30960.0], [86.1, 30960.0], [86.2, 30963.0], [86.3, 30982.0], [86.4, 31036.0], [86.5, 31036.0], [86.6, 31055.0], [86.7, 31056.0], [86.8, 31056.0], [86.9, 31061.0], [87.0, 31067.0], [87.1, 31079.0], [87.2, 31079.0], [87.3, 31079.0], [87.4, 31081.0], [87.5, 31081.0], [87.6, 31081.0], [87.7, 31083.0], [87.8, 31087.0], [87.9, 31091.0], [88.0, 31091.0], [88.1, 31096.0], [88.2, 31105.0], [88.3, 31109.0], [88.4, 31109.0], [88.5, 31112.0], [88.6, 31129.0], [88.7, 31129.0], [88.8, 31143.0], [88.9, 31144.0], [89.0, 31150.0], [89.1, 31150.0], [89.2, 31154.0], [89.3, 31155.0], [89.4, 31155.0], [89.5, 31155.0], [89.6, 31158.0], [89.7, 31159.0], [89.8, 31169.0], [89.9, 31169.0], [90.0, 31196.0], [90.1, 31218.0], [90.2, 31218.0], [90.3, 31220.0], [90.4, 31228.0], [90.5, 31253.0], [90.6, 31253.0], [90.7, 31258.0], [90.8, 31260.0], [90.9, 31277.0], [91.0, 31277.0], [91.1, 31285.0], [91.2, 31303.0], [91.3, 31304.0], [91.4, 31304.0], [91.5, 31316.0], [91.6, 31342.0], [91.7, 31342.0], [91.8, 31344.0], [91.9, 31359.0], [92.0, 31364.0], [92.1, 31364.0], [92.2, 31393.0], [92.3, 31401.0], [92.4, 31412.0], [92.5, 31412.0], [92.6, 31418.0], [92.7, 31470.0], [92.8, 31541.0], [92.9, 31541.0], [93.0, 31594.0], [93.1, 31625.0], [93.2, 31678.0], [93.3, 31678.0], [93.4, 31729.0], [93.5, 31764.0], [93.6, 31764.0], [93.7, 31878.0], [93.8, 31916.0], [93.9, 31953.0], [94.0, 31953.0], [94.1, 32069.0], [94.2, 32241.0], [94.3, 32318.0], [94.4, 32318.0], [94.5, 32343.0], [94.6, 32438.0], [94.7, 32837.0], [94.8, 32837.0], [94.9, 32897.0], [95.0, 32909.0], [95.1, 32909.0], [95.2, 32973.0], [95.3, 32990.0], [95.4, 33393.0], [95.5, 33393.0], [95.6, 33558.0], [95.7, 33759.0], [95.8, 33884.0], [95.9, 33884.0], [96.0, 34272.0], [96.1, 34948.0], [96.2, 34975.0], [96.3, 34975.0], [96.4, 35029.0], [96.5, 35296.0], [96.6, 35886.0], [96.7, 35886.0], [96.8, 36417.0], [96.9, 36538.0], [97.0, 36538.0], [97.1, 37059.0], [97.2, 37421.0], [97.3, 38042.0], [97.4, 38042.0], [97.5, 38112.0], [97.6, 39087.0], [97.7, 39310.0], [97.8, 39310.0], [97.9, 39652.0], [98.0, 40344.0], [98.1, 40658.0], [98.2, 40658.0], [98.3, 42108.0], [98.4, 42529.0], [98.5, 42529.0], [98.6, 42739.0], [98.7, 43340.0], [98.8, 43346.0], [98.9, 43346.0], [99.0, 44193.0], [99.1, 44315.0], [99.2, 44594.0], [99.3, 44594.0], [99.4, 44897.0], [99.5, 45262.0], [99.6, 45270.0], [99.7, 45270.0], [99.8, 45656.0], [99.9, 46222.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 24.0, "series": [{"data": [[33700.0, 1.0], [32900.0, 3.0], [33500.0, 1.0], [33300.0, 1.0], [34900.0, 2.0], [36500.0, 1.0], [38100.0, 1.0], [40300.0, 1.0], [39300.0, 1.0], [42500.0, 1.0], [42100.0, 1.0], [42700.0, 1.0], [44500.0, 1.0], [44100.0, 1.0], [43300.0, 2.0], [44300.0, 1.0], [3100.0, 1.0], [6000.0, 1.0], [8200.0, 1.0], [11000.0, 1.0], [13600.0, 1.0], [16200.0, 1.0], [17300.0, 1.0], [17400.0, 1.0], [17100.0, 3.0], [16700.0, 1.0], [16900.0, 2.0], [18200.0, 4.0], [18300.0, 4.0], [17700.0, 8.0], [17500.0, 2.0], [17600.0, 10.0], [17800.0, 5.0], [18100.0, 2.0], [18000.0, 6.0], [17900.0, 4.0], [18400.0, 1.0], [19400.0, 2.0], [18800.0, 2.0], [18500.0, 6.0], [18700.0, 3.0], [18900.0, 2.0], [19300.0, 1.0], [18600.0, 1.0], [19200.0, 1.0], [20300.0, 2.0], [19600.0, 3.0], [20200.0, 2.0], [20000.0, 4.0], [19800.0, 3.0], [19700.0, 3.0], [19900.0, 2.0], [20400.0, 6.0], [19500.0, 1.0], [21000.0, 3.0], [21300.0, 2.0], [21400.0, 2.0], [20900.0, 4.0], [21200.0, 4.0], [20800.0, 4.0], [20600.0, 2.0], [21100.0, 2.0], [22300.0, 3.0], [21900.0, 3.0], [22400.0, 3.0], [21800.0, 1.0], [22500.0, 1.0], [22200.0, 2.0], [22100.0, 2.0], [22000.0, 1.0], [23300.0, 3.0], [23400.0, 2.0], [22900.0, 5.0], [23200.0, 6.0], [23500.0, 3.0], [23100.0, 3.0], [22800.0, 3.0], [22700.0, 4.0], [22600.0, 5.0], [23000.0, 4.0], [24400.0, 5.0], [23900.0, 2.0], [24300.0, 5.0], [24200.0, 7.0], [23600.0, 1.0], [24000.0, 3.0], [24100.0, 2.0], [23700.0, 1.0], [23800.0, 2.0], [24500.0, 1.0], [25400.0, 4.0], [25200.0, 5.0], [25100.0, 11.0], [25300.0, 4.0], [24600.0, 7.0], [25500.0, 4.0], [25000.0, 7.0], [24900.0, 6.0], [24700.0, 5.0], [24800.0, 4.0], [25800.0, 5.0], [26000.0, 4.0], [25900.0, 4.0], [26100.0, 2.0], [26500.0, 8.0], [26400.0, 5.0], [26600.0, 1.0], [25700.0, 8.0], [25600.0, 8.0], [26300.0, 4.0], [26200.0, 8.0], [27400.0, 3.0], [26800.0, 4.0], [26900.0, 6.0], [27000.0, 2.0], [27100.0, 4.0], [27200.0, 7.0], [26700.0, 4.0], [27500.0, 1.0], [27600.0, 6.0], [27300.0, 2.0], [27900.0, 5.0], [27800.0, 4.0], [28100.0, 3.0], [27700.0, 4.0], [28300.0, 6.0], [28200.0, 3.0], [28500.0, 8.0], [28600.0, 3.0], [28000.0, 3.0], [28400.0, 5.0], [29500.0, 5.0], [29100.0, 6.0], [29000.0, 6.0], [29400.0, 6.0], [29300.0, 4.0], [28800.0, 3.0], [29200.0, 5.0], [29600.0, 3.0], [28700.0, 2.0], [28900.0, 2.0], [30500.0, 12.0], [29700.0, 7.0], [30100.0, 15.0], [30400.0, 20.0], [30600.0, 24.0], [30700.0, 12.0], [29800.0, 8.0], [29900.0, 13.0], [30300.0, 14.0], [30200.0, 24.0], [30000.0, 17.0], [30900.0, 9.0], [31400.0, 4.0], [30800.0, 11.0], [31100.0, 14.0], [31300.0, 8.0], [31000.0, 13.0], [31200.0, 8.0], [31500.0, 2.0], [31600.0, 2.0], [31700.0, 2.0], [31900.0, 2.0], [31800.0, 1.0], [32400.0, 1.0], [32200.0, 1.0], [32300.0, 2.0], [32000.0, 1.0], [34200.0, 1.0], [32800.0, 2.0], [33800.0, 1.0], [35800.0, 1.0], [35200.0, 1.0], [35000.0, 1.0], [36400.0, 1.0], [37400.0, 1.0], [37000.0, 1.0], [38000.0, 1.0], [39000.0, 1.0], [40600.0, 1.0], [39600.0, 1.0], [44800.0, 1.0], [45200.0, 2.0], [46200.0, 1.0], [45600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.63157894736842, "minX": 1.60241322E12, "maxY": 10.0, "series": [{"data": [[1.60241442E12, 10.0], [1.60241472E12, 10.0], [1.60241382E12, 10.0], [1.60241412E12, 10.0], [1.60241322E12, 10.0], [1.60241352E12, 10.0], [1.60241514E12, 10.0], [1.60241454E12, 10.0], [1.60241484E12, 10.0], [1.60241394E12, 10.0], [1.60241424E12, 10.0], [1.60241334E12, 10.0], [1.60241364E12, 10.0], [1.60241466E12, 10.0], [1.60241496E12, 10.0], [1.60241406E12, 10.0], [1.60241436E12, 10.0], [1.60241346E12, 10.0], [1.60241376E12, 10.0], [1.60241478E12, 10.0], [1.60241508E12, 10.0], [1.60241418E12, 10.0], [1.60241448E12, 10.0], [1.60241358E12, 10.0], [1.60241388E12, 10.0], [1.6024149E12, 10.0], [1.6024152E12, 7.63157894736842], [1.60241328E12, 10.0], [1.6024143E12, 10.0], [1.6024146E12, 10.0], [1.6024137E12, 10.0], [1.602414E12, 10.0], [1.6024134E12, 10.0], [1.60241502E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024152E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17612.0, "minX": 1.0, "maxY": 27071.85261707989, "series": [{"data": [[8.0, 17665.0], [4.0, 17741.0], [2.0, 17612.0], [1.0, 18067.0], [9.0, 17659.0], [10.0, 27071.85261707989], [5.0, 17776.0], [6.0, 17751.0], [3.0, 17762.0], [7.0, 17719.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26957.71020408163]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.43333333333334, "minX": 1.60241322E12, "maxY": 200259.68333333332, "series": [{"data": [[1.60241442E12, 64818.25], [1.60241472E12, 56176.61666666667], [1.60241382E12, 41099.35], [1.60241412E12, 85416.65], [1.60241322E12, 164758.25], [1.60241352E12, 45780.61666666667], [1.60241514E12, 75559.66666666667], [1.60241454E12, 46712.833333333336], [1.60241484E12, 50014.01666666667], [1.60241394E12, 34708.85], [1.60241424E12, 89181.63333333333], [1.60241334E12, 122952.35], [1.60241364E12, 45066.63333333333], [1.60241466E12, 43322.4], [1.60241496E12, 25752.516666666666], [1.60241406E12, 161881.08333333334], [1.60241436E12, 47103.71666666667], [1.60241346E12, 78767.98333333334], [1.60241376E12, 52623.1], [1.60241478E12, 43667.01666666667], [1.60241508E12, 154994.43333333332], [1.60241418E12, 200259.68333333332], [1.60241448E12, 32510.033333333333], [1.60241358E12, 44588.35], [1.60241388E12, 43352.4], [1.6024149E12, 40881.25], [1.6024152E12, 13455.033333333333], [1.60241328E12, 101468.38333333333], [1.6024143E12, 87668.06666666667], [1.6024146E12, 46678.416666666664], [1.6024137E12, 48748.95], [1.602414E12, 36001.5], [1.6024134E12, 69424.68333333333], [1.60241502E12, 28061.733333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60241442E12, 154.63333333333333], [1.60241472E12, 154.41666666666666], [1.60241382E12, 138.76666666666668], [1.60241412E12, 163.63333333333333], [1.60241322E12, 102.43333333333334], [1.60241352E12, 153.7], [1.60241514E12, 152.41666666666666], [1.60241454E12, 146.15], [1.60241484E12, 146.1], [1.60241394E12, 160.68333333333334], [1.60241424E12, 199.98333333333332], [1.60241334E12, 169.98333333333332], [1.60241364E12, 146.11666666666667], [1.60241466E12, 146.1], [1.60241496E12, 175.01666666666668], [1.60241406E12, 191.83333333333334], [1.60241436E12, 169.28333333333333], [1.60241346E12, 176.26666666666668], [1.60241376E12, 146.38333333333333], [1.60241478E12, 146.1], [1.60241508E12, 181.5], [1.60241418E12, 186.46666666666667], [1.60241448E12, 124.16666666666667], [1.60241358E12, 138.81666666666666], [1.60241388E12, 146.0], [1.6024149E12, 153.28333333333333], [1.6024152E12, 126.61666666666666], [1.60241328E12, 194.56666666666666], [1.6024143E12, 179.61666666666667], [1.6024146E12, 138.83333333333334], [1.6024137E12, 146.13333333333333], [1.602414E12, 196.61666666666667], [1.6024134E12, 111.28333333333333], [1.60241502E12, 175.38333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024152E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17939.894736842103, "minX": 1.60241322E12, "maxY": 40699.600000000006, "series": [{"data": [[1.60241442E12, 25666.238095238095], [1.60241472E12, 28989.52380952381], [1.60241382E12, 30351.526315789473], [1.60241412E12, 25370.739130434777], [1.60241322E12, 17955.571428571428], [1.60241352E12, 27230.71428571429], [1.60241514E12, 31147.09523809524], [1.60241454E12, 30025.5], [1.60241484E12, 30455.4], [1.60241394E12, 28183.40909090909], [1.60241424E12, 22574.499999999996], [1.60241334E12, 22011.608695652172], [1.60241364E12, 30579.649999999998], [1.60241466E12, 30336.3], [1.60241496E12, 25549.875], [1.60241406E12, 20362.48148148148], [1.60241436E12, 26136.695652173916], [1.60241346E12, 27058.45833333333], [1.60241376E12, 30082.850000000002], [1.60241478E12, 30001.549999999996], [1.60241508E12, 22972.839999999997], [1.60241418E12, 24138.153846153844], [1.60241448E12, 37349.76470588235], [1.60241358E12, 30970.526315789477], [1.60241388E12, 30862.0], [1.6024149E12, 29289.000000000007], [1.6024152E12, 17939.894736842103], [1.60241328E12, 23317.48148148148], [1.6024143E12, 22449.760000000006], [1.6024146E12, 30980.26315789474], [1.6024137E12, 30621.0], [1.602414E12, 23689.074074074077], [1.6024134E12, 40699.600000000006], [1.60241502E12, 24444.083333333336]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024152E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17938.052631578947, "minX": 1.60241322E12, "maxY": 40696.866666666676, "series": [{"data": [[1.60241442E12, 25664.761904761905], [1.60241472E12, 28987.999999999996], [1.60241382E12, 30350.315789473683], [1.60241412E12, 25368.0], [1.60241322E12, 17951.07142857143], [1.60241352E12, 27229.57142857143], [1.60241514E12, 31144.52380952381], [1.60241454E12, 30024.2], [1.60241484E12, 30454.0], [1.60241394E12, 28182.40909090909], [1.60241424E12, 22572.60714285714], [1.60241334E12, 22008.956521739125], [1.60241364E12, 30578.499999999996], [1.60241466E12, 30335.35], [1.60241496E12, 25549.083333333336], [1.60241406E12, 20358.370370370372], [1.60241436E12, 26135.826086956524], [1.60241346E12, 27056.958333333332], [1.60241376E12, 30081.600000000002], [1.60241478E12, 30000.55], [1.60241508E12, 22969.040000000005], [1.60241418E12, 24134.0], [1.60241448E12, 37348.82352941176], [1.60241358E12, 30969.368421052633], [1.60241388E12, 30860.75], [1.6024149E12, 29288.000000000007], [1.6024152E12, 17938.052631578947], [1.60241328E12, 23315.59259259259], [1.6024143E12, 22447.48], [1.6024146E12, 30978.947368421057], [1.6024137E12, 30620.000000000004], [1.602414E12, 23687.666666666664], [1.6024134E12, 40696.866666666676], [1.60241502E12, 24443.25]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024152E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.10526315789473684, "minX": 1.60241322E12, "maxY": 7.785714285714283, "series": [{"data": [[1.60241442E12, 0.5238095238095237], [1.60241472E12, 0.28571428571428575], [1.60241382E12, 0.7894736842105264], [1.60241412E12, 0.5652173913043479], [1.60241322E12, 7.785714285714283], [1.60241352E12, 0.7142857142857144], [1.60241514E12, 0.6190476190476192], [1.60241454E12, 0.5], [1.60241484E12, 0.55], [1.60241394E12, 0.5], [1.60241424E12, 0.4285714285714285], [1.60241334E12, 0.17391304347826086], [1.60241364E12, 0.7], [1.60241466E12, 0.65], [1.60241496E12, 0.5], [1.60241406E12, 0.25925925925925936], [1.60241436E12, 0.47826086956521735], [1.60241346E12, 0.5833333333333335], [1.60241376E12, 0.8], [1.60241478E12, 0.55], [1.60241508E12, 0.24000000000000005], [1.60241418E12, 0.4230769230769231], [1.60241448E12, 0.47058823529411764], [1.60241358E12, 0.10526315789473684], [1.60241388E12, 0.65], [1.6024149E12, 0.6190476190476191], [1.6024152E12, 0.368421052631579], [1.60241328E12, 0.5185185185185185], [1.6024143E12, 0.12], [1.6024146E12, 0.736842105263158], [1.6024137E12, 0.65], [1.602414E12, 0.5185185185185186], [1.6024134E12, 0.7999999999999999], [1.60241502E12, 0.4583333333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024152E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3158.0, "minX": 1.60241322E12, "maxY": 46222.0, "series": [{"data": [[1.60241442E12, 30574.0], [1.60241472E12, 30013.0], [1.60241382E12, 31159.0], [1.60241412E12, 32990.0], [1.60241322E12, 26511.0], [1.60241352E12, 31878.0], [1.60241514E12, 39652.0], [1.60241454E12, 30830.0], [1.60241484E12, 30848.0], [1.60241394E12, 30838.0], [1.60241424E12, 29299.0], [1.60241334E12, 27958.0], [1.60241364E12, 31304.0], [1.60241466E12, 31036.0], [1.60241496E12, 28871.0], [1.60241406E12, 23207.0], [1.60241436E12, 29734.0], [1.60241346E12, 33759.0], [1.60241376E12, 31112.0], [1.60241478E12, 30736.0], [1.60241508E12, 28895.0], [1.60241418E12, 26743.0], [1.60241448E12, 44897.0], [1.60241358E12, 31729.0], [1.60241388E12, 31678.0], [1.6024149E12, 30815.0], [1.6024152E12, 23050.0], [1.60241328E12, 28103.0], [1.6024143E12, 32318.0], [1.6024146E12, 31393.0], [1.6024137E12, 31401.0], [1.602414E12, 27688.0], [1.6024134E12, 46222.0], [1.60241502E12, 28540.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60241442E12, 23120.0], [1.60241472E12, 27715.0], [1.60241382E12, 29040.0], [1.60241412E12, 17864.0], [1.60241322E12, 3158.0], [1.60241352E12, 24223.0], [1.60241514E12, 24758.0], [1.60241454E12, 26717.0], [1.60241484E12, 29984.0], [1.60241394E12, 25303.0], [1.60241424E12, 17860.0], [1.60241334E12, 17546.0], [1.60241364E12, 30076.0], [1.60241466E12, 29684.0], [1.60241496E12, 22171.0], [1.60241406E12, 17376.0], [1.60241436E12, 23260.0], [1.60241346E12, 23522.0], [1.60241376E12, 29012.0], [1.60241478E12, 29380.0], [1.60241508E12, 19525.0], [1.60241418E12, 19708.0], [1.60241448E12, 28618.0], [1.60241358E12, 27941.0], [1.60241388E12, 30129.0], [1.6024149E12, 26028.0], [1.6024152E12, 16723.0], [1.60241328E12, 18537.0], [1.6024143E12, 17461.0], [1.6024146E12, 30281.0], [1.6024137E12, 29870.0], [1.602414E12, 17923.0], [1.6024134E12, 31470.0], [1.60241502E12, 21243.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60241442E12, 23120.0], [1.60241472E12, 27715.0], [1.60241382E12, 29040.0], [1.60241412E12, 17864.0], [1.60241322E12, 3158.0], [1.60241352E12, 24223.0], [1.60241514E12, 24758.0], [1.60241454E12, 26717.0], [1.60241484E12, 29984.0], [1.60241394E12, 25303.0], [1.60241424E12, 17860.0], [1.60241334E12, 17546.0], [1.60241364E12, 30076.0], [1.60241466E12, 29684.0], [1.60241496E12, 22171.0], [1.60241406E12, 17376.0], [1.60241436E12, 23260.0], [1.60241346E12, 23522.0], [1.60241376E12, 29012.0], [1.60241478E12, 29380.0], [1.60241508E12, 19525.0], [1.60241418E12, 19708.0], [1.60241448E12, 28618.0], [1.60241358E12, 27941.0], [1.60241388E12, 30129.0], [1.6024149E12, 26028.0], [1.6024152E12, 16723.0], [1.60241328E12, 18537.0], [1.6024143E12, 17461.0], [1.6024146E12, 30281.0], [1.6024137E12, 29870.0], [1.602414E12, 17923.0], [1.6024134E12, 31470.0], [1.60241502E12, 21243.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60241442E12, 23120.0], [1.60241472E12, 27715.0], [1.60241382E12, 29040.0], [1.60241412E12, 17864.0], [1.60241322E12, 3158.0], [1.60241352E12, 24223.0], [1.60241514E12, 24758.0], [1.60241454E12, 26717.0], [1.60241484E12, 29984.0], [1.60241394E12, 25303.0], [1.60241424E12, 17860.0], [1.60241334E12, 17546.0], [1.60241364E12, 30076.0], [1.60241466E12, 29684.0], [1.60241496E12, 22171.0], [1.60241406E12, 17376.0], [1.60241436E12, 23260.0], [1.60241346E12, 23522.0], [1.60241376E12, 29012.0], [1.60241478E12, 29380.0], [1.60241508E12, 19525.0], [1.60241418E12, 19708.0], [1.60241448E12, 28618.0], [1.60241358E12, 27941.0], [1.60241388E12, 30129.0], [1.6024149E12, 26028.0], [1.6024152E12, 16723.0], [1.60241328E12, 18537.0], [1.6024143E12, 17461.0], [1.6024146E12, 30281.0], [1.6024137E12, 29870.0], [1.602414E12, 17923.0], [1.6024134E12, 31470.0], [1.60241502E12, 21243.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60241442E12, 23120.0], [1.60241472E12, 27715.0], [1.60241382E12, 29040.0], [1.60241412E12, 17864.0], [1.60241322E12, 3158.0], [1.60241352E12, 24223.0], [1.60241514E12, 24758.0], [1.60241454E12, 26717.0], [1.60241484E12, 29984.0], [1.60241394E12, 25303.0], [1.60241424E12, 17860.0], [1.60241334E12, 17546.0], [1.60241364E12, 30076.0], [1.60241466E12, 29684.0], [1.60241496E12, 22171.0], [1.60241406E12, 17376.0], [1.60241436E12, 23260.0], [1.60241346E12, 23522.0], [1.60241376E12, 29012.0], [1.60241478E12, 29380.0], [1.60241508E12, 19525.0], [1.60241418E12, 19708.0], [1.60241448E12, 28618.0], [1.60241358E12, 27941.0], [1.60241388E12, 30129.0], [1.6024149E12, 26028.0], [1.6024152E12, 16723.0], [1.60241328E12, 18537.0], [1.6024143E12, 17461.0], [1.6024146E12, 30281.0], [1.6024137E12, 29870.0], [1.602414E12, 17923.0], [1.6024134E12, 31470.0], [1.60241502E12, 21243.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60241442E12, 25444.0], [1.60241472E12, 29237.0], [1.60241382E12, 30456.0], [1.60241412E12, 25627.0], [1.60241322E12, 19708.0], [1.60241352E12, 27295.0], [1.60241514E12, 29882.0], [1.60241454E12, 30339.5], [1.60241484E12, 30365.5], [1.60241394E12, 27737.0], [1.60241424E12, 21084.5], [1.60241334E12, 22947.0], [1.60241364E12, 30635.5], [1.60241466E12, 30291.0], [1.60241496E12, 25563.0], [1.60241406E12, 19855.0], [1.60241436E12, 25787.0], [1.60241346E12, 25660.5], [1.60241376E12, 30204.5], [1.60241478E12, 30014.0], [1.60241508E12, 22601.0], [1.60241418E12, 25049.0], [1.60241448E12, 37059.0], [1.60241358E12, 31154.0], [1.60241388E12, 30764.0], [1.6024149E12, 29869.0], [1.6024152E12, 17714.0], [1.60241328E12, 22333.0], [1.6024143E12, 18228.0], [1.6024146E12, 31105.0], [1.6024137E12, 30633.5], [1.602414E12, 24755.0], [1.6024134E12, 42529.0], [1.60241502E12, 24439.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024152E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27805.0, "minX": 1.0, "maxY": 27805.0, "series": [{"data": [[1.0, 27805.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27805.0, "minX": 1.0, "maxY": 27805.0, "series": [{"data": [[1.0, 27805.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60241322E12, "maxY": 0.4666666666666667, "series": [{"data": [[1.60241442E12, 0.35], [1.60241472E12, 0.35], [1.60241382E12, 0.31666666666666665], [1.60241412E12, 0.38333333333333336], [1.60241322E12, 0.4], [1.60241352E12, 0.35], [1.60241514E12, 0.35], [1.60241454E12, 0.3333333333333333], [1.60241484E12, 0.3333333333333333], [1.60241394E12, 0.36666666666666664], [1.60241424E12, 0.4666666666666667], [1.60241334E12, 0.38333333333333336], [1.60241364E12, 0.3333333333333333], [1.60241466E12, 0.3333333333333333], [1.60241496E12, 0.4], [1.60241406E12, 0.45], [1.60241436E12, 0.38333333333333336], [1.60241346E12, 0.4], [1.60241376E12, 0.3333333333333333], [1.60241478E12, 0.3333333333333333], [1.60241508E12, 0.4166666666666667], [1.60241418E12, 0.43333333333333335], [1.60241448E12, 0.2833333333333333], [1.60241358E12, 0.31666666666666665], [1.60241388E12, 0.3333333333333333], [1.6024149E12, 0.35], [1.6024152E12, 0.15], [1.60241328E12, 0.45], [1.6024143E12, 0.4166666666666667], [1.6024146E12, 0.31666666666666665], [1.6024137E12, 0.3333333333333333], [1.602414E12, 0.45], [1.6024134E12, 0.25], [1.60241502E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024152E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60241322E12, "maxY": 0.4666666666666667, "series": [{"data": [[1.60241442E12, 0.35], [1.60241472E12, 0.35], [1.60241382E12, 0.31666666666666665], [1.60241412E12, 0.38333333333333336], [1.60241322E12, 0.23333333333333334], [1.60241352E12, 0.35], [1.60241514E12, 0.35], [1.60241454E12, 0.3333333333333333], [1.60241484E12, 0.3333333333333333], [1.60241394E12, 0.36666666666666664], [1.60241424E12, 0.4666666666666667], [1.60241334E12, 0.38333333333333336], [1.60241364E12, 0.3333333333333333], [1.60241466E12, 0.3333333333333333], [1.60241496E12, 0.4], [1.60241406E12, 0.45], [1.60241436E12, 0.38333333333333336], [1.60241346E12, 0.4], [1.60241376E12, 0.3333333333333333], [1.60241478E12, 0.3333333333333333], [1.60241508E12, 0.4166666666666667], [1.60241418E12, 0.43333333333333335], [1.60241448E12, 0.2833333333333333], [1.60241358E12, 0.31666666666666665], [1.60241388E12, 0.3333333333333333], [1.6024149E12, 0.35], [1.6024152E12, 0.31666666666666665], [1.60241328E12, 0.45], [1.6024143E12, 0.4166666666666667], [1.6024146E12, 0.31666666666666665], [1.6024137E12, 0.3333333333333333], [1.602414E12, 0.45], [1.6024134E12, 0.25], [1.60241502E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024152E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60241322E12, "maxY": 0.4666666666666667, "series": [{"data": [[1.60241442E12, 0.35], [1.60241472E12, 0.35], [1.60241382E12, 0.31666666666666665], [1.60241412E12, 0.38333333333333336], [1.60241322E12, 0.23333333333333334], [1.60241352E12, 0.35], [1.60241514E12, 0.35], [1.60241454E12, 0.3333333333333333], [1.60241484E12, 0.3333333333333333], [1.60241394E12, 0.36666666666666664], [1.60241424E12, 0.4666666666666667], [1.60241334E12, 0.38333333333333336], [1.60241364E12, 0.3333333333333333], [1.60241466E12, 0.3333333333333333], [1.60241496E12, 0.4], [1.60241406E12, 0.45], [1.60241436E12, 0.38333333333333336], [1.60241346E12, 0.4], [1.60241376E12, 0.3333333333333333], [1.60241478E12, 0.3333333333333333], [1.60241508E12, 0.4166666666666667], [1.60241418E12, 0.43333333333333335], [1.60241448E12, 0.2833333333333333], [1.60241358E12, 0.31666666666666665], [1.60241388E12, 0.3333333333333333], [1.6024149E12, 0.35], [1.6024152E12, 0.31666666666666665], [1.60241328E12, 0.45], [1.6024143E12, 0.4166666666666667], [1.6024146E12, 0.31666666666666665], [1.6024137E12, 0.3333333333333333], [1.602414E12, 0.45], [1.6024134E12, 0.25], [1.60241502E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024152E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60241322E12, "maxY": 0.4666666666666667, "series": [{"data": [[1.60241442E12, 0.35], [1.60241472E12, 0.35], [1.60241382E12, 0.31666666666666665], [1.60241412E12, 0.38333333333333336], [1.60241322E12, 0.23333333333333334], [1.60241352E12, 0.35], [1.60241514E12, 0.35], [1.60241454E12, 0.3333333333333333], [1.60241484E12, 0.3333333333333333], [1.60241394E12, 0.36666666666666664], [1.60241424E12, 0.4666666666666667], [1.60241334E12, 0.38333333333333336], [1.60241364E12, 0.3333333333333333], [1.60241466E12, 0.3333333333333333], [1.60241496E12, 0.4], [1.60241406E12, 0.45], [1.60241436E12, 0.38333333333333336], [1.60241346E12, 0.4], [1.60241376E12, 0.3333333333333333], [1.60241478E12, 0.3333333333333333], [1.60241508E12, 0.4166666666666667], [1.60241418E12, 0.43333333333333335], [1.60241448E12, 0.2833333333333333], [1.60241358E12, 0.31666666666666665], [1.60241388E12, 0.3333333333333333], [1.6024149E12, 0.35], [1.6024152E12, 0.31666666666666665], [1.60241328E12, 0.45], [1.6024143E12, 0.4166666666666667], [1.6024146E12, 0.31666666666666665], [1.6024137E12, 0.3333333333333333], [1.602414E12, 0.45], [1.6024134E12, 0.25], [1.60241502E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024152E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

