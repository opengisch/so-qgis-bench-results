/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3378.0, "minX": 0.0, "maxY": 46676.0, "series": [{"data": [[0.0, 3378.0], [0.1, 3378.0], [0.2, 5638.0], [0.3, 8734.0], [0.4, 8734.0], [0.5, 11598.0], [0.6, 14225.0], [0.7, 16991.0], [0.8, 16991.0], [0.9, 17335.0], [1.0, 17472.0], [1.1, 17534.0], [1.2, 17534.0], [1.3, 17553.0], [1.4, 17627.0], [1.5, 17721.0], [1.6, 17721.0], [1.7, 17741.0], [1.8, 17774.0], [1.9, 17774.0], [2.0, 17810.0], [2.1, 17811.0], [2.2, 17818.0], [2.3, 17818.0], [2.4, 17882.0], [2.5, 17908.0], [2.6, 17916.0], [2.7, 17916.0], [2.8, 17928.0], [2.9, 17935.0], [3.0, 17958.0], [3.1, 17958.0], [3.2, 17983.0], [3.3, 17998.0], [3.4, 17998.0], [3.5, 18052.0], [3.6, 18060.0], [3.7, 18096.0], [3.8, 18096.0], [3.9, 18177.0], [4.0, 18193.0], [4.1, 18276.0], [4.2, 18276.0], [4.3, 18290.0], [4.4, 18330.0], [4.5, 18333.0], [4.6, 18333.0], [4.7, 18333.0], [4.8, 18345.0], [4.9, 18351.0], [5.0, 18351.0], [5.1, 18360.0], [5.2, 18378.0], [5.3, 18378.0], [5.4, 18388.0], [5.5, 18403.0], [5.6, 18413.0], [5.7, 18413.0], [5.8, 18420.0], [5.9, 18435.0], [6.0, 18482.0], [6.1, 18482.0], [6.2, 18506.0], [6.3, 18514.0], [6.4, 18549.0], [6.5, 18549.0], [6.6, 18558.0], [6.7, 18630.0], [6.8, 18630.0], [6.9, 18640.0], [7.0, 18655.0], [7.1, 18706.0], [7.2, 18706.0], [7.3, 18730.0], [7.4, 18808.0], [7.5, 18811.0], [7.6, 18811.0], [7.7, 18818.0], [7.8, 18841.0], [7.9, 18885.0], [8.0, 18885.0], [8.1, 18895.0], [8.2, 18927.0], [8.3, 18959.0], [8.4, 18959.0], [8.5, 18985.0], [8.6, 19059.0], [8.7, 19059.0], [8.8, 19075.0], [8.9, 19092.0], [9.0, 19124.0], [9.1, 19124.0], [9.2, 19151.0], [9.3, 19259.0], [9.4, 19290.0], [9.5, 19290.0], [9.6, 19386.0], [9.7, 19426.0], [9.8, 19427.0], [9.9, 19427.0], [10.0, 19440.0], [10.1, 19476.0], [10.2, 19476.0], [10.3, 19518.0], [10.4, 19524.0], [10.5, 19527.0], [10.6, 19527.0], [10.7, 19568.0], [10.8, 19572.0], [10.9, 19615.0], [11.0, 19615.0], [11.1, 19720.0], [11.2, 19834.0], [11.3, 19884.0], [11.4, 19884.0], [11.5, 19947.0], [11.6, 19961.0], [11.7, 19961.0], [11.8, 20077.0], [11.9, 20146.0], [12.0, 20216.0], [12.1, 20216.0], [12.2, 20226.0], [12.3, 20295.0], [12.4, 20301.0], [12.5, 20301.0], [12.6, 20373.0], [12.7, 20393.0], [12.8, 20417.0], [12.9, 20417.0], [13.0, 20425.0], [13.1, 20458.0], [13.2, 20462.0], [13.3, 20462.0], [13.4, 20569.0], [13.5, 20606.0], [13.6, 20606.0], [13.7, 20620.0], [13.8, 20620.0], [13.9, 20656.0], [14.0, 20656.0], [14.1, 20690.0], [14.2, 20690.0], [14.3, 20696.0], [14.4, 20696.0], [14.5, 20698.0], [14.6, 20712.0], [14.7, 20743.0], [14.8, 20743.0], [14.9, 20754.0], [15.0, 20765.0], [15.1, 20765.0], [15.2, 20813.0], [15.3, 20841.0], [15.4, 20996.0], [15.5, 20996.0], [15.6, 21033.0], [15.7, 21120.0], [15.8, 21184.0], [15.9, 21184.0], [16.0, 21238.0], [16.1, 21263.0], [16.2, 21317.0], [16.3, 21317.0], [16.4, 21355.0], [16.5, 21359.0], [16.6, 21368.0], [16.7, 21368.0], [16.8, 21426.0], [16.9, 21428.0], [17.0, 21428.0], [17.1, 21518.0], [17.2, 21621.0], [17.3, 21760.0], [17.4, 21760.0], [17.5, 21848.0], [17.6, 21883.0], [17.7, 21969.0], [17.8, 21969.0], [17.9, 22027.0], [18.0, 22036.0], [18.1, 22061.0], [18.2, 22061.0], [18.3, 22140.0], [18.4, 22145.0], [18.5, 22145.0], [18.6, 22145.0], [18.7, 22226.0], [18.8, 22255.0], [18.9, 22255.0], [19.0, 22260.0], [19.1, 22288.0], [19.2, 22321.0], [19.3, 22321.0], [19.4, 22339.0], [19.5, 22369.0], [19.6, 22437.0], [19.7, 22437.0], [19.8, 22509.0], [19.9, 22526.0], [20.0, 22610.0], [20.1, 22610.0], [20.2, 22615.0], [20.3, 22633.0], [20.4, 22633.0], [20.5, 22649.0], [20.6, 22680.0], [20.7, 22720.0], [20.8, 22720.0], [20.9, 22843.0], [21.0, 22850.0], [21.1, 22889.0], [21.2, 22889.0], [21.3, 22900.0], [21.4, 22916.0], [21.5, 22947.0], [21.6, 22947.0], [21.7, 22975.0], [21.8, 23015.0], [21.9, 23015.0], [22.0, 23033.0], [22.1, 23095.0], [22.2, 23111.0], [22.3, 23111.0], [22.4, 23141.0], [22.5, 23190.0], [22.6, 23200.0], [22.7, 23200.0], [22.8, 23207.0], [22.9, 23215.0], [23.0, 23231.0], [23.1, 23231.0], [23.2, 23255.0], [23.3, 23277.0], [23.4, 23277.0], [23.5, 23328.0], [23.6, 23352.0], [23.7, 23357.0], [23.8, 23357.0], [23.9, 23481.0], [24.0, 23552.0], [24.1, 23601.0], [24.2, 23601.0], [24.3, 23722.0], [24.4, 23751.0], [24.5, 23782.0], [24.6, 23782.0], [24.7, 23801.0], [24.8, 23823.0], [24.9, 23833.0], [25.0, 23833.0], [25.1, 23937.0], [25.2, 23958.0], [25.3, 23958.0], [25.4, 23959.0], [25.5, 23966.0], [25.6, 24030.0], [25.7, 24030.0], [25.8, 24037.0], [25.9, 24040.0], [26.0, 24044.0], [26.1, 24044.0], [26.2, 24092.0], [26.3, 24155.0], [26.4, 24267.0], [26.5, 24267.0], [26.6, 24329.0], [26.7, 24393.0], [26.8, 24393.0], [26.9, 24397.0], [27.0, 24399.0], [27.1, 24421.0], [27.2, 24421.0], [27.3, 24482.0], [27.4, 24502.0], [27.5, 24513.0], [27.6, 24513.0], [27.7, 24516.0], [27.8, 24537.0], [27.9, 24538.0], [28.0, 24538.0], [28.1, 24542.0], [28.2, 24574.0], [28.3, 24583.0], [28.4, 24583.0], [28.5, 24600.0], [28.6, 24627.0], [28.7, 24627.0], [28.8, 24633.0], [28.9, 24645.0], [29.0, 24648.0], [29.1, 24648.0], [29.2, 24659.0], [29.3, 24681.0], [29.4, 24715.0], [29.5, 24715.0], [29.6, 24745.0], [29.7, 24754.0], [29.8, 24768.0], [29.9, 24768.0], [30.0, 24775.0], [30.1, 24788.0], [30.2, 24788.0], [30.3, 24810.0], [30.4, 24811.0], [30.5, 24850.0], [30.6, 24850.0], [30.7, 24874.0], [30.8, 24878.0], [30.9, 24906.0], [31.0, 24906.0], [31.1, 24949.0], [31.2, 24954.0], [31.3, 25009.0], [31.4, 25009.0], [31.5, 25013.0], [31.6, 25026.0], [31.7, 25026.0], [31.8, 25028.0], [31.9, 25030.0], [32.0, 25072.0], [32.1, 25072.0], [32.2, 25159.0], [32.3, 25169.0], [32.4, 25174.0], [32.5, 25174.0], [32.6, 25241.0], [32.7, 25249.0], [32.8, 25252.0], [32.9, 25252.0], [33.0, 25256.0], [33.1, 25293.0], [33.2, 25304.0], [33.3, 25304.0], [33.4, 25312.0], [33.5, 25322.0], [33.6, 25322.0], [33.7, 25338.0], [33.8, 25411.0], [33.9, 25420.0], [34.0, 25420.0], [34.1, 25438.0], [34.2, 25510.0], [34.3, 25522.0], [34.4, 25522.0], [34.5, 25531.0], [34.6, 25543.0], [34.7, 25551.0], [34.8, 25551.0], [34.9, 25555.0], [35.0, 25599.0], [35.1, 25599.0], [35.2, 25607.0], [35.3, 25624.0], [35.4, 25697.0], [35.5, 25697.0], [35.6, 25752.0], [35.7, 25768.0], [35.8, 25768.0], [35.9, 25768.0], [36.0, 25769.0], [36.1, 25776.0], [36.2, 25800.0], [36.3, 25800.0], [36.4, 25849.0], [36.5, 25877.0], [36.6, 25885.0], [36.7, 25885.0], [36.8, 25894.0], [36.9, 25913.0], [37.0, 25913.0], [37.1, 25978.0], [37.2, 26027.0], [37.3, 26036.0], [37.4, 26036.0], [37.5, 26059.0], [37.6, 26099.0], [37.7, 26104.0], [37.8, 26104.0], [37.9, 26107.0], [38.0, 26110.0], [38.1, 26119.0], [38.2, 26119.0], [38.3, 26123.0], [38.4, 26128.0], [38.5, 26128.0], [38.6, 26135.0], [38.7, 26157.0], [38.8, 26188.0], [38.9, 26188.0], [39.0, 26195.0], [39.1, 26208.0], [39.2, 26236.0], [39.3, 26236.0], [39.4, 26251.0], [39.5, 26277.0], [39.6, 26325.0], [39.7, 26325.0], [39.8, 26338.0], [39.9, 26342.0], [40.0, 26349.0], [40.1, 26349.0], [40.2, 26371.0], [40.3, 26376.0], [40.4, 26376.0], [40.5, 26388.0], [40.6, 26396.0], [40.7, 26403.0], [40.8, 26403.0], [40.9, 26405.0], [41.0, 26409.0], [41.1, 26418.0], [41.2, 26418.0], [41.3, 26430.0], [41.4, 26444.0], [41.5, 26492.0], [41.6, 26492.0], [41.7, 26538.0], [41.8, 26561.0], [41.9, 26561.0], [42.0, 26574.0], [42.1, 26591.0], [42.2, 26598.0], [42.3, 26598.0], [42.4, 26631.0], [42.5, 26653.0], [42.6, 26685.0], [42.7, 26685.0], [42.8, 26818.0], [42.9, 26829.0], [43.0, 26838.0], [43.1, 26838.0], [43.2, 26902.0], [43.3, 26905.0], [43.4, 26905.0], [43.5, 26905.0], [43.6, 26909.0], [43.7, 26919.0], [43.8, 26919.0], [43.9, 26921.0], [44.0, 26952.0], [44.1, 26974.0], [44.2, 26974.0], [44.3, 26977.0], [44.4, 27003.0], [44.5, 27028.0], [44.6, 27028.0], [44.7, 27034.0], [44.8, 27039.0], [44.9, 27080.0], [45.0, 27080.0], [45.1, 27091.0], [45.2, 27095.0], [45.3, 27095.0], [45.4, 27102.0], [45.5, 27245.0], [45.6, 27289.0], [45.7, 27289.0], [45.8, 27300.0], [45.9, 27310.0], [46.0, 27318.0], [46.1, 27318.0], [46.2, 27335.0], [46.3, 27336.0], [46.4, 27421.0], [46.5, 27421.0], [46.6, 27449.0], [46.7, 27452.0], [46.8, 27452.0], [46.9, 27459.0], [47.0, 27467.0], [47.1, 27478.0], [47.2, 27478.0], [47.3, 27520.0], [47.4, 27528.0], [47.5, 27558.0], [47.6, 27558.0], [47.7, 27561.0], [47.8, 27564.0], [47.9, 27586.0], [48.0, 27586.0], [48.1, 27615.0], [48.2, 27634.0], [48.3, 27637.0], [48.4, 27637.0], [48.5, 27673.0], [48.6, 27700.0], [48.7, 27700.0], [48.8, 27760.0], [48.9, 27812.0], [49.0, 27834.0], [49.1, 27834.0], [49.2, 27865.0], [49.3, 27873.0], [49.4, 27955.0], [49.5, 27955.0], [49.6, 28070.0], [49.7, 28090.0], [49.8, 28097.0], [49.9, 28097.0], [50.0, 28116.0], [50.1, 28130.0], [50.2, 28130.0], [50.3, 28137.0], [50.4, 28157.0], [50.5, 28159.0], [50.6, 28159.0], [50.7, 28194.0], [50.8, 28218.0], [50.9, 28265.0], [51.0, 28265.0], [51.1, 28362.0], [51.2, 28391.0], [51.3, 28438.0], [51.4, 28438.0], [51.5, 28481.0], [51.6, 28496.0], [51.7, 28496.0], [51.8, 28588.0], [51.9, 28590.0], [52.0, 28607.0], [52.1, 28607.0], [52.2, 28620.0], [52.3, 28633.0], [52.4, 28640.0], [52.5, 28640.0], [52.6, 28697.0], [52.7, 28705.0], [52.8, 28718.0], [52.9, 28718.0], [53.0, 28770.0], [53.1, 28770.0], [53.2, 28794.0], [53.3, 28794.0], [53.4, 28811.0], [53.5, 28861.0], [53.6, 28861.0], [53.7, 28896.0], [53.8, 28897.0], [53.9, 28942.0], [54.0, 28942.0], [54.1, 28979.0], [54.2, 29002.0], [54.3, 29013.0], [54.4, 29013.0], [54.5, 29041.0], [54.6, 29072.0], [54.7, 29079.0], [54.8, 29079.0], [54.9, 29095.0], [55.0, 29123.0], [55.1, 29123.0], [55.2, 29137.0], [55.3, 29147.0], [55.4, 29179.0], [55.5, 29179.0], [55.6, 29254.0], [55.7, 29260.0], [55.8, 29263.0], [55.9, 29263.0], [56.0, 29305.0], [56.1, 29306.0], [56.2, 29337.0], [56.3, 29337.0], [56.4, 29341.0], [56.5, 29393.0], [56.6, 29394.0], [56.7, 29394.0], [56.8, 29417.0], [56.9, 29420.0], [57.0, 29420.0], [57.1, 29449.0], [57.2, 29478.0], [57.3, 29490.0], [57.4, 29490.0], [57.5, 29503.0], [57.6, 29507.0], [57.7, 29509.0], [57.8, 29509.0], [57.9, 29564.0], [58.0, 29614.0], [58.1, 29625.0], [58.2, 29625.0], [58.3, 29626.0], [58.4, 29643.0], [58.5, 29643.0], [58.6, 29670.0], [58.7, 29692.0], [58.8, 29735.0], [58.9, 29735.0], [59.0, 29747.0], [59.1, 29756.0], [59.2, 29778.0], [59.3, 29778.0], [59.4, 29792.0], [59.5, 29848.0], [59.6, 29865.0], [59.7, 29865.0], [59.8, 29867.0], [59.9, 29987.0], [60.0, 29988.0], [60.1, 29988.0], [60.2, 30000.0], [60.3, 30018.0], [60.4, 30018.0], [60.5, 30019.0], [60.6, 30021.0], [60.7, 30047.0], [60.8, 30047.0], [60.9, 30048.0], [61.0, 30070.0], [61.1, 30080.0], [61.2, 30080.0], [61.3, 30095.0], [61.4, 30102.0], [61.5, 30109.0], [61.6, 30109.0], [61.7, 30114.0], [61.8, 30116.0], [61.9, 30116.0], [62.0, 30117.0], [62.1, 30126.0], [62.2, 30134.0], [62.3, 30134.0], [62.4, 30165.0], [62.5, 30169.0], [62.6, 30173.0], [62.7, 30173.0], [62.8, 30173.0], [62.9, 30176.0], [63.0, 30181.0], [63.1, 30181.0], [63.2, 30184.0], [63.3, 30189.0], [63.4, 30189.0], [63.5, 30197.0], [63.6, 30203.0], [63.7, 30205.0], [63.8, 30205.0], [63.9, 30210.0], [64.0, 30210.0], [64.1, 30211.0], [64.2, 30211.0], [64.3, 30215.0], [64.4, 30221.0], [64.5, 30222.0], [64.6, 30222.0], [64.7, 30222.0], [64.8, 30223.0], [64.9, 30224.0], [65.0, 30224.0], [65.1, 30245.0], [65.2, 30250.0], [65.3, 30250.0], [65.4, 30260.0], [65.5, 30267.0], [65.6, 30269.0], [65.7, 30269.0], [65.8, 30272.0], [65.9, 30272.0], [66.0, 30278.0], [66.1, 30278.0], [66.2, 30279.0], [66.3, 30282.0], [66.4, 30291.0], [66.5, 30291.0], [66.6, 30292.0], [66.7, 30309.0], [66.8, 30309.0], [66.9, 30312.0], [67.0, 30314.0], [67.1, 30316.0], [67.2, 30316.0], [67.3, 30329.0], [67.4, 30344.0], [67.5, 30347.0], [67.6, 30347.0], [67.7, 30349.0], [67.8, 30351.0], [67.9, 30351.0], [68.0, 30351.0], [68.1, 30352.0], [68.2, 30352.0], [68.3, 30354.0], [68.4, 30354.0], [68.5, 30362.0], [68.6, 30363.0], [68.7, 30363.0], [68.8, 30371.0], [68.9, 30375.0], [69.0, 30386.0], [69.1, 30386.0], [69.2, 30388.0], [69.3, 30390.0], [69.4, 30393.0], [69.5, 30393.0], [69.6, 30405.0], [69.7, 30406.0], [69.8, 30415.0], [69.9, 30415.0], [70.0, 30416.0], [70.1, 30416.0], [70.2, 30416.0], [70.3, 30416.0], [70.4, 30419.0], [70.5, 30423.0], [70.6, 30423.0], [70.7, 30428.0], [70.8, 30430.0], [70.9, 30433.0], [71.0, 30433.0], [71.1, 30433.0], [71.2, 30434.0], [71.3, 30437.0], [71.4, 30437.0], [71.5, 30441.0], [71.6, 30444.0], [71.7, 30444.0], [71.8, 30445.0], [71.9, 30446.0], [72.0, 30446.0], [72.1, 30446.0], [72.2, 30448.0], [72.3, 30449.0], [72.4, 30458.0], [72.5, 30458.0], [72.6, 30460.0], [72.7, 30461.0], [72.8, 30462.0], [72.9, 30462.0], [73.0, 30462.0], [73.1, 30464.0], [73.2, 30466.0], [73.3, 30466.0], [73.4, 30468.0], [73.5, 30474.0], [73.6, 30474.0], [73.7, 30479.0], [73.8, 30479.0], [73.9, 30484.0], [74.0, 30484.0], [74.1, 30488.0], [74.2, 30490.0], [74.3, 30499.0], [74.4, 30499.0], [74.5, 30503.0], [74.6, 30504.0], [74.7, 30514.0], [74.8, 30514.0], [74.9, 30525.0], [75.0, 30526.0], [75.1, 30526.0], [75.2, 30532.0], [75.3, 30539.0], [75.4, 30539.0], [75.5, 30539.0], [75.6, 30540.0], [75.7, 30541.0], [75.8, 30541.0], [75.9, 30541.0], [76.0, 30543.0], [76.1, 30552.0], [76.2, 30554.0], [76.3, 30554.0], [76.4, 30559.0], [76.5, 30559.0], [76.6, 30560.0], [76.7, 30560.0], [76.8, 30570.0], [76.9, 30575.0], [77.0, 30575.0], [77.1, 30576.0], [77.2, 30577.0], [77.3, 30577.0], [77.4, 30577.0], [77.5, 30580.0], [77.6, 30584.0], [77.7, 30589.0], [77.8, 30589.0], [77.9, 30590.0], [78.0, 30593.0], [78.1, 30594.0], [78.2, 30594.0], [78.3, 30599.0], [78.4, 30603.0], [78.5, 30603.0], [78.6, 30610.0], [78.7, 30615.0], [78.8, 30616.0], [78.9, 30616.0], [79.0, 30616.0], [79.1, 30617.0], [79.2, 30625.0], [79.3, 30625.0], [79.4, 30634.0], [79.5, 30640.0], [79.6, 30647.0], [79.7, 30647.0], [79.8, 30650.0], [79.9, 30653.0], [80.0, 30667.0], [80.1, 30667.0], [80.2, 30668.0], [80.3, 30671.0], [80.4, 30671.0], [80.5, 30674.0], [80.6, 30675.0], [80.7, 30678.0], [80.8, 30678.0], [80.9, 30679.0], [81.0, 30681.0], [81.1, 30690.0], [81.2, 30690.0], [81.3, 30692.0], [81.4, 30699.0], [81.5, 30700.0], [81.6, 30700.0], [81.7, 30702.0], [81.8, 30706.0], [81.9, 30706.0], [82.0, 30709.0], [82.1, 30711.0], [82.2, 30720.0], [82.3, 30720.0], [82.4, 30721.0], [82.5, 30731.0], [82.6, 30731.0], [82.7, 30731.0], [82.8, 30734.0], [82.9, 30738.0], [83.0, 30740.0], [83.1, 30740.0], [83.2, 30743.0], [83.3, 30749.0], [83.4, 30749.0], [83.5, 30751.0], [83.6, 30753.0], [83.7, 30754.0], [83.8, 30754.0], [83.9, 30766.0], [84.0, 30769.0], [84.1, 30776.0], [84.2, 30776.0], [84.3, 30780.0], [84.4, 30791.0], [84.5, 30792.0], [84.6, 30792.0], [84.7, 30792.0], [84.8, 30794.0], [84.9, 30794.0], [85.0, 30794.0], [85.1, 30804.0], [85.2, 30807.0], [85.3, 30807.0], [85.4, 30807.0], [85.5, 30819.0], [85.6, 30828.0], [85.7, 30828.0], [85.8, 30833.0], [85.9, 30837.0], [86.0, 30840.0], [86.1, 30840.0], [86.2, 30847.0], [86.3, 30853.0], [86.4, 30854.0], [86.5, 30854.0], [86.6, 30854.0], [86.7, 30861.0], [86.8, 30861.0], [86.9, 30872.0], [87.0, 30872.0], [87.1, 30896.0], [87.2, 30896.0], [87.3, 30918.0], [87.4, 30920.0], [87.5, 30927.0], [87.6, 30927.0], [87.7, 30928.0], [87.8, 30934.0], [87.9, 30936.0], [88.0, 30936.0], [88.1, 30937.0], [88.2, 30944.0], [88.3, 30946.0], [88.4, 30946.0], [88.5, 30973.0], [88.6, 30977.0], [88.7, 30977.0], [88.8, 31007.0], [88.9, 31017.0], [89.0, 31021.0], [89.1, 31021.0], [89.2, 31041.0], [89.3, 31043.0], [89.4, 31050.0], [89.5, 31050.0], [89.6, 31054.0], [89.7, 31063.0], [89.8, 31071.0], [89.9, 31071.0], [90.0, 31148.0], [90.1, 31154.0], [90.2, 31154.0], [90.3, 31162.0], [90.4, 31202.0], [90.5, 31207.0], [90.6, 31207.0], [90.7, 31220.0], [90.8, 31238.0], [90.9, 31244.0], [91.0, 31244.0], [91.1, 31249.0], [91.2, 31249.0], [91.3, 31272.0], [91.4, 31272.0], [91.5, 31275.0], [91.6, 31276.0], [91.7, 31276.0], [91.8, 31292.0], [91.9, 31351.0], [92.0, 31357.0], [92.1, 31357.0], [92.2, 31423.0], [92.3, 31427.0], [92.4, 31448.0], [92.5, 31448.0], [92.6, 31482.0], [92.7, 31486.0], [92.8, 31513.0], [92.9, 31513.0], [93.0, 31575.0], [93.1, 31592.0], [93.2, 31684.0], [93.3, 31684.0], [93.4, 31739.0], [93.5, 31740.0], [93.6, 31740.0], [93.7, 32067.0], [93.8, 32239.0], [93.9, 32455.0], [94.0, 32455.0], [94.1, 32633.0], [94.2, 32777.0], [94.3, 32793.0], [94.4, 32793.0], [94.5, 32883.0], [94.6, 32986.0], [94.7, 32988.0], [94.8, 32988.0], [94.9, 33014.0], [95.0, 33150.0], [95.1, 33150.0], [95.2, 33299.0], [95.3, 33371.0], [95.4, 33426.0], [95.5, 33426.0], [95.6, 33670.0], [95.7, 34096.0], [95.8, 34425.0], [95.9, 34425.0], [96.0, 34436.0], [96.1, 35172.0], [96.2, 35240.0], [96.3, 35240.0], [96.4, 35368.0], [96.5, 35806.0], [96.6, 36091.0], [96.7, 36091.0], [96.8, 36132.0], [96.9, 36512.0], [97.0, 36512.0], [97.1, 37022.0], [97.2, 37804.0], [97.3, 37895.0], [97.4, 37895.0], [97.5, 38308.0], [97.6, 38849.0], [97.7, 39230.0], [97.8, 39230.0], [97.9, 39549.0], [98.0, 40122.0], [98.1, 41199.0], [98.2, 41199.0], [98.3, 41513.0], [98.4, 42466.0], [98.5, 42466.0], [98.6, 42697.0], [98.7, 43212.0], [98.8, 43943.0], [98.9, 43943.0], [99.0, 44134.0], [99.1, 44685.0], [99.2, 44911.0], [99.3, 44911.0], [99.4, 45357.0], [99.5, 45453.0], [99.6, 46103.0], [99.7, 46103.0], [99.8, 46252.0], [99.9, 46676.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3300.0, "maxY": 36.0, "series": [{"data": [[33300.0, 1.0], [32900.0, 2.0], [36100.0, 1.0], [36500.0, 1.0], [35300.0, 1.0], [40100.0, 1.0], [44100.0, 1.0], [44900.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [3300.0, 1.0], [5600.0, 1.0], [8700.0, 1.0], [11500.0, 1.0], [14200.0, 1.0], [17400.0, 1.0], [18200.0, 2.0], [18000.0, 3.0], [18400.0, 5.0], [17800.0, 4.0], [17600.0, 1.0], [18600.0, 3.0], [19400.0, 4.0], [18800.0, 6.0], [19000.0, 3.0], [19200.0, 2.0], [20000.0, 1.0], [20200.0, 3.0], [19800.0, 2.0], [19600.0, 1.0], [20400.0, 4.0], [21400.0, 2.0], [21200.0, 2.0], [20600.0, 8.0], [21000.0, 1.0], [20800.0, 2.0], [22000.0, 3.0], [21800.0, 2.0], [22200.0, 4.0], [21600.0, 1.0], [22400.0, 1.0], [22600.0, 5.0], [23000.0, 3.0], [22800.0, 3.0], [23200.0, 6.0], [23400.0, 1.0], [23800.0, 3.0], [24000.0, 5.0], [24400.0, 2.0], [24200.0, 1.0], [23600.0, 1.0], [24800.0, 5.0], [25000.0, 6.0], [25200.0, 5.0], [25400.0, 3.0], [24600.0, 7.0], [25800.0, 5.0], [26200.0, 4.0], [26000.0, 4.0], [26400.0, 7.0], [26600.0, 3.0], [25600.0, 3.0], [27000.0, 7.0], [27600.0, 4.0], [27400.0, 6.0], [26800.0, 3.0], [27200.0, 2.0], [28600.0, 5.0], [28400.0, 3.0], [27800.0, 4.0], [28200.0, 2.0], [28000.0, 3.0], [29600.0, 6.0], [29400.0, 5.0], [29200.0, 3.0], [29000.0, 6.0], [28800.0, 4.0], [29800.0, 3.0], [30600.0, 23.0], [30200.0, 23.0], [30400.0, 36.0], [30000.0, 9.0], [31600.0, 1.0], [31200.0, 11.0], [31400.0, 5.0], [30800.0, 16.0], [31000.0, 9.0], [32200.0, 1.0], [32400.0, 1.0], [32000.0, 1.0], [32600.0, 1.0], [34400.0, 2.0], [34000.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [36000.0, 1.0], [35200.0, 1.0], [38800.0, 1.0], [39200.0, 1.0], [42400.0, 1.0], [43200.0, 1.0], [33100.0, 1.0], [35100.0, 1.0], [38300.0, 1.0], [39500.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [43900.0, 1.0], [16900.0, 1.0], [17300.0, 1.0], [18300.0, 8.0], [18100.0, 2.0], [17900.0, 7.0], [17700.0, 3.0], [17500.0, 2.0], [19300.0, 1.0], [18500.0, 4.0], [18900.0, 3.0], [18700.0, 2.0], [19100.0, 2.0], [20300.0, 3.0], [19500.0, 5.0], [20100.0, 1.0], [19700.0, 1.0], [19900.0, 2.0], [20700.0, 4.0], [21500.0, 1.0], [21300.0, 4.0], [21100.0, 2.0], [20500.0, 1.0], [20900.0, 1.0], [21700.0, 1.0], [22500.0, 2.0], [22100.0, 3.0], [22300.0, 3.0], [21900.0, 1.0], [22700.0, 1.0], [22900.0, 4.0], [23100.0, 3.0], [23300.0, 3.0], [23500.0, 1.0], [24500.0, 8.0], [23700.0, 3.0], [24300.0, 4.0], [24100.0, 1.0], [23900.0, 4.0], [25300.0, 4.0], [24700.0, 6.0], [24900.0, 3.0], [25500.0, 7.0], [25100.0, 3.0], [26500.0, 5.0], [26300.0, 8.0], [26100.0, 10.0], [25900.0, 2.0], [25700.0, 5.0], [27500.0, 6.0], [27300.0, 5.0], [26900.0, 9.0], [27100.0, 1.0], [27700.0, 2.0], [28500.0, 2.0], [28300.0, 2.0], [27900.0, 1.0], [28100.0, 6.0], [29300.0, 6.0], [28700.0, 5.0], [29100.0, 4.0], [29500.0, 4.0], [28900.0, 2.0], [30500.0, 29.0], [29700.0, 5.0], [29900.0, 2.0], [30700.0, 26.0], [30100.0, 16.0], [30300.0, 21.0], [31500.0, 3.0], [31700.0, 2.0], [31300.0, 2.0], [30900.0, 11.0], [31100.0, 3.0], [32700.0, 2.0], [33000.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [37800.0, 2.0], [37000.0, 1.0], [42600.0, 1.0], [44600.0, 1.0], [45400.0, 1.0], [46600.0, 1.0], [46200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.1875, "minX": 1.60240662E12, "maxY": 10.0, "series": [{"data": [[1.60240728E12, 10.0], [1.60240698E12, 10.0], [1.6024086E12, 7.1875], [1.60240668E12, 10.0], [1.6024083E12, 10.0], [1.60240848E12, 10.0], [1.60240818E12, 10.0], [1.60240788E12, 10.0], [1.60240758E12, 10.0], [1.60240776E12, 10.0], [1.60240746E12, 10.0], [1.60240716E12, 10.0], [1.60240686E12, 10.0], [1.60240704E12, 10.0], [1.60240674E12, 10.0], [1.60240836E12, 10.0], [1.60240806E12, 10.0], [1.60240824E12, 10.0], [1.60240794E12, 10.0], [1.60240764E12, 10.0], [1.60240734E12, 10.0], [1.60240752E12, 10.0], [1.60240722E12, 10.0], [1.60240692E12, 10.0], [1.60240854E12, 10.0], [1.60240662E12, 10.0], [1.6024068E12, 10.0], [1.60240842E12, 10.0], [1.60240812E12, 10.0], [1.60240782E12, 10.0], [1.602408E12, 10.0], [1.6024077E12, 10.0], [1.6024074E12, 10.0], [1.6024071E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18276.0, "minX": 1.0, "maxY": 27239.858126721778, "series": [{"data": [[8.0, 18482.0], [4.0, 18811.0], [2.0, 18808.0], [1.0, 18985.0], [9.0, 18276.0], [10.0, 27239.858126721778], [5.0, 18630.0], [6.0, 18420.0], [3.0, 18841.0], [7.0, 18388.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 27134.391836734707]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 106.96666666666667, "minX": 1.60240662E12, "maxY": 226040.83333333334, "series": [{"data": [[1.60240728E12, 42621.28333333333], [1.60240698E12, 43706.933333333334], [1.6024086E12, 12635.766666666666], [1.60240668E12, 64965.65], [1.6024083E12, 39435.816666666666], [1.60240848E12, 145943.08333333334], [1.60240818E12, 43465.95], [1.60240788E12, 34898.15], [1.60240758E12, 226040.83333333334], [1.60240776E12, 65005.46666666667], [1.60240746E12, 149057.1], [1.60240716E12, 54014.28333333333], [1.60240686E12, 74062.78333333334], [1.60240704E12, 47825.63333333333], [1.60240674E12, 144121.93333333332], [1.60240836E12, 24916.616666666665], [1.60240806E12, 53468.73333333333], [1.60240824E12, 46467.78333333333], [1.60240794E12, 45739.433333333334], [1.60240764E12, 59568.416666666664], [1.60240734E12, 28468.916666666668], [1.60240752E12, 70482.56666666667], [1.60240722E12, 43928.96666666667], [1.60240692E12, 46239.46666666667], [1.60240854E12, 75051.68333333333], [1.60240662E12, 213425.9], [1.6024068E12, 52840.666666666664], [1.60240842E12, 36831.6], [1.60240812E12, 44483.433333333334], [1.60240782E12, 47206.583333333336], [1.602408E12, 49255.48333333333], [1.6024077E12, 85972.96666666666], [1.6024074E12, 70108.76666666666], [1.6024071E12, 41189.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60240728E12, 138.73333333333332], [1.60240698E12, 138.81666666666666], [1.6024086E12, 106.96666666666667], [1.60240668E12, 213.61666666666667], [1.6024083E12, 160.5], [1.60240848E12, 184.88333333333333], [1.60240818E12, 146.08333333333334], [1.60240788E12, 131.46666666666667], [1.60240758E12, 167.86666666666667], [1.60240776E12, 160.73333333333332], [1.60240746E12, 164.86666666666667], [1.60240716E12, 146.36666666666667], [1.60240686E12, 168.96666666666667], [1.60240704E12, 146.11666666666667], [1.60240674E12, 128.61666666666667], [1.60240836E12, 167.8], [1.60240806E12, 146.45], [1.60240824E12, 138.78333333333333], [1.60240794E12, 138.83333333333334], [1.60240764E12, 218.06666666666666], [1.60240734E12, 167.9], [1.60240752E12, 188.68333333333334], [1.60240722E12, 146.08333333333334], [1.60240692E12, 153.73333333333332], [1.60240854E12, 145.8], [1.60240662E12, 140.01666666666668], [1.6024068E12, 139.81666666666666], [1.60240842E12, 183.66666666666666], [1.60240812E12, 146.76666666666668], [1.60240782E12, 147.35], [1.602408E12, 146.15], [1.6024077E12, 169.96666666666667], [1.6024074E12, 210.01666666666668], [1.6024071E12, 138.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18253.375000000004, "minX": 1.60240662E12, "maxY": 38896.10526315789, "series": [{"data": [[1.60240728E12, 30602.736842105267], [1.60240698E12, 30595.631578947367], [1.6024086E12, 18253.375000000004], [1.60240668E12, 21550.300000000007], [1.6024083E12, 28945.63636363636], [1.60240848E12, 23665.38461538462], [1.60240818E12, 30365.250000000004], [1.60240788E12, 36220.44444444445], [1.60240758E12, 24043.565217391308], [1.60240776E12, 26735.318181818184], [1.60240746E12, 22100.30434782609], [1.60240716E12, 30332.65], [1.60240686E12, 25624.086956521744], [1.60240704E12, 30400.2], [1.60240674E12, 25308.058823529416], [1.60240836E12, 26060.17391304348], [1.60240806E12, 30343.95], [1.60240824E12, 30710.52631578947], [1.60240794E12, 30456.47368421053], [1.60240764E12, 20841.09677419355], [1.60240734E12, 27199.08695652173], [1.60240752E12, 25825.88888888889], [1.60240722E12, 30629.9], [1.60240692E12, 28211.714285714286], [1.60240854E12, 30477.55], [1.60240662E12, 21070.473684210527], [1.6024068E12, 38896.10526315789], [1.60240842E12, 24344.879999999997], [1.60240812E12, 29330.800000000003], [1.60240782E12, 26998.249999999996], [1.602408E12, 30778.399999999998], [1.6024077E12, 24791.739130434784], [1.6024074E12, 22089.75862068966], [1.6024071E12, 31284.368421052633]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18251.437499999996, "minX": 1.60240662E12, "maxY": 38894.57894736842, "series": [{"data": [[1.60240728E12, 30601.368421052633], [1.60240698E12, 30594.263157894737], [1.6024086E12, 18251.437499999996], [1.60240668E12, 21548.866666666665], [1.6024083E12, 28944.590909090908], [1.60240848E12, 23661.53846153846], [1.60240818E12, 30364.100000000002], [1.60240788E12, 36219.5], [1.60240758E12, 24038.78260869565], [1.60240776E12, 26733.954545454544], [1.60240746E12, 22096.260869565212], [1.60240716E12, 30331.35], [1.60240686E12, 25622.565217391304], [1.60240704E12, 30398.899999999994], [1.60240674E12, 25303.764705882353], [1.60240836E12, 26058.956521739132], [1.60240806E12, 30342.55], [1.60240824E12, 30709.21052631579], [1.60240794E12, 30455.15789473684], [1.60240764E12, 20839.612903225807], [1.60240734E12, 27197.73913043478], [1.60240752E12, 25823.48148148148], [1.60240722E12, 30628.800000000003], [1.60240692E12, 28210.61904761905], [1.60240854E12, 30475.249999999996], [1.60240662E12, 21066.210526315797], [1.6024068E12, 38894.57894736842], [1.60240842E12, 24343.360000000004], [1.60240812E12, 29329.649999999998], [1.60240782E12, 26997.300000000003], [1.602408E12, 30777.15], [1.6024077E12, 24789.91304347826], [1.6024074E12, 22087.86206896551], [1.6024071E12, 31283.210526315786]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60240662E12, "maxY": 5.736842105263159, "series": [{"data": [[1.60240728E12, 0.8421052631578948], [1.60240698E12, 0.4210526315789474], [1.6024086E12, 0.25], [1.60240668E12, 0.4666666666666668], [1.6024083E12, 0.5909090909090909], [1.60240848E12, 0.3846153846153846], [1.60240818E12, 0.7999999999999999], [1.60240788E12, 0.5555555555555556], [1.60240758E12, 0.5217391304347826], [1.60240776E12, 0.2727272727272727], [1.60240746E12, 0.6086956521739132], [1.60240716E12, 0.5499999999999999], [1.60240686E12, 0.391304347826087], [1.60240704E12, 0.7000000000000001], [1.60240674E12, 0.4117647058823529], [1.60240836E12, 0.4782608695652174], [1.60240806E12, 0.6], [1.60240824E12, 0.736842105263158], [1.60240794E12, 0.47368421052631576], [1.60240764E12, 0.3548387096774193], [1.60240734E12, 0.2608695652173913], [1.60240752E12, 0.4444444444444444], [1.60240722E12, 0.6], [1.60240692E12, 0.8095238095238098], [1.60240854E12, 0.65], [1.60240662E12, 5.736842105263159], [1.6024068E12, 0.6842105263157896], [1.60240842E12, 0.4], [1.60240812E12, 0.39999999999999997], [1.60240782E12, 0.7000000000000001], [1.602408E12, 0.75], [1.6024077E12, 0.2608695652173913], [1.6024074E12, 0.4482758620689657], [1.6024071E12, 0.631578947368421]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3378.0, "minX": 1.60240662E12, "maxY": 46676.0, "series": [{"data": [[1.60240728E12, 30936.0], [1.60240698E12, 30861.0], [1.6024086E12, 18985.0], [1.60240668E12, 28481.0], [1.6024083E12, 31017.0], [1.60240848E12, 29670.0], [1.60240818E12, 30828.0], [1.60240788E12, 44911.0], [1.60240758E12, 29478.0], [1.60240776E12, 30354.0], [1.60240746E12, 28897.0], [1.60240716E12, 31249.0], [1.60240686E12, 28705.0], [1.60240704E12, 31021.0], [1.60240674E12, 38308.0], [1.60240836E12, 29420.0], [1.60240806E12, 30681.0], [1.60240824E12, 31276.0], [1.60240794E12, 31071.0], [1.60240764E12, 28588.0], [1.60240734E12, 30386.0], [1.60240752E12, 33299.0], [1.60240722E12, 30946.0], [1.60240692E12, 31427.0], [1.60240854E12, 39549.0], [1.60240662E12, 28620.0], [1.6024068E12, 46676.0], [1.60240842E12, 28265.0], [1.60240812E12, 29865.0], [1.60240782E12, 36132.0], [1.602408E12, 31063.0], [1.6024077E12, 33014.0], [1.6024074E12, 27335.0], [1.6024071E12, 31740.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60240728E12, 30210.0], [1.60240698E12, 30197.0], [1.6024086E12, 17335.0], [1.60240668E12, 18052.0], [1.6024083E12, 25249.0], [1.60240848E12, 18818.0], [1.60240818E12, 29179.0], [1.60240788E12, 27834.0], [1.60240758E12, 19518.0], [1.60240776E12, 23601.0], [1.60240746E12, 19259.0], [1.60240716E12, 29490.0], [1.60240686E12, 23207.0], [1.60240704E12, 30095.0], [1.60240674E12, 20743.0], [1.60240836E12, 22260.0], [1.60240806E12, 30047.0], [1.60240824E12, 30210.0], [1.60240794E12, 30134.0], [1.60240764E12, 17721.0], [1.60240734E12, 24906.0], [1.60240752E12, 18333.0], [1.60240722E12, 30173.0], [1.60240692E12, 24583.0], [1.60240854E12, 19615.0], [1.60240662E12, 3378.0], [1.6024068E12, 29393.0], [1.60240842E12, 21359.0], [1.60240812E12, 28607.0], [1.60240782E12, 22900.0], [1.602408E12, 30344.0], [1.6024077E12, 17553.0], [1.6024074E12, 17818.0], [1.6024071E12, 30847.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60240728E12, 30210.0], [1.60240698E12, 30197.0], [1.6024086E12, 17335.0], [1.60240668E12, 18052.0], [1.6024083E12, 25249.0], [1.60240848E12, 18818.0], [1.60240818E12, 29179.0], [1.60240788E12, 27834.0], [1.60240758E12, 19518.0], [1.60240776E12, 23601.0], [1.60240746E12, 19259.0], [1.60240716E12, 29490.0], [1.60240686E12, 23207.0], [1.60240704E12, 30095.0], [1.60240674E12, 20743.0], [1.60240836E12, 22260.0], [1.60240806E12, 30047.0], [1.60240824E12, 30210.0], [1.60240794E12, 30134.0], [1.60240764E12, 17721.0], [1.60240734E12, 24906.0], [1.60240752E12, 18333.0], [1.60240722E12, 30173.0], [1.60240692E12, 24583.0], [1.60240854E12, 19615.0], [1.60240662E12, 3378.0], [1.6024068E12, 29393.0], [1.60240842E12, 21359.0], [1.60240812E12, 28607.0], [1.60240782E12, 22900.0], [1.602408E12, 30344.0], [1.6024077E12, 17553.0], [1.6024074E12, 17818.0], [1.6024071E12, 30847.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60240728E12, 30210.0], [1.60240698E12, 30197.0], [1.6024086E12, 17335.0], [1.60240668E12, 18052.0], [1.6024083E12, 25249.0], [1.60240848E12, 18818.0], [1.60240818E12, 29179.0], [1.60240788E12, 27834.0], [1.60240758E12, 19518.0], [1.60240776E12, 23601.0], [1.60240746E12, 19259.0], [1.60240716E12, 29490.0], [1.60240686E12, 23207.0], [1.60240704E12, 30095.0], [1.60240674E12, 20743.0], [1.60240836E12, 22260.0], [1.60240806E12, 30047.0], [1.60240824E12, 30210.0], [1.60240794E12, 30134.0], [1.60240764E12, 17721.0], [1.60240734E12, 24906.0], [1.60240752E12, 18333.0], [1.60240722E12, 30173.0], [1.60240692E12, 24583.0], [1.60240854E12, 19615.0], [1.60240662E12, 3378.0], [1.6024068E12, 29393.0], [1.60240842E12, 21359.0], [1.60240812E12, 28607.0], [1.60240782E12, 22900.0], [1.602408E12, 30344.0], [1.6024077E12, 17553.0], [1.6024074E12, 17818.0], [1.6024071E12, 30847.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60240728E12, 30210.0], [1.60240698E12, 30197.0], [1.6024086E12, 17335.0], [1.60240668E12, 18052.0], [1.6024083E12, 25249.0], [1.60240848E12, 18818.0], [1.60240818E12, 29179.0], [1.60240788E12, 27834.0], [1.60240758E12, 19518.0], [1.60240776E12, 23601.0], [1.60240746E12, 19259.0], [1.60240716E12, 29490.0], [1.60240686E12, 23207.0], [1.60240704E12, 30095.0], [1.60240674E12, 20743.0], [1.60240836E12, 22260.0], [1.60240806E12, 30047.0], [1.60240824E12, 30210.0], [1.60240794E12, 30134.0], [1.60240764E12, 17721.0], [1.60240734E12, 24906.0], [1.60240752E12, 18333.0], [1.60240722E12, 30173.0], [1.60240692E12, 24583.0], [1.60240854E12, 19615.0], [1.60240662E12, 3378.0], [1.6024068E12, 29393.0], [1.60240842E12, 21359.0], [1.60240812E12, 28607.0], [1.60240782E12, 22900.0], [1.602408E12, 30344.0], [1.6024077E12, 17553.0], [1.6024074E12, 17818.0], [1.6024071E12, 30847.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60240728E12, 30616.0], [1.60240698E12, 30625.0], [1.6024086E12, 18404.0], [1.60240668E12, 20967.0], [1.6024083E12, 30260.5], [1.60240848E12, 22216.5], [1.60240818E12, 30463.0], [1.60240788E12, 36414.0], [1.60240758E12, 24502.0], [1.60240776E12, 25952.0], [1.60240746E12, 22226.0], [1.60240716E12, 30263.5], [1.60240686E12, 26059.0], [1.60240704E12, 30379.0], [1.60240674E12, 24537.0], [1.60240836E12, 26538.0], [1.60240806E12, 30319.0], [1.60240824E12, 30738.0], [1.60240794E12, 30441.0], [1.60240764E12, 20417.0], [1.60240734E12, 26829.0], [1.60240752E12, 26342.0], [1.60240722E12, 30665.5], [1.60240692E12, 27955.0], [1.60240854E12, 30108.0], [1.60240662E12, 25849.0], [1.6024068E12, 39230.0], [1.60240842E12, 24329.0], [1.60240812E12, 29460.0], [1.60240782E12, 26117.0], [1.602408E12, 30824.0], [1.6024077E12, 24538.0], [1.6024074E12, 21883.0], [1.6024071E12, 31272.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28116.0, "minX": 1.0, "maxY": 28116.0, "series": [{"data": [[1.0, 28116.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28116.0, "minX": 1.0, "maxY": 28116.0, "series": [{"data": [[1.0, 28116.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60240662E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60240728E12, 0.31666666666666665], [1.60240698E12, 0.31666666666666665], [1.6024086E12, 0.1], [1.60240668E12, 0.5], [1.6024083E12, 0.36666666666666664], [1.60240848E12, 0.43333333333333335], [1.60240818E12, 0.3333333333333333], [1.60240788E12, 0.3], [1.60240758E12, 0.38333333333333336], [1.60240776E12, 0.36666666666666664], [1.60240746E12, 0.38333333333333336], [1.60240716E12, 0.3333333333333333], [1.60240686E12, 0.38333333333333336], [1.60240704E12, 0.3333333333333333], [1.60240674E12, 0.2833333333333333], [1.60240836E12, 0.38333333333333336], [1.60240806E12, 0.3333333333333333], [1.60240824E12, 0.31666666666666665], [1.60240794E12, 0.31666666666666665], [1.60240764E12, 0.5166666666666667], [1.60240734E12, 0.38333333333333336], [1.60240752E12, 0.45], [1.60240722E12, 0.3333333333333333], [1.60240692E12, 0.35], [1.60240854E12, 0.3333333333333333], [1.60240662E12, 0.48333333333333334], [1.6024068E12, 0.31666666666666665], [1.60240842E12, 0.4166666666666667], [1.60240812E12, 0.3333333333333333], [1.60240782E12, 0.3333333333333333], [1.602408E12, 0.3333333333333333], [1.6024077E12, 0.38333333333333336], [1.6024074E12, 0.48333333333333334], [1.6024071E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60240662E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60240728E12, 0.31666666666666665], [1.60240698E12, 0.31666666666666665], [1.6024086E12, 0.26666666666666666], [1.60240668E12, 0.5], [1.6024083E12, 0.36666666666666664], [1.60240848E12, 0.43333333333333335], [1.60240818E12, 0.3333333333333333], [1.60240788E12, 0.3], [1.60240758E12, 0.38333333333333336], [1.60240776E12, 0.36666666666666664], [1.60240746E12, 0.38333333333333336], [1.60240716E12, 0.3333333333333333], [1.60240686E12, 0.38333333333333336], [1.60240704E12, 0.3333333333333333], [1.60240674E12, 0.2833333333333333], [1.60240836E12, 0.38333333333333336], [1.60240806E12, 0.3333333333333333], [1.60240824E12, 0.31666666666666665], [1.60240794E12, 0.31666666666666665], [1.60240764E12, 0.5166666666666667], [1.60240734E12, 0.38333333333333336], [1.60240752E12, 0.45], [1.60240722E12, 0.3333333333333333], [1.60240692E12, 0.35], [1.60240854E12, 0.3333333333333333], [1.60240662E12, 0.31666666666666665], [1.6024068E12, 0.31666666666666665], [1.60240842E12, 0.4166666666666667], [1.60240812E12, 0.3333333333333333], [1.60240782E12, 0.3333333333333333], [1.602408E12, 0.3333333333333333], [1.6024077E12, 0.38333333333333336], [1.6024074E12, 0.48333333333333334], [1.6024071E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6024086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60240662E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60240728E12, 0.31666666666666665], [1.60240698E12, 0.31666666666666665], [1.6024086E12, 0.26666666666666666], [1.60240668E12, 0.5], [1.6024083E12, 0.36666666666666664], [1.60240848E12, 0.43333333333333335], [1.60240818E12, 0.3333333333333333], [1.60240788E12, 0.3], [1.60240758E12, 0.38333333333333336], [1.60240776E12, 0.36666666666666664], [1.60240746E12, 0.38333333333333336], [1.60240716E12, 0.3333333333333333], [1.60240686E12, 0.38333333333333336], [1.60240704E12, 0.3333333333333333], [1.60240674E12, 0.2833333333333333], [1.60240836E12, 0.38333333333333336], [1.60240806E12, 0.3333333333333333], [1.60240824E12, 0.31666666666666665], [1.60240794E12, 0.31666666666666665], [1.60240764E12, 0.5166666666666667], [1.60240734E12, 0.38333333333333336], [1.60240752E12, 0.45], [1.60240722E12, 0.3333333333333333], [1.60240692E12, 0.35], [1.60240854E12, 0.3333333333333333], [1.60240662E12, 0.31666666666666665], [1.6024068E12, 0.31666666666666665], [1.60240842E12, 0.4166666666666667], [1.60240812E12, 0.3333333333333333], [1.60240782E12, 0.3333333333333333], [1.602408E12, 0.3333333333333333], [1.6024077E12, 0.38333333333333336], [1.6024074E12, 0.48333333333333334], [1.6024071E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.60240662E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60240728E12, 0.31666666666666665], [1.60240698E12, 0.31666666666666665], [1.6024086E12, 0.26666666666666666], [1.60240668E12, 0.5], [1.6024083E12, 0.36666666666666664], [1.60240848E12, 0.43333333333333335], [1.60240818E12, 0.3333333333333333], [1.60240788E12, 0.3], [1.60240758E12, 0.38333333333333336], [1.60240776E12, 0.36666666666666664], [1.60240746E12, 0.38333333333333336], [1.60240716E12, 0.3333333333333333], [1.60240686E12, 0.38333333333333336], [1.60240704E12, 0.3333333333333333], [1.60240674E12, 0.2833333333333333], [1.60240836E12, 0.38333333333333336], [1.60240806E12, 0.3333333333333333], [1.60240824E12, 0.31666666666666665], [1.60240794E12, 0.31666666666666665], [1.60240764E12, 0.5166666666666667], [1.60240734E12, 0.38333333333333336], [1.60240752E12, 0.45], [1.60240722E12, 0.3333333333333333], [1.60240692E12, 0.35], [1.60240854E12, 0.3333333333333333], [1.60240662E12, 0.31666666666666665], [1.6024068E12, 0.31666666666666665], [1.60240842E12, 0.4166666666666667], [1.60240812E12, 0.3333333333333333], [1.60240782E12, 0.3333333333333333], [1.602408E12, 0.3333333333333333], [1.6024077E12, 0.38333333333333336], [1.6024074E12, 0.48333333333333334], [1.6024071E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6024086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

