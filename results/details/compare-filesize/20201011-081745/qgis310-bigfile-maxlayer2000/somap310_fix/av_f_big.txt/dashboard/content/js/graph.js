/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3173.0, "minX": 0.0, "maxY": 45809.0, "series": [{"data": [[0.0, 3173.0], [0.1, 3173.0], [0.2, 6224.0], [0.3, 8603.0], [0.4, 8603.0], [0.5, 11471.0], [0.6, 14198.0], [0.7, 16771.0], [0.8, 16771.0], [0.9, 17196.0], [1.0, 17302.0], [1.1, 17448.0], [1.2, 17448.0], [1.3, 17457.0], [1.4, 17467.0], [1.5, 17471.0], [1.6, 17471.0], [1.7, 17505.0], [1.8, 17511.0], [1.9, 17511.0], [2.0, 17525.0], [2.1, 17547.0], [2.2, 17554.0], [2.3, 17554.0], [2.4, 17579.0], [2.5, 17580.0], [2.6, 17598.0], [2.7, 17598.0], [2.8, 17606.0], [2.9, 17656.0], [3.0, 17687.0], [3.1, 17687.0], [3.2, 17727.0], [3.3, 17751.0], [3.4, 17751.0], [3.5, 17767.0], [3.6, 17772.0], [3.7, 17802.0], [3.8, 17802.0], [3.9, 17809.0], [4.0, 17818.0], [4.1, 17821.0], [4.2, 17821.0], [4.3, 17853.0], [4.4, 17869.0], [4.5, 17878.0], [4.6, 17878.0], [4.7, 17962.0], [4.8, 17984.0], [4.9, 18011.0], [5.0, 18011.0], [5.1, 18019.0], [5.2, 18084.0], [5.3, 18084.0], [5.4, 18116.0], [5.5, 18122.0], [5.6, 18167.0], [5.7, 18167.0], [5.8, 18208.0], [5.9, 18218.0], [6.0, 18265.0], [6.1, 18265.0], [6.2, 18323.0], [6.3, 18329.0], [6.4, 18343.0], [6.5, 18343.0], [6.6, 18374.0], [6.7, 18408.0], [6.8, 18408.0], [6.9, 18426.0], [7.0, 18499.0], [7.1, 18518.0], [7.2, 18518.0], [7.3, 18552.0], [7.4, 18605.0], [7.5, 18677.0], [7.6, 18677.0], [7.7, 18732.0], [7.8, 18752.0], [7.9, 18781.0], [8.0, 18781.0], [8.1, 18840.0], [8.2, 18896.0], [8.3, 18905.0], [8.4, 18905.0], [8.5, 18911.0], [8.6, 18929.0], [8.7, 18929.0], [8.8, 18960.0], [8.9, 18978.0], [9.0, 19035.0], [9.1, 19035.0], [9.2, 19067.0], [9.3, 19086.0], [9.4, 19191.0], [9.5, 19191.0], [9.6, 19206.0], [9.7, 19226.0], [9.8, 19238.0], [9.9, 19238.0], [10.0, 19287.0], [10.1, 19313.0], [10.2, 19313.0], [10.3, 19340.0], [10.4, 19349.0], [10.5, 19363.0], [10.6, 19363.0], [10.7, 19370.0], [10.8, 19415.0], [10.9, 19673.0], [11.0, 19673.0], [11.1, 19710.0], [11.2, 19758.0], [11.3, 19827.0], [11.4, 19827.0], [11.5, 19862.0], [11.6, 19882.0], [11.7, 19882.0], [11.8, 19932.0], [11.9, 19960.0], [12.0, 20032.0], [12.1, 20032.0], [12.2, 20064.0], [12.3, 20121.0], [12.4, 20124.0], [12.5, 20124.0], [12.6, 20155.0], [12.7, 20163.0], [12.8, 20202.0], [12.9, 20202.0], [13.0, 20223.0], [13.1, 20225.0], [13.2, 20257.0], [13.3, 20257.0], [13.4, 20277.0], [13.5, 20359.0], [13.6, 20359.0], [13.7, 20362.0], [13.8, 20378.0], [13.9, 20455.0], [14.0, 20455.0], [14.1, 20459.0], [14.2, 20589.0], [14.3, 20673.0], [14.4, 20673.0], [14.5, 20689.0], [14.6, 20690.0], [14.7, 20777.0], [14.8, 20777.0], [14.9, 20781.0], [15.0, 20854.0], [15.1, 20854.0], [15.2, 20856.0], [15.3, 20872.0], [15.4, 20880.0], [15.5, 20880.0], [15.6, 20883.0], [15.7, 20968.0], [15.8, 20972.0], [15.9, 20972.0], [16.0, 20999.0], [16.1, 21007.0], [16.2, 21079.0], [16.3, 21079.0], [16.4, 21144.0], [16.5, 21253.0], [16.6, 21290.0], [16.7, 21290.0], [16.8, 21513.0], [16.9, 21532.0], [17.0, 21532.0], [17.1, 21583.0], [17.2, 21609.0], [17.3, 21843.0], [17.4, 21843.0], [17.5, 21845.0], [17.6, 22060.0], [17.7, 22157.0], [17.8, 22157.0], [17.9, 22177.0], [18.0, 22267.0], [18.1, 22269.0], [18.2, 22269.0], [18.3, 22297.0], [18.4, 22324.0], [18.5, 22324.0], [18.6, 22329.0], [18.7, 22365.0], [18.8, 22401.0], [18.9, 22401.0], [19.0, 22405.0], [19.1, 22405.0], [19.2, 22424.0], [19.3, 22424.0], [19.4, 22429.0], [19.5, 22449.0], [19.6, 22467.0], [19.7, 22467.0], [19.8, 22468.0], [19.9, 22543.0], [20.0, 22681.0], [20.1, 22681.0], [20.2, 22684.0], [20.3, 22781.0], [20.4, 22781.0], [20.5, 22788.0], [20.6, 22797.0], [20.7, 22857.0], [20.8, 22857.0], [20.9, 22917.0], [21.0, 22940.0], [21.1, 22973.0], [21.2, 22973.0], [21.3, 22990.0], [21.4, 23001.0], [21.5, 23003.0], [21.6, 23003.0], [21.7, 23019.0], [21.8, 23066.0], [21.9, 23066.0], [22.0, 23073.0], [22.1, 23105.0], [22.2, 23108.0], [22.3, 23108.0], [22.4, 23110.0], [22.5, 23125.0], [22.6, 23167.0], [22.7, 23167.0], [22.8, 23197.0], [22.9, 23205.0], [23.0, 23223.0], [23.1, 23223.0], [23.2, 23258.0], [23.3, 23332.0], [23.4, 23332.0], [23.5, 23347.0], [23.6, 23432.0], [23.7, 23531.0], [23.8, 23531.0], [23.9, 23537.0], [24.0, 23550.0], [24.1, 23577.0], [24.2, 23577.0], [24.3, 23677.0], [24.4, 23692.0], [24.5, 23723.0], [24.6, 23723.0], [24.7, 23766.0], [24.8, 23779.0], [24.9, 23792.0], [25.0, 23792.0], [25.1, 23906.0], [25.2, 23989.0], [25.3, 23989.0], [25.4, 24003.0], [25.5, 24027.0], [25.6, 24072.0], [25.7, 24072.0], [25.8, 24177.0], [25.9, 24267.0], [26.0, 24275.0], [26.1, 24275.0], [26.2, 24304.0], [26.3, 24310.0], [26.4, 24359.0], [26.5, 24359.0], [26.6, 24365.0], [26.7, 24367.0], [26.8, 24367.0], [26.9, 24382.0], [27.0, 24411.0], [27.1, 24415.0], [27.2, 24415.0], [27.3, 24417.0], [27.4, 24438.0], [27.5, 24467.0], [27.6, 24467.0], [27.7, 24496.0], [27.8, 24505.0], [27.9, 24511.0], [28.0, 24511.0], [28.1, 24528.0], [28.2, 24537.0], [28.3, 24539.0], [28.4, 24539.0], [28.5, 24563.0], [28.6, 24581.0], [28.7, 24581.0], [28.8, 24595.0], [28.9, 24622.0], [29.0, 24649.0], [29.1, 24649.0], [29.2, 24677.0], [29.3, 24695.0], [29.4, 24696.0], [29.5, 24696.0], [29.6, 24704.0], [29.7, 24723.0], [29.8, 24729.0], [29.9, 24729.0], [30.0, 24905.0], [30.1, 24919.0], [30.2, 24919.0], [30.3, 24945.0], [30.4, 24976.0], [30.5, 24993.0], [30.6, 24993.0], [30.7, 25007.0], [30.8, 25015.0], [30.9, 25025.0], [31.0, 25025.0], [31.1, 25032.0], [31.2, 25040.0], [31.3, 25049.0], [31.4, 25049.0], [31.5, 25103.0], [31.6, 25104.0], [31.7, 25104.0], [31.8, 25127.0], [31.9, 25130.0], [32.0, 25139.0], [32.1, 25139.0], [32.2, 25144.0], [32.3, 25167.0], [32.4, 25169.0], [32.5, 25169.0], [32.6, 25185.0], [32.7, 25196.0], [32.8, 25196.0], [32.9, 25196.0], [33.0, 25207.0], [33.1, 25242.0], [33.2, 25271.0], [33.3, 25271.0], [33.4, 25300.0], [33.5, 25316.0], [33.6, 25316.0], [33.7, 25332.0], [33.8, 25346.0], [33.9, 25396.0], [34.0, 25396.0], [34.1, 25416.0], [34.2, 25450.0], [34.3, 25474.0], [34.4, 25474.0], [34.5, 25484.0], [34.6, 25491.0], [34.7, 25499.0], [34.8, 25499.0], [34.9, 25519.0], [35.0, 25530.0], [35.1, 25530.0], [35.2, 25552.0], [35.3, 25552.0], [35.4, 25571.0], [35.5, 25571.0], [35.6, 25580.0], [35.7, 25649.0], [35.8, 25709.0], [35.9, 25709.0], [36.0, 25711.0], [36.1, 25718.0], [36.2, 25721.0], [36.3, 25721.0], [36.4, 25780.0], [36.5, 25795.0], [36.6, 25838.0], [36.7, 25838.0], [36.8, 25849.0], [36.9, 25849.0], [37.0, 25849.0], [37.1, 25874.0], [37.2, 25947.0], [37.3, 25965.0], [37.4, 25965.0], [37.5, 25965.0], [37.6, 25984.0], [37.7, 26019.0], [37.8, 26019.0], [37.9, 26034.0], [38.0, 26051.0], [38.1, 26057.0], [38.2, 26057.0], [38.3, 26075.0], [38.4, 26078.0], [38.5, 26078.0], [38.6, 26122.0], [38.7, 26131.0], [38.8, 26134.0], [38.9, 26134.0], [39.0, 26140.0], [39.1, 26144.0], [39.2, 26150.0], [39.3, 26150.0], [39.4, 26172.0], [39.5, 26196.0], [39.6, 26197.0], [39.7, 26197.0], [39.8, 26205.0], [39.9, 26206.0], [40.0, 26218.0], [40.1, 26218.0], [40.2, 26266.0], [40.3, 26299.0], [40.4, 26299.0], [40.5, 26372.0], [40.6, 26386.0], [40.7, 26430.0], [40.8, 26430.0], [40.9, 26467.0], [41.0, 26556.0], [41.1, 26556.0], [41.2, 26556.0], [41.3, 26584.0], [41.4, 26606.0], [41.5, 26628.0], [41.6, 26628.0], [41.7, 26640.0], [41.8, 26649.0], [41.9, 26649.0], [42.0, 26665.0], [42.1, 26667.0], [42.2, 26710.0], [42.3, 26710.0], [42.4, 26731.0], [42.5, 26733.0], [42.6, 26746.0], [42.7, 26746.0], [42.8, 26781.0], [42.9, 26782.0], [43.0, 26794.0], [43.1, 26794.0], [43.2, 26801.0], [43.3, 26814.0], [43.4, 26814.0], [43.5, 26830.0], [43.6, 26858.0], [43.7, 26897.0], [43.8, 26897.0], [43.9, 26909.0], [44.0, 26919.0], [44.1, 26931.0], [44.2, 26931.0], [44.3, 26984.0], [44.4, 26995.0], [44.5, 27001.0], [44.6, 27001.0], [44.7, 27017.0], [44.8, 27030.0], [44.9, 27035.0], [45.0, 27035.0], [45.1, 27045.0], [45.2, 27052.0], [45.3, 27052.0], [45.4, 27055.0], [45.5, 27120.0], [45.6, 27120.0], [45.7, 27120.0], [45.8, 27121.0], [45.9, 27147.0], [46.0, 27189.0], [46.1, 27189.0], [46.2, 27200.0], [46.3, 27230.0], [46.4, 27241.0], [46.5, 27241.0], [46.6, 27261.0], [46.7, 27283.0], [46.8, 27283.0], [46.9, 27385.0], [47.0, 27426.0], [47.1, 27432.0], [47.2, 27432.0], [47.3, 27451.0], [47.4, 27462.0], [47.5, 27477.0], [47.6, 27477.0], [47.7, 27491.0], [47.8, 27599.0], [47.9, 27643.0], [48.0, 27643.0], [48.1, 27645.0], [48.2, 27653.0], [48.3, 27665.0], [48.4, 27665.0], [48.5, 27676.0], [48.6, 27685.0], [48.7, 27685.0], [48.8, 27805.0], [48.9, 27814.0], [49.0, 27876.0], [49.1, 27876.0], [49.2, 27939.0], [49.3, 27948.0], [49.4, 27970.0], [49.5, 27970.0], [49.6, 27982.0], [49.7, 27990.0], [49.8, 27997.0], [49.9, 27997.0], [50.0, 28000.0], [50.1, 28094.0], [50.2, 28094.0], [50.3, 28133.0], [50.4, 28349.0], [50.5, 28390.0], [50.6, 28390.0], [50.7, 28395.0], [50.8, 28400.0], [50.9, 28402.0], [51.0, 28402.0], [51.1, 28435.0], [51.2, 28445.0], [51.3, 28462.0], [51.4, 28462.0], [51.5, 28507.0], [51.6, 28530.0], [51.7, 28530.0], [51.8, 28555.0], [51.9, 28566.0], [52.0, 28583.0], [52.1, 28583.0], [52.2, 28639.0], [52.3, 28677.0], [52.4, 28695.0], [52.5, 28695.0], [52.6, 28715.0], [52.7, 28720.0], [52.8, 28732.0], [52.9, 28732.0], [53.0, 28750.0], [53.1, 28756.0], [53.2, 28796.0], [53.3, 28796.0], [53.4, 28810.0], [53.5, 28817.0], [53.6, 28817.0], [53.7, 28819.0], [53.8, 28825.0], [53.9, 28859.0], [54.0, 28859.0], [54.1, 28875.0], [54.2, 28897.0], [54.3, 28897.0], [54.4, 28897.0], [54.5, 28912.0], [54.6, 28975.0], [54.7, 29011.0], [54.8, 29011.0], [54.9, 29026.0], [55.0, 29026.0], [55.1, 29026.0], [55.2, 29034.0], [55.3, 29038.0], [55.4, 29063.0], [55.5, 29063.0], [55.6, 29078.0], [55.7, 29083.0], [55.8, 29089.0], [55.9, 29089.0], [56.0, 29090.0], [56.1, 29115.0], [56.2, 29135.0], [56.3, 29135.0], [56.4, 29146.0], [56.5, 29156.0], [56.6, 29161.0], [56.7, 29161.0], [56.8, 29183.0], [56.9, 29189.0], [57.0, 29189.0], [57.1, 29201.0], [57.2, 29202.0], [57.3, 29222.0], [57.4, 29222.0], [57.5, 29236.0], [57.6, 29236.0], [57.7, 29258.0], [57.8, 29258.0], [57.9, 29260.0], [58.0, 29287.0], [58.1, 29302.0], [58.2, 29302.0], [58.3, 29356.0], [58.4, 29359.0], [58.5, 29359.0], [58.6, 29366.0], [58.7, 29383.0], [58.8, 29384.0], [58.9, 29384.0], [59.0, 29398.0], [59.1, 29470.0], [59.2, 29490.0], [59.3, 29490.0], [59.4, 29501.0], [59.5, 29518.0], [59.6, 29520.0], [59.7, 29520.0], [59.8, 29527.0], [59.9, 29537.0], [60.0, 29554.0], [60.1, 29554.0], [60.2, 29591.0], [60.3, 29626.0], [60.4, 29626.0], [60.5, 29632.0], [60.6, 29658.0], [60.7, 29730.0], [60.8, 29730.0], [60.9, 29755.0], [61.0, 29757.0], [61.1, 29758.0], [61.2, 29758.0], [61.3, 29782.0], [61.4, 29845.0], [61.5, 29873.0], [61.6, 29873.0], [61.7, 29878.0], [61.8, 29887.0], [61.9, 29887.0], [62.0, 29897.0], [62.1, 29947.0], [62.2, 29948.0], [62.3, 29948.0], [62.4, 29962.0], [62.5, 29965.0], [62.6, 29966.0], [62.7, 29966.0], [62.8, 29981.0], [62.9, 29985.0], [63.0, 29987.0], [63.1, 29987.0], [63.2, 29997.0], [63.3, 29998.0], [63.4, 29998.0], [63.5, 30041.0], [63.6, 30051.0], [63.7, 30059.0], [63.8, 30059.0], [63.9, 30060.0], [64.0, 30085.0], [64.1, 30088.0], [64.2, 30088.0], [64.3, 30097.0], [64.4, 30099.0], [64.5, 30125.0], [64.6, 30125.0], [64.7, 30138.0], [64.8, 30140.0], [64.9, 30144.0], [65.0, 30144.0], [65.1, 30151.0], [65.2, 30155.0], [65.3, 30155.0], [65.4, 30160.0], [65.5, 30164.0], [65.6, 30166.0], [65.7, 30166.0], [65.8, 30177.0], [65.9, 30180.0], [66.0, 30184.0], [66.1, 30184.0], [66.2, 30194.0], [66.3, 30196.0], [66.4, 30198.0], [66.5, 30198.0], [66.6, 30204.0], [66.7, 30206.0], [66.8, 30206.0], [66.9, 30218.0], [67.0, 30225.0], [67.1, 30233.0], [67.2, 30233.0], [67.3, 30235.0], [67.4, 30237.0], [67.5, 30249.0], [67.6, 30249.0], [67.7, 30251.0], [67.8, 30252.0], [67.9, 30265.0], [68.0, 30265.0], [68.1, 30272.0], [68.2, 30275.0], [68.3, 30281.0], [68.4, 30281.0], [68.5, 30285.0], [68.6, 30306.0], [68.7, 30306.0], [68.8, 30309.0], [68.9, 30312.0], [69.0, 30318.0], [69.1, 30318.0], [69.2, 30324.0], [69.3, 30338.0], [69.4, 30339.0], [69.5, 30339.0], [69.6, 30339.0], [69.7, 30354.0], [69.8, 30355.0], [69.9, 30355.0], [70.0, 30359.0], [70.1, 30360.0], [70.2, 30360.0], [70.3, 30369.0], [70.4, 30376.0], [70.5, 30381.0], [70.6, 30381.0], [70.7, 30385.0], [70.8, 30397.0], [70.9, 30400.0], [71.0, 30400.0], [71.1, 30402.0], [71.2, 30408.0], [71.3, 30427.0], [71.4, 30427.0], [71.5, 30428.0], [71.6, 30433.0], [71.7, 30433.0], [71.8, 30435.0], [71.9, 30436.0], [72.0, 30438.0], [72.1, 30438.0], [72.2, 30452.0], [72.3, 30455.0], [72.4, 30458.0], [72.5, 30458.0], [72.6, 30459.0], [72.7, 30462.0], [72.8, 30469.0], [72.9, 30469.0], [73.0, 30473.0], [73.1, 30474.0], [73.2, 30476.0], [73.3, 30476.0], [73.4, 30488.0], [73.5, 30492.0], [73.6, 30492.0], [73.7, 30494.0], [73.8, 30494.0], [73.9, 30494.0], [74.0, 30494.0], [74.1, 30497.0], [74.2, 30505.0], [74.3, 30506.0], [74.4, 30506.0], [74.5, 30525.0], [74.6, 30544.0], [74.7, 30549.0], [74.8, 30549.0], [74.9, 30550.0], [75.0, 30554.0], [75.1, 30554.0], [75.2, 30556.0], [75.3, 30563.0], [75.4, 30565.0], [75.5, 30565.0], [75.6, 30567.0], [75.7, 30572.0], [75.8, 30576.0], [75.9, 30576.0], [76.0, 30584.0], [76.1, 30596.0], [76.2, 30598.0], [76.3, 30598.0], [76.4, 30600.0], [76.5, 30600.0], [76.6, 30602.0], [76.7, 30602.0], [76.8, 30607.0], [76.9, 30612.0], [77.0, 30612.0], [77.1, 30612.0], [77.2, 30620.0], [77.3, 30621.0], [77.4, 30621.0], [77.5, 30626.0], [77.6, 30627.0], [77.7, 30627.0], [77.8, 30627.0], [77.9, 30628.0], [78.0, 30628.0], [78.1, 30630.0], [78.2, 30630.0], [78.3, 30631.0], [78.4, 30637.0], [78.5, 30637.0], [78.6, 30637.0], [78.7, 30641.0], [78.8, 30642.0], [78.9, 30642.0], [79.0, 30648.0], [79.1, 30649.0], [79.2, 30652.0], [79.3, 30652.0], [79.4, 30653.0], [79.5, 30663.0], [79.6, 30667.0], [79.7, 30667.0], [79.8, 30669.0], [79.9, 30676.0], [80.0, 30685.0], [80.1, 30685.0], [80.2, 30689.0], [80.3, 30694.0], [80.4, 30694.0], [80.5, 30702.0], [80.6, 30704.0], [80.7, 30716.0], [80.8, 30716.0], [80.9, 30717.0], [81.0, 30717.0], [81.1, 30720.0], [81.2, 30720.0], [81.3, 30722.0], [81.4, 30727.0], [81.5, 30727.0], [81.6, 30727.0], [81.7, 30729.0], [81.8, 30739.0], [81.9, 30739.0], [82.0, 30740.0], [82.1, 30744.0], [82.2, 30744.0], [82.3, 30744.0], [82.4, 30744.0], [82.5, 30746.0], [82.6, 30751.0], [82.7, 30751.0], [82.8, 30761.0], [82.9, 30761.0], [83.0, 30762.0], [83.1, 30762.0], [83.2, 30763.0], [83.3, 30767.0], [83.4, 30767.0], [83.5, 30768.0], [83.6, 30772.0], [83.7, 30784.0], [83.8, 30784.0], [83.9, 30788.0], [84.0, 30801.0], [84.1, 30805.0], [84.2, 30805.0], [84.3, 30808.0], [84.4, 30809.0], [84.5, 30814.0], [84.6, 30814.0], [84.7, 30816.0], [84.8, 30820.0], [84.9, 30825.0], [85.0, 30825.0], [85.1, 30830.0], [85.2, 30830.0], [85.3, 30830.0], [85.4, 30834.0], [85.5, 30836.0], [85.6, 30839.0], [85.7, 30839.0], [85.8, 30839.0], [85.9, 30841.0], [86.0, 30841.0], [86.1, 30841.0], [86.2, 30857.0], [86.3, 30867.0], [86.4, 30873.0], [86.5, 30873.0], [86.6, 30877.0], [86.7, 30885.0], [86.8, 30885.0], [86.9, 30885.0], [87.0, 30885.0], [87.1, 30889.0], [87.2, 30889.0], [87.3, 30889.0], [87.4, 30890.0], [87.5, 30892.0], [87.6, 30892.0], [87.7, 30893.0], [87.8, 30907.0], [87.9, 30918.0], [88.0, 30918.0], [88.1, 30918.0], [88.2, 30920.0], [88.3, 30932.0], [88.4, 30932.0], [88.5, 30933.0], [88.6, 30933.0], [88.7, 30933.0], [88.8, 30933.0], [88.9, 30941.0], [89.0, 30957.0], [89.1, 30957.0], [89.2, 30960.0], [89.3, 30966.0], [89.4, 30974.0], [89.5, 30974.0], [89.6, 30975.0], [89.7, 30980.0], [89.8, 30981.0], [89.9, 30981.0], [90.0, 30982.0], [90.1, 30994.0], [90.2, 30994.0], [90.3, 30995.0], [90.4, 30998.0], [90.5, 31019.0], [90.6, 31019.0], [90.7, 31029.0], [90.8, 31031.0], [90.9, 31034.0], [91.0, 31034.0], [91.1, 31077.0], [91.2, 31100.0], [91.3, 31103.0], [91.4, 31103.0], [91.5, 31132.0], [91.6, 31132.0], [91.7, 31132.0], [91.8, 31144.0], [91.9, 31145.0], [92.0, 31179.0], [92.1, 31179.0], [92.2, 31182.0], [92.3, 31193.0], [92.4, 31197.0], [92.5, 31197.0], [92.6, 31201.0], [92.7, 31350.0], [92.8, 31515.0], [92.9, 31515.0], [93.0, 31549.0], [93.1, 31568.0], [93.2, 31603.0], [93.3, 31603.0], [93.4, 31732.0], [93.5, 31869.0], [93.6, 31869.0], [93.7, 31948.0], [93.8, 31951.0], [93.9, 31980.0], [94.0, 31980.0], [94.1, 32052.0], [94.2, 32084.0], [94.3, 32215.0], [94.4, 32215.0], [94.5, 32296.0], [94.6, 32399.0], [94.7, 32495.0], [94.8, 32495.0], [94.9, 32527.0], [95.0, 32876.0], [95.1, 32876.0], [95.2, 33071.0], [95.3, 33216.0], [95.4, 33539.0], [95.5, 33539.0], [95.6, 33675.0], [95.7, 33681.0], [95.8, 33740.0], [95.9, 33740.0], [96.0, 33951.0], [96.1, 34696.0], [96.2, 34932.0], [96.3, 34932.0], [96.4, 35351.0], [96.5, 35522.0], [96.6, 35570.0], [96.7, 35570.0], [96.8, 36078.0], [96.9, 36291.0], [97.0, 36291.0], [97.1, 36779.0], [97.2, 37199.0], [97.3, 37321.0], [97.4, 37321.0], [97.5, 38305.0], [97.6, 38482.0], [97.7, 38890.0], [97.8, 38890.0], [97.9, 39779.0], [98.0, 39853.0], [98.1, 39972.0], [98.2, 39972.0], [98.3, 41100.0], [98.4, 42179.0], [98.5, 42179.0], [98.6, 42201.0], [98.7, 42201.0], [98.8, 42988.0], [98.9, 42988.0], [99.0, 43224.0], [99.1, 43883.0], [99.2, 44302.0], [99.3, 44302.0], [99.4, 44438.0], [99.5, 44831.0], [99.6, 45625.0], [99.7, 45625.0], [99.8, 45791.0], [99.9, 45809.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 30.0, "series": [{"data": [[33900.0, 1.0], [33500.0, 1.0], [33700.0, 1.0], [35500.0, 2.0], [34900.0, 1.0], [36700.0, 1.0], [35300.0, 1.0], [37100.0, 1.0], [37300.0, 1.0], [38300.0, 1.0], [39900.0, 1.0], [39700.0, 1.0], [42900.0, 1.0], [41100.0, 1.0], [42100.0, 1.0], [44300.0, 1.0], [45700.0, 1.0], [3100.0, 1.0], [6200.0, 1.0], [8600.0, 1.0], [11400.0, 1.0], [14100.0, 1.0], [16700.0, 1.0], [17400.0, 4.0], [17300.0, 1.0], [17100.0, 1.0], [18200.0, 3.0], [18300.0, 4.0], [17900.0, 2.0], [17700.0, 4.0], [17800.0, 7.0], [18100.0, 3.0], [18000.0, 3.0], [18400.0, 3.0], [17500.0, 8.0], [17600.0, 3.0], [19300.0, 5.0], [19000.0, 3.0], [18500.0, 2.0], [18600.0, 2.0], [18700.0, 3.0], [19200.0, 4.0], [18900.0, 5.0], [18800.0, 2.0], [19400.0, 1.0], [19100.0, 1.0], [19700.0, 2.0], [20200.0, 5.0], [20100.0, 4.0], [19900.0, 2.0], [19600.0, 1.0], [19800.0, 3.0], [20400.0, 2.0], [20000.0, 2.0], [20300.0, 3.0], [20700.0, 2.0], [21200.0, 2.0], [20900.0, 3.0], [21000.0, 2.0], [20800.0, 5.0], [20600.0, 3.0], [21500.0, 3.0], [21100.0, 1.0], [20500.0, 1.0], [21800.0, 2.0], [22400.0, 8.0], [22200.0, 3.0], [21600.0, 1.0], [22500.0, 1.0], [22000.0, 1.0], [22300.0, 3.0], [22100.0, 2.0], [23300.0, 2.0], [23000.0, 5.0], [23500.0, 4.0], [23200.0, 3.0], [23400.0, 1.0], [22900.0, 4.0], [22800.0, 1.0], [22600.0, 2.0], [22700.0, 3.0], [23100.0, 6.0], [24400.0, 6.0], [24500.0, 8.0], [23700.0, 4.0], [24200.0, 2.0], [24300.0, 6.0], [24000.0, 3.0], [23600.0, 2.0], [23900.0, 2.0], [24100.0, 1.0], [25100.0, 11.0], [24600.0, 5.0], [25200.0, 3.0], [25300.0, 5.0], [25500.0, 6.0], [24900.0, 5.0], [24700.0, 3.0], [25000.0, 6.0], [25400.0, 6.0], [25800.0, 4.0], [26600.0, 6.0], [25900.0, 4.0], [26000.0, 6.0], [26100.0, 9.0], [26200.0, 5.0], [26300.0, 2.0], [26400.0, 2.0], [26500.0, 3.0], [25700.0, 6.0], [25600.0, 1.0], [26800.0, 5.0], [27400.0, 6.0], [26700.0, 7.0], [27600.0, 6.0], [27000.0, 7.0], [27500.0, 1.0], [27100.0, 5.0], [27200.0, 5.0], [27300.0, 1.0], [26900.0, 5.0], [28400.0, 5.0], [28600.0, 3.0], [28500.0, 5.0], [28300.0, 3.0], [27800.0, 3.0], [27900.0, 6.0], [28000.0, 2.0], [28100.0, 1.0], [28800.0, 8.0], [29000.0, 10.0], [29200.0, 8.0], [29300.0, 7.0], [28900.0, 2.0], [29500.0, 7.0], [29600.0, 3.0], [29400.0, 2.0], [29100.0, 7.0], [28700.0, 6.0], [30600.0, 30.0], [29700.0, 5.0], [30300.0, 17.0], [29800.0, 5.0], [30200.0, 15.0], [30500.0, 16.0], [29900.0, 10.0], [30400.0, 24.0], [30700.0, 26.0], [30100.0, 15.0], [30000.0, 8.0], [31500.0, 3.0], [30800.0, 28.0], [31600.0, 1.0], [31100.0, 10.0], [31200.0, 1.0], [30900.0, 20.0], [31300.0, 1.0], [31000.0, 5.0], [31700.0, 1.0], [31900.0, 3.0], [32400.0, 1.0], [32000.0, 2.0], [31800.0, 1.0], [32500.0, 1.0], [32200.0, 2.0], [32300.0, 1.0], [34600.0, 1.0], [32800.0, 1.0], [33000.0, 1.0], [33200.0, 1.0], [33600.0, 2.0], [36000.0, 1.0], [36200.0, 1.0], [38800.0, 1.0], [38400.0, 1.0], [39800.0, 1.0], [42200.0, 2.0], [43800.0, 1.0], [44800.0, 1.0], [43200.0, 1.0], [44400.0, 1.0], [45800.0, 1.0], [45600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.448275862068964, "minX": 1.602411E12, "maxY": 10.0, "series": [{"data": [[1.6024122E12, 10.0], [1.6024119E12, 10.0], [1.6024128E12, 10.0], [1.6024125E12, 10.0], [1.602411E12, 10.0], [1.60241262E12, 10.0], [1.6024116E12, 10.0], [1.6024113E12, 10.0], [1.60241292E12, 10.0], [1.60241172E12, 10.0], [1.60241142E12, 10.0], [1.60241232E12, 10.0], [1.60241202E12, 10.0], [1.60241244E12, 10.0], [1.60241214E12, 10.0], [1.60241112E12, 10.0], [1.60241274E12, 10.0], [1.60241124E12, 10.0], [1.60241286E12, 10.0], [1.60241184E12, 10.0], [1.60241154E12, 10.0], [1.60241196E12, 10.0], [1.60241166E12, 10.0], [1.60241256E12, 10.0], [1.60241226E12, 10.0], [1.60241268E12, 10.0], [1.60241298E12, 8.448275862068964], [1.60241238E12, 10.0], [1.60241136E12, 10.0], [1.60241106E12, 10.0], [1.60241148E12, 10.0], [1.60241118E12, 10.0], [1.60241208E12, 10.0], [1.60241178E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17525.0, "minX": 1.0, "maxY": 27160.537190082647, "series": [{"data": [[8.0, 17579.0], [4.0, 18011.0], [2.0, 17525.0], [1.0, 17821.0], [9.0, 17554.0], [10.0, 27160.537190082647], [5.0, 18019.0], [6.0, 17878.0], [3.0, 17818.0], [7.0, 17772.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 27045.61496598639]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 43.9, "minX": 1.602411E12, "maxY": 173374.56666666668, "series": [{"data": [[1.6024122E12, 74857.91666666667], [1.6024119E12, 65872.36666666667], [1.6024128E12, 31012.266666666666], [1.6024125E12, 52259.85], [1.602411E12, 83613.28333333334], [1.60241262E12, 43558.2], [1.6024116E12, 51756.566666666666], [1.6024113E12, 43351.833333333336], [1.60241292E12, 85229.35], [1.60241172E12, 36224.0], [1.60241142E12, 45941.1], [1.60241232E12, 43805.26666666667], [1.60241202E12, 158040.63333333333], [1.60241244E12, 43192.96666666667], [1.60241214E12, 74076.08333333333], [1.60241112E12, 68670.73333333334], [1.60241274E12, 32137.866666666665], [1.60241124E12, 74499.91666666667], [1.60241286E12, 118687.11666666667], [1.60241184E12, 173374.56666666668], [1.60241154E12, 46901.78333333333], [1.60241196E12, 142896.7], [1.60241166E12, 42263.0], [1.60241256E12, 45502.36666666667], [1.60241226E12, 27953.616666666665], [1.60241268E12, 42923.26666666667], [1.60241298E12, 50048.583333333336], [1.60241238E12, 50144.55], [1.60241136E12, 48384.51666666667], [1.60241106E12, 172374.75], [1.60241148E12, 43885.21666666667], [1.60241118E12, 123831.41666666667], [1.60241208E12, 53374.21666666667], [1.60241178E12, 32797.183333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6024122E12, 176.53333333333333], [1.6024119E12, 174.61666666666667], [1.6024128E12, 182.46666666666667], [1.6024125E12, 146.73333333333332], [1.602411E12, 43.9], [1.60241262E12, 138.81666666666666], [1.6024116E12, 146.35], [1.6024113E12, 169.3], [1.60241292E12, 131.55], [1.60241172E12, 153.38333333333333], [1.60241142E12, 146.13333333333333], [1.60241232E12, 138.83333333333334], [1.60241202E12, 183.1], [1.60241244E12, 146.11666666666667], [1.60241214E12, 171.46666666666667], [1.60241112E12, 201.15], [1.60241274E12, 167.76666666666668], [1.60241124E12, 160.71666666666667], [1.60241286E12, 195.43333333333334], [1.60241184E12, 210.53333333333333], [1.60241154E12, 146.13333333333333], [1.60241196E12, 177.78333333333333], [1.60241166E12, 138.71666666666667], [1.60241256E12, 146.45], [1.60241226E12, 116.88333333333334], [1.60241268E12, 145.96666666666667], [1.60241298E12, 199.45], [1.60241238E12, 146.16666666666666], [1.60241136E12, 138.81666666666666], [1.60241106E12, 183.8], [1.60241148E12, 138.8], [1.60241118E12, 105.53333333333333], [1.60241208E12, 194.7], [1.60241178E12, 175.18333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10073.333333333332, "minX": 1.602411E12, "maxY": 35928.07142857143, "series": [{"data": [[1.6024122E12, 25479.791666666668], [1.6024119E12, 25477.44], [1.6024128E12, 24156.28], [1.6024125E12, 29475.149999999998], [1.602411E12, 10073.333333333332], [1.60241262E12, 30791.0], [1.6024116E12, 30002.950000000004], [1.6024113E12, 26766.304347826084], [1.60241292E12, 28663.38888888889], [1.60241172E12, 29369.95238095238], [1.60241142E12, 30414.55], [1.60241232E12, 30820.1052631579], [1.60241202E12, 24943.759999999995], [1.60241244E12, 30625.8], [1.60241214E12, 28119.478260869568], [1.60241112E12, 20645.39285714286], [1.60241274E12, 27281.913043478264], [1.60241124E12, 31152.18181818182], [1.60241286E12, 23051.7037037037], [1.60241184E12, 19834.896551724138], [1.60241154E12, 30823.949999999997], [1.60241196E12, 23151.8], [1.60241166E12, 30467.42105263158], [1.60241256E12, 29866.300000000003], [1.60241226E12, 35353.5], [1.60241268E12, 30322.550000000003], [1.60241298E12, 23392.551724137928], [1.60241238E12, 30369.55], [1.60241136E12, 29725.263157894737], [1.60241106E12, 25389.8], [1.60241148E12, 30774.842105263157], [1.60241118E12, 35928.07142857143], [1.60241208E12, 18991.85714285714], [1.60241178E12, 26216.083333333336]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10067.666666666668, "minX": 1.602411E12, "maxY": 35923.21428571428, "series": [{"data": [[1.6024122E12, 25478.541666666668], [1.6024119E12, 25474.8], [1.6024128E12, 24155.76], [1.6024125E12, 29473.800000000003], [1.602411E12, 10067.666666666668], [1.60241262E12, 30789.736842105267], [1.6024116E12, 30001.800000000003], [1.6024113E12, 26765.47826086956], [1.60241292E12, 28660.333333333332], [1.60241172E12, 29369.238095238095], [1.60241142E12, 30413.4], [1.60241232E12, 30819.052631578947], [1.60241202E12, 24940.600000000002], [1.60241244E12, 30624.749999999996], [1.60241214E12, 28117.739130434784], [1.60241112E12, 20643.892857142855], [1.60241274E12, 27281.478260869564], [1.60241124E12, 31150.636363636368], [1.60241286E12, 23049.185185185182], [1.60241184E12, 19831.137931034482], [1.60241154E12, 30822.65], [1.60241196E12, 23148.239999999998], [1.60241166E12, 30466.263157894737], [1.60241256E12, 29865.15], [1.60241226E12, 35352.8125], [1.60241268E12, 30321.300000000003], [1.60241298E12, 23390.344827586203], [1.60241238E12, 30368.25], [1.60241136E12, 29723.736842105263], [1.60241106E12, 25386.96], [1.60241148E12, 30773.631578947367], [1.60241118E12, 35923.21428571428], [1.60241208E12, 18990.17857142857], [1.60241178E12, 26215.458333333332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.25000000000000006, "minX": 1.602411E12, "maxY": 15.333333333333334, "series": [{"data": [[1.6024122E12, 0.41666666666666663], [1.6024119E12, 0.28], [1.6024128E12, 0.5999999999999999], [1.6024125E12, 0.6000000000000001], [1.602411E12, 15.333333333333334], [1.60241262E12, 0.5263157894736842], [1.6024116E12, 0.6000000000000001], [1.6024113E12, 0.34782608695652173], [1.60241292E12, 0.4444444444444444], [1.60241172E12, 0.6190476190476191], [1.60241142E12, 0.6], [1.60241232E12, 0.631578947368421], [1.60241202E12, 0.39999999999999997], [1.60241244E12, 0.6], [1.60241214E12, 0.5217391304347826], [1.60241112E12, 0.5714285714285716], [1.60241274E12, 0.391304347826087], [1.60241124E12, 0.6818181818181818], [1.60241286E12, 0.4444444444444444], [1.60241184E12, 0.48275862068965514], [1.60241154E12, 0.7499999999999999], [1.60241196E12, 0.28], [1.60241166E12, 0.736842105263158], [1.60241256E12, 0.3], [1.60241226E12, 0.25000000000000006], [1.60241268E12, 0.7499999999999999], [1.60241298E12, 0.41379310344827586], [1.60241238E12, 0.85], [1.60241136E12, 0.368421052631579], [1.60241106E12, 0.32000000000000006], [1.60241148E12, 0.6842105263157895], [1.60241118E12, 1.0000000000000002], [1.60241208E12, 0.5], [1.60241178E12, 0.5416666666666667]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3173.0, "minX": 1.602411E12, "maxY": 45809.0, "series": [{"data": [[1.6024122E12, 27939.0], [1.6024119E12, 32084.0], [1.6024128E12, 27876.0], [1.6024125E12, 30438.0], [1.602411E12, 16771.0], [1.60241262E12, 31145.0], [1.6024116E12, 30873.0], [1.6024113E12, 32495.0], [1.60241292E12, 33681.0], [1.60241172E12, 30918.0], [1.60241142E12, 30836.0], [1.60241232E12, 36291.0], [1.60241202E12, 29758.0], [1.60241244E12, 31197.0], [1.60241214E12, 33216.0], [1.60241112E12, 25242.0], [1.60241274E12, 29985.0], [1.60241124E12, 45625.0], [1.60241286E12, 28750.0], [1.60241184E12, 24359.0], [1.60241154E12, 31350.0], [1.60241196E12, 27055.0], [1.60241166E12, 30727.0], [1.60241256E12, 30980.0], [1.60241226E12, 44438.0], [1.60241268E12, 31031.0], [1.60241298E12, 39779.0], [1.60241238E12, 31019.0], [1.60241136E12, 31603.0], [1.60241106E12, 28817.0], [1.60241148E12, 31201.0], [1.60241118E12, 45809.0], [1.60241208E12, 24528.0], [1.60241178E12, 29490.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6024122E12, 23105.0], [1.6024119E12, 18374.0], [1.6024128E12, 21583.0], [1.6024125E12, 28400.0], [1.602411E12, 3173.0], [1.60241262E12, 30459.0], [1.6024116E12, 28975.0], [1.6024113E12, 23432.0], [1.60241292E12, 20378.0], [1.60241172E12, 26430.0], [1.60241142E12, 29948.0], [1.60241232E12, 26782.0], [1.60241202E12, 20225.0], [1.60241244E12, 29947.0], [1.60241214E12, 22917.0], [1.60241112E12, 17767.0], [1.60241274E12, 24622.0], [1.60241124E12, 25849.0], [1.60241286E12, 19226.0], [1.60241184E12, 18084.0], [1.60241154E12, 30397.0], [1.60241196E12, 18752.0], [1.60241166E12, 30206.0], [1.60241256E12, 28796.0], [1.60241226E12, 24267.0], [1.60241268E12, 29518.0], [1.60241298E12, 17196.0], [1.60241238E12, 29757.0], [1.60241136E12, 26584.0], [1.60241106E12, 19086.0], [1.60241148E12, 29997.0], [1.60241118E12, 24275.0], [1.60241208E12, 17302.0], [1.60241178E12, 23766.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6024122E12, 23105.0], [1.6024119E12, 18374.0], [1.6024128E12, 21583.0], [1.6024125E12, 28400.0], [1.602411E12, 3173.0], [1.60241262E12, 30459.0], [1.6024116E12, 28975.0], [1.6024113E12, 23432.0], [1.60241292E12, 20378.0], [1.60241172E12, 26430.0], [1.60241142E12, 29948.0], [1.60241232E12, 26782.0], [1.60241202E12, 20225.0], [1.60241244E12, 29947.0], [1.60241214E12, 22917.0], [1.60241112E12, 17767.0], [1.60241274E12, 24622.0], [1.60241124E12, 25849.0], [1.60241286E12, 19226.0], [1.60241184E12, 18084.0], [1.60241154E12, 30397.0], [1.60241196E12, 18752.0], [1.60241166E12, 30206.0], [1.60241256E12, 28796.0], [1.60241226E12, 24267.0], [1.60241268E12, 29518.0], [1.60241298E12, 17196.0], [1.60241238E12, 29757.0], [1.60241136E12, 26584.0], [1.60241106E12, 19086.0], [1.60241148E12, 29997.0], [1.60241118E12, 24275.0], [1.60241208E12, 17302.0], [1.60241178E12, 23766.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6024122E12, 23105.0], [1.6024119E12, 18374.0], [1.6024128E12, 21583.0], [1.6024125E12, 28400.0], [1.602411E12, 3173.0], [1.60241262E12, 30459.0], [1.6024116E12, 28975.0], [1.6024113E12, 23432.0], [1.60241292E12, 20378.0], [1.60241172E12, 26430.0], [1.60241142E12, 29948.0], [1.60241232E12, 26782.0], [1.60241202E12, 20225.0], [1.60241244E12, 29947.0], [1.60241214E12, 22917.0], [1.60241112E12, 17767.0], [1.60241274E12, 24622.0], [1.60241124E12, 25849.0], [1.60241286E12, 19226.0], [1.60241184E12, 18084.0], [1.60241154E12, 30397.0], [1.60241196E12, 18752.0], [1.60241166E12, 30206.0], [1.60241256E12, 28796.0], [1.60241226E12, 24267.0], [1.60241268E12, 29518.0], [1.60241298E12, 17196.0], [1.60241238E12, 29757.0], [1.60241136E12, 26584.0], [1.60241106E12, 19086.0], [1.60241148E12, 29997.0], [1.60241118E12, 24275.0], [1.60241208E12, 17302.0], [1.60241178E12, 23766.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6024122E12, 23105.0], [1.6024119E12, 18374.0], [1.6024128E12, 21583.0], [1.6024125E12, 28400.0], [1.602411E12, 3173.0], [1.60241262E12, 30459.0], [1.6024116E12, 28975.0], [1.6024113E12, 23432.0], [1.60241292E12, 20378.0], [1.60241172E12, 26430.0], [1.60241142E12, 29948.0], [1.60241232E12, 26782.0], [1.60241202E12, 20225.0], [1.60241244E12, 29947.0], [1.60241214E12, 22917.0], [1.60241112E12, 17767.0], [1.60241274E12, 24622.0], [1.60241124E12, 25849.0], [1.60241286E12, 19226.0], [1.60241184E12, 18084.0], [1.60241154E12, 30397.0], [1.60241196E12, 18752.0], [1.60241166E12, 30206.0], [1.60241256E12, 28796.0], [1.60241226E12, 24267.0], [1.60241268E12, 29518.0], [1.60241298E12, 17196.0], [1.60241238E12, 29757.0], [1.60241136E12, 26584.0], [1.60241106E12, 19086.0], [1.60241148E12, 29997.0], [1.60241118E12, 24275.0], [1.60241208E12, 17302.0], [1.60241178E12, 23766.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6024122E12, 25398.0], [1.6024119E12, 23167.0], [1.6024128E12, 24027.0], [1.6024125E12, 29629.0], [1.602411E12, 10037.0], [1.60241262E12, 30784.0], [1.6024116E12, 30207.5], [1.6024113E12, 26019.0], [1.60241292E12, 29240.0], [1.60241172E12, 30436.0], [1.60241142E12, 30437.0], [1.60241232E12, 30473.0], [1.60241202E12, 25049.0], [1.60241244E12, 30560.5], [1.60241214E12, 28756.0], [1.60241112E12, 20216.0], [1.60241274E12, 27120.0], [1.60241124E12, 29404.0], [1.60241286E12, 22429.0], [1.60241184E12, 19363.0], [1.60241154E12, 30863.0], [1.60241196E12, 23677.0], [1.60241166E12, 30505.0], [1.60241256E12, 29294.5], [1.60241226E12, 36699.5], [1.60241268E12, 30525.0], [1.60241298E12, 18019.0], [1.60241238E12, 30186.5], [1.60241136E12, 30385.0], [1.60241106E12, 26781.0], [1.60241148E12, 30809.0], [1.60241118E12, 38585.5], [1.60241208E12, 18050.0], [1.60241178E12, 26043.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28000.0, "minX": 1.0, "maxY": 28000.0, "series": [{"data": [[1.0, 28000.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27999.0, "minX": 1.0, "maxY": 27999.0, "series": [{"data": [[1.0, 27999.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.602411E12, "maxY": 0.48333333333333334, "series": [{"data": [[1.6024122E12, 0.4], [1.6024119E12, 0.4166666666666667], [1.6024128E12, 0.4166666666666667], [1.6024125E12, 0.3333333333333333], [1.602411E12, 0.26666666666666666], [1.60241262E12, 0.31666666666666665], [1.6024116E12, 0.3333333333333333], [1.6024113E12, 0.38333333333333336], [1.60241292E12, 0.3], [1.60241172E12, 0.35], [1.60241142E12, 0.3333333333333333], [1.60241232E12, 0.31666666666666665], [1.60241202E12, 0.4166666666666667], [1.60241244E12, 0.3333333333333333], [1.60241214E12, 0.38333333333333336], [1.60241112E12, 0.4666666666666667], [1.60241274E12, 0.38333333333333336], [1.60241124E12, 0.36666666666666664], [1.60241286E12, 0.45], [1.60241184E12, 0.48333333333333334], [1.60241154E12, 0.3333333333333333], [1.60241196E12, 0.4166666666666667], [1.60241166E12, 0.31666666666666665], [1.60241256E12, 0.3333333333333333], [1.60241226E12, 0.26666666666666666], [1.60241268E12, 0.3333333333333333], [1.60241298E12, 0.31666666666666665], [1.60241238E12, 0.3333333333333333], [1.60241136E12, 0.31666666666666665], [1.60241106E12, 0.4166666666666667], [1.60241148E12, 0.31666666666666665], [1.60241118E12, 0.23333333333333334], [1.60241208E12, 0.4666666666666667], [1.60241178E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241298E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.602411E12, "maxY": 0.48333333333333334, "series": [{"data": [[1.6024122E12, 0.4], [1.6024119E12, 0.4166666666666667], [1.6024128E12, 0.4166666666666667], [1.6024125E12, 0.3333333333333333], [1.602411E12, 0.1], [1.60241262E12, 0.31666666666666665], [1.6024116E12, 0.3333333333333333], [1.6024113E12, 0.38333333333333336], [1.60241292E12, 0.3], [1.60241172E12, 0.35], [1.60241142E12, 0.3333333333333333], [1.60241232E12, 0.31666666666666665], [1.60241202E12, 0.4166666666666667], [1.60241244E12, 0.3333333333333333], [1.60241214E12, 0.38333333333333336], [1.60241112E12, 0.4666666666666667], [1.60241274E12, 0.38333333333333336], [1.60241124E12, 0.36666666666666664], [1.60241286E12, 0.45], [1.60241184E12, 0.48333333333333334], [1.60241154E12, 0.3333333333333333], [1.60241196E12, 0.4166666666666667], [1.60241166E12, 0.31666666666666665], [1.60241256E12, 0.3333333333333333], [1.60241226E12, 0.26666666666666666], [1.60241268E12, 0.3333333333333333], [1.60241298E12, 0.48333333333333334], [1.60241238E12, 0.3333333333333333], [1.60241136E12, 0.31666666666666665], [1.60241106E12, 0.4166666666666667], [1.60241148E12, 0.31666666666666665], [1.60241118E12, 0.23333333333333334], [1.60241208E12, 0.4666666666666667], [1.60241178E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.602411E12, "maxY": 0.48333333333333334, "series": [{"data": [[1.6024122E12, 0.4], [1.6024119E12, 0.4166666666666667], [1.6024128E12, 0.4166666666666667], [1.6024125E12, 0.3333333333333333], [1.602411E12, 0.1], [1.60241262E12, 0.31666666666666665], [1.6024116E12, 0.3333333333333333], [1.6024113E12, 0.38333333333333336], [1.60241292E12, 0.3], [1.60241172E12, 0.35], [1.60241142E12, 0.3333333333333333], [1.60241232E12, 0.31666666666666665], [1.60241202E12, 0.4166666666666667], [1.60241244E12, 0.3333333333333333], [1.60241214E12, 0.38333333333333336], [1.60241112E12, 0.4666666666666667], [1.60241274E12, 0.38333333333333336], [1.60241124E12, 0.36666666666666664], [1.60241286E12, 0.45], [1.60241184E12, 0.48333333333333334], [1.60241154E12, 0.3333333333333333], [1.60241196E12, 0.4166666666666667], [1.60241166E12, 0.31666666666666665], [1.60241256E12, 0.3333333333333333], [1.60241226E12, 0.26666666666666666], [1.60241268E12, 0.3333333333333333], [1.60241298E12, 0.48333333333333334], [1.60241238E12, 0.3333333333333333], [1.60241136E12, 0.31666666666666665], [1.60241106E12, 0.4166666666666667], [1.60241148E12, 0.31666666666666665], [1.60241118E12, 0.23333333333333334], [1.60241208E12, 0.4666666666666667], [1.60241178E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.602411E12, "maxY": 0.48333333333333334, "series": [{"data": [[1.6024122E12, 0.4], [1.6024119E12, 0.4166666666666667], [1.6024128E12, 0.4166666666666667], [1.6024125E12, 0.3333333333333333], [1.602411E12, 0.1], [1.60241262E12, 0.31666666666666665], [1.6024116E12, 0.3333333333333333], [1.6024113E12, 0.38333333333333336], [1.60241292E12, 0.3], [1.60241172E12, 0.35], [1.60241142E12, 0.3333333333333333], [1.60241232E12, 0.31666666666666665], [1.60241202E12, 0.4166666666666667], [1.60241244E12, 0.3333333333333333], [1.60241214E12, 0.38333333333333336], [1.60241112E12, 0.4666666666666667], [1.60241274E12, 0.38333333333333336], [1.60241124E12, 0.36666666666666664], [1.60241286E12, 0.45], [1.60241184E12, 0.48333333333333334], [1.60241154E12, 0.3333333333333333], [1.60241196E12, 0.4166666666666667], [1.60241166E12, 0.31666666666666665], [1.60241256E12, 0.3333333333333333], [1.60241226E12, 0.26666666666666666], [1.60241268E12, 0.3333333333333333], [1.60241298E12, 0.48333333333333334], [1.60241238E12, 0.3333333333333333], [1.60241136E12, 0.31666666666666665], [1.60241106E12, 0.4166666666666667], [1.60241148E12, 0.31666666666666665], [1.60241118E12, 0.23333333333333334], [1.60241208E12, 0.4666666666666667], [1.60241178E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

