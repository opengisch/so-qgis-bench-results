/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3428.0, "minX": 0.0, "maxY": 46364.0, "series": [{"data": [[0.0, 3428.0], [0.1, 3428.0], [0.2, 6448.0], [0.3, 8663.0], [0.4, 8663.0], [0.5, 11753.0], [0.6, 14385.0], [0.7, 17054.0], [0.8, 17054.0], [0.9, 17072.0], [1.0, 17112.0], [1.1, 17133.0], [1.2, 17133.0], [1.3, 17154.0], [1.4, 17498.0], [1.5, 17506.0], [1.6, 17506.0], [1.7, 17526.0], [1.8, 17531.0], [1.9, 17531.0], [2.0, 17592.0], [2.1, 17598.0], [2.2, 17620.0], [2.3, 17620.0], [2.4, 17628.0], [2.5, 17671.0], [2.6, 17699.0], [2.7, 17699.0], [2.8, 17775.0], [2.9, 17814.0], [3.0, 17828.0], [3.1, 17828.0], [3.2, 17880.0], [3.3, 17882.0], [3.4, 17882.0], [3.5, 17904.0], [3.6, 17926.0], [3.7, 17935.0], [3.8, 17935.0], [3.9, 18024.0], [4.0, 18071.0], [4.1, 18072.0], [4.2, 18072.0], [4.3, 18102.0], [4.4, 18358.0], [4.5, 18397.0], [4.6, 18397.0], [4.7, 18414.0], [4.8, 18420.0], [4.9, 18503.0], [5.0, 18503.0], [5.1, 18529.0], [5.2, 18536.0], [5.3, 18536.0], [5.4, 18574.0], [5.5, 18597.0], [5.6, 18606.0], [5.7, 18606.0], [5.8, 18609.0], [5.9, 18611.0], [6.0, 18656.0], [6.1, 18656.0], [6.2, 18665.0], [6.3, 18688.0], [6.4, 18703.0], [6.5, 18703.0], [6.6, 18707.0], [6.7, 18754.0], [6.8, 18754.0], [6.9, 18765.0], [7.0, 18794.0], [7.1, 18795.0], [7.2, 18795.0], [7.3, 18798.0], [7.4, 18844.0], [7.5, 18850.0], [7.6, 18850.0], [7.7, 18861.0], [7.8, 18902.0], [7.9, 18943.0], [8.0, 18943.0], [8.1, 18963.0], [8.2, 19040.0], [8.3, 19049.0], [8.4, 19049.0], [8.5, 19209.0], [8.6, 19271.0], [8.7, 19271.0], [8.8, 19394.0], [8.9, 19469.0], [9.0, 19469.0], [9.1, 19469.0], [9.2, 19514.0], [9.3, 19528.0], [9.4, 19529.0], [9.5, 19529.0], [9.6, 19613.0], [9.7, 19619.0], [9.8, 19636.0], [9.9, 19636.0], [10.0, 19642.0], [10.1, 19689.0], [10.2, 19689.0], [10.3, 19691.0], [10.4, 19706.0], [10.5, 19723.0], [10.6, 19723.0], [10.7, 19747.0], [10.8, 19782.0], [10.9, 19893.0], [11.0, 19893.0], [11.1, 19922.0], [11.2, 19935.0], [11.3, 20037.0], [11.4, 20037.0], [11.5, 20084.0], [11.6, 20110.0], [11.7, 20110.0], [11.8, 20138.0], [11.9, 20217.0], [12.0, 20218.0], [12.1, 20218.0], [12.2, 20252.0], [12.3, 20275.0], [12.4, 20313.0], [12.5, 20313.0], [12.6, 20324.0], [12.7, 20367.0], [12.8, 20375.0], [12.9, 20375.0], [13.0, 20405.0], [13.1, 20444.0], [13.2, 20485.0], [13.3, 20485.0], [13.4, 20584.0], [13.5, 20603.0], [13.6, 20603.0], [13.7, 20621.0], [13.8, 20657.0], [13.9, 20715.0], [14.0, 20715.0], [14.1, 20879.0], [14.2, 20888.0], [14.3, 20929.0], [14.4, 20929.0], [14.5, 20973.0], [14.6, 20996.0], [14.7, 21062.0], [14.8, 21062.0], [14.9, 21092.0], [15.0, 21144.0], [15.1, 21144.0], [15.2, 21149.0], [15.3, 21182.0], [15.4, 21234.0], [15.5, 21234.0], [15.6, 21234.0], [15.7, 21273.0], [15.8, 21296.0], [15.9, 21296.0], [16.0, 21300.0], [16.1, 21306.0], [16.2, 21347.0], [16.3, 21347.0], [16.4, 21405.0], [16.5, 21410.0], [16.6, 21423.0], [16.7, 21423.0], [16.8, 21648.0], [16.9, 21676.0], [17.0, 21676.0], [17.1, 21763.0], [17.2, 21796.0], [17.3, 21797.0], [17.4, 21797.0], [17.5, 21830.0], [17.6, 21882.0], [17.7, 21997.0], [17.8, 21997.0], [17.9, 22120.0], [18.0, 22201.0], [18.1, 22260.0], [18.2, 22260.0], [18.3, 22284.0], [18.4, 22287.0], [18.5, 22287.0], [18.6, 22301.0], [18.7, 22325.0], [18.8, 22351.0], [18.9, 22351.0], [19.0, 22358.0], [19.1, 22373.0], [19.2, 22384.0], [19.3, 22384.0], [19.4, 22412.0], [19.5, 22418.0], [19.6, 22463.0], [19.7, 22463.0], [19.8, 22496.0], [19.9, 22499.0], [20.0, 22505.0], [20.1, 22505.0], [20.2, 22622.0], [20.3, 22811.0], [20.4, 22811.0], [20.5, 22853.0], [20.6, 22855.0], [20.7, 22867.0], [20.8, 22867.0], [20.9, 22868.0], [21.0, 22888.0], [21.1, 22907.0], [21.2, 22907.0], [21.3, 22919.0], [21.4, 22945.0], [21.5, 22973.0], [21.6, 22973.0], [21.7, 22977.0], [21.8, 22987.0], [21.9, 22987.0], [22.0, 23061.0], [22.1, 23108.0], [22.2, 23120.0], [22.3, 23120.0], [22.4, 23138.0], [22.5, 23145.0], [22.6, 23167.0], [22.7, 23167.0], [22.8, 23186.0], [22.9, 23283.0], [23.0, 23317.0], [23.1, 23317.0], [23.2, 23338.0], [23.3, 23405.0], [23.4, 23405.0], [23.5, 23411.0], [23.6, 23420.0], [23.7, 23421.0], [23.8, 23421.0], [23.9, 23427.0], [24.0, 23440.0], [24.1, 23638.0], [24.2, 23638.0], [24.3, 23647.0], [24.4, 23807.0], [24.5, 23845.0], [24.6, 23845.0], [24.7, 24060.0], [24.8, 24068.0], [24.9, 24101.0], [25.0, 24101.0], [25.1, 24136.0], [25.2, 24155.0], [25.3, 24155.0], [25.4, 24156.0], [25.5, 24175.0], [25.6, 24190.0], [25.7, 24190.0], [25.8, 24204.0], [25.9, 24255.0], [26.0, 24275.0], [26.1, 24275.0], [26.2, 24282.0], [26.3, 24295.0], [26.4, 24310.0], [26.5, 24310.0], [26.6, 24335.0], [26.7, 24335.0], [26.8, 24335.0], [26.9, 24344.0], [27.0, 24403.0], [27.1, 24426.0], [27.2, 24426.0], [27.3, 24435.0], [27.4, 24471.0], [27.5, 24514.0], [27.6, 24514.0], [27.7, 24522.0], [27.8, 24548.0], [27.9, 24589.0], [28.0, 24589.0], [28.1, 24659.0], [28.2, 24691.0], [28.3, 24722.0], [28.4, 24722.0], [28.5, 24733.0], [28.6, 24778.0], [28.7, 24778.0], [28.8, 24787.0], [28.9, 24787.0], [29.0, 24825.0], [29.1, 24825.0], [29.2, 24938.0], [29.3, 24948.0], [29.4, 24954.0], [29.5, 24954.0], [29.6, 25008.0], [29.7, 25038.0], [29.8, 25068.0], [29.9, 25068.0], [30.0, 25076.0], [30.1, 25076.0], [30.2, 25076.0], [30.3, 25095.0], [30.4, 25105.0], [30.5, 25108.0], [30.6, 25108.0], [30.7, 25120.0], [30.8, 25127.0], [30.9, 25133.0], [31.0, 25133.0], [31.1, 25149.0], [31.2, 25183.0], [31.3, 25194.0], [31.4, 25194.0], [31.5, 25195.0], [31.6, 25233.0], [31.7, 25233.0], [31.8, 25262.0], [31.9, 25271.0], [32.0, 25276.0], [32.1, 25276.0], [32.2, 25285.0], [32.3, 25333.0], [32.4, 25353.0], [32.5, 25353.0], [32.6, 25362.0], [32.7, 25367.0], [32.8, 25390.0], [32.9, 25390.0], [33.0, 25409.0], [33.1, 25480.0], [33.2, 25504.0], [33.3, 25504.0], [33.4, 25518.0], [33.5, 25521.0], [33.6, 25521.0], [33.7, 25527.0], [33.8, 25540.0], [33.9, 25583.0], [34.0, 25583.0], [34.1, 25584.0], [34.2, 25594.0], [34.3, 25603.0], [34.4, 25603.0], [34.5, 25604.0], [34.6, 25618.0], [34.7, 25644.0], [34.8, 25644.0], [34.9, 25662.0], [35.0, 25685.0], [35.1, 25685.0], [35.2, 25691.0], [35.3, 25713.0], [35.4, 25721.0], [35.5, 25721.0], [35.6, 25738.0], [35.7, 25755.0], [35.8, 25781.0], [35.9, 25781.0], [36.0, 25801.0], [36.1, 25809.0], [36.2, 25816.0], [36.3, 25816.0], [36.4, 25840.0], [36.5, 25849.0], [36.6, 25856.0], [36.7, 25856.0], [36.8, 25858.0], [36.9, 25867.0], [37.0, 25867.0], [37.1, 25898.0], [37.2, 25927.0], [37.3, 25960.0], [37.4, 25960.0], [37.5, 25961.0], [37.6, 25971.0], [37.7, 25975.0], [37.8, 25975.0], [37.9, 25986.0], [38.0, 26007.0], [38.1, 26065.0], [38.2, 26065.0], [38.3, 26069.0], [38.4, 26080.0], [38.5, 26080.0], [38.6, 26087.0], [38.7, 26138.0], [38.8, 26153.0], [38.9, 26153.0], [39.0, 26189.0], [39.1, 26216.0], [39.2, 26231.0], [39.3, 26231.0], [39.4, 26253.0], [39.5, 26267.0], [39.6, 26282.0], [39.7, 26282.0], [39.8, 26329.0], [39.9, 26385.0], [40.0, 26399.0], [40.1, 26399.0], [40.2, 26434.0], [40.3, 26479.0], [40.4, 26479.0], [40.5, 26496.0], [40.6, 26524.0], [40.7, 26526.0], [40.8, 26526.0], [40.9, 26536.0], [41.0, 26573.0], [41.1, 26578.0], [41.2, 26578.0], [41.3, 26605.0], [41.4, 26637.0], [41.5, 26642.0], [41.6, 26642.0], [41.7, 26643.0], [41.8, 26653.0], [41.9, 26653.0], [42.0, 26706.0], [42.1, 26707.0], [42.2, 26720.0], [42.3, 26720.0], [42.4, 26793.0], [42.5, 26814.0], [42.6, 26852.0], [42.7, 26852.0], [42.8, 26871.0], [42.9, 26876.0], [43.0, 26876.0], [43.1, 26876.0], [43.2, 26884.0], [43.3, 26891.0], [43.4, 26891.0], [43.5, 26894.0], [43.6, 26903.0], [43.7, 26940.0], [43.8, 26940.0], [43.9, 26953.0], [44.0, 26982.0], [44.1, 27014.0], [44.2, 27014.0], [44.3, 27022.0], [44.4, 27049.0], [44.5, 27050.0], [44.6, 27050.0], [44.7, 27078.0], [44.8, 27089.0], [44.9, 27092.0], [45.0, 27092.0], [45.1, 27092.0], [45.2, 27096.0], [45.3, 27096.0], [45.4, 27109.0], [45.5, 27141.0], [45.6, 27170.0], [45.7, 27170.0], [45.8, 27177.0], [45.9, 27190.0], [46.0, 27193.0], [46.1, 27193.0], [46.2, 27270.0], [46.3, 27279.0], [46.4, 27309.0], [46.5, 27309.0], [46.6, 27326.0], [46.7, 27402.0], [46.8, 27402.0], [46.9, 27405.0], [47.0, 27410.0], [47.1, 27432.0], [47.2, 27432.0], [47.3, 27468.0], [47.4, 27468.0], [47.5, 27527.0], [47.6, 27527.0], [47.7, 27530.0], [47.8, 27549.0], [47.9, 27573.0], [48.0, 27573.0], [48.1, 27656.0], [48.2, 27699.0], [48.3, 27708.0], [48.4, 27708.0], [48.5, 27708.0], [48.6, 27734.0], [48.7, 27734.0], [48.8, 27811.0], [48.9, 27822.0], [49.0, 27861.0], [49.1, 27861.0], [49.2, 27890.0], [49.3, 27938.0], [49.4, 27948.0], [49.5, 27948.0], [49.6, 27949.0], [49.7, 27975.0], [49.8, 28005.0], [49.9, 28005.0], [50.0, 28068.0], [50.1, 28092.0], [50.2, 28092.0], [50.3, 28213.0], [50.4, 28218.0], [50.5, 28249.0], [50.6, 28249.0], [50.7, 28276.0], [50.8, 28303.0], [50.9, 28304.0], [51.0, 28304.0], [51.1, 28306.0], [51.2, 28338.0], [51.3, 28373.0], [51.4, 28373.0], [51.5, 28375.0], [51.6, 28387.0], [51.7, 28387.0], [51.8, 28483.0], [51.9, 28495.0], [52.0, 28533.0], [52.1, 28533.0], [52.2, 28564.0], [52.3, 28564.0], [52.4, 28568.0], [52.5, 28568.0], [52.6, 28574.0], [52.7, 28585.0], [52.8, 28601.0], [52.9, 28601.0], [53.0, 28613.0], [53.1, 28634.0], [53.2, 28641.0], [53.3, 28641.0], [53.4, 28685.0], [53.5, 28692.0], [53.6, 28692.0], [53.7, 28807.0], [53.8, 28807.0], [53.9, 28859.0], [54.0, 28859.0], [54.1, 28881.0], [54.2, 28898.0], [54.3, 28908.0], [54.4, 28908.0], [54.5, 29031.0], [54.6, 29031.0], [54.7, 29069.0], [54.8, 29069.0], [54.9, 29081.0], [55.0, 29089.0], [55.1, 29089.0], [55.2, 29100.0], [55.3, 29105.0], [55.4, 29109.0], [55.5, 29109.0], [55.6, 29119.0], [55.7, 29126.0], [55.8, 29148.0], [55.9, 29148.0], [56.0, 29181.0], [56.1, 29201.0], [56.2, 29217.0], [56.3, 29217.0], [56.4, 29219.0], [56.5, 29240.0], [56.6, 29253.0], [56.7, 29253.0], [56.8, 29253.0], [56.9, 29308.0], [57.0, 29308.0], [57.1, 29325.0], [57.2, 29344.0], [57.3, 29356.0], [57.4, 29356.0], [57.5, 29363.0], [57.6, 29402.0], [57.7, 29404.0], [57.8, 29404.0], [57.9, 29406.0], [58.0, 29412.0], [58.1, 29413.0], [58.2, 29413.0], [58.3, 29437.0], [58.4, 29440.0], [58.5, 29440.0], [58.6, 29485.0], [58.7, 29492.0], [58.8, 29498.0], [58.9, 29498.0], [59.0, 29513.0], [59.1, 29519.0], [59.2, 29579.0], [59.3, 29579.0], [59.4, 29586.0], [59.5, 29601.0], [59.6, 29616.0], [59.7, 29616.0], [59.8, 29675.0], [59.9, 29685.0], [60.0, 29697.0], [60.1, 29697.0], [60.2, 29729.0], [60.3, 29761.0], [60.4, 29761.0], [60.5, 29766.0], [60.6, 29779.0], [60.7, 29787.0], [60.8, 29787.0], [60.9, 29815.0], [61.0, 29818.0], [61.1, 29823.0], [61.2, 29823.0], [61.3, 29834.0], [61.4, 29844.0], [61.5, 29857.0], [61.6, 29857.0], [61.7, 29858.0], [61.8, 29865.0], [61.9, 29865.0], [62.0, 29885.0], [62.1, 29885.0], [62.2, 29891.0], [62.3, 29891.0], [62.4, 29896.0], [62.5, 29907.0], [62.6, 29915.0], [62.7, 29915.0], [62.8, 29943.0], [62.9, 29951.0], [63.0, 29981.0], [63.1, 29981.0], [63.2, 29982.0], [63.3, 29988.0], [63.4, 29988.0], [63.5, 30034.0], [63.6, 30061.0], [63.7, 30064.0], [63.8, 30064.0], [63.9, 30066.0], [64.0, 30067.0], [64.1, 30077.0], [64.2, 30077.0], [64.3, 30085.0], [64.4, 30100.0], [64.5, 30109.0], [64.6, 30109.0], [64.7, 30128.0], [64.8, 30131.0], [64.9, 30155.0], [65.0, 30155.0], [65.1, 30164.0], [65.2, 30165.0], [65.3, 30165.0], [65.4, 30172.0], [65.5, 30189.0], [65.6, 30205.0], [65.7, 30205.0], [65.8, 30216.0], [65.9, 30217.0], [66.0, 30233.0], [66.1, 30233.0], [66.2, 30242.0], [66.3, 30249.0], [66.4, 30255.0], [66.5, 30255.0], [66.6, 30258.0], [66.7, 30264.0], [66.8, 30264.0], [66.9, 30266.0], [67.0, 30270.0], [67.1, 30288.0], [67.2, 30288.0], [67.3, 30294.0], [67.4, 30298.0], [67.5, 30313.0], [67.6, 30313.0], [67.7, 30321.0], [67.8, 30323.0], [67.9, 30337.0], [68.0, 30337.0], [68.1, 30350.0], [68.2, 30352.0], [68.3, 30353.0], [68.4, 30353.0], [68.5, 30355.0], [68.6, 30376.0], [68.7, 30376.0], [68.8, 30396.0], [68.9, 30399.0], [69.0, 30401.0], [69.1, 30401.0], [69.2, 30409.0], [69.3, 30413.0], [69.4, 30418.0], [69.5, 30418.0], [69.6, 30418.0], [69.7, 30423.0], [69.8, 30425.0], [69.9, 30425.0], [70.0, 30428.0], [70.1, 30433.0], [70.2, 30433.0], [70.3, 30442.0], [70.4, 30451.0], [70.5, 30463.0], [70.6, 30463.0], [70.7, 30480.0], [70.8, 30502.0], [70.9, 30511.0], [71.0, 30511.0], [71.1, 30514.0], [71.2, 30515.0], [71.3, 30515.0], [71.4, 30515.0], [71.5, 30524.0], [71.6, 30527.0], [71.7, 30527.0], [71.8, 30530.0], [71.9, 30531.0], [72.0, 30537.0], [72.1, 30537.0], [72.2, 30546.0], [72.3, 30551.0], [72.4, 30552.0], [72.5, 30552.0], [72.6, 30565.0], [72.7, 30568.0], [72.8, 30572.0], [72.9, 30572.0], [73.0, 30595.0], [73.1, 30601.0], [73.2, 30603.0], [73.3, 30603.0], [73.4, 30610.0], [73.5, 30611.0], [73.6, 30611.0], [73.7, 30624.0], [73.8, 30628.0], [73.9, 30630.0], [74.0, 30630.0], [74.1, 30634.0], [74.2, 30644.0], [74.3, 30657.0], [74.4, 30657.0], [74.5, 30660.0], [74.6, 30686.0], [74.7, 30687.0], [74.8, 30687.0], [74.9, 30690.0], [75.0, 30694.0], [75.1, 30694.0], [75.2, 30704.0], [75.3, 30705.0], [75.4, 30706.0], [75.5, 30706.0], [75.6, 30710.0], [75.7, 30717.0], [75.8, 30720.0], [75.9, 30720.0], [76.0, 30725.0], [76.1, 30728.0], [76.2, 30732.0], [76.3, 30732.0], [76.4, 30746.0], [76.5, 30751.0], [76.6, 30753.0], [76.7, 30753.0], [76.8, 30762.0], [76.9, 30762.0], [77.0, 30762.0], [77.1, 30768.0], [77.2, 30773.0], [77.3, 30776.0], [77.4, 30776.0], [77.5, 30784.0], [77.6, 30797.0], [77.7, 30798.0], [77.8, 30798.0], [77.9, 30799.0], [78.0, 30801.0], [78.1, 30810.0], [78.2, 30810.0], [78.3, 30810.0], [78.4, 30814.0], [78.5, 30814.0], [78.6, 30820.0], [78.7, 30828.0], [78.8, 30829.0], [78.9, 30829.0], [79.0, 30834.0], [79.1, 30841.0], [79.2, 30841.0], [79.3, 30841.0], [79.4, 30850.0], [79.5, 30856.0], [79.6, 30860.0], [79.7, 30860.0], [79.8, 30866.0], [79.9, 30874.0], [80.0, 30876.0], [80.1, 30876.0], [80.2, 30877.0], [80.3, 30892.0], [80.4, 30892.0], [80.5, 30894.0], [80.6, 30898.0], [80.7, 30903.0], [80.8, 30903.0], [80.9, 30903.0], [81.0, 30906.0], [81.1, 30909.0], [81.2, 30909.0], [81.3, 30911.0], [81.4, 30914.0], [81.5, 30923.0], [81.6, 30923.0], [81.7, 30927.0], [81.8, 30928.0], [81.9, 30928.0], [82.0, 30944.0], [82.1, 30961.0], [82.2, 30968.0], [82.3, 30968.0], [82.4, 30983.0], [82.5, 30996.0], [82.6, 30997.0], [82.7, 30997.0], [82.8, 31000.0], [82.9, 31010.0], [83.0, 31012.0], [83.1, 31012.0], [83.2, 31023.0], [83.3, 31025.0], [83.4, 31025.0], [83.5, 31027.0], [83.6, 31040.0], [83.7, 31042.0], [83.8, 31042.0], [83.9, 31051.0], [84.0, 31051.0], [84.1, 31053.0], [84.2, 31053.0], [84.3, 31055.0], [84.4, 31060.0], [84.5, 31061.0], [84.6, 31061.0], [84.7, 31076.0], [84.8, 31086.0], [84.9, 31086.0], [85.0, 31086.0], [85.1, 31087.0], [85.2, 31093.0], [85.3, 31093.0], [85.4, 31104.0], [85.5, 31116.0], [85.6, 31121.0], [85.7, 31121.0], [85.8, 31122.0], [85.9, 31122.0], [86.0, 31126.0], [86.1, 31126.0], [86.2, 31131.0], [86.3, 31132.0], [86.4, 31137.0], [86.5, 31137.0], [86.6, 31139.0], [86.7, 31149.0], [86.8, 31149.0], [86.9, 31153.0], [87.0, 31155.0], [87.1, 31165.0], [87.2, 31165.0], [87.3, 31169.0], [87.4, 31186.0], [87.5, 31192.0], [87.6, 31192.0], [87.7, 31203.0], [87.8, 31213.0], [87.9, 31219.0], [88.0, 31219.0], [88.1, 31225.0], [88.2, 31229.0], [88.3, 31232.0], [88.4, 31232.0], [88.5, 31233.0], [88.6, 31236.0], [88.7, 31236.0], [88.8, 31238.0], [88.9, 31238.0], [89.0, 31240.0], [89.1, 31240.0], [89.2, 31245.0], [89.3, 31245.0], [89.4, 31250.0], [89.5, 31250.0], [89.6, 31261.0], [89.7, 31264.0], [89.8, 31271.0], [89.9, 31271.0], [90.0, 31272.0], [90.1, 31272.0], [90.2, 31272.0], [90.3, 31275.0], [90.4, 31275.0], [90.5, 31307.0], [90.6, 31307.0], [90.7, 31346.0], [90.8, 31348.0], [90.9, 31382.0], [91.0, 31382.0], [91.1, 31407.0], [91.2, 31408.0], [91.3, 31440.0], [91.4, 31440.0], [91.5, 31452.0], [91.6, 31452.0], [91.7, 31452.0], [91.8, 31497.0], [91.9, 31578.0], [92.0, 31786.0], [92.1, 31786.0], [92.2, 31803.0], [92.3, 31804.0], [92.4, 31831.0], [92.5, 31831.0], [92.6, 32007.0], [92.7, 32028.0], [92.8, 32065.0], [92.9, 32065.0], [93.0, 32122.0], [93.1, 32124.0], [93.2, 32204.0], [93.3, 32204.0], [93.4, 32229.0], [93.5, 32232.0], [93.6, 32232.0], [93.7, 32306.0], [93.8, 32445.0], [93.9, 32513.0], [94.0, 32513.0], [94.1, 32519.0], [94.2, 32568.0], [94.3, 32599.0], [94.4, 32599.0], [94.5, 32603.0], [94.6, 32657.0], [94.7, 32715.0], [94.8, 32715.0], [94.9, 32733.0], [95.0, 32966.0], [95.1, 32966.0], [95.2, 33065.0], [95.3, 33077.0], [95.4, 33639.0], [95.5, 33639.0], [95.6, 33666.0], [95.7, 33929.0], [95.8, 34289.0], [95.9, 34289.0], [96.0, 34534.0], [96.1, 34657.0], [96.2, 35212.0], [96.3, 35212.0], [96.4, 35563.0], [96.5, 35564.0], [96.6, 36090.0], [96.7, 36090.0], [96.8, 36217.0], [96.9, 36708.0], [97.0, 36708.0], [97.1, 37226.0], [97.2, 37861.0], [97.3, 38614.0], [97.4, 38614.0], [97.5, 38767.0], [97.6, 38826.0], [97.7, 38908.0], [97.8, 38908.0], [97.9, 40211.0], [98.0, 40476.0], [98.1, 41180.0], [98.2, 41180.0], [98.3, 41633.0], [98.4, 42472.0], [98.5, 42472.0], [98.6, 42697.0], [98.7, 43322.0], [98.8, 43393.0], [98.9, 43393.0], [99.0, 43516.0], [99.1, 44564.0], [99.2, 44622.0], [99.3, 44622.0], [99.4, 45247.0], [99.5, 45530.0], [99.6, 45885.0], [99.7, 45885.0], [99.8, 45964.0], [99.9, 46364.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3400.0, "maxY": 21.0, "series": [{"data": [[33900.0, 1.0], [32900.0, 1.0], [34500.0, 1.0], [35500.0, 2.0], [36700.0, 1.0], [38900.0, 1.0], [38700.0, 1.0], [41100.0, 1.0], [43300.0, 2.0], [43500.0, 1.0], [44500.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [45900.0, 1.0], [3400.0, 1.0], [6400.0, 1.0], [8600.0, 1.0], [11700.0, 1.0], [14300.0, 1.0], [17000.0, 2.0], [17400.0, 1.0], [17100.0, 3.0], [18400.0, 2.0], [18300.0, 2.0], [18000.0, 3.0], [17900.0, 3.0], [17800.0, 4.0], [17600.0, 4.0], [17500.0, 5.0], [17700.0, 1.0], [18100.0, 1.0], [18900.0, 3.0], [19200.0, 2.0], [18700.0, 7.0], [18500.0, 5.0], [19000.0, 2.0], [19400.0, 2.0], [18800.0, 3.0], [18600.0, 6.0], [19300.0, 1.0], [19700.0, 4.0], [19500.0, 3.0], [20400.0, 3.0], [19600.0, 6.0], [20200.0, 4.0], [20100.0, 2.0], [20300.0, 4.0], [20000.0, 2.0], [19900.0, 2.0], [19800.0, 1.0], [21400.0, 3.0], [21300.0, 3.0], [21100.0, 3.0], [21000.0, 2.0], [20600.0, 3.0], [21200.0, 4.0], [20500.0, 1.0], [20700.0, 1.0], [20900.0, 3.0], [20800.0, 2.0], [21700.0, 3.0], [22200.0, 4.0], [21600.0, 2.0], [22400.0, 5.0], [22500.0, 1.0], [21800.0, 2.0], [22300.0, 6.0], [21900.0, 1.0], [22100.0, 1.0], [22800.0, 6.0], [22600.0, 1.0], [23000.0, 1.0], [23400.0, 6.0], [22900.0, 6.0], [23300.0, 2.0], [23100.0, 6.0], [23200.0, 1.0], [24200.0, 5.0], [23600.0, 2.0], [24100.0, 6.0], [24300.0, 4.0], [24000.0, 2.0], [24400.0, 4.0], [24500.0, 4.0], [23800.0, 2.0], [25400.0, 2.0], [25200.0, 5.0], [25000.0, 6.0], [25100.0, 9.0], [25500.0, 8.0], [24900.0, 3.0], [24700.0, 5.0], [24800.0, 1.0], [25300.0, 5.0], [24600.0, 2.0], [25700.0, 5.0], [26200.0, 5.0], [26300.0, 3.0], [26600.0, 5.0], [26100.0, 3.0], [26000.0, 5.0], [25900.0, 6.0], [25800.0, 9.0], [25600.0, 7.0], [26500.0, 5.0], [26400.0, 3.0], [27400.0, 6.0], [27000.0, 9.0], [27100.0, 6.0], [27600.0, 2.0], [27200.0, 2.0], [27300.0, 2.0], [27500.0, 4.0], [26900.0, 4.0], [26800.0, 8.0], [26700.0, 4.0], [28500.0, 6.0], [27700.0, 3.0], [27900.0, 4.0], [27800.0, 4.0], [28600.0, 6.0], [28200.0, 4.0], [28300.0, 7.0], [28000.0, 3.0], [28400.0, 2.0], [28900.0, 1.0], [29600.0, 5.0], [28800.0, 5.0], [29300.0, 5.0], [29100.0, 7.0], [29400.0, 10.0], [29500.0, 4.0], [29200.0, 6.0], [29000.0, 5.0], [29900.0, 7.0], [30600.0, 15.0], [30300.0, 11.0], [30500.0, 17.0], [30700.0, 21.0], [30400.0, 13.0], [30200.0, 14.0], [30100.0, 9.0], [30000.0, 7.0], [29800.0, 12.0], [29700.0, 5.0], [31500.0, 1.0], [31200.0, 21.0], [30800.0, 20.0], [31100.0, 17.0], [31000.0, 19.0], [31400.0, 6.0], [31300.0, 4.0], [31700.0, 1.0], [30900.0, 15.0], [31800.0, 3.0], [32400.0, 1.0], [32200.0, 3.0], [32100.0, 2.0], [32000.0, 3.0], [32300.0, 1.0], [32700.0, 2.0], [32600.0, 2.0], [32500.0, 4.0], [34600.0, 1.0], [34200.0, 1.0], [33000.0, 2.0], [33600.0, 2.0], [36000.0, 1.0], [35200.0, 1.0], [36200.0, 1.0], [38600.0, 1.0], [38800.0, 1.0], [37800.0, 1.0], [37200.0, 1.0], [40200.0, 1.0], [40400.0, 1.0], [41600.0, 1.0], [42600.0, 1.0], [42400.0, 1.0], [44600.0, 1.0], [45200.0, 1.0], [45800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.043478260869566, "minX": 1.6024044E12, "maxY": 10.0, "series": [{"data": [[1.60240506E12, 10.0], [1.60240446E12, 10.0], [1.60240536E12, 10.0], [1.60240638E12, 8.043478260869566], [1.60240476E12, 10.0], [1.60240626E12, 10.0], [1.60240464E12, 10.0], [1.60240566E12, 10.0], [1.60240596E12, 10.0], [1.60240554E12, 10.0], [1.60240584E12, 10.0], [1.60240494E12, 10.0], [1.60240524E12, 10.0], [1.60240482E12, 10.0], [1.60240512E12, 10.0], [1.60240614E12, 10.0], [1.60240452E12, 10.0], [1.60240602E12, 10.0], [1.60240632E12, 10.0], [1.6024044E12, 10.0], [1.60240542E12, 10.0], [1.60240572E12, 10.0], [1.6024053E12, 10.0], [1.6024056E12, 10.0], [1.6024047E12, 10.0], [1.602405E12, 10.0], [1.60240458E12, 10.0], [1.60240488E12, 10.0], [1.6024059E12, 10.0], [1.6024062E12, 10.0], [1.60240578E12, 10.0], [1.60240608E12, 10.0], [1.60240518E12, 10.0], [1.60240548E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60240638E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17506.0, "minX": 1.0, "maxY": 27313.104683195594, "series": [{"data": [[8.0, 17592.0], [4.0, 17628.0], [2.0, 17775.0], [1.0, 18102.0], [9.0, 17598.0], [10.0, 27313.104683195594], [5.0, 17506.0], [6.0, 17526.0], [3.0, 17620.0], [7.0, 17531.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 27194.819047619047]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 118.25, "minX": 1.6024044E12, "maxY": 206970.9, "series": [{"data": [[1.60240506E12, 42170.75], [1.60240446E12, 61528.666666666664], [1.60240536E12, 193798.71666666667], [1.60240638E12, 22948.766666666666], [1.60240476E12, 43433.01666666667], [1.60240626E12, 140887.13333333333], [1.60240464E12, 77299.63333333333], [1.60240566E12, 32723.8], [1.60240596E12, 45696.816666666666], [1.60240554E12, 56535.96666666667], [1.60240584E12, 40521.73333333333], [1.60240494E12, 56046.85], [1.60240524E12, 166047.6], [1.60240482E12, 42824.53333333333], [1.60240512E12, 34373.5], [1.60240614E12, 29663.7], [1.60240452E12, 141359.03333333333], [1.60240602E12, 49524.15], [1.60240632E12, 81547.31666666667], [1.6024044E12, 206970.9], [1.60240542E12, 89048.11666666667], [1.60240572E12, 43630.28333333333], [1.6024053E12, 87402.51666666666], [1.6024056E12, 64945.11666666667], [1.6024047E12, 47063.433333333334], [1.602405E12, 40069.13333333333], [1.60240458E12, 54695.05], [1.60240488E12, 46355.416666666664], [1.6024059E12, 52650.28333333333], [1.6024062E12, 29076.65], [1.60240578E12, 51257.5], [1.60240608E12, 39368.13333333333], [1.60240518E12, 35433.55], [1.60240548E12, 76548.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60240506E12, 145.98333333333332], [1.60240446E12, 192.26666666666668], [1.60240536E12, 178.83333333333334], [1.60240638E12, 153.93333333333334], [1.60240476E12, 138.81666666666666], [1.60240626E12, 174.35], [1.60240464E12, 176.26666666666668], [1.60240566E12, 124.18333333333334], [1.60240596E12, 146.11666666666667], [1.60240554E12, 169.61666666666667], [1.60240584E12, 138.78333333333333], [1.60240494E12, 153.7], [1.60240524E12, 192.91666666666666], [1.60240482E12, 138.81666666666666], [1.60240512E12, 160.68333333333334], [1.60240614E12, 175.05], [1.60240452E12, 157.56666666666666], [1.60240602E12, 146.11666666666667], [1.60240632E12, 146.9], [1.6024044E12, 124.78333333333333], [1.60240542E12, 193.61666666666667], [1.60240572E12, 146.13333333333333], [1.6024053E12, 163.63333333333333], [1.6024056E12, 154.61666666666667], [1.6024047E12, 153.7], [1.602405E12, 138.75], [1.60240458E12, 118.25], [1.60240488E12, 138.83333333333334], [1.6024059E12, 147.1], [1.6024062E12, 182.61666666666667], [1.60240578E12, 146.15], [1.60240608E12, 145.96666666666667], [1.60240518E12, 195.88333333333333], [1.60240548E12, 178.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60240638E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19674.13043478261, "minX": 1.6024044E12, "maxY": 40653.12500000001, "series": [{"data": [[1.60240506E12, 30969.65], [1.60240446E12, 22792.111111111113], [1.60240536E12, 24548.68], [1.60240638E12, 19674.13043478261], [1.60240476E12, 30974.894736842103], [1.60240626E12, 22105.791666666664], [1.60240464E12, 26559.208333333336], [1.60240566E12, 37209.0], [1.60240596E12, 30394.049999999996], [1.60240554E12, 26597.652173913044], [1.60240584E12, 30754.684210526317], [1.60240494E12, 29897.0], [1.60240524E12, 20863.185185185186], [1.60240482E12, 31644.578947368424], [1.60240512E12, 28163.04545454546], [1.60240614E12, 26340.25], [1.60240452E12, 23709.666666666664], [1.60240602E12, 30876.8], [1.60240632E12, 32016.999999999996], [1.6024044E12, 20428.823529411766], [1.60240542E12, 23431.48148148148], [1.60240572E12, 30275.15], [1.6024053E12, 25760.652173913044], [1.6024056E12, 25640.809523809527], [1.6024047E12, 27269.999999999996], [1.602405E12, 30186.263157894737], [1.60240458E12, 40653.12500000001], [1.60240488E12, 31120.315789473683], [1.6024059E12, 29528.6], [1.6024062E12, 24308.479999999996], [1.60240578E12, 30393.45], [1.60240608E12, 29799.8], [1.60240518E12, 23262.96296296297], [1.60240548E12, 22387.08]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60240638E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19672.260869565223, "minX": 1.6024044E12, "maxY": 40651.25, "series": [{"data": [[1.60240506E12, 30968.599999999995], [1.60240446E12, 22790.518518518522], [1.60240536E12, 24544.399999999994], [1.60240638E12, 19672.260869565223], [1.60240476E12, 30973.84210526316], [1.60240626E12, 22102.333333333332], [1.60240464E12, 26557.75], [1.60240566E12, 37208.41176470588], [1.60240596E12, 30392.949999999997], [1.60240554E12, 26596.5652173913], [1.60240584E12, 30753.78947368421], [1.60240494E12, 29895.571428571428], [1.60240524E12, 20858.999999999996], [1.60240482E12, 31643.210526315786], [1.60240512E12, 28162.5], [1.60240614E12, 26339.541666666668], [1.60240452E12, 23706.190476190477], [1.60240602E12, 30875.55], [1.60240632E12, 32014.399999999998], [1.6024044E12, 20424.058823529413], [1.60240542E12, 23429.59259259259], [1.60240572E12, 30273.85], [1.6024053E12, 25757.782608695652], [1.6024056E12, 25639.285714285717], [1.6024047E12, 27268.80952380952], [1.602405E12, 30185.15789473684], [1.60240458E12, 40651.25], [1.60240488E12, 31118.947368421053], [1.6024059E12, 29527.1], [1.6024062E12, 24307.999999999996], [1.60240578E12, 30391.950000000004], [1.60240608E12, 29798.699999999997], [1.60240518E12, 23262.14814814815], [1.60240548E12, 22384.960000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60240638E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.08, "minX": 1.6024044E12, "maxY": 4.941176470588235, "series": [{"data": [[1.60240506E12, 0.6499999999999999], [1.60240446E12, 0.4814814814814815], [1.60240536E12, 0.56], [1.60240638E12, 0.34782608695652173], [1.60240476E12, 0.2631578947368421], [1.60240626E12, 0.45833333333333337], [1.60240464E12, 0.6249999999999999], [1.60240566E12, 0.29411764705882354], [1.60240596E12, 0.45], [1.60240554E12, 0.391304347826087], [1.60240584E12, 0.5789473684210527], [1.60240494E12, 0.7619047619047619], [1.60240524E12, 0.3333333333333334], [1.60240482E12, 0.6842105263157895], [1.60240512E12, 0.4090909090909091], [1.60240614E12, 0.45833333333333337], [1.60240452E12, 0.3333333333333333], [1.60240602E12, 0.65], [1.60240632E12, 0.6], [1.6024044E12, 4.941176470588235], [1.60240542E12, 0.4814814814814815], [1.60240572E12, 0.7000000000000001], [1.6024053E12, 0.43478260869565216], [1.6024056E12, 0.6666666666666665], [1.6024047E12, 0.7619047619047618], [1.602405E12, 0.5789473684210525], [1.60240458E12, 0.5625], [1.60240488E12, 0.7894736842105264], [1.6024059E12, 0.5], [1.6024062E12, 0.36], [1.60240578E12, 0.7999999999999999], [1.60240608E12, 0.65], [1.60240518E12, 0.44444444444444436], [1.60240548E12, 0.08]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60240638E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3428.0, "minX": 1.6024044E12, "maxY": 46364.0, "series": [{"data": [[1.60240506E12, 31408.0], [1.60240446E12, 28908.0], [1.60240536E12, 27089.0], [1.60240638E12, 30418.0], [1.60240476E12, 31271.0], [1.60240626E12, 26643.0], [1.60240464E12, 32229.0], [1.60240566E12, 44564.0], [1.60240596E12, 31232.0], [1.60240554E12, 29858.0], [1.60240584E12, 31155.0], [1.60240494E12, 30463.0], [1.60240524E12, 23283.0], [1.60240482E12, 32306.0], [1.60240512E12, 30909.0], [1.60240614E12, 29089.0], [1.60240452E12, 32445.0], [1.60240602E12, 31346.0], [1.60240632E12, 40476.0], [1.6024044E12, 27949.0], [1.60240542E12, 29988.0], [1.60240572E12, 31121.0], [1.6024053E12, 32733.0], [1.6024056E12, 28249.0], [1.6024047E12, 31275.0], [1.602405E12, 30768.0], [1.60240458E12, 46364.0], [1.60240488E12, 31786.0], [1.6024059E12, 30810.0], [1.6024062E12, 28613.0], [1.60240578E12, 31219.0], [1.60240608E12, 31382.0], [1.60240518E12, 27092.0], [1.60240548E12, 33077.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60240506E12, 29981.0], [1.60240446E12, 18529.0], [1.60240536E12, 19922.0], [1.60240638E12, 17072.0], [1.60240476E12, 30350.0], [1.60240626E12, 19271.0], [1.60240464E12, 23338.0], [1.60240566E12, 30451.0], [1.60240596E12, 29675.0], [1.60240554E12, 23186.0], [1.60240584E12, 30352.0], [1.60240494E12, 29308.0], [1.60240524E12, 18397.0], [1.60240482E12, 31051.0], [1.60240512E12, 25584.0], [1.60240614E12, 23317.0], [1.60240452E12, 19049.0], [1.60240602E12, 30409.0], [1.60240632E12, 28495.0], [1.6024044E12, 3428.0], [1.60240542E12, 18844.0], [1.60240572E12, 27193.0], [1.6024053E12, 18574.0], [1.6024056E12, 23405.0], [1.6024047E12, 24156.0], [1.602405E12, 29344.0], [1.60240458E12, 33065.0], [1.60240488E12, 30720.0], [1.6024059E12, 28387.0], [1.6024062E12, 21149.0], [1.60240578E12, 29729.0], [1.60240608E12, 27050.0], [1.60240518E12, 18414.0], [1.60240548E12, 17699.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60240506E12, 29981.0], [1.60240446E12, 18529.0], [1.60240536E12, 19922.0], [1.60240638E12, 17072.0], [1.60240476E12, 30350.0], [1.60240626E12, 19271.0], [1.60240464E12, 23338.0], [1.60240566E12, 30451.0], [1.60240596E12, 29675.0], [1.60240554E12, 23186.0], [1.60240584E12, 30352.0], [1.60240494E12, 29308.0], [1.60240524E12, 18397.0], [1.60240482E12, 31051.0], [1.60240512E12, 25584.0], [1.60240614E12, 23317.0], [1.60240452E12, 19049.0], [1.60240602E12, 30409.0], [1.60240632E12, 28495.0], [1.6024044E12, 3428.0], [1.60240542E12, 18844.0], [1.60240572E12, 27193.0], [1.6024053E12, 18574.0], [1.6024056E12, 23405.0], [1.6024047E12, 24156.0], [1.602405E12, 29344.0], [1.60240458E12, 33065.0], [1.60240488E12, 30720.0], [1.6024059E12, 28387.0], [1.6024062E12, 21149.0], [1.60240578E12, 29729.0], [1.60240608E12, 27050.0], [1.60240518E12, 18414.0], [1.60240548E12, 17699.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60240506E12, 29981.0], [1.60240446E12, 18529.0], [1.60240536E12, 19922.0], [1.60240638E12, 17072.0], [1.60240476E12, 30350.0], [1.60240626E12, 19271.0], [1.60240464E12, 23338.0], [1.60240566E12, 30451.0], [1.60240596E12, 29675.0], [1.60240554E12, 23186.0], [1.60240584E12, 30352.0], [1.60240494E12, 29308.0], [1.60240524E12, 18397.0], [1.60240482E12, 31051.0], [1.60240512E12, 25584.0], [1.60240614E12, 23317.0], [1.60240452E12, 19049.0], [1.60240602E12, 30409.0], [1.60240632E12, 28495.0], [1.6024044E12, 3428.0], [1.60240542E12, 18844.0], [1.60240572E12, 27193.0], [1.6024053E12, 18574.0], [1.6024056E12, 23405.0], [1.6024047E12, 24156.0], [1.602405E12, 29344.0], [1.60240458E12, 33065.0], [1.60240488E12, 30720.0], [1.6024059E12, 28387.0], [1.6024062E12, 21149.0], [1.60240578E12, 29729.0], [1.60240608E12, 27050.0], [1.60240518E12, 18414.0], [1.60240548E12, 17699.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60240506E12, 29981.0], [1.60240446E12, 18529.0], [1.60240536E12, 19922.0], [1.60240638E12, 17072.0], [1.60240476E12, 30350.0], [1.60240626E12, 19271.0], [1.60240464E12, 23338.0], [1.60240566E12, 30451.0], [1.60240596E12, 29675.0], [1.60240554E12, 23186.0], [1.60240584E12, 30352.0], [1.60240494E12, 29308.0], [1.60240524E12, 18397.0], [1.60240482E12, 31051.0], [1.60240512E12, 25584.0], [1.60240614E12, 23317.0], [1.60240452E12, 19049.0], [1.60240602E12, 30409.0], [1.60240632E12, 28495.0], [1.6024044E12, 3428.0], [1.60240542E12, 18844.0], [1.60240572E12, 27193.0], [1.6024053E12, 18574.0], [1.6024056E12, 23405.0], [1.6024047E12, 24156.0], [1.602405E12, 29344.0], [1.60240458E12, 33065.0], [1.60240488E12, 30720.0], [1.6024059E12, 28387.0], [1.6024062E12, 21149.0], [1.60240578E12, 29729.0], [1.60240608E12, 27050.0], [1.60240518E12, 18414.0], [1.60240548E12, 17699.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60240506E12, 31068.5], [1.60240446E12, 21410.0], [1.60240536E12, 25721.0], [1.60240638E12, 17628.0], [1.60240476E12, 31093.0], [1.60240626E12, 22285.5], [1.60240464E12, 25973.0], [1.60240566E12, 36708.0], [1.60240596E12, 30356.5], [1.60240554E12, 26982.0], [1.60240584E12, 30725.0], [1.60240494E12, 29951.0], [1.60240524E12, 20218.0], [1.60240482E12, 31497.0], [1.60240512E12, 27797.5], [1.60240614E12, 26543.5], [1.60240452E12, 23440.0], [1.60240602E12, 30871.5], [1.60240632E12, 30251.5], [1.6024044E12, 25276.0], [1.60240542E12, 21273.0], [1.60240572E12, 30719.0], [1.6024053E12, 26536.0], [1.6024056E12, 25738.0], [1.6024047E12, 27402.0], [1.602405E12, 30294.0], [1.60240458E12, 42251.0], [1.60240488E12, 31165.0], [1.6024059E12, 29236.0], [1.6024062E12, 24344.0], [1.60240578E12, 30309.5], [1.60240608E12, 29989.5], [1.60240518E12, 24335.0], [1.60240548E12, 18503.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60240638E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28068.0, "minX": 1.0, "maxY": 28068.0, "series": [{"data": [[1.0, 28068.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28067.0, "minX": 1.0, "maxY": 28067.0, "series": [{"data": [[1.0, 28067.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.6024044E12, "maxY": 0.45, "series": [{"data": [[1.60240506E12, 0.3333333333333333], [1.60240446E12, 0.45], [1.60240536E12, 0.4166666666666667], [1.60240638E12, 0.21666666666666667], [1.60240476E12, 0.31666666666666665], [1.60240626E12, 0.4], [1.60240464E12, 0.4], [1.60240566E12, 0.2833333333333333], [1.60240596E12, 0.3333333333333333], [1.60240554E12, 0.38333333333333336], [1.60240584E12, 0.31666666666666665], [1.60240494E12, 0.35], [1.60240524E12, 0.45], [1.60240482E12, 0.31666666666666665], [1.60240512E12, 0.36666666666666664], [1.60240614E12, 0.4], [1.60240452E12, 0.35], [1.60240602E12, 0.3333333333333333], [1.60240632E12, 0.3333333333333333], [1.6024044E12, 0.45], [1.60240542E12, 0.45], [1.60240572E12, 0.3333333333333333], [1.6024053E12, 0.38333333333333336], [1.6024056E12, 0.35], [1.6024047E12, 0.35], [1.602405E12, 0.31666666666666665], [1.60240458E12, 0.26666666666666666], [1.60240488E12, 0.31666666666666665], [1.6024059E12, 0.3333333333333333], [1.6024062E12, 0.4166666666666667], [1.60240578E12, 0.3333333333333333], [1.60240608E12, 0.3333333333333333], [1.60240518E12, 0.45], [1.60240548E12, 0.4166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60240638E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6024044E12, "maxY": 0.45, "series": [{"data": [[1.60240506E12, 0.3333333333333333], [1.60240446E12, 0.45], [1.60240536E12, 0.4166666666666667], [1.60240638E12, 0.38333333333333336], [1.60240476E12, 0.31666666666666665], [1.60240626E12, 0.4], [1.60240464E12, 0.4], [1.60240566E12, 0.2833333333333333], [1.60240596E12, 0.3333333333333333], [1.60240554E12, 0.38333333333333336], [1.60240584E12, 0.31666666666666665], [1.60240494E12, 0.35], [1.60240524E12, 0.45], [1.60240482E12, 0.31666666666666665], [1.60240512E12, 0.36666666666666664], [1.60240614E12, 0.4], [1.60240452E12, 0.35], [1.60240602E12, 0.3333333333333333], [1.60240632E12, 0.3333333333333333], [1.6024044E12, 0.2833333333333333], [1.60240542E12, 0.45], [1.60240572E12, 0.3333333333333333], [1.6024053E12, 0.38333333333333336], [1.6024056E12, 0.35], [1.6024047E12, 0.35], [1.602405E12, 0.31666666666666665], [1.60240458E12, 0.26666666666666666], [1.60240488E12, 0.31666666666666665], [1.6024059E12, 0.3333333333333333], [1.6024062E12, 0.4166666666666667], [1.60240578E12, 0.3333333333333333], [1.60240608E12, 0.3333333333333333], [1.60240518E12, 0.45], [1.60240548E12, 0.4166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60240638E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6024044E12, "maxY": 0.45, "series": [{"data": [[1.60240506E12, 0.3333333333333333], [1.60240446E12, 0.45], [1.60240536E12, 0.4166666666666667], [1.60240638E12, 0.38333333333333336], [1.60240476E12, 0.31666666666666665], [1.60240626E12, 0.4], [1.60240464E12, 0.4], [1.60240566E12, 0.2833333333333333], [1.60240596E12, 0.3333333333333333], [1.60240554E12, 0.38333333333333336], [1.60240584E12, 0.31666666666666665], [1.60240494E12, 0.35], [1.60240524E12, 0.45], [1.60240482E12, 0.31666666666666665], [1.60240512E12, 0.36666666666666664], [1.60240614E12, 0.4], [1.60240452E12, 0.35], [1.60240602E12, 0.3333333333333333], [1.60240632E12, 0.3333333333333333], [1.6024044E12, 0.2833333333333333], [1.60240542E12, 0.45], [1.60240572E12, 0.3333333333333333], [1.6024053E12, 0.38333333333333336], [1.6024056E12, 0.35], [1.6024047E12, 0.35], [1.602405E12, 0.31666666666666665], [1.60240458E12, 0.26666666666666666], [1.60240488E12, 0.31666666666666665], [1.6024059E12, 0.3333333333333333], [1.6024062E12, 0.4166666666666667], [1.60240578E12, 0.3333333333333333], [1.60240608E12, 0.3333333333333333], [1.60240518E12, 0.45], [1.60240548E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60240638E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6024044E12, "maxY": 0.45, "series": [{"data": [[1.60240506E12, 0.3333333333333333], [1.60240446E12, 0.45], [1.60240536E12, 0.4166666666666667], [1.60240638E12, 0.38333333333333336], [1.60240476E12, 0.31666666666666665], [1.60240626E12, 0.4], [1.60240464E12, 0.4], [1.60240566E12, 0.2833333333333333], [1.60240596E12, 0.3333333333333333], [1.60240554E12, 0.38333333333333336], [1.60240584E12, 0.31666666666666665], [1.60240494E12, 0.35], [1.60240524E12, 0.45], [1.60240482E12, 0.31666666666666665], [1.60240512E12, 0.36666666666666664], [1.60240614E12, 0.4], [1.60240452E12, 0.35], [1.60240602E12, 0.3333333333333333], [1.60240632E12, 0.3333333333333333], [1.6024044E12, 0.2833333333333333], [1.60240542E12, 0.45], [1.60240572E12, 0.3333333333333333], [1.6024053E12, 0.38333333333333336], [1.6024056E12, 0.35], [1.6024047E12, 0.35], [1.602405E12, 0.31666666666666665], [1.60240458E12, 0.26666666666666666], [1.60240488E12, 0.31666666666666665], [1.6024059E12, 0.3333333333333333], [1.6024062E12, 0.4166666666666667], [1.60240578E12, 0.3333333333333333], [1.60240608E12, 0.3333333333333333], [1.60240518E12, 0.45], [1.60240548E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60240638E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

