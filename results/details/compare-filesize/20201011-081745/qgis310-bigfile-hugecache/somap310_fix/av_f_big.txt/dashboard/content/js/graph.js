/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3202.0, "minX": 0.0, "maxY": 46007.0, "series": [{"data": [[0.0, 3202.0], [0.1, 3202.0], [0.2, 6106.0], [0.3, 8301.0], [0.4, 8301.0], [0.5, 11073.0], [0.6, 13676.0], [0.7, 16291.0], [0.8, 16291.0], [0.9, 16930.0], [1.0, 16990.0], [1.1, 17096.0], [1.2, 17096.0], [1.3, 17163.0], [1.4, 17235.0], [1.5, 17242.0], [1.6, 17242.0], [1.7, 17516.0], [1.8, 17555.0], [1.9, 17555.0], [2.0, 17564.0], [2.1, 17568.0], [2.2, 17654.0], [2.3, 17654.0], [2.4, 17665.0], [2.5, 17704.0], [2.6, 17747.0], [2.7, 17747.0], [2.8, 17761.0], [2.9, 17775.0], [3.0, 17788.0], [3.1, 17788.0], [3.2, 17791.0], [3.3, 17835.0], [3.4, 17835.0], [3.5, 17840.0], [3.6, 17878.0], [3.7, 17884.0], [3.8, 17884.0], [3.9, 17890.0], [4.0, 17940.0], [4.1, 17983.0], [4.2, 17983.0], [4.3, 17998.0], [4.4, 18005.0], [4.5, 18008.0], [4.6, 18008.0], [4.7, 18013.0], [4.8, 18015.0], [4.9, 18030.0], [5.0, 18030.0], [5.1, 18031.0], [5.2, 18033.0], [5.3, 18033.0], [5.4, 18039.0], [5.5, 18063.0], [5.6, 18094.0], [5.7, 18094.0], [5.8, 18104.0], [5.9, 18131.0], [6.0, 18169.0], [6.1, 18169.0], [6.2, 18211.0], [6.3, 18218.0], [6.4, 18223.0], [6.5, 18223.0], [6.6, 18244.0], [6.7, 18258.0], [6.8, 18258.0], [6.9, 18258.0], [7.0, 18284.0], [7.1, 18318.0], [7.2, 18318.0], [7.3, 18354.0], [7.4, 18357.0], [7.5, 18391.0], [7.6, 18391.0], [7.7, 18412.0], [7.8, 18433.0], [7.9, 18440.0], [8.0, 18440.0], [8.1, 18464.0], [8.2, 18516.0], [8.3, 18540.0], [8.4, 18540.0], [8.5, 18602.0], [8.6, 18611.0], [8.7, 18611.0], [8.8, 18779.0], [8.9, 18818.0], [9.0, 18854.0], [9.1, 18854.0], [9.2, 18894.0], [9.3, 18904.0], [9.4, 19032.0], [9.5, 19032.0], [9.6, 19208.0], [9.7, 19334.0], [9.8, 19383.0], [9.9, 19383.0], [10.0, 19406.0], [10.1, 19516.0], [10.2, 19516.0], [10.3, 19522.0], [10.4, 19528.0], [10.5, 19570.0], [10.6, 19570.0], [10.7, 19619.0], [10.8, 19645.0], [10.9, 19649.0], [11.0, 19649.0], [11.1, 19685.0], [11.2, 19706.0], [11.3, 19740.0], [11.4, 19740.0], [11.5, 19758.0], [11.6, 19815.0], [11.7, 19815.0], [11.8, 19894.0], [11.9, 19928.0], [12.0, 19934.0], [12.1, 19934.0], [12.2, 19964.0], [12.3, 19975.0], [12.4, 19996.0], [12.5, 19996.0], [12.6, 20017.0], [12.7, 20034.0], [12.8, 20035.0], [12.9, 20035.0], [13.0, 20058.0], [13.1, 20128.0], [13.2, 20256.0], [13.3, 20256.0], [13.4, 20263.0], [13.5, 20299.0], [13.6, 20299.0], [13.7, 20304.0], [13.8, 20316.0], [13.9, 20328.0], [14.0, 20328.0], [14.1, 20360.0], [14.2, 20412.0], [14.3, 20457.0], [14.4, 20457.0], [14.5, 20489.0], [14.6, 20516.0], [14.7, 20559.0], [14.8, 20559.0], [14.9, 20613.0], [15.0, 20641.0], [15.1, 20641.0], [15.2, 20679.0], [15.3, 20732.0], [15.4, 20752.0], [15.5, 20752.0], [15.6, 20788.0], [15.7, 20878.0], [15.8, 20901.0], [15.9, 20901.0], [16.0, 20914.0], [16.1, 20991.0], [16.2, 21049.0], [16.3, 21049.0], [16.4, 21065.0], [16.5, 21142.0], [16.6, 21164.0], [16.7, 21164.0], [16.8, 21235.0], [16.9, 21317.0], [17.0, 21317.0], [17.1, 21361.0], [17.2, 21539.0], [17.3, 21619.0], [17.4, 21619.0], [17.5, 22025.0], [17.6, 22114.0], [17.7, 22132.0], [17.8, 22132.0], [17.9, 22137.0], [18.0, 22175.0], [18.1, 22194.0], [18.2, 22194.0], [18.3, 22261.0], [18.4, 22309.0], [18.5, 22309.0], [18.6, 22331.0], [18.7, 22407.0], [18.8, 22458.0], [18.9, 22458.0], [19.0, 22506.0], [19.1, 22524.0], [19.2, 22534.0], [19.3, 22534.0], [19.4, 22588.0], [19.5, 22603.0], [19.6, 22650.0], [19.7, 22650.0], [19.8, 22704.0], [19.9, 22762.0], [20.0, 22787.0], [20.1, 22787.0], [20.2, 22798.0], [20.3, 22838.0], [20.4, 22838.0], [20.5, 22867.0], [20.6, 22879.0], [20.7, 22886.0], [20.8, 22886.0], [20.9, 22896.0], [21.0, 22957.0], [21.1, 22966.0], [21.2, 22966.0], [21.3, 23015.0], [21.4, 23026.0], [21.5, 23080.0], [21.6, 23080.0], [21.7, 23128.0], [21.8, 23129.0], [21.9, 23129.0], [22.0, 23145.0], [22.1, 23181.0], [22.2, 23187.0], [22.3, 23187.0], [22.4, 23255.0], [22.5, 23289.0], [22.6, 23418.0], [22.7, 23418.0], [22.8, 23441.0], [22.9, 23461.0], [23.0, 23471.0], [23.1, 23471.0], [23.2, 23480.0], [23.3, 23525.0], [23.4, 23525.0], [23.5, 23566.0], [23.6, 23586.0], [23.7, 23636.0], [23.8, 23636.0], [23.9, 23677.0], [24.0, 23711.0], [24.1, 23740.0], [24.2, 23740.0], [24.3, 23748.0], [24.4, 23799.0], [24.5, 23941.0], [24.6, 23941.0], [24.7, 24002.0], [24.8, 24004.0], [24.9, 24046.0], [25.0, 24046.0], [25.1, 24106.0], [25.2, 24111.0], [25.3, 24111.0], [25.4, 24122.0], [25.5, 24124.0], [25.6, 24126.0], [25.7, 24126.0], [25.8, 24130.0], [25.9, 24144.0], [26.0, 24150.0], [26.1, 24150.0], [26.2, 24246.0], [26.3, 24255.0], [26.4, 24277.0], [26.5, 24277.0], [26.6, 24306.0], [26.7, 24308.0], [26.8, 24308.0], [26.9, 24331.0], [27.0, 24340.0], [27.1, 24357.0], [27.2, 24357.0], [27.3, 24390.0], [27.4, 24403.0], [27.5, 24443.0], [27.6, 24443.0], [27.7, 24455.0], [27.8, 24467.0], [27.9, 24484.0], [28.0, 24484.0], [28.1, 24510.0], [28.2, 24512.0], [28.3, 24528.0], [28.4, 24528.0], [28.5, 24541.0], [28.6, 24611.0], [28.7, 24611.0], [28.8, 24612.0], [28.9, 24636.0], [29.0, 24637.0], [29.1, 24637.0], [29.2, 24645.0], [29.3, 24649.0], [29.4, 24656.0], [29.5, 24656.0], [29.6, 24669.0], [29.7, 24678.0], [29.8, 24687.0], [29.9, 24687.0], [30.0, 24719.0], [30.1, 24808.0], [30.2, 24808.0], [30.3, 24819.0], [30.4, 24830.0], [30.5, 24867.0], [30.6, 24867.0], [30.7, 24873.0], [30.8, 24877.0], [30.9, 24897.0], [31.0, 24897.0], [31.1, 24899.0], [31.2, 24910.0], [31.3, 24958.0], [31.4, 24958.0], [31.5, 24980.0], [31.6, 24994.0], [31.7, 24994.0], [31.8, 25010.0], [31.9, 25022.0], [32.0, 25055.0], [32.1, 25055.0], [32.2, 25068.0], [32.3, 25100.0], [32.4, 25201.0], [32.5, 25201.0], [32.6, 25203.0], [32.7, 25224.0], [32.8, 25226.0], [32.9, 25226.0], [33.0, 25253.0], [33.1, 25275.0], [33.2, 25328.0], [33.3, 25328.0], [33.4, 25368.0], [33.5, 25372.0], [33.6, 25372.0], [33.7, 25393.0], [33.8, 25403.0], [33.9, 25421.0], [34.0, 25421.0], [34.1, 25427.0], [34.2, 25443.0], [34.3, 25470.0], [34.4, 25470.0], [34.5, 25530.0], [34.6, 25544.0], [34.7, 25547.0], [34.8, 25547.0], [34.9, 25560.0], [35.0, 25578.0], [35.1, 25578.0], [35.2, 25599.0], [35.3, 25634.0], [35.4, 25645.0], [35.5, 25645.0], [35.6, 25650.0], [35.7, 25652.0], [35.8, 25660.0], [35.9, 25660.0], [36.0, 25697.0], [36.1, 25717.0], [36.2, 25721.0], [36.3, 25721.0], [36.4, 25732.0], [36.5, 25763.0], [36.6, 25770.0], [36.7, 25770.0], [36.8, 25777.0], [36.9, 25790.0], [37.0, 25790.0], [37.1, 25790.0], [37.2, 25803.0], [37.3, 25845.0], [37.4, 25845.0], [37.5, 25858.0], [37.6, 25866.0], [37.7, 25916.0], [37.8, 25916.0], [37.9, 25923.0], [38.0, 25946.0], [38.1, 25980.0], [38.2, 25980.0], [38.3, 25995.0], [38.4, 26000.0], [38.5, 26000.0], [38.6, 26053.0], [38.7, 26057.0], [38.8, 26064.0], [38.9, 26064.0], [39.0, 26065.0], [39.1, 26068.0], [39.2, 26077.0], [39.3, 26077.0], [39.4, 26078.0], [39.5, 26156.0], [39.6, 26165.0], [39.7, 26165.0], [39.8, 26176.0], [39.9, 26186.0], [40.0, 26206.0], [40.1, 26206.0], [40.2, 26217.0], [40.3, 26273.0], [40.4, 26273.0], [40.5, 26275.0], [40.6, 26279.0], [40.7, 26315.0], [40.8, 26315.0], [40.9, 26318.0], [41.0, 26318.0], [41.1, 26332.0], [41.2, 26332.0], [41.3, 26341.0], [41.4, 26354.0], [41.5, 26415.0], [41.6, 26415.0], [41.7, 26439.0], [41.8, 26445.0], [41.9, 26445.0], [42.0, 26447.0], [42.1, 26456.0], [42.2, 26481.0], [42.3, 26481.0], [42.4, 26493.0], [42.5, 26541.0], [42.6, 26545.0], [42.7, 26545.0], [42.8, 26563.0], [42.9, 26585.0], [43.0, 26589.0], [43.1, 26589.0], [43.2, 26652.0], [43.3, 26691.0], [43.4, 26691.0], [43.5, 26704.0], [43.6, 26762.0], [43.7, 26797.0], [43.8, 26797.0], [43.9, 26810.0], [44.0, 26858.0], [44.1, 26933.0], [44.2, 26933.0], [44.3, 26937.0], [44.4, 26949.0], [44.5, 27002.0], [44.6, 27002.0], [44.7, 27055.0], [44.8, 27065.0], [44.9, 27103.0], [45.0, 27103.0], [45.1, 27132.0], [45.2, 27188.0], [45.3, 27188.0], [45.4, 27189.0], [45.5, 27223.0], [45.6, 27228.0], [45.7, 27228.0], [45.8, 27271.0], [45.9, 27283.0], [46.0, 27294.0], [46.1, 27294.0], [46.2, 27302.0], [46.3, 27327.0], [46.4, 27336.0], [46.5, 27336.0], [46.6, 27341.0], [46.7, 27345.0], [46.8, 27345.0], [46.9, 27353.0], [47.0, 27353.0], [47.1, 27406.0], [47.2, 27406.0], [47.3, 27441.0], [47.4, 27450.0], [47.5, 27495.0], [47.6, 27495.0], [47.7, 27495.0], [47.8, 27510.0], [47.9, 27646.0], [48.0, 27646.0], [48.1, 27716.0], [48.2, 27727.0], [48.3, 27743.0], [48.4, 27743.0], [48.5, 27748.0], [48.6, 27777.0], [48.7, 27777.0], [48.8, 27780.0], [48.9, 27804.0], [49.0, 27834.0], [49.1, 27834.0], [49.2, 27911.0], [49.3, 27913.0], [49.4, 27921.0], [49.5, 27921.0], [49.6, 27952.0], [49.7, 27998.0], [49.8, 28013.0], [49.9, 28013.0], [50.0, 28016.0], [50.1, 28045.0], [50.2, 28045.0], [50.3, 28076.0], [50.4, 28080.0], [50.5, 28131.0], [50.6, 28131.0], [50.7, 28170.0], [50.8, 28171.0], [50.9, 28232.0], [51.0, 28232.0], [51.1, 28236.0], [51.2, 28291.0], [51.3, 28300.0], [51.4, 28300.0], [51.5, 28315.0], [51.6, 28319.0], [51.7, 28319.0], [51.8, 28321.0], [51.9, 28375.0], [52.0, 28402.0], [52.1, 28402.0], [52.2, 28417.0], [52.3, 28444.0], [52.4, 28515.0], [52.5, 28515.0], [52.6, 28541.0], [52.7, 28548.0], [52.8, 28564.0], [52.9, 28564.0], [53.0, 28569.0], [53.1, 28636.0], [53.2, 28806.0], [53.3, 28806.0], [53.4, 28819.0], [53.5, 28878.0], [53.6, 28878.0], [53.7, 28884.0], [53.8, 28905.0], [53.9, 28913.0], [54.0, 28913.0], [54.1, 28956.0], [54.2, 28997.0], [54.3, 29009.0], [54.4, 29009.0], [54.5, 29025.0], [54.6, 29029.0], [54.7, 29038.0], [54.8, 29038.0], [54.9, 29043.0], [55.0, 29046.0], [55.1, 29046.0], [55.2, 29057.0], [55.3, 29057.0], [55.4, 29067.0], [55.5, 29067.0], [55.6, 29067.0], [55.7, 29092.0], [55.8, 29093.0], [55.9, 29093.0], [56.0, 29095.0], [56.1, 29105.0], [56.2, 29112.0], [56.3, 29112.0], [56.4, 29137.0], [56.5, 29145.0], [56.6, 29156.0], [56.7, 29156.0], [56.8, 29168.0], [56.9, 29182.0], [57.0, 29182.0], [57.1, 29185.0], [57.2, 29217.0], [57.3, 29267.0], [57.4, 29267.0], [57.5, 29285.0], [57.6, 29286.0], [57.7, 29288.0], [57.8, 29288.0], [57.9, 29322.0], [58.0, 29331.0], [58.1, 29335.0], [58.2, 29335.0], [58.3, 29344.0], [58.4, 29393.0], [58.5, 29393.0], [58.6, 29425.0], [58.7, 29426.0], [58.8, 29438.0], [58.9, 29438.0], [59.0, 29457.0], [59.1, 29461.0], [59.2, 29539.0], [59.3, 29539.0], [59.4, 29565.0], [59.5, 29570.0], [59.6, 29596.0], [59.7, 29596.0], [59.8, 29609.0], [59.9, 29699.0], [60.0, 29724.0], [60.1, 29724.0], [60.2, 29731.0], [60.3, 29753.0], [60.4, 29753.0], [60.5, 29774.0], [60.6, 29806.0], [60.7, 29820.0], [60.8, 29820.0], [60.9, 29849.0], [61.0, 29878.0], [61.1, 29883.0], [61.2, 29883.0], [61.3, 29884.0], [61.4, 29895.0], [61.5, 29898.0], [61.6, 29898.0], [61.7, 29904.0], [61.8, 29948.0], [61.9, 29948.0], [62.0, 29978.0], [62.1, 29989.0], [62.2, 29991.0], [62.3, 29991.0], [62.4, 30008.0], [62.5, 30029.0], [62.6, 30040.0], [62.7, 30040.0], [62.8, 30056.0], [62.9, 30064.0], [63.0, 30066.0], [63.1, 30066.0], [63.2, 30087.0], [63.3, 30110.0], [63.4, 30110.0], [63.5, 30110.0], [63.6, 30112.0], [63.7, 30120.0], [63.8, 30120.0], [63.9, 30121.0], [64.0, 30144.0], [64.1, 30148.0], [64.2, 30148.0], [64.3, 30154.0], [64.4, 30154.0], [64.5, 30167.0], [64.6, 30167.0], [64.7, 30172.0], [64.8, 30177.0], [64.9, 30188.0], [65.0, 30188.0], [65.1, 30196.0], [65.2, 30202.0], [65.3, 30202.0], [65.4, 30205.0], [65.5, 30206.0], [65.6, 30209.0], [65.7, 30209.0], [65.8, 30217.0], [65.9, 30224.0], [66.0, 30232.0], [66.1, 30232.0], [66.2, 30240.0], [66.3, 30242.0], [66.4, 30248.0], [66.5, 30248.0], [66.6, 30259.0], [66.7, 30261.0], [66.8, 30261.0], [66.9, 30264.0], [67.0, 30267.0], [67.1, 30268.0], [67.2, 30268.0], [67.3, 30269.0], [67.4, 30273.0], [67.5, 30275.0], [67.6, 30275.0], [67.7, 30279.0], [67.8, 30283.0], [67.9, 30285.0], [68.0, 30285.0], [68.1, 30287.0], [68.2, 30293.0], [68.3, 30295.0], [68.4, 30295.0], [68.5, 30296.0], [68.6, 30298.0], [68.7, 30298.0], [68.8, 30299.0], [68.9, 30303.0], [69.0, 30304.0], [69.1, 30304.0], [69.2, 30307.0], [69.3, 30311.0], [69.4, 30319.0], [69.5, 30319.0], [69.6, 30321.0], [69.7, 30322.0], [69.8, 30322.0], [69.9, 30322.0], [70.0, 30324.0], [70.1, 30325.0], [70.2, 30325.0], [70.3, 30345.0], [70.4, 30351.0], [70.5, 30358.0], [70.6, 30358.0], [70.7, 30360.0], [70.8, 30361.0], [70.9, 30365.0], [71.0, 30365.0], [71.1, 30365.0], [71.2, 30371.0], [71.3, 30376.0], [71.4, 30376.0], [71.5, 30376.0], [71.6, 30378.0], [71.7, 30378.0], [71.8, 30380.0], [71.9, 30383.0], [72.0, 30385.0], [72.1, 30385.0], [72.2, 30385.0], [72.3, 30392.0], [72.4, 30392.0], [72.5, 30392.0], [72.6, 30394.0], [72.7, 30395.0], [72.8, 30396.0], [72.9, 30396.0], [73.0, 30398.0], [73.1, 30400.0], [73.2, 30407.0], [73.3, 30407.0], [73.4, 30409.0], [73.5, 30418.0], [73.6, 30418.0], [73.7, 30420.0], [73.8, 30422.0], [73.9, 30427.0], [74.0, 30427.0], [74.1, 30429.0], [74.2, 30431.0], [74.3, 30439.0], [74.4, 30439.0], [74.5, 30441.0], [74.6, 30453.0], [74.7, 30457.0], [74.8, 30457.0], [74.9, 30465.0], [75.0, 30467.0], [75.1, 30467.0], [75.2, 30468.0], [75.3, 30471.0], [75.4, 30477.0], [75.5, 30477.0], [75.6, 30479.0], [75.7, 30481.0], [75.8, 30486.0], [75.9, 30486.0], [76.0, 30496.0], [76.1, 30505.0], [76.2, 30517.0], [76.3, 30517.0], [76.4, 30517.0], [76.5, 30519.0], [76.6, 30524.0], [76.7, 30524.0], [76.8, 30526.0], [76.9, 30548.0], [77.0, 30548.0], [77.1, 30550.0], [77.2, 30556.0], [77.3, 30569.0], [77.4, 30569.0], [77.5, 30571.0], [77.6, 30576.0], [77.7, 30576.0], [77.8, 30576.0], [77.9, 30578.0], [78.0, 30591.0], [78.1, 30596.0], [78.2, 30596.0], [78.3, 30597.0], [78.4, 30604.0], [78.5, 30604.0], [78.6, 30613.0], [78.7, 30614.0], [78.8, 30626.0], [78.9, 30626.0], [79.0, 30628.0], [79.1, 30632.0], [79.2, 30641.0], [79.3, 30641.0], [79.4, 30647.0], [79.5, 30647.0], [79.6, 30653.0], [79.7, 30653.0], [79.8, 30656.0], [79.9, 30661.0], [80.0, 30673.0], [80.1, 30673.0], [80.2, 30675.0], [80.3, 30681.0], [80.4, 30681.0], [80.5, 30681.0], [80.6, 30688.0], [80.7, 30688.0], [80.8, 30688.0], [80.9, 30696.0], [81.0, 30701.0], [81.1, 30702.0], [81.2, 30702.0], [81.3, 30703.0], [81.4, 30707.0], [81.5, 30741.0], [81.6, 30741.0], [81.7, 30744.0], [81.8, 30755.0], [81.9, 30755.0], [82.0, 30761.0], [82.1, 30764.0], [82.2, 30776.0], [82.3, 30776.0], [82.4, 30777.0], [82.5, 30816.0], [82.6, 30816.0], [82.7, 30816.0], [82.8, 30824.0], [82.9, 30826.0], [83.0, 30847.0], [83.1, 30847.0], [83.2, 30854.0], [83.3, 30860.0], [83.4, 30860.0], [83.5, 30866.0], [83.6, 30877.0], [83.7, 30894.0], [83.8, 30894.0], [83.9, 30903.0], [84.0, 30903.0], [84.1, 30917.0], [84.2, 30917.0], [84.3, 30931.0], [84.4, 30932.0], [84.5, 30936.0], [84.6, 30936.0], [84.7, 30939.0], [84.8, 30950.0], [84.9, 30951.0], [85.0, 30951.0], [85.1, 30953.0], [85.2, 30963.0], [85.3, 30963.0], [85.4, 30972.0], [85.5, 30972.0], [85.6, 30974.0], [85.7, 30974.0], [85.8, 30974.0], [85.9, 31002.0], [86.0, 31086.0], [86.1, 31086.0], [86.2, 31091.0], [86.3, 31104.0], [86.4, 31111.0], [86.5, 31111.0], [86.6, 31131.0], [86.7, 31137.0], [86.8, 31137.0], [86.9, 31145.0], [87.0, 31150.0], [87.1, 31167.0], [87.2, 31167.0], [87.3, 31175.0], [87.4, 31200.0], [87.5, 31201.0], [87.6, 31201.0], [87.7, 31211.0], [87.8, 31221.0], [87.9, 31222.0], [88.0, 31222.0], [88.1, 31227.0], [88.2, 31240.0], [88.3, 31241.0], [88.4, 31241.0], [88.5, 31258.0], [88.6, 31271.0], [88.7, 31271.0], [88.8, 31289.0], [88.9, 31300.0], [89.0, 31313.0], [89.1, 31313.0], [89.2, 31339.0], [89.3, 31346.0], [89.4, 31347.0], [89.5, 31347.0], [89.6, 31350.0], [89.7, 31352.0], [89.8, 31358.0], [89.9, 31358.0], [90.0, 31367.0], [90.1, 31380.0], [90.2, 31380.0], [90.3, 31384.0], [90.4, 31396.0], [90.5, 31405.0], [90.6, 31405.0], [90.7, 31406.0], [90.8, 31409.0], [90.9, 31418.0], [91.0, 31418.0], [91.1, 31420.0], [91.2, 31428.0], [91.3, 31440.0], [91.4, 31440.0], [91.5, 31467.0], [91.6, 31470.0], [91.7, 31470.0], [91.8, 31503.0], [91.9, 31522.0], [92.0, 31552.0], [92.1, 31552.0], [92.2, 31568.0], [92.3, 31571.0], [92.4, 31625.0], [92.5, 31625.0], [92.6, 31657.0], [92.7, 31845.0], [92.8, 31867.0], [92.9, 31867.0], [93.0, 31879.0], [93.1, 31938.0], [93.2, 32085.0], [93.3, 32085.0], [93.4, 32122.0], [93.5, 32155.0], [93.6, 32155.0], [93.7, 32157.0], [93.8, 32173.0], [93.9, 32203.0], [94.0, 32203.0], [94.1, 32341.0], [94.2, 32404.0], [94.3, 32421.0], [94.4, 32421.0], [94.5, 32504.0], [94.6, 32547.0], [94.7, 32748.0], [94.8, 32748.0], [94.9, 32808.0], [95.0, 32845.0], [95.1, 32845.0], [95.2, 32974.0], [95.3, 33271.0], [95.4, 33618.0], [95.5, 33618.0], [95.6, 34137.0], [95.7, 34153.0], [95.8, 34404.0], [95.9, 34404.0], [96.0, 34747.0], [96.1, 34976.0], [96.2, 35151.0], [96.3, 35151.0], [96.4, 35439.0], [96.5, 35835.0], [96.6, 36053.0], [96.7, 36053.0], [96.8, 36679.0], [96.9, 36801.0], [97.0, 36801.0], [97.1, 36996.0], [97.2, 37581.0], [97.3, 38131.0], [97.4, 38131.0], [97.5, 38603.0], [97.6, 39337.0], [97.7, 39465.0], [97.8, 39465.0], [97.9, 40170.0], [98.0, 40344.0], [98.1, 40549.0], [98.2, 40549.0], [98.3, 42275.0], [98.4, 42555.0], [98.5, 42555.0], [98.6, 42728.0], [98.7, 43489.0], [98.8, 43621.0], [98.9, 43621.0], [99.0, 43950.0], [99.1, 44354.0], [99.2, 44666.0], [99.3, 44666.0], [99.4, 44963.0], [99.5, 45388.0], [99.6, 45660.0], [99.7, 45660.0], [99.8, 45692.0], [99.9, 46007.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 31.0, "series": [{"data": [[34700.0, 1.0], [34100.0, 2.0], [32900.0, 1.0], [35100.0, 1.0], [34900.0, 1.0], [37500.0, 1.0], [38100.0, 1.0], [36900.0, 1.0], [40300.0, 1.0], [39300.0, 1.0], [40500.0, 1.0], [40100.0, 1.0], [42500.0, 1.0], [42700.0, 1.0], [44300.0, 1.0], [43900.0, 1.0], [44900.0, 1.0], [45300.0, 1.0], [3200.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11000.0, 1.0], [13600.0, 1.0], [16200.0, 1.0], [17200.0, 2.0], [16900.0, 2.0], [17100.0, 1.0], [17000.0, 1.0], [17600.0, 2.0], [18300.0, 4.0], [18400.0, 4.0], [17800.0, 5.0], [18100.0, 3.0], [18200.0, 7.0], [17700.0, 6.0], [18000.0, 10.0], [17900.0, 3.0], [17500.0, 4.0], [18500.0, 2.0], [19400.0, 1.0], [18800.0, 3.0], [18600.0, 2.0], [18900.0, 1.0], [19200.0, 1.0], [19300.0, 2.0], [19000.0, 1.0], [18700.0, 1.0], [20300.0, 4.0], [20000.0, 4.0], [20400.0, 3.0], [19600.0, 4.0], [19500.0, 4.0], [19700.0, 3.0], [19900.0, 5.0], [20100.0, 1.0], [19800.0, 2.0], [20200.0, 3.0], [20700.0, 3.0], [21000.0, 2.0], [21100.0, 2.0], [20900.0, 3.0], [20600.0, 3.0], [20500.0, 2.0], [20800.0, 1.0], [21200.0, 1.0], [21500.0, 1.0], [21300.0, 2.0], [22100.0, 5.0], [22000.0, 1.0], [22400.0, 2.0], [22300.0, 2.0], [21600.0, 1.0], [22500.0, 4.0], [22200.0, 1.0], [22700.0, 4.0], [23100.0, 5.0], [23000.0, 3.0], [22800.0, 5.0], [22600.0, 2.0], [23400.0, 5.0], [23500.0, 3.0], [22900.0, 2.0], [23200.0, 2.0], [24100.0, 8.0], [24300.0, 6.0], [23600.0, 2.0], [24400.0, 5.0], [24000.0, 3.0], [24500.0, 4.0], [24200.0, 3.0], [23900.0, 1.0], [23700.0, 4.0], [24800.0, 8.0], [25400.0, 5.0], [24600.0, 10.0], [25100.0, 1.0], [25000.0, 4.0], [25500.0, 6.0], [25300.0, 4.0], [25200.0, 6.0], [24700.0, 1.0], [24900.0, 4.0], [25700.0, 8.0], [26500.0, 5.0], [26200.0, 5.0], [26600.0, 2.0], [26000.0, 8.0], [26400.0, 7.0], [25800.0, 4.0], [26300.0, 6.0], [26100.0, 4.0], [25900.0, 5.0], [25600.0, 6.0], [27400.0, 5.0], [26700.0, 3.0], [27200.0, 5.0], [27100.0, 4.0], [26900.0, 3.0], [27300.0, 7.0], [27500.0, 1.0], [27600.0, 1.0], [26800.0, 2.0], [27000.0, 3.0], [27900.0, 5.0], [27700.0, 6.0], [28000.0, 5.0], [28200.0, 3.0], [28300.0, 5.0], [28100.0, 3.0], [28400.0, 3.0], [28500.0, 5.0], [28600.0, 1.0], [27800.0, 2.0], [29500.0, 4.0], [29100.0, 8.0], [29300.0, 5.0], [29000.0, 13.0], [29200.0, 5.0], [29400.0, 5.0], [28800.0, 4.0], [28900.0, 4.0], [29600.0, 2.0], [29700.0, 4.0], [30000.0, 7.0], [30400.0, 22.0], [30600.0, 19.0], [30500.0, 17.0], [29900.0, 5.0], [29800.0, 8.0], [30300.0, 31.0], [30700.0, 11.0], [30200.0, 27.0], [30100.0, 14.0], [31500.0, 5.0], [31600.0, 2.0], [30900.0, 15.0], [31300.0, 12.0], [30800.0, 10.0], [31000.0, 3.0], [31400.0, 9.0], [31100.0, 8.0], [31200.0, 11.0], [32300.0, 1.0], [32500.0, 2.0], [32200.0, 1.0], [32100.0, 4.0], [32400.0, 2.0], [32700.0, 1.0], [32000.0, 1.0], [31900.0, 1.0], [31800.0, 3.0], [33200.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [33600.0, 1.0], [36000.0, 1.0], [36800.0, 1.0], [35400.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [38600.0, 1.0], [39400.0, 1.0], [42200.0, 1.0], [43400.0, 1.0], [43600.0, 1.0], [44600.0, 1.0], [46000.0, 1.0], [45600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.5, "minX": 1.60240878E12, "maxY": 10.0, "series": [{"data": [[1.60240998E12, 10.0], [1.60241028E12, 10.0], [1.60241058E12, 10.0], [1.60240896E12, 10.0], [1.6024107E12, 10.0], [1.60240878E12, 10.0], [1.60240908E12, 10.0], [1.60240938E12, 10.0], [1.60240968E12, 10.0], [1.6024095E12, 10.0], [1.6024098E12, 10.0], [1.6024101E12, 10.0], [1.6024104E12, 10.0], [1.60241022E12, 10.0], [1.60241052E12, 10.0], [1.6024089E12, 10.0], [1.6024092E12, 10.0], [1.60241082E12, 4.5], [1.60240902E12, 10.0], [1.60240932E12, 10.0], [1.60240962E12, 10.0], [1.60240992E12, 10.0], [1.60240974E12, 10.0], [1.60241004E12, 10.0], [1.60241034E12, 10.0], [1.60241064E12, 10.0], [1.60241046E12, 10.0], [1.60241076E12, 9.961538461538462], [1.60240884E12, 10.0], [1.60240914E12, 10.0], [1.60240944E12, 10.0], [1.60240926E12, 10.0], [1.60240956E12, 10.0], [1.60240986E12, 10.0], [1.60241016E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241082E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17516.0, "minX": 1.0, "maxY": 27193.2947658402, "series": [{"data": [[8.0, 17568.0], [4.0, 18015.0], [2.0, 18094.0], [1.0, 18354.0], [9.0, 17516.0], [10.0, 27193.2947658402], [5.0, 18063.0], [6.0, 18039.0], [3.0, 18008.0], [7.0, 17747.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 27079.912925170047]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.633333333333333, "minX": 1.60240878E12, "maxY": 204267.93333333332, "series": [{"data": [[1.60240998E12, 76225.76666666666], [1.60241028E12, 51312.45], [1.60241058E12, 28296.733333333334], [1.60240896E12, 143298.88333333333], [1.6024107E12, 156794.31666666668], [1.60240878E12, 30397.316666666666], [1.60240908E12, 57320.36666666667], [1.60240938E12, 54193.5], [1.60240968E12, 79500.35], [1.6024095E12, 42448.9], [1.6024098E12, 189789.26666666666], [1.6024101E12, 42951.78333333333], [1.6024104E12, 46590.433333333334], [1.60241022E12, 48848.35], [1.60241052E12, 35384.183333333334], [1.6024089E12, 65432.3], [1.6024092E12, 45682.76666666667], [1.60241082E12, 3472.3333333333335], [1.60240902E12, 54918.48333333333], [1.60240932E12, 45768.98333333333], [1.60240962E12, 168294.93333333332], [1.60240992E12, 83761.03333333334], [1.60240974E12, 91418.51666666666], [1.60241004E12, 31403.983333333334], [1.60241034E12, 44145.96666666667], [1.60241064E12, 33041.13333333333], [1.60241046E12, 40006.6], [1.60241076E12, 68803.61666666667], [1.60240884E12, 204267.93333333332], [1.60240914E12, 46840.8], [1.60240944E12, 41822.76666666667], [1.60240926E12, 45921.96666666667], [1.60240956E12, 25203.7], [1.60240986E12, 52102.316666666666], [1.60241016E12, 47773.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60240998E12, 182.93333333333334], [1.60241028E12, 154.05], [1.60241058E12, 182.43333333333334], [1.60240896E12, 121.36666666666666], [1.6024107E12, 145.51666666666668], [1.60240878E12, 14.633333333333333], [1.60240908E12, 161.96666666666667], [1.60240938E12, 146.38333333333333], [1.60240968E12, 157.75], [1.6024095E12, 153.35], [1.6024098E12, 175.86666666666667], [1.6024101E12, 153.38333333333333], [1.6024104E12, 138.83333333333334], [1.60241022E12, 146.13333333333333], [1.60241052E12, 160.48333333333332], [1.6024089E12, 207.21666666666667], [1.6024092E12, 146.13333333333333], [1.60241082E12, 53.4], [1.60240902E12, 146.15], [1.60240932E12, 146.11666666666667], [1.60240962E12, 231.83333333333334], [1.60240992E12, 157.81666666666666], [1.60240974E12, 187.9], [1.60241004E12, 110.53333333333333], [1.60241034E12, 146.43333333333334], [1.60241064E12, 179.9], [1.60241046E12, 138.68333333333334], [1.60241076E12, 184.13333333333333], [1.60240884E12, 169.21666666666667], [1.60240914E12, 153.41666666666666], [1.60240944E12, 138.75], [1.60240926E12, 138.8], [1.60240956E12, 160.6], [1.60240986E12, 208.31666666666666], [1.60241016E12, 138.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241082E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4654.0, "minX": 1.60240878E12, "maxY": 35024.45, "series": [{"data": [[1.60240998E12, 26245.92], [1.60241028E12, 29628.714285714286], [1.60241058E12, 25494.88], [1.60240896E12, 30560.999999999996], [1.6024107E12, 25447.7], [1.60240878E12, 4654.0], [1.60240908E12, 25806.31818181818], [1.60240938E12, 29721.450000000004], [1.60240968E12, 25924.954545454544], [1.6024095E12, 30292.333333333332], [1.6024098E12, 25497.416666666668], [1.6024101E12, 33520.19047619047], [1.6024104E12, 30567.263157894737], [1.60241022E12, 30615.449999999997], [1.60241052E12, 28064.727272727276], [1.6024089E12, 20352.137931034486], [1.6024092E12, 30650.550000000003], [1.60241082E12, 17986.0], [1.60240902E12, 35024.45], [1.60240932E12, 30505.800000000003], [1.60240962E12, 20847.75], [1.60240992E12, 27055.38095238095], [1.60240974E12, 22257.259259259263], [1.60241004E12, 30627.2], [1.60241034E12, 29758.1], [1.60241064E12, 24500.480000000003], [1.60241046E12, 31604.473684210527], [1.60241076E12, 26285.846153846152], [1.60240884E12, 23543.73913043478], [1.60240914E12, 28903.857142857145], [1.60240944E12, 30493.684210526317], [1.60240926E12, 31005.842105263153], [1.60240956E12, 26363.272727272728], [1.60240986E12, 18839.06666666667], [1.60241016E12, 30455.36842105263]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241082E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4645.0, "minX": 1.60240878E12, "maxY": 35023.149999999994, "series": [{"data": [[1.60240998E12, 26244.480000000003], [1.60241028E12, 29627.333333333336], [1.60241058E12, 25493.24], [1.60240896E12, 30556.375], [1.6024107E12, 25442.699999999997], [1.60240878E12, 4645.0], [1.60240908E12, 25804.954545454544], [1.60240938E12, 29720.000000000004], [1.60240968E12, 25922.18181818182], [1.6024095E12, 30291.14285714286], [1.6024098E12, 25493.333333333332], [1.6024101E12, 33519.2380952381], [1.6024104E12, 30566.21052631579], [1.60241022E12, 30614.15], [1.60241052E12, 28063.727272727272], [1.6024089E12, 20350.551724137928], [1.6024092E12, 30649.25], [1.60241082E12, 17984.375], [1.60240902E12, 35023.149999999994], [1.60240932E12, 30504.8], [1.60240962E12, 20844.218750000004], [1.60240992E12, 27053.333333333332], [1.60240974E12, 22254.62962962963], [1.60241004E12, 30626.2], [1.60241034E12, 29756.95], [1.60241064E12, 24499.039999999997], [1.60241046E12, 31603.42105263158], [1.60241076E12, 26283.576923076933], [1.60240884E12, 23540.04347826087], [1.60240914E12, 28902.71428571429], [1.60240944E12, 30492.421052631576], [1.60240926E12, 31004.526315789473], [1.60240956E12, 26362.09090909091], [1.60240986E12, 18837.566666666666], [1.60241016E12, 30453.947368421053]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241082E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.125, "minX": 1.60240878E12, "maxY": 41.0, "series": [{"data": [[1.60240998E12, 0.31999999999999995], [1.60241028E12, 0.6666666666666667], [1.60241058E12, 0.6000000000000001], [1.60240896E12, 0.875], [1.6024107E12, 0.45], [1.60240878E12, 41.0], [1.60240908E12, 0.13636363636363635], [1.60240938E12, 0.25], [1.60240968E12, 0.4090909090909091], [1.6024095E12, 0.7619047619047619], [1.6024098E12, 0.41666666666666663], [1.6024101E12, 0.6666666666666667], [1.6024104E12, 0.8947368421052632], [1.60241022E12, 0.65], [1.60241052E12, 0.45454545454545453], [1.6024089E12, 0.5517241379310345], [1.6024092E12, 0.7500000000000001], [1.60241082E12, 0.125], [1.60240902E12, 0.7000000000000001], [1.60240932E12, 0.65], [1.60240962E12, 0.4062499999999999], [1.60240992E12, 0.5714285714285714], [1.60240974E12, 0.3703703703703703], [1.60241004E12, 0.6], [1.60241034E12, 0.44999999999999996], [1.60241064E12, 0.48], [1.60241046E12, 0.5789473684210527], [1.60241076E12, 0.5384615384615387], [1.60240884E12, 0.9130434782608696], [1.60240914E12, 0.7619047619047621], [1.60240944E12, 0.5263157894736842], [1.60240926E12, 0.6842105263157895], [1.60240956E12, 0.681818181818182], [1.60240986E12, 0.36666666666666664], [1.60241016E12, 0.36842105263157887]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241082E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3202.0, "minX": 1.60240878E12, "maxY": 46007.0, "series": [{"data": [[1.60240998E12, 30275.0], [1.60241028E12, 30596.0], [1.60241058E12, 29596.0], [1.60240896E12, 44354.0], [1.6024107E12, 30427.0], [1.60240878E12, 6106.0], [1.60240908E12, 29393.0], [1.60240938E12, 30479.0], [1.60240968E12, 32974.0], [1.6024095E12, 31428.0], [1.6024098E12, 29565.0], [1.6024101E12, 45388.0], [1.6024104E12, 31241.0], [1.60241022E12, 31201.0], [1.60241052E12, 31352.0], [1.6024089E12, 24106.0], [1.6024092E12, 31002.0], [1.60241082E12, 18354.0], [1.60240902E12, 46007.0], [1.60240932E12, 31222.0], [1.60240962E12, 27345.0], [1.60240992E12, 32504.0], [1.60240974E12, 29009.0], [1.60241004E12, 43621.0], [1.60241034E12, 31131.0], [1.60241064E12, 28884.0], [1.60241046E12, 32404.0], [1.60241076E12, 40170.0], [1.60240884E12, 28291.0], [1.60240914E12, 31300.0], [1.60240944E12, 31405.0], [1.60240926E12, 31571.0], [1.60240956E12, 29331.0], [1.60240986E12, 20613.0], [1.60241016E12, 30860.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60240998E12, 24246.0], [1.60241028E12, 28170.0], [1.60241058E12, 22261.0], [1.60240896E12, 22458.0], [1.6024107E12, 19649.0], [1.60240878E12, 3202.0], [1.60240908E12, 24002.0], [1.60240938E12, 29057.0], [1.60240968E12, 18433.0], [1.6024095E12, 27716.0], [1.6024098E12, 19894.0], [1.6024101E12, 26810.0], [1.6024104E12, 30202.0], [1.60241022E12, 30154.0], [1.60241052E12, 25226.0], [1.6024089E12, 17884.0], [1.6024092E12, 29991.0], [1.60241082E12, 17568.0], [1.60240902E12, 26275.0], [1.60240932E12, 29948.0], [1.60240962E12, 17761.0], [1.60240992E12, 22137.0], [1.60240974E12, 17890.0], [1.60241004E12, 22966.0], [1.60241034E12, 28315.0], [1.60241064E12, 20035.0], [1.60241046E12, 31111.0], [1.60241076E12, 16930.0], [1.60240884E12, 8301.0], [1.60240914E12, 25790.0], [1.60240944E12, 30040.0], [1.60240926E12, 30087.0], [1.60240956E12, 24255.0], [1.60240986E12, 17555.0], [1.60241016E12, 30206.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60240998E12, 24246.0], [1.60241028E12, 28170.0], [1.60241058E12, 22261.0], [1.60240896E12, 22458.0], [1.6024107E12, 19649.0], [1.60240878E12, 3202.0], [1.60240908E12, 24002.0], [1.60240938E12, 29057.0], [1.60240968E12, 18433.0], [1.6024095E12, 27716.0], [1.6024098E12, 19894.0], [1.6024101E12, 26810.0], [1.6024104E12, 30202.0], [1.60241022E12, 30154.0], [1.60241052E12, 25226.0], [1.6024089E12, 17884.0], [1.6024092E12, 29991.0], [1.60241082E12, 17568.0], [1.60240902E12, 26275.0], [1.60240932E12, 29948.0], [1.60240962E12, 17761.0], [1.60240992E12, 22137.0], [1.60240974E12, 17890.0], [1.60241004E12, 22966.0], [1.60241034E12, 28315.0], [1.60241064E12, 20035.0], [1.60241046E12, 31111.0], [1.60241076E12, 16930.0], [1.60240884E12, 8301.0], [1.60240914E12, 25790.0], [1.60240944E12, 30040.0], [1.60240926E12, 30087.0], [1.60240956E12, 24255.0], [1.60240986E12, 17555.0], [1.60241016E12, 30206.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60240998E12, 24246.0], [1.60241028E12, 28170.0], [1.60241058E12, 22261.0], [1.60240896E12, 22458.0], [1.6024107E12, 19649.0], [1.60240878E12, 3202.0], [1.60240908E12, 24002.0], [1.60240938E12, 29057.0], [1.60240968E12, 18433.0], [1.6024095E12, 27716.0], [1.6024098E12, 19894.0], [1.6024101E12, 26810.0], [1.6024104E12, 30202.0], [1.60241022E12, 30154.0], [1.60241052E12, 25226.0], [1.6024089E12, 17884.0], [1.6024092E12, 29991.0], [1.60241082E12, 17568.0], [1.60240902E12, 26275.0], [1.60240932E12, 29948.0], [1.60240962E12, 17761.0], [1.60240992E12, 22137.0], [1.60240974E12, 17890.0], [1.60241004E12, 22966.0], [1.60241034E12, 28315.0], [1.60241064E12, 20035.0], [1.60241046E12, 31111.0], [1.60241076E12, 16930.0], [1.60240884E12, 8301.0], [1.60240914E12, 25790.0], [1.60240944E12, 30040.0], [1.60240926E12, 30087.0], [1.60240956E12, 24255.0], [1.60240986E12, 17555.0], [1.60241016E12, 30206.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60240998E12, 24246.0], [1.60241028E12, 28170.0], [1.60241058E12, 22261.0], [1.60240896E12, 22458.0], [1.6024107E12, 19649.0], [1.60240878E12, 3202.0], [1.60240908E12, 24002.0], [1.60240938E12, 29057.0], [1.60240968E12, 18433.0], [1.6024095E12, 27716.0], [1.6024098E12, 19894.0], [1.6024101E12, 26810.0], [1.6024104E12, 30202.0], [1.60241022E12, 30154.0], [1.60241052E12, 25226.0], [1.6024089E12, 17884.0], [1.6024092E12, 29991.0], [1.60241082E12, 17568.0], [1.60240902E12, 26275.0], [1.60240932E12, 29948.0], [1.60240962E12, 17761.0], [1.60240992E12, 22137.0], [1.60240974E12, 17890.0], [1.60241004E12, 22966.0], [1.60241034E12, 28315.0], [1.60241064E12, 20035.0], [1.60241046E12, 31111.0], [1.60241076E12, 16930.0], [1.60240884E12, 8301.0], [1.60240914E12, 25790.0], [1.60240944E12, 30040.0], [1.60240926E12, 30087.0], [1.60240956E12, 24255.0], [1.60240986E12, 17555.0], [1.60241016E12, 30206.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60240998E12, 25427.0], [1.60241028E12, 29989.0], [1.60241058E12, 25022.0], [1.60240896E12, 25909.0], [1.6024107E12, 26608.0], [1.60240878E12, 4654.0], [1.60240908E12, 25790.0], [1.60240938E12, 29661.5], [1.60240968E12, 23605.5], [1.6024095E12, 30407.0], [1.6024098E12, 24972.5], [1.6024101E12, 30371.0], [1.6024104E12, 30431.0], [1.60241022E12, 30600.5], [1.60241052E12, 27373.5], [1.6024089E12, 20328.0], [1.6024092E12, 30762.5], [1.60241082E12, 18027.0], [1.60240902E12, 33704.0], [1.60240932E12, 30367.0], [1.60240962E12, 19843.0], [1.60240992E12, 26937.0], [1.60240974E12, 21539.0], [1.60241004E12, 28636.0], [1.60241034E12, 29568.5], [1.60241064E12, 23711.0], [1.60241046E12, 31467.0], [1.60241076E12, 27239.5], [1.60240884E12, 26217.0], [1.60240914E12, 29025.0], [1.60240944E12, 30351.0], [1.60240926E12, 31175.0], [1.60240956E12, 26385.5], [1.60240986E12, 18307.0], [1.60241016E12, 30400.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241082E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28016.0, "minX": 1.0, "maxY": 28016.0, "series": [{"data": [[1.0, 28016.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28015.0, "minX": 1.0, "maxY": 28015.0, "series": [{"data": [[1.0, 28015.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60240878E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60240998E12, 0.4166666666666667], [1.60241028E12, 0.35], [1.60241058E12, 0.4166666666666667], [1.60240896E12, 0.26666666666666666], [1.6024107E12, 0.3333333333333333], [1.60240878E12, 0.2], [1.60240908E12, 0.36666666666666664], [1.60240938E12, 0.3333333333333333], [1.60240968E12, 0.36666666666666664], [1.6024095E12, 0.35], [1.6024098E12, 0.4], [1.6024101E12, 0.35], [1.6024104E12, 0.31666666666666665], [1.60241022E12, 0.3333333333333333], [1.60241052E12, 0.36666666666666664], [1.6024089E12, 0.48333333333333334], [1.6024092E12, 0.3333333333333333], [1.60240902E12, 0.3333333333333333], [1.60240932E12, 0.3333333333333333], [1.60240962E12, 0.5333333333333333], [1.60240992E12, 0.35], [1.60240974E12, 0.45], [1.60241004E12, 0.25], [1.60241034E12, 0.3333333333333333], [1.60241064E12, 0.4166666666666667], [1.60241046E12, 0.31666666666666665], [1.60241076E12, 0.4], [1.60240884E12, 0.38333333333333336], [1.60240914E12, 0.35], [1.60240944E12, 0.31666666666666665], [1.60240926E12, 0.31666666666666665], [1.60240956E12, 0.36666666666666664], [1.60240986E12, 0.5], [1.60241016E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60240878E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60240998E12, 0.4166666666666667], [1.60241028E12, 0.35], [1.60241058E12, 0.4166666666666667], [1.60240896E12, 0.26666666666666666], [1.6024107E12, 0.3333333333333333], [1.60240878E12, 0.03333333333333333], [1.60240908E12, 0.36666666666666664], [1.60240938E12, 0.3333333333333333], [1.60240968E12, 0.36666666666666664], [1.6024095E12, 0.35], [1.6024098E12, 0.4], [1.6024101E12, 0.35], [1.6024104E12, 0.31666666666666665], [1.60241022E12, 0.3333333333333333], [1.60241052E12, 0.36666666666666664], [1.6024089E12, 0.48333333333333334], [1.6024092E12, 0.3333333333333333], [1.60241082E12, 0.13333333333333333], [1.60240902E12, 0.3333333333333333], [1.60240932E12, 0.3333333333333333], [1.60240962E12, 0.5333333333333333], [1.60240992E12, 0.35], [1.60240974E12, 0.45], [1.60241004E12, 0.25], [1.60241034E12, 0.3333333333333333], [1.60241064E12, 0.4166666666666667], [1.60241046E12, 0.31666666666666665], [1.60241076E12, 0.43333333333333335], [1.60240884E12, 0.38333333333333336], [1.60240914E12, 0.35], [1.60240944E12, 0.31666666666666665], [1.60240926E12, 0.31666666666666665], [1.60240956E12, 0.36666666666666664], [1.60240986E12, 0.5], [1.60241016E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241082E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60240878E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60240998E12, 0.4166666666666667], [1.60241028E12, 0.35], [1.60241058E12, 0.4166666666666667], [1.60240896E12, 0.26666666666666666], [1.6024107E12, 0.3333333333333333], [1.60240878E12, 0.03333333333333333], [1.60240908E12, 0.36666666666666664], [1.60240938E12, 0.3333333333333333], [1.60240968E12, 0.36666666666666664], [1.6024095E12, 0.35], [1.6024098E12, 0.4], [1.6024101E12, 0.35], [1.6024104E12, 0.31666666666666665], [1.60241022E12, 0.3333333333333333], [1.60241052E12, 0.36666666666666664], [1.6024089E12, 0.48333333333333334], [1.6024092E12, 0.3333333333333333], [1.60241082E12, 0.13333333333333333], [1.60240902E12, 0.3333333333333333], [1.60240932E12, 0.3333333333333333], [1.60240962E12, 0.5333333333333333], [1.60240992E12, 0.35], [1.60240974E12, 0.45], [1.60241004E12, 0.25], [1.60241034E12, 0.3333333333333333], [1.60241064E12, 0.4166666666666667], [1.60241046E12, 0.31666666666666665], [1.60241076E12, 0.43333333333333335], [1.60240884E12, 0.38333333333333336], [1.60240914E12, 0.35], [1.60240944E12, 0.31666666666666665], [1.60240926E12, 0.31666666666666665], [1.60240956E12, 0.36666666666666664], [1.60240986E12, 0.5], [1.60241016E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241082E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60240878E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60240998E12, 0.4166666666666667], [1.60241028E12, 0.35], [1.60241058E12, 0.4166666666666667], [1.60240896E12, 0.26666666666666666], [1.6024107E12, 0.3333333333333333], [1.60240878E12, 0.03333333333333333], [1.60240908E12, 0.36666666666666664], [1.60240938E12, 0.3333333333333333], [1.60240968E12, 0.36666666666666664], [1.6024095E12, 0.35], [1.6024098E12, 0.4], [1.6024101E12, 0.35], [1.6024104E12, 0.31666666666666665], [1.60241022E12, 0.3333333333333333], [1.60241052E12, 0.36666666666666664], [1.6024089E12, 0.48333333333333334], [1.6024092E12, 0.3333333333333333], [1.60241082E12, 0.13333333333333333], [1.60240902E12, 0.3333333333333333], [1.60240932E12, 0.3333333333333333], [1.60240962E12, 0.5333333333333333], [1.60240992E12, 0.35], [1.60240974E12, 0.45], [1.60241004E12, 0.25], [1.60241034E12, 0.3333333333333333], [1.60241064E12, 0.4166666666666667], [1.60241046E12, 0.31666666666666665], [1.60241076E12, 0.43333333333333335], [1.60240884E12, 0.38333333333333336], [1.60240914E12, 0.35], [1.60240944E12, 0.31666666666666665], [1.60240926E12, 0.31666666666666665], [1.60240956E12, 0.36666666666666664], [1.60240986E12, 0.5], [1.60241016E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241082E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

