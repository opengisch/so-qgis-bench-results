/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3300.0, "minX": 0.0, "maxY": 46322.0, "series": [{"data": [[0.0, 3300.0], [0.1, 3300.0], [0.2, 6432.0], [0.3, 8556.0], [0.4, 8556.0], [0.5, 11523.0], [0.6, 14242.0], [0.7, 16920.0], [0.8, 16920.0], [0.9, 17262.0], [1.0, 17398.0], [1.1, 17508.0], [1.2, 17508.0], [1.3, 17510.0], [1.4, 17528.0], [1.5, 17541.0], [1.6, 17541.0], [1.7, 17550.0], [1.8, 17560.0], [1.9, 17560.0], [2.0, 17579.0], [2.1, 17587.0], [2.2, 17643.0], [2.3, 17643.0], [2.4, 17645.0], [2.5, 17692.0], [2.6, 17698.0], [2.7, 17698.0], [2.8, 17797.0], [2.9, 17897.0], [3.0, 17915.0], [3.1, 17915.0], [3.2, 17986.0], [3.3, 18008.0], [3.4, 18008.0], [3.5, 18015.0], [3.6, 18042.0], [3.7, 18092.0], [3.8, 18092.0], [3.9, 18094.0], [4.0, 18106.0], [4.1, 18124.0], [4.2, 18124.0], [4.3, 18139.0], [4.4, 18161.0], [4.5, 18179.0], [4.6, 18179.0], [4.7, 18180.0], [4.8, 18200.0], [4.9, 18211.0], [5.0, 18211.0], [5.1, 18215.0], [5.2, 18319.0], [5.3, 18319.0], [5.4, 18348.0], [5.5, 18388.0], [5.6, 18394.0], [5.7, 18394.0], [5.8, 18417.0], [5.9, 18488.0], [6.0, 18497.0], [6.1, 18497.0], [6.2, 18520.0], [6.3, 18551.0], [6.4, 18625.0], [6.5, 18625.0], [6.6, 18639.0], [6.7, 18664.0], [6.8, 18664.0], [6.9, 18665.0], [7.0, 18666.0], [7.1, 18708.0], [7.2, 18708.0], [7.3, 18712.0], [7.4, 18713.0], [7.5, 18787.0], [7.6, 18787.0], [7.7, 18802.0], [7.8, 18820.0], [7.9, 18849.0], [8.0, 18849.0], [8.1, 18854.0], [8.2, 18937.0], [8.3, 18965.0], [8.4, 18965.0], [8.5, 19003.0], [8.6, 19023.0], [8.7, 19023.0], [8.8, 19031.0], [8.9, 19033.0], [9.0, 19040.0], [9.1, 19040.0], [9.2, 19045.0], [9.3, 19054.0], [9.4, 19094.0], [9.5, 19094.0], [9.6, 19135.0], [9.7, 19156.0], [9.8, 19178.0], [9.9, 19178.0], [10.0, 19200.0], [10.1, 19212.0], [10.2, 19212.0], [10.3, 19215.0], [10.4, 19244.0], [10.5, 19367.0], [10.6, 19367.0], [10.7, 19583.0], [10.8, 19669.0], [10.9, 19718.0], [11.0, 19718.0], [11.1, 19726.0], [11.2, 19740.0], [11.3, 19778.0], [11.4, 19778.0], [11.5, 19804.0], [11.6, 20030.0], [11.7, 20030.0], [11.8, 20056.0], [11.9, 20063.0], [12.0, 20105.0], [12.1, 20105.0], [12.2, 20155.0], [12.3, 20174.0], [12.4, 20225.0], [12.5, 20225.0], [12.6, 20279.0], [12.7, 20322.0], [12.8, 20336.0], [12.9, 20336.0], [13.0, 20405.0], [13.1, 20427.0], [13.2, 20437.0], [13.3, 20437.0], [13.4, 20507.0], [13.5, 20525.0], [13.6, 20525.0], [13.7, 20526.0], [13.8, 20549.0], [13.9, 20550.0], [14.0, 20550.0], [14.1, 20597.0], [14.2, 20613.0], [14.3, 20631.0], [14.4, 20631.0], [14.5, 20636.0], [14.6, 20704.0], [14.7, 20722.0], [14.8, 20722.0], [14.9, 20766.0], [15.0, 20786.0], [15.1, 20786.0], [15.2, 20907.0], [15.3, 20965.0], [15.4, 20975.0], [15.5, 20975.0], [15.6, 21004.0], [15.7, 21029.0], [15.8, 21032.0], [15.9, 21032.0], [16.0, 21064.0], [16.1, 21076.0], [16.2, 21136.0], [16.3, 21136.0], [16.4, 21147.0], [16.5, 21297.0], [16.6, 21314.0], [16.7, 21314.0], [16.8, 21544.0], [16.9, 21590.0], [17.0, 21590.0], [17.1, 21717.0], [17.2, 21800.0], [17.3, 21997.0], [17.4, 21997.0], [17.5, 22000.0], [17.6, 22005.0], [17.7, 22031.0], [17.8, 22031.0], [17.9, 22065.0], [18.0, 22124.0], [18.1, 22141.0], [18.2, 22141.0], [18.3, 22241.0], [18.4, 22341.0], [18.5, 22341.0], [18.6, 22350.0], [18.7, 22437.0], [18.8, 22473.0], [18.9, 22473.0], [19.0, 22538.0], [19.1, 22591.0], [19.2, 22680.0], [19.3, 22680.0], [19.4, 22700.0], [19.5, 22711.0], [19.6, 22755.0], [19.7, 22755.0], [19.8, 22761.0], [19.9, 22761.0], [20.0, 22814.0], [20.1, 22814.0], [20.2, 22816.0], [20.3, 22817.0], [20.4, 22817.0], [20.5, 22839.0], [20.6, 22900.0], [20.7, 22901.0], [20.8, 22901.0], [20.9, 22920.0], [21.0, 22931.0], [21.1, 22963.0], [21.2, 22963.0], [21.3, 22980.0], [21.4, 23001.0], [21.5, 23137.0], [21.6, 23137.0], [21.7, 23157.0], [21.8, 23167.0], [21.9, 23167.0], [22.0, 23189.0], [22.1, 23223.0], [22.2, 23230.0], [22.3, 23230.0], [22.4, 23241.0], [22.5, 23244.0], [22.6, 23309.0], [22.7, 23309.0], [22.8, 23332.0], [22.9, 23339.0], [23.0, 23350.0], [23.1, 23350.0], [23.2, 23387.0], [23.3, 23457.0], [23.4, 23457.0], [23.5, 23477.0], [23.6, 23501.0], [23.7, 23515.0], [23.8, 23515.0], [23.9, 23518.0], [24.0, 23544.0], [24.1, 23547.0], [24.2, 23547.0], [24.3, 23614.0], [24.4, 23848.0], [24.5, 23935.0], [24.6, 23935.0], [24.7, 23935.0], [24.8, 23989.0], [24.9, 24093.0], [25.0, 24093.0], [25.1, 24098.0], [25.2, 24112.0], [25.3, 24112.0], [25.4, 24122.0], [25.5, 24131.0], [25.6, 24368.0], [25.7, 24368.0], [25.8, 24388.0], [25.9, 24401.0], [26.0, 24403.0], [26.1, 24403.0], [26.2, 24419.0], [26.3, 24440.0], [26.4, 24441.0], [26.5, 24441.0], [26.6, 24459.0], [26.7, 24462.0], [26.8, 24462.0], [26.9, 24467.0], [27.0, 24477.0], [27.1, 24481.0], [27.2, 24481.0], [27.3, 24500.0], [27.4, 24549.0], [27.5, 24550.0], [27.6, 24550.0], [27.7, 24575.0], [27.8, 24577.0], [27.9, 24578.0], [28.0, 24578.0], [28.1, 24584.0], [28.2, 24615.0], [28.3, 24626.0], [28.4, 24626.0], [28.5, 24658.0], [28.6, 24680.0], [28.7, 24680.0], [28.8, 24687.0], [28.9, 24719.0], [29.0, 24735.0], [29.1, 24735.0], [29.2, 24736.0], [29.3, 24747.0], [29.4, 24750.0], [29.5, 24750.0], [29.6, 24775.0], [29.7, 24802.0], [29.8, 24820.0], [29.9, 24820.0], [30.0, 24829.0], [30.1, 24830.0], [30.2, 24830.0], [30.3, 24867.0], [30.4, 24899.0], [30.5, 24903.0], [30.6, 24903.0], [30.7, 24906.0], [30.8, 24928.0], [30.9, 24929.0], [31.0, 24929.0], [31.1, 24952.0], [31.2, 24985.0], [31.3, 25016.0], [31.4, 25016.0], [31.5, 25052.0], [31.6, 25064.0], [31.7, 25064.0], [31.8, 25091.0], [31.9, 25096.0], [32.0, 25103.0], [32.1, 25103.0], [32.2, 25149.0], [32.3, 25209.0], [32.4, 25216.0], [32.5, 25216.0], [32.6, 25229.0], [32.7, 25260.0], [32.8, 25277.0], [32.9, 25277.0], [33.0, 25281.0], [33.1, 25288.0], [33.2, 25300.0], [33.3, 25300.0], [33.4, 25315.0], [33.5, 25321.0], [33.6, 25321.0], [33.7, 25337.0], [33.8, 25361.0], [33.9, 25370.0], [34.0, 25370.0], [34.1, 25396.0], [34.2, 25400.0], [34.3, 25408.0], [34.4, 25408.0], [34.5, 25416.0], [34.6, 25430.0], [34.7, 25485.0], [34.8, 25485.0], [34.9, 25491.0], [35.0, 25515.0], [35.1, 25515.0], [35.2, 25530.0], [35.3, 25543.0], [35.4, 25552.0], [35.5, 25552.0], [35.6, 25568.0], [35.7, 25574.0], [35.8, 25610.0], [35.9, 25610.0], [36.0, 25622.0], [36.1, 25652.0], [36.2, 25682.0], [36.3, 25682.0], [36.4, 25697.0], [36.5, 25707.0], [36.6, 25714.0], [36.7, 25714.0], [36.8, 25760.0], [36.9, 25761.0], [37.0, 25761.0], [37.1, 25761.0], [37.2, 25762.0], [37.3, 25764.0], [37.4, 25764.0], [37.5, 25785.0], [37.6, 25794.0], [37.7, 25799.0], [37.8, 25799.0], [37.9, 25810.0], [38.0, 25829.0], [38.1, 25859.0], [38.2, 25859.0], [38.3, 25871.0], [38.4, 25961.0], [38.5, 25961.0], [38.6, 25997.0], [38.7, 26025.0], [38.8, 26048.0], [38.9, 26048.0], [39.0, 26050.0], [39.1, 26078.0], [39.2, 26096.0], [39.3, 26096.0], [39.4, 26185.0], [39.5, 26203.0], [39.6, 26257.0], [39.7, 26257.0], [39.8, 26262.0], [39.9, 26335.0], [40.0, 26352.0], [40.1, 26352.0], [40.2, 26372.0], [40.3, 26383.0], [40.4, 26383.0], [40.5, 26402.0], [40.6, 26452.0], [40.7, 26465.0], [40.8, 26465.0], [40.9, 26560.0], [41.0, 26593.0], [41.1, 26603.0], [41.2, 26603.0], [41.3, 26625.0], [41.4, 26633.0], [41.5, 26650.0], [41.6, 26650.0], [41.7, 26652.0], [41.8, 26655.0], [41.9, 26655.0], [42.0, 26657.0], [42.1, 26659.0], [42.2, 26685.0], [42.3, 26685.0], [42.4, 26686.0], [42.5, 26740.0], [42.6, 26760.0], [42.7, 26760.0], [42.8, 26781.0], [42.9, 26783.0], [43.0, 26806.0], [43.1, 26806.0], [43.2, 26808.0], [43.3, 26821.0], [43.4, 26821.0], [43.5, 26829.0], [43.6, 26857.0], [43.7, 26912.0], [43.8, 26912.0], [43.9, 26912.0], [44.0, 26914.0], [44.1, 26938.0], [44.2, 26938.0], [44.3, 26983.0], [44.4, 27064.0], [44.5, 27089.0], [44.6, 27089.0], [44.7, 27120.0], [44.8, 27145.0], [44.9, 27162.0], [45.0, 27162.0], [45.1, 27166.0], [45.2, 27167.0], [45.3, 27167.0], [45.4, 27172.0], [45.5, 27194.0], [45.6, 27229.0], [45.7, 27229.0], [45.8, 27248.0], [45.9, 27278.0], [46.0, 27280.0], [46.1, 27280.0], [46.2, 27294.0], [46.3, 27326.0], [46.4, 27354.0], [46.5, 27354.0], [46.6, 27361.0], [46.7, 27403.0], [46.8, 27403.0], [46.9, 27454.0], [47.0, 27471.0], [47.1, 27527.0], [47.2, 27527.0], [47.3, 27535.0], [47.4, 27538.0], [47.5, 27542.0], [47.6, 27542.0], [47.7, 27580.0], [47.8, 27588.0], [47.9, 27633.0], [48.0, 27633.0], [48.1, 27639.0], [48.2, 27646.0], [48.3, 27681.0], [48.4, 27681.0], [48.5, 27713.0], [48.6, 27753.0], [48.7, 27753.0], [48.8, 27786.0], [48.9, 27813.0], [49.0, 27865.0], [49.1, 27865.0], [49.2, 27920.0], [49.3, 27980.0], [49.4, 28035.0], [49.5, 28035.0], [49.6, 28038.0], [49.7, 28047.0], [49.8, 28065.0], [49.9, 28065.0], [50.0, 28079.0], [50.1, 28087.0], [50.2, 28087.0], [50.3, 28152.0], [50.4, 28154.0], [50.5, 28270.0], [50.6, 28270.0], [50.7, 28289.0], [50.8, 28328.0], [50.9, 28333.0], [51.0, 28333.0], [51.1, 28351.0], [51.2, 28351.0], [51.3, 28358.0], [51.4, 28358.0], [51.5, 28370.0], [51.6, 28371.0], [51.7, 28371.0], [51.8, 28390.0], [51.9, 28477.0], [52.0, 28518.0], [52.1, 28518.0], [52.2, 28533.0], [52.3, 28556.0], [52.4, 28574.0], [52.5, 28574.0], [52.6, 28594.0], [52.7, 28598.0], [52.8, 28635.0], [52.9, 28635.0], [53.0, 28693.0], [53.1, 28711.0], [53.2, 28762.0], [53.3, 28762.0], [53.4, 28777.0], [53.5, 28815.0], [53.6, 28815.0], [53.7, 28819.0], [53.8, 28828.0], [53.9, 28862.0], [54.0, 28862.0], [54.1, 28881.0], [54.2, 28887.0], [54.3, 28888.0], [54.4, 28888.0], [54.5, 28951.0], [54.6, 28951.0], [54.7, 28985.0], [54.8, 28985.0], [54.9, 28996.0], [55.0, 29000.0], [55.1, 29000.0], [55.2, 29092.0], [55.3, 29121.0], [55.4, 29129.0], [55.5, 29129.0], [55.6, 29130.0], [55.7, 29140.0], [55.8, 29246.0], [55.9, 29246.0], [56.0, 29250.0], [56.1, 29265.0], [56.2, 29275.0], [56.3, 29275.0], [56.4, 29347.0], [56.5, 29434.0], [56.6, 29435.0], [56.7, 29435.0], [56.8, 29438.0], [56.9, 29468.0], [57.0, 29468.0], [57.1, 29480.0], [57.2, 29481.0], [57.3, 29497.0], [57.4, 29497.0], [57.5, 29511.0], [57.6, 29513.0], [57.7, 29520.0], [57.8, 29520.0], [57.9, 29523.0], [58.0, 29534.0], [58.1, 29560.0], [58.2, 29560.0], [58.3, 29560.0], [58.4, 29589.0], [58.5, 29589.0], [58.6, 29602.0], [58.7, 29606.0], [58.8, 29609.0], [58.9, 29609.0], [59.0, 29620.0], [59.1, 29629.0], [59.2, 29634.0], [59.3, 29634.0], [59.4, 29654.0], [59.5, 29654.0], [59.6, 29659.0], [59.7, 29659.0], [59.8, 29662.0], [59.9, 29690.0], [60.0, 29693.0], [60.1, 29693.0], [60.2, 29713.0], [60.3, 29767.0], [60.4, 29767.0], [60.5, 29770.0], [60.6, 29770.0], [60.7, 29801.0], [60.8, 29801.0], [60.9, 29816.0], [61.0, 29833.0], [61.1, 29856.0], [61.2, 29856.0], [61.3, 29860.0], [61.4, 29875.0], [61.5, 29927.0], [61.6, 29927.0], [61.7, 29930.0], [61.8, 29938.0], [61.9, 29938.0], [62.0, 29943.0], [62.1, 29945.0], [62.2, 29946.0], [62.3, 29946.0], [62.4, 29959.0], [62.5, 29972.0], [62.6, 29977.0], [62.7, 29977.0], [62.8, 29991.0], [62.9, 30008.0], [63.0, 30023.0], [63.1, 30023.0], [63.2, 30025.0], [63.3, 30028.0], [63.4, 30028.0], [63.5, 30055.0], [63.6, 30059.0], [63.7, 30071.0], [63.8, 30071.0], [63.9, 30081.0], [64.0, 30087.0], [64.1, 30095.0], [64.2, 30095.0], [64.3, 30099.0], [64.4, 30106.0], [64.5, 30106.0], [64.6, 30106.0], [64.7, 30109.0], [64.8, 30115.0], [64.9, 30115.0], [65.0, 30115.0], [65.1, 30144.0], [65.2, 30147.0], [65.3, 30147.0], [65.4, 30152.0], [65.5, 30162.0], [65.6, 30167.0], [65.7, 30167.0], [65.8, 30187.0], [65.9, 30212.0], [66.0, 30221.0], [66.1, 30221.0], [66.2, 30224.0], [66.3, 30237.0], [66.4, 30240.0], [66.5, 30240.0], [66.6, 30247.0], [66.7, 30271.0], [66.8, 30271.0], [66.9, 30273.0], [67.0, 30275.0], [67.1, 30282.0], [67.2, 30282.0], [67.3, 30286.0], [67.4, 30294.0], [67.5, 30298.0], [67.6, 30298.0], [67.7, 30299.0], [67.8, 30301.0], [67.9, 30307.0], [68.0, 30307.0], [68.1, 30317.0], [68.2, 30320.0], [68.3, 30323.0], [68.4, 30323.0], [68.5, 30329.0], [68.6, 30346.0], [68.7, 30346.0], [68.8, 30347.0], [68.9, 30349.0], [69.0, 30350.0], [69.1, 30350.0], [69.2, 30353.0], [69.3, 30362.0], [69.4, 30367.0], [69.5, 30367.0], [69.6, 30372.0], [69.7, 30379.0], [69.8, 30383.0], [69.9, 30383.0], [70.0, 30383.0], [70.1, 30397.0], [70.2, 30397.0], [70.3, 30399.0], [70.4, 30404.0], [70.5, 30415.0], [70.6, 30415.0], [70.7, 30426.0], [70.8, 30427.0], [70.9, 30432.0], [71.0, 30432.0], [71.1, 30435.0], [71.2, 30440.0], [71.3, 30444.0], [71.4, 30444.0], [71.5, 30451.0], [71.6, 30452.0], [71.7, 30452.0], [71.8, 30453.0], [71.9, 30457.0], [72.0, 30459.0], [72.1, 30459.0], [72.2, 30463.0], [72.3, 30467.0], [72.4, 30468.0], [72.5, 30468.0], [72.6, 30473.0], [72.7, 30475.0], [72.8, 30478.0], [72.9, 30478.0], [73.0, 30482.0], [73.1, 30486.0], [73.2, 30489.0], [73.3, 30489.0], [73.4, 30491.0], [73.5, 30494.0], [73.6, 30494.0], [73.7, 30494.0], [73.8, 30496.0], [73.9, 30496.0], [74.0, 30496.0], [74.1, 30497.0], [74.2, 30499.0], [74.3, 30504.0], [74.4, 30504.0], [74.5, 30504.0], [74.6, 30505.0], [74.7, 30505.0], [74.8, 30505.0], [74.9, 30508.0], [75.0, 30513.0], [75.1, 30513.0], [75.2, 30515.0], [75.3, 30518.0], [75.4, 30519.0], [75.5, 30519.0], [75.6, 30522.0], [75.7, 30528.0], [75.8, 30529.0], [75.9, 30529.0], [76.0, 30530.0], [76.1, 30535.0], [76.2, 30539.0], [76.3, 30539.0], [76.4, 30544.0], [76.5, 30551.0], [76.6, 30551.0], [76.7, 30551.0], [76.8, 30564.0], [76.9, 30568.0], [77.0, 30568.0], [77.1, 30573.0], [77.2, 30582.0], [77.3, 30585.0], [77.4, 30585.0], [77.5, 30590.0], [77.6, 30591.0], [77.7, 30592.0], [77.8, 30592.0], [77.9, 30593.0], [78.0, 30594.0], [78.1, 30598.0], [78.2, 30598.0], [78.3, 30608.0], [78.4, 30610.0], [78.5, 30610.0], [78.6, 30613.0], [78.7, 30614.0], [78.8, 30616.0], [78.9, 30616.0], [79.0, 30622.0], [79.1, 30623.0], [79.2, 30625.0], [79.3, 30625.0], [79.4, 30631.0], [79.5, 30642.0], [79.6, 30647.0], [79.7, 30647.0], [79.8, 30655.0], [79.9, 30659.0], [80.0, 30664.0], [80.1, 30664.0], [80.2, 30667.0], [80.3, 30667.0], [80.4, 30667.0], [80.5, 30669.0], [80.6, 30669.0], [80.7, 30673.0], [80.8, 30673.0], [80.9, 30674.0], [81.0, 30674.0], [81.1, 30677.0], [81.2, 30677.0], [81.3, 30679.0], [81.4, 30690.0], [81.5, 30692.0], [81.6, 30692.0], [81.7, 30694.0], [81.8, 30697.0], [81.9, 30697.0], [82.0, 30699.0], [82.1, 30709.0], [82.2, 30710.0], [82.3, 30710.0], [82.4, 30711.0], [82.5, 30711.0], [82.6, 30711.0], [82.7, 30711.0], [82.8, 30715.0], [82.9, 30715.0], [83.0, 30718.0], [83.1, 30718.0], [83.2, 30719.0], [83.3, 30720.0], [83.4, 30720.0], [83.5, 30723.0], [83.6, 30728.0], [83.7, 30731.0], [83.8, 30731.0], [83.9, 30731.0], [84.0, 30734.0], [84.1, 30735.0], [84.2, 30735.0], [84.3, 30754.0], [84.4, 30755.0], [84.5, 30755.0], [84.6, 30755.0], [84.7, 30756.0], [84.8, 30757.0], [84.9, 30758.0], [85.0, 30758.0], [85.1, 30776.0], [85.2, 30777.0], [85.3, 30777.0], [85.4, 30781.0], [85.5, 30782.0], [85.6, 30796.0], [85.7, 30796.0], [85.8, 30806.0], [85.9, 30811.0], [86.0, 30811.0], [86.1, 30811.0], [86.2, 30814.0], [86.3, 30859.0], [86.4, 30860.0], [86.5, 30860.0], [86.6, 30864.0], [86.7, 30864.0], [86.8, 30864.0], [86.9, 30866.0], [87.0, 30867.0], [87.1, 30869.0], [87.2, 30869.0], [87.3, 30871.0], [87.4, 30872.0], [87.5, 30876.0], [87.6, 30876.0], [87.7, 30883.0], [87.8, 30885.0], [87.9, 30890.0], [88.0, 30890.0], [88.1, 30921.0], [88.2, 30922.0], [88.3, 30926.0], [88.4, 30926.0], [88.5, 30928.0], [88.6, 30929.0], [88.7, 30929.0], [88.8, 30937.0], [88.9, 30940.0], [89.0, 30949.0], [89.1, 30949.0], [89.2, 30965.0], [89.3, 30966.0], [89.4, 30968.0], [89.5, 30968.0], [89.6, 30982.0], [89.7, 30990.0], [89.8, 30991.0], [89.9, 30991.0], [90.0, 30997.0], [90.1, 31008.0], [90.2, 31008.0], [90.3, 31011.0], [90.4, 31017.0], [90.5, 31024.0], [90.6, 31024.0], [90.7, 31029.0], [90.8, 31030.0], [90.9, 31033.0], [91.0, 31033.0], [91.1, 31044.0], [91.2, 31052.0], [91.3, 31059.0], [91.4, 31059.0], [91.5, 31060.0], [91.6, 31063.0], [91.7, 31063.0], [91.8, 31067.0], [91.9, 31067.0], [92.0, 31092.0], [92.1, 31092.0], [92.2, 31098.0], [92.3, 31115.0], [92.4, 31123.0], [92.5, 31123.0], [92.6, 31152.0], [92.7, 31233.0], [92.8, 31236.0], [92.9, 31236.0], [93.0, 31302.0], [93.1, 31593.0], [93.2, 31620.0], [93.3, 31620.0], [93.4, 31674.0], [93.5, 31690.0], [93.6, 31690.0], [93.7, 31727.0], [93.8, 31899.0], [93.9, 32667.0], [94.0, 32667.0], [94.1, 32681.0], [94.2, 32714.0], [94.3, 32745.0], [94.4, 32745.0], [94.5, 32774.0], [94.6, 32828.0], [94.7, 32855.0], [94.8, 32855.0], [94.9, 32924.0], [95.0, 33267.0], [95.1, 33267.0], [95.2, 33438.0], [95.3, 33640.0], [95.4, 33761.0], [95.5, 33761.0], [95.6, 33801.0], [95.7, 34270.0], [95.8, 34491.0], [95.9, 34491.0], [96.0, 34604.0], [96.1, 34733.0], [96.2, 35004.0], [96.3, 35004.0], [96.4, 35020.0], [96.5, 35876.0], [96.6, 36088.0], [96.7, 36088.0], [96.8, 36628.0], [96.9, 37069.0], [97.0, 37069.0], [97.1, 37438.0], [97.2, 37573.0], [97.3, 38240.0], [97.4, 38240.0], [97.5, 39058.0], [97.6, 39263.0], [97.7, 39368.0], [97.8, 39368.0], [97.9, 39961.0], [98.0, 40367.0], [98.1, 41595.0], [98.2, 41595.0], [98.3, 42829.0], [98.4, 42934.0], [98.5, 42934.0], [98.6, 43337.0], [98.7, 43816.0], [98.8, 44228.0], [98.9, 44228.0], [99.0, 44283.0], [99.1, 44742.0], [99.2, 45194.0], [99.3, 45194.0], [99.4, 45244.0], [99.5, 45504.0], [99.6, 45624.0], [99.7, 45624.0], [99.8, 46118.0], [99.9, 46322.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3300.0, "maxY": 29.0, "series": [{"data": [[33700.0, 1.0], [32900.0, 1.0], [34700.0, 1.0], [37500.0, 1.0], [40300.0, 1.0], [39300.0, 1.0], [39900.0, 1.0], [42900.0, 1.0], [41500.0, 1.0], [44700.0, 1.0], [43300.0, 1.0], [45100.0, 1.0], [46100.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [3300.0, 1.0], [6400.0, 1.0], [8500.0, 1.0], [11500.0, 1.0], [14200.0, 1.0], [16900.0, 1.0], [17300.0, 1.0], [17200.0, 1.0], [17600.0, 4.0], [18300.0, 4.0], [18100.0, 6.0], [18200.0, 3.0], [18400.0, 3.0], [18000.0, 5.0], [17900.0, 2.0], [17500.0, 8.0], [17700.0, 1.0], [17800.0, 1.0], [18600.0, 5.0], [19000.0, 8.0], [19100.0, 3.0], [18700.0, 4.0], [18800.0, 4.0], [19200.0, 4.0], [18900.0, 2.0], [19300.0, 1.0], [18500.0, 2.0], [19700.0, 4.0], [20300.0, 2.0], [19500.0, 1.0], [20100.0, 3.0], [20200.0, 2.0], [20400.0, 3.0], [20000.0, 3.0], [19800.0, 1.0], [19600.0, 1.0], [20700.0, 4.0], [21100.0, 2.0], [20900.0, 3.0], [21000.0, 5.0], [20500.0, 6.0], [20600.0, 3.0], [21500.0, 2.0], [21200.0, 1.0], [21300.0, 1.0], [22000.0, 4.0], [21800.0, 1.0], [22300.0, 2.0], [22500.0, 2.0], [22200.0, 1.0], [22100.0, 2.0], [21900.0, 1.0], [22400.0, 2.0], [21700.0, 1.0], [23300.0, 5.0], [22600.0, 1.0], [22700.0, 5.0], [23100.0, 4.0], [23200.0, 4.0], [23000.0, 1.0], [23400.0, 2.0], [23500.0, 5.0], [22900.0, 6.0], [22800.0, 4.0], [24000.0, 2.0], [24500.0, 7.0], [24100.0, 3.0], [24400.0, 10.0], [23600.0, 1.0], [23900.0, 3.0], [23800.0, 1.0], [24300.0, 2.0], [25400.0, 6.0], [25000.0, 5.0], [24700.0, 6.0], [24900.0, 6.0], [25300.0, 7.0], [25200.0, 7.0], [24600.0, 5.0], [24800.0, 6.0], [25500.0, 6.0], [25100.0, 2.0], [26500.0, 2.0], [26600.0, 10.0], [26000.0, 5.0], [26100.0, 1.0], [25900.0, 2.0], [25700.0, 10.0], [25600.0, 5.0], [26400.0, 3.0], [25800.0, 4.0], [26300.0, 4.0], [26200.0, 3.0], [26700.0, 4.0], [26900.0, 5.0], [27400.0, 3.0], [27500.0, 6.0], [27600.0, 4.0], [27100.0, 7.0], [27000.0, 2.0], [27300.0, 3.0], [26800.0, 5.0], [27200.0, 5.0], [28500.0, 6.0], [27700.0, 3.0], [28100.0, 2.0], [27900.0, 2.0], [28200.0, 2.0], [28600.0, 2.0], [28300.0, 8.0], [28000.0, 6.0], [28400.0, 1.0], [27800.0, 2.0], [28900.0, 4.0], [28800.0, 7.0], [29200.0, 4.0], [29000.0, 2.0], [28700.0, 3.0], [29500.0, 8.0], [29600.0, 12.0], [29400.0, 7.0], [29300.0, 1.0], [29100.0, 4.0], [29800.0, 6.0], [30100.0, 11.0], [30000.0, 11.0], [29900.0, 10.0], [29700.0, 4.0], [30700.0, 27.0], [30400.0, 29.0], [30300.0, 19.0], [30600.0, 28.0], [30500.0, 29.0], [30200.0, 14.0], [31600.0, 3.0], [31700.0, 1.0], [30900.0, 15.0], [31100.0, 3.0], [31200.0, 2.0], [31000.0, 16.0], [30800.0, 17.0], [31500.0, 1.0], [31300.0, 1.0], [31800.0, 1.0], [32700.0, 3.0], [32600.0, 2.0], [34200.0, 1.0], [33800.0, 1.0], [32800.0, 2.0], [33400.0, 1.0], [34600.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [34400.0, 1.0], [35800.0, 1.0], [35000.0, 2.0], [36600.0, 1.0], [36000.0, 1.0], [37400.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [39000.0, 1.0], [39200.0, 1.0], [42800.0, 1.0], [44200.0, 2.0], [43800.0, 1.0], [45600.0, 1.0], [45200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.909090909090909, "minX": 1.60241544E12, "maxY": 10.0, "series": [{"data": [[1.60241664E12, 10.0], [1.60241634E12, 10.0], [1.60241604E12, 10.0], [1.60241574E12, 10.0], [1.60241736E12, 10.0], [1.60241544E12, 10.0], [1.60241706E12, 10.0], [1.60241676E12, 10.0], [1.60241646E12, 10.0], [1.60241616E12, 10.0], [1.60241586E12, 10.0], [1.60241556E12, 10.0], [1.60241688E12, 10.0], [1.60241718E12, 10.0], [1.60241658E12, 10.0], [1.60241628E12, 10.0], [1.60241598E12, 10.0], [1.60241568E12, 10.0], [1.60241742E12, 5.909090909090909], [1.602417E12, 10.0], [1.6024167E12, 10.0], [1.6024164E12, 10.0], [1.6024161E12, 10.0], [1.6024158E12, 10.0], [1.6024173E12, 10.0], [1.6024155E12, 10.0], [1.60241682E12, 10.0], [1.60241724E12, 10.0], [1.60241652E12, 10.0], [1.60241622E12, 10.0], [1.60241592E12, 10.0], [1.60241562E12, 10.0], [1.60241694E12, 10.0], [1.60241712E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241742E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17528.0, "minX": 1.0, "maxY": 27233.340220385668, "series": [{"data": [[8.0, 17528.0], [4.0, 17550.0], [2.0, 17560.0], [1.0, 18042.0], [9.0, 17645.0], [10.0, 27233.340220385668], [5.0, 17692.0], [6.0, 17643.0], [3.0, 17579.0], [7.0, 17541.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 27115.89795918366]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 74.15, "minX": 1.60241544E12, "maxY": 222440.73333333334, "series": [{"data": [[1.60241664E12, 37948.816666666666], [1.60241634E12, 78598.5], [1.60241604E12, 41177.15], [1.60241574E12, 46831.75], [1.60241736E12, 68771.13333333333], [1.60241544E12, 222440.73333333334], [1.60241706E12, 46174.46666666667], [1.60241676E12, 47279.36666666667], [1.60241646E12, 54618.2], [1.60241616E12, 24585.566666666666], [1.60241586E12, 48722.63333333333], [1.60241556E12, 135315.43333333332], [1.60241688E12, 52001.46666666667], [1.60241718E12, 27354.883333333335], [1.60241658E12, 72596.0], [1.60241628E12, 95809.33333333333], [1.60241598E12, 53657.46666666667], [1.60241568E12, 65305.61666666667], [1.60241742E12, 10866.033333333333], [1.602417E12, 42292.96666666667], [1.6024167E12, 37750.73333333333], [1.6024164E12, 195418.35], [1.6024161E12, 44030.416666666664], [1.6024158E12, 43418.13333333333], [1.6024173E12, 150794.53333333333], [1.6024155E12, 66586.83333333333], [1.60241682E12, 46533.9], [1.60241724E12, 35108.316666666666], [1.60241652E12, 84622.51666666666], [1.60241622E12, 152550.26666666666], [1.60241592E12, 45768.98333333333], [1.60241562E12, 64277.51666666667], [1.60241694E12, 46235.35], [1.60241712E12, 37999.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60241664E12, 132.76666666666668], [1.60241634E12, 186.4], [1.60241604E12, 138.76666666666668], [1.60241574E12, 153.4], [1.60241736E12, 171.0], [1.60241544E12, 169.25], [1.60241706E12, 146.03333333333333], [1.60241676E12, 138.86666666666667], [1.60241646E12, 215.3], [1.60241616E12, 160.58333333333334], [1.60241586E12, 146.11666666666667], [1.60241556E12, 121.33333333333333], [1.60241688E12, 146.76666666666668], [1.60241718E12, 182.41666666666666], [1.60241658E12, 168.01666666666668], [1.60241628E12, 159.18333333333334], [1.60241598E12, 146.35], [1.60241568E12, 169.26666666666668], [1.60241742E12, 74.15], [1.602417E12, 138.8], [1.6024167E12, 138.75], [1.6024164E12, 175.88333333333333], [1.6024161E12, 153.35], [1.6024158E12, 138.85], [1.6024173E12, 164.15], [1.6024155E12, 206.9], [1.60241682E12, 146.1], [1.60241724E12, 175.53333333333333], [1.60241652E12, 150.83333333333334], [1.60241622E12, 224.58333333333334], [1.60241592E12, 146.11666666666667], [1.60241562E12, 146.5], [1.60241694E12, 146.46666666666667], [1.60241712E12, 160.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241742E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17585.454545454544, "minX": 1.60241544E12, "maxY": 36537.30000000001, "series": [{"data": [[1.60241664E12, 29050.222222222223], [1.60241634E12, 23651.62962962963], [1.60241604E12, 30424.473684210523], [1.60241574E12, 29190.809523809523], [1.60241736E12, 27564.124999999996], [1.60241544E12, 22307.086956521736], [1.60241706E12, 30638.000000000004], [1.60241676E12, 30812.842105263157], [1.60241646E12, 19379.83870967742], [1.60241616E12, 26518.954545454544], [1.60241586E12, 30417.85], [1.60241556E12, 28129.5], [1.60241688E12, 30062.75], [1.60241718E12, 25720.520000000004], [1.60241658E12, 26606.913043478267], [1.60241628E12, 24779.13636363636], [1.60241598E12, 29922.5], [1.60241568E12, 25304.130434782608], [1.60241742E12, 17585.454545454544], [1.602417E12, 30812.315789473683], [1.6024167E12, 35386.99999999999], [1.6024164E12, 25855.75], [1.6024161E12, 30284.380952380954], [1.6024158E12, 30776.47368421053], [1.6024173E12, 24522.304347826088], [1.6024155E12, 20655.689655172413], [1.60241682E12, 30749.699999999997], [1.60241724E12, 24048.874999999996], [1.60241652E12, 27170.349999999995], [1.60241622E12, 20889.387096774193], [1.60241592E12, 30427.9], [1.60241562E12, 36537.30000000001], [1.60241694E12, 29316.6], [1.60241712E12, 28003.454545454544]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241742E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17583.818181818184, "minX": 1.60241544E12, "maxY": 36535.75, "series": [{"data": [[1.60241664E12, 29049.333333333332], [1.60241634E12, 23649.148148148146], [1.60241604E12, 30423.36842105263], [1.60241574E12, 29189.714285714286], [1.60241736E12, 27561.916666666664], [1.60241544E12, 22303.043478260865], [1.60241706E12, 30636.55], [1.60241676E12, 30811.526315789477], [1.60241646E12, 19378.419354838716], [1.60241616E12, 26518.318181818184], [1.60241586E12, 30416.649999999998], [1.60241556E12, 28125.25], [1.60241688E12, 30061.449999999997], [1.60241718E12, 25719.88], [1.60241658E12, 26605.521739130436], [1.60241628E12, 24776.363636363636], [1.60241598E12, 29921.199999999997], [1.60241568E12, 25302.565217391308], [1.60241742E12, 17583.818181818184], [1.602417E12, 30811.21052631579], [1.6024167E12, 35386.21052631579], [1.6024164E12, 25852.041666666668], [1.6024161E12, 30283.2380952381], [1.6024158E12, 30775.473684210527], [1.6024173E12, 24518.217391304348], [1.6024155E12, 20654.24137931035], [1.60241682E12, 30748.549999999996], [1.60241724E12, 24047.916666666668], [1.60241652E12, 27168.600000000002], [1.60241622E12, 20886.548387096773], [1.60241592E12, 30426.900000000005], [1.60241562E12, 36535.75], [1.60241694E12, 29315.649999999998], [1.60241712E12, 28002.409090909092]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241742E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1739130434782609, "minX": 1.60241544E12, "maxY": 3.6521739130434785, "series": [{"data": [[1.60241664E12, 0.5], [1.60241634E12, 0.2962962962962964], [1.60241604E12, 0.42105263157894735], [1.60241574E12, 0.8095238095238098], [1.60241736E12, 0.6250000000000001], [1.60241544E12, 3.6521739130434785], [1.60241706E12, 0.6000000000000001], [1.60241676E12, 0.5263157894736842], [1.60241646E12, 0.38709677419354843], [1.60241616E12, 0.6363636363636364], [1.60241586E12, 0.75], [1.60241556E12, 0.8125], [1.60241688E12, 0.55], [1.60241718E12, 0.48], [1.60241658E12, 0.30434782608695654], [1.60241628E12, 0.22727272727272727], [1.60241598E12, 0.25000000000000006], [1.60241568E12, 0.1739130434782609], [1.60241742E12, 0.27272727272727276], [1.602417E12, 0.5789473684210527], [1.6024167E12, 0.6842105263157896], [1.6024164E12, 0.5416666666666667], [1.6024161E12, 0.6190476190476191], [1.6024158E12, 0.6842105263157895], [1.6024173E12, 0.34782608695652173], [1.6024155E12, 0.5172413793103449], [1.60241682E12, 0.8999999999999999], [1.60241724E12, 0.4166666666666667], [1.60241652E12, 0.5], [1.60241622E12, 0.5161290322580645], [1.60241592E12, 0.65], [1.60241562E12, 0.7], [1.60241694E12, 0.25], [1.60241712E12, 0.6818181818181818]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241742E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3300.0, "minX": 1.60241544E12, "maxY": 46322.0, "series": [{"data": [[1.60241664E12, 42829.0], [1.60241634E12, 32667.0], [1.60241604E12, 30757.0], [1.60241574E12, 31899.0], [1.60241736E12, 39263.0], [1.60241544E12, 29265.0], [1.60241706E12, 30949.0], [1.60241676E12, 31067.0], [1.60241646E12, 21997.0], [1.60241616E12, 29140.0], [1.60241586E12, 30728.0], [1.60241556E12, 42934.0], [1.60241688E12, 30781.0], [1.60241718E12, 28777.0], [1.60241658E12, 30372.0], [1.60241628E12, 32774.0], [1.60241598E12, 30631.0], [1.60241568E12, 28289.0], [1.60241742E12, 18042.0], [1.602417E12, 31063.0], [1.6024167E12, 46322.0], [1.6024164E12, 29693.0], [1.6024161E12, 30718.0], [1.6024158E12, 31152.0], [1.6024173E12, 30109.0], [1.6024155E12, 27120.0], [1.60241682E12, 30991.0], [1.60241724E12, 28533.0], [1.60241652E12, 33761.0], [1.60241622E12, 27248.0], [1.60241592E12, 30811.0], [1.60241562E12, 46118.0], [1.60241694E12, 30715.0], [1.60241712E12, 30273.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60241664E12, 23189.0], [1.60241634E12, 18008.0], [1.60241604E12, 30212.0], [1.60241574E12, 26078.0], [1.60241736E12, 17508.0], [1.60241544E12, 3300.0], [1.60241706E12, 30115.0], [1.60241676E12, 30440.0], [1.60241646E12, 18200.0], [1.60241616E12, 24441.0], [1.60241586E12, 30106.0], [1.60241556E12, 23001.0], [1.60241688E12, 28693.0], [1.60241718E12, 23167.0], [1.60241658E12, 24440.0], [1.60241628E12, 19003.0], [1.60241598E12, 29468.0], [1.60241568E12, 23350.0], [1.60241742E12, 17262.0], [1.602417E12, 30486.0], [1.6024167E12, 27471.0], [1.6024164E12, 22141.0], [1.6024161E12, 28152.0], [1.6024158E12, 30087.0], [1.6024173E12, 19669.0], [1.6024155E12, 18124.0], [1.60241682E12, 30519.0], [1.60241724E12, 21032.0], [1.60241652E12, 20525.0], [1.60241622E12, 17587.0], [1.60241592E12, 29991.0], [1.60241562E12, 26560.0], [1.60241694E12, 28270.0], [1.60241712E12, 24820.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60241664E12, 23189.0], [1.60241634E12, 18008.0], [1.60241604E12, 30212.0], [1.60241574E12, 26078.0], [1.60241736E12, 17508.0], [1.60241544E12, 3300.0], [1.60241706E12, 30115.0], [1.60241676E12, 30440.0], [1.60241646E12, 18200.0], [1.60241616E12, 24441.0], [1.60241586E12, 30106.0], [1.60241556E12, 23001.0], [1.60241688E12, 28693.0], [1.60241718E12, 23167.0], [1.60241658E12, 24440.0], [1.60241628E12, 19003.0], [1.60241598E12, 29468.0], [1.60241568E12, 23350.0], [1.60241742E12, 17262.0], [1.602417E12, 30486.0], [1.6024167E12, 27471.0], [1.6024164E12, 22141.0], [1.6024161E12, 28152.0], [1.6024158E12, 30087.0], [1.6024173E12, 19669.0], [1.6024155E12, 18124.0], [1.60241682E12, 30519.0], [1.60241724E12, 21032.0], [1.60241652E12, 20525.0], [1.60241622E12, 17587.0], [1.60241592E12, 29991.0], [1.60241562E12, 26560.0], [1.60241694E12, 28270.0], [1.60241712E12, 24820.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60241664E12, 23189.0], [1.60241634E12, 18008.0], [1.60241604E12, 30212.0], [1.60241574E12, 26078.0], [1.60241736E12, 17508.0], [1.60241544E12, 3300.0], [1.60241706E12, 30115.0], [1.60241676E12, 30440.0], [1.60241646E12, 18200.0], [1.60241616E12, 24441.0], [1.60241586E12, 30106.0], [1.60241556E12, 23001.0], [1.60241688E12, 28693.0], [1.60241718E12, 23167.0], [1.60241658E12, 24440.0], [1.60241628E12, 19003.0], [1.60241598E12, 29468.0], [1.60241568E12, 23350.0], [1.60241742E12, 17262.0], [1.602417E12, 30486.0], [1.6024167E12, 27471.0], [1.6024164E12, 22141.0], [1.6024161E12, 28152.0], [1.6024158E12, 30087.0], [1.6024173E12, 19669.0], [1.6024155E12, 18124.0], [1.60241682E12, 30519.0], [1.60241724E12, 21032.0], [1.60241652E12, 20525.0], [1.60241622E12, 17587.0], [1.60241592E12, 29991.0], [1.60241562E12, 26560.0], [1.60241694E12, 28270.0], [1.60241712E12, 24820.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60241664E12, 23189.0], [1.60241634E12, 18008.0], [1.60241604E12, 30212.0], [1.60241574E12, 26078.0], [1.60241736E12, 17508.0], [1.60241544E12, 3300.0], [1.60241706E12, 30115.0], [1.60241676E12, 30440.0], [1.60241646E12, 18200.0], [1.60241616E12, 24441.0], [1.60241586E12, 30106.0], [1.60241556E12, 23001.0], [1.60241688E12, 28693.0], [1.60241718E12, 23167.0], [1.60241658E12, 24440.0], [1.60241628E12, 19003.0], [1.60241598E12, 29468.0], [1.60241568E12, 23350.0], [1.60241742E12, 17262.0], [1.602417E12, 30486.0], [1.6024167E12, 27471.0], [1.6024164E12, 22141.0], [1.6024161E12, 28152.0], [1.6024158E12, 30087.0], [1.6024173E12, 19669.0], [1.6024155E12, 18124.0], [1.60241682E12, 30519.0], [1.60241724E12, 21032.0], [1.60241652E12, 20525.0], [1.60241622E12, 17587.0], [1.60241592E12, 29991.0], [1.60241562E12, 26560.0], [1.60241694E12, 28270.0], [1.60241712E12, 24820.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60241664E12, 26304.5], [1.60241634E12, 23230.0], [1.60241604E12, 30432.0], [1.60241574E12, 29000.0], [1.60241736E12, 29757.0], [1.60241544E12, 26783.0], [1.60241706E12, 30673.0], [1.60241676E12, 30866.0], [1.60241646E12, 19031.0], [1.60241616E12, 26627.5], [1.60241586E12, 30421.0], [1.60241556E12, 25161.0], [1.60241688E12, 30123.5], [1.60241718E12, 25799.0], [1.60241658E12, 25829.0], [1.60241628E12, 22971.5], [1.60241598E12, 29857.5], [1.60241568E12, 25300.0], [1.60241742E12, 17560.0], [1.602417E12, 30860.0], [1.6024167E12, 33267.0], [1.6024164E12, 25375.5], [1.6024161E12, 30505.0], [1.6024158E12, 30755.0], [1.6024173E12, 22761.0], [1.6024155E12, 20507.0], [1.60241682E12, 30755.0], [1.60241724E12, 23660.5], [1.60241652E12, 26360.5], [1.60241622E12, 19726.0], [1.60241592E12, 30495.0], [1.60241562E12, 34645.0], [1.60241694E12, 29480.5], [1.60241712E12, 27658.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241742E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28079.0, "minX": 1.0, "maxY": 28079.0, "series": [{"data": [[1.0, 28079.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28078.0, "minX": 1.0, "maxY": 28078.0, "series": [{"data": [[1.0, 28078.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60241538E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60241664E12, 0.3], [1.60241634E12, 0.45], [1.60241604E12, 0.31666666666666665], [1.60241574E12, 0.35], [1.60241736E12, 0.4], [1.60241544E12, 0.38333333333333336], [1.60241706E12, 0.3333333333333333], [1.60241676E12, 0.31666666666666665], [1.60241646E12, 0.5166666666666667], [1.60241616E12, 0.36666666666666664], [1.60241586E12, 0.3333333333333333], [1.60241556E12, 0.26666666666666666], [1.60241688E12, 0.3333333333333333], [1.60241718E12, 0.4166666666666667], [1.60241658E12, 0.38333333333333336], [1.60241628E12, 0.36666666666666664], [1.60241598E12, 0.3333333333333333], [1.60241568E12, 0.38333333333333336], [1.60241742E12, 0.016666666666666666], [1.60241538E12, 0.16666666666666666], [1.602417E12, 0.31666666666666665], [1.6024167E12, 0.31666666666666665], [1.6024164E12, 0.4], [1.6024161E12, 0.35], [1.6024158E12, 0.31666666666666665], [1.6024173E12, 0.38333333333333336], [1.6024155E12, 0.48333333333333334], [1.60241682E12, 0.3333333333333333], [1.60241724E12, 0.4], [1.60241652E12, 0.3333333333333333], [1.60241622E12, 0.5166666666666667], [1.60241592E12, 0.3333333333333333], [1.60241562E12, 0.3333333333333333], [1.60241694E12, 0.3333333333333333], [1.60241712E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241742E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.60241544E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60241664E12, 0.3], [1.60241634E12, 0.45], [1.60241604E12, 0.31666666666666665], [1.60241574E12, 0.35], [1.60241736E12, 0.4], [1.60241544E12, 0.38333333333333336], [1.60241706E12, 0.3333333333333333], [1.60241676E12, 0.31666666666666665], [1.60241646E12, 0.5166666666666667], [1.60241616E12, 0.36666666666666664], [1.60241586E12, 0.3333333333333333], [1.60241556E12, 0.26666666666666666], [1.60241688E12, 0.3333333333333333], [1.60241718E12, 0.4166666666666667], [1.60241658E12, 0.38333333333333336], [1.60241628E12, 0.36666666666666664], [1.60241598E12, 0.3333333333333333], [1.60241568E12, 0.38333333333333336], [1.60241742E12, 0.18333333333333332], [1.602417E12, 0.31666666666666665], [1.6024167E12, 0.31666666666666665], [1.6024164E12, 0.4], [1.6024161E12, 0.35], [1.6024158E12, 0.31666666666666665], [1.6024173E12, 0.38333333333333336], [1.6024155E12, 0.48333333333333334], [1.60241682E12, 0.3333333333333333], [1.60241724E12, 0.4], [1.60241652E12, 0.3333333333333333], [1.60241622E12, 0.5166666666666667], [1.60241592E12, 0.3333333333333333], [1.60241562E12, 0.3333333333333333], [1.60241694E12, 0.3333333333333333], [1.60241712E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60241742E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.60241544E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60241664E12, 0.3], [1.60241634E12, 0.45], [1.60241604E12, 0.31666666666666665], [1.60241574E12, 0.35], [1.60241736E12, 0.4], [1.60241544E12, 0.38333333333333336], [1.60241706E12, 0.3333333333333333], [1.60241676E12, 0.31666666666666665], [1.60241646E12, 0.5166666666666667], [1.60241616E12, 0.36666666666666664], [1.60241586E12, 0.3333333333333333], [1.60241556E12, 0.26666666666666666], [1.60241688E12, 0.3333333333333333], [1.60241718E12, 0.4166666666666667], [1.60241658E12, 0.38333333333333336], [1.60241628E12, 0.36666666666666664], [1.60241598E12, 0.3333333333333333], [1.60241568E12, 0.38333333333333336], [1.60241742E12, 0.18333333333333332], [1.602417E12, 0.31666666666666665], [1.6024167E12, 0.31666666666666665], [1.6024164E12, 0.4], [1.6024161E12, 0.35], [1.6024158E12, 0.31666666666666665], [1.6024173E12, 0.38333333333333336], [1.6024155E12, 0.48333333333333334], [1.60241682E12, 0.3333333333333333], [1.60241724E12, 0.4], [1.60241652E12, 0.3333333333333333], [1.60241622E12, 0.5166666666666667], [1.60241592E12, 0.3333333333333333], [1.60241562E12, 0.3333333333333333], [1.60241694E12, 0.3333333333333333], [1.60241712E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241742E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.60241544E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60241664E12, 0.3], [1.60241634E12, 0.45], [1.60241604E12, 0.31666666666666665], [1.60241574E12, 0.35], [1.60241736E12, 0.4], [1.60241544E12, 0.38333333333333336], [1.60241706E12, 0.3333333333333333], [1.60241676E12, 0.31666666666666665], [1.60241646E12, 0.5166666666666667], [1.60241616E12, 0.36666666666666664], [1.60241586E12, 0.3333333333333333], [1.60241556E12, 0.26666666666666666], [1.60241688E12, 0.3333333333333333], [1.60241718E12, 0.4166666666666667], [1.60241658E12, 0.38333333333333336], [1.60241628E12, 0.36666666666666664], [1.60241598E12, 0.3333333333333333], [1.60241568E12, 0.38333333333333336], [1.60241742E12, 0.18333333333333332], [1.602417E12, 0.31666666666666665], [1.6024167E12, 0.31666666666666665], [1.6024164E12, 0.4], [1.6024161E12, 0.35], [1.6024158E12, 0.31666666666666665], [1.6024173E12, 0.38333333333333336], [1.6024155E12, 0.48333333333333334], [1.60241682E12, 0.3333333333333333], [1.60241724E12, 0.4], [1.60241652E12, 0.3333333333333333], [1.60241622E12, 0.5166666666666667], [1.60241592E12, 0.3333333333333333], [1.60241562E12, 0.3333333333333333], [1.60241694E12, 0.3333333333333333], [1.60241712E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60241742E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

