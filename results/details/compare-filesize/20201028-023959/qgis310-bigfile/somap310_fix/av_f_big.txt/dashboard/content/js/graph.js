/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3059.0, "minX": 0.0, "maxY": 44870.0, "series": [{"data": [[0.0, 3059.0], [0.1, 3059.0], [0.2, 5213.0], [0.3, 8272.0], [0.4, 8272.0], [0.5, 11217.0], [0.6, 13689.0], [0.7, 16296.0], [0.8, 16296.0], [0.9, 16363.0], [1.0, 16507.0], [1.1, 16525.0], [1.2, 16525.0], [1.3, 16584.0], [1.4, 16735.0], [1.5, 16946.0], [1.6, 16946.0], [1.7, 16951.0], [1.8, 16966.0], [1.9, 16966.0], [2.0, 16981.0], [2.1, 16983.0], [2.2, 16987.0], [2.3, 16987.0], [2.4, 16987.0], [2.5, 17023.0], [2.6, 17053.0], [2.7, 17053.0], [2.8, 17080.0], [2.9, 17087.0], [3.0, 17089.0], [3.1, 17089.0], [3.2, 17144.0], [3.3, 17163.0], [3.4, 17163.0], [3.5, 17184.0], [3.6, 17215.0], [3.7, 17234.0], [3.8, 17234.0], [3.9, 17269.0], [4.0, 17350.0], [4.1, 17351.0], [4.2, 17351.0], [4.3, 17404.0], [4.4, 17423.0], [4.5, 17434.0], [4.6, 17434.0], [4.7, 17440.0], [4.8, 17451.0], [4.9, 17461.0], [5.0, 17461.0], [5.1, 17483.0], [5.2, 17506.0], [5.3, 17506.0], [5.4, 17514.0], [5.5, 17543.0], [5.6, 17545.0], [5.7, 17545.0], [5.8, 17558.0], [5.9, 17562.0], [6.0, 17599.0], [6.1, 17599.0], [6.2, 17604.0], [6.3, 17647.0], [6.4, 17650.0], [6.5, 17650.0], [6.6, 17664.0], [6.7, 17694.0], [6.8, 17694.0], [6.9, 17707.0], [7.0, 17777.0], [7.1, 17835.0], [7.2, 17835.0], [7.3, 17917.0], [7.4, 17954.0], [7.5, 17956.0], [7.6, 17956.0], [7.7, 18023.0], [7.8, 18035.0], [7.9, 18115.0], [8.0, 18115.0], [8.1, 18165.0], [8.2, 18172.0], [8.3, 18190.0], [8.4, 18190.0], [8.5, 18207.0], [8.6, 18207.0], [8.7, 18207.0], [8.8, 18240.0], [8.9, 18283.0], [9.0, 18309.0], [9.1, 18309.0], [9.2, 18366.0], [9.3, 18416.0], [9.4, 18454.0], [9.5, 18454.0], [9.6, 18474.0], [9.7, 18509.0], [9.8, 18523.0], [9.9, 18523.0], [10.0, 18547.0], [10.1, 18659.0], [10.2, 18659.0], [10.3, 18681.0], [10.4, 18681.0], [10.5, 18762.0], [10.6, 18762.0], [10.7, 18772.0], [10.8, 18876.0], [10.9, 18921.0], [11.0, 18921.0], [11.1, 18936.0], [11.2, 18971.0], [11.3, 19019.0], [11.4, 19019.0], [11.5, 19034.0], [11.6, 19040.0], [11.7, 19040.0], [11.8, 19067.0], [11.9, 19088.0], [12.0, 19179.0], [12.1, 19179.0], [12.2, 19237.0], [12.3, 19272.0], [12.4, 19299.0], [12.5, 19299.0], [12.6, 19322.0], [12.7, 19346.0], [12.8, 19418.0], [12.9, 19418.0], [13.0, 19488.0], [13.1, 19509.0], [13.2, 19551.0], [13.3, 19551.0], [13.4, 19566.0], [13.5, 19571.0], [13.6, 19571.0], [13.7, 19680.0], [13.8, 19782.0], [13.9, 19801.0], [14.0, 19801.0], [14.1, 19819.0], [14.2, 19847.0], [14.3, 19879.0], [14.4, 19879.0], [14.5, 19919.0], [14.6, 19929.0], [14.7, 19957.0], [14.8, 19957.0], [14.9, 19958.0], [15.0, 20064.0], [15.1, 20064.0], [15.2, 20109.0], [15.3, 20141.0], [15.4, 20171.0], [15.5, 20171.0], [15.6, 20172.0], [15.7, 20193.0], [15.8, 20352.0], [15.9, 20352.0], [16.0, 20392.0], [16.1, 20399.0], [16.2, 20453.0], [16.3, 20453.0], [16.4, 20521.0], [16.5, 20554.0], [16.6, 20599.0], [16.7, 20599.0], [16.8, 20681.0], [16.9, 20688.0], [17.0, 20688.0], [17.1, 20928.0], [17.2, 21054.0], [17.3, 21118.0], [17.4, 21118.0], [17.5, 21119.0], [17.6, 21170.0], [17.7, 21184.0], [17.8, 21184.0], [17.9, 21203.0], [18.0, 21292.0], [18.1, 21406.0], [18.2, 21406.0], [18.3, 21444.0], [18.4, 21497.0], [18.5, 21497.0], [18.6, 21511.0], [18.7, 21686.0], [18.8, 21730.0], [18.9, 21730.0], [19.0, 21778.0], [19.1, 21836.0], [19.2, 21836.0], [19.3, 21836.0], [19.4, 21892.0], [19.5, 21916.0], [19.6, 21930.0], [19.7, 21930.0], [19.8, 21932.0], [19.9, 21997.0], [20.0, 22003.0], [20.1, 22003.0], [20.2, 22006.0], [20.3, 22010.0], [20.4, 22010.0], [20.5, 22021.0], [20.6, 22028.0], [20.7, 22060.0], [20.8, 22060.0], [20.9, 22067.0], [21.0, 22090.0], [21.1, 22120.0], [21.2, 22120.0], [21.3, 22126.0], [21.4, 22329.0], [21.5, 22355.0], [21.6, 22355.0], [21.7, 22367.0], [21.8, 22380.0], [21.9, 22380.0], [22.0, 22382.0], [22.1, 22388.0], [22.2, 22424.0], [22.3, 22424.0], [22.4, 22426.0], [22.5, 22439.0], [22.6, 22444.0], [22.7, 22444.0], [22.8, 22448.0], [22.9, 22500.0], [23.0, 22513.0], [23.1, 22513.0], [23.2, 22522.0], [23.3, 22538.0], [23.4, 22538.0], [23.5, 22558.0], [23.6, 22595.0], [23.7, 22600.0], [23.8, 22600.0], [23.9, 22640.0], [24.0, 22733.0], [24.1, 22737.0], [24.2, 22737.0], [24.3, 22747.0], [24.4, 22816.0], [24.5, 22819.0], [24.6, 22819.0], [24.7, 22943.0], [24.8, 22978.0], [24.9, 23008.0], [25.0, 23008.0], [25.1, 23049.0], [25.2, 23064.0], [25.3, 23064.0], [25.4, 23078.0], [25.5, 23085.0], [25.6, 23170.0], [25.7, 23170.0], [25.8, 23194.0], [25.9, 23256.0], [26.0, 23312.0], [26.1, 23312.0], [26.2, 23358.0], [26.3, 23373.0], [26.4, 23375.0], [26.5, 23375.0], [26.6, 23439.0], [26.7, 23469.0], [26.8, 23469.0], [26.9, 23470.0], [27.0, 23504.0], [27.1, 23522.0], [27.2, 23522.0], [27.3, 23544.0], [27.4, 23578.0], [27.5, 23584.0], [27.6, 23584.0], [27.7, 23592.0], [27.8, 23601.0], [27.9, 23617.0], [28.0, 23617.0], [28.1, 23638.0], [28.2, 23661.0], [28.3, 23665.0], [28.4, 23665.0], [28.5, 23673.0], [28.6, 23703.0], [28.7, 23703.0], [28.8, 23709.0], [28.9, 23712.0], [29.0, 23723.0], [29.1, 23723.0], [29.2, 23724.0], [29.3, 23750.0], [29.4, 23773.0], [29.5, 23773.0], [29.6, 23774.0], [29.7, 23807.0], [29.8, 23832.0], [29.9, 23832.0], [30.0, 23860.0], [30.1, 23872.0], [30.2, 23872.0], [30.3, 23878.0], [30.4, 23889.0], [30.5, 23935.0], [30.6, 23935.0], [30.7, 23956.0], [30.8, 23966.0], [30.9, 23975.0], [31.0, 23975.0], [31.1, 23975.0], [31.2, 23999.0], [31.3, 24011.0], [31.4, 24011.0], [31.5, 24014.0], [31.6, 24054.0], [31.7, 24054.0], [31.8, 24060.0], [31.9, 24081.0], [32.0, 24091.0], [32.1, 24091.0], [32.2, 24108.0], [32.3, 24130.0], [32.4, 24132.0], [32.5, 24132.0], [32.6, 24155.0], [32.7, 24172.0], [32.8, 24173.0], [32.9, 24173.0], [33.0, 24182.0], [33.1, 24196.0], [33.2, 24201.0], [33.3, 24201.0], [33.4, 24223.0], [33.5, 24242.0], [33.6, 24242.0], [33.7, 24263.0], [33.8, 24298.0], [33.9, 24307.0], [34.0, 24307.0], [34.1, 24308.0], [34.2, 24310.0], [34.3, 24320.0], [34.4, 24320.0], [34.5, 24359.0], [34.6, 24394.0], [34.7, 24408.0], [34.8, 24408.0], [34.9, 24417.0], [35.0, 24432.0], [35.1, 24432.0], [35.2, 24446.0], [35.3, 24452.0], [35.4, 24513.0], [35.5, 24513.0], [35.6, 24515.0], [35.7, 24526.0], [35.8, 24531.0], [35.9, 24531.0], [36.0, 24607.0], [36.1, 24676.0], [36.2, 24689.0], [36.3, 24689.0], [36.4, 24701.0], [36.5, 24703.0], [36.6, 24720.0], [36.7, 24720.0], [36.8, 24729.0], [36.9, 24774.0], [37.0, 24774.0], [37.1, 24775.0], [37.2, 24870.0], [37.3, 24876.0], [37.4, 24876.0], [37.5, 24914.0], [37.6, 24916.0], [37.7, 24952.0], [37.8, 24952.0], [37.9, 24952.0], [38.0, 24972.0], [38.1, 24988.0], [38.2, 24988.0], [38.3, 25003.0], [38.4, 25047.0], [38.5, 25047.0], [38.6, 25062.0], [38.7, 25064.0], [38.8, 25111.0], [38.9, 25111.0], [39.0, 25119.0], [39.1, 25132.0], [39.2, 25143.0], [39.3, 25143.0], [39.4, 25145.0], [39.5, 25147.0], [39.6, 25191.0], [39.7, 25191.0], [39.8, 25199.0], [39.9, 25201.0], [40.0, 25234.0], [40.1, 25234.0], [40.2, 25266.0], [40.3, 25291.0], [40.4, 25291.0], [40.5, 25304.0], [40.6, 25309.0], [40.7, 25312.0], [40.8, 25312.0], [40.9, 25337.0], [41.0, 25381.0], [41.1, 25405.0], [41.2, 25405.0], [41.3, 25416.0], [41.4, 25532.0], [41.5, 25533.0], [41.6, 25533.0], [41.7, 25557.0], [41.8, 25569.0], [41.9, 25569.0], [42.0, 25581.0], [42.1, 25612.0], [42.2, 25637.0], [42.3, 25637.0], [42.4, 25639.0], [42.5, 25646.0], [42.6, 25647.0], [42.7, 25647.0], [42.8, 25686.0], [42.9, 25700.0], [43.0, 25722.0], [43.1, 25722.0], [43.2, 25748.0], [43.3, 25796.0], [43.4, 25796.0], [43.5, 25802.0], [43.6, 25808.0], [43.7, 25839.0], [43.8, 25839.0], [43.9, 25867.0], [44.0, 25907.0], [44.1, 25943.0], [44.2, 25943.0], [44.3, 25953.0], [44.4, 25957.0], [44.5, 25966.0], [44.6, 25966.0], [44.7, 26031.0], [44.8, 26043.0], [44.9, 26049.0], [45.0, 26049.0], [45.1, 26071.0], [45.2, 26094.0], [45.3, 26094.0], [45.4, 26094.0], [45.5, 26095.0], [45.6, 26101.0], [45.7, 26101.0], [45.8, 26111.0], [45.9, 26154.0], [46.0, 26155.0], [46.1, 26155.0], [46.2, 26191.0], [46.3, 26206.0], [46.4, 26298.0], [46.5, 26298.0], [46.6, 26313.0], [46.7, 26326.0], [46.8, 26326.0], [46.9, 26342.0], [47.0, 26369.0], [47.1, 26495.0], [47.2, 26495.0], [47.3, 26502.0], [47.4, 26515.0], [47.5, 26521.0], [47.6, 26521.0], [47.7, 26528.0], [47.8, 26554.0], [47.9, 26608.0], [48.0, 26608.0], [48.1, 26614.0], [48.2, 26625.0], [48.3, 26673.0], [48.4, 26673.0], [48.5, 26715.0], [48.6, 26751.0], [48.7, 26751.0], [48.8, 26762.0], [48.9, 26785.0], [49.0, 26841.0], [49.1, 26841.0], [49.2, 26853.0], [49.3, 26864.0], [49.4, 26868.0], [49.5, 26868.0], [49.6, 26885.0], [49.7, 26925.0], [49.8, 26973.0], [49.9, 26973.0], [50.0, 26986.0], [50.1, 27025.0], [50.2, 27025.0], [50.3, 27043.0], [50.4, 27107.0], [50.5, 27139.0], [50.6, 27139.0], [50.7, 27151.0], [50.8, 27214.0], [50.9, 27217.0], [51.0, 27217.0], [51.1, 27236.0], [51.2, 27236.0], [51.3, 27256.0], [51.4, 27256.0], [51.5, 27283.0], [51.6, 27297.0], [51.7, 27297.0], [51.8, 27489.0], [51.9, 27501.0], [52.0, 27505.0], [52.1, 27505.0], [52.2, 27531.0], [52.3, 27564.0], [52.4, 27564.0], [52.5, 27564.0], [52.6, 27583.0], [52.7, 27608.0], [52.8, 27663.0], [52.9, 27663.0], [53.0, 27666.0], [53.1, 27676.0], [53.2, 27685.0], [53.3, 27685.0], [53.4, 27688.0], [53.5, 27728.0], [53.6, 27728.0], [53.7, 27731.0], [53.8, 27734.0], [53.9, 27765.0], [54.0, 27765.0], [54.1, 27801.0], [54.2, 27820.0], [54.3, 27829.0], [54.4, 27829.0], [54.5, 27833.0], [54.6, 27848.0], [54.7, 27854.0], [54.8, 27854.0], [54.9, 27865.0], [55.0, 27885.0], [55.1, 27885.0], [55.2, 27892.0], [55.3, 27920.0], [55.4, 27933.0], [55.5, 27933.0], [55.6, 27948.0], [55.7, 27949.0], [55.8, 27954.0], [55.9, 27954.0], [56.0, 27985.0], [56.1, 27990.0], [56.2, 27995.0], [56.3, 27995.0], [56.4, 27995.0], [56.5, 28007.0], [56.6, 28011.0], [56.7, 28011.0], [56.8, 28014.0], [56.9, 28015.0], [57.0, 28015.0], [57.1, 28019.0], [57.2, 28031.0], [57.3, 28042.0], [57.4, 28042.0], [57.5, 28048.0], [57.6, 28050.0], [57.7, 28078.0], [57.8, 28078.0], [57.9, 28083.0], [58.0, 28084.0], [58.1, 28098.0], [58.2, 28098.0], [58.3, 28153.0], [58.4, 28200.0], [58.5, 28200.0], [58.6, 28201.0], [58.7, 28229.0], [58.8, 28236.0], [58.9, 28236.0], [59.0, 28244.0], [59.1, 28268.0], [59.2, 28306.0], [59.3, 28306.0], [59.4, 28318.0], [59.5, 28340.0], [59.6, 28340.0], [59.7, 28340.0], [59.8, 28349.0], [59.9, 28380.0], [60.0, 28382.0], [60.1, 28382.0], [60.2, 28419.0], [60.3, 28484.0], [60.4, 28484.0], [60.5, 28511.0], [60.6, 28528.0], [60.7, 28553.0], [60.8, 28553.0], [60.9, 28576.0], [61.0, 28576.0], [61.1, 28584.0], [61.2, 28584.0], [61.3, 28589.0], [61.4, 28599.0], [61.5, 28600.0], [61.6, 28600.0], [61.7, 28606.0], [61.8, 28647.0], [61.9, 28647.0], [62.0, 28649.0], [62.1, 28649.0], [62.2, 28661.0], [62.3, 28661.0], [62.4, 28672.0], [62.5, 28679.0], [62.6, 28687.0], [62.7, 28687.0], [62.8, 28688.0], [62.9, 28692.0], [63.0, 28704.0], [63.1, 28704.0], [63.2, 28705.0], [63.3, 28727.0], [63.4, 28727.0], [63.5, 28733.0], [63.6, 28740.0], [63.7, 28749.0], [63.8, 28749.0], [63.9, 28751.0], [64.0, 28756.0], [64.1, 28774.0], [64.2, 28774.0], [64.3, 28781.0], [64.4, 28794.0], [64.5, 28805.0], [64.6, 28805.0], [64.7, 28806.0], [64.8, 28806.0], [64.9, 28812.0], [65.0, 28812.0], [65.1, 28817.0], [65.2, 28822.0], [65.3, 28822.0], [65.4, 28830.0], [65.5, 28836.0], [65.6, 28838.0], [65.7, 28838.0], [65.8, 28843.0], [65.9, 28849.0], [66.0, 28855.0], [66.1, 28855.0], [66.2, 28856.0], [66.3, 28862.0], [66.4, 28862.0], [66.5, 28862.0], [66.6, 28864.0], [66.7, 28867.0], [66.8, 28867.0], [66.9, 28878.0], [67.0, 28889.0], [67.1, 28897.0], [67.2, 28897.0], [67.3, 28900.0], [67.4, 28908.0], [67.5, 28909.0], [67.6, 28909.0], [67.7, 28912.0], [67.8, 28912.0], [67.9, 28915.0], [68.0, 28915.0], [68.1, 28917.0], [68.2, 28924.0], [68.3, 28929.0], [68.4, 28929.0], [68.5, 28930.0], [68.6, 28933.0], [68.7, 28933.0], [68.8, 28934.0], [68.9, 28938.0], [69.0, 28942.0], [69.1, 28942.0], [69.2, 28942.0], [69.3, 28943.0], [69.4, 28955.0], [69.5, 28955.0], [69.6, 28958.0], [69.7, 28960.0], [69.8, 28960.0], [69.9, 28960.0], [70.0, 28960.0], [70.1, 28960.0], [70.2, 28960.0], [70.3, 28961.0], [70.4, 28962.0], [70.5, 28967.0], [70.6, 28967.0], [70.7, 28968.0], [70.8, 28968.0], [70.9, 28969.0], [71.0, 28969.0], [71.1, 28969.0], [71.2, 28971.0], [71.3, 28973.0], [71.4, 28973.0], [71.5, 28975.0], [71.6, 28976.0], [71.7, 28976.0], [71.8, 28976.0], [71.9, 28977.0], [72.0, 28977.0], [72.1, 28977.0], [72.2, 28978.0], [72.3, 28980.0], [72.4, 28982.0], [72.5, 28982.0], [72.6, 28985.0], [72.7, 28986.0], [72.8, 28991.0], [72.9, 28991.0], [73.0, 28991.0], [73.1, 28996.0], [73.2, 28998.0], [73.3, 28998.0], [73.4, 28999.0], [73.5, 29000.0], [73.6, 29000.0], [73.7, 29003.0], [73.8, 29005.0], [73.9, 29007.0], [74.0, 29007.0], [74.1, 29007.0], [74.2, 29009.0], [74.3, 29010.0], [74.4, 29010.0], [74.5, 29011.0], [74.6, 29013.0], [74.7, 29016.0], [74.8, 29016.0], [74.9, 29017.0], [75.0, 29021.0], [75.1, 29021.0], [75.2, 29024.0], [75.3, 29028.0], [75.4, 29030.0], [75.5, 29030.0], [75.6, 29031.0], [75.7, 29039.0], [75.8, 29040.0], [75.9, 29040.0], [76.0, 29042.0], [76.1, 29044.0], [76.2, 29044.0], [76.3, 29044.0], [76.4, 29045.0], [76.5, 29046.0], [76.6, 29052.0], [76.7, 29052.0], [76.8, 29054.0], [76.9, 29064.0], [77.0, 29064.0], [77.1, 29067.0], [77.2, 29069.0], [77.3, 29070.0], [77.4, 29070.0], [77.5, 29072.0], [77.6, 29081.0], [77.7, 29083.0], [77.8, 29083.0], [77.9, 29085.0], [78.0, 29085.0], [78.1, 29086.0], [78.2, 29086.0], [78.3, 29087.0], [78.4, 29090.0], [78.5, 29090.0], [78.6, 29090.0], [78.7, 29091.0], [78.8, 29093.0], [78.9, 29093.0], [79.0, 29101.0], [79.1, 29105.0], [79.2, 29106.0], [79.3, 29106.0], [79.4, 29107.0], [79.5, 29107.0], [79.6, 29108.0], [79.7, 29108.0], [79.8, 29111.0], [79.9, 29113.0], [80.0, 29116.0], [80.1, 29116.0], [80.2, 29116.0], [80.3, 29119.0], [80.4, 29119.0], [80.5, 29122.0], [80.6, 29129.0], [80.7, 29131.0], [80.8, 29131.0], [80.9, 29148.0], [81.0, 29155.0], [81.1, 29155.0], [81.2, 29155.0], [81.3, 29158.0], [81.4, 29166.0], [81.5, 29168.0], [81.6, 29168.0], [81.7, 29174.0], [81.8, 29187.0], [81.9, 29187.0], [82.0, 29193.0], [82.1, 29195.0], [82.2, 29196.0], [82.3, 29196.0], [82.4, 29201.0], [82.5, 29202.0], [82.6, 29205.0], [82.7, 29205.0], [82.8, 29205.0], [82.9, 29213.0], [83.0, 29216.0], [83.1, 29216.0], [83.2, 29217.0], [83.3, 29224.0], [83.4, 29224.0], [83.5, 29224.0], [83.6, 29231.0], [83.7, 29234.0], [83.8, 29234.0], [83.9, 29235.0], [84.0, 29236.0], [84.1, 29239.0], [84.2, 29239.0], [84.3, 29240.0], [84.4, 29249.0], [84.5, 29250.0], [84.6, 29250.0], [84.7, 29256.0], [84.8, 29276.0], [84.9, 29291.0], [85.0, 29291.0], [85.1, 29292.0], [85.2, 29293.0], [85.3, 29293.0], [85.4, 29296.0], [85.5, 29306.0], [85.6, 29307.0], [85.7, 29307.0], [85.8, 29317.0], [85.9, 29320.0], [86.0, 29322.0], [86.1, 29322.0], [86.2, 29326.0], [86.3, 29336.0], [86.4, 29338.0], [86.5, 29338.0], [86.6, 29339.0], [86.7, 29350.0], [86.8, 29350.0], [86.9, 29354.0], [87.0, 29355.0], [87.1, 29355.0], [87.2, 29355.0], [87.3, 29357.0], [87.4, 29377.0], [87.5, 29381.0], [87.6, 29381.0], [87.7, 29382.0], [87.8, 29392.0], [87.9, 29396.0], [88.0, 29396.0], [88.1, 29397.0], [88.2, 29406.0], [88.3, 29407.0], [88.4, 29407.0], [88.5, 29413.0], [88.6, 29424.0], [88.7, 29424.0], [88.8, 29427.0], [88.9, 29437.0], [89.0, 29439.0], [89.1, 29439.0], [89.2, 29442.0], [89.3, 29452.0], [89.4, 29460.0], [89.5, 29460.0], [89.6, 29470.0], [89.7, 29476.0], [89.8, 29484.0], [89.9, 29484.0], [90.0, 29485.0], [90.1, 29489.0], [90.2, 29489.0], [90.3, 29493.0], [90.4, 29495.0], [90.5, 29504.0], [90.6, 29504.0], [90.7, 29507.0], [90.8, 29518.0], [90.9, 29518.0], [91.0, 29518.0], [91.1, 29522.0], [91.2, 29536.0], [91.3, 29561.0], [91.4, 29561.0], [91.5, 29569.0], [91.6, 29571.0], [91.7, 29571.0], [91.8, 29619.0], [91.9, 29623.0], [92.0, 29625.0], [92.1, 29625.0], [92.2, 29628.0], [92.3, 29671.0], [92.4, 29681.0], [92.5, 29681.0], [92.6, 29689.0], [92.7, 29751.0], [92.8, 29782.0], [92.9, 29782.0], [93.0, 29791.0], [93.1, 29984.0], [93.2, 30160.0], [93.3, 30160.0], [93.4, 30460.0], [93.5, 30671.0], [93.6, 30671.0], [93.7, 30741.0], [93.8, 30960.0], [93.9, 31016.0], [94.0, 31016.0], [94.1, 31093.0], [94.2, 31122.0], [94.3, 31183.0], [94.4, 31183.0], [94.5, 31194.0], [94.6, 31248.0], [94.7, 31635.0], [94.8, 31635.0], [94.9, 31661.0], [95.0, 31669.0], [95.1, 31669.0], [95.2, 31709.0], [95.3, 32184.0], [95.4, 32551.0], [95.5, 32551.0], [95.6, 32628.0], [95.7, 32843.0], [95.8, 33316.0], [95.9, 33316.0], [96.0, 33437.0], [96.1, 33470.0], [96.2, 33832.0], [96.3, 33832.0], [96.4, 34276.0], [96.5, 34330.0], [96.6, 34363.0], [96.7, 34363.0], [96.8, 35438.0], [96.9, 35809.0], [97.0, 35809.0], [97.1, 35829.0], [97.2, 35950.0], [97.3, 36266.0], [97.4, 36266.0], [97.5, 36936.0], [97.6, 37280.0], [97.7, 38465.0], [97.8, 38465.0], [97.9, 38544.0], [98.0, 39143.0], [98.1, 39460.0], [98.2, 39460.0], [98.3, 41150.0], [98.4, 41591.0], [98.5, 41591.0], [98.6, 41644.0], [98.7, 42350.0], [98.8, 42377.0], [98.9, 42377.0], [99.0, 43121.0], [99.1, 43366.0], [99.2, 43466.0], [99.3, 43466.0], [99.4, 43974.0], [99.5, 44037.0], [99.6, 44391.0], [99.7, 44391.0], [99.8, 44650.0], [99.9, 44870.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 46.0, "series": [{"data": [[34300.0, 2.0], [33300.0, 1.0], [35900.0, 1.0], [38500.0, 1.0], [36900.0, 1.0], [39100.0, 1.0], [41500.0, 1.0], [42300.0, 2.0], [41100.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [44300.0, 1.0], [43300.0, 1.0], [3000.0, 1.0], [5200.0, 1.0], [8200.0, 1.0], [11200.0, 1.0], [13600.0, 1.0], [16300.0, 1.0], [16200.0, 1.0], [16900.0, 7.0], [17300.0, 2.0], [17400.0, 7.0], [17200.0, 3.0], [17100.0, 3.0], [17000.0, 5.0], [16700.0, 1.0], [16500.0, 3.0], [18400.0, 3.0], [18100.0, 4.0], [18200.0, 4.0], [17900.0, 3.0], [17500.0, 7.0], [17700.0, 2.0], [17800.0, 1.0], [18000.0, 2.0], [18300.0, 2.0], [17600.0, 5.0], [18500.0, 3.0], [19100.0, 1.0], [18800.0, 1.0], [18700.0, 2.0], [18600.0, 3.0], [18900.0, 3.0], [19300.0, 2.0], [19400.0, 2.0], [19000.0, 5.0], [19200.0, 3.0], [20300.0, 3.0], [20100.0, 5.0], [19800.0, 4.0], [19500.0, 4.0], [20000.0, 1.0], [19700.0, 1.0], [19900.0, 4.0], [19600.0, 1.0], [20400.0, 1.0], [21100.0, 4.0], [20600.0, 2.0], [20500.0, 3.0], [21200.0, 2.0], [21400.0, 3.0], [21500.0, 1.0], [21000.0, 1.0], [20900.0, 1.0], [21700.0, 2.0], [21900.0, 4.0], [22300.0, 6.0], [22100.0, 2.0], [22000.0, 8.0], [22400.0, 5.0], [22500.0, 6.0], [21800.0, 3.0], [21600.0, 1.0], [22700.0, 3.0], [23400.0, 3.0], [23300.0, 4.0], [23500.0, 6.0], [22600.0, 2.0], [23000.0, 5.0], [22900.0, 2.0], [23100.0, 2.0], [22800.0, 2.0], [23200.0, 1.0], [23700.0, 8.0], [23900.0, 6.0], [24400.0, 5.0], [23800.0, 6.0], [24200.0, 5.0], [24000.0, 6.0], [24100.0, 8.0], [24300.0, 6.0], [23600.0, 6.0], [24500.0, 4.0], [25500.0, 5.0], [24600.0, 3.0], [25100.0, 8.0], [25000.0, 4.0], [24900.0, 6.0], [25200.0, 4.0], [25400.0, 2.0], [25300.0, 5.0], [24700.0, 6.0], [24800.0, 2.0], [26500.0, 5.0], [26000.0, 7.0], [26100.0, 5.0], [26600.0, 4.0], [26300.0, 4.0], [26200.0, 2.0], [25700.0, 4.0], [25600.0, 6.0], [25900.0, 5.0], [26400.0, 1.0], [25800.0, 4.0], [27500.0, 6.0], [27600.0, 6.0], [26900.0, 3.0], [26700.0, 4.0], [26800.0, 5.0], [27200.0, 7.0], [27100.0, 3.0], [27000.0, 2.0], [27400.0, 1.0], [27800.0, 9.0], [28000.0, 13.0], [28600.0, 11.0], [28300.0, 7.0], [28200.0, 6.0], [27900.0, 9.0], [27700.0, 4.0], [28100.0, 1.0], [28500.0, 8.0], [28400.0, 2.0], [28800.0, 20.0], [29600.0, 7.0], [28700.0, 11.0], [29100.0, 25.0], [29000.0, 40.0], [28900.0, 46.0], [29200.0, 23.0], [29500.0, 9.0], [29400.0, 17.0], [29300.0, 20.0], [30700.0, 1.0], [30600.0, 1.0], [30400.0, 1.0], [29700.0, 3.0], [29900.0, 1.0], [30100.0, 1.0], [31700.0, 1.0], [31200.0, 1.0], [31100.0, 3.0], [31000.0, 2.0], [30900.0, 1.0], [31600.0, 3.0], [32500.0, 1.0], [32600.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [33400.0, 2.0], [34200.0, 1.0], [32800.0, 1.0], [36200.0, 1.0], [35400.0, 1.0], [35800.0, 2.0], [38400.0, 1.0], [37200.0, 1.0], [39400.0, 1.0], [41600.0, 1.0], [43400.0, 1.0], [44800.0, 1.0], [44600.0, 1.0], [44000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.7857142857142865, "minX": 1.60385292E12, "maxY": 10.0, "series": [{"data": [[1.60385316E12, 10.0], [1.60385478E12, 10.0], [1.60385346E12, 10.0], [1.60385376E12, 10.0], [1.60385358E12, 10.0], [1.60385388E12, 10.0], [1.60385448E12, 10.0], [1.60385418E12, 10.0], [1.6038546E12, 10.0], [1.6038543E12, 10.0], [1.60385298E12, 10.0], [1.60385328E12, 10.0], [1.6038531E12, 10.0], [1.6038534E12, 10.0], [1.603854E12, 10.0], [1.6038537E12, 10.0], [1.60385412E12, 10.0], [1.60385382E12, 10.0], [1.60385472E12, 10.0], [1.60385442E12, 10.0], [1.60385484E12, 6.7857142857142865], [1.60385292E12, 10.0], [1.60385454E12, 10.0], [1.60385322E12, 10.0], [1.60385352E12, 10.0], [1.60385334E12, 10.0], [1.60385364E12, 10.0], [1.60385424E12, 10.0], [1.60385394E12, 10.0], [1.60385436E12, 10.0], [1.60385406E12, 10.0], [1.60385304E12, 10.0], [1.60385466E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385484E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16966.0, "minX": 1.0, "maxY": 26062.65289256202, "series": [{"data": [[8.0, 16981.0], [4.0, 17423.0], [2.0, 17562.0], [1.0, 18035.0], [9.0, 16966.0], [10.0, 26062.65289256202], [5.0, 17350.0], [6.0, 17087.0], [3.0, 17461.0], [7.0, 17089.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25955.700680272144]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 87.8, "minX": 1.60385292E12, "maxY": 189620.8, "series": [{"data": [[1.60385316E12, 78768.65], [1.60385478E12, 76104.71666666666], [1.60385346E12, 56408.166666666664], [1.60385376E12, 88695.31666666667], [1.60385358E12, 45600.433333333334], [1.60385388E12, 189620.8], [1.60385448E12, 49117.35], [1.60385418E12, 44120.48333333333], [1.6038546E12, 24992.533333333333], [1.6038543E12, 46875.4], [1.60385298E12, 113380.73333333334], [1.60385328E12, 50813.11666666667], [1.6038531E12, 69424.93333333333], [1.6038534E12, 49193.083333333336], [1.603854E12, 71088.08333333333], [1.6038537E12, 160531.03333333333], [1.60385412E12, 28502.9], [1.60385382E12, 105516.95], [1.60385472E12, 149057.9], [1.60385442E12, 48497.833333333336], [1.60385484E12, 11923.1], [1.60385292E12, 150670.86666666667], [1.60385454E12, 44035.53333333333], [1.60385322E12, 46992.86666666667], [1.60385352E12, 46322.85], [1.60385334E12, 44036.75], [1.60385364E12, 25409.816666666666], [1.60385424E12, 52538.433333333334], [1.60385394E12, 61572.28333333333], [1.60385436E12, 53862.51666666667], [1.60385406E12, 79691.03333333334], [1.60385304E12, 125102.1], [1.60385466E12, 34986.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60385316E12, 176.26666666666668], [1.60385478E12, 165.5], [1.60385346E12, 153.66666666666666], [1.60385376E12, 165.03333333333333], [1.60385358E12, 153.35], [1.60385388E12, 183.13333333333333], [1.60385448E12, 146.1], [1.60385418E12, 146.11666666666667], [1.6038546E12, 167.75], [1.6038543E12, 153.43333333333334], [1.60385298E12, 195.51666666666668], [1.60385328E12, 153.45], [1.6038531E12, 111.28333333333333], [1.6038534E12, 153.43333333333334], [1.603854E12, 164.16666666666666], [1.6038537E12, 231.86666666666667], [1.60385412E12, 116.86666666666666], [1.60385382E12, 195.21666666666667], [1.60385472E12, 193.56666666666666], [1.60385442E12, 153.43333333333334], [1.60385484E12, 93.83333333333333], [1.60385292E12, 87.8], [1.60385454E12, 167.85], [1.60385322E12, 160.98333333333332], [1.60385352E12, 153.38333333333333], [1.60385334E12, 146.1], [1.60385364E12, 167.88333333333333], [1.60385424E12, 153.46666666666667], [1.60385394E12, 216.61666666666667], [1.60385436E12, 154.38333333333333], [1.60385406E12, 191.15], [1.60385304E12, 183.66666666666666], [1.60385466E12, 183.01666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385484E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16721.916666666668, "minX": 1.60385292E12, "maxY": 39779.2, "series": [{"data": [[1.60385316E12, 26612.20833333334], [1.60385478E12, 27653.78260869565], [1.60385346E12, 28617.52380952381], [1.60385376E12, 24653.391304347828], [1.60385358E12, 29259.523809523802], [1.60385388E12, 24383.559999999998], [1.60385448E12, 29009.1], [1.60385418E12, 29328.649999999998], [1.6038546E12, 25554.434782608696], [1.6038543E12, 29092.57142857143], [1.60385298E12, 23418.407407407405], [1.60385328E12, 29054.714285714294], [1.6038531E12, 39779.2], [1.6038534E12, 29101.952380952374], [1.603854E12, 26906.499999999996], [1.6038537E12, 20145.90625], [1.60385412E12, 35700.0], [1.60385382E12, 21736.999999999996], [1.60385472E12, 22925.370370370365], [1.60385442E12, 28719.52380952381], [1.60385484E12, 17060.642857142855], [1.60385292E12, 16721.916666666668], [1.60385454E12, 27905.91304347826], [1.60385322E12, 25995.863636363636], [1.60385352E12, 29209.904761904763], [1.60385334E12, 29022.75], [1.60385364E12, 25470.826086956524], [1.60385424E12, 29032.7619047619], [1.60385394E12, 18421.161290322572], [1.60385436E12, 28066.095238095237], [1.60385406E12, 23932.5], [1.60385304E12, 21174.199999999997], [1.60385466E12, 24069.000000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385484E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16716.666666666668, "minX": 1.60385292E12, "maxY": 39776.73333333334, "series": [{"data": [[1.60385316E12, 26610.41666666667], [1.60385478E12, 27651.478260869564], [1.60385346E12, 28616.095238095237], [1.60385376E12, 24650.739130434784], [1.60385358E12, 29258.38095238095], [1.60385388E12, 24380.000000000004], [1.60385448E12, 29007.899999999998], [1.60385418E12, 29327.399999999998], [1.6038546E12, 25554.000000000004], [1.6038543E12, 29091.428571428572], [1.60385298E12, 23416.40740740741], [1.60385328E12, 29053.428571428572], [1.6038531E12, 39776.73333333334], [1.6038534E12, 29100.61904761905], [1.603854E12, 26904.63636363636], [1.6038537E12, 20142.499999999996], [1.60385412E12, 35699.375000000015], [1.60385382E12, 21734.0], [1.60385472E12, 22921.259259259255], [1.60385442E12, 28718.428571428572], [1.60385484E12, 17058.42857142857], [1.60385292E12, 16716.666666666668], [1.60385454E12, 27905.08695652174], [1.60385322E12, 25994.77272727272], [1.60385352E12, 29208.809523809527], [1.60385334E12, 29021.600000000002], [1.60385364E12, 25470.434782608696], [1.60385424E12, 29031.523809523806], [1.60385394E12, 18419.54838709678], [1.60385436E12, 28064.714285714283], [1.60385406E12, 23931.076923076926], [1.60385304E12, 21171.92], [1.60385466E12, 24068.119999999995]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385484E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.13043478260869565, "minX": 1.60385292E12, "maxY": 7.333333333333333, "series": [{"data": [[1.60385316E12, 0.6666666666666665], [1.60385478E12, 0.3478260869565218], [1.60385346E12, 0.3333333333333333], [1.60385376E12, 0.13043478260869565], [1.60385358E12, 0.6190476190476191], [1.60385388E12, 0.4800000000000002], [1.60385448E12, 0.35], [1.60385418E12, 0.7499999999999999], [1.6038546E12, 0.5217391304347825], [1.6038543E12, 0.14285714285714288], [1.60385298E12, 0.33333333333333337], [1.60385328E12, 0.28571428571428575], [1.6038531E12, 0.6666666666666666], [1.6038534E12, 0.5714285714285714], [1.603854E12, 0.4545454545454546], [1.6038537E12, 0.37500000000000006], [1.60385412E12, 0.18749999999999997], [1.60385382E12, 0.3571428571428572], [1.60385472E12, 0.37037037037037035], [1.60385442E12, 0.5238095238095238], [1.60385484E12, 0.42857142857142855], [1.60385292E12, 7.333333333333333], [1.60385454E12, 0.4347826086956523], [1.60385322E12, 0.5909090909090909], [1.60385352E12, 0.2857142857142857], [1.60385334E12, 0.5499999999999999], [1.60385364E12, 0.5652173913043478], [1.60385424E12, 0.7142857142857143], [1.60385394E12, 0.3548387096774194], [1.60385436E12, 0.6666666666666667], [1.60385406E12, 0.1923076923076923], [1.60385304E12, 0.36], [1.60385466E12, 0.56]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385484E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3059.0, "minX": 1.60385292E12, "maxY": 44870.0, "series": [{"data": [[1.60385316E12, 33437.0], [1.60385478E12, 37280.0], [1.60385346E12, 29442.0], [1.60385376E12, 31248.0], [1.60385358E12, 29791.0], [1.60385388E12, 28576.0], [1.60385448E12, 29317.0], [1.60385418E12, 34330.0], [1.6038546E12, 29293.0], [1.6038543E12, 29407.0], [1.60385298E12, 27885.0], [1.60385328E12, 29522.0], [1.6038531E12, 44870.0], [1.6038534E12, 29493.0], [1.603854E12, 31661.0], [1.6038537E12, 26155.0], [1.60385412E12, 44037.0], [1.60385382E12, 27731.0], [1.60385472E12, 28340.0], [1.60385442E12, 29336.0], [1.60385484E12, 18035.0], [1.60385292E12, 26608.0], [1.60385454E12, 29489.0], [1.60385322E12, 30460.0], [1.60385352E12, 29625.0], [1.60385334E12, 29350.0], [1.60385364E12, 27948.0], [1.60385424E12, 29518.0], [1.60385394E12, 23170.0], [1.60385436E12, 29042.0], [1.60385406E12, 27217.0], [1.60385304E12, 26925.0], [1.60385466E12, 28015.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60385316E12, 22426.0], [1.60385478E12, 17053.0], [1.60385346E12, 27765.0], [1.60385376E12, 18172.0], [1.60385358E12, 27505.0], [1.60385388E12, 19322.0], [1.60385448E12, 28749.0], [1.60385418E12, 25808.0], [1.6038546E12, 22355.0], [1.6038543E12, 28817.0], [1.60385298E12, 18454.0], [1.60385328E12, 27688.0], [1.6038531E12, 30741.0], [1.6038534E12, 28647.0], [1.603854E12, 22380.0], [1.6038537E12, 16987.0], [1.60385412E12, 24011.0], [1.60385382E12, 17545.0], [1.60385472E12, 18659.0], [1.60385442E12, 27848.0], [1.60385484E12, 16296.0], [1.60385292E12, 3059.0], [1.60385454E12, 24307.0], [1.60385322E12, 23358.0], [1.60385352E12, 28822.0], [1.60385334E12, 28805.0], [1.60385364E12, 23504.0], [1.60385424E12, 28774.0], [1.60385394E12, 16735.0], [1.60385436E12, 27107.0], [1.60385406E12, 21932.0], [1.60385304E12, 17514.0], [1.60385466E12, 20928.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60385316E12, 22426.0], [1.60385478E12, 17053.0], [1.60385346E12, 27765.0], [1.60385376E12, 18172.0], [1.60385358E12, 27505.0], [1.60385388E12, 19322.0], [1.60385448E12, 28749.0], [1.60385418E12, 25808.0], [1.6038546E12, 22355.0], [1.6038543E12, 28817.0], [1.60385298E12, 18454.0], [1.60385328E12, 27688.0], [1.6038531E12, 30741.0], [1.6038534E12, 28647.0], [1.603854E12, 22380.0], [1.6038537E12, 16987.0], [1.60385412E12, 24011.0], [1.60385382E12, 17545.0], [1.60385472E12, 18659.0], [1.60385442E12, 27848.0], [1.60385484E12, 16296.0], [1.60385292E12, 3059.0], [1.60385454E12, 24307.0], [1.60385322E12, 23358.0], [1.60385352E12, 28822.0], [1.60385334E12, 28805.0], [1.60385364E12, 23504.0], [1.60385424E12, 28774.0], [1.60385394E12, 16735.0], [1.60385436E12, 27107.0], [1.60385406E12, 21932.0], [1.60385304E12, 17514.0], [1.60385466E12, 20928.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60385316E12, 22426.0], [1.60385478E12, 17053.0], [1.60385346E12, 27765.0], [1.60385376E12, 18172.0], [1.60385358E12, 27505.0], [1.60385388E12, 19322.0], [1.60385448E12, 28749.0], [1.60385418E12, 25808.0], [1.6038546E12, 22355.0], [1.6038543E12, 28817.0], [1.60385298E12, 18454.0], [1.60385328E12, 27688.0], [1.6038531E12, 30741.0], [1.6038534E12, 28647.0], [1.603854E12, 22380.0], [1.6038537E12, 16987.0], [1.60385412E12, 24011.0], [1.60385382E12, 17545.0], [1.60385472E12, 18659.0], [1.60385442E12, 27848.0], [1.60385484E12, 16296.0], [1.60385292E12, 3059.0], [1.60385454E12, 24307.0], [1.60385322E12, 23358.0], [1.60385352E12, 28822.0], [1.60385334E12, 28805.0], [1.60385364E12, 23504.0], [1.60385424E12, 28774.0], [1.60385394E12, 16735.0], [1.60385436E12, 27107.0], [1.60385406E12, 21932.0], [1.60385304E12, 17514.0], [1.60385466E12, 20928.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60385316E12, 22426.0], [1.60385478E12, 17053.0], [1.60385346E12, 27765.0], [1.60385376E12, 18172.0], [1.60385358E12, 27505.0], [1.60385388E12, 19322.0], [1.60385448E12, 28749.0], [1.60385418E12, 25808.0], [1.6038546E12, 22355.0], [1.6038543E12, 28817.0], [1.60385298E12, 18454.0], [1.60385328E12, 27688.0], [1.6038531E12, 30741.0], [1.6038534E12, 28647.0], [1.603854E12, 22380.0], [1.6038537E12, 16987.0], [1.60385412E12, 24011.0], [1.60385382E12, 17545.0], [1.60385472E12, 18659.0], [1.60385442E12, 27848.0], [1.60385484E12, 16296.0], [1.60385292E12, 3059.0], [1.60385454E12, 24307.0], [1.60385322E12, 23358.0], [1.60385352E12, 28822.0], [1.60385334E12, 28805.0], [1.60385364E12, 23504.0], [1.60385424E12, 28774.0], [1.60385394E12, 16735.0], [1.60385436E12, 27107.0], [1.60385406E12, 21932.0], [1.60385304E12, 17514.0], [1.60385466E12, 20928.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60385316E12, 25393.0], [1.60385478E12, 28576.0], [1.60385346E12, 28692.0], [1.60385376E12, 22513.0], [1.60385358E12, 29357.0], [1.60385388E12, 23975.0], [1.60385448E12, 28981.0], [1.60385418E12, 29228.5], [1.6038546E12, 25802.0], [1.6038543E12, 29081.0], [1.60385298E12, 24242.0], [1.60385328E12, 29101.0], [1.6038531E12, 41591.0], [1.6038534E12, 29086.0], [1.603854E12, 27410.0], [1.6038537E12, 19135.0], [1.60385412E12, 36382.5], [1.60385382E12, 21262.0], [1.60385472E12, 21892.0], [1.60385442E12, 28806.0], [1.60385484E12, 17035.0], [1.60385292E12, 17436.0], [1.60385454E12, 28589.0], [1.60385322E12, 25878.5], [1.60385352E12, 29166.0], [1.60385334E12, 29006.0], [1.60385364E12, 25312.0], [1.60385424E12, 29000.0], [1.60385394E12, 17835.0], [1.60385436E12, 28098.0], [1.60385406E12, 23839.5], [1.60385304E12, 21778.0], [1.60385466E12, 24054.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385484E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26986.0, "minX": 1.0, "maxY": 26986.0, "series": [{"data": [[1.0, 26986.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26984.0, "minX": 1.0, "maxY": 26984.0, "series": [{"data": [[1.0, 26984.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60385292E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385316E12, 0.4], [1.60385478E12, 0.38333333333333336], [1.60385346E12, 0.35], [1.60385376E12, 0.38333333333333336], [1.60385358E12, 0.35], [1.60385388E12, 0.4166666666666667], [1.60385448E12, 0.3333333333333333], [1.60385418E12, 0.3333333333333333], [1.6038546E12, 0.38333333333333336], [1.6038543E12, 0.35], [1.60385298E12, 0.45], [1.60385328E12, 0.35], [1.6038531E12, 0.25], [1.6038534E12, 0.35], [1.603854E12, 0.36666666666666664], [1.6038537E12, 0.5333333333333333], [1.60385412E12, 0.26666666666666666], [1.60385382E12, 0.4666666666666667], [1.60385472E12, 0.45], [1.60385442E12, 0.35], [1.60385484E12, 0.06666666666666667], [1.60385292E12, 0.36666666666666664], [1.60385454E12, 0.38333333333333336], [1.60385322E12, 0.36666666666666664], [1.60385352E12, 0.35], [1.60385334E12, 0.3333333333333333], [1.60385364E12, 0.38333333333333336], [1.60385424E12, 0.35], [1.60385394E12, 0.5166666666666667], [1.60385436E12, 0.35], [1.60385406E12, 0.43333333333333335], [1.60385304E12, 0.4166666666666667], [1.60385466E12, 0.4166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385484E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60385292E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385316E12, 0.4], [1.60385478E12, 0.38333333333333336], [1.60385346E12, 0.35], [1.60385376E12, 0.38333333333333336], [1.60385358E12, 0.35], [1.60385388E12, 0.4166666666666667], [1.60385448E12, 0.3333333333333333], [1.60385418E12, 0.3333333333333333], [1.6038546E12, 0.38333333333333336], [1.6038543E12, 0.35], [1.60385298E12, 0.45], [1.60385328E12, 0.35], [1.6038531E12, 0.25], [1.6038534E12, 0.35], [1.603854E12, 0.36666666666666664], [1.6038537E12, 0.5333333333333333], [1.60385412E12, 0.26666666666666666], [1.60385382E12, 0.4666666666666667], [1.60385472E12, 0.45], [1.60385442E12, 0.35], [1.60385484E12, 0.23333333333333334], [1.60385292E12, 0.2], [1.60385454E12, 0.38333333333333336], [1.60385322E12, 0.36666666666666664], [1.60385352E12, 0.35], [1.60385334E12, 0.3333333333333333], [1.60385364E12, 0.38333333333333336], [1.60385424E12, 0.35], [1.60385394E12, 0.5166666666666667], [1.60385436E12, 0.35], [1.60385406E12, 0.43333333333333335], [1.60385304E12, 0.4166666666666667], [1.60385466E12, 0.4166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385484E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60385292E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385316E12, 0.4], [1.60385478E12, 0.38333333333333336], [1.60385346E12, 0.35], [1.60385376E12, 0.38333333333333336], [1.60385358E12, 0.35], [1.60385388E12, 0.4166666666666667], [1.60385448E12, 0.3333333333333333], [1.60385418E12, 0.3333333333333333], [1.6038546E12, 0.38333333333333336], [1.6038543E12, 0.35], [1.60385298E12, 0.45], [1.60385328E12, 0.35], [1.6038531E12, 0.25], [1.6038534E12, 0.35], [1.603854E12, 0.36666666666666664], [1.6038537E12, 0.5333333333333333], [1.60385412E12, 0.26666666666666666], [1.60385382E12, 0.4666666666666667], [1.60385472E12, 0.45], [1.60385442E12, 0.35], [1.60385484E12, 0.23333333333333334], [1.60385292E12, 0.2], [1.60385454E12, 0.38333333333333336], [1.60385322E12, 0.36666666666666664], [1.60385352E12, 0.35], [1.60385334E12, 0.3333333333333333], [1.60385364E12, 0.38333333333333336], [1.60385424E12, 0.35], [1.60385394E12, 0.5166666666666667], [1.60385436E12, 0.35], [1.60385406E12, 0.43333333333333335], [1.60385304E12, 0.4166666666666667], [1.60385466E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385484E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60385292E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385316E12, 0.4], [1.60385478E12, 0.38333333333333336], [1.60385346E12, 0.35], [1.60385376E12, 0.38333333333333336], [1.60385358E12, 0.35], [1.60385388E12, 0.4166666666666667], [1.60385448E12, 0.3333333333333333], [1.60385418E12, 0.3333333333333333], [1.6038546E12, 0.38333333333333336], [1.6038543E12, 0.35], [1.60385298E12, 0.45], [1.60385328E12, 0.35], [1.6038531E12, 0.25], [1.6038534E12, 0.35], [1.603854E12, 0.36666666666666664], [1.6038537E12, 0.5333333333333333], [1.60385412E12, 0.26666666666666666], [1.60385382E12, 0.4666666666666667], [1.60385472E12, 0.45], [1.60385442E12, 0.35], [1.60385484E12, 0.23333333333333334], [1.60385292E12, 0.2], [1.60385454E12, 0.38333333333333336], [1.60385322E12, 0.36666666666666664], [1.60385352E12, 0.35], [1.60385334E12, 0.3333333333333333], [1.60385364E12, 0.38333333333333336], [1.60385424E12, 0.35], [1.60385394E12, 0.5166666666666667], [1.60385436E12, 0.35], [1.60385406E12, 0.43333333333333335], [1.60385304E12, 0.4166666666666667], [1.60385466E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385484E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

