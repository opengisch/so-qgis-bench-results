/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3111.0, "minX": 0.0, "maxY": 44456.0, "series": [{"data": [[0.0, 3111.0], [0.1, 3111.0], [0.2, 6180.0], [0.3, 8542.0], [0.4, 8542.0], [0.5, 11338.0], [0.6, 13980.0], [0.7, 16269.0], [0.8, 16269.0], [0.9, 16277.0], [1.0, 16290.0], [1.1, 16398.0], [1.2, 16398.0], [1.3, 16481.0], [1.4, 16634.0], [1.5, 16644.0], [1.6, 16644.0], [1.7, 16647.0], [1.8, 16676.0], [1.9, 16676.0], [2.0, 16696.0], [2.1, 16702.0], [2.2, 16705.0], [2.3, 16705.0], [2.4, 16745.0], [2.5, 16800.0], [2.6, 16837.0], [2.7, 16837.0], [2.8, 17124.0], [2.9, 17131.0], [3.0, 17174.0], [3.1, 17174.0], [3.2, 17315.0], [3.3, 17336.0], [3.4, 17336.0], [3.5, 17421.0], [3.6, 17486.0], [3.7, 17511.0], [3.8, 17511.0], [3.9, 17542.0], [4.0, 17594.0], [4.1, 17599.0], [4.2, 17599.0], [4.3, 17622.0], [4.4, 17632.0], [4.5, 17644.0], [4.6, 17644.0], [4.7, 17652.0], [4.8, 17678.0], [4.9, 17678.0], [5.0, 17678.0], [5.1, 17685.0], [5.2, 17697.0], [5.3, 17697.0], [5.4, 17734.0], [5.5, 17737.0], [5.6, 17752.0], [5.7, 17752.0], [5.8, 17765.0], [5.9, 17768.0], [6.0, 17807.0], [6.1, 17807.0], [6.2, 17810.0], [6.3, 17812.0], [6.4, 17851.0], [6.5, 17851.0], [6.6, 17857.0], [6.7, 17884.0], [6.8, 17884.0], [6.9, 17910.0], [7.0, 17927.0], [7.1, 17952.0], [7.2, 17952.0], [7.3, 17993.0], [7.4, 18005.0], [7.5, 18022.0], [7.6, 18022.0], [7.7, 18035.0], [7.8, 18046.0], [7.9, 18063.0], [8.0, 18063.0], [8.1, 18080.0], [8.2, 18090.0], [8.3, 18096.0], [8.4, 18096.0], [8.5, 18106.0], [8.6, 18110.0], [8.7, 18110.0], [8.8, 18155.0], [8.9, 18264.0], [9.0, 18266.0], [9.1, 18266.0], [9.2, 18306.0], [9.3, 18307.0], [9.4, 18308.0], [9.5, 18308.0], [9.6, 18336.0], [9.7, 18411.0], [9.8, 18450.0], [9.9, 18450.0], [10.0, 18529.0], [10.1, 18531.0], [10.2, 18531.0], [10.3, 18564.0], [10.4, 18571.0], [10.5, 18692.0], [10.6, 18692.0], [10.7, 18767.0], [10.8, 18863.0], [10.9, 18868.0], [11.0, 18868.0], [11.1, 18889.0], [11.2, 18942.0], [11.3, 19022.0], [11.4, 19022.0], [11.5, 19057.0], [11.6, 19117.0], [11.7, 19117.0], [11.8, 19157.0], [11.9, 19176.0], [12.0, 19211.0], [12.1, 19211.0], [12.2, 19241.0], [12.3, 19254.0], [12.4, 19262.0], [12.5, 19262.0], [12.6, 19264.0], [12.7, 19300.0], [12.8, 19332.0], [12.9, 19332.0], [13.0, 19349.0], [13.1, 19353.0], [13.2, 19362.0], [13.3, 19362.0], [13.4, 19364.0], [13.5, 19371.0], [13.6, 19371.0], [13.7, 19383.0], [13.8, 19403.0], [13.9, 19461.0], [14.0, 19461.0], [14.1, 19479.0], [14.2, 19498.0], [14.3, 19508.0], [14.4, 19508.0], [14.5, 19535.0], [14.6, 19559.0], [14.7, 19596.0], [14.8, 19596.0], [14.9, 19736.0], [15.0, 19786.0], [15.1, 19786.0], [15.2, 19831.0], [15.3, 19944.0], [15.4, 20096.0], [15.5, 20096.0], [15.6, 20115.0], [15.7, 20155.0], [15.8, 20165.0], [15.9, 20165.0], [16.0, 20206.0], [16.1, 20250.0], [16.2, 20304.0], [16.3, 20304.0], [16.4, 20359.0], [16.5, 20391.0], [16.6, 20396.0], [16.7, 20396.0], [16.8, 20403.0], [16.9, 20433.0], [17.0, 20433.0], [17.1, 20464.0], [17.2, 20768.0], [17.3, 20943.0], [17.4, 20943.0], [17.5, 20975.0], [17.6, 21005.0], [17.7, 21060.0], [17.8, 21060.0], [17.9, 21072.0], [18.0, 21074.0], [18.1, 21182.0], [18.2, 21182.0], [18.3, 21235.0], [18.4, 21251.0], [18.5, 21251.0], [18.6, 21272.0], [18.7, 21327.0], [18.8, 21379.0], [18.9, 21379.0], [19.0, 21394.0], [19.1, 21438.0], [19.2, 21450.0], [19.3, 21450.0], [19.4, 21482.0], [19.5, 21485.0], [19.6, 21485.0], [19.7, 21485.0], [19.8, 21508.0], [19.9, 21518.0], [20.0, 21553.0], [20.1, 21553.0], [20.2, 21566.0], [20.3, 21584.0], [20.4, 21584.0], [20.5, 21586.0], [20.6, 21608.0], [20.7, 21655.0], [20.8, 21655.0], [20.9, 21772.0], [21.0, 21863.0], [21.1, 21945.0], [21.2, 21945.0], [21.3, 21966.0], [21.4, 21971.0], [21.5, 22040.0], [21.6, 22040.0], [21.7, 22060.0], [21.8, 22065.0], [21.9, 22065.0], [22.0, 22091.0], [22.1, 22179.0], [22.2, 22222.0], [22.3, 22222.0], [22.4, 22262.0], [22.5, 22306.0], [22.6, 22378.0], [22.7, 22378.0], [22.8, 22380.0], [22.9, 22419.0], [23.0, 22423.0], [23.1, 22423.0], [23.2, 22443.0], [23.3, 22457.0], [23.4, 22457.0], [23.5, 22553.0], [23.6, 22601.0], [23.7, 22609.0], [23.8, 22609.0], [23.9, 22615.0], [24.0, 22626.0], [24.1, 22644.0], [24.2, 22644.0], [24.3, 22685.0], [24.4, 22711.0], [24.5, 22819.0], [24.6, 22819.0], [24.7, 22822.0], [24.8, 22836.0], [24.9, 22863.0], [25.0, 22863.0], [25.1, 22904.0], [25.2, 22935.0], [25.3, 22935.0], [25.4, 23006.0], [25.5, 23044.0], [25.6, 23066.0], [25.7, 23066.0], [25.8, 23068.0], [25.9, 23087.0], [26.0, 23096.0], [26.1, 23096.0], [26.2, 23122.0], [26.3, 23125.0], [26.4, 23172.0], [26.5, 23172.0], [26.6, 23243.0], [26.7, 23263.0], [26.8, 23263.0], [26.9, 23285.0], [27.0, 23289.0], [27.1, 23346.0], [27.2, 23346.0], [27.3, 23379.0], [27.4, 23395.0], [27.5, 23411.0], [27.6, 23411.0], [27.7, 23435.0], [27.8, 23465.0], [27.9, 23524.0], [28.0, 23524.0], [28.1, 23529.0], [28.2, 23543.0], [28.3, 23544.0], [28.4, 23544.0], [28.5, 23545.0], [28.6, 23557.0], [28.7, 23557.0], [28.8, 23569.0], [28.9, 23606.0], [29.0, 23612.0], [29.1, 23612.0], [29.2, 23616.0], [29.3, 23623.0], [29.4, 23626.0], [29.5, 23626.0], [29.6, 23672.0], [29.7, 23750.0], [29.8, 23771.0], [29.9, 23771.0], [30.0, 23775.0], [30.1, 23787.0], [30.2, 23787.0], [30.3, 23791.0], [30.4, 23813.0], [30.5, 23815.0], [30.6, 23815.0], [30.7, 23878.0], [30.8, 23904.0], [30.9, 23927.0], [31.0, 23927.0], [31.1, 23933.0], [31.2, 23940.0], [31.3, 23948.0], [31.4, 23948.0], [31.5, 23961.0], [31.6, 23971.0], [31.7, 23971.0], [31.8, 24037.0], [31.9, 24074.0], [32.0, 24075.0], [32.1, 24075.0], [32.2, 24085.0], [32.3, 24109.0], [32.4, 24118.0], [32.5, 24118.0], [32.6, 24145.0], [32.7, 24145.0], [32.8, 24204.0], [32.9, 24204.0], [33.0, 24223.0], [33.1, 24245.0], [33.2, 24260.0], [33.3, 24260.0], [33.4, 24285.0], [33.5, 24294.0], [33.6, 24294.0], [33.7, 24312.0], [33.8, 24319.0], [33.9, 24323.0], [34.0, 24323.0], [34.1, 24377.0], [34.2, 24401.0], [34.3, 24404.0], [34.4, 24404.0], [34.5, 24411.0], [34.6, 24416.0], [34.7, 24471.0], [34.8, 24471.0], [34.9, 24498.0], [35.0, 24500.0], [35.1, 24500.0], [35.2, 24504.0], [35.3, 24511.0], [35.4, 24539.0], [35.5, 24539.0], [35.6, 24559.0], [35.7, 24563.0], [35.8, 24591.0], [35.9, 24591.0], [36.0, 24600.0], [36.1, 24643.0], [36.2, 24657.0], [36.3, 24657.0], [36.4, 24658.0], [36.5, 24690.0], [36.6, 24691.0], [36.7, 24691.0], [36.8, 24693.0], [36.9, 24711.0], [37.0, 24711.0], [37.1, 24718.0], [37.2, 24763.0], [37.3, 24770.0], [37.4, 24770.0], [37.5, 24788.0], [37.6, 24810.0], [37.7, 24840.0], [37.8, 24840.0], [37.9, 24845.0], [38.0, 24853.0], [38.1, 24878.0], [38.2, 24878.0], [38.3, 24882.0], [38.4, 24912.0], [38.5, 24912.0], [38.6, 24926.0], [38.7, 24929.0], [38.8, 24932.0], [38.9, 24932.0], [39.0, 24945.0], [39.1, 24974.0], [39.2, 24997.0], [39.3, 24997.0], [39.4, 24999.0], [39.5, 25006.0], [39.6, 25006.0], [39.7, 25006.0], [39.8, 25047.0], [39.9, 25092.0], [40.0, 25111.0], [40.1, 25111.0], [40.2, 25144.0], [40.3, 25148.0], [40.4, 25148.0], [40.5, 25166.0], [40.6, 25223.0], [40.7, 25245.0], [40.8, 25245.0], [40.9, 25266.0], [41.0, 25270.0], [41.1, 25283.0], [41.2, 25283.0], [41.3, 25302.0], [41.4, 25326.0], [41.5, 25334.0], [41.6, 25334.0], [41.7, 25372.0], [41.8, 25392.0], [41.9, 25392.0], [42.0, 25446.0], [42.1, 25483.0], [42.2, 25504.0], [42.3, 25504.0], [42.4, 25524.0], [42.5, 25537.0], [42.6, 25540.0], [42.7, 25540.0], [42.8, 25547.0], [42.9, 25550.0], [43.0, 25561.0], [43.1, 25561.0], [43.2, 25570.0], [43.3, 25575.0], [43.4, 25575.0], [43.5, 25586.0], [43.6, 25622.0], [43.7, 25636.0], [43.8, 25636.0], [43.9, 25654.0], [44.0, 25668.0], [44.1, 25697.0], [44.2, 25697.0], [44.3, 25742.0], [44.4, 25787.0], [44.5, 25811.0], [44.6, 25811.0], [44.7, 25819.0], [44.8, 25823.0], [44.9, 25842.0], [45.0, 25842.0], [45.1, 25900.0], [45.2, 25909.0], [45.3, 25909.0], [45.4, 25956.0], [45.5, 25971.0], [45.6, 26004.0], [45.7, 26004.0], [45.8, 26023.0], [45.9, 26032.0], [46.0, 26038.0], [46.1, 26038.0], [46.2, 26084.0], [46.3, 26144.0], [46.4, 26150.0], [46.5, 26150.0], [46.6, 26205.0], [46.7, 26209.0], [46.8, 26209.0], [46.9, 26254.0], [47.0, 26310.0], [47.1, 26335.0], [47.2, 26335.0], [47.3, 26351.0], [47.4, 26401.0], [47.5, 26402.0], [47.6, 26402.0], [47.7, 26411.0], [47.8, 26451.0], [47.9, 26458.0], [48.0, 26458.0], [48.1, 26495.0], [48.2, 26512.0], [48.3, 26526.0], [48.4, 26526.0], [48.5, 26551.0], [48.6, 26588.0], [48.7, 26588.0], [48.8, 26616.0], [48.9, 26622.0], [49.0, 26676.0], [49.1, 26676.0], [49.2, 26735.0], [49.3, 26737.0], [49.4, 26745.0], [49.5, 26745.0], [49.6, 26801.0], [49.7, 26838.0], [49.8, 26841.0], [49.9, 26841.0], [50.0, 26843.0], [50.1, 26892.0], [50.2, 26892.0], [50.3, 26894.0], [50.4, 26899.0], [50.5, 26936.0], [50.6, 26936.0], [50.7, 26940.0], [50.8, 26967.0], [50.9, 26968.0], [51.0, 26968.0], [51.1, 27000.0], [51.2, 27017.0], [51.3, 27019.0], [51.4, 27019.0], [51.5, 27043.0], [51.6, 27056.0], [51.7, 27056.0], [51.8, 27056.0], [51.9, 27093.0], [52.0, 27104.0], [52.1, 27104.0], [52.2, 27130.0], [52.3, 27161.0], [52.4, 27210.0], [52.5, 27210.0], [52.6, 27230.0], [52.7, 27288.0], [52.8, 27335.0], [52.9, 27335.0], [53.0, 27380.0], [53.1, 27403.0], [53.2, 27429.0], [53.3, 27429.0], [53.4, 27458.0], [53.5, 27463.0], [53.6, 27463.0], [53.7, 27468.0], [53.8, 27479.0], [53.9, 27505.0], [54.0, 27505.0], [54.1, 27579.0], [54.2, 27613.0], [54.3, 27622.0], [54.4, 27622.0], [54.5, 27625.0], [54.6, 27644.0], [54.7, 27645.0], [54.8, 27645.0], [54.9, 27650.0], [55.0, 27674.0], [55.1, 27674.0], [55.2, 27682.0], [55.3, 27748.0], [55.4, 27754.0], [55.5, 27754.0], [55.6, 27755.0], [55.7, 27762.0], [55.8, 27791.0], [55.9, 27791.0], [56.0, 27799.0], [56.1, 27809.0], [56.2, 27852.0], [56.3, 27852.0], [56.4, 27859.0], [56.5, 27879.0], [56.6, 27926.0], [56.7, 27926.0], [56.8, 27934.0], [56.9, 27947.0], [57.0, 27947.0], [57.1, 27967.0], [57.2, 27995.0], [57.3, 28013.0], [57.4, 28013.0], [57.5, 28055.0], [57.6, 28065.0], [57.7, 28082.0], [57.8, 28082.0], [57.9, 28096.0], [58.0, 28143.0], [58.1, 28155.0], [58.2, 28155.0], [58.3, 28182.0], [58.4, 28189.0], [58.5, 28189.0], [58.6, 28243.0], [58.7, 28256.0], [58.8, 28258.0], [58.9, 28258.0], [59.0, 28262.0], [59.1, 28272.0], [59.2, 28294.0], [59.3, 28294.0], [59.4, 28306.0], [59.5, 28307.0], [59.6, 28323.0], [59.7, 28323.0], [59.8, 28328.0], [59.9, 28329.0], [60.0, 28332.0], [60.1, 28332.0], [60.2, 28339.0], [60.3, 28366.0], [60.4, 28366.0], [60.5, 28380.0], [60.6, 28385.0], [60.7, 28392.0], [60.8, 28392.0], [60.9, 28411.0], [61.0, 28418.0], [61.1, 28430.0], [61.2, 28430.0], [61.3, 28431.0], [61.4, 28434.0], [61.5, 28438.0], [61.6, 28438.0], [61.7, 28438.0], [61.8, 28438.0], [61.9, 28438.0], [62.0, 28443.0], [62.1, 28444.0], [62.2, 28447.0], [62.3, 28447.0], [62.4, 28450.0], [62.5, 28453.0], [62.6, 28464.0], [62.7, 28464.0], [62.8, 28469.0], [62.9, 28488.0], [63.0, 28493.0], [63.1, 28493.0], [63.2, 28493.0], [63.3, 28495.0], [63.4, 28495.0], [63.5, 28503.0], [63.6, 28504.0], [63.7, 28520.0], [63.8, 28520.0], [63.9, 28526.0], [64.0, 28528.0], [64.1, 28529.0], [64.2, 28529.0], [64.3, 28532.0], [64.4, 28532.0], [64.5, 28541.0], [64.6, 28541.0], [64.7, 28542.0], [64.8, 28549.0], [64.9, 28551.0], [65.0, 28551.0], [65.1, 28571.0], [65.2, 28577.0], [65.3, 28577.0], [65.4, 28577.0], [65.5, 28582.0], [65.6, 28592.0], [65.7, 28592.0], [65.8, 28593.0], [65.9, 28595.0], [66.0, 28602.0], [66.1, 28602.0], [66.2, 28602.0], [66.3, 28605.0], [66.4, 28609.0], [66.5, 28609.0], [66.6, 28611.0], [66.7, 28636.0], [66.8, 28636.0], [66.9, 28645.0], [67.0, 28663.0], [67.1, 28673.0], [67.2, 28673.0], [67.3, 28686.0], [67.4, 28686.0], [67.5, 28697.0], [67.6, 28697.0], [67.7, 28701.0], [67.8, 28705.0], [67.9, 28708.0], [68.0, 28708.0], [68.1, 28722.0], [68.2, 28730.0], [68.3, 28741.0], [68.4, 28741.0], [68.5, 28741.0], [68.6, 28747.0], [68.7, 28747.0], [68.8, 28749.0], [68.9, 28749.0], [69.0, 28753.0], [69.1, 28753.0], [69.2, 28754.0], [69.3, 28756.0], [69.4, 28761.0], [69.5, 28761.0], [69.6, 28763.0], [69.7, 28765.0], [69.8, 28768.0], [69.9, 28768.0], [70.0, 28768.0], [70.1, 28770.0], [70.2, 28770.0], [70.3, 28778.0], [70.4, 28789.0], [70.5, 28791.0], [70.6, 28791.0], [70.7, 28791.0], [70.8, 28796.0], [70.9, 28802.0], [71.0, 28802.0], [71.1, 28803.0], [71.2, 28804.0], [71.3, 28806.0], [71.4, 28806.0], [71.5, 28818.0], [71.6, 28830.0], [71.7, 28830.0], [71.8, 28835.0], [71.9, 28843.0], [72.0, 28846.0], [72.1, 28846.0], [72.2, 28846.0], [72.3, 28853.0], [72.4, 28854.0], [72.5, 28854.0], [72.6, 28859.0], [72.7, 28864.0], [72.8, 28872.0], [72.9, 28872.0], [73.0, 28874.0], [73.1, 28876.0], [73.2, 28878.0], [73.3, 28878.0], [73.4, 28878.0], [73.5, 28887.0], [73.6, 28887.0], [73.7, 28889.0], [73.8, 28891.0], [73.9, 28892.0], [74.0, 28892.0], [74.1, 28893.0], [74.2, 28894.0], [74.3, 28896.0], [74.4, 28896.0], [74.5, 28897.0], [74.6, 28898.0], [74.7, 28905.0], [74.8, 28905.0], [74.9, 28905.0], [75.0, 28911.0], [75.1, 28911.0], [75.2, 28913.0], [75.3, 28916.0], [75.4, 28923.0], [75.5, 28923.0], [75.6, 28924.0], [75.7, 28926.0], [75.8, 28936.0], [75.9, 28936.0], [76.0, 28939.0], [76.1, 28943.0], [76.2, 28945.0], [76.3, 28945.0], [76.4, 28946.0], [76.5, 28946.0], [76.6, 28960.0], [76.7, 28960.0], [76.8, 28974.0], [76.9, 28976.0], [77.0, 28976.0], [77.1, 28977.0], [77.2, 28977.0], [77.3, 28980.0], [77.4, 28980.0], [77.5, 28985.0], [77.6, 28986.0], [77.7, 28990.0], [77.8, 28990.0], [77.9, 28994.0], [78.0, 28996.0], [78.1, 29003.0], [78.2, 29003.0], [78.3, 29003.0], [78.4, 29005.0], [78.5, 29005.0], [78.6, 29012.0], [78.7, 29024.0], [78.8, 29032.0], [78.9, 29032.0], [79.0, 29035.0], [79.1, 29039.0], [79.2, 29040.0], [79.3, 29040.0], [79.4, 29045.0], [79.5, 29046.0], [79.6, 29052.0], [79.7, 29052.0], [79.8, 29063.0], [79.9, 29076.0], [80.0, 29077.0], [80.1, 29077.0], [80.2, 29081.0], [80.3, 29083.0], [80.4, 29083.0], [80.5, 29084.0], [80.6, 29091.0], [80.7, 29092.0], [80.8, 29092.0], [80.9, 29098.0], [81.0, 29108.0], [81.1, 29108.0], [81.2, 29108.0], [81.3, 29109.0], [81.4, 29116.0], [81.5, 29121.0], [81.6, 29121.0], [81.7, 29131.0], [81.8, 29131.0], [81.9, 29131.0], [82.0, 29131.0], [82.1, 29138.0], [82.2, 29138.0], [82.3, 29138.0], [82.4, 29143.0], [82.5, 29144.0], [82.6, 29145.0], [82.7, 29145.0], [82.8, 29149.0], [82.9, 29170.0], [83.0, 29170.0], [83.1, 29170.0], [83.2, 29171.0], [83.3, 29183.0], [83.4, 29183.0], [83.5, 29185.0], [83.6, 29190.0], [83.7, 29194.0], [83.8, 29194.0], [83.9, 29199.0], [84.0, 29201.0], [84.1, 29202.0], [84.2, 29202.0], [84.3, 29205.0], [84.4, 29208.0], [84.5, 29217.0], [84.6, 29217.0], [84.7, 29219.0], [84.8, 29224.0], [84.9, 29235.0], [85.0, 29235.0], [85.1, 29236.0], [85.2, 29240.0], [85.3, 29240.0], [85.4, 29242.0], [85.5, 29253.0], [85.6, 29254.0], [85.7, 29254.0], [85.8, 29266.0], [85.9, 29266.0], [86.0, 29267.0], [86.1, 29267.0], [86.2, 29268.0], [86.3, 29268.0], [86.4, 29269.0], [86.5, 29269.0], [86.6, 29269.0], [86.7, 29275.0], [86.8, 29275.0], [86.9, 29278.0], [87.0, 29300.0], [87.1, 29306.0], [87.2, 29306.0], [87.3, 29314.0], [87.4, 29315.0], [87.5, 29317.0], [87.6, 29317.0], [87.7, 29335.0], [87.8, 29337.0], [87.9, 29347.0], [88.0, 29347.0], [88.1, 29349.0], [88.2, 29351.0], [88.3, 29353.0], [88.4, 29353.0], [88.5, 29359.0], [88.6, 29360.0], [88.7, 29360.0], [88.8, 29361.0], [88.9, 29365.0], [89.0, 29366.0], [89.1, 29366.0], [89.2, 29367.0], [89.3, 29368.0], [89.4, 29369.0], [89.5, 29369.0], [89.6, 29369.0], [89.7, 29375.0], [89.8, 29395.0], [89.9, 29395.0], [90.0, 29400.0], [90.1, 29401.0], [90.2, 29401.0], [90.3, 29418.0], [90.4, 29433.0], [90.5, 29443.0], [90.6, 29443.0], [90.7, 29458.0], [90.8, 29460.0], [90.9, 29462.0], [91.0, 29462.0], [91.1, 29462.0], [91.2, 29463.0], [91.3, 29467.0], [91.4, 29467.0], [91.5, 29477.0], [91.6, 29480.0], [91.7, 29480.0], [91.8, 29492.0], [91.9, 29536.0], [92.0, 29549.0], [92.1, 29549.0], [92.2, 29563.0], [92.3, 29565.0], [92.4, 29689.0], [92.5, 29689.0], [92.6, 29732.0], [92.7, 29762.0], [92.8, 29804.0], [92.9, 29804.0], [93.0, 29856.0], [93.1, 29935.0], [93.2, 29945.0], [93.3, 29945.0], [93.4, 30001.0], [93.5, 30459.0], [93.6, 30459.0], [93.7, 30497.0], [93.8, 30533.0], [93.9, 30772.0], [94.0, 30772.0], [94.1, 30804.0], [94.2, 31109.0], [94.3, 31161.0], [94.4, 31161.0], [94.5, 31318.0], [94.6, 31383.0], [94.7, 31425.0], [94.8, 31425.0], [94.9, 31452.0], [95.0, 31542.0], [95.1, 31542.0], [95.2, 31648.0], [95.3, 32096.0], [95.4, 32105.0], [95.5, 32105.0], [95.6, 32107.0], [95.7, 32182.0], [95.8, 32523.0], [95.9, 32523.0], [96.0, 32607.0], [96.1, 32648.0], [96.2, 32888.0], [96.3, 32888.0], [96.4, 33137.0], [96.5, 33532.0], [96.6, 33984.0], [96.7, 33984.0], [96.8, 34026.0], [96.9, 34800.0], [97.0, 34800.0], [97.1, 34874.0], [97.2, 35548.0], [97.3, 35972.0], [97.4, 35972.0], [97.5, 36477.0], [97.6, 36914.0], [97.7, 36961.0], [97.8, 36961.0], [97.9, 37105.0], [98.0, 38283.0], [98.1, 39287.0], [98.2, 39287.0], [98.3, 39820.0], [98.4, 40417.0], [98.5, 40417.0], [98.6, 41100.0], [98.7, 41186.0], [98.8, 41553.0], [98.9, 41553.0], [99.0, 41864.0], [99.1, 42580.0], [99.2, 42739.0], [99.3, 42739.0], [99.4, 43361.0], [99.5, 43512.0], [99.6, 43608.0], [99.7, 43608.0], [99.8, 43646.0], [99.9, 44456.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 28.0, "series": [{"data": [[33500.0, 1.0], [33100.0, 1.0], [33900.0, 1.0], [35900.0, 1.0], [35500.0, 1.0], [36900.0, 2.0], [37100.0, 1.0], [41500.0, 1.0], [42700.0, 1.0], [41100.0, 2.0], [42500.0, 1.0], [43300.0, 1.0], [43500.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8500.0, 1.0], [11300.0, 1.0], [13900.0, 1.0], [16200.0, 3.0], [16300.0, 1.0], [16400.0, 1.0], [17400.0, 2.0], [17300.0, 2.0], [17100.0, 3.0], [16600.0, 5.0], [16700.0, 3.0], [16800.0, 2.0], [18300.0, 4.0], [18000.0, 8.0], [18200.0, 2.0], [17800.0, 6.0], [17900.0, 4.0], [17500.0, 4.0], [17600.0, 8.0], [18100.0, 3.0], [17700.0, 5.0], [18400.0, 2.0], [19200.0, 5.0], [19400.0, 4.0], [18500.0, 4.0], [18600.0, 1.0], [19000.0, 2.0], [18700.0, 1.0], [18900.0, 1.0], [18800.0, 3.0], [19300.0, 8.0], [19100.0, 3.0], [20300.0, 4.0], [20200.0, 2.0], [19900.0, 1.0], [20000.0, 1.0], [20100.0, 3.0], [19700.0, 2.0], [20400.0, 3.0], [19500.0, 4.0], [19800.0, 1.0], [21000.0, 4.0], [21400.0, 5.0], [20900.0, 2.0], [21500.0, 6.0], [21300.0, 3.0], [20700.0, 1.0], [21100.0, 1.0], [21200.0, 3.0], [22300.0, 3.0], [21900.0, 3.0], [22400.0, 4.0], [22200.0, 2.0], [22000.0, 4.0], [21600.0, 2.0], [21700.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [21800.0, 1.0], [23400.0, 3.0], [23100.0, 3.0], [23300.0, 3.0], [22700.0, 1.0], [23500.0, 7.0], [22600.0, 6.0], [23200.0, 4.0], [22900.0, 2.0], [22800.0, 4.0], [23000.0, 6.0], [24400.0, 6.0], [23800.0, 3.0], [24000.0, 4.0], [23900.0, 7.0], [24100.0, 4.0], [24500.0, 7.0], [24200.0, 6.0], [24300.0, 4.0], [23600.0, 6.0], [23700.0, 5.0], [24700.0, 5.0], [25500.0, 10.0], [24600.0, 7.0], [24800.0, 6.0], [25400.0, 2.0], [25000.0, 4.0], [24900.0, 8.0], [25100.0, 4.0], [25200.0, 5.0], [25300.0, 5.0], [25600.0, 5.0], [26000.0, 5.0], [26100.0, 2.0], [26500.0, 4.0], [26400.0, 6.0], [26600.0, 3.0], [26200.0, 3.0], [26300.0, 3.0], [25700.0, 2.0], [25800.0, 4.0], [25900.0, 4.0], [26800.0, 7.0], [27200.0, 3.0], [27000.0, 7.0], [27400.0, 6.0], [26900.0, 4.0], [27600.0, 8.0], [26700.0, 3.0], [27100.0, 3.0], [27500.0, 2.0], [27300.0, 2.0], [27900.0, 5.0], [28600.0, 12.0], [28300.0, 11.0], [28500.0, 19.0], [28400.0, 19.0], [28000.0, 5.0], [28100.0, 4.0], [28200.0, 6.0], [27700.0, 6.0], [27800.0, 4.0], [28900.0, 25.0], [29500.0, 4.0], [29600.0, 1.0], [28700.0, 24.0], [29000.0, 21.0], [28800.0, 28.0], [29100.0, 22.0], [29300.0, 22.0], [29200.0, 22.0], [29400.0, 14.0], [30400.0, 2.0], [30500.0, 1.0], [30000.0, 1.0], [30700.0, 1.0], [29900.0, 2.0], [29800.0, 2.0], [29700.0, 2.0], [30800.0, 1.0], [31400.0, 2.0], [31300.0, 2.0], [31100.0, 2.0], [31500.0, 1.0], [31600.0, 1.0], [32500.0, 1.0], [32100.0, 3.0], [32000.0, 1.0], [32600.0, 2.0], [34000.0, 1.0], [32800.0, 1.0], [34800.0, 2.0], [36400.0, 1.0], [38200.0, 1.0], [39200.0, 1.0], [39800.0, 1.0], [40400.0, 1.0], [41800.0, 1.0], [44400.0, 1.0], [43600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.500000000000002, "minX": 1.60385928E12, "maxY": 10.0, "series": [{"data": [[1.60385952E12, 10.0], [1.60385994E12, 10.0], [1.60386024E12, 10.0], [1.60386054E12, 10.0], [1.60386084E12, 10.0], [1.60385964E12, 10.0], [1.60386114E12, 8.500000000000002], [1.60385934E12, 10.0], [1.60386078E12, 10.0], [1.60386108E12, 10.0], [1.60385976E12, 10.0], [1.60386006E12, 10.0], [1.60385946E12, 10.0], [1.60386036E12, 10.0], [1.60386066E12, 10.0], [1.60386096E12, 10.0], [1.6038603E12, 10.0], [1.6038606E12, 10.0], [1.60385988E12, 10.0], [1.6038609E12, 10.0], [1.60385958E12, 10.0], [1.60385928E12, 10.0], [1.60386018E12, 10.0], [1.60386048E12, 10.0], [1.6038597E12, 10.0], [1.60386012E12, 10.0], [1.6038594E12, 10.0], [1.60386042E12, 10.0], [1.60386072E12, 10.0], [1.60386102E12, 10.0], [1.60385982E12, 10.0], [1.60386E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386114E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16634.0, "minX": 1.0, "maxY": 25923.02754820939, "series": [{"data": [[8.0, 16705.0], [4.0, 16644.0], [2.0, 16800.0], [1.0, 17174.0], [9.0, 16745.0], [10.0, 25923.02754820939], [5.0, 16634.0], [6.0, 16647.0], [3.0, 16837.0], [7.0, 16696.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25810.884353741516]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 124.78333333333333, "minX": 1.60385928E12, "maxY": 206961.86666666667, "series": [{"data": [[1.60385952E12, 76817.61666666667], [1.60385994E12, 37079.8], [1.60386024E12, 117462.81666666667], [1.60386054E12, 48533.26666666667], [1.60386084E12, 48568.35], [1.60385964E12, 45842.25], [1.60386114E12, 55125.5], [1.60385934E12, 67527.31666666667], [1.60386078E12, 46183.38333333333], [1.60386108E12, 155190.75], [1.60385976E12, 44716.566666666666], [1.60386006E12, 169862.78333333333], [1.60385946E12, 52840.98333333333], [1.60386036E12, 58881.166666666664], [1.60386066E12, 56892.833333333336], [1.60386096E12, 29141.733333333334], [1.6038603E12, 73515.4], [1.6038606E12, 50619.15], [1.60385988E12, 46153.416666666664], [1.6038609E12, 37248.416666666664], [1.60385958E12, 47375.71666666667], [1.60385928E12, 206961.86666666667], [1.60386018E12, 191243.8], [1.60386048E12, 34220.63333333333], [1.6038597E12, 51523.65], [1.60386012E12, 65265.916666666664], [1.6038594E12, 148017.2], [1.60386042E12, 67933.6], [1.60386072E12, 45980.316666666666], [1.60386102E12, 51796.46666666667], [1.60385982E12, 57689.76666666667], [1.60386E12, 37232.78333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60385952E12, 183.88333333333333], [1.60385994E12, 160.68333333333334], [1.60386024E12, 195.81666666666666], [1.60386054E12, 153.46666666666667], [1.60386084E12, 153.33333333333334], [1.60385964E12, 153.41666666666666], [1.60386114E12, 207.08333333333334], [1.60385934E12, 214.21666666666667], [1.60386078E12, 153.4], [1.60386108E12, 160.73333333333332], [1.60385976E12, 146.11666666666667], [1.60386006E12, 223.1], [1.60385946E12, 139.81666666666666], [1.60386036E12, 177.53333333333333], [1.60386066E12, 153.76666666666668], [1.60386096E12, 189.71666666666667], [1.6038603E12, 183.18333333333334], [1.6038606E12, 153.43333333333334], [1.60385988E12, 153.31666666666666], [1.6038609E12, 167.78333333333333], [1.60385958E12, 153.41666666666666], [1.60385928E12, 124.78333333333333], [1.60386018E12, 187.06666666666666], [1.60386048E12, 131.48333333333332], [1.6038597E12, 153.43333333333334], [1.60386012E12, 174.63333333333333], [1.6038594E12, 143.25], [1.60386042E12, 161.91666666666666], [1.60386072E12, 154.06666666666666], [1.60386102E12, 195.13333333333333], [1.60385982E12, 153.7], [1.60386E12, 182.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386114E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18994.354838709678, "minX": 1.60385928E12, "maxY": 36841.1052631579, "series": [{"data": [[1.60385952E12, 24532.12], [1.60385994E12, 28058.909090909092], [1.60386024E12, 22542.370370370372], [1.60386054E12, 28528.0], [1.60386084E12, 28947.80952380952], [1.60385964E12, 28945.52380952381], [1.60386114E12, 22032.6], [1.60385934E12, 21424.63333333333], [1.60386078E12, 29053.428571428572], [1.60386108E12, 25094.727272727272], [1.60385976E12, 29174.099999999995], [1.60386006E12, 18994.354838709678], [1.60385946E12, 36841.1052631579], [1.60386036E12, 26806.583333333332], [1.60386066E12, 28498.000000000004], [1.60386096E12, 23760.692307692305], [1.6038603E12, 20713.307692307695], [1.6038606E12, 29042.57142857143], [1.60385988E12, 28928.095238095237], [1.6038609E12, 26465.913043478256], [1.60385958E12, 27533.52380952381], [1.60385928E12, 19502.000000000004], [1.60386018E12, 23264.961538461535], [1.60386048E12, 35126.33333333333], [1.6038597E12, 28953.142857142855], [1.60386012E12, 24101.600000000002], [1.6038594E12, 23831.631578947367], [1.60386042E12, 24557.63636363636], [1.60386072E12, 27514.238095238095], [1.60386102E12, 22399.296296296292], [1.60385982E12, 28666.380952380954], [1.60386E12, 24774.32]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60386114E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18990.806451612898, "minX": 1.60385928E12, "maxY": 36839.842105263146, "series": [{"data": [[1.60385952E12, 24530.32], [1.60385994E12, 28057.77272727273], [1.60386024E12, 22539.88888888889], [1.60386054E12, 28526.809523809523], [1.60386084E12, 28946.428571428565], [1.60385964E12, 28944.333333333336], [1.60386114E12, 22030.533333333333], [1.60385934E12, 21423.533333333336], [1.60386078E12, 29052.333333333336], [1.60386108E12, 25090.727272727272], [1.60385976E12, 29172.9], [1.60386006E12, 18990.806451612898], [1.60385946E12, 36839.842105263146], [1.60386036E12, 26805.458333333336], [1.60386066E12, 28496.42857142857], [1.60386096E12, 23759.884615384617], [1.6038603E12, 20711.192307692305], [1.6038606E12, 29041.285714285714], [1.60385988E12, 28926.904761904763], [1.6038609E12, 26465.173913043476], [1.60385958E12, 27532.28571428571], [1.60385928E12, 19496.29411764706], [1.60386018E12, 23260.96153846154], [1.60386048E12, 35125.38888888889], [1.6038597E12, 28951.95238095238], [1.60386012E12, 24099.159999999996], [1.6038594E12, 23827.78947368421], [1.60386042E12, 24556.04545454546], [1.60386072E12, 27512.95238095238], [1.60386102E12, 22397.814814814818], [1.60385982E12, 28665.09523809524], [1.60386E12, 24772.679999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60386114E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.21052631578947367, "minX": 1.60385928E12, "maxY": 4.647058823529412, "series": [{"data": [[1.60385952E12, 0.39999999999999997], [1.60385994E12, 0.5], [1.60386024E12, 0.33333333333333337], [1.60386054E12, 0.42857142857142866], [1.60386084E12, 0.7142857142857143], [1.60385964E12, 0.5714285714285715], [1.60386114E12, 0.4], [1.60385934E12, 0.5666666666666668], [1.60386078E12, 0.5238095238095238], [1.60386108E12, 0.4090909090909091], [1.60385976E12, 0.7500000000000001], [1.60386006E12, 0.3548387096774194], [1.60385946E12, 0.8421052631578946], [1.60386036E12, 0.5416666666666667], [1.60386066E12, 0.4761904761904762], [1.60386096E12, 0.3846153846153846], [1.6038603E12, 0.23076923076923075], [1.6038606E12, 0.7142857142857142], [1.60385988E12, 0.3333333333333333], [1.6038609E12, 0.2173913043478261], [1.60385958E12, 0.5714285714285715], [1.60385928E12, 4.647058823529412], [1.60386018E12, 0.3076923076923077], [1.60386048E12, 0.2222222222222222], [1.6038597E12, 0.28571428571428575], [1.60386012E12, 0.5599999999999999], [1.6038594E12, 0.21052631578947367], [1.60386042E12, 0.5454545454545454], [1.60386072E12, 0.23809523809523808], [1.60386102E12, 0.4814814814814815], [1.60385982E12, 0.4761904761904763], [1.60386E12, 0.48]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60386114E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3111.0, "minX": 1.60385928E12, "maxY": 44456.0, "series": [{"data": [[1.60385952E12, 27429.0], [1.60385994E12, 29689.0], [1.60386024E12, 28602.0], [1.60386054E12, 29224.0], [1.60386084E12, 29433.0], [1.60385964E12, 29349.0], [1.60386114E12, 36914.0], [1.60385934E12, 28328.0], [1.60386078E12, 29369.0], [1.60386108E12, 29804.0], [1.60385976E12, 29536.0], [1.60386006E12, 22091.0], [1.60385946E12, 44456.0], [1.60386036E12, 32182.0], [1.60386066E12, 28843.0], [1.60386096E12, 27859.0], [1.6038603E12, 32096.0], [1.6038606E12, 29278.0], [1.60385988E12, 29463.0], [1.6038609E12, 29240.0], [1.60385958E12, 30533.0], [1.60385928E12, 26843.0], [1.60386018E12, 25842.0], [1.60386048E12, 42580.0], [1.6038597E12, 29549.0], [1.60386012E12, 31452.0], [1.6038594E12, 36477.0], [1.60386042E12, 27645.0], [1.60386072E12, 28323.0], [1.60386102E12, 26899.0], [1.60385982E12, 29395.0], [1.60386E12, 28096.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60385952E12, 22615.0], [1.60385994E12, 25245.0], [1.60386024E12, 18308.0], [1.60386054E12, 25111.0], [1.60386084E12, 28189.0], [1.60385964E12, 28438.0], [1.60386114E12, 16269.0], [1.60385934E12, 17511.0], [1.60386078E12, 28541.0], [1.60386108E12, 19508.0], [1.60385976E12, 28701.0], [1.60386006E12, 17131.0], [1.60385946E12, 27995.0], [1.60386036E12, 22711.0], [1.60386066E12, 27754.0], [1.60386096E12, 20464.0], [1.6038603E12, 17421.0], [1.6038606E12, 28686.0], [1.60385988E12, 28385.0], [1.6038609E12, 23006.0], [1.60385958E12, 24643.0], [1.60385928E12, 3111.0], [1.60386018E12, 19300.0], [1.60386048E12, 26936.0], [1.6038597E12, 28438.0], [1.60386012E12, 17812.0], [1.6038594E12, 18155.0], [1.60386042E12, 22419.0], [1.60386072E12, 26512.0], [1.60386102E12, 18450.0], [1.60385982E12, 28065.0], [1.60386E12, 22601.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60385952E12, 22615.0], [1.60385994E12, 25245.0], [1.60386024E12, 18308.0], [1.60386054E12, 25111.0], [1.60386084E12, 28189.0], [1.60385964E12, 28438.0], [1.60386114E12, 16269.0], [1.60385934E12, 17511.0], [1.60386078E12, 28541.0], [1.60386108E12, 19508.0], [1.60385976E12, 28701.0], [1.60386006E12, 17131.0], [1.60385946E12, 27995.0], [1.60386036E12, 22711.0], [1.60386066E12, 27754.0], [1.60386096E12, 20464.0], [1.6038603E12, 17421.0], [1.6038606E12, 28686.0], [1.60385988E12, 28385.0], [1.6038609E12, 23006.0], [1.60385958E12, 24643.0], [1.60385928E12, 3111.0], [1.60386018E12, 19300.0], [1.60386048E12, 26936.0], [1.6038597E12, 28438.0], [1.60386012E12, 17812.0], [1.6038594E12, 18155.0], [1.60386042E12, 22419.0], [1.60386072E12, 26512.0], [1.60386102E12, 18450.0], [1.60385982E12, 28065.0], [1.60386E12, 22601.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60385952E12, 22615.0], [1.60385994E12, 25245.0], [1.60386024E12, 18308.0], [1.60386054E12, 25111.0], [1.60386084E12, 28189.0], [1.60385964E12, 28438.0], [1.60386114E12, 16269.0], [1.60385934E12, 17511.0], [1.60386078E12, 28541.0], [1.60386108E12, 19508.0], [1.60385976E12, 28701.0], [1.60386006E12, 17131.0], [1.60385946E12, 27995.0], [1.60386036E12, 22711.0], [1.60386066E12, 27754.0], [1.60386096E12, 20464.0], [1.6038603E12, 17421.0], [1.6038606E12, 28686.0], [1.60385988E12, 28385.0], [1.6038609E12, 23006.0], [1.60385958E12, 24643.0], [1.60385928E12, 3111.0], [1.60386018E12, 19300.0], [1.60386048E12, 26936.0], [1.6038597E12, 28438.0], [1.60386012E12, 17812.0], [1.6038594E12, 18155.0], [1.60386042E12, 22419.0], [1.60386072E12, 26512.0], [1.60386102E12, 18450.0], [1.60385982E12, 28065.0], [1.60386E12, 22601.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60385952E12, 22615.0], [1.60385994E12, 25245.0], [1.60386024E12, 18308.0], [1.60386054E12, 25111.0], [1.60386084E12, 28189.0], [1.60385964E12, 28438.0], [1.60386114E12, 16269.0], [1.60385934E12, 17511.0], [1.60386078E12, 28541.0], [1.60386108E12, 19508.0], [1.60385976E12, 28701.0], [1.60386006E12, 17131.0], [1.60385946E12, 27995.0], [1.60386036E12, 22711.0], [1.60386066E12, 27754.0], [1.60386096E12, 20464.0], [1.6038603E12, 17421.0], [1.6038606E12, 28686.0], [1.60385988E12, 28385.0], [1.6038609E12, 23006.0], [1.60385958E12, 24643.0], [1.60385928E12, 3111.0], [1.60386018E12, 19300.0], [1.60386048E12, 26936.0], [1.6038597E12, 28438.0], [1.60386012E12, 17812.0], [1.6038594E12, 18155.0], [1.60386042E12, 22419.0], [1.60386072E12, 26512.0], [1.60386102E12, 18450.0], [1.60385982E12, 28065.0], [1.60386E12, 22601.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60385952E12, 24600.0], [1.60385994E12, 29324.5], [1.60386024E12, 21072.0], [1.60386054E12, 28896.0], [1.60386084E12, 29005.0], [1.60385964E12, 28924.0], [1.60386114E12, 17149.0], [1.60385934E12, 20125.5], [1.60386078E12, 29109.0], [1.60386108E12, 27093.0], [1.60385976E12, 29202.0], [1.60386006E12, 18571.0], [1.60385946E12, 36961.0], [1.60386036E12, 27429.5], [1.60386066E12, 28504.0], [1.60386096E12, 23375.5], [1.6038603E12, 17918.5], [1.6038606E12, 29040.0], [1.60385988E12, 28946.0], [1.6038609E12, 25900.0], [1.60385958E12, 27622.0], [1.60385928E12, 23878.0], [1.60386018E12, 23762.5], [1.60386048E12, 34837.0], [1.6038597E12, 28891.0], [1.60386012E12, 22685.0], [1.6038594E12, 23346.0], [1.60386042E12, 24641.0], [1.60386072E12, 27674.0], [1.60386102E12, 21863.0], [1.60385982E12, 28609.0], [1.60386E12, 24690.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386114E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26843.0, "minX": 1.0, "maxY": 26843.0, "series": [{"data": [[1.0, 26843.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26841.0, "minX": 1.0, "maxY": 26841.0, "series": [{"data": [[1.0, 26841.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60385928E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60385952E12, 0.4166666666666667], [1.60385994E12, 0.36666666666666664], [1.60386024E12, 0.45], [1.60386054E12, 0.35], [1.60386084E12, 0.35], [1.60385964E12, 0.35], [1.60386114E12, 0.3333333333333333], [1.60385934E12, 0.5], [1.60386078E12, 0.35], [1.60386108E12, 0.36666666666666664], [1.60385976E12, 0.3333333333333333], [1.60386006E12, 0.5166666666666667], [1.60385946E12, 0.31666666666666665], [1.60386036E12, 0.4], [1.60386066E12, 0.35], [1.60386096E12, 0.43333333333333335], [1.6038603E12, 0.43333333333333335], [1.6038606E12, 0.35], [1.60385988E12, 0.35], [1.6038609E12, 0.38333333333333336], [1.60385958E12, 0.35], [1.60385928E12, 0.45], [1.60386018E12, 0.43333333333333335], [1.60386048E12, 0.3], [1.6038597E12, 0.35], [1.60386012E12, 0.4166666666666667], [1.6038594E12, 0.31666666666666665], [1.60386042E12, 0.36666666666666664], [1.60386072E12, 0.35], [1.60386102E12, 0.45], [1.60385982E12, 0.35], [1.60386E12, 0.4166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386114E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60385928E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60385952E12, 0.4166666666666667], [1.60385994E12, 0.36666666666666664], [1.60386024E12, 0.45], [1.60386054E12, 0.35], [1.60386084E12, 0.35], [1.60385964E12, 0.35], [1.60386114E12, 0.5], [1.60385934E12, 0.5], [1.60386078E12, 0.35], [1.60386108E12, 0.36666666666666664], [1.60385976E12, 0.3333333333333333], [1.60386006E12, 0.5166666666666667], [1.60385946E12, 0.31666666666666665], [1.60386036E12, 0.4], [1.60386066E12, 0.35], [1.60386096E12, 0.43333333333333335], [1.6038603E12, 0.43333333333333335], [1.6038606E12, 0.35], [1.60385988E12, 0.35], [1.6038609E12, 0.38333333333333336], [1.60385958E12, 0.35], [1.60385928E12, 0.2833333333333333], [1.60386018E12, 0.43333333333333335], [1.60386048E12, 0.3], [1.6038597E12, 0.35], [1.60386012E12, 0.4166666666666667], [1.6038594E12, 0.31666666666666665], [1.60386042E12, 0.36666666666666664], [1.60386072E12, 0.35], [1.60386102E12, 0.45], [1.60385982E12, 0.35], [1.60386E12, 0.4166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386114E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60385928E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60385952E12, 0.4166666666666667], [1.60385994E12, 0.36666666666666664], [1.60386024E12, 0.45], [1.60386054E12, 0.35], [1.60386084E12, 0.35], [1.60385964E12, 0.35], [1.60386114E12, 0.5], [1.60385934E12, 0.5], [1.60386078E12, 0.35], [1.60386108E12, 0.36666666666666664], [1.60385976E12, 0.3333333333333333], [1.60386006E12, 0.5166666666666667], [1.60385946E12, 0.31666666666666665], [1.60386036E12, 0.4], [1.60386066E12, 0.35], [1.60386096E12, 0.43333333333333335], [1.6038603E12, 0.43333333333333335], [1.6038606E12, 0.35], [1.60385988E12, 0.35], [1.6038609E12, 0.38333333333333336], [1.60385958E12, 0.35], [1.60385928E12, 0.2833333333333333], [1.60386018E12, 0.43333333333333335], [1.60386048E12, 0.3], [1.6038597E12, 0.35], [1.60386012E12, 0.4166666666666667], [1.6038594E12, 0.31666666666666665], [1.60386042E12, 0.36666666666666664], [1.60386072E12, 0.35], [1.60386102E12, 0.45], [1.60385982E12, 0.35], [1.60386E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60386114E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60385928E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60385952E12, 0.4166666666666667], [1.60385994E12, 0.36666666666666664], [1.60386024E12, 0.45], [1.60386054E12, 0.35], [1.60386084E12, 0.35], [1.60385964E12, 0.35], [1.60386114E12, 0.5], [1.60385934E12, 0.5], [1.60386078E12, 0.35], [1.60386108E12, 0.36666666666666664], [1.60385976E12, 0.3333333333333333], [1.60386006E12, 0.5166666666666667], [1.60385946E12, 0.31666666666666665], [1.60386036E12, 0.4], [1.60386066E12, 0.35], [1.60386096E12, 0.43333333333333335], [1.6038603E12, 0.43333333333333335], [1.6038606E12, 0.35], [1.60385988E12, 0.35], [1.6038609E12, 0.38333333333333336], [1.60385958E12, 0.35], [1.60385928E12, 0.2833333333333333], [1.60386018E12, 0.43333333333333335], [1.60386048E12, 0.3], [1.6038597E12, 0.35], [1.60386012E12, 0.4166666666666667], [1.6038594E12, 0.31666666666666665], [1.60386042E12, 0.36666666666666664], [1.60386072E12, 0.35], [1.60386102E12, 0.45], [1.60385982E12, 0.35], [1.60386E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60386114E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

