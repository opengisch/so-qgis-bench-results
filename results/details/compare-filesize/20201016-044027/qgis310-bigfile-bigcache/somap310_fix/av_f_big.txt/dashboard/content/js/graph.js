/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3119.0, "minX": 0.0, "maxY": 44606.0, "series": [{"data": [[0.0, 3119.0], [0.1, 3119.0], [0.2, 6013.0], [0.3, 8092.0], [0.4, 8092.0], [0.5, 10914.0], [0.6, 13408.0], [0.7, 15904.0], [0.8, 15904.0], [0.9, 16218.0], [1.0, 16255.0], [1.1, 16421.0], [1.2, 16421.0], [1.3, 16477.0], [1.4, 16510.0], [1.5, 16531.0], [1.6, 16531.0], [1.7, 16631.0], [1.8, 16632.0], [1.9, 16632.0], [2.0, 16642.0], [2.1, 16664.0], [2.2, 16675.0], [2.3, 16675.0], [2.4, 16729.0], [2.5, 16743.0], [2.6, 16781.0], [2.7, 16781.0], [2.8, 16814.0], [2.9, 16842.0], [3.0, 16843.0], [3.1, 16843.0], [3.2, 16852.0], [3.3, 16864.0], [3.4, 16864.0], [3.5, 16867.0], [3.6, 16871.0], [3.7, 16886.0], [3.8, 16886.0], [3.9, 16886.0], [4.0, 16891.0], [4.1, 16929.0], [4.2, 16929.0], [4.3, 16955.0], [4.4, 16957.0], [4.5, 17026.0], [4.6, 17026.0], [4.7, 17038.0], [4.8, 17095.0], [4.9, 17107.0], [5.0, 17107.0], [5.1, 17118.0], [5.2, 17120.0], [5.3, 17120.0], [5.4, 17140.0], [5.5, 17141.0], [5.6, 17226.0], [5.7, 17226.0], [5.8, 17269.0], [5.9, 17281.0], [6.0, 17301.0], [6.1, 17301.0], [6.2, 17308.0], [6.3, 17342.0], [6.4, 17342.0], [6.5, 17342.0], [6.6, 17342.0], [6.7, 17346.0], [6.8, 17346.0], [6.9, 17369.0], [7.0, 17430.0], [7.1, 17444.0], [7.2, 17444.0], [7.3, 17449.0], [7.4, 17460.0], [7.5, 17461.0], [7.6, 17461.0], [7.7, 17520.0], [7.8, 17555.0], [7.9, 17600.0], [8.0, 17600.0], [8.1, 17679.0], [8.2, 17695.0], [8.3, 17703.0], [8.4, 17703.0], [8.5, 17707.0], [8.6, 17737.0], [8.7, 17737.0], [8.8, 17759.0], [8.9, 17792.0], [9.0, 17801.0], [9.1, 17801.0], [9.2, 17895.0], [9.3, 17959.0], [9.4, 17980.0], [9.5, 17980.0], [9.6, 17998.0], [9.7, 18051.0], [9.8, 18057.0], [9.9, 18057.0], [10.0, 18223.0], [10.1, 18317.0], [10.2, 18317.0], [10.3, 18337.0], [10.4, 18519.0], [10.5, 18675.0], [10.6, 18675.0], [10.7, 18698.0], [10.8, 18797.0], [10.9, 18807.0], [11.0, 18807.0], [11.1, 18809.0], [11.2, 18873.0], [11.3, 18874.0], [11.4, 18874.0], [11.5, 18884.0], [11.6, 18885.0], [11.7, 18885.0], [11.8, 18956.0], [11.9, 18984.0], [12.0, 19029.0], [12.1, 19029.0], [12.2, 19043.0], [12.3, 19069.0], [12.4, 19077.0], [12.5, 19077.0], [12.6, 19084.0], [12.7, 19102.0], [12.8, 19112.0], [12.9, 19112.0], [13.0, 19255.0], [13.1, 19264.0], [13.2, 19343.0], [13.3, 19343.0], [13.4, 19513.0], [13.5, 19565.0], [13.6, 19565.0], [13.7, 19592.0], [13.8, 19700.0], [13.9, 19702.0], [14.0, 19702.0], [14.1, 19760.0], [14.2, 19789.0], [14.3, 19811.0], [14.4, 19811.0], [14.5, 19879.0], [14.6, 19897.0], [14.7, 19923.0], [14.8, 19923.0], [14.9, 19943.0], [15.0, 20009.0], [15.1, 20009.0], [15.2, 20024.0], [15.3, 20048.0], [15.4, 20056.0], [15.5, 20056.0], [15.6, 20058.0], [15.7, 20080.0], [15.8, 20092.0], [15.9, 20092.0], [16.0, 20125.0], [16.1, 20176.0], [16.2, 20345.0], [16.3, 20345.0], [16.4, 20356.0], [16.5, 20398.0], [16.6, 20466.0], [16.7, 20466.0], [16.8, 20480.0], [16.9, 20539.0], [17.0, 20539.0], [17.1, 20544.0], [17.2, 20564.0], [17.3, 20581.0], [17.4, 20581.0], [17.5, 20640.0], [17.6, 20814.0], [17.7, 20819.0], [17.8, 20819.0], [17.9, 20865.0], [18.0, 21014.0], [18.1, 21093.0], [18.2, 21093.0], [18.3, 21134.0], [18.4, 21134.0], [18.5, 21134.0], [18.6, 21265.0], [18.7, 21293.0], [18.8, 21300.0], [18.9, 21300.0], [19.0, 21338.0], [19.1, 21341.0], [19.2, 21363.0], [19.3, 21363.0], [19.4, 21429.0], [19.5, 21483.0], [19.6, 21500.0], [19.7, 21500.0], [19.8, 21544.0], [19.9, 21575.0], [20.0, 21580.0], [20.1, 21580.0], [20.2, 21582.0], [20.3, 21657.0], [20.4, 21657.0], [20.5, 21667.0], [20.6, 21674.0], [20.7, 21684.0], [20.8, 21684.0], [20.9, 21729.0], [21.0, 21754.0], [21.1, 21758.0], [21.2, 21758.0], [21.3, 21787.0], [21.4, 21797.0], [21.5, 21813.0], [21.6, 21813.0], [21.7, 21837.0], [21.8, 21857.0], [21.9, 21857.0], [22.0, 21864.0], [22.1, 21890.0], [22.2, 21899.0], [22.3, 21899.0], [22.4, 21945.0], [22.5, 21948.0], [22.6, 21979.0], [22.7, 21979.0], [22.8, 22096.0], [22.9, 22112.0], [23.0, 22120.0], [23.1, 22120.0], [23.2, 22120.0], [23.3, 22136.0], [23.4, 22136.0], [23.5, 22176.0], [23.6, 22367.0], [23.7, 22464.0], [23.8, 22464.0], [23.9, 22473.0], [24.0, 22488.0], [24.1, 22516.0], [24.2, 22516.0], [24.3, 22550.0], [24.4, 22552.0], [24.5, 22591.0], [24.6, 22591.0], [24.7, 22606.0], [24.8, 22668.0], [24.9, 22692.0], [25.0, 22692.0], [25.1, 22724.0], [25.2, 22724.0], [25.3, 22724.0], [25.4, 22752.0], [25.5, 22794.0], [25.6, 22819.0], [25.7, 22819.0], [25.8, 22859.0], [25.9, 22899.0], [26.0, 22915.0], [26.1, 22915.0], [26.2, 22923.0], [26.3, 22958.0], [26.4, 22959.0], [26.5, 22959.0], [26.6, 22994.0], [26.7, 22995.0], [26.8, 22995.0], [26.9, 23039.0], [27.0, 23062.0], [27.1, 23082.0], [27.2, 23082.0], [27.3, 23108.0], [27.4, 23124.0], [27.5, 23129.0], [27.6, 23129.0], [27.7, 23129.0], [27.8, 23163.0], [27.9, 23198.0], [28.0, 23198.0], [28.1, 23220.0], [28.2, 23235.0], [28.3, 23244.0], [28.4, 23244.0], [28.5, 23263.0], [28.6, 23317.0], [28.7, 23317.0], [28.8, 23342.0], [28.9, 23355.0], [29.0, 23356.0], [29.1, 23356.0], [29.2, 23357.0], [29.3, 23365.0], [29.4, 23387.0], [29.5, 23387.0], [29.6, 23404.0], [29.7, 23406.0], [29.8, 23414.0], [29.9, 23414.0], [30.0, 23448.0], [30.1, 23466.0], [30.2, 23466.0], [30.3, 23503.0], [30.4, 23515.0], [30.5, 23541.0], [30.6, 23541.0], [30.7, 23556.0], [30.8, 23557.0], [30.9, 23566.0], [31.0, 23566.0], [31.1, 23568.0], [31.2, 23569.0], [31.3, 23576.0], [31.4, 23576.0], [31.5, 23584.0], [31.6, 23607.0], [31.7, 23607.0], [31.8, 23619.0], [31.9, 23643.0], [32.0, 23644.0], [32.1, 23644.0], [32.2, 23689.0], [32.3, 23715.0], [32.4, 23718.0], [32.5, 23718.0], [32.6, 23732.0], [32.7, 23780.0], [32.8, 23790.0], [32.9, 23790.0], [33.0, 23791.0], [33.1, 23804.0], [33.2, 23815.0], [33.3, 23815.0], [33.4, 23820.0], [33.5, 23829.0], [33.6, 23829.0], [33.7, 23893.0], [33.8, 23895.0], [33.9, 23899.0], [34.0, 23899.0], [34.1, 23916.0], [34.2, 23926.0], [34.3, 23953.0], [34.4, 23953.0], [34.5, 24019.0], [34.6, 24036.0], [34.7, 24046.0], [34.8, 24046.0], [34.9, 24054.0], [35.0, 24074.0], [35.1, 24074.0], [35.2, 24075.0], [35.3, 24092.0], [35.4, 24111.0], [35.5, 24111.0], [35.6, 24111.0], [35.7, 24120.0], [35.8, 24126.0], [35.9, 24126.0], [36.0, 24146.0], [36.1, 24150.0], [36.2, 24175.0], [36.3, 24175.0], [36.4, 24183.0], [36.5, 24202.0], [36.6, 24206.0], [36.7, 24206.0], [36.8, 24208.0], [36.9, 24210.0], [37.0, 24210.0], [37.1, 24210.0], [37.2, 24239.0], [37.3, 24245.0], [37.4, 24245.0], [37.5, 24264.0], [37.6, 24310.0], [37.7, 24315.0], [37.8, 24315.0], [37.9, 24331.0], [38.0, 24354.0], [38.1, 24417.0], [38.2, 24417.0], [38.3, 24419.0], [38.4, 24427.0], [38.5, 24427.0], [38.6, 24445.0], [38.7, 24457.0], [38.8, 24475.0], [38.9, 24475.0], [39.0, 24482.0], [39.1, 24524.0], [39.2, 24571.0], [39.3, 24571.0], [39.4, 24582.0], [39.5, 24583.0], [39.6, 24606.0], [39.7, 24606.0], [39.8, 24677.0], [39.9, 24830.0], [40.0, 24832.0], [40.1, 24832.0], [40.2, 24844.0], [40.3, 24847.0], [40.4, 24847.0], [40.5, 24857.0], [40.6, 24927.0], [40.7, 24935.0], [40.8, 24935.0], [40.9, 24937.0], [41.0, 24960.0], [41.1, 24976.0], [41.2, 24976.0], [41.3, 25008.0], [41.4, 25041.0], [41.5, 25057.0], [41.6, 25057.0], [41.7, 25068.0], [41.8, 25071.0], [41.9, 25071.0], [42.0, 25073.0], [42.1, 25104.0], [42.2, 25122.0], [42.3, 25122.0], [42.4, 25154.0], [42.5, 25156.0], [42.6, 25160.0], [42.7, 25160.0], [42.8, 25192.0], [42.9, 25245.0], [43.0, 25331.0], [43.1, 25331.0], [43.2, 25345.0], [43.3, 25366.0], [43.4, 25366.0], [43.5, 25377.0], [43.6, 25377.0], [43.7, 25404.0], [43.8, 25404.0], [43.9, 25425.0], [44.0, 25440.0], [44.1, 25449.0], [44.2, 25449.0], [44.3, 25473.0], [44.4, 25494.0], [44.5, 25523.0], [44.6, 25523.0], [44.7, 25524.0], [44.8, 25544.0], [44.9, 25575.0], [45.0, 25575.0], [45.1, 25601.0], [45.2, 25602.0], [45.3, 25602.0], [45.4, 25608.0], [45.5, 25623.0], [45.6, 25634.0], [45.7, 25634.0], [45.8, 25656.0], [45.9, 25696.0], [46.0, 25699.0], [46.1, 25699.0], [46.2, 25715.0], [46.3, 25743.0], [46.4, 25752.0], [46.5, 25752.0], [46.6, 25777.0], [46.7, 25815.0], [46.8, 25815.0], [46.9, 25881.0], [47.0, 25889.0], [47.1, 25901.0], [47.2, 25901.0], [47.3, 25936.0], [47.4, 25958.0], [47.5, 25968.0], [47.6, 25968.0], [47.7, 25970.0], [47.8, 26016.0], [47.9, 26023.0], [48.0, 26023.0], [48.1, 26027.0], [48.2, 26084.0], [48.3, 26202.0], [48.4, 26202.0], [48.5, 26208.0], [48.6, 26233.0], [48.7, 26233.0], [48.8, 26237.0], [48.9, 26252.0], [49.0, 26271.0], [49.1, 26271.0], [49.2, 26328.0], [49.3, 26394.0], [49.4, 26415.0], [49.5, 26415.0], [49.6, 26417.0], [49.7, 26422.0], [49.8, 26452.0], [49.9, 26452.0], [50.0, 26522.0], [50.1, 26538.0], [50.2, 26538.0], [50.3, 26570.0], [50.4, 26625.0], [50.5, 26658.0], [50.6, 26658.0], [50.7, 26676.0], [50.8, 26679.0], [50.9, 26733.0], [51.0, 26733.0], [51.1, 26781.0], [51.2, 26784.0], [51.3, 26823.0], [51.4, 26823.0], [51.5, 26849.0], [51.6, 26876.0], [51.7, 26876.0], [51.8, 26955.0], [51.9, 26997.0], [52.0, 27002.0], [52.1, 27002.0], [52.2, 27014.0], [52.3, 27015.0], [52.4, 27031.0], [52.5, 27031.0], [52.6, 27032.0], [52.7, 27116.0], [52.8, 27151.0], [52.9, 27151.0], [53.0, 27151.0], [53.1, 27169.0], [53.2, 27178.0], [53.3, 27178.0], [53.4, 27210.0], [53.5, 27230.0], [53.6, 27230.0], [53.7, 27245.0], [53.8, 27287.0], [53.9, 27366.0], [54.0, 27366.0], [54.1, 27370.0], [54.2, 27390.0], [54.3, 27391.0], [54.4, 27391.0], [54.5, 27398.0], [54.6, 27443.0], [54.7, 27451.0], [54.8, 27451.0], [54.9, 27469.0], [55.0, 27485.0], [55.1, 27485.0], [55.2, 27500.0], [55.3, 27525.0], [55.4, 27542.0], [55.5, 27542.0], [55.6, 27553.0], [55.7, 27580.0], [55.8, 27585.0], [55.9, 27585.0], [56.0, 27624.0], [56.1, 27649.0], [56.2, 27655.0], [56.3, 27655.0], [56.4, 27687.0], [56.5, 27711.0], [56.6, 27716.0], [56.7, 27716.0], [56.8, 27725.0], [56.9, 27729.0], [57.0, 27729.0], [57.1, 27739.0], [57.2, 27742.0], [57.3, 27748.0], [57.4, 27748.0], [57.5, 27770.0], [57.6, 27787.0], [57.7, 27794.0], [57.8, 27794.0], [57.9, 27795.0], [58.0, 27809.0], [58.1, 27855.0], [58.2, 27855.0], [58.3, 27855.0], [58.4, 27871.0], [58.5, 27871.0], [58.6, 27880.0], [58.7, 27886.0], [58.8, 27892.0], [58.9, 27892.0], [59.0, 27902.0], [59.1, 27910.0], [59.2, 27910.0], [59.3, 27910.0], [59.4, 27910.0], [59.5, 27917.0], [59.6, 27925.0], [59.7, 27925.0], [59.8, 27942.0], [59.9, 27946.0], [60.0, 27970.0], [60.1, 27970.0], [60.2, 27985.0], [60.3, 28057.0], [60.4, 28057.0], [60.5, 28071.0], [60.6, 28112.0], [60.7, 28113.0], [60.8, 28113.0], [60.9, 28148.0], [61.0, 28153.0], [61.1, 28172.0], [61.2, 28172.0], [61.3, 28180.0], [61.4, 28192.0], [61.5, 28193.0], [61.6, 28193.0], [61.7, 28197.0], [61.8, 28201.0], [61.9, 28201.0], [62.0, 28246.0], [62.1, 28251.0], [62.2, 28269.0], [62.3, 28269.0], [62.4, 28273.0], [62.5, 28291.0], [62.6, 28299.0], [62.7, 28299.0], [62.8, 28300.0], [62.9, 28300.0], [63.0, 28301.0], [63.1, 28301.0], [63.2, 28306.0], [63.3, 28312.0], [63.4, 28312.0], [63.5, 28331.0], [63.6, 28333.0], [63.7, 28341.0], [63.8, 28341.0], [63.9, 28342.0], [64.0, 28349.0], [64.1, 28350.0], [64.2, 28350.0], [64.3, 28355.0], [64.4, 28366.0], [64.5, 28368.0], [64.6, 28368.0], [64.7, 28370.0], [64.8, 28375.0], [64.9, 28378.0], [65.0, 28378.0], [65.1, 28380.0], [65.2, 28381.0], [65.3, 28381.0], [65.4, 28384.0], [65.5, 28386.0], [65.6, 28388.0], [65.7, 28388.0], [65.8, 28395.0], [65.9, 28401.0], [66.0, 28408.0], [66.1, 28408.0], [66.2, 28412.0], [66.3, 28412.0], [66.4, 28413.0], [66.5, 28413.0], [66.6, 28416.0], [66.7, 28424.0], [66.8, 28424.0], [66.9, 28425.0], [67.0, 28439.0], [67.1, 28443.0], [67.2, 28443.0], [67.3, 28447.0], [67.4, 28449.0], [67.5, 28455.0], [67.6, 28455.0], [67.7, 28467.0], [67.8, 28477.0], [67.9, 28482.0], [68.0, 28482.0], [68.1, 28483.0], [68.2, 28494.0], [68.3, 28494.0], [68.4, 28494.0], [68.5, 28496.0], [68.6, 28501.0], [68.7, 28501.0], [68.8, 28508.0], [68.9, 28511.0], [69.0, 28512.0], [69.1, 28512.0], [69.2, 28515.0], [69.3, 28520.0], [69.4, 28528.0], [69.5, 28528.0], [69.6, 28537.0], [69.7, 28539.0], [69.8, 28540.0], [69.9, 28540.0], [70.0, 28571.0], [70.1, 28574.0], [70.2, 28574.0], [70.3, 28576.0], [70.4, 28585.0], [70.5, 28588.0], [70.6, 28588.0], [70.7, 28593.0], [70.8, 28603.0], [70.9, 28603.0], [71.0, 28603.0], [71.1, 28605.0], [71.2, 28610.0], [71.3, 28615.0], [71.4, 28615.0], [71.5, 28616.0], [71.6, 28619.0], [71.7, 28619.0], [71.8, 28623.0], [71.9, 28625.0], [72.0, 28625.0], [72.1, 28625.0], [72.2, 28625.0], [72.3, 28627.0], [72.4, 28628.0], [72.5, 28628.0], [72.6, 28631.0], [72.7, 28632.0], [72.8, 28632.0], [72.9, 28632.0], [73.0, 28638.0], [73.1, 28641.0], [73.2, 28643.0], [73.3, 28643.0], [73.4, 28645.0], [73.5, 28646.0], [73.6, 28646.0], [73.7, 28651.0], [73.8, 28654.0], [73.9, 28655.0], [74.0, 28655.0], [74.1, 28655.0], [74.2, 28656.0], [74.3, 28658.0], [74.4, 28658.0], [74.5, 28666.0], [74.6, 28668.0], [74.7, 28668.0], [74.8, 28668.0], [74.9, 28669.0], [75.0, 28672.0], [75.1, 28672.0], [75.2, 28674.0], [75.3, 28674.0], [75.4, 28675.0], [75.5, 28675.0], [75.6, 28678.0], [75.7, 28697.0], [75.8, 28698.0], [75.9, 28698.0], [76.0, 28699.0], [76.1, 28702.0], [76.2, 28705.0], [76.3, 28705.0], [76.4, 28706.0], [76.5, 28709.0], [76.6, 28718.0], [76.7, 28718.0], [76.8, 28733.0], [76.9, 28747.0], [77.0, 28747.0], [77.1, 28751.0], [77.2, 28761.0], [77.3, 28761.0], [77.4, 28761.0], [77.5, 28762.0], [77.6, 28766.0], [77.7, 28775.0], [77.8, 28775.0], [77.9, 28778.0], [78.0, 28784.0], [78.1, 28801.0], [78.2, 28801.0], [78.3, 28803.0], [78.4, 28814.0], [78.5, 28814.0], [78.6, 28816.0], [78.7, 28824.0], [78.8, 28825.0], [78.9, 28825.0], [79.0, 28826.0], [79.1, 28828.0], [79.2, 28842.0], [79.3, 28842.0], [79.4, 28852.0], [79.5, 28864.0], [79.6, 28867.0], [79.7, 28867.0], [79.8, 28871.0], [79.9, 28880.0], [80.0, 28881.0], [80.1, 28881.0], [80.2, 28882.0], [80.3, 28883.0], [80.4, 28883.0], [80.5, 28885.0], [80.6, 28888.0], [80.7, 28888.0], [80.8, 28888.0], [80.9, 28893.0], [81.0, 28896.0], [81.1, 28897.0], [81.2, 28897.0], [81.3, 28898.0], [81.4, 28899.0], [81.5, 28900.0], [81.6, 28900.0], [81.7, 28907.0], [81.8, 28920.0], [81.9, 28920.0], [82.0, 28929.0], [82.1, 28945.0], [82.2, 28945.0], [82.3, 28945.0], [82.4, 28949.0], [82.5, 28949.0], [82.6, 28952.0], [82.7, 28952.0], [82.8, 28969.0], [82.9, 28969.0], [83.0, 28980.0], [83.1, 28980.0], [83.2, 28984.0], [83.3, 28986.0], [83.4, 28986.0], [83.5, 28989.0], [83.6, 28989.0], [83.7, 28989.0], [83.8, 28989.0], [83.9, 28990.0], [84.0, 28998.0], [84.1, 28998.0], [84.2, 28998.0], [84.3, 29009.0], [84.4, 29013.0], [84.5, 29015.0], [84.6, 29015.0], [84.7, 29020.0], [84.8, 29027.0], [84.9, 29029.0], [85.0, 29029.0], [85.1, 29043.0], [85.2, 29057.0], [85.3, 29057.0], [85.4, 29058.0], [85.5, 29061.0], [85.6, 29063.0], [85.7, 29063.0], [85.8, 29075.0], [85.9, 29092.0], [86.0, 29105.0], [86.1, 29105.0], [86.2, 29120.0], [86.3, 29135.0], [86.4, 29151.0], [86.5, 29151.0], [86.6, 29169.0], [86.7, 29175.0], [86.8, 29175.0], [86.9, 29183.0], [87.0, 29184.0], [87.1, 29191.0], [87.2, 29191.0], [87.3, 29194.0], [87.4, 29198.0], [87.5, 29212.0], [87.6, 29212.0], [87.7, 29215.0], [87.8, 29216.0], [87.9, 29226.0], [88.0, 29226.0], [88.1, 29228.0], [88.2, 29233.0], [88.3, 29238.0], [88.4, 29238.0], [88.5, 29245.0], [88.6, 29249.0], [88.7, 29249.0], [88.8, 29259.0], [88.9, 29278.0], [89.0, 29282.0], [89.1, 29282.0], [89.2, 29293.0], [89.3, 29298.0], [89.4, 29302.0], [89.5, 29302.0], [89.6, 29310.0], [89.7, 29317.0], [89.8, 29321.0], [89.9, 29321.0], [90.0, 29324.0], [90.1, 29325.0], [90.2, 29325.0], [90.3, 29326.0], [90.4, 29336.0], [90.5, 29337.0], [90.6, 29337.0], [90.7, 29342.0], [90.8, 29346.0], [90.9, 29347.0], [91.0, 29347.0], [91.1, 29378.0], [91.2, 29382.0], [91.3, 29433.0], [91.4, 29433.0], [91.5, 29463.0], [91.6, 29484.0], [91.7, 29484.0], [91.8, 29495.0], [91.9, 29516.0], [92.0, 29522.0], [92.1, 29522.0], [92.2, 29548.0], [92.3, 29552.0], [92.4, 29563.0], [92.5, 29563.0], [92.6, 29600.0], [92.7, 29622.0], [92.8, 29663.0], [92.9, 29663.0], [93.0, 29741.0], [93.1, 29776.0], [93.2, 29776.0], [93.3, 29776.0], [93.4, 30023.0], [93.5, 30181.0], [93.6, 30181.0], [93.7, 30200.0], [93.8, 30517.0], [93.9, 30529.0], [94.0, 30529.0], [94.1, 30562.0], [94.2, 30622.0], [94.3, 30637.0], [94.4, 30637.0], [94.5, 30641.0], [94.6, 30874.0], [94.7, 30912.0], [94.8, 30912.0], [94.9, 31173.0], [95.0, 31300.0], [95.1, 31300.0], [95.2, 31421.0], [95.3, 31430.0], [95.4, 31964.0], [95.5, 31964.0], [95.6, 32360.0], [95.7, 32526.0], [95.8, 32551.0], [95.9, 32551.0], [96.0, 32706.0], [96.1, 32966.0], [96.2, 33251.0], [96.3, 33251.0], [96.4, 33637.0], [96.5, 34032.0], [96.6, 34084.0], [96.7, 34084.0], [96.8, 34661.0], [96.9, 34999.0], [97.0, 34999.0], [97.1, 35528.0], [97.2, 35616.0], [97.3, 35762.0], [97.4, 35762.0], [97.5, 36613.0], [97.6, 37017.0], [97.7, 37423.0], [97.8, 37423.0], [97.9, 37797.0], [98.0, 38657.0], [98.1, 38966.0], [98.2, 38966.0], [98.3, 39951.0], [98.4, 40870.0], [98.5, 40870.0], [98.6, 41100.0], [98.7, 41232.0], [98.8, 41857.0], [98.9, 41857.0], [99.0, 42275.0], [99.1, 42905.0], [99.2, 43062.0], [99.3, 43062.0], [99.4, 43285.0], [99.5, 43759.0], [99.6, 44023.0], [99.7, 44023.0], [99.8, 44280.0], [99.9, 44606.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 39.0, "series": [{"data": [[32900.0, 1.0], [35700.0, 1.0], [34900.0, 1.0], [35500.0, 1.0], [37700.0, 1.0], [38900.0, 1.0], [39900.0, 1.0], [41100.0, 1.0], [42900.0, 1.0], [43700.0, 1.0], [3100.0, 1.0], [6000.0, 1.0], [8000.0, 1.0], [10900.0, 1.0], [13400.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [17300.0, 7.0], [17400.0, 5.0], [17000.0, 3.0], [17100.0, 5.0], [17200.0, 3.0], [16600.0, 5.0], [16500.0, 2.0], [16900.0, 3.0], [16400.0, 2.0], [16800.0, 10.0], [16700.0, 3.0], [17900.0, 3.0], [17800.0, 2.0], [17600.0, 3.0], [17700.0, 5.0], [17500.0, 2.0], [18300.0, 2.0], [18000.0, 2.0], [18200.0, 1.0], [18500.0, 1.0], [19300.0, 1.0], [18900.0, 2.0], [19000.0, 5.0], [18800.0, 6.0], [18700.0, 1.0], [18600.0, 2.0], [19100.0, 2.0], [19200.0, 2.0], [20400.0, 2.0], [20000.0, 7.0], [20100.0, 2.0], [19700.0, 4.0], [20300.0, 3.0], [19500.0, 3.0], [19900.0, 2.0], [19800.0, 3.0], [21500.0, 5.0], [20500.0, 4.0], [21100.0, 2.0], [21200.0, 2.0], [20800.0, 3.0], [21300.0, 4.0], [21000.0, 2.0], [21400.0, 2.0], [20600.0, 1.0], [21700.0, 5.0], [21600.0, 4.0], [22400.0, 3.0], [22500.0, 4.0], [22000.0, 1.0], [21900.0, 3.0], [21800.0, 6.0], [22100.0, 5.0], [22300.0, 1.0], [23300.0, 7.0], [23500.0, 10.0], [23100.0, 6.0], [22800.0, 3.0], [23400.0, 5.0], [23000.0, 3.0], [23200.0, 4.0], [22900.0, 6.0], [22700.0, 4.0], [22600.0, 3.0], [23800.0, 7.0], [24200.0, 8.0], [23700.0, 6.0], [23600.0, 5.0], [23900.0, 3.0], [24100.0, 8.0], [24000.0, 7.0], [24400.0, 7.0], [24500.0, 4.0], [24300.0, 4.0], [25400.0, 6.0], [25100.0, 6.0], [24900.0, 5.0], [24800.0, 5.0], [24600.0, 2.0], [25000.0, 6.0], [25500.0, 4.0], [25300.0, 5.0], [25200.0, 1.0], [26500.0, 3.0], [25600.0, 8.0], [25900.0, 5.0], [26600.0, 4.0], [26200.0, 6.0], [26000.0, 4.0], [26300.0, 2.0], [25700.0, 4.0], [25800.0, 3.0], [26400.0, 4.0], [26700.0, 3.0], [27500.0, 6.0], [27000.0, 5.0], [27200.0, 4.0], [26900.0, 2.0], [27100.0, 5.0], [27600.0, 4.0], [27300.0, 5.0], [27400.0, 4.0], [26800.0, 3.0], [27900.0, 10.0], [28600.0, 39.0], [27700.0, 11.0], [28100.0, 9.0], [28000.0, 2.0], [27800.0, 7.0], [28500.0, 16.0], [28300.0, 23.0], [28400.0, 20.0], [28200.0, 7.0], [29500.0, 5.0], [28800.0, 25.0], [29000.0, 13.0], [28700.0, 15.0], [28900.0, 20.0], [29100.0, 11.0], [29200.0, 14.0], [29300.0, 14.0], [29400.0, 4.0], [29600.0, 3.0], [30100.0, 1.0], [30500.0, 3.0], [29700.0, 3.0], [30600.0, 3.0], [30200.0, 1.0], [30000.0, 1.0], [31400.0, 2.0], [30800.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [32300.0, 1.0], [32500.0, 2.0], [31900.0, 1.0], [32700.0, 1.0], [34600.0, 1.0], [33600.0, 1.0], [34000.0, 2.0], [33200.0, 1.0], [36600.0, 1.0], [35600.0, 1.0], [38600.0, 1.0], [37400.0, 1.0], [37000.0, 1.0], [40800.0, 1.0], [43000.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [41200.0, 1.0], [44600.0, 1.0], [44200.0, 1.0], [44000.0, 1.0], [43200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60282542E12, "maxY": 10.0, "series": [{"data": [[1.60282632E12, 10.0], [1.60282602E12, 10.0], [1.60282542E12, 10.0], [1.60282572E12, 10.0], [1.60282734E12, 2.0], [1.6028256E12, 10.0], [1.60282722E12, 10.0], [1.60282692E12, 10.0], [1.60282662E12, 10.0], [1.60282554E12, 10.0], [1.60282584E12, 10.0], [1.60282716E12, 10.0], [1.60282686E12, 10.0], [1.60282704E12, 10.0], [1.60282674E12, 10.0], [1.60282644E12, 10.0], [1.60282614E12, 10.0], [1.60282728E12, 9.275862068965518], [1.60282698E12, 10.0], [1.60282668E12, 10.0], [1.60282638E12, 10.0], [1.60282656E12, 10.0], [1.60282626E12, 10.0], [1.60282566E12, 10.0], [1.60282596E12, 10.0], [1.6028268E12, 10.0], [1.6028265E12, 10.0], [1.6028259E12, 10.0], [1.6028262E12, 10.0], [1.60282578E12, 10.0], [1.60282608E12, 10.0], [1.60282548E12, 10.0], [1.6028271E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16664.0, "minX": 1.0, "maxY": 25695.438016528886, "series": [{"data": [[8.0, 16664.0], [4.0, 16891.0], [2.0, 16871.0], [1.0, 17281.0], [9.0, 16675.0], [10.0, 25695.438016528886], [5.0, 16886.0], [6.0, 16842.0], [3.0, 16852.0], [7.0, 16729.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25587.18231292513]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.616666666666667, "minX": 1.60282542E12, "maxY": 173017.76666666666, "series": [{"data": [[1.60282632E12, 143417.51666666666], [1.60282602E12, 44574.583333333336], [1.60282542E12, 121364.15], [1.60282572E12, 46992.5], [1.60282734E12, 1177.1333333333334], [1.6028256E12, 70227.76666666666], [1.60282722E12, 172328.98333333334], [1.60282692E12, 45286.03333333333], [1.60282662E12, 34437.96666666667], [1.60282554E12, 124915.6], [1.60282584E12, 48615.5], [1.60282716E12, 34302.48333333333], [1.60282686E12, 57486.98333333333], [1.60282704E12, 38814.316666666666], [1.60282674E12, 52469.38333333333], [1.60282644E12, 66182.15], [1.60282614E12, 29945.7], [1.60282728E12, 55564.15], [1.60282698E12, 48568.0], [1.60282668E12, 43630.28333333333], [1.60282638E12, 160685.8], [1.60282656E12, 69116.43333333333], [1.60282626E12, 72721.08333333333], [1.60282566E12, 80450.6], [1.60282596E12, 58155.73333333333], [1.6028268E12, 48437.51666666667], [1.6028265E12, 69614.31666666667], [1.6028259E12, 44613.65], [1.6028262E12, 173017.76666666666], [1.60282578E12, 50812.76666666667], [1.60282608E12, 46423.95], [1.60282548E12, 140390.9], [1.6028271E12, 28707.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60282632E12, 184.35], [1.60282602E12, 146.06666666666666], [1.60282542E12, 65.85], [1.60282572E12, 160.98333333333332], [1.60282734E12, 19.616666666666667], [1.6028256E12, 111.58333333333333], [1.60282722E12, 160.75], [1.60282692E12, 153.4], [1.60282662E12, 131.5], [1.60282554E12, 196.1], [1.60282584E12, 153.41666666666666], [1.60282716E12, 187.21666666666667], [1.60282686E12, 161.71666666666667], [1.60282704E12, 167.78333333333333], [1.60282674E12, 153.43333333333334], [1.60282644E12, 195.33333333333334], [1.60282614E12, 175.2], [1.60282728E12, 202.68333333333334], [1.60282698E12, 153.33333333333334], [1.60282668E12, 146.13333333333333], [1.60282638E12, 197.71666666666667], [1.60282656E12, 169.21666666666667], [1.60282626E12, 175.66666666666666], [1.60282566E12, 183.58333333333334], [1.60282596E12, 160.98333333333332], [1.6028268E12, 153.45], [1.6028265E12, 185.45], [1.6028259E12, 146.11666666666667], [1.6028262E12, 239.43333333333334], [1.60282578E12, 153.45], [1.60282608E12, 160.65], [1.60282548E12, 197.41666666666666], [1.6028271E12, 189.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13226.222222222223, "minX": 1.60282542E12, "maxY": 38845.4, "series": [{"data": [[1.60282632E12, 21730.230769230766], [1.60282602E12, 28753.55], [1.60282542E12, 13226.222222222223], [1.60282572E12, 25674.727272727272], [1.60282734E12, 17001.333333333332], [1.6028256E12, 38845.4], [1.60282722E12, 24709.999999999993], [1.60282692E12, 28849.333333333336], [1.60282662E12, 35474.944444444445], [1.60282554E12, 20112.2962962963], [1.60282584E12, 28547.904761904763], [1.60282716E12, 22813.807692307684], [1.60282686E12, 27392.772727272728], [1.60282704E12, 26416.82608695652], [1.60282674E12, 29000.7619047619], [1.60282644E12, 18563.67857142857], [1.60282614E12, 24849.5], [1.60282728E12, 23279.44827586207], [1.60282698E12, 28826.04761904762], [1.60282668E12, 28756.65], [1.60282638E12, 23396.259259259255], [1.60282656E12, 23560.217391304348], [1.60282626E12, 24410.96], [1.60282566E12, 26017.439999999995], [1.60282596E12, 28315.77272727273], [1.6028268E12, 28297.04761904762], [1.6028265E12, 26462.800000000003], [1.6028259E12, 29038.95], [1.6028262E12, 19372.454545454548], [1.60282578E12, 28741.428571428576], [1.60282608E12, 28590.227272727272], [1.60282548E12, 23725.03703703704], [1.6028271E12, 24154.076923076922]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13220.444444444443, "minX": 1.60282542E12, "maxY": 38842.86666666667, "series": [{"data": [[1.60282632E12, 21726.576923076926], [1.60282602E12, 28752.3], [1.60282542E12, 13220.444444444443], [1.60282572E12, 25673.68181818182], [1.60282734E12, 16999.333333333332], [1.6028256E12, 38842.86666666667], [1.60282722E12, 24705.181818181816], [1.60282692E12, 28848.285714285717], [1.60282662E12, 35473.99999999999], [1.60282554E12, 20109.703703703704], [1.60282584E12, 28546.809523809523], [1.60282716E12, 22812.73076923077], [1.60282686E12, 27391.590909090915], [1.60282704E12, 26416.043478260875], [1.60282674E12, 28999.42857142857], [1.60282644E12, 18561.678571428572], [1.60282614E12, 24849.0], [1.60282728E12, 23277.586206896554], [1.60282698E12, 28824.571428571428], [1.60282668E12, 28755.25], [1.60282638E12, 23393.14814814815], [1.60282656E12, 23558.652173913044], [1.60282626E12, 24408.59999999999], [1.60282566E12, 26016.04], [1.60282596E12, 28314.454545454548], [1.6028268E12, 28295.85714285714], [1.6028265E12, 26461.4], [1.6028259E12, 29037.8], [1.6028262E12, 19369.21212121212], [1.60282578E12, 28740.285714285714], [1.60282608E12, 28589.136363636368], [1.60282548E12, 23722.888888888887], [1.6028271E12, 24153.653846153844]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60282542E12, "maxY": 9.444444444444445, "series": [{"data": [[1.60282632E12, 0.2692307692307693], [1.60282602E12, 0.7000000000000001], [1.60282542E12, 9.444444444444445], [1.60282572E12, 0.5000000000000001], [1.60282734E12, 0.0], [1.6028256E12, 0.9333333333333332], [1.60282722E12, 0.3636363636363636], [1.60282692E12, 0.5238095238095238], [1.60282662E12, 0.2777777777777778], [1.60282554E12, 0.2962962962962964], [1.60282584E12, 0.47619047619047616], [1.60282716E12, 0.5384615384615384], [1.60282686E12, 0.45454545454545464], [1.60282704E12, 0.21739130434782608], [1.60282674E12, 0.5238095238095238], [1.60282644E12, 0.5000000000000002], [1.60282614E12, 0.4583333333333333], [1.60282728E12, 0.37931034482758624], [1.60282698E12, 0.6190476190476191], [1.60282668E12, 0.45000000000000007], [1.60282638E12, 0.2962962962962963], [1.60282656E12, 0.5217391304347826], [1.60282626E12, 0.28], [1.60282566E12, 0.44000000000000006], [1.60282596E12, 0.18181818181818185], [1.6028268E12, 0.3333333333333333], [1.6028265E12, 0.52], [1.6028259E12, 0.65], [1.6028262E12, 0.48484848484848486], [1.60282578E12, 0.33333333333333337], [1.60282608E12, 0.4090909090909091], [1.60282548E12, 0.3703703703703704], [1.6028271E12, 0.5769230769230769]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3119.0, "minX": 1.60282542E12, "maxY": 44606.0, "series": [{"data": [[1.60282632E12, 25524.0], [1.60282602E12, 29522.0], [1.60282542E12, 23108.0], [1.60282572E12, 29741.0], [1.60282734E12, 17281.0], [1.6028256E12, 44606.0], [1.60282722E12, 29184.0], [1.60282692E12, 29325.0], [1.60282662E12, 43285.0], [1.60282554E12, 24847.0], [1.60282584E12, 28697.0], [1.60282716E12, 27169.0], [1.60282686E12, 28331.0], [1.60282704E12, 28496.0], [1.60282674E12, 29552.0], [1.60282644E12, 27624.0], [1.60282614E12, 27585.0], [1.60282728E12, 37017.0], [1.60282698E12, 29015.0], [1.60282668E12, 29433.0], [1.60282638E12, 28512.0], [1.60282656E12, 25608.0], [1.60282626E12, 30641.0], [1.60282566E12, 32966.0], [1.60282596E12, 28998.0], [1.6028268E12, 28501.0], [1.6028265E12, 31430.0], [1.6028259E12, 29622.0], [1.6028262E12, 25057.0], [1.60282578E12, 29057.0], [1.60282608E12, 29776.0], [1.60282548E12, 27553.0], [1.6028271E12, 28071.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60282632E12, 17141.0], [1.60282602E12, 28273.0], [1.60282542E12, 3119.0], [1.60282572E12, 22794.0], [1.60282734E12, 16852.0], [1.6028256E12, 26394.0], [1.60282722E12, 18807.0], [1.60282692E12, 27910.0], [1.60282662E12, 27015.0], [1.60282554E12, 17095.0], [1.60282584E12, 28349.0], [1.60282716E12, 19264.0], [1.60282686E12, 26658.0], [1.60282704E12, 23607.0], [1.60282674E12, 28408.0], [1.60282644E12, 16421.0], [1.60282614E12, 22606.0], [1.60282728E12, 16218.0], [1.60282698E12, 28455.0], [1.60282668E12, 25815.0], [1.60282638E12, 18984.0], [1.60282656E12, 21837.0], [1.60282626E12, 17342.0], [1.60282566E12, 22473.0], [1.60282596E12, 27649.0], [1.6028268E12, 27902.0], [1.6028265E12, 22367.0], [1.6028259E12, 28588.0], [1.6028262E12, 16477.0], [1.60282578E12, 27855.0], [1.60282608E12, 25881.0], [1.60282548E12, 19343.0], [1.6028271E12, 20564.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60282632E12, 17141.0], [1.60282602E12, 28273.0], [1.60282542E12, 3119.0], [1.60282572E12, 22794.0], [1.60282734E12, 16852.0], [1.6028256E12, 26394.0], [1.60282722E12, 18807.0], [1.60282692E12, 27910.0], [1.60282662E12, 27015.0], [1.60282554E12, 17095.0], [1.60282584E12, 28349.0], [1.60282716E12, 19264.0], [1.60282686E12, 26658.0], [1.60282704E12, 23607.0], [1.60282674E12, 28408.0], [1.60282644E12, 16421.0], [1.60282614E12, 22606.0], [1.60282728E12, 16218.0], [1.60282698E12, 28455.0], [1.60282668E12, 25815.0], [1.60282638E12, 18984.0], [1.60282656E12, 21837.0], [1.60282626E12, 17342.0], [1.60282566E12, 22473.0], [1.60282596E12, 27649.0], [1.6028268E12, 27902.0], [1.6028265E12, 22367.0], [1.6028259E12, 28588.0], [1.6028262E12, 16477.0], [1.60282578E12, 27855.0], [1.60282608E12, 25881.0], [1.60282548E12, 19343.0], [1.6028271E12, 20564.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60282632E12, 17141.0], [1.60282602E12, 28273.0], [1.60282542E12, 3119.0], [1.60282572E12, 22794.0], [1.60282734E12, 16852.0], [1.6028256E12, 26394.0], [1.60282722E12, 18807.0], [1.60282692E12, 27910.0], [1.60282662E12, 27015.0], [1.60282554E12, 17095.0], [1.60282584E12, 28349.0], [1.60282716E12, 19264.0], [1.60282686E12, 26658.0], [1.60282704E12, 23607.0], [1.60282674E12, 28408.0], [1.60282644E12, 16421.0], [1.60282614E12, 22606.0], [1.60282728E12, 16218.0], [1.60282698E12, 28455.0], [1.60282668E12, 25815.0], [1.60282638E12, 18984.0], [1.60282656E12, 21837.0], [1.60282626E12, 17342.0], [1.60282566E12, 22473.0], [1.60282596E12, 27649.0], [1.6028268E12, 27902.0], [1.6028265E12, 22367.0], [1.6028259E12, 28588.0], [1.6028262E12, 16477.0], [1.60282578E12, 27855.0], [1.60282608E12, 25881.0], [1.60282548E12, 19343.0], [1.6028271E12, 20564.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60282632E12, 17141.0], [1.60282602E12, 28273.0], [1.60282542E12, 3119.0], [1.60282572E12, 22794.0], [1.60282734E12, 16852.0], [1.6028256E12, 26394.0], [1.60282722E12, 18807.0], [1.60282692E12, 27910.0], [1.60282662E12, 27015.0], [1.60282554E12, 17095.0], [1.60282584E12, 28349.0], [1.60282716E12, 19264.0], [1.60282686E12, 26658.0], [1.60282704E12, 23607.0], [1.60282674E12, 28408.0], [1.60282644E12, 16421.0], [1.60282614E12, 22606.0], [1.60282728E12, 16218.0], [1.60282698E12, 28455.0], [1.60282668E12, 25815.0], [1.60282638E12, 18984.0], [1.60282656E12, 21837.0], [1.60282626E12, 17342.0], [1.60282566E12, 22473.0], [1.60282596E12, 27649.0], [1.6028268E12, 27902.0], [1.6028265E12, 22367.0], [1.6028259E12, 28588.0], [1.6028262E12, 16477.0], [1.60282578E12, 27855.0], [1.60282608E12, 25881.0], [1.60282548E12, 19343.0], [1.6028271E12, 20564.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60282632E12, 21962.5], [1.60282602E12, 28700.5], [1.60282542E12, 13408.0], [1.60282572E12, 25884.0], [1.60282734E12, 16871.0], [1.6028256E12, 41100.0], [1.60282722E12, 26816.0], [1.60282692E12, 28842.0], [1.60282662E12, 35307.5], [1.60282554E12, 19043.0], [1.60282584E12, 28574.0], [1.60282716E12, 22128.0], [1.60282686E12, 27438.0], [1.60282704E12, 26027.0], [1.60282674E12, 29009.0], [1.60282644E12, 17292.0], [1.60282614E12, 24916.5], [1.60282728E12, 19789.0], [1.60282698E12, 28881.0], [1.60282668E12, 29045.0], [1.60282638E12, 23503.0], [1.60282656E12, 23584.0], [1.60282626E12, 21979.0], [1.60282566E12, 24482.0], [1.60282596E12, 28555.5], [1.6028268E12, 28355.0], [1.6028265E12, 26452.0], [1.6028259E12, 29089.0], [1.6028262E12, 18675.0], [1.60282578E12, 28824.0], [1.60282608E12, 28643.0], [1.60282548E12, 24935.0], [1.6028271E12, 23785.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26522.0, "minX": 1.0, "maxY": 26522.0, "series": [{"data": [[1.0, 26522.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26521.0, "minX": 1.0, "maxY": 26521.0, "series": [{"data": [[1.0, 26521.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60282542E12, "maxY": 0.55, "series": [{"data": [[1.60282632E12, 0.43333333333333335], [1.60282602E12, 0.3333333333333333], [1.60282542E12, 0.31666666666666665], [1.60282572E12, 0.36666666666666664], [1.6028256E12, 0.25], [1.60282722E12, 0.36666666666666664], [1.60282692E12, 0.35], [1.60282662E12, 0.3], [1.60282554E12, 0.45], [1.60282584E12, 0.35], [1.60282716E12, 0.43333333333333335], [1.60282686E12, 0.36666666666666664], [1.60282704E12, 0.38333333333333336], [1.60282674E12, 0.35], [1.60282644E12, 0.4666666666666667], [1.60282614E12, 0.4], [1.60282728E12, 0.36666666666666664], [1.60282698E12, 0.35], [1.60282668E12, 0.3333333333333333], [1.60282638E12, 0.45], [1.60282656E12, 0.38333333333333336], [1.60282626E12, 0.4166666666666667], [1.60282566E12, 0.4166666666666667], [1.60282596E12, 0.36666666666666664], [1.6028268E12, 0.35], [1.6028265E12, 0.4166666666666667], [1.6028259E12, 0.3333333333333333], [1.6028262E12, 0.55], [1.60282578E12, 0.35], [1.60282608E12, 0.36666666666666664], [1.60282548E12, 0.45], [1.6028271E12, 0.43333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282542E12, "maxY": 0.55, "series": [{"data": [[1.60282632E12, 0.43333333333333335], [1.60282602E12, 0.3333333333333333], [1.60282542E12, 0.15], [1.60282572E12, 0.36666666666666664], [1.60282734E12, 0.05], [1.6028256E12, 0.25], [1.60282722E12, 0.36666666666666664], [1.60282692E12, 0.35], [1.60282662E12, 0.3], [1.60282554E12, 0.45], [1.60282584E12, 0.35], [1.60282716E12, 0.43333333333333335], [1.60282686E12, 0.36666666666666664], [1.60282704E12, 0.38333333333333336], [1.60282674E12, 0.35], [1.60282644E12, 0.4666666666666667], [1.60282614E12, 0.4], [1.60282728E12, 0.48333333333333334], [1.60282698E12, 0.35], [1.60282668E12, 0.3333333333333333], [1.60282638E12, 0.45], [1.60282656E12, 0.38333333333333336], [1.60282626E12, 0.4166666666666667], [1.60282566E12, 0.4166666666666667], [1.60282596E12, 0.36666666666666664], [1.6028268E12, 0.35], [1.6028265E12, 0.4166666666666667], [1.6028259E12, 0.3333333333333333], [1.6028262E12, 0.55], [1.60282578E12, 0.35], [1.60282608E12, 0.36666666666666664], [1.60282548E12, 0.45], [1.6028271E12, 0.43333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282542E12, "maxY": 0.55, "series": [{"data": [[1.60282632E12, 0.43333333333333335], [1.60282602E12, 0.3333333333333333], [1.60282542E12, 0.15], [1.60282572E12, 0.36666666666666664], [1.60282734E12, 0.05], [1.6028256E12, 0.25], [1.60282722E12, 0.36666666666666664], [1.60282692E12, 0.35], [1.60282662E12, 0.3], [1.60282554E12, 0.45], [1.60282584E12, 0.35], [1.60282716E12, 0.43333333333333335], [1.60282686E12, 0.36666666666666664], [1.60282704E12, 0.38333333333333336], [1.60282674E12, 0.35], [1.60282644E12, 0.4666666666666667], [1.60282614E12, 0.4], [1.60282728E12, 0.48333333333333334], [1.60282698E12, 0.35], [1.60282668E12, 0.3333333333333333], [1.60282638E12, 0.45], [1.60282656E12, 0.38333333333333336], [1.60282626E12, 0.4166666666666667], [1.60282566E12, 0.4166666666666667], [1.60282596E12, 0.36666666666666664], [1.6028268E12, 0.35], [1.6028265E12, 0.4166666666666667], [1.6028259E12, 0.3333333333333333], [1.6028262E12, 0.55], [1.60282578E12, 0.35], [1.60282608E12, 0.36666666666666664], [1.60282548E12, 0.45], [1.6028271E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282542E12, "maxY": 0.55, "series": [{"data": [[1.60282632E12, 0.43333333333333335], [1.60282602E12, 0.3333333333333333], [1.60282542E12, 0.15], [1.60282572E12, 0.36666666666666664], [1.60282734E12, 0.05], [1.6028256E12, 0.25], [1.60282722E12, 0.36666666666666664], [1.60282692E12, 0.35], [1.60282662E12, 0.3], [1.60282554E12, 0.45], [1.60282584E12, 0.35], [1.60282716E12, 0.43333333333333335], [1.60282686E12, 0.36666666666666664], [1.60282704E12, 0.38333333333333336], [1.60282674E12, 0.35], [1.60282644E12, 0.4666666666666667], [1.60282614E12, 0.4], [1.60282728E12, 0.48333333333333334], [1.60282698E12, 0.35], [1.60282668E12, 0.3333333333333333], [1.60282638E12, 0.45], [1.60282656E12, 0.38333333333333336], [1.60282626E12, 0.4166666666666667], [1.60282566E12, 0.4166666666666667], [1.60282596E12, 0.36666666666666664], [1.6028268E12, 0.35], [1.6028265E12, 0.4166666666666667], [1.6028259E12, 0.3333333333333333], [1.6028262E12, 0.55], [1.60282578E12, 0.35], [1.60282608E12, 0.36666666666666664], [1.60282548E12, 0.45], [1.6028271E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

