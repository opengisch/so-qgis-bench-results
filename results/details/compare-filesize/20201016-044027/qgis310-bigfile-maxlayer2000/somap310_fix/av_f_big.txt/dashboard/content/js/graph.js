/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3129.0, "minX": 0.0, "maxY": 44369.0, "series": [{"data": [[0.0, 3129.0], [0.1, 3129.0], [0.2, 6119.0], [0.3, 8301.0], [0.4, 8301.0], [0.5, 11022.0], [0.6, 13575.0], [0.7, 16590.0], [0.8, 16590.0], [0.9, 16660.0], [1.0, 16661.0], [1.1, 16699.0], [1.2, 16699.0], [1.3, 16713.0], [1.4, 16732.0], [1.5, 16791.0], [1.6, 16791.0], [1.7, 16794.0], [1.8, 16903.0], [1.9, 16903.0], [2.0, 16922.0], [2.1, 16928.0], [2.2, 16951.0], [2.3, 16951.0], [2.4, 16952.0], [2.5, 16963.0], [2.6, 17012.0], [2.7, 17012.0], [2.8, 17056.0], [2.9, 17093.0], [3.0, 17112.0], [3.1, 17112.0], [3.2, 17120.0], [3.3, 17142.0], [3.4, 17142.0], [3.5, 17153.0], [3.6, 17167.0], [3.7, 17185.0], [3.8, 17185.0], [3.9, 17188.0], [4.0, 17228.0], [4.1, 17244.0], [4.2, 17244.0], [4.3, 17252.0], [4.4, 17288.0], [4.5, 17293.0], [4.6, 17293.0], [4.7, 17302.0], [4.8, 17307.0], [4.9, 17320.0], [5.0, 17320.0], [5.1, 17351.0], [5.2, 17369.0], [5.3, 17369.0], [5.4, 17426.0], [5.5, 17439.0], [5.6, 17476.0], [5.7, 17476.0], [5.8, 17504.0], [5.9, 17541.0], [6.0, 17560.0], [6.1, 17560.0], [6.2, 17614.0], [6.3, 17633.0], [6.4, 17678.0], [6.5, 17678.0], [6.6, 17687.0], [6.7, 17688.0], [6.8, 17688.0], [6.9, 17698.0], [7.0, 17705.0], [7.1, 17748.0], [7.2, 17748.0], [7.3, 17769.0], [7.4, 17821.0], [7.5, 17849.0], [7.6, 17849.0], [7.7, 17852.0], [7.8, 17896.0], [7.9, 17926.0], [8.0, 17926.0], [8.1, 17933.0], [8.2, 17941.0], [8.3, 17953.0], [8.4, 17953.0], [8.5, 17964.0], [8.6, 18030.0], [8.7, 18030.0], [8.8, 18035.0], [8.9, 18168.0], [9.0, 18243.0], [9.1, 18243.0], [9.2, 18438.0], [9.3, 18591.0], [9.4, 18632.0], [9.5, 18632.0], [9.6, 18694.0], [9.7, 18761.0], [9.8, 18791.0], [9.9, 18791.0], [10.0, 18846.0], [10.1, 18868.0], [10.2, 18868.0], [10.3, 18884.0], [10.4, 18912.0], [10.5, 18917.0], [10.6, 18917.0], [10.7, 18920.0], [10.8, 18957.0], [10.9, 18960.0], [11.0, 18960.0], [11.1, 18969.0], [11.2, 18984.0], [11.3, 19057.0], [11.4, 19057.0], [11.5, 19210.0], [11.6, 19254.0], [11.7, 19254.0], [11.8, 19288.0], [11.9, 19298.0], [12.0, 19399.0], [12.1, 19399.0], [12.2, 19463.0], [12.3, 19483.0], [12.4, 19527.0], [12.5, 19527.0], [12.6, 19542.0], [12.7, 19550.0], [12.8, 19623.0], [12.9, 19623.0], [13.0, 19668.0], [13.1, 19681.0], [13.2, 19708.0], [13.3, 19708.0], [13.4, 19735.0], [13.5, 19750.0], [13.6, 19750.0], [13.7, 19758.0], [13.8, 19765.0], [13.9, 19793.0], [14.0, 19793.0], [14.1, 19821.0], [14.2, 19845.0], [14.3, 19990.0], [14.4, 19990.0], [14.5, 19995.0], [14.6, 20016.0], [14.7, 20022.0], [14.8, 20022.0], [14.9, 20124.0], [15.0, 20134.0], [15.1, 20134.0], [15.2, 20191.0], [15.3, 20210.0], [15.4, 20303.0], [15.5, 20303.0], [15.6, 20317.0], [15.7, 20344.0], [15.8, 20346.0], [15.9, 20346.0], [16.0, 20382.0], [16.1, 20436.0], [16.2, 20448.0], [16.3, 20448.0], [16.4, 20485.0], [16.5, 20517.0], [16.6, 20590.0], [16.7, 20590.0], [16.8, 20760.0], [16.9, 20770.0], [17.0, 20770.0], [17.1, 20903.0], [17.2, 20945.0], [17.3, 20957.0], [17.4, 20957.0], [17.5, 21001.0], [17.6, 21192.0], [17.7, 21229.0], [17.8, 21229.0], [17.9, 21284.0], [18.0, 21401.0], [18.1, 21449.0], [18.2, 21449.0], [18.3, 21474.0], [18.4, 21476.0], [18.5, 21476.0], [18.6, 21570.0], [18.7, 21591.0], [18.8, 21597.0], [18.9, 21597.0], [19.0, 21612.0], [19.1, 21646.0], [19.2, 21647.0], [19.3, 21647.0], [19.4, 21650.0], [19.5, 21651.0], [19.6, 21670.0], [19.7, 21670.0], [19.8, 21689.0], [19.9, 21696.0], [20.0, 21701.0], [20.1, 21701.0], [20.2, 21726.0], [20.3, 21774.0], [20.4, 21774.0], [20.5, 21788.0], [20.6, 21821.0], [20.7, 21828.0], [20.8, 21828.0], [20.9, 21861.0], [21.0, 21876.0], [21.1, 21877.0], [21.2, 21877.0], [21.3, 21882.0], [21.4, 21884.0], [21.5, 21949.0], [21.6, 21949.0], [21.7, 21953.0], [21.8, 21960.0], [21.9, 21960.0], [22.0, 21974.0], [22.1, 22021.0], [22.2, 22228.0], [22.3, 22228.0], [22.4, 22276.0], [22.5, 22301.0], [22.6, 22317.0], [22.7, 22317.0], [22.8, 22319.0], [22.9, 22322.0], [23.0, 22428.0], [23.1, 22428.0], [23.2, 22429.0], [23.3, 22438.0], [23.4, 22438.0], [23.5, 22502.0], [23.6, 22530.0], [23.7, 22772.0], [23.8, 22772.0], [23.9, 22797.0], [24.0, 22803.0], [24.1, 22814.0], [24.2, 22814.0], [24.3, 22832.0], [24.4, 22850.0], [24.5, 22928.0], [24.6, 22928.0], [24.7, 22937.0], [24.8, 22946.0], [24.9, 22949.0], [25.0, 22949.0], [25.1, 22963.0], [25.2, 22989.0], [25.3, 22989.0], [25.4, 23015.0], [25.5, 23101.0], [25.6, 23106.0], [25.7, 23106.0], [25.8, 23145.0], [25.9, 23177.0], [26.0, 23213.0], [26.1, 23213.0], [26.2, 23219.0], [26.3, 23220.0], [26.4, 23230.0], [26.5, 23230.0], [26.6, 23245.0], [26.7, 23258.0], [26.8, 23258.0], [26.9, 23259.0], [27.0, 23266.0], [27.1, 23270.0], [27.2, 23270.0], [27.3, 23308.0], [27.4, 23361.0], [27.5, 23391.0], [27.6, 23391.0], [27.7, 23394.0], [27.8, 23516.0], [27.9, 23529.0], [28.0, 23529.0], [28.1, 23553.0], [28.2, 23571.0], [28.3, 23572.0], [28.4, 23572.0], [28.5, 23580.0], [28.6, 23588.0], [28.7, 23588.0], [28.8, 23599.0], [28.9, 23648.0], [29.0, 23650.0], [29.1, 23650.0], [29.2, 23661.0], [29.3, 23675.0], [29.4, 23677.0], [29.5, 23677.0], [29.6, 23679.0], [29.7, 23683.0], [29.8, 23703.0], [29.9, 23703.0], [30.0, 23738.0], [30.1, 23783.0], [30.2, 23783.0], [30.3, 23783.0], [30.4, 23786.0], [30.5, 23792.0], [30.6, 23792.0], [30.7, 23829.0], [30.8, 23880.0], [30.9, 23881.0], [31.0, 23881.0], [31.1, 23884.0], [31.2, 23890.0], [31.3, 23894.0], [31.4, 23894.0], [31.5, 23895.0], [31.6, 23922.0], [31.7, 23922.0], [31.8, 23925.0], [31.9, 23954.0], [32.0, 23971.0], [32.1, 23971.0], [32.2, 23980.0], [32.3, 23994.0], [32.4, 24012.0], [32.5, 24012.0], [32.6, 24012.0], [32.7, 24015.0], [32.8, 24026.0], [32.9, 24026.0], [33.0, 24043.0], [33.1, 24046.0], [33.2, 24067.0], [33.3, 24067.0], [33.4, 24074.0], [33.5, 24110.0], [33.6, 24110.0], [33.7, 24114.0], [33.8, 24119.0], [33.9, 24144.0], [34.0, 24144.0], [34.1, 24147.0], [34.2, 24163.0], [34.3, 24175.0], [34.4, 24175.0], [34.5, 24178.0], [34.6, 24238.0], [34.7, 24247.0], [34.8, 24247.0], [34.9, 24269.0], [35.0, 24325.0], [35.1, 24325.0], [35.2, 24327.0], [35.3, 24349.0], [35.4, 24362.0], [35.5, 24362.0], [35.6, 24373.0], [35.7, 24410.0], [35.8, 24418.0], [35.9, 24418.0], [36.0, 24426.0], [36.1, 24431.0], [36.2, 24436.0], [36.3, 24436.0], [36.4, 24438.0], [36.5, 24448.0], [36.6, 24466.0], [36.7, 24466.0], [36.8, 24477.0], [36.9, 24486.0], [37.0, 24486.0], [37.1, 24497.0], [37.2, 24501.0], [37.3, 24510.0], [37.4, 24510.0], [37.5, 24522.0], [37.6, 24592.0], [37.7, 24613.0], [37.8, 24613.0], [37.9, 24623.0], [38.0, 24646.0], [38.1, 24726.0], [38.2, 24726.0], [38.3, 24747.0], [38.4, 24749.0], [38.5, 24749.0], [38.6, 24756.0], [38.7, 24773.0], [38.8, 24844.0], [38.9, 24844.0], [39.0, 24870.0], [39.1, 24876.0], [39.2, 24978.0], [39.3, 24978.0], [39.4, 24991.0], [39.5, 25001.0], [39.6, 25074.0], [39.7, 25074.0], [39.8, 25083.0], [39.9, 25130.0], [40.0, 25163.0], [40.1, 25163.0], [40.2, 25221.0], [40.3, 25246.0], [40.4, 25246.0], [40.5, 25274.0], [40.6, 25282.0], [40.7, 25289.0], [40.8, 25289.0], [40.9, 25336.0], [41.0, 25358.0], [41.1, 25406.0], [41.2, 25406.0], [41.3, 25410.0], [41.4, 25417.0], [41.5, 25424.0], [41.6, 25424.0], [41.7, 25459.0], [41.8, 25524.0], [41.9, 25524.0], [42.0, 25537.0], [42.1, 25566.0], [42.2, 25578.0], [42.3, 25578.0], [42.4, 25657.0], [42.5, 25674.0], [42.6, 25679.0], [42.7, 25679.0], [42.8, 25681.0], [42.9, 25691.0], [43.0, 25691.0], [43.1, 25691.0], [43.2, 25708.0], [43.3, 25726.0], [43.4, 25726.0], [43.5, 25763.0], [43.6, 25805.0], [43.7, 25848.0], [43.8, 25848.0], [43.9, 25854.0], [44.0, 25855.0], [44.1, 25868.0], [44.2, 25868.0], [44.3, 25892.0], [44.4, 25893.0], [44.5, 25907.0], [44.6, 25907.0], [44.7, 25909.0], [44.8, 25935.0], [44.9, 25939.0], [45.0, 25939.0], [45.1, 25940.0], [45.2, 25949.0], [45.3, 25949.0], [45.4, 25956.0], [45.5, 26025.0], [45.6, 26084.0], [45.7, 26084.0], [45.8, 26124.0], [45.9, 26150.0], [46.0, 26200.0], [46.1, 26200.0], [46.2, 26209.0], [46.3, 26226.0], [46.4, 26291.0], [46.5, 26291.0], [46.6, 26292.0], [46.7, 26294.0], [46.8, 26294.0], [46.9, 26333.0], [47.0, 26348.0], [47.1, 26384.0], [47.2, 26384.0], [47.3, 26385.0], [47.4, 26424.0], [47.5, 26429.0], [47.6, 26429.0], [47.7, 26466.0], [47.8, 26495.0], [47.9, 26496.0], [48.0, 26496.0], [48.1, 26558.0], [48.2, 26575.0], [48.3, 26628.0], [48.4, 26628.0], [48.5, 26644.0], [48.6, 26653.0], [48.7, 26653.0], [48.8, 26653.0], [48.9, 26755.0], [49.0, 26856.0], [49.1, 26856.0], [49.2, 26857.0], [49.3, 26875.0], [49.4, 26917.0], [49.5, 26917.0], [49.6, 26932.0], [49.7, 26940.0], [49.8, 26958.0], [49.9, 26958.0], [50.0, 26965.0], [50.1, 26969.0], [50.2, 26969.0], [50.3, 26984.0], [50.4, 26986.0], [50.5, 27015.0], [50.6, 27015.0], [50.7, 27132.0], [50.8, 27145.0], [50.9, 27164.0], [51.0, 27164.0], [51.1, 27191.0], [51.2, 27215.0], [51.3, 27232.0], [51.4, 27232.0], [51.5, 27278.0], [51.6, 27298.0], [51.7, 27298.0], [51.8, 27340.0], [51.9, 27348.0], [52.0, 27359.0], [52.1, 27359.0], [52.2, 27401.0], [52.3, 27410.0], [52.4, 27429.0], [52.5, 27429.0], [52.6, 27449.0], [52.7, 27469.0], [52.8, 27478.0], [52.9, 27478.0], [53.0, 27525.0], [53.1, 27553.0], [53.2, 27596.0], [53.3, 27596.0], [53.4, 27614.0], [53.5, 27616.0], [53.6, 27616.0], [53.7, 27649.0], [53.8, 27675.0], [53.9, 27694.0], [54.0, 27694.0], [54.1, 27705.0], [54.2, 27729.0], [54.3, 27730.0], [54.4, 27730.0], [54.5, 27756.0], [54.6, 27777.0], [54.7, 27789.0], [54.8, 27789.0], [54.9, 27796.0], [55.0, 27835.0], [55.1, 27835.0], [55.2, 27837.0], [55.3, 27851.0], [55.4, 27851.0], [55.5, 27851.0], [55.6, 27884.0], [55.7, 27908.0], [55.8, 27909.0], [55.9, 27909.0], [56.0, 27920.0], [56.1, 27960.0], [56.2, 27989.0], [56.3, 27989.0], [56.4, 27992.0], [56.5, 28018.0], [56.6, 28038.0], [56.7, 28038.0], [56.8, 28051.0], [56.9, 28061.0], [57.0, 28061.0], [57.1, 28075.0], [57.2, 28081.0], [57.3, 28087.0], [57.4, 28087.0], [57.5, 28116.0], [57.6, 28134.0], [57.7, 28135.0], [57.8, 28135.0], [57.9, 28150.0], [58.0, 28170.0], [58.1, 28254.0], [58.2, 28254.0], [58.3, 28274.0], [58.4, 28307.0], [58.5, 28307.0], [58.6, 28321.0], [58.7, 28341.0], [58.8, 28352.0], [58.9, 28352.0], [59.0, 28364.0], [59.1, 28381.0], [59.2, 28393.0], [59.3, 28393.0], [59.4, 28413.0], [59.5, 28414.0], [59.6, 28421.0], [59.7, 28421.0], [59.8, 28429.0], [59.9, 28432.0], [60.0, 28436.0], [60.1, 28436.0], [60.2, 28453.0], [60.3, 28491.0], [60.4, 28491.0], [60.5, 28498.0], [60.6, 28504.0], [60.7, 28528.0], [60.8, 28528.0], [60.9, 28532.0], [61.0, 28537.0], [61.1, 28542.0], [61.2, 28542.0], [61.3, 28545.0], [61.4, 28550.0], [61.5, 28558.0], [61.6, 28558.0], [61.7, 28566.0], [61.8, 28581.0], [61.9, 28581.0], [62.0, 28582.0], [62.1, 28584.0], [62.2, 28590.0], [62.3, 28590.0], [62.4, 28590.0], [62.5, 28591.0], [62.6, 28592.0], [62.7, 28592.0], [62.8, 28604.0], [62.9, 28636.0], [63.0, 28641.0], [63.1, 28641.0], [63.2, 28672.0], [63.3, 28682.0], [63.4, 28682.0], [63.5, 28688.0], [63.6, 28698.0], [63.7, 28715.0], [63.8, 28715.0], [63.9, 28716.0], [64.0, 28718.0], [64.1, 28722.0], [64.2, 28722.0], [64.3, 28728.0], [64.4, 28733.0], [64.5, 28764.0], [64.6, 28764.0], [64.7, 28768.0], [64.8, 28771.0], [64.9, 28777.0], [65.0, 28777.0], [65.1, 28780.0], [65.2, 28784.0], [65.3, 28784.0], [65.4, 28788.0], [65.5, 28793.0], [65.6, 28800.0], [65.7, 28800.0], [65.8, 28801.0], [65.9, 28806.0], [66.0, 28819.0], [66.1, 28819.0], [66.2, 28820.0], [66.3, 28825.0], [66.4, 28834.0], [66.5, 28834.0], [66.6, 28835.0], [66.7, 28836.0], [66.8, 28836.0], [66.9, 28837.0], [67.0, 28838.0], [67.1, 28844.0], [67.2, 28844.0], [67.3, 28847.0], [67.4, 28854.0], [67.5, 28861.0], [67.6, 28861.0], [67.7, 28861.0], [67.8, 28868.0], [67.9, 28869.0], [68.0, 28869.0], [68.1, 28884.0], [68.2, 28895.0], [68.3, 28899.0], [68.4, 28899.0], [68.5, 28899.0], [68.6, 28902.0], [68.7, 28902.0], [68.8, 28903.0], [68.9, 28906.0], [69.0, 28928.0], [69.1, 28928.0], [69.2, 28930.0], [69.3, 28939.0], [69.4, 28939.0], [69.5, 28939.0], [69.6, 28942.0], [69.7, 28944.0], [69.8, 28946.0], [69.9, 28946.0], [70.0, 28953.0], [70.1, 28955.0], [70.2, 28955.0], [70.3, 28957.0], [70.4, 28965.0], [70.5, 28972.0], [70.6, 28972.0], [70.7, 28986.0], [70.8, 28988.0], [70.9, 28989.0], [71.0, 28989.0], [71.1, 28989.0], [71.2, 28990.0], [71.3, 28990.0], [71.4, 28990.0], [71.5, 28992.0], [71.6, 28999.0], [71.7, 28999.0], [71.8, 29003.0], [71.9, 29008.0], [72.0, 29008.0], [72.1, 29008.0], [72.2, 29011.0], [72.3, 29015.0], [72.4, 29015.0], [72.5, 29015.0], [72.6, 29017.0], [72.7, 29018.0], [72.8, 29021.0], [72.9, 29021.0], [73.0, 29034.0], [73.1, 29043.0], [73.2, 29046.0], [73.3, 29046.0], [73.4, 29051.0], [73.5, 29054.0], [73.6, 29054.0], [73.7, 29055.0], [73.8, 29056.0], [73.9, 29058.0], [74.0, 29058.0], [74.1, 29060.0], [74.2, 29062.0], [74.3, 29063.0], [74.4, 29063.0], [74.5, 29067.0], [74.6, 29078.0], [74.7, 29086.0], [74.8, 29086.0], [74.9, 29095.0], [75.0, 29117.0], [75.1, 29117.0], [75.2, 29121.0], [75.3, 29127.0], [75.4, 29134.0], [75.5, 29134.0], [75.6, 29135.0], [75.7, 29139.0], [75.8, 29148.0], [75.9, 29148.0], [76.0, 29158.0], [76.1, 29160.0], [76.2, 29160.0], [76.3, 29160.0], [76.4, 29161.0], [76.5, 29194.0], [76.6, 29197.0], [76.7, 29197.0], [76.8, 29205.0], [76.9, 29206.0], [77.0, 29206.0], [77.1, 29212.0], [77.2, 29215.0], [77.3, 29216.0], [77.4, 29216.0], [77.5, 29219.0], [77.6, 29225.0], [77.7, 29229.0], [77.8, 29229.0], [77.9, 29235.0], [78.0, 29243.0], [78.1, 29247.0], [78.2, 29247.0], [78.3, 29252.0], [78.4, 29257.0], [78.5, 29257.0], [78.6, 29266.0], [78.7, 29271.0], [78.8, 29272.0], [78.9, 29272.0], [79.0, 29283.0], [79.1, 29305.0], [79.2, 29309.0], [79.3, 29309.0], [79.4, 29312.0], [79.5, 29313.0], [79.6, 29313.0], [79.7, 29313.0], [79.8, 29315.0], [79.9, 29330.0], [80.0, 29331.0], [80.1, 29331.0], [80.2, 29341.0], [80.3, 29344.0], [80.4, 29344.0], [80.5, 29354.0], [80.6, 29356.0], [80.7, 29360.0], [80.8, 29360.0], [80.9, 29361.0], [81.0, 29366.0], [81.1, 29373.0], [81.2, 29373.0], [81.3, 29374.0], [81.4, 29378.0], [81.5, 29380.0], [81.6, 29380.0], [81.7, 29384.0], [81.8, 29385.0], [81.9, 29385.0], [82.0, 29393.0], [82.1, 29393.0], [82.2, 29394.0], [82.3, 29394.0], [82.4, 29403.0], [82.5, 29404.0], [82.6, 29405.0], [82.7, 29405.0], [82.8, 29410.0], [82.9, 29414.0], [83.0, 29414.0], [83.1, 29414.0], [83.2, 29414.0], [83.3, 29415.0], [83.4, 29415.0], [83.5, 29416.0], [83.6, 29416.0], [83.7, 29424.0], [83.8, 29424.0], [83.9, 29428.0], [84.0, 29451.0], [84.1, 29451.0], [84.2, 29451.0], [84.3, 29456.0], [84.4, 29460.0], [84.5, 29460.0], [84.6, 29460.0], [84.7, 29460.0], [84.8, 29463.0], [84.9, 29467.0], [85.0, 29467.0], [85.1, 29467.0], [85.2, 29480.0], [85.3, 29480.0], [85.4, 29484.0], [85.5, 29509.0], [85.6, 29510.0], [85.7, 29510.0], [85.8, 29510.0], [85.9, 29510.0], [86.0, 29516.0], [86.1, 29516.0], [86.2, 29516.0], [86.3, 29516.0], [86.4, 29517.0], [86.5, 29517.0], [86.6, 29519.0], [86.7, 29520.0], [86.8, 29520.0], [86.9, 29531.0], [87.0, 29537.0], [87.1, 29540.0], [87.2, 29540.0], [87.3, 29545.0], [87.4, 29551.0], [87.5, 29556.0], [87.6, 29556.0], [87.7, 29556.0], [87.8, 29570.0], [87.9, 29570.0], [88.0, 29570.0], [88.1, 29570.0], [88.2, 29571.0], [88.3, 29574.0], [88.4, 29574.0], [88.5, 29576.0], [88.6, 29583.0], [88.7, 29583.0], [88.8, 29595.0], [88.9, 29596.0], [89.0, 29611.0], [89.1, 29611.0], [89.2, 29619.0], [89.3, 29625.0], [89.4, 29625.0], [89.5, 29625.0], [89.6, 29639.0], [89.7, 29641.0], [89.8, 29646.0], [89.9, 29646.0], [90.0, 29656.0], [90.1, 29658.0], [90.2, 29658.0], [90.3, 29659.0], [90.4, 29664.0], [90.5, 29672.0], [90.6, 29672.0], [90.7, 29681.0], [90.8, 29695.0], [90.9, 29706.0], [91.0, 29706.0], [91.1, 29714.0], [91.2, 29715.0], [91.3, 29718.0], [91.4, 29718.0], [91.5, 29740.0], [91.6, 29743.0], [91.7, 29743.0], [91.8, 29758.0], [91.9, 29761.0], [92.0, 29764.0], [92.1, 29764.0], [92.2, 29769.0], [92.3, 29772.0], [92.4, 29801.0], [92.5, 29801.0], [92.6, 29809.0], [92.7, 29856.0], [92.8, 29872.0], [92.9, 29872.0], [93.0, 29887.0], [93.1, 29920.0], [93.2, 29998.0], [93.3, 29998.0], [93.4, 30105.0], [93.5, 30264.0], [93.6, 30264.0], [93.7, 30295.0], [93.8, 30625.0], [93.9, 30678.0], [94.0, 30678.0], [94.1, 30794.0], [94.2, 30955.0], [94.3, 31024.0], [94.4, 31024.0], [94.5, 31042.0], [94.6, 31137.0], [94.7, 31241.0], [94.8, 31241.0], [94.9, 31292.0], [95.0, 31348.0], [95.1, 31348.0], [95.2, 31451.0], [95.3, 31534.0], [95.4, 31808.0], [95.5, 31808.0], [95.6, 32124.0], [95.7, 32233.0], [95.8, 32536.0], [95.9, 32536.0], [96.0, 32953.0], [96.1, 33001.0], [96.2, 33142.0], [96.3, 33142.0], [96.4, 33619.0], [96.5, 33758.0], [96.6, 33995.0], [96.7, 33995.0], [96.8, 34511.0], [96.9, 35147.0], [97.0, 35147.0], [97.1, 35403.0], [97.2, 36027.0], [97.3, 36267.0], [97.4, 36267.0], [97.5, 36363.0], [97.6, 37240.0], [97.7, 37537.0], [97.8, 37537.0], [97.9, 37736.0], [98.0, 38627.0], [98.1, 39179.0], [98.2, 39179.0], [98.3, 40379.0], [98.4, 41043.0], [98.5, 41043.0], [98.6, 41341.0], [98.7, 41381.0], [98.8, 41484.0], [98.9, 41484.0], [99.0, 42487.0], [99.1, 42734.0], [99.2, 43161.0], [99.3, 43161.0], [99.4, 43231.0], [99.5, 43458.0], [99.6, 43535.0], [99.7, 43535.0], [99.8, 43937.0], [99.9, 44369.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 26.0, "series": [{"data": [[33900.0, 1.0], [32900.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [33100.0, 1.0], [36300.0, 1.0], [35100.0, 1.0], [37700.0, 1.0], [37500.0, 1.0], [39100.0, 1.0], [40300.0, 1.0], [41300.0, 2.0], [42700.0, 1.0], [43100.0, 1.0], [44300.0, 1.0], [43900.0, 1.0], [43500.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8300.0, 1.0], [11000.0, 1.0], [13500.0, 1.0], [17200.0, 5.0], [16500.0, 1.0], [17100.0, 7.0], [17400.0, 3.0], [17300.0, 5.0], [17000.0, 3.0], [16900.0, 6.0], [16600.0, 3.0], [16700.0, 4.0], [17600.0, 6.0], [18100.0, 1.0], [17900.0, 5.0], [17700.0, 3.0], [17500.0, 3.0], [17800.0, 4.0], [18000.0, 2.0], [18400.0, 1.0], [18200.0, 1.0], [18600.0, 2.0], [18700.0, 2.0], [18900.0, 7.0], [18800.0, 3.0], [19200.0, 4.0], [18500.0, 1.0], [19000.0, 1.0], [19300.0, 1.0], [19400.0, 2.0], [20300.0, 5.0], [20200.0, 1.0], [20100.0, 3.0], [19800.0, 2.0], [19500.0, 3.0], [19600.0, 3.0], [20000.0, 2.0], [20400.0, 3.0], [19900.0, 2.0], [19700.0, 6.0], [21500.0, 3.0], [21400.0, 4.0], [21000.0, 1.0], [20500.0, 2.0], [21100.0, 1.0], [20700.0, 2.0], [21200.0, 2.0], [20900.0, 3.0], [21700.0, 4.0], [21900.0, 4.0], [21800.0, 7.0], [21600.0, 8.0], [22500.0, 2.0], [22200.0, 2.0], [22300.0, 4.0], [22400.0, 3.0], [22000.0, 1.0], [23500.0, 8.0], [22800.0, 4.0], [23200.0, 9.0], [23300.0, 4.0], [22900.0, 6.0], [23100.0, 4.0], [23000.0, 1.0], [22700.0, 2.0], [23800.0, 7.0], [24400.0, 11.0], [23600.0, 7.0], [24100.0, 8.0], [24000.0, 8.0], [23900.0, 6.0], [24200.0, 3.0], [24300.0, 5.0], [24500.0, 4.0], [23700.0, 6.0], [25400.0, 5.0], [25200.0, 5.0], [24600.0, 3.0], [25500.0, 4.0], [25100.0, 2.0], [24700.0, 5.0], [25000.0, 3.0], [24900.0, 2.0], [24800.0, 3.0], [25300.0, 2.0], [26500.0, 2.0], [26200.0, 6.0], [25600.0, 6.0], [26300.0, 4.0], [26600.0, 4.0], [25900.0, 7.0], [26000.0, 2.0], [26100.0, 2.0], [25700.0, 3.0], [25800.0, 7.0], [26400.0, 5.0], [26700.0, 1.0], [27000.0, 1.0], [27400.0, 6.0], [26900.0, 8.0], [27500.0, 3.0], [27300.0, 3.0], [27600.0, 5.0], [27200.0, 4.0], [27100.0, 4.0], [26800.0, 3.0], [28500.0, 16.0], [28300.0, 7.0], [27700.0, 7.0], [28400.0, 9.0], [27800.0, 5.0], [28600.0, 7.0], [28200.0, 2.0], [27900.0, 6.0], [28000.0, 7.0], [28100.0, 5.0], [28900.0, 23.0], [29200.0, 17.0], [29000.0, 24.0], [29100.0, 13.0], [28800.0, 22.0], [28700.0, 14.0], [29300.0, 24.0], [29400.0, 23.0], [29600.0, 14.0], [29500.0, 26.0], [30600.0, 2.0], [30200.0, 2.0], [29700.0, 11.0], [29900.0, 2.0], [30100.0, 1.0], [29800.0, 5.0], [30700.0, 1.0], [31200.0, 2.0], [31100.0, 1.0], [31000.0, 2.0], [30900.0, 1.0], [31400.0, 1.0], [31500.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [32200.0, 1.0], [31800.0, 1.0], [33000.0, 1.0], [33600.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [36000.0, 1.0], [37200.0, 1.0], [38600.0, 1.0], [41400.0, 1.0], [42400.0, 1.0], [41000.0, 1.0], [43400.0, 1.0], [43200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.5, "minX": 1.60282962E12, "maxY": 10.0, "series": [{"data": [[1.60283124E12, 10.0], [1.60283094E12, 10.0], [1.60282962E12, 10.0], [1.60282992E12, 10.0], [1.60283154E12, 7.5], [1.60282974E12, 10.0], [1.60283004E12, 10.0], [1.60283064E12, 10.0], [1.60283034E12, 10.0], [1.6028298E12, 10.0], [1.60283142E12, 10.0], [1.6028301E12, 10.0], [1.6028304E12, 10.0], [1.60283052E12, 10.0], [1.60283022E12, 10.0], [1.60283112E12, 10.0], [1.60283082E12, 10.0], [1.60282998E12, 10.0], [1.60283028E12, 10.0], [1.60283088E12, 10.0], [1.60283058E12, 10.0], [1.602831E12, 10.0], [1.6028307E12, 10.0], [1.60282968E12, 10.0], [1.6028313E12, 10.0], [1.60283076E12, 10.0], [1.60283046E12, 10.0], [1.60283136E12, 10.0], [1.60283106E12, 10.0], [1.60283148E12, 10.0], [1.60283118E12, 10.0], [1.60282986E12, 10.0], [1.60283016E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283154E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17142.0, "minX": 1.0, "maxY": 26021.966942148763, "series": [{"data": [[8.0, 17167.0], [4.0, 17351.0], [2.0, 17302.0], [1.0, 17896.0], [9.0, 17142.0], [10.0, 26021.966942148763], [5.0, 17320.0], [6.0, 17293.0], [3.0, 17288.0], [7.0, 17252.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25915.59047619048]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58.53333333333333, "minX": 1.60282962E12, "maxY": 197387.78333333333, "series": [{"data": [[1.60283124E12, 43928.48333333333], [1.60283094E12, 51641.083333333336], [1.60282962E12, 107266.18333333333], [1.60282992E12, 46340.0], [1.60283154E12, 13105.266666666666], [1.60282974E12, 112282.96666666666], [1.60283004E12, 45248.3], [1.60283064E12, 58165.98333333333], [1.60283034E12, 28798.583333333332], [1.6028298E12, 82599.41666666667], [1.60283142E12, 154994.43333333332], [1.6028301E12, 49033.6], [1.6028304E12, 127689.96666666666], [1.60283052E12, 79629.75], [1.60283022E12, 45140.85], [1.60283112E12, 46103.95], [1.60283082E12, 29388.166666666668], [1.60282998E12, 48012.1], [1.60283028E12, 45014.816666666666], [1.60283088E12, 47379.23333333333], [1.60283058E12, 197387.78333333333], [1.602831E12, 47772.05], [1.6028307E12, 86749.2], [1.60282968E12, 153071.78333333333], [1.6028313E12, 28291.116666666665], [1.60283076E12, 80599.23333333334], [1.60283046E12, 121621.56666666667], [1.60283136E12, 29656.5], [1.60283106E12, 52273.38333333333], [1.60283148E12, 75909.43333333333], [1.60283118E12, 51020.683333333334], [1.60282986E12, 81565.4], [1.60283016E12, 55762.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60283124E12, 160.56666666666666], [1.60283094E12, 153.46666666666667], [1.60282962E12, 58.53333333333333], [1.60282992E12, 161.31666666666666], [1.60283154E12, 120.06666666666666], [1.60282974E12, 202.13333333333333], [1.60283004E12, 153.38333333333333], [1.60283064E12, 215.63333333333333], [1.60283034E12, 182.48333333333332], [1.6028298E12, 111.9], [1.60283142E12, 181.5], [1.6028301E12, 146.15], [1.6028304E12, 210.05], [1.60283052E12, 194.01666666666668], [1.60283022E12, 153.36666666666667], [1.60283112E12, 146.13333333333333], [1.60283082E12, 117.51666666666667], [1.60282998E12, 146.13333333333333], [1.60283028E12, 146.03333333333333], [1.60283088E12, 153.41666666666666], [1.60283058E12, 183.18333333333334], [1.602831E12, 153.43333333333334], [1.6028307E12, 165.11666666666667], [1.60282968E12, 191.06666666666666], [1.6028313E12, 175.05], [1.60283076E12, 190.55], [1.60283046E12, 173.41666666666666], [1.60283136E12, 189.96666666666667], [1.60283106E12, 154.35], [1.60283148E12, 158.96666666666667], [1.60283118E12, 153.41666666666666], [1.60282986E12, 183.28333333333333], [1.60283016E12, 153.68333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283154E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12383.375, "minX": 1.60282962E12, "maxY": 38244.0, "series": [{"data": [[1.60283124E12, 28417.136363636368], [1.60283094E12, 29103.190476190473], [1.60282962E12, 12383.375], [1.60282992E12, 25502.5], [1.60283154E12, 17299.888888888894], [1.60282974E12, 20077.785714285717], [1.60283004E12, 29061.38095238095], [1.60283064E12, 18075.32258064516], [1.60283034E12, 25818.479999999996], [1.6028298E12, 38244.0], [1.60283142E12, 22428.8], [1.6028301E12, 29717.699999999997], [1.6028304E12, 20765.137931034482], [1.60283052E12, 22914.607142857145], [1.60283022E12, 29390.666666666664], [1.60283112E12, 28914.15], [1.60283082E12, 32529.375], [1.60282998E12, 28992.599999999995], [1.60283028E12, 29300.6], [1.60283088E12, 29961.52380952381], [1.60283058E12, 24736.600000000002], [1.602831E12, 29072.714285714286], [1.6028307E12, 26395.045454545456], [1.60282968E12, 24489.653846153848], [1.6028313E12, 25363.041666666668], [1.60283076E12, 24755.884615384613], [1.60283046E12, 23010.208333333332], [1.60283136E12, 23243.42307692308], [1.60283106E12, 28484.14285714286], [1.60283148E12, 29341.454545454544], [1.60283118E12, 29273.42857142857], [1.60282986E12, 26427.6], [1.60283016E12, 28755.76190476191]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60283154E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 12377.374999999998, "minX": 1.60282962E12, "maxY": 38241.06666666666, "series": [{"data": [[1.60283124E12, 28416.13636363636], [1.60283094E12, 29101.999999999996], [1.60282962E12, 12377.374999999998], [1.60282992E12, 25501.63636363636], [1.60283154E12, 17298.111111111113], [1.60282974E12, 20075.5], [1.60283004E12, 29060.285714285714], [1.60283064E12, 18073.774193548386], [1.60283034E12, 25817.96], [1.6028298E12, 38241.06666666666], [1.60283142E12, 22424.639999999996], [1.6028301E12, 29716.35], [1.6028304E12, 20762.206896551725], [1.60283052E12, 22911.785714285714], [1.60283022E12, 29389.476190476187], [1.60283112E12, 28912.700000000004], [1.60283082E12, 32528.499999999996], [1.60282998E12, 28991.399999999998], [1.60283028E12, 29299.45], [1.60283088E12, 29960.523809523813], [1.60283058E12, 24732.360000000008], [1.602831E12, 29071.619047619053], [1.6028307E12, 26393.136363636368], [1.60282968E12, 24487.153846153848], [1.6028313E12, 25362.625], [1.60283076E12, 24754.346153846156], [1.60283046E12, 23007.0], [1.60283136E12, 23242.999999999996], [1.60283106E12, 28482.90476190476], [1.60283148E12, 29339.136363636364], [1.60283118E12, 29272.23809523809], [1.60282986E12, 26426.000000000004], [1.60283016E12, 28754.619047619046]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60283154E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04761904761904763, "minX": 1.60282962E12, "maxY": 9.75, "series": [{"data": [[1.60283124E12, 0.5454545454545454], [1.60283094E12, 0.6190476190476191], [1.60282962E12, 9.75], [1.60282992E12, 0.45454545454545453], [1.60283154E12, 0.4444444444444444], [1.60282974E12, 0.42857142857142855], [1.60283004E12, 0.5714285714285715], [1.60283064E12, 0.3870967741935485], [1.60283034E12, 0.28], [1.6028298E12, 1.0666666666666667], [1.60283142E12, 0.48], [1.6028301E12, 0.6], [1.6028304E12, 0.3793103448275862], [1.60283052E12, 0.42857142857142866], [1.60283022E12, 0.5714285714285716], [1.60283112E12, 0.6499999999999999], [1.60283082E12, 0.37499999999999994], [1.60282998E12, 0.20000000000000004], [1.60283028E12, 0.7000000000000001], [1.60283088E12, 0.5238095238095238], [1.60283058E12, 0.52], [1.602831E12, 0.14285714285714288], [1.6028307E12, 0.36363636363636365], [1.60282968E12, 0.3076923076923077], [1.6028313E12, 0.5000000000000001], [1.60283076E12, 0.34615384615384615], [1.60283046E12, 0.25], [1.60283136E12, 0.5000000000000001], [1.60283106E12, 0.5714285714285716], [1.60283148E12, 0.3181818181818182], [1.60283118E12, 0.04761904761904763], [1.60282986E12, 0.52], [1.60283016E12, 0.09523809523809526]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60283154E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3129.0, "minX": 1.60282962E12, "maxY": 44369.0, "series": [{"data": [[1.60283124E12, 29394.0], [1.60283094E12, 29519.0], [1.60282962E12, 21570.0], [1.60282992E12, 29743.0], [1.60283154E12, 19483.0], [1.60282974E12, 23895.0], [1.60283004E12, 29706.0], [1.60283064E12, 19821.0], [1.60283034E12, 29060.0], [1.6028298E12, 44369.0], [1.60283142E12, 28274.0], [1.6028301E12, 30105.0], [1.6028304E12, 26495.0], [1.60283052E12, 31024.0], [1.60283022E12, 29595.0], [1.60283112E12, 29764.0], [1.60283082E12, 43231.0], [1.60282998E12, 29740.0], [1.60283028E12, 29772.0], [1.60283088E12, 38627.0], [1.60283058E12, 28393.0], [1.602831E12, 29576.0], [1.6028307E12, 31534.0], [1.60282968E12, 27729.0], [1.6028313E12, 28504.0], [1.60283076E12, 28965.0], [1.60283046E12, 31241.0], [1.60283136E12, 27191.0], [1.60283106E12, 29659.0], [1.60283148E12, 37537.0], [1.60283118E12, 29646.0], [1.60282986E12, 32953.0], [1.60283016E12, 29212.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60283124E12, 25892.0], [1.60283094E12, 28733.0], [1.60282962E12, 3129.0], [1.60282992E12, 22502.0], [1.60283154E12, 16661.0], [1.60282974E12, 17185.0], [1.60283004E12, 28590.0], [1.60283064E12, 16660.0], [1.60283034E12, 23270.0], [1.6028298E12, 25410.0], [1.60283142E12, 18917.0], [1.6028301E12, 29266.0], [1.6028304E12, 17426.0], [1.60283052E12, 17614.0], [1.60283022E12, 29216.0], [1.60283112E12, 27777.0], [1.60283082E12, 21953.0], [1.60282998E12, 26644.0], [1.60283028E12, 28682.0], [1.60283088E12, 25406.0], [1.60283058E12, 21229.0], [1.602831E12, 28825.0], [1.6028307E12, 20945.0], [1.60282968E12, 20124.0], [1.6028313E12, 21689.0], [1.60283076E12, 22937.0], [1.60283046E12, 18438.0], [1.60283136E12, 20382.0], [1.60283106E12, 27429.0], [1.60283148E12, 21949.0], [1.60283118E12, 28771.0], [1.60282986E12, 23266.0], [1.60283016E12, 28321.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60283124E12, 25892.0], [1.60283094E12, 28733.0], [1.60282962E12, 3129.0], [1.60282992E12, 22502.0], [1.60283154E12, 16661.0], [1.60282974E12, 17185.0], [1.60283004E12, 28590.0], [1.60283064E12, 16660.0], [1.60283034E12, 23270.0], [1.6028298E12, 25410.0], [1.60283142E12, 18917.0], [1.6028301E12, 29266.0], [1.6028304E12, 17426.0], [1.60283052E12, 17614.0], [1.60283022E12, 29216.0], [1.60283112E12, 27777.0], [1.60283082E12, 21953.0], [1.60282998E12, 26644.0], [1.60283028E12, 28682.0], [1.60283088E12, 25406.0], [1.60283058E12, 21229.0], [1.602831E12, 28825.0], [1.6028307E12, 20945.0], [1.60282968E12, 20124.0], [1.6028313E12, 21689.0], [1.60283076E12, 22937.0], [1.60283046E12, 18438.0], [1.60283136E12, 20382.0], [1.60283106E12, 27429.0], [1.60283148E12, 21949.0], [1.60283118E12, 28771.0], [1.60282986E12, 23266.0], [1.60283016E12, 28321.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60283124E12, 25892.0], [1.60283094E12, 28733.0], [1.60282962E12, 3129.0], [1.60282992E12, 22502.0], [1.60283154E12, 16661.0], [1.60282974E12, 17185.0], [1.60283004E12, 28590.0], [1.60283064E12, 16660.0], [1.60283034E12, 23270.0], [1.6028298E12, 25410.0], [1.60283142E12, 18917.0], [1.6028301E12, 29266.0], [1.6028304E12, 17426.0], [1.60283052E12, 17614.0], [1.60283022E12, 29216.0], [1.60283112E12, 27777.0], [1.60283082E12, 21953.0], [1.60282998E12, 26644.0], [1.60283028E12, 28682.0], [1.60283088E12, 25406.0], [1.60283058E12, 21229.0], [1.602831E12, 28825.0], [1.6028307E12, 20945.0], [1.60282968E12, 20124.0], [1.6028313E12, 21689.0], [1.60283076E12, 22937.0], [1.60283046E12, 18438.0], [1.60283136E12, 20382.0], [1.60283106E12, 27429.0], [1.60283148E12, 21949.0], [1.60283118E12, 28771.0], [1.60282986E12, 23266.0], [1.60283016E12, 28321.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60283124E12, 25892.0], [1.60283094E12, 28733.0], [1.60282962E12, 3129.0], [1.60282992E12, 22502.0], [1.60283154E12, 16661.0], [1.60282974E12, 17185.0], [1.60283004E12, 28590.0], [1.60283064E12, 16660.0], [1.60283034E12, 23270.0], [1.6028298E12, 25410.0], [1.60283142E12, 18917.0], [1.6028301E12, 29266.0], [1.6028304E12, 17426.0], [1.60283052E12, 17614.0], [1.60283022E12, 29216.0], [1.60283112E12, 27777.0], [1.60283082E12, 21953.0], [1.60282998E12, 26644.0], [1.60283028E12, 28682.0], [1.60283088E12, 25406.0], [1.60283058E12, 21229.0], [1.602831E12, 28825.0], [1.6028307E12, 20945.0], [1.60282968E12, 20124.0], [1.6028313E12, 21689.0], [1.60283076E12, 22937.0], [1.60283046E12, 18438.0], [1.60283136E12, 20382.0], [1.60283106E12, 27429.0], [1.60283148E12, 21949.0], [1.60283118E12, 28771.0], [1.60282986E12, 23266.0], [1.60283016E12, 28321.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60283124E12, 28839.0], [1.60283094E12, 29015.0], [1.60282962E12, 12298.5], [1.60282992E12, 25656.5], [1.60283154E12, 17270.0], [1.60282974E12, 19605.0], [1.60283004E12, 29056.0], [1.60283064E12, 17541.0], [1.60283034E12, 25907.0], [1.6028298E12, 41341.0], [1.60283142E12, 21774.0], [1.6028301E12, 29736.5], [1.6028304E12, 19210.0], [1.60283052E12, 23576.0], [1.60283022E12, 29378.0], [1.60283112E12, 29384.5], [1.60283082E12, 32174.5], [1.60282998E12, 29086.0], [1.60283028E12, 29433.5], [1.60283088E12, 28788.0], [1.60283058E12, 24238.0], [1.602831E12, 29011.0], [1.6028307E12, 26828.0], [1.60282968E12, 25837.5], [1.6028313E12, 25551.0], [1.60283076E12, 24018.5], [1.60283046E12, 21977.0], [1.60283136E12, 23139.0], [1.60283106E12, 28307.0], [1.60283148E12, 28518.0], [1.60283118E12, 29410.0], [1.60282986E12, 24418.0], [1.60283016E12, 28715.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283154E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26965.0, "minX": 1.0, "maxY": 26965.0, "series": [{"data": [[1.0, 26965.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26963.0, "minX": 1.0, "maxY": 26963.0, "series": [{"data": [[1.0, 26963.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60282962E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60283124E12, 0.36666666666666664], [1.60283094E12, 0.35], [1.60282962E12, 0.3], [1.60282992E12, 0.36666666666666664], [1.60283154E12, 0.13333333333333333], [1.60282974E12, 0.4666666666666667], [1.60283004E12, 0.35], [1.60283064E12, 0.5166666666666667], [1.60283034E12, 0.4166666666666667], [1.6028298E12, 0.25], [1.60283142E12, 0.4166666666666667], [1.6028301E12, 0.3333333333333333], [1.6028304E12, 0.48333333333333334], [1.60283052E12, 0.4666666666666667], [1.60283022E12, 0.35], [1.60283112E12, 0.3333333333333333], [1.60283082E12, 0.26666666666666666], [1.60282998E12, 0.3333333333333333], [1.60283028E12, 0.3333333333333333], [1.60283088E12, 0.35], [1.60283058E12, 0.4166666666666667], [1.602831E12, 0.35], [1.6028307E12, 0.36666666666666664], [1.60282968E12, 0.43333333333333335], [1.6028313E12, 0.4], [1.60283076E12, 0.43333333333333335], [1.60283046E12, 0.4], [1.60283136E12, 0.43333333333333335], [1.60283106E12, 0.35], [1.60283148E12, 0.36666666666666664], [1.60283118E12, 0.35], [1.60282986E12, 0.4166666666666667], [1.60283016E12, 0.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283154E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60282962E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60283124E12, 0.36666666666666664], [1.60283094E12, 0.35], [1.60282962E12, 0.13333333333333333], [1.60282992E12, 0.36666666666666664], [1.60283154E12, 0.3], [1.60282974E12, 0.4666666666666667], [1.60283004E12, 0.35], [1.60283064E12, 0.5166666666666667], [1.60283034E12, 0.4166666666666667], [1.6028298E12, 0.25], [1.60283142E12, 0.4166666666666667], [1.6028301E12, 0.3333333333333333], [1.6028304E12, 0.48333333333333334], [1.60283052E12, 0.4666666666666667], [1.60283022E12, 0.35], [1.60283112E12, 0.3333333333333333], [1.60283082E12, 0.26666666666666666], [1.60282998E12, 0.3333333333333333], [1.60283028E12, 0.3333333333333333], [1.60283088E12, 0.35], [1.60283058E12, 0.4166666666666667], [1.602831E12, 0.35], [1.6028307E12, 0.36666666666666664], [1.60282968E12, 0.43333333333333335], [1.6028313E12, 0.4], [1.60283076E12, 0.43333333333333335], [1.60283046E12, 0.4], [1.60283136E12, 0.43333333333333335], [1.60283106E12, 0.35], [1.60283148E12, 0.36666666666666664], [1.60283118E12, 0.35], [1.60282986E12, 0.4166666666666667], [1.60283016E12, 0.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283154E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60282962E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60283124E12, 0.36666666666666664], [1.60283094E12, 0.35], [1.60282962E12, 0.13333333333333333], [1.60282992E12, 0.36666666666666664], [1.60283154E12, 0.3], [1.60282974E12, 0.4666666666666667], [1.60283004E12, 0.35], [1.60283064E12, 0.5166666666666667], [1.60283034E12, 0.4166666666666667], [1.6028298E12, 0.25], [1.60283142E12, 0.4166666666666667], [1.6028301E12, 0.3333333333333333], [1.6028304E12, 0.48333333333333334], [1.60283052E12, 0.4666666666666667], [1.60283022E12, 0.35], [1.60283112E12, 0.3333333333333333], [1.60283082E12, 0.26666666666666666], [1.60282998E12, 0.3333333333333333], [1.60283028E12, 0.3333333333333333], [1.60283088E12, 0.35], [1.60283058E12, 0.4166666666666667], [1.602831E12, 0.35], [1.6028307E12, 0.36666666666666664], [1.60282968E12, 0.43333333333333335], [1.6028313E12, 0.4], [1.60283076E12, 0.43333333333333335], [1.60283046E12, 0.4], [1.60283136E12, 0.43333333333333335], [1.60283106E12, 0.35], [1.60283148E12, 0.36666666666666664], [1.60283118E12, 0.35], [1.60282986E12, 0.4166666666666667], [1.60283016E12, 0.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60283154E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60282962E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60283124E12, 0.36666666666666664], [1.60283094E12, 0.35], [1.60282962E12, 0.13333333333333333], [1.60282992E12, 0.36666666666666664], [1.60283154E12, 0.3], [1.60282974E12, 0.4666666666666667], [1.60283004E12, 0.35], [1.60283064E12, 0.5166666666666667], [1.60283034E12, 0.4166666666666667], [1.6028298E12, 0.25], [1.60283142E12, 0.4166666666666667], [1.6028301E12, 0.3333333333333333], [1.6028304E12, 0.48333333333333334], [1.60283052E12, 0.4666666666666667], [1.60283022E12, 0.35], [1.60283112E12, 0.3333333333333333], [1.60283082E12, 0.26666666666666666], [1.60282998E12, 0.3333333333333333], [1.60283028E12, 0.3333333333333333], [1.60283088E12, 0.35], [1.60283058E12, 0.4166666666666667], [1.602831E12, 0.35], [1.6028307E12, 0.36666666666666664], [1.60282968E12, 0.43333333333333335], [1.6028313E12, 0.4], [1.60283076E12, 0.43333333333333335], [1.60283046E12, 0.4], [1.60283136E12, 0.43333333333333335], [1.60283106E12, 0.35], [1.60283148E12, 0.36666666666666664], [1.60283118E12, 0.35], [1.60282986E12, 0.4166666666666667], [1.60283016E12, 0.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60283154E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

