/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3206.0, "minX": 0.0, "maxY": 45194.0, "series": [{"data": [[0.0, 3206.0], [0.1, 3206.0], [0.2, 5506.0], [0.3, 8577.0], [0.4, 8577.0], [0.5, 11602.0], [0.6, 14125.0], [0.7, 16665.0], [0.8, 16665.0], [0.9, 17054.0], [1.0, 17163.0], [1.1, 17197.0], [1.2, 17197.0], [1.3, 17308.0], [1.4, 17463.0], [1.5, 17466.0], [1.6, 17466.0], [1.7, 17518.0], [1.8, 17543.0], [1.9, 17543.0], [2.0, 17556.0], [2.1, 17561.0], [2.2, 17586.0], [2.3, 17586.0], [2.4, 17592.0], [2.5, 17614.0], [2.6, 17635.0], [2.7, 17635.0], [2.8, 17684.0], [2.9, 17696.0], [3.0, 17704.0], [3.1, 17704.0], [3.2, 17815.0], [3.3, 17857.0], [3.4, 17857.0], [3.5, 17865.0], [3.6, 17872.0], [3.7, 17876.0], [3.8, 17876.0], [3.9, 17981.0], [4.0, 17984.0], [4.1, 18004.0], [4.2, 18004.0], [4.3, 18021.0], [4.4, 18061.0], [4.5, 18080.0], [4.6, 18080.0], [4.7, 18083.0], [4.8, 18089.0], [4.9, 18090.0], [5.0, 18090.0], [5.1, 18112.0], [5.2, 18130.0], [5.3, 18130.0], [5.4, 18147.0], [5.5, 18150.0], [5.6, 18152.0], [5.7, 18152.0], [5.8, 18156.0], [5.9, 18182.0], [6.0, 18206.0], [6.1, 18206.0], [6.2, 18208.0], [6.3, 18243.0], [6.4, 18257.0], [6.5, 18257.0], [6.6, 18258.0], [6.7, 18272.0], [6.8, 18272.0], [6.9, 18284.0], [7.0, 18293.0], [7.1, 18297.0], [7.2, 18297.0], [7.3, 18318.0], [7.4, 18326.0], [7.5, 18334.0], [7.6, 18334.0], [7.7, 18355.0], [7.8, 18376.0], [7.9, 18378.0], [8.0, 18378.0], [8.1, 18400.0], [8.2, 18407.0], [8.3, 18452.0], [8.4, 18452.0], [8.5, 18484.0], [8.6, 18510.0], [8.7, 18510.0], [8.8, 18523.0], [8.9, 18612.0], [9.0, 18663.0], [9.1, 18663.0], [9.2, 18682.0], [9.3, 18728.0], [9.4, 18753.0], [9.5, 18753.0], [9.6, 18819.0], [9.7, 18863.0], [9.8, 18889.0], [9.9, 18889.0], [10.0, 19047.0], [10.1, 19083.0], [10.2, 19083.0], [10.3, 19110.0], [10.4, 19118.0], [10.5, 19131.0], [10.6, 19131.0], [10.7, 19166.0], [10.8, 19181.0], [10.9, 19195.0], [11.0, 19195.0], [11.1, 19241.0], [11.2, 19250.0], [11.3, 19261.0], [11.4, 19261.0], [11.5, 19327.0], [11.6, 19391.0], [11.7, 19391.0], [11.8, 19559.0], [11.9, 19609.0], [12.0, 19622.0], [12.1, 19622.0], [12.2, 19642.0], [12.3, 19660.0], [12.4, 19723.0], [12.5, 19723.0], [12.6, 19734.0], [12.7, 19738.0], [12.8, 19790.0], [12.9, 19790.0], [13.0, 19810.0], [13.1, 19863.0], [13.2, 19879.0], [13.3, 19879.0], [13.4, 19899.0], [13.5, 19901.0], [13.6, 19901.0], [13.7, 19925.0], [13.8, 20008.0], [13.9, 20063.0], [14.0, 20063.0], [14.1, 20106.0], [14.2, 20115.0], [14.3, 20123.0], [14.4, 20123.0], [14.5, 20149.0], [14.6, 20224.0], [14.7, 20251.0], [14.8, 20251.0], [14.9, 20259.0], [15.0, 20287.0], [15.1, 20287.0], [15.2, 20327.0], [15.3, 20390.0], [15.4, 20406.0], [15.5, 20406.0], [15.6, 20446.0], [15.7, 20450.0], [15.8, 20450.0], [15.9, 20450.0], [16.0, 20555.0], [16.1, 20557.0], [16.2, 20576.0], [16.3, 20576.0], [16.4, 20607.0], [16.5, 20654.0], [16.6, 20720.0], [16.7, 20720.0], [16.8, 20849.0], [16.9, 20852.0], [17.0, 20852.0], [17.1, 20871.0], [17.2, 21168.0], [17.3, 21177.0], [17.4, 21177.0], [17.5, 21238.0], [17.6, 21248.0], [17.7, 21315.0], [17.8, 21315.0], [17.9, 21324.0], [18.0, 21420.0], [18.1, 21445.0], [18.2, 21445.0], [18.3, 21452.0], [18.4, 21479.0], [18.5, 21479.0], [18.6, 21480.0], [18.7, 21507.0], [18.8, 21519.0], [18.9, 21519.0], [19.0, 21659.0], [19.1, 21685.0], [19.2, 21749.0], [19.3, 21749.0], [19.4, 21926.0], [19.5, 21929.0], [19.6, 21971.0], [19.7, 21971.0], [19.8, 21985.0], [19.9, 21989.0], [20.0, 21995.0], [20.1, 21995.0], [20.2, 22001.0], [20.3, 22012.0], [20.4, 22012.0], [20.5, 22017.0], [20.6, 22050.0], [20.7, 22050.0], [20.8, 22050.0], [20.9, 22153.0], [21.0, 22174.0], [21.1, 22208.0], [21.2, 22208.0], [21.3, 22220.0], [21.4, 22269.0], [21.5, 22299.0], [21.6, 22299.0], [21.7, 22333.0], [21.8, 22353.0], [21.9, 22353.0], [22.0, 22362.0], [22.1, 22383.0], [22.2, 22397.0], [22.3, 22397.0], [22.4, 22441.0], [22.5, 22449.0], [22.6, 22458.0], [22.7, 22458.0], [22.8, 22461.0], [22.9, 22470.0], [23.0, 22472.0], [23.1, 22472.0], [23.2, 22540.0], [23.3, 22634.0], [23.4, 22634.0], [23.5, 22697.0], [23.6, 22729.0], [23.7, 22846.0], [23.8, 22846.0], [23.9, 22861.0], [24.0, 22910.0], [24.1, 22921.0], [24.2, 22921.0], [24.3, 23004.0], [24.4, 23068.0], [24.5, 23123.0], [24.6, 23123.0], [24.7, 23128.0], [24.8, 23198.0], [24.9, 23210.0], [25.0, 23210.0], [25.1, 23217.0], [25.2, 23252.0], [25.3, 23252.0], [25.4, 23286.0], [25.5, 23299.0], [25.6, 23303.0], [25.7, 23303.0], [25.8, 23303.0], [25.9, 23365.0], [26.0, 23367.0], [26.1, 23367.0], [26.2, 23368.0], [26.3, 23399.0], [26.4, 23425.0], [26.5, 23425.0], [26.6, 23458.0], [26.7, 23481.0], [26.8, 23481.0], [26.9, 23556.0], [27.0, 23571.0], [27.1, 23577.0], [27.2, 23577.0], [27.3, 23708.0], [27.4, 23761.0], [27.5, 23780.0], [27.6, 23780.0], [27.7, 23829.0], [27.8, 23858.0], [27.9, 23865.0], [28.0, 23865.0], [28.1, 23866.0], [28.2, 23888.0], [28.3, 23893.0], [28.4, 23893.0], [28.5, 23913.0], [28.6, 23932.0], [28.7, 23932.0], [28.8, 23937.0], [28.9, 23962.0], [29.0, 23984.0], [29.1, 23984.0], [29.2, 23989.0], [29.3, 23991.0], [29.4, 24000.0], [29.5, 24000.0], [29.6, 24004.0], [29.7, 24015.0], [29.8, 24025.0], [29.9, 24025.0], [30.0, 24031.0], [30.1, 24053.0], [30.2, 24053.0], [30.3, 24062.0], [30.4, 24069.0], [30.5, 24089.0], [30.6, 24089.0], [30.7, 24109.0], [30.8, 24111.0], [30.9, 24113.0], [31.0, 24113.0], [31.1, 24130.0], [31.2, 24135.0], [31.3, 24136.0], [31.4, 24136.0], [31.5, 24154.0], [31.6, 24159.0], [31.7, 24159.0], [31.8, 24166.0], [31.9, 24186.0], [32.0, 24228.0], [32.1, 24228.0], [32.2, 24235.0], [32.3, 24240.0], [32.4, 24281.0], [32.5, 24281.0], [32.6, 24284.0], [32.7, 24295.0], [32.8, 24300.0], [32.9, 24300.0], [33.0, 24301.0], [33.1, 24325.0], [33.2, 24437.0], [33.3, 24437.0], [33.4, 24446.0], [33.5, 24452.0], [33.6, 24452.0], [33.7, 24488.0], [33.8, 24495.0], [33.9, 24604.0], [34.0, 24604.0], [34.1, 24611.0], [34.2, 24626.0], [34.3, 24636.0], [34.4, 24636.0], [34.5, 24647.0], [34.6, 24647.0], [34.7, 24648.0], [34.8, 24648.0], [34.9, 24665.0], [35.0, 24702.0], [35.1, 24702.0], [35.2, 24725.0], [35.3, 24748.0], [35.4, 24756.0], [35.5, 24756.0], [35.6, 24781.0], [35.7, 24818.0], [35.8, 24830.0], [35.9, 24830.0], [36.0, 24850.0], [36.1, 24891.0], [36.2, 24914.0], [36.3, 24914.0], [36.4, 24933.0], [36.5, 24972.0], [36.6, 24976.0], [36.7, 24976.0], [36.8, 25022.0], [36.9, 25030.0], [37.0, 25030.0], [37.1, 25036.0], [37.2, 25090.0], [37.3, 25092.0], [37.4, 25092.0], [37.5, 25112.0], [37.6, 25117.0], [37.7, 25121.0], [37.8, 25121.0], [37.9, 25141.0], [38.0, 25155.0], [38.1, 25181.0], [38.2, 25181.0], [38.3, 25193.0], [38.4, 25222.0], [38.5, 25222.0], [38.6, 25226.0], [38.7, 25228.0], [38.8, 25259.0], [38.9, 25259.0], [39.0, 25283.0], [39.1, 25294.0], [39.2, 25373.0], [39.3, 25373.0], [39.4, 25391.0], [39.5, 25431.0], [39.6, 25440.0], [39.7, 25440.0], [39.8, 25447.0], [39.9, 25463.0], [40.0, 25501.0], [40.1, 25501.0], [40.2, 25536.0], [40.3, 25677.0], [40.4, 25677.0], [40.5, 25707.0], [40.6, 25808.0], [40.7, 25835.0], [40.8, 25835.0], [40.9, 25856.0], [41.0, 25869.0], [41.1, 25882.0], [41.2, 25882.0], [41.3, 25904.0], [41.4, 25961.0], [41.5, 25998.0], [41.6, 25998.0], [41.7, 26004.0], [41.8, 26005.0], [41.9, 26005.0], [42.0, 26009.0], [42.1, 26010.0], [42.2, 26014.0], [42.3, 26014.0], [42.4, 26027.0], [42.5, 26057.0], [42.6, 26103.0], [42.7, 26103.0], [42.8, 26110.0], [42.9, 26128.0], [43.0, 26130.0], [43.1, 26130.0], [43.2, 26132.0], [43.3, 26137.0], [43.4, 26137.0], [43.5, 26148.0], [43.6, 26152.0], [43.7, 26181.0], [43.8, 26181.0], [43.9, 26206.0], [44.0, 26206.0], [44.1, 26207.0], [44.2, 26207.0], [44.3, 26232.0], [44.4, 26255.0], [44.5, 26269.0], [44.6, 26269.0], [44.7, 26286.0], [44.8, 26294.0], [44.9, 26312.0], [45.0, 26312.0], [45.1, 26324.0], [45.2, 26328.0], [45.3, 26328.0], [45.4, 26333.0], [45.5, 26345.0], [45.6, 26368.0], [45.7, 26368.0], [45.8, 26381.0], [45.9, 26429.0], [46.0, 26443.0], [46.1, 26443.0], [46.2, 26479.0], [46.3, 26513.0], [46.4, 26594.0], [46.5, 26594.0], [46.6, 26653.0], [46.7, 26684.0], [46.8, 26684.0], [46.9, 26692.0], [47.0, 26705.0], [47.1, 26714.0], [47.2, 26714.0], [47.3, 26737.0], [47.4, 26773.0], [47.5, 26797.0], [47.6, 26797.0], [47.7, 26802.0], [47.8, 26803.0], [47.9, 26826.0], [48.0, 26826.0], [48.1, 26828.0], [48.2, 26883.0], [48.3, 26900.0], [48.4, 26900.0], [48.5, 26904.0], [48.6, 26916.0], [48.7, 26916.0], [48.8, 26928.0], [48.9, 26969.0], [49.0, 26970.0], [49.1, 26970.0], [49.2, 26982.0], [49.3, 27038.0], [49.4, 27103.0], [49.5, 27103.0], [49.6, 27125.0], [49.7, 27167.0], [49.8, 27185.0], [49.9, 27185.0], [50.0, 27196.0], [50.1, 27248.0], [50.2, 27248.0], [50.3, 27256.0], [50.4, 27262.0], [50.5, 27314.0], [50.6, 27314.0], [50.7, 27315.0], [50.8, 27326.0], [50.9, 27336.0], [51.0, 27336.0], [51.1, 27355.0], [51.2, 27444.0], [51.3, 27445.0], [51.4, 27445.0], [51.5, 27462.0], [51.6, 27480.0], [51.7, 27480.0], [51.8, 27500.0], [51.9, 27523.0], [52.0, 27525.0], [52.1, 27525.0], [52.2, 27529.0], [52.3, 27577.0], [52.4, 27610.0], [52.5, 27610.0], [52.6, 27618.0], [52.7, 27632.0], [52.8, 27647.0], [52.9, 27647.0], [53.0, 27716.0], [53.1, 27724.0], [53.2, 27832.0], [53.3, 27832.0], [53.4, 27833.0], [53.5, 27891.0], [53.6, 27891.0], [53.7, 27898.0], [53.8, 27911.0], [53.9, 27916.0], [54.0, 27916.0], [54.1, 27920.0], [54.2, 27933.0], [54.3, 27980.0], [54.4, 27980.0], [54.5, 27986.0], [54.6, 27998.0], [54.7, 28027.0], [54.8, 28027.0], [54.9, 28066.0], [55.0, 28086.0], [55.1, 28086.0], [55.2, 28090.0], [55.3, 28119.0], [55.4, 28129.0], [55.5, 28129.0], [55.6, 28133.0], [55.7, 28151.0], [55.8, 28156.0], [55.9, 28156.0], [56.0, 28182.0], [56.1, 28183.0], [56.2, 28183.0], [56.3, 28183.0], [56.4, 28203.0], [56.5, 28222.0], [56.6, 28239.0], [56.7, 28239.0], [56.8, 28252.0], [56.9, 28257.0], [57.0, 28257.0], [57.1, 28257.0], [57.2, 28320.0], [57.3, 28346.0], [57.4, 28346.0], [57.5, 28382.0], [57.6, 28404.0], [57.7, 28426.0], [57.8, 28426.0], [57.9, 28436.0], [58.0, 28454.0], [58.1, 28508.0], [58.2, 28508.0], [58.3, 28514.0], [58.4, 28571.0], [58.5, 28571.0], [58.6, 28586.0], [58.7, 28608.0], [58.8, 28624.0], [58.9, 28624.0], [59.0, 28661.0], [59.1, 28749.0], [59.2, 28766.0], [59.3, 28766.0], [59.4, 28827.0], [59.5, 28828.0], [59.6, 28845.0], [59.7, 28845.0], [59.8, 28853.0], [59.9, 28868.0], [60.0, 28871.0], [60.1, 28871.0], [60.2, 28877.0], [60.3, 28889.0], [60.4, 28889.0], [60.5, 28893.0], [60.6, 28900.0], [60.7, 28929.0], [60.8, 28929.0], [60.9, 28932.0], [61.0, 28937.0], [61.1, 28950.0], [61.2, 28950.0], [61.3, 28954.0], [61.4, 28963.0], [61.5, 28976.0], [61.6, 28976.0], [61.7, 28984.0], [61.8, 28985.0], [61.9, 28985.0], [62.0, 28987.0], [62.1, 28988.0], [62.2, 28999.0], [62.3, 28999.0], [62.4, 29008.0], [62.5, 29014.0], [62.6, 29016.0], [62.7, 29016.0], [62.8, 29034.0], [62.9, 29037.0], [63.0, 29041.0], [63.1, 29041.0], [63.2, 29053.0], [63.3, 29056.0], [63.4, 29056.0], [63.5, 29056.0], [63.6, 29059.0], [63.7, 29069.0], [63.8, 29069.0], [63.9, 29069.0], [64.0, 29071.0], [64.1, 29073.0], [64.2, 29073.0], [64.3, 29079.0], [64.4, 29081.0], [64.5, 29087.0], [64.6, 29087.0], [64.7, 29098.0], [64.8, 29114.0], [64.9, 29114.0], [65.0, 29114.0], [65.1, 29118.0], [65.2, 29123.0], [65.3, 29123.0], [65.4, 29123.0], [65.5, 29124.0], [65.6, 29127.0], [65.7, 29127.0], [65.8, 29130.0], [65.9, 29134.0], [66.0, 29134.0], [66.1, 29134.0], [66.2, 29135.0], [66.3, 29137.0], [66.4, 29141.0], [66.5, 29141.0], [66.6, 29142.0], [66.7, 29142.0], [66.8, 29142.0], [66.9, 29142.0], [67.0, 29142.0], [67.1, 29151.0], [67.2, 29151.0], [67.3, 29157.0], [67.4, 29165.0], [67.5, 29167.0], [67.6, 29167.0], [67.7, 29169.0], [67.8, 29170.0], [67.9, 29189.0], [68.0, 29189.0], [68.1, 29200.0], [68.2, 29203.0], [68.3, 29209.0], [68.4, 29209.0], [68.5, 29216.0], [68.6, 29216.0], [68.7, 29216.0], [68.8, 29218.0], [68.9, 29218.0], [69.0, 29221.0], [69.1, 29221.0], [69.2, 29223.0], [69.3, 29228.0], [69.4, 29231.0], [69.5, 29231.0], [69.6, 29237.0], [69.7, 29237.0], [69.8, 29237.0], [69.9, 29237.0], [70.0, 29238.0], [70.1, 29245.0], [70.2, 29245.0], [70.3, 29248.0], [70.4, 29250.0], [70.5, 29250.0], [70.6, 29250.0], [70.7, 29253.0], [70.8, 29254.0], [70.9, 29254.0], [71.0, 29254.0], [71.1, 29257.0], [71.2, 29260.0], [71.3, 29261.0], [71.4, 29261.0], [71.5, 29262.0], [71.6, 29266.0], [71.7, 29266.0], [71.8, 29278.0], [71.9, 29283.0], [72.0, 29290.0], [72.1, 29290.0], [72.2, 29291.0], [72.3, 29292.0], [72.4, 29293.0], [72.5, 29293.0], [72.6, 29293.0], [72.7, 29297.0], [72.8, 29303.0], [72.9, 29303.0], [73.0, 29304.0], [73.1, 29305.0], [73.2, 29309.0], [73.3, 29309.0], [73.4, 29311.0], [73.5, 29315.0], [73.6, 29315.0], [73.7, 29321.0], [73.8, 29323.0], [73.9, 29329.0], [74.0, 29329.0], [74.1, 29330.0], [74.2, 29333.0], [74.3, 29334.0], [74.4, 29334.0], [74.5, 29339.0], [74.6, 29359.0], [74.7, 29360.0], [74.8, 29360.0], [74.9, 29361.0], [75.0, 29367.0], [75.1, 29367.0], [75.2, 29375.0], [75.3, 29378.0], [75.4, 29378.0], [75.5, 29378.0], [75.6, 29381.0], [75.7, 29385.0], [75.8, 29385.0], [75.9, 29385.0], [76.0, 29390.0], [76.1, 29391.0], [76.2, 29392.0], [76.3, 29392.0], [76.4, 29393.0], [76.5, 29395.0], [76.6, 29401.0], [76.7, 29401.0], [76.8, 29401.0], [76.9, 29401.0], [77.0, 29401.0], [77.1, 29405.0], [77.2, 29407.0], [77.3, 29408.0], [77.4, 29408.0], [77.5, 29412.0], [77.6, 29413.0], [77.7, 29415.0], [77.8, 29415.0], [77.9, 29419.0], [78.0, 29420.0], [78.1, 29422.0], [78.2, 29422.0], [78.3, 29428.0], [78.4, 29430.0], [78.5, 29430.0], [78.6, 29430.0], [78.7, 29431.0], [78.8, 29452.0], [78.9, 29452.0], [79.0, 29453.0], [79.1, 29460.0], [79.2, 29461.0], [79.3, 29461.0], [79.4, 29462.0], [79.5, 29466.0], [79.6, 29476.0], [79.7, 29476.0], [79.8, 29478.0], [79.9, 29486.0], [80.0, 29492.0], [80.1, 29492.0], [80.2, 29492.0], [80.3, 29496.0], [80.4, 29496.0], [80.5, 29499.0], [80.6, 29502.0], [80.7, 29503.0], [80.8, 29503.0], [80.9, 29507.0], [81.0, 29507.0], [81.1, 29510.0], [81.2, 29510.0], [81.3, 29511.0], [81.4, 29513.0], [81.5, 29514.0], [81.6, 29514.0], [81.7, 29521.0], [81.8, 29526.0], [81.9, 29526.0], [82.0, 29536.0], [82.1, 29536.0], [82.2, 29538.0], [82.3, 29538.0], [82.4, 29540.0], [82.5, 29543.0], [82.6, 29544.0], [82.7, 29544.0], [82.8, 29545.0], [82.9, 29554.0], [83.0, 29558.0], [83.1, 29558.0], [83.2, 29560.0], [83.3, 29563.0], [83.4, 29563.0], [83.5, 29564.0], [83.6, 29568.0], [83.7, 29569.0], [83.8, 29569.0], [83.9, 29571.0], [84.0, 29573.0], [84.1, 29575.0], [84.2, 29575.0], [84.3, 29579.0], [84.4, 29583.0], [84.5, 29585.0], [84.6, 29585.0], [84.7, 29590.0], [84.8, 29591.0], [84.9, 29595.0], [85.0, 29595.0], [85.1, 29596.0], [85.2, 29599.0], [85.3, 29599.0], [85.4, 29600.0], [85.5, 29600.0], [85.6, 29601.0], [85.7, 29601.0], [85.8, 29604.0], [85.9, 29611.0], [86.0, 29613.0], [86.1, 29613.0], [86.2, 29617.0], [86.3, 29625.0], [86.4, 29627.0], [86.5, 29627.0], [86.6, 29635.0], [86.7, 29640.0], [86.8, 29640.0], [86.9, 29643.0], [87.0, 29643.0], [87.1, 29651.0], [87.2, 29651.0], [87.3, 29655.0], [87.4, 29661.0], [87.5, 29669.0], [87.6, 29669.0], [87.7, 29685.0], [87.8, 29695.0], [87.9, 29701.0], [88.0, 29701.0], [88.1, 29705.0], [88.2, 29706.0], [88.3, 29712.0], [88.4, 29712.0], [88.5, 29713.0], [88.6, 29718.0], [88.7, 29718.0], [88.8, 29724.0], [88.9, 29734.0], [89.0, 29739.0], [89.1, 29739.0], [89.2, 29751.0], [89.3, 29758.0], [89.4, 29765.0], [89.5, 29765.0], [89.6, 29770.0], [89.7, 29771.0], [89.8, 29783.0], [89.9, 29783.0], [90.0, 29791.0], [90.1, 29795.0], [90.2, 29795.0], [90.3, 29799.0], [90.4, 29800.0], [90.5, 29809.0], [90.6, 29809.0], [90.7, 29818.0], [90.8, 29821.0], [90.9, 29834.0], [91.0, 29834.0], [91.1, 29896.0], [91.2, 29896.0], [91.3, 29915.0], [91.4, 29915.0], [91.5, 29989.0], [91.6, 29997.0], [91.7, 29997.0], [91.8, 30027.0], [91.9, 30057.0], [92.0, 30060.0], [92.1, 30060.0], [92.2, 30067.0], [92.3, 30067.0], [92.4, 30087.0], [92.5, 30087.0], [92.6, 30133.0], [92.7, 30160.0], [92.8, 30214.0], [92.9, 30214.0], [93.0, 30222.0], [93.1, 30326.0], [93.2, 30497.0], [93.3, 30497.0], [93.4, 30904.0], [93.5, 31026.0], [93.6, 31026.0], [93.7, 31223.0], [93.8, 31239.0], [93.9, 31320.0], [94.0, 31320.0], [94.1, 31404.0], [94.2, 31424.0], [94.3, 31462.0], [94.4, 31462.0], [94.5, 31464.0], [94.6, 31483.0], [94.7, 31501.0], [94.8, 31501.0], [94.9, 31672.0], [95.0, 32016.0], [95.1, 32016.0], [95.2, 32124.0], [95.3, 32267.0], [95.4, 32342.0], [95.5, 32342.0], [95.6, 32960.0], [95.7, 33046.0], [95.8, 33167.0], [95.9, 33167.0], [96.0, 33291.0], [96.1, 33830.0], [96.2, 33853.0], [96.3, 33853.0], [96.4, 34083.0], [96.5, 34419.0], [96.6, 34514.0], [96.7, 34514.0], [96.8, 35348.0], [96.9, 35369.0], [97.0, 35369.0], [97.1, 35715.0], [97.2, 36418.0], [97.3, 36971.0], [97.4, 36971.0], [97.5, 37081.0], [97.6, 37697.0], [97.7, 37979.0], [97.8, 37979.0], [97.9, 38657.0], [98.0, 38886.0], [98.1, 40103.0], [98.2, 40103.0], [98.3, 40174.0], [98.4, 41146.0], [98.5, 41146.0], [98.6, 41413.0], [98.7, 42080.0], [98.8, 42276.0], [98.9, 42276.0], [99.0, 42709.0], [99.1, 43300.0], [99.2, 43439.0], [99.3, 43439.0], [99.4, 44002.0], [99.5, 44232.0], [99.6, 44565.0], [99.7, 44565.0], [99.8, 44695.0], [99.9, 45194.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 35.0, "series": [{"data": [[34500.0, 1.0], [33100.0, 1.0], [32900.0, 1.0], [35300.0, 2.0], [35700.0, 1.0], [36900.0, 1.0], [37900.0, 1.0], [40100.0, 2.0], [42700.0, 1.0], [41100.0, 1.0], [44500.0, 1.0], [43300.0, 1.0], [45100.0, 1.0], [3200.0, 1.0], [5500.0, 1.0], [8500.0, 1.0], [11600.0, 1.0], [14100.0, 1.0], [16600.0, 1.0], [17100.0, 2.0], [17300.0, 1.0], [17000.0, 1.0], [17400.0, 2.0], [17600.0, 4.0], [18300.0, 6.0], [18400.0, 4.0], [18200.0, 9.0], [17900.0, 2.0], [17800.0, 5.0], [17700.0, 1.0], [18000.0, 7.0], [18100.0, 7.0], [17500.0, 6.0], [18600.0, 3.0], [19100.0, 6.0], [18800.0, 3.0], [19000.0, 2.0], [18700.0, 2.0], [19200.0, 3.0], [19300.0, 2.0], [18500.0, 2.0], [19600.0, 4.0], [20400.0, 4.0], [20100.0, 4.0], [19700.0, 4.0], [20300.0, 2.0], [19900.0, 2.0], [19800.0, 4.0], [19500.0, 1.0], [20000.0, 2.0], [20200.0, 4.0], [21300.0, 2.0], [21200.0, 2.0], [20800.0, 3.0], [20500.0, 3.0], [20600.0, 2.0], [21100.0, 2.0], [21400.0, 5.0], [20700.0, 1.0], [21500.0, 2.0], [22000.0, 5.0], [21900.0, 6.0], [21600.0, 2.0], [22400.0, 6.0], [22200.0, 4.0], [22500.0, 1.0], [21700.0, 1.0], [22300.0, 5.0], [22100.0, 2.0], [23300.0, 6.0], [23200.0, 5.0], [23100.0, 3.0], [23000.0, 2.0], [23500.0, 3.0], [23400.0, 3.0], [22600.0, 2.0], [22700.0, 1.0], [22800.0, 2.0], [22900.0, 2.0], [24000.0, 9.0], [23700.0, 3.0], [23900.0, 7.0], [24200.0, 6.0], [24300.0, 3.0], [24400.0, 5.0], [24100.0, 10.0], [23800.0, 6.0], [24700.0, 5.0], [25200.0, 6.0], [24600.0, 8.0], [25100.0, 7.0], [24900.0, 4.0], [25000.0, 5.0], [25300.0, 2.0], [25400.0, 4.0], [24800.0, 4.0], [25500.0, 2.0], [25800.0, 5.0], [26200.0, 8.0], [26100.0, 9.0], [25600.0, 1.0], [25700.0, 1.0], [26300.0, 7.0], [26500.0, 2.0], [26600.0, 3.0], [26400.0, 3.0], [25900.0, 3.0], [26000.0, 7.0], [26800.0, 5.0], [26700.0, 5.0], [26900.0, 7.0], [27100.0, 5.0], [27200.0, 3.0], [27600.0, 4.0], [27300.0, 5.0], [27500.0, 5.0], [27400.0, 4.0], [27000.0, 1.0], [27800.0, 4.0], [28000.0, 4.0], [28400.0, 4.0], [28100.0, 8.0], [28500.0, 4.0], [28600.0, 3.0], [27900.0, 7.0], [27700.0, 2.0], [28200.0, 6.0], [28300.0, 3.0], [29600.0, 19.0], [28800.0, 9.0], [29300.0, 28.0], [29400.0, 29.0], [29500.0, 35.0], [29200.0, 35.0], [29100.0, 24.0], [28700.0, 2.0], [29000.0, 18.0], [28900.0, 13.0], [30400.0, 1.0], [30300.0, 1.0], [29700.0, 18.0], [30200.0, 2.0], [30100.0, 2.0], [30000.0, 6.0], [29800.0, 7.0], [29900.0, 3.0], [31200.0, 2.0], [31400.0, 5.0], [31500.0, 1.0], [31300.0, 1.0], [31600.0, 1.0], [31000.0, 1.0], [30900.0, 1.0], [32300.0, 1.0], [32000.0, 1.0], [32100.0, 1.0], [32200.0, 1.0], [33800.0, 2.0], [33200.0, 1.0], [33000.0, 1.0], [34400.0, 1.0], [34000.0, 1.0], [36400.0, 1.0], [37600.0, 1.0], [38800.0, 1.0], [37000.0, 1.0], [38600.0, 1.0], [42200.0, 1.0], [42000.0, 1.0], [41400.0, 1.0], [44000.0, 1.0], [43400.0, 1.0], [44200.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.392857142857142, "minX": 1.60283388E12, "maxY": 10.0, "series": [{"data": [[1.60283568E12, 10.0], [1.60283538E12, 10.0], [1.60283508E12, 10.0], [1.60283478E12, 10.0], [1.60283418E12, 10.0], [1.60283448E12, 10.0], [1.6028358E12, 8.392857142857142], [1.60283388E12, 10.0], [1.6028355E12, 10.0], [1.60283394E12, 10.0], [1.60283424E12, 10.0], [1.60283556E12, 10.0], [1.60283526E12, 10.0], [1.60283496E12, 10.0], [1.60283466E12, 10.0], [1.60283406E12, 10.0], [1.60283436E12, 10.0], [1.60283472E12, 10.0], [1.60283442E12, 10.0], [1.60283412E12, 10.0], [1.60283574E12, 10.0], [1.60283544E12, 10.0], [1.60283514E12, 10.0], [1.60283484E12, 10.0], [1.60283454E12, 10.0], [1.6028352E12, 10.0], [1.6028349E12, 10.0], [1.6028343E12, 10.0], [1.6028346E12, 10.0], [1.602834E12, 10.0], [1.60283562E12, 10.0], [1.60283532E12, 10.0], [1.60283502E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028358E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17463.0, "minX": 1.0, "maxY": 26334.382920110198, "series": [{"data": [[8.0, 17466.0], [4.0, 17592.0], [2.0, 17543.0], [1.0, 17876.0], [9.0, 17518.0], [10.0, 26334.382920110198], [5.0, 17561.0], [6.0, 17463.0], [3.0, 17704.0], [7.0, 17556.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26227.266666666677]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58.53333333333333, "minX": 1.60283388E12, "maxY": 227584.35, "series": [{"data": [[1.60283568E12, 126665.26666666666], [1.60283538E12, 45642.5], [1.60283508E12, 42824.15], [1.60283478E12, 71003.38333333333], [1.60283418E12, 48046.55], [1.60283448E12, 42462.666666666664], [1.6028358E12, 49081.11666666667], [1.60283388E12, 107266.18333333333], [1.6028355E12, 43174.65], [1.60283394E12, 153063.63333333333], [1.60283424E12, 47760.71666666667], [1.60283556E12, 30774.833333333332], [1.60283526E12, 48225.26666666667], [1.60283496E12, 85555.5], [1.60283466E12, 53235.2], [1.60283406E12, 80835.7], [1.60283436E12, 48748.95], [1.60283472E12, 166721.6], [1.60283442E12, 56046.85], [1.60283412E12, 76702.91666666667], [1.60283574E12, 78218.66666666667], [1.60283544E12, 50602.98333333333], [1.60283514E12, 40551.4], [1.60283484E12, 227584.35], [1.60283454E12, 44325.8], [1.6028352E12, 49114.333333333336], [1.6028349E12, 59649.96666666667], [1.6028343E12, 46814.55], [1.6028346E12, 32257.066666666666], [1.602834E12, 112282.96666666666], [1.60283562E12, 33871.833333333336], [1.60283532E12, 53239.666666666664], [1.60283502E12, 71085.96666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60283568E12, 202.73333333333332], [1.60283538E12, 153.73333333333332], [1.60283508E12, 140.06666666666666], [1.60283478E12, 195.21666666666667], [1.60283418E12, 169.26666666666668], [1.60283448E12, 146.05], [1.6028358E12, 191.83333333333334], [1.60283388E12, 58.53333333333333], [1.6028355E12, 145.98333333333332], [1.60283394E12, 191.06666666666666], [1.60283424E12, 146.11666666666667], [1.60283556E12, 160.46666666666667], [1.60283526E12, 146.13333333333333], [1.60283496E12, 163.58333333333334], [1.60283466E12, 209.98333333333332], [1.60283406E12, 104.58333333333333], [1.60283436E12, 146.13333333333333], [1.60283472E12, 172.18333333333334], [1.60283442E12, 153.7], [1.60283412E12, 168.03333333333333], [1.60283574E12, 131.86666666666667], [1.60283544E12, 153.43333333333334], [1.60283514E12, 146.06666666666666], [1.60283484E12, 168.65], [1.60283454E12, 153.31666666666666], [1.6028352E12, 146.15], [1.6028349E12, 224.43333333333334], [1.6028343E12, 153.43333333333334], [1.6028346E12, 167.93333333333334], [1.602834E12, 202.13333333333333], [1.60283562E12, 197.06666666666666], [1.60283532E12, 154.06666666666666], [1.60283502E12, 175.33333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028358E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12447.75, "minX": 1.60283388E12, "maxY": 39298.21428571429, "series": [{"data": [[1.60283568E12, 22050.57142857143], [1.60283538E12, 28484.7619047619], [1.60283508E12, 27603.84210526316], [1.60283478E12, 25022.57142857143], [1.60283418E12, 25636.47826086956], [1.60283448E12, 29095.449999999993], [1.6028358E12, 22341.321428571424], [1.60283388E12, 12447.75], [1.6028355E12, 29271.4], [1.60283394E12, 24760.53846153847], [1.60283424E12, 28923.4], [1.60283556E12, 26748.454545454544], [1.60283526E12, 29489.85], [1.60283496E12, 24950.909090909092], [1.60283466E12, 21696.79310344828], [1.60283406E12, 39298.21428571429], [1.60283436E12, 29359.300000000003], [1.60283472E12, 21138.75], [1.60283442E12, 29097.04761904761], [1.60283412E12, 28015.391304347824], [1.60283574E12, 28505.499999999996], [1.60283544E12, 29569.666666666664], [1.60283514E12, 33021.24999999999], [1.60283484E12, 23736.17391304348], [1.60283454E12, 29338.380952380954], [1.6028352E12, 29693.050000000007], [1.6028349E12, 20265.96875], [1.6028343E12, 29625.619047619046], [1.6028346E12, 26928.869565217392], [1.602834E12, 20511.964285714283], [1.60283562E12, 23746.777777777777], [1.60283532E12, 28805.38095238095], [1.60283502E12, 25612.500000000007]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028358E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 12442.625, "minX": 1.60283388E12, "maxY": 39294.85714285714, "series": [{"data": [[1.60283568E12, 22047.428571428572], [1.60283538E12, 28483.47619047619], [1.60283508E12, 27602.631578947367], [1.60283478E12, 25019.928571428572], [1.60283418E12, 25635.478260869564], [1.60283448E12, 29094.549999999996], [1.6028358E12, 22339.28571428571], [1.60283388E12, 12442.625], [1.6028355E12, 29270.199999999997], [1.60283394E12, 24758.384615384617], [1.60283424E12, 28922.2], [1.60283556E12, 26747.09090909091], [1.60283526E12, 29488.55], [1.60283496E12, 24948.454545454544], [1.60283466E12, 21695.24137931034], [1.60283406E12, 39294.85714285714], [1.60283436E12, 29358.050000000003], [1.60283472E12, 21134.416666666668], [1.60283442E12, 29095.714285714286], [1.60283412E12, 28013.869565217392], [1.60283574E12, 28502.833333333332], [1.60283544E12, 29568.523809523816], [1.60283514E12, 33020.15], [1.60283484E12, 23731.26086956522], [1.60283454E12, 29337.09523809524], [1.6028352E12, 29691.749999999996], [1.6028349E12, 20264.71875], [1.6028343E12, 29624.380952380954], [1.6028346E12, 26927.521739130436], [1.602834E12, 20509.571428571428], [1.60283562E12, 23745.55555555555], [1.60283532E12, 28803.904761904763], [1.60283502E12, 25611.166666666664]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028358E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.10000000000000002, "minX": 1.60283388E12, "maxY": 11.374999999999998, "series": [{"data": [[1.60283568E12, 0.42857142857142866], [1.60283538E12, 0.23809523809523808], [1.60283508E12, 0.736842105263158], [1.60283478E12, 0.42857142857142866], [1.60283418E12, 0.6521739130434784], [1.60283448E12, 0.55], [1.6028358E12, 0.3928571428571429], [1.60283388E12, 11.374999999999998], [1.6028355E12, 0.6], [1.60283394E12, 0.3461538461538461], [1.60283424E12, 0.10000000000000002], [1.60283556E12, 0.40909090909090906], [1.60283526E12, 0.6499999999999999], [1.60283496E12, 0.2727272727272727], [1.60283466E12, 0.4482758620689656], [1.60283406E12, 1.142857142857143], [1.60283436E12, 0.4], [1.60283472E12, 0.29166666666666674], [1.60283442E12, 0.2380952380952381], [1.60283412E12, 0.6521739130434783], [1.60283574E12, 0.5555555555555556], [1.60283544E12, 0.5714285714285715], [1.60283514E12, 0.55], [1.60283484E12, 0.43478260869565216], [1.60283454E12, 0.5238095238095238], [1.6028352E12, 0.19999999999999998], [1.6028349E12, 0.40625], [1.6028343E12, 0.6666666666666665], [1.6028346E12, 0.391304347826087], [1.602834E12, 0.3928571428571429], [1.60283562E12, 0.4074074074074074], [1.60283532E12, 0.5238095238095238], [1.60283502E12, 0.20833333333333331]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028358E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3206.0, "minX": 1.60283388E12, "maxY": 45194.0, "series": [{"data": [[1.60283568E12, 27185.0], [1.60283538E12, 29563.0], [1.60283508E12, 40174.0], [1.60283478E12, 31501.0], [1.60283418E12, 30326.0], [1.60283448E12, 29393.0], [1.6028358E12, 38657.0], [1.60283388E12, 21238.0], [1.6028355E12, 29613.0], [1.60283394E12, 28404.0], [1.60283424E12, 30214.0], [1.60283556E12, 29415.0], [1.60283526E12, 29705.0], [1.60283496E12, 32124.0], [1.60283466E12, 26826.0], [1.60283406E12, 45194.0], [1.60283436E12, 29601.0], [1.60283472E12, 27326.0], [1.60283442E12, 29611.0], [1.60283412E12, 34514.0], [1.60283574E12, 34419.0], [1.60283544E12, 29758.0], [1.60283514E12, 43300.0], [1.60283484E12, 28749.0], [1.60283454E12, 29706.0], [1.6028352E12, 30027.0], [1.6028349E12, 27256.0], [1.6028343E12, 30222.0], [1.6028346E12, 29169.0], [1.602834E12, 24611.0], [1.60283562E12, 28624.0], [1.60283532E12, 29538.0], [1.60283502E12, 29008.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60283568E12, 18523.0], [1.60283538E12, 27314.0], [1.60283508E12, 22362.0], [1.60283478E12, 18182.0], [1.60283418E12, 22540.0], [1.60283448E12, 28937.0], [1.6028358E12, 17054.0], [1.60283388E12, 3206.0], [1.6028355E12, 28845.0], [1.60283394E12, 20450.0], [1.60283424E12, 24748.0], [1.60283556E12, 24135.0], [1.60283526E12, 29228.0], [1.60283496E12, 18318.0], [1.60283466E12, 17614.0], [1.60283406E12, 26152.0], [1.60283436E12, 28900.0], [1.60283472E12, 18293.0], [1.60283442E12, 28766.0], [1.60283412E12, 24301.0], [1.60283574E12, 22153.0], [1.60283544E12, 29254.0], [1.60283514E12, 25501.0], [1.60283484E12, 19241.0], [1.60283454E12, 28889.0], [1.6028352E12, 29291.0], [1.6028349E12, 17815.0], [1.6028343E12, 28929.0], [1.6028346E12, 24933.0], [1.602834E12, 17635.0], [1.60283562E12, 21324.0], [1.60283532E12, 27445.0], [1.60283502E12, 23866.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60283568E12, 18523.0], [1.60283538E12, 27314.0], [1.60283508E12, 22362.0], [1.60283478E12, 18182.0], [1.60283418E12, 22540.0], [1.60283448E12, 28937.0], [1.6028358E12, 17054.0], [1.60283388E12, 3206.0], [1.6028355E12, 28845.0], [1.60283394E12, 20450.0], [1.60283424E12, 24748.0], [1.60283556E12, 24135.0], [1.60283526E12, 29228.0], [1.60283496E12, 18318.0], [1.60283466E12, 17614.0], [1.60283406E12, 26152.0], [1.60283436E12, 28900.0], [1.60283472E12, 18293.0], [1.60283442E12, 28766.0], [1.60283412E12, 24301.0], [1.60283574E12, 22153.0], [1.60283544E12, 29254.0], [1.60283514E12, 25501.0], [1.60283484E12, 19241.0], [1.60283454E12, 28889.0], [1.6028352E12, 29291.0], [1.6028349E12, 17815.0], [1.6028343E12, 28929.0], [1.6028346E12, 24933.0], [1.602834E12, 17635.0], [1.60283562E12, 21324.0], [1.60283532E12, 27445.0], [1.60283502E12, 23866.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60283568E12, 18523.0], [1.60283538E12, 27314.0], [1.60283508E12, 22362.0], [1.60283478E12, 18182.0], [1.60283418E12, 22540.0], [1.60283448E12, 28937.0], [1.6028358E12, 17054.0], [1.60283388E12, 3206.0], [1.6028355E12, 28845.0], [1.60283394E12, 20450.0], [1.60283424E12, 24748.0], [1.60283556E12, 24135.0], [1.60283526E12, 29228.0], [1.60283496E12, 18318.0], [1.60283466E12, 17614.0], [1.60283406E12, 26152.0], [1.60283436E12, 28900.0], [1.60283472E12, 18293.0], [1.60283442E12, 28766.0], [1.60283412E12, 24301.0], [1.60283574E12, 22153.0], [1.60283544E12, 29254.0], [1.60283514E12, 25501.0], [1.60283484E12, 19241.0], [1.60283454E12, 28889.0], [1.6028352E12, 29291.0], [1.6028349E12, 17815.0], [1.6028343E12, 28929.0], [1.6028346E12, 24933.0], [1.602834E12, 17635.0], [1.60283562E12, 21324.0], [1.60283532E12, 27445.0], [1.60283502E12, 23866.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60283568E12, 18523.0], [1.60283538E12, 27314.0], [1.60283508E12, 22362.0], [1.60283478E12, 18182.0], [1.60283418E12, 22540.0], [1.60283448E12, 28937.0], [1.6028358E12, 17054.0], [1.60283388E12, 3206.0], [1.6028355E12, 28845.0], [1.60283394E12, 20450.0], [1.60283424E12, 24748.0], [1.60283556E12, 24135.0], [1.60283526E12, 29228.0], [1.60283496E12, 18318.0], [1.60283466E12, 17614.0], [1.60283406E12, 26152.0], [1.60283436E12, 28900.0], [1.60283472E12, 18293.0], [1.60283442E12, 28766.0], [1.60283412E12, 24301.0], [1.60283574E12, 22153.0], [1.60283544E12, 29254.0], [1.60283514E12, 25501.0], [1.60283484E12, 19241.0], [1.60283454E12, 28889.0], [1.6028352E12, 29291.0], [1.6028349E12, 17815.0], [1.6028343E12, 28929.0], [1.6028346E12, 24933.0], [1.602834E12, 17635.0], [1.60283562E12, 21324.0], [1.60283532E12, 27445.0], [1.60283502E12, 23866.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60283568E12, 21479.5], [1.60283538E12, 28320.0], [1.60283508E12, 25022.0], [1.60283478E12, 25939.0], [1.60283418E12, 25259.0], [1.60283448E12, 29105.0], [1.6028358E12, 17790.0], [1.60283388E12, 12863.5], [1.6028355E12, 29231.5], [1.60283394E12, 26167.5], [1.60283424E12, 29398.0], [1.60283556E12, 26510.0], [1.60283526E12, 29506.5], [1.60283496E12, 24176.0], [1.60283466E12, 21749.0], [1.60283406E12, 42178.0], [1.60283436E12, 29388.5], [1.60283472E12, 21569.5], [1.60283442E12, 29069.0], [1.60283412E12, 26110.0], [1.60283574E12, 28081.5], [1.60283544E12, 29585.0], [1.60283514E12, 30302.5], [1.60283484E12, 23962.0], [1.60283454E12, 29323.0], [1.6028352E12, 29703.5], [1.6028349E12, 19711.0], [1.6028343E12, 29617.0], [1.6028346E12, 26443.0], [1.602834E12, 19857.5], [1.60283562E12, 23399.0], [1.60283532E12, 29170.0], [1.60283502E12, 24768.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27196.0, "minX": 1.0, "maxY": 27196.0, "series": [{"data": [[1.0, 27196.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27195.0, "minX": 1.0, "maxY": 27195.0, "series": [{"data": [[1.0, 27195.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60283388E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60283568E12, 0.4666666666666667], [1.60283538E12, 0.35], [1.60283508E12, 0.31666666666666665], [1.60283478E12, 0.4666666666666667], [1.60283418E12, 0.38333333333333336], [1.60283448E12, 0.3333333333333333], [1.6028358E12, 0.3], [1.60283388E12, 0.3], [1.6028355E12, 0.3333333333333333], [1.60283394E12, 0.43333333333333335], [1.60283424E12, 0.3333333333333333], [1.60283556E12, 0.36666666666666664], [1.60283526E12, 0.3333333333333333], [1.60283496E12, 0.36666666666666664], [1.60283466E12, 0.48333333333333334], [1.60283406E12, 0.23333333333333334], [1.60283436E12, 0.3333333333333333], [1.60283472E12, 0.4], [1.60283442E12, 0.35], [1.60283412E12, 0.38333333333333336], [1.60283574E12, 0.3], [1.60283544E12, 0.35], [1.60283514E12, 0.3333333333333333], [1.60283484E12, 0.38333333333333336], [1.60283454E12, 0.35], [1.6028352E12, 0.3333333333333333], [1.6028349E12, 0.5333333333333333], [1.6028343E12, 0.35], [1.6028346E12, 0.38333333333333336], [1.602834E12, 0.4666666666666667], [1.60283562E12, 0.45], [1.60283532E12, 0.35], [1.60283502E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60283388E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60283568E12, 0.4666666666666667], [1.60283538E12, 0.35], [1.60283508E12, 0.31666666666666665], [1.60283478E12, 0.4666666666666667], [1.60283418E12, 0.38333333333333336], [1.60283448E12, 0.3333333333333333], [1.6028358E12, 0.4666666666666667], [1.60283388E12, 0.13333333333333333], [1.6028355E12, 0.3333333333333333], [1.60283394E12, 0.43333333333333335], [1.60283424E12, 0.3333333333333333], [1.60283556E12, 0.36666666666666664], [1.60283526E12, 0.3333333333333333], [1.60283496E12, 0.36666666666666664], [1.60283466E12, 0.48333333333333334], [1.60283406E12, 0.23333333333333334], [1.60283436E12, 0.3333333333333333], [1.60283472E12, 0.4], [1.60283442E12, 0.35], [1.60283412E12, 0.38333333333333336], [1.60283574E12, 0.3], [1.60283544E12, 0.35], [1.60283514E12, 0.3333333333333333], [1.60283484E12, 0.38333333333333336], [1.60283454E12, 0.35], [1.6028352E12, 0.3333333333333333], [1.6028349E12, 0.5333333333333333], [1.6028343E12, 0.35], [1.6028346E12, 0.38333333333333336], [1.602834E12, 0.4666666666666667], [1.60283562E12, 0.45], [1.60283532E12, 0.35], [1.60283502E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028358E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60283388E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60283568E12, 0.4666666666666667], [1.60283538E12, 0.35], [1.60283508E12, 0.31666666666666665], [1.60283478E12, 0.4666666666666667], [1.60283418E12, 0.38333333333333336], [1.60283448E12, 0.3333333333333333], [1.6028358E12, 0.4666666666666667], [1.60283388E12, 0.13333333333333333], [1.6028355E12, 0.3333333333333333], [1.60283394E12, 0.43333333333333335], [1.60283424E12, 0.3333333333333333], [1.60283556E12, 0.36666666666666664], [1.60283526E12, 0.3333333333333333], [1.60283496E12, 0.36666666666666664], [1.60283466E12, 0.48333333333333334], [1.60283406E12, 0.23333333333333334], [1.60283436E12, 0.3333333333333333], [1.60283472E12, 0.4], [1.60283442E12, 0.35], [1.60283412E12, 0.38333333333333336], [1.60283574E12, 0.3], [1.60283544E12, 0.35], [1.60283514E12, 0.3333333333333333], [1.60283484E12, 0.38333333333333336], [1.60283454E12, 0.35], [1.6028352E12, 0.3333333333333333], [1.6028349E12, 0.5333333333333333], [1.6028343E12, 0.35], [1.6028346E12, 0.38333333333333336], [1.602834E12, 0.4666666666666667], [1.60283562E12, 0.45], [1.60283532E12, 0.35], [1.60283502E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028358E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.60283388E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60283568E12, 0.4666666666666667], [1.60283538E12, 0.35], [1.60283508E12, 0.31666666666666665], [1.60283478E12, 0.4666666666666667], [1.60283418E12, 0.38333333333333336], [1.60283448E12, 0.3333333333333333], [1.6028358E12, 0.4666666666666667], [1.60283388E12, 0.13333333333333333], [1.6028355E12, 0.3333333333333333], [1.60283394E12, 0.43333333333333335], [1.60283424E12, 0.3333333333333333], [1.60283556E12, 0.36666666666666664], [1.60283526E12, 0.3333333333333333], [1.60283496E12, 0.36666666666666664], [1.60283466E12, 0.48333333333333334], [1.60283406E12, 0.23333333333333334], [1.60283436E12, 0.3333333333333333], [1.60283472E12, 0.4], [1.60283442E12, 0.35], [1.60283412E12, 0.38333333333333336], [1.60283574E12, 0.3], [1.60283544E12, 0.35], [1.60283514E12, 0.3333333333333333], [1.60283484E12, 0.38333333333333336], [1.60283454E12, 0.35], [1.6028352E12, 0.3333333333333333], [1.6028349E12, 0.5333333333333333], [1.6028343E12, 0.35], [1.6028346E12, 0.38333333333333336], [1.602834E12, 0.4666666666666667], [1.60283562E12, 0.45], [1.60283532E12, 0.35], [1.60283502E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028358E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

