/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3230.0, "minX": 0.0, "maxY": 43784.0, "series": [{"data": [[0.0, 3230.0], [0.1, 3230.0], [0.2, 5386.0], [0.3, 8419.0], [0.4, 8419.0], [0.5, 11134.0], [0.6, 13688.0], [0.7, 16113.0], [0.8, 16113.0], [0.9, 16860.0], [1.0, 16894.0], [1.1, 16901.0], [1.2, 16901.0], [1.3, 16963.0], [1.4, 17014.0], [1.5, 17085.0], [1.6, 17085.0], [1.7, 17101.0], [1.8, 17146.0], [1.9, 17146.0], [2.0, 17166.0], [2.1, 17166.0], [2.2, 17197.0], [2.3, 17197.0], [2.4, 17202.0], [2.5, 17213.0], [2.6, 17218.0], [2.7, 17218.0], [2.8, 17274.0], [2.9, 17281.0], [3.0, 17313.0], [3.1, 17313.0], [3.2, 17354.0], [3.3, 17498.0], [3.4, 17498.0], [3.5, 17515.0], [3.6, 17592.0], [3.7, 17610.0], [3.8, 17610.0], [3.9, 17622.0], [4.0, 17631.0], [4.1, 17633.0], [4.2, 17633.0], [4.3, 17657.0], [4.4, 17680.0], [4.5, 17689.0], [4.6, 17689.0], [4.7, 17722.0], [4.8, 17727.0], [4.9, 17728.0], [5.0, 17728.0], [5.1, 17733.0], [5.2, 17753.0], [5.3, 17753.0], [5.4, 17786.0], [5.5, 17804.0], [5.6, 17813.0], [5.7, 17813.0], [5.8, 17816.0], [5.9, 17830.0], [6.0, 17834.0], [6.1, 17834.0], [6.2, 17862.0], [6.3, 17879.0], [6.4, 17885.0], [6.5, 17885.0], [6.6, 17931.0], [6.7, 17936.0], [6.8, 17936.0], [6.9, 17952.0], [7.0, 17976.0], [7.1, 17999.0], [7.2, 17999.0], [7.3, 18010.0], [7.4, 18013.0], [7.5, 18020.0], [7.6, 18020.0], [7.7, 18061.0], [7.8, 18075.0], [7.9, 18087.0], [8.0, 18087.0], [8.1, 18159.0], [8.2, 18182.0], [8.3, 18223.0], [8.4, 18223.0], [8.5, 18228.0], [8.6, 18231.0], [8.7, 18231.0], [8.8, 18241.0], [8.9, 18244.0], [9.0, 18289.0], [9.1, 18289.0], [9.2, 18360.0], [9.3, 18376.0], [9.4, 18406.0], [9.5, 18406.0], [9.6, 18432.0], [9.7, 18460.0], [9.8, 18539.0], [9.9, 18539.0], [10.0, 18662.0], [10.1, 18695.0], [10.2, 18695.0], [10.3, 18825.0], [10.4, 18962.0], [10.5, 18994.0], [10.6, 18994.0], [10.7, 19059.0], [10.8, 19059.0], [10.9, 19069.0], [11.0, 19069.0], [11.1, 19130.0], [11.2, 19170.0], [11.3, 19247.0], [11.4, 19247.0], [11.5, 19249.0], [11.6, 19313.0], [11.7, 19313.0], [11.8, 19423.0], [11.9, 19445.0], [12.0, 19446.0], [12.1, 19446.0], [12.2, 19474.0], [12.3, 19474.0], [12.4, 19476.0], [12.5, 19476.0], [12.6, 19480.0], [12.7, 19503.0], [12.8, 19521.0], [12.9, 19521.0], [13.0, 19557.0], [13.1, 19698.0], [13.2, 19746.0], [13.3, 19746.0], [13.4, 19768.0], [13.5, 19790.0], [13.6, 19790.0], [13.7, 19804.0], [13.8, 19850.0], [13.9, 19864.0], [14.0, 19864.0], [14.1, 19866.0], [14.2, 19869.0], [14.3, 19886.0], [14.4, 19886.0], [14.5, 19892.0], [14.6, 19899.0], [14.7, 19919.0], [14.8, 19919.0], [14.9, 19919.0], [15.0, 19922.0], [15.1, 19922.0], [15.2, 19924.0], [15.3, 19927.0], [15.4, 20037.0], [15.5, 20037.0], [15.6, 20178.0], [15.7, 20190.0], [15.8, 20285.0], [15.9, 20285.0], [16.0, 20287.0], [16.1, 20308.0], [16.2, 20323.0], [16.3, 20323.0], [16.4, 20414.0], [16.5, 20519.0], [16.6, 20573.0], [16.7, 20573.0], [16.8, 20599.0], [16.9, 20652.0], [17.0, 20652.0], [17.1, 20664.0], [17.2, 20718.0], [17.3, 20866.0], [17.4, 20866.0], [17.5, 20909.0], [17.6, 20924.0], [17.7, 20974.0], [17.8, 20974.0], [17.9, 21024.0], [18.0, 21248.0], [18.1, 21259.0], [18.2, 21259.0], [18.3, 21281.0], [18.4, 21311.0], [18.5, 21311.0], [18.6, 21316.0], [18.7, 21333.0], [18.8, 21355.0], [18.9, 21355.0], [19.0, 21366.0], [19.1, 21414.0], [19.2, 21513.0], [19.3, 21513.0], [19.4, 21522.0], [19.5, 21621.0], [19.6, 21680.0], [19.7, 21680.0], [19.8, 21731.0], [19.9, 21832.0], [20.0, 21835.0], [20.1, 21835.0], [20.2, 21887.0], [20.3, 21900.0], [20.4, 21900.0], [20.5, 21905.0], [20.6, 21911.0], [20.7, 21956.0], [20.8, 21956.0], [20.9, 21999.0], [21.0, 22013.0], [21.1, 22077.0], [21.2, 22077.0], [21.3, 22086.0], [21.4, 22108.0], [21.5, 22136.0], [21.6, 22136.0], [21.7, 22140.0], [21.8, 22184.0], [21.9, 22184.0], [22.0, 22265.0], [22.1, 22318.0], [22.2, 22325.0], [22.3, 22325.0], [22.4, 22329.0], [22.5, 22329.0], [22.6, 22384.0], [22.7, 22384.0], [22.8, 22405.0], [22.9, 22415.0], [23.0, 22449.0], [23.1, 22449.0], [23.2, 22453.0], [23.3, 22467.0], [23.4, 22467.0], [23.5, 22470.0], [23.6, 22589.0], [23.7, 22672.0], [23.8, 22672.0], [23.9, 22730.0], [24.0, 22793.0], [24.1, 22853.0], [24.2, 22853.0], [24.3, 22925.0], [24.4, 22926.0], [24.5, 22945.0], [24.6, 22945.0], [24.7, 22961.0], [24.8, 22993.0], [24.9, 23008.0], [25.0, 23008.0], [25.1, 23044.0], [25.2, 23127.0], [25.3, 23127.0], [25.4, 23203.0], [25.5, 23205.0], [25.6, 23216.0], [25.7, 23216.0], [25.8, 23279.0], [25.9, 23282.0], [26.0, 23283.0], [26.1, 23283.0], [26.2, 23315.0], [26.3, 23326.0], [26.4, 23370.0], [26.5, 23370.0], [26.6, 23392.0], [26.7, 23393.0], [26.8, 23393.0], [26.9, 23404.0], [27.0, 23412.0], [27.1, 23477.0], [27.2, 23477.0], [27.3, 23488.0], [27.4, 23498.0], [27.5, 23503.0], [27.6, 23503.0], [27.7, 23503.0], [27.8, 23514.0], [27.9, 23548.0], [28.0, 23548.0], [28.1, 23574.0], [28.2, 23581.0], [28.3, 23584.0], [28.4, 23584.0], [28.5, 23584.0], [28.6, 23596.0], [28.7, 23596.0], [28.8, 23603.0], [28.9, 23610.0], [29.0, 23613.0], [29.1, 23613.0], [29.2, 23654.0], [29.3, 23698.0], [29.4, 23722.0], [29.5, 23722.0], [29.6, 23724.0], [29.7, 23726.0], [29.8, 23751.0], [29.9, 23751.0], [30.0, 23752.0], [30.1, 23754.0], [30.2, 23754.0], [30.3, 23762.0], [30.4, 23797.0], [30.5, 23801.0], [30.6, 23801.0], [30.7, 23859.0], [30.8, 23876.0], [30.9, 23892.0], [31.0, 23892.0], [31.1, 23944.0], [31.2, 23982.0], [31.3, 23982.0], [31.4, 23982.0], [31.5, 23985.0], [31.6, 23992.0], [31.7, 23992.0], [31.8, 24004.0], [31.9, 24005.0], [32.0, 24016.0], [32.1, 24016.0], [32.2, 24044.0], [32.3, 24060.0], [32.4, 24086.0], [32.5, 24086.0], [32.6, 24094.0], [32.7, 24108.0], [32.8, 24114.0], [32.9, 24114.0], [33.0, 24125.0], [33.1, 24149.0], [33.2, 24152.0], [33.3, 24152.0], [33.4, 24203.0], [33.5, 24209.0], [33.6, 24209.0], [33.7, 24218.0], [33.8, 24223.0], [33.9, 24244.0], [34.0, 24244.0], [34.1, 24275.0], [34.2, 24297.0], [34.3, 24308.0], [34.4, 24308.0], [34.5, 24312.0], [34.6, 24315.0], [34.7, 24320.0], [34.8, 24320.0], [34.9, 24342.0], [35.0, 24349.0], [35.1, 24349.0], [35.2, 24353.0], [35.3, 24356.0], [35.4, 24361.0], [35.5, 24361.0], [35.6, 24389.0], [35.7, 24403.0], [35.8, 24416.0], [35.9, 24416.0], [36.0, 24417.0], [36.1, 24425.0], [36.2, 24446.0], [36.3, 24446.0], [36.4, 24467.0], [36.5, 24496.0], [36.6, 24502.0], [36.7, 24502.0], [36.8, 24510.0], [36.9, 24534.0], [37.0, 24534.0], [37.1, 24553.0], [37.2, 24566.0], [37.3, 24637.0], [37.4, 24637.0], [37.5, 24677.0], [37.6, 24698.0], [37.7, 24703.0], [37.8, 24703.0], [37.9, 24720.0], [38.0, 24899.0], [38.1, 24905.0], [38.2, 24905.0], [38.3, 24917.0], [38.4, 24927.0], [38.5, 24927.0], [38.6, 24934.0], [38.7, 24935.0], [38.8, 24950.0], [38.9, 24950.0], [39.0, 24951.0], [39.1, 24989.0], [39.2, 24996.0], [39.3, 24996.0], [39.4, 25061.0], [39.5, 25062.0], [39.6, 25064.0], [39.7, 25064.0], [39.8, 25078.0], [39.9, 25122.0], [40.0, 25153.0], [40.1, 25153.0], [40.2, 25238.0], [40.3, 25246.0], [40.4, 25246.0], [40.5, 25251.0], [40.6, 25255.0], [40.7, 25267.0], [40.8, 25267.0], [40.9, 25287.0], [41.0, 25304.0], [41.1, 25316.0], [41.2, 25316.0], [41.3, 25331.0], [41.4, 25346.0], [41.5, 25356.0], [41.6, 25356.0], [41.7, 25376.0], [41.8, 25387.0], [41.9, 25387.0], [42.0, 25414.0], [42.1, 25424.0], [42.2, 25456.0], [42.3, 25456.0], [42.4, 25467.0], [42.5, 25506.0], [42.6, 25520.0], [42.7, 25520.0], [42.8, 25541.0], [42.9, 25574.0], [43.0, 25576.0], [43.1, 25576.0], [43.2, 25610.0], [43.3, 25623.0], [43.4, 25623.0], [43.5, 25628.0], [43.6, 25640.0], [43.7, 25700.0], [43.8, 25700.0], [43.9, 25730.0], [44.0, 25737.0], [44.1, 25744.0], [44.2, 25744.0], [44.3, 25754.0], [44.4, 25763.0], [44.5, 25810.0], [44.6, 25810.0], [44.7, 25853.0], [44.8, 25854.0], [44.9, 25855.0], [45.0, 25855.0], [45.1, 25873.0], [45.2, 25898.0], [45.3, 25898.0], [45.4, 25898.0], [45.5, 25965.0], [45.6, 26016.0], [45.7, 26016.0], [45.8, 26023.0], [45.9, 26036.0], [46.0, 26043.0], [46.1, 26043.0], [46.2, 26074.0], [46.3, 26095.0], [46.4, 26107.0], [46.5, 26107.0], [46.6, 26119.0], [46.7, 26121.0], [46.8, 26121.0], [46.9, 26124.0], [47.0, 26139.0], [47.1, 26171.0], [47.2, 26171.0], [47.3, 26183.0], [47.4, 26186.0], [47.5, 26190.0], [47.6, 26190.0], [47.7, 26228.0], [47.8, 26242.0], [47.9, 26266.0], [48.0, 26266.0], [48.1, 26271.0], [48.2, 26322.0], [48.3, 26385.0], [48.4, 26385.0], [48.5, 26451.0], [48.6, 26453.0], [48.7, 26453.0], [48.8, 26496.0], [48.9, 26512.0], [49.0, 26524.0], [49.1, 26524.0], [49.2, 26538.0], [49.3, 26544.0], [49.4, 26639.0], [49.5, 26639.0], [49.6, 26709.0], [49.7, 26799.0], [49.8, 26844.0], [49.9, 26844.0], [50.0, 26866.0], [50.1, 26884.0], [50.2, 26884.0], [50.3, 26908.0], [50.4, 26941.0], [50.5, 26957.0], [50.6, 26957.0], [50.7, 26959.0], [50.8, 27074.0], [50.9, 27094.0], [51.0, 27094.0], [51.1, 27111.0], [51.2, 27201.0], [51.3, 27203.0], [51.4, 27203.0], [51.5, 27256.0], [51.6, 27257.0], [51.7, 27257.0], [51.8, 27258.0], [51.9, 27275.0], [52.0, 27278.0], [52.1, 27278.0], [52.2, 27329.0], [52.3, 27338.0], [52.4, 27353.0], [52.5, 27353.0], [52.6, 27372.0], [52.7, 27429.0], [52.8, 27464.0], [52.9, 27464.0], [53.0, 27511.0], [53.1, 27545.0], [53.2, 27548.0], [53.3, 27548.0], [53.4, 27551.0], [53.5, 27615.0], [53.6, 27615.0], [53.7, 27619.0], [53.8, 27637.0], [53.9, 27648.0], [54.0, 27648.0], [54.1, 27648.0], [54.2, 27650.0], [54.3, 27667.0], [54.4, 27667.0], [54.5, 27670.0], [54.6, 27724.0], [54.7, 27784.0], [54.8, 27784.0], [54.9, 27790.0], [55.0, 27814.0], [55.1, 27814.0], [55.2, 27827.0], [55.3, 27861.0], [55.4, 27884.0], [55.5, 27884.0], [55.6, 27887.0], [55.7, 27904.0], [55.8, 27919.0], [55.9, 27919.0], [56.0, 27931.0], [56.1, 27933.0], [56.2, 27935.0], [56.3, 27935.0], [56.4, 27950.0], [56.5, 27967.0], [56.6, 27990.0], [56.7, 27990.0], [56.8, 28051.0], [56.9, 28072.0], [57.0, 28072.0], [57.1, 28081.0], [57.2, 28110.0], [57.3, 28127.0], [57.4, 28127.0], [57.5, 28139.0], [57.6, 28146.0], [57.7, 28171.0], [57.8, 28171.0], [57.9, 28174.0], [58.0, 28202.0], [58.1, 28223.0], [58.2, 28223.0], [58.3, 28246.0], [58.4, 28252.0], [58.5, 28252.0], [58.6, 28315.0], [58.7, 28319.0], [58.8, 28346.0], [58.9, 28346.0], [59.0, 28353.0], [59.1, 28354.0], [59.2, 28355.0], [59.3, 28355.0], [59.4, 28355.0], [59.5, 28379.0], [59.6, 28381.0], [59.7, 28381.0], [59.8, 28382.0], [59.9, 28387.0], [60.0, 28409.0], [60.1, 28409.0], [60.2, 28436.0], [60.3, 28453.0], [60.4, 28453.0], [60.5, 28487.0], [60.6, 28509.0], [60.7, 28518.0], [60.8, 28518.0], [60.9, 28593.0], [61.0, 28599.0], [61.1, 28611.0], [61.2, 28611.0], [61.3, 28616.0], [61.4, 28628.0], [61.5, 28629.0], [61.6, 28629.0], [61.7, 28639.0], [61.8, 28641.0], [61.9, 28641.0], [62.0, 28660.0], [62.1, 28686.0], [62.2, 28694.0], [62.3, 28694.0], [62.4, 28700.0], [62.5, 28712.0], [62.6, 28728.0], [62.7, 28728.0], [62.8, 28735.0], [62.9, 28743.0], [63.0, 28761.0], [63.1, 28761.0], [63.2, 28769.0], [63.3, 28769.0], [63.4, 28769.0], [63.5, 28775.0], [63.6, 28779.0], [63.7, 28792.0], [63.8, 28792.0], [63.9, 28795.0], [64.0, 28799.0], [64.1, 28801.0], [64.2, 28801.0], [64.3, 28804.0], [64.4, 28808.0], [64.5, 28808.0], [64.6, 28808.0], [64.7, 28814.0], [64.8, 28830.0], [64.9, 28839.0], [65.0, 28839.0], [65.1, 28839.0], [65.2, 28853.0], [65.3, 28853.0], [65.4, 28853.0], [65.5, 28854.0], [65.6, 28854.0], [65.7, 28854.0], [65.8, 28878.0], [65.9, 28882.0], [66.0, 28886.0], [66.1, 28886.0], [66.2, 28890.0], [66.3, 28904.0], [66.4, 28912.0], [66.5, 28912.0], [66.6, 28917.0], [66.7, 28922.0], [66.8, 28922.0], [66.9, 28922.0], [67.0, 28924.0], [67.1, 28928.0], [67.2, 28928.0], [67.3, 28930.0], [67.4, 28931.0], [67.5, 28932.0], [67.6, 28932.0], [67.7, 28935.0], [67.8, 28937.0], [67.9, 28945.0], [68.0, 28945.0], [68.1, 28946.0], [68.2, 28952.0], [68.3, 28959.0], [68.4, 28959.0], [68.5, 28961.0], [68.6, 28961.0], [68.7, 28961.0], [68.8, 28969.0], [68.9, 28973.0], [69.0, 28975.0], [69.1, 28975.0], [69.2, 28975.0], [69.3, 28977.0], [69.4, 28978.0], [69.5, 28978.0], [69.6, 28981.0], [69.7, 28990.0], [69.8, 28991.0], [69.9, 28991.0], [70.0, 28994.0], [70.1, 28996.0], [70.2, 28996.0], [70.3, 28998.0], [70.4, 29001.0], [70.5, 29001.0], [70.6, 29001.0], [70.7, 29004.0], [70.8, 29011.0], [70.9, 29011.0], [71.0, 29011.0], [71.1, 29013.0], [71.2, 29014.0], [71.3, 29016.0], [71.4, 29016.0], [71.5, 29022.0], [71.6, 29028.0], [71.7, 29028.0], [71.8, 29030.0], [71.9, 29031.0], [72.0, 29032.0], [72.1, 29032.0], [72.2, 29036.0], [72.3, 29039.0], [72.4, 29041.0], [72.5, 29041.0], [72.6, 29041.0], [72.7, 29043.0], [72.8, 29044.0], [72.9, 29044.0], [73.0, 29044.0], [73.1, 29045.0], [73.2, 29045.0], [73.3, 29045.0], [73.4, 29047.0], [73.5, 29052.0], [73.6, 29052.0], [73.7, 29053.0], [73.8, 29055.0], [73.9, 29055.0], [74.0, 29055.0], [74.1, 29056.0], [74.2, 29062.0], [74.3, 29064.0], [74.4, 29064.0], [74.5, 29070.0], [74.6, 29074.0], [74.7, 29078.0], [74.8, 29078.0], [74.9, 29081.0], [75.0, 29090.0], [75.1, 29090.0], [75.2, 29091.0], [75.3, 29092.0], [75.4, 29095.0], [75.5, 29095.0], [75.6, 29096.0], [75.7, 29105.0], [75.8, 29108.0], [75.9, 29108.0], [76.0, 29109.0], [76.1, 29109.0], [76.2, 29117.0], [76.3, 29117.0], [76.4, 29123.0], [76.5, 29143.0], [76.6, 29143.0], [76.7, 29143.0], [76.8, 29143.0], [76.9, 29148.0], [77.0, 29148.0], [77.1, 29153.0], [77.2, 29159.0], [77.3, 29161.0], [77.4, 29161.0], [77.5, 29168.0], [77.6, 29172.0], [77.7, 29175.0], [77.8, 29175.0], [77.9, 29176.0], [78.0, 29176.0], [78.1, 29177.0], [78.2, 29177.0], [78.3, 29179.0], [78.4, 29181.0], [78.5, 29181.0], [78.6, 29183.0], [78.7, 29197.0], [78.8, 29197.0], [78.9, 29197.0], [79.0, 29198.0], [79.1, 29200.0], [79.2, 29212.0], [79.3, 29212.0], [79.4, 29216.0], [79.5, 29225.0], [79.6, 29235.0], [79.7, 29235.0], [79.8, 29236.0], [79.9, 29240.0], [80.0, 29241.0], [80.1, 29241.0], [80.2, 29241.0], [80.3, 29245.0], [80.4, 29245.0], [80.5, 29246.0], [80.6, 29255.0], [80.7, 29255.0], [80.8, 29255.0], [80.9, 29266.0], [81.0, 29269.0], [81.1, 29269.0], [81.2, 29269.0], [81.3, 29270.0], [81.4, 29270.0], [81.5, 29283.0], [81.6, 29283.0], [81.7, 29286.0], [81.8, 29291.0], [81.9, 29291.0], [82.0, 29299.0], [82.1, 29307.0], [82.2, 29309.0], [82.3, 29309.0], [82.4, 29315.0], [82.5, 29318.0], [82.6, 29318.0], [82.7, 29318.0], [82.8, 29322.0], [82.9, 29324.0], [83.0, 29331.0], [83.1, 29331.0], [83.2, 29347.0], [83.3, 29353.0], [83.4, 29353.0], [83.5, 29356.0], [83.6, 29356.0], [83.7, 29359.0], [83.8, 29359.0], [83.9, 29360.0], [84.0, 29364.0], [84.1, 29366.0], [84.2, 29366.0], [84.3, 29370.0], [84.4, 29370.0], [84.5, 29376.0], [84.6, 29376.0], [84.7, 29383.0], [84.8, 29385.0], [84.9, 29386.0], [85.0, 29386.0], [85.1, 29393.0], [85.2, 29395.0], [85.3, 29395.0], [85.4, 29396.0], [85.5, 29396.0], [85.6, 29400.0], [85.7, 29400.0], [85.8, 29425.0], [85.9, 29429.0], [86.0, 29432.0], [86.1, 29432.0], [86.2, 29433.0], [86.3, 29436.0], [86.4, 29455.0], [86.5, 29455.0], [86.6, 29456.0], [86.7, 29459.0], [86.8, 29459.0], [86.9, 29464.0], [87.0, 29464.0], [87.1, 29464.0], [87.2, 29464.0], [87.3, 29469.0], [87.4, 29497.0], [87.5, 29507.0], [87.6, 29507.0], [87.7, 29514.0], [87.8, 29526.0], [87.9, 29532.0], [88.0, 29532.0], [88.1, 29551.0], [88.2, 29551.0], [88.3, 29557.0], [88.4, 29557.0], [88.5, 29560.0], [88.6, 29567.0], [88.7, 29567.0], [88.8, 29568.0], [88.9, 29571.0], [89.0, 29573.0], [89.1, 29573.0], [89.2, 29584.0], [89.3, 29587.0], [89.4, 29603.0], [89.5, 29603.0], [89.6, 29606.0], [89.7, 29608.0], [89.8, 29611.0], [89.9, 29611.0], [90.0, 29612.0], [90.1, 29624.0], [90.2, 29624.0], [90.3, 29630.0], [90.4, 29644.0], [90.5, 29646.0], [90.6, 29646.0], [90.7, 29651.0], [90.8, 29659.0], [90.9, 29666.0], [91.0, 29666.0], [91.1, 29685.0], [91.2, 29705.0], [91.3, 29706.0], [91.4, 29706.0], [91.5, 29708.0], [91.6, 29718.0], [91.7, 29718.0], [91.8, 29734.0], [91.9, 29749.0], [92.0, 29749.0], [92.1, 29749.0], [92.2, 29768.0], [92.3, 29771.0], [92.4, 29789.0], [92.5, 29789.0], [92.6, 29827.0], [92.7, 29880.0], [92.8, 29891.0], [92.9, 29891.0], [93.0, 29904.0], [93.1, 29981.0], [93.2, 30145.0], [93.3, 30145.0], [93.4, 30230.0], [93.5, 30254.0], [93.6, 30254.0], [93.7, 30320.0], [93.8, 30323.0], [93.9, 30839.0], [94.0, 30839.0], [94.1, 31139.0], [94.2, 31180.0], [94.3, 31254.0], [94.4, 31254.0], [94.5, 31437.0], [94.6, 31618.0], [94.7, 31689.0], [94.8, 31689.0], [94.9, 31733.0], [95.0, 31736.0], [95.1, 31736.0], [95.2, 31749.0], [95.3, 31765.0], [95.4, 32076.0], [95.5, 32076.0], [95.6, 32090.0], [95.7, 32262.0], [95.8, 32476.0], [95.9, 32476.0], [96.0, 32573.0], [96.1, 33092.0], [96.2, 33109.0], [96.3, 33109.0], [96.4, 33493.0], [96.5, 33762.0], [96.6, 34053.0], [96.7, 34053.0], [96.8, 34422.0], [96.9, 35177.0], [97.0, 35177.0], [97.1, 35410.0], [97.2, 35440.0], [97.3, 35968.0], [97.4, 35968.0], [97.5, 36400.0], [97.6, 37414.0], [97.7, 37520.0], [97.8, 37520.0], [97.9, 37543.0], [98.0, 38345.0], [98.1, 38668.0], [98.2, 38668.0], [98.3, 39991.0], [98.4, 40424.0], [98.5, 40424.0], [98.6, 40932.0], [98.7, 41322.0], [98.8, 41330.0], [98.9, 41330.0], [99.0, 42069.0], [99.1, 42358.0], [99.2, 42453.0], [99.3, 42453.0], [99.4, 42805.0], [99.5, 43130.0], [99.6, 43432.0], [99.7, 43432.0], [99.8, 43464.0], [99.9, 43784.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 39.0, "series": [{"data": [[33100.0, 1.0], [33700.0, 1.0], [35100.0, 1.0], [35900.0, 1.0], [38300.0, 1.0], [37500.0, 2.0], [39900.0, 1.0], [40900.0, 1.0], [42300.0, 1.0], [41300.0, 2.0], [43700.0, 1.0], [43100.0, 1.0], [3200.0, 1.0], [5300.0, 1.0], [8400.0, 1.0], [11100.0, 1.0], [13600.0, 1.0], [16100.0, 1.0], [17300.0, 2.0], [17000.0, 2.0], [17100.0, 5.0], [17200.0, 5.0], [16800.0, 2.0], [16900.0, 2.0], [17400.0, 1.0], [18200.0, 6.0], [18400.0, 3.0], [18100.0, 2.0], [17900.0, 5.0], [17700.0, 6.0], [17600.0, 7.0], [17500.0, 2.0], [17800.0, 8.0], [18000.0, 6.0], [18300.0, 2.0], [19200.0, 2.0], [19400.0, 7.0], [19000.0, 3.0], [19100.0, 2.0], [18900.0, 2.0], [19300.0, 1.0], [18500.0, 1.0], [18600.0, 2.0], [18800.0, 1.0], [20300.0, 2.0], [20200.0, 2.0], [19800.0, 8.0], [19900.0, 5.0], [19500.0, 3.0], [20100.0, 2.0], [20000.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [19700.0, 3.0], [20600.0, 2.0], [20900.0, 3.0], [21500.0, 2.0], [21300.0, 5.0], [20500.0, 3.0], [21000.0, 1.0], [21200.0, 3.0], [21400.0, 1.0], [20800.0, 1.0], [20700.0, 1.0], [22300.0, 5.0], [21600.0, 2.0], [22000.0, 3.0], [22100.0, 4.0], [21900.0, 5.0], [21700.0, 1.0], [22200.0, 1.0], [21800.0, 3.0], [22400.0, 6.0], [22500.0, 1.0], [23400.0, 5.0], [23200.0, 6.0], [22800.0, 1.0], [23300.0, 5.0], [23000.0, 2.0], [22900.0, 5.0], [23100.0, 1.0], [23500.0, 9.0], [22700.0, 2.0], [22600.0, 1.0], [24400.0, 7.0], [24000.0, 7.0], [23600.0, 5.0], [23800.0, 4.0], [23900.0, 5.0], [24300.0, 10.0], [24200.0, 7.0], [24100.0, 5.0], [24500.0, 5.0], [23700.0, 8.0], [25500.0, 5.0], [25300.0, 7.0], [24700.0, 2.0], [25200.0, 6.0], [24900.0, 9.0], [25400.0, 4.0], [24600.0, 3.0], [25000.0, 4.0], [25100.0, 2.0], [24800.0, 1.0], [26400.0, 3.0], [25700.0, 6.0], [25600.0, 4.0], [26500.0, 4.0], [26600.0, 1.0], [26100.0, 9.0], [25800.0, 7.0], [26000.0, 6.0], [25900.0, 1.0], [26200.0, 4.0], [26300.0, 2.0], [26800.0, 3.0], [27200.0, 7.0], [26900.0, 4.0], [27600.0, 8.0], [27400.0, 2.0], [27500.0, 4.0], [27300.0, 4.0], [27000.0, 2.0], [26700.0, 2.0], [27100.0, 1.0], [27900.0, 8.0], [28400.0, 4.0], [28100.0, 6.0], [28300.0, 11.0], [27800.0, 5.0], [27700.0, 3.0], [28200.0, 4.0], [28600.0, 9.0], [28500.0, 4.0], [28000.0, 3.0], [28900.0, 30.0], [29200.0, 22.0], [29100.0, 25.0], [29000.0, 39.0], [28800.0, 16.0], [28700.0, 13.0], [29300.0, 26.0], [29400.0, 14.0], [29500.0, 14.0], [29600.0, 13.0], [29800.0, 3.0], [30200.0, 2.0], [29700.0, 10.0], [29900.0, 2.0], [30300.0, 2.0], [30100.0, 1.0], [31200.0, 1.0], [31400.0, 1.0], [31600.0, 2.0], [31700.0, 4.0], [31100.0, 2.0], [30800.0, 1.0], [32400.0, 1.0], [32000.0, 2.0], [32500.0, 1.0], [32200.0, 1.0], [34000.0, 1.0], [33400.0, 1.0], [34400.0, 1.0], [33000.0, 1.0], [35400.0, 2.0], [36400.0, 1.0], [37400.0, 1.0], [38600.0, 1.0], [40400.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [42400.0, 1.0], [43400.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 43700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.5, "minX": 1.60282752E12, "maxY": 10.0, "series": [{"data": [[1.60282902E12, 10.0], [1.60282794E12, 10.0], [1.60282932E12, 10.0], [1.60282764E12, 10.0], [1.60282752E12, 10.0], [1.60282812E12, 10.0], [1.60282842E12, 10.0], [1.60282872E12, 10.0], [1.60282776E12, 10.0], [1.60282818E12, 10.0], [1.60282848E12, 10.0], [1.6028283E12, 10.0], [1.6028286E12, 10.0], [1.6028289E12, 10.0], [1.60282806E12, 10.0], [1.6028292E12, 10.0], [1.60282836E12, 10.0], [1.60282866E12, 10.0], [1.60282896E12, 10.0], [1.60282878E12, 10.0], [1.60282908E12, 10.0], [1.60282788E12, 10.0], [1.60282938E12, 10.0], [1.60282758E12, 10.0], [1.60282854E12, 10.0], [1.60282884E12, 10.0], [1.60282914E12, 10.0], [1.60282782E12, 10.0], [1.60282944E12, 5.5], [1.602828E12, 10.0], [1.60282926E12, 10.0], [1.6028277E12, 10.0], [1.60282824E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282944E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17014.0, "minX": 1.0, "maxY": 26027.13085399452, "series": [{"data": [[8.0, 17197.0], [4.0, 17202.0], [2.0, 17166.0], [1.0, 17498.0], [9.0, 17274.0], [10.0, 26027.13085399452], [5.0, 17101.0], [6.0, 17014.0], [3.0, 17146.0], [7.0, 17213.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25919.05850340139]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67.6, "minX": 1.60282752E12, "maxY": 168070.03333333333, "series": [{"data": [[1.60282902E12, 44878.9], [1.60282794E12, 50219.166666666664], [1.60282932E12, 151334.36666666667], [1.60282764E12, 143358.41666666666], [1.60282752E12, 164758.25], [1.60282812E12, 44216.3], [1.60282842E12, 142896.7], [1.60282872E12, 31337.05], [1.60282776E12, 80039.18333333333], [1.60282818E12, 41761.03333333333], [1.60282848E12, 160681.76666666666], [1.6028283E12, 168070.03333333333], [1.6028286E12, 68702.66666666667], [1.6028289E12, 45715.933333333334], [1.60282806E12, 55405.38333333333], [1.6028292E12, 25720.116666666665], [1.60282836E12, 73241.9], [1.60282866E12, 77356.05], [1.60282896E12, 56176.61666666667], [1.60282878E12, 44120.15], [1.60282908E12, 51195.666666666664], [1.60282788E12, 47023.55], [1.60282938E12, 69079.71666666666], [1.60282758E12, 101743.36666666667], [1.60282854E12, 57166.36666666667], [1.60282884E12, 53161.166666666664], [1.60282914E12, 40932.35], [1.60282782E12, 46239.46666666667], [1.60282944E12, 10557.45], [1.602828E12, 45768.98333333333], [1.60282926E12, 38687.1], [1.6028277E12, 59520.333333333336], [1.60282824E12, 32375.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60282902E12, 153.38333333333333], [1.60282794E12, 153.41666666666666], [1.60282932E12, 177.26666666666668], [1.60282764E12, 164.88333333333333], [1.60282752E12, 102.43333333333334], [1.60282812E12, 146.05], [1.60282842E12, 177.78333333333333], [1.60282872E12, 124.2], [1.60282776E12, 183.56666666666666], [1.60282818E12, 160.68333333333334], [1.60282848E12, 197.71666666666667], [1.6028283E12, 217.51666666666668], [1.6028286E12, 171.16666666666666], [1.6028289E12, 153.4], [1.60282806E12, 153.66666666666666], [1.6028292E12, 175.08333333333334], [1.60282836E12, 182.23333333333332], [1.60282866E12, 183.83333333333334], [1.60282896E12, 154.41666666666666], [1.60282878E12, 146.11666666666667], [1.60282908E12, 146.11666666666667], [1.60282788E12, 153.43333333333334], [1.60282938E12, 177.55], [1.60282758E12, 207.3], [1.60282854E12, 187.7], [1.60282884E12, 153.46666666666667], [1.60282914E12, 167.8], [1.60282782E12, 153.73333333333332], [1.60282944E12, 67.6], [1.602828E12, 146.11666666666667], [1.60282926E12, 191.61666666666667], [1.6028277E12, 132.85], [1.60282824E12, 175.18333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282944E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17171.2, "minX": 1.60282752E12, "maxY": 37405.777777777774, "series": [{"data": [[1.60282902E12, 28822.809523809527], [1.60282794E12, 28981.523809523806], [1.60282932E12, 23121.2], [1.60282764E12, 21752.454545454548], [1.60282752E12, 17528.428571428572], [1.60282812E12, 29173.8], [1.60282842E12, 22475.08], [1.60282872E12, 35485.23529411765], [1.60282776E12, 24445.12], [1.60282818E12, 28504.409090909096], [1.60282848E12, 23420.25925925926], [1.6028283E12, 19623.1], [1.6028286E12, 27863.521739130436], [1.6028289E12, 29071.333333333332], [1.60282806E12, 28762.57142857143], [1.6028292E12, 24949.666666666668], [1.60282836E12, 24794.499999999996], [1.60282866E12, 24104.68], [1.60282896E12, 27982.190476190477], [1.60282878E12, 28492.399999999998], [1.60282908E12, 29142.85], [1.60282788E12, 29308.28571428571], [1.60282938E12, 25965.64], [1.60282758E12, 21927.655172413793], [1.60282854E12, 19090.370370370372], [1.60282884E12, 29339.857142857145], [1.60282914E12, 27579.347826086952], [1.60282782E12, 26964.61904761905], [1.60282944E12, 17171.2], [1.602828E12, 29487.95], [1.60282926E12, 23358.846153846152], [1.6028277E12, 37405.777777777774], [1.60282824E12, 25425.708333333336]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282944E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17169.399999999998, "minX": 1.60282752E12, "maxY": 37404.055555555555, "series": [{"data": [[1.60282902E12, 28821.476190476187], [1.60282794E12, 28980.38095238095], [1.60282932E12, 23117.16], [1.60282764E12, 21749.227272727276], [1.60282752E12, 17523.928571428572], [1.60282812E12, 29172.749999999996], [1.60282842E12, 22471.6], [1.60282872E12, 35484.70588235294], [1.60282776E12, 24443.520000000004], [1.60282818E12, 28503.454545454544], [1.60282848E12, 23417.407407407405], [1.6028283E12, 19619.833333333336], [1.6028286E12, 27862.043478260868], [1.6028289E12, 29070.333333333332], [1.60282806E12, 28761.238095238095], [1.6028292E12, 24949.124999999996], [1.60282836E12, 24792.23076923077], [1.60282866E12, 24103.04], [1.60282896E12, 27980.809523809527], [1.60282878E12, 28491.200000000004], [1.60282908E12, 29141.35], [1.60282788E12, 29307.04761904762], [1.60282938E12, 25963.36], [1.60282758E12, 21925.655172413797], [1.60282854E12, 19088.740740740737], [1.60282884E12, 29338.571428571428], [1.60282914E12, 27578.565217391308], [1.60282782E12, 26963.476190476194], [1.60282944E12, 17169.399999999998], [1.602828E12, 29486.75], [1.60282926E12, 23358.346153846152], [1.6028277E12, 37404.055555555555], [1.60282824E12, 25425.125]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282944E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60282752E12, "maxY": 7.071428571428571, "series": [{"data": [[1.60282902E12, 0.5238095238095238], [1.60282794E12, 0.6190476190476191], [1.60282932E12, 0.44], [1.60282764E12, 0.0], [1.60282752E12, 7.071428571428571], [1.60282812E12, 0.4499999999999999], [1.60282842E12, 0.24], [1.60282872E12, 0.17647058823529413], [1.60282776E12, 0.6], [1.60282818E12, 0.3636363636363636], [1.60282848E12, 0.25925925925925936], [1.6028283E12, 0.4], [1.6028286E12, 0.4782608695652174], [1.6028289E12, 0.2380952380952381], [1.60282806E12, 0.38095238095238093], [1.6028292E12, 0.6250000000000002], [1.60282836E12, 0.3846153846153846], [1.60282866E12, 0.44], [1.60282896E12, 0.5238095238095238], [1.60282878E12, 0.7], [1.60282908E12, 0.35], [1.60282788E12, 0.3333333333333333], [1.60282938E12, 0.48], [1.60282758E12, 0.4827586206896551], [1.60282854E12, 0.40740740740740744], [1.60282884E12, 0.5714285714285714], [1.60282914E12, 0.3478260869565217], [1.60282782E12, 0.6190476190476192], [1.60282944E12, 0.20000000000000004], [1.602828E12, 0.5], [1.60282926E12, 0.42307692307692313], [1.6028277E12, 0.8333333333333333], [1.60282824E12, 0.5000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282944E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3230.0, "minX": 1.60282752E12, "maxY": 43784.0, "series": [{"data": [[1.60282902E12, 29386.0], [1.60282794E12, 29376.0], [1.60282932E12, 28728.0], [1.60282764E12, 29827.0], [1.60282752E12, 25628.0], [1.60282812E12, 29507.0], [1.60282842E12, 26043.0], [1.60282872E12, 43130.0], [1.60282776E12, 28453.0], [1.60282818E12, 29568.0], [1.60282848E12, 28139.0], [1.6028283E12, 24203.0], [1.6028286E12, 31749.0], [1.6028289E12, 29283.0], [1.60282806E12, 29396.0], [1.6028292E12, 28381.0], [1.60282836E12, 31765.0], [1.60282866E12, 26799.0], [1.60282896E12, 29056.0], [1.60282878E12, 30839.0], [1.60282908E12, 29718.0], [1.60282788E12, 29904.0], [1.60282938E12, 37520.0], [1.60282758E12, 27203.0], [1.60282854E12, 26228.0], [1.60282884E12, 29771.0], [1.60282914E12, 29611.0], [1.60282782E12, 29789.0], [1.60282944E12, 17498.0], [1.602828E12, 29749.0], [1.60282926E12, 27551.0], [1.6028277E12, 43784.0], [1.60282824E12, 28174.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60282902E12, 27935.0], [1.60282794E12, 28700.0], [1.60282932E12, 18406.0], [1.60282764E12, 17166.0], [1.60282752E12, 3230.0], [1.60282812E12, 28854.0], [1.60282842E12, 17813.0], [1.60282872E12, 25737.0], [1.60282776E12, 22136.0], [1.60282818E12, 25853.0], [1.60282848E12, 18962.0], [1.6028283E12, 17622.0], [1.6028286E12, 23279.0], [1.6028289E12, 28628.0], [1.60282806E12, 28315.0], [1.6028292E12, 21414.0], [1.60282836E12, 18061.0], [1.60282866E12, 22318.0], [1.60282896E12, 27256.0], [1.60282878E12, 25246.0], [1.60282908E12, 28686.0], [1.60282788E12, 28779.0], [1.60282938E12, 16860.0], [1.60282758E12, 17085.0], [1.60282854E12, 17515.0], [1.60282884E12, 29011.0], [1.60282914E12, 23503.0], [1.60282782E12, 23654.0], [1.60282944E12, 16901.0], [1.602828E12, 29109.0], [1.60282926E12, 20599.0], [1.6028277E12, 29255.0], [1.60282824E12, 23574.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60282902E12, 27935.0], [1.60282794E12, 28700.0], [1.60282932E12, 18406.0], [1.60282764E12, 17166.0], [1.60282752E12, 3230.0], [1.60282812E12, 28854.0], [1.60282842E12, 17813.0], [1.60282872E12, 25737.0], [1.60282776E12, 22136.0], [1.60282818E12, 25853.0], [1.60282848E12, 18962.0], [1.6028283E12, 17622.0], [1.6028286E12, 23279.0], [1.6028289E12, 28628.0], [1.60282806E12, 28315.0], [1.6028292E12, 21414.0], [1.60282836E12, 18061.0], [1.60282866E12, 22318.0], [1.60282896E12, 27256.0], [1.60282878E12, 25246.0], [1.60282908E12, 28686.0], [1.60282788E12, 28779.0], [1.60282938E12, 16860.0], [1.60282758E12, 17085.0], [1.60282854E12, 17515.0], [1.60282884E12, 29011.0], [1.60282914E12, 23503.0], [1.60282782E12, 23654.0], [1.60282944E12, 16901.0], [1.602828E12, 29109.0], [1.60282926E12, 20599.0], [1.6028277E12, 29255.0], [1.60282824E12, 23574.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60282902E12, 27935.0], [1.60282794E12, 28700.0], [1.60282932E12, 18406.0], [1.60282764E12, 17166.0], [1.60282752E12, 3230.0], [1.60282812E12, 28854.0], [1.60282842E12, 17813.0], [1.60282872E12, 25737.0], [1.60282776E12, 22136.0], [1.60282818E12, 25853.0], [1.60282848E12, 18962.0], [1.6028283E12, 17622.0], [1.6028286E12, 23279.0], [1.6028289E12, 28628.0], [1.60282806E12, 28315.0], [1.6028292E12, 21414.0], [1.60282836E12, 18061.0], [1.60282866E12, 22318.0], [1.60282896E12, 27256.0], [1.60282878E12, 25246.0], [1.60282908E12, 28686.0], [1.60282788E12, 28779.0], [1.60282938E12, 16860.0], [1.60282758E12, 17085.0], [1.60282854E12, 17515.0], [1.60282884E12, 29011.0], [1.60282914E12, 23503.0], [1.60282782E12, 23654.0], [1.60282944E12, 16901.0], [1.602828E12, 29109.0], [1.60282926E12, 20599.0], [1.6028277E12, 29255.0], [1.60282824E12, 23574.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60282902E12, 27935.0], [1.60282794E12, 28700.0], [1.60282932E12, 18406.0], [1.60282764E12, 17166.0], [1.60282752E12, 3230.0], [1.60282812E12, 28854.0], [1.60282842E12, 17813.0], [1.60282872E12, 25737.0], [1.60282776E12, 22136.0], [1.60282818E12, 25853.0], [1.60282848E12, 18962.0], [1.6028283E12, 17622.0], [1.6028286E12, 23279.0], [1.6028289E12, 28628.0], [1.60282806E12, 28315.0], [1.6028292E12, 21414.0], [1.60282836E12, 18061.0], [1.60282866E12, 22318.0], [1.60282896E12, 27256.0], [1.60282878E12, 25246.0], [1.60282908E12, 28686.0], [1.60282788E12, 28779.0], [1.60282938E12, 16860.0], [1.60282758E12, 17085.0], [1.60282854E12, 17515.0], [1.60282884E12, 29011.0], [1.60282914E12, 23503.0], [1.60282782E12, 23654.0], [1.60282944E12, 16901.0], [1.602828E12, 29109.0], [1.60282926E12, 20599.0], [1.6028277E12, 29255.0], [1.60282824E12, 23574.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60282902E12, 28978.0], [1.60282794E12, 28961.0], [1.60282932E12, 21311.0], [1.60282764E12, 21984.5], [1.60282752E12, 19423.0], [1.60282812E12, 29144.5], [1.60282842E12, 22925.0], [1.60282872E12, 35440.0], [1.60282776E12, 24209.0], [1.60282818E12, 29050.0], [1.60282848E12, 24094.0], [1.6028283E12, 19150.0], [1.6028286E12, 28409.0], [1.6028289E12, 29090.0], [1.60282806E12, 28886.0], [1.6028292E12, 25232.5], [1.60282836E12, 22372.0], [1.60282866E12, 24016.0], [1.60282896E12, 27904.0], [1.60282878E12, 28740.5], [1.60282908E12, 29174.5], [1.60282788E12, 29347.0], [1.60282938E12, 28518.0], [1.60282758E12, 20323.0], [1.60282854E12, 18159.0], [1.60282884E12, 29315.0], [1.60282914E12, 29236.0], [1.60282782E12, 26957.0], [1.60282944E12, 17181.5], [1.602828E12, 29450.0], [1.60282926E12, 23354.0], [1.6028277E12, 37879.5], [1.60282824E12, 25441.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282944E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26866.0, "minX": 1.0, "maxY": 26866.0, "series": [{"data": [[1.0, 26866.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26866.0, "minX": 1.0, "maxY": 26866.0, "series": [{"data": [[1.0, 26866.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.60282752E12, "maxY": 0.5, "series": [{"data": [[1.60282902E12, 0.35], [1.60282794E12, 0.35], [1.60282932E12, 0.4166666666666667], [1.60282764E12, 0.36666666666666664], [1.60282752E12, 0.4], [1.60282812E12, 0.3333333333333333], [1.60282842E12, 0.4166666666666667], [1.60282872E12, 0.2833333333333333], [1.60282776E12, 0.4166666666666667], [1.60282818E12, 0.36666666666666664], [1.60282848E12, 0.45], [1.6028283E12, 0.5], [1.6028286E12, 0.38333333333333336], [1.6028289E12, 0.35], [1.60282806E12, 0.35], [1.6028292E12, 0.4], [1.60282836E12, 0.43333333333333335], [1.60282866E12, 0.4166666666666667], [1.60282896E12, 0.35], [1.60282878E12, 0.3333333333333333], [1.60282908E12, 0.3333333333333333], [1.60282788E12, 0.35], [1.60282938E12, 0.4166666666666667], [1.60282758E12, 0.48333333333333334], [1.60282854E12, 0.45], [1.60282884E12, 0.35], [1.60282914E12, 0.38333333333333336], [1.60282782E12, 0.35], [1.602828E12, 0.3333333333333333], [1.60282926E12, 0.43333333333333335], [1.6028277E12, 0.3], [1.60282824E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60282752E12, "maxY": 0.5, "series": [{"data": [[1.60282902E12, 0.35], [1.60282794E12, 0.35], [1.60282932E12, 0.4166666666666667], [1.60282764E12, 0.36666666666666664], [1.60282752E12, 0.23333333333333334], [1.60282812E12, 0.3333333333333333], [1.60282842E12, 0.4166666666666667], [1.60282872E12, 0.2833333333333333], [1.60282776E12, 0.4166666666666667], [1.60282818E12, 0.36666666666666664], [1.60282848E12, 0.45], [1.6028283E12, 0.5], [1.6028286E12, 0.38333333333333336], [1.6028289E12, 0.35], [1.60282806E12, 0.35], [1.6028292E12, 0.4], [1.60282836E12, 0.43333333333333335], [1.60282866E12, 0.4166666666666667], [1.60282896E12, 0.35], [1.60282878E12, 0.3333333333333333], [1.60282908E12, 0.3333333333333333], [1.60282788E12, 0.35], [1.60282938E12, 0.4166666666666667], [1.60282758E12, 0.48333333333333334], [1.60282854E12, 0.45], [1.60282884E12, 0.35], [1.60282914E12, 0.38333333333333336], [1.60282782E12, 0.35], [1.60282944E12, 0.16666666666666666], [1.602828E12, 0.3333333333333333], [1.60282926E12, 0.43333333333333335], [1.6028277E12, 0.3], [1.60282824E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282944E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60282752E12, "maxY": 0.5, "series": [{"data": [[1.60282902E12, 0.35], [1.60282794E12, 0.35], [1.60282932E12, 0.4166666666666667], [1.60282764E12, 0.36666666666666664], [1.60282752E12, 0.23333333333333334], [1.60282812E12, 0.3333333333333333], [1.60282842E12, 0.4166666666666667], [1.60282872E12, 0.2833333333333333], [1.60282776E12, 0.4166666666666667], [1.60282818E12, 0.36666666666666664], [1.60282848E12, 0.45], [1.6028283E12, 0.5], [1.6028286E12, 0.38333333333333336], [1.6028289E12, 0.35], [1.60282806E12, 0.35], [1.6028292E12, 0.4], [1.60282836E12, 0.43333333333333335], [1.60282866E12, 0.4166666666666667], [1.60282896E12, 0.35], [1.60282878E12, 0.3333333333333333], [1.60282908E12, 0.3333333333333333], [1.60282788E12, 0.35], [1.60282938E12, 0.4166666666666667], [1.60282758E12, 0.48333333333333334], [1.60282854E12, 0.45], [1.60282884E12, 0.35], [1.60282914E12, 0.38333333333333336], [1.60282782E12, 0.35], [1.60282944E12, 0.16666666666666666], [1.602828E12, 0.3333333333333333], [1.60282926E12, 0.43333333333333335], [1.6028277E12, 0.3], [1.60282824E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282944E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.60282752E12, "maxY": 0.5, "series": [{"data": [[1.60282902E12, 0.35], [1.60282794E12, 0.35], [1.60282932E12, 0.4166666666666667], [1.60282764E12, 0.36666666666666664], [1.60282752E12, 0.23333333333333334], [1.60282812E12, 0.3333333333333333], [1.60282842E12, 0.4166666666666667], [1.60282872E12, 0.2833333333333333], [1.60282776E12, 0.4166666666666667], [1.60282818E12, 0.36666666666666664], [1.60282848E12, 0.45], [1.6028283E12, 0.5], [1.6028286E12, 0.38333333333333336], [1.6028289E12, 0.35], [1.60282806E12, 0.35], [1.6028292E12, 0.4], [1.60282836E12, 0.43333333333333335], [1.60282866E12, 0.4166666666666667], [1.60282896E12, 0.35], [1.60282878E12, 0.3333333333333333], [1.60282908E12, 0.3333333333333333], [1.60282788E12, 0.35], [1.60282938E12, 0.4166666666666667], [1.60282758E12, 0.48333333333333334], [1.60282854E12, 0.45], [1.60282884E12, 0.35], [1.60282914E12, 0.38333333333333336], [1.60282782E12, 0.35], [1.60282944E12, 0.16666666666666666], [1.602828E12, 0.3333333333333333], [1.60282926E12, 0.43333333333333335], [1.6028277E12, 0.3], [1.60282824E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282944E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

