/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3225.0, "minX": 0.0, "maxY": 45505.0, "series": [{"data": [[0.0, 3225.0], [0.1, 3225.0], [0.2, 6238.0], [0.3, 8464.0], [0.4, 8464.0], [0.5, 11180.0], [0.6, 13707.0], [0.7, 16245.0], [0.8, 16245.0], [0.9, 16948.0], [1.0, 17022.0], [1.1, 17132.0], [1.2, 17132.0], [1.3, 17156.0], [1.4, 17182.0], [1.5, 17186.0], [1.6, 17186.0], [1.7, 17218.0], [1.8, 17265.0], [1.9, 17265.0], [2.0, 17325.0], [2.1, 17389.0], [2.2, 17407.0], [2.3, 17407.0], [2.4, 17496.0], [2.5, 17501.0], [2.6, 17502.0], [2.7, 17502.0], [2.8, 17589.0], [2.9, 17596.0], [3.0, 17756.0], [3.1, 17756.0], [3.2, 17781.0], [3.3, 17795.0], [3.4, 17795.0], [3.5, 17799.0], [3.6, 17824.0], [3.7, 17827.0], [3.8, 17827.0], [3.9, 17852.0], [4.0, 17880.0], [4.1, 17917.0], [4.2, 17917.0], [4.3, 17922.0], [4.4, 17938.0], [4.5, 17957.0], [4.6, 17957.0], [4.7, 17984.0], [4.8, 18004.0], [4.9, 18011.0], [5.0, 18011.0], [5.1, 18012.0], [5.2, 18050.0], [5.3, 18050.0], [5.4, 18050.0], [5.5, 18057.0], [5.6, 18128.0], [5.7, 18128.0], [5.8, 18135.0], [5.9, 18137.0], [6.0, 18149.0], [6.1, 18149.0], [6.2, 18155.0], [6.3, 18167.0], [6.4, 18179.0], [6.5, 18179.0], [6.6, 18180.0], [6.7, 18195.0], [6.8, 18195.0], [6.9, 18255.0], [7.0, 18306.0], [7.1, 18363.0], [7.2, 18363.0], [7.3, 18373.0], [7.4, 18375.0], [7.5, 18388.0], [7.6, 18388.0], [7.7, 18392.0], [7.8, 18417.0], [7.9, 18420.0], [8.0, 18420.0], [8.1, 18440.0], [8.2, 18459.0], [8.3, 18461.0], [8.4, 18461.0], [8.5, 18462.0], [8.6, 18490.0], [8.7, 18490.0], [8.8, 18513.0], [8.9, 18541.0], [9.0, 18582.0], [9.1, 18582.0], [9.2, 18596.0], [9.3, 18607.0], [9.4, 18707.0], [9.5, 18707.0], [9.6, 18800.0], [9.7, 18932.0], [9.8, 18946.0], [9.9, 18946.0], [10.0, 19015.0], [10.1, 19075.0], [10.2, 19075.0], [10.3, 19080.0], [10.4, 19132.0], [10.5, 19161.0], [10.6, 19161.0], [10.7, 19180.0], [10.8, 19320.0], [10.9, 19352.0], [11.0, 19352.0], [11.1, 19389.0], [11.2, 19421.0], [11.3, 19469.0], [11.4, 19469.0], [11.5, 19489.0], [11.6, 19518.0], [11.7, 19518.0], [11.8, 19533.0], [11.9, 19622.0], [12.0, 19623.0], [12.1, 19623.0], [12.2, 19667.0], [12.3, 19675.0], [12.4, 19725.0], [12.5, 19725.0], [12.6, 19809.0], [12.7, 19851.0], [12.8, 19883.0], [12.9, 19883.0], [13.0, 19908.0], [13.1, 19937.0], [13.2, 19944.0], [13.3, 19944.0], [13.4, 20002.0], [13.5, 20020.0], [13.6, 20020.0], [13.7, 20071.0], [13.8, 20073.0], [13.9, 20083.0], [14.0, 20083.0], [14.1, 20105.0], [14.2, 20112.0], [14.3, 20112.0], [14.4, 20112.0], [14.5, 20113.0], [14.6, 20114.0], [14.7, 20190.0], [14.8, 20190.0], [14.9, 20200.0], [15.0, 20211.0], [15.1, 20211.0], [15.2, 20363.0], [15.3, 20405.0], [15.4, 20423.0], [15.5, 20423.0], [15.6, 20425.0], [15.7, 20483.0], [15.8, 20565.0], [15.9, 20565.0], [16.0, 20588.0], [16.1, 20601.0], [16.2, 20675.0], [16.3, 20675.0], [16.4, 20807.0], [16.5, 20809.0], [16.6, 20838.0], [16.7, 20838.0], [16.8, 20918.0], [16.9, 20946.0], [17.0, 20946.0], [17.1, 20975.0], [17.2, 20988.0], [17.3, 21205.0], [17.4, 21205.0], [17.5, 21208.0], [17.6, 21312.0], [17.7, 21380.0], [17.8, 21380.0], [17.9, 21414.0], [18.0, 21491.0], [18.1, 21492.0], [18.2, 21492.0], [18.3, 21510.0], [18.4, 21537.0], [18.5, 21537.0], [18.6, 21566.0], [18.7, 21629.0], [18.8, 21672.0], [18.9, 21672.0], [19.0, 21683.0], [19.1, 21768.0], [19.2, 21866.0], [19.3, 21866.0], [19.4, 21870.0], [19.5, 21945.0], [19.6, 21948.0], [19.7, 21948.0], [19.8, 21989.0], [19.9, 21991.0], [20.0, 22025.0], [20.1, 22025.0], [20.2, 22036.0], [20.3, 22105.0], [20.4, 22105.0], [20.5, 22107.0], [20.6, 22117.0], [20.7, 22163.0], [20.8, 22163.0], [20.9, 22177.0], [21.0, 22252.0], [21.1, 22324.0], [21.2, 22324.0], [21.3, 22348.0], [21.4, 22374.0], [21.5, 22406.0], [21.6, 22406.0], [21.7, 22415.0], [21.8, 22430.0], [21.9, 22430.0], [22.0, 22476.0], [22.1, 22495.0], [22.2, 22527.0], [22.3, 22527.0], [22.4, 22540.0], [22.5, 22576.0], [22.6, 22601.0], [22.7, 22601.0], [22.8, 22606.0], [22.9, 22608.0], [23.0, 22653.0], [23.1, 22653.0], [23.2, 22661.0], [23.3, 22752.0], [23.4, 22752.0], [23.5, 22785.0], [23.6, 22798.0], [23.7, 22802.0], [23.8, 22802.0], [23.9, 22839.0], [24.0, 22943.0], [24.1, 23003.0], [24.2, 23003.0], [24.3, 23082.0], [24.4, 23151.0], [24.5, 23179.0], [24.6, 23179.0], [24.7, 23234.0], [24.8, 23244.0], [24.9, 23256.0], [25.0, 23256.0], [25.1, 23360.0], [25.2, 23398.0], [25.3, 23398.0], [25.4, 23428.0], [25.5, 23437.0], [25.6, 23449.0], [25.7, 23449.0], [25.8, 23451.0], [25.9, 23454.0], [26.0, 23493.0], [26.1, 23493.0], [26.2, 23535.0], [26.3, 23541.0], [26.4, 23549.0], [26.5, 23549.0], [26.6, 23574.0], [26.7, 23578.0], [26.8, 23578.0], [26.9, 23589.0], [27.0, 23592.0], [27.1, 23598.0], [27.2, 23598.0], [27.3, 23609.0], [27.4, 23654.0], [27.5, 23771.0], [27.6, 23771.0], [27.7, 23778.0], [27.8, 23780.0], [27.9, 23811.0], [28.0, 23811.0], [28.1, 23832.0], [28.2, 23853.0], [28.3, 23871.0], [28.4, 23871.0], [28.5, 23880.0], [28.6, 23898.0], [28.7, 23898.0], [28.8, 23907.0], [28.9, 23962.0], [29.0, 23967.0], [29.1, 23967.0], [29.2, 23977.0], [29.3, 23978.0], [29.4, 23979.0], [29.5, 23979.0], [29.6, 24000.0], [29.7, 24010.0], [29.8, 24013.0], [29.9, 24013.0], [30.0, 24028.0], [30.1, 24033.0], [30.2, 24033.0], [30.3, 24057.0], [30.4, 24057.0], [30.5, 24059.0], [30.6, 24059.0], [30.7, 24061.0], [30.8, 24092.0], [30.9, 24113.0], [31.0, 24113.0], [31.1, 24116.0], [31.2, 24164.0], [31.3, 24185.0], [31.4, 24185.0], [31.5, 24205.0], [31.6, 24207.0], [31.7, 24207.0], [31.8, 24251.0], [31.9, 24276.0], [32.0, 24282.0], [32.1, 24282.0], [32.2, 24285.0], [32.3, 24288.0], [32.4, 24289.0], [32.5, 24289.0], [32.6, 24335.0], [32.7, 24347.0], [32.8, 24355.0], [32.9, 24355.0], [33.0, 24363.0], [33.1, 24373.0], [33.2, 24392.0], [33.3, 24392.0], [33.4, 24404.0], [33.5, 24426.0], [33.6, 24426.0], [33.7, 24526.0], [33.8, 24542.0], [33.9, 24576.0], [34.0, 24576.0], [34.1, 24582.0], [34.2, 24594.0], [34.3, 24620.0], [34.4, 24620.0], [34.5, 24625.0], [34.6, 24639.0], [34.7, 24664.0], [34.8, 24664.0], [34.9, 24683.0], [35.0, 24748.0], [35.1, 24748.0], [35.2, 24756.0], [35.3, 24762.0], [35.4, 24767.0], [35.5, 24767.0], [35.6, 24775.0], [35.7, 24790.0], [35.8, 24796.0], [35.9, 24796.0], [36.0, 24807.0], [36.1, 24825.0], [36.2, 24829.0], [36.3, 24829.0], [36.4, 24886.0], [36.5, 24895.0], [36.6, 24934.0], [36.7, 24934.0], [36.8, 24943.0], [36.9, 24957.0], [37.0, 24957.0], [37.1, 24961.0], [37.2, 24981.0], [37.3, 25005.0], [37.4, 25005.0], [37.5, 25017.0], [37.6, 25050.0], [37.7, 25055.0], [37.8, 25055.0], [37.9, 25067.0], [38.0, 25082.0], [38.1, 25105.0], [38.2, 25105.0], [38.3, 25139.0], [38.4, 25174.0], [38.5, 25174.0], [38.6, 25246.0], [38.7, 25263.0], [38.8, 25279.0], [38.9, 25279.0], [39.0, 25335.0], [39.1, 25338.0], [39.2, 25375.0], [39.3, 25375.0], [39.4, 25393.0], [39.5, 25404.0], [39.6, 25430.0], [39.7, 25430.0], [39.8, 25431.0], [39.9, 25460.0], [40.0, 25484.0], [40.1, 25484.0], [40.2, 25503.0], [40.3, 25510.0], [40.4, 25510.0], [40.5, 25532.0], [40.6, 25565.0], [40.7, 25566.0], [40.8, 25566.0], [40.9, 25591.0], [41.0, 25609.0], [41.1, 25651.0], [41.2, 25651.0], [41.3, 25659.0], [41.4, 25723.0], [41.5, 25778.0], [41.6, 25778.0], [41.7, 25789.0], [41.8, 25803.0], [41.9, 25803.0], [42.0, 25805.0], [42.1, 25842.0], [42.2, 25854.0], [42.3, 25854.0], [42.4, 25876.0], [42.5, 25888.0], [42.6, 25895.0], [42.7, 25895.0], [42.8, 25895.0], [42.9, 25902.0], [43.0, 25917.0], [43.1, 25917.0], [43.2, 25971.0], [43.3, 25985.0], [43.4, 25985.0], [43.5, 26038.0], [43.6, 26043.0], [43.7, 26109.0], [43.8, 26109.0], [43.9, 26119.0], [44.0, 26127.0], [44.1, 26144.0], [44.2, 26144.0], [44.3, 26153.0], [44.4, 26160.0], [44.5, 26172.0], [44.6, 26172.0], [44.7, 26194.0], [44.8, 26197.0], [44.9, 26210.0], [45.0, 26210.0], [45.1, 26228.0], [45.2, 26242.0], [45.3, 26242.0], [45.4, 26284.0], [45.5, 26290.0], [45.6, 26294.0], [45.7, 26294.0], [45.8, 26328.0], [45.9, 26331.0], [46.0, 26334.0], [46.1, 26334.0], [46.2, 26363.0], [46.3, 26365.0], [46.4, 26384.0], [46.5, 26384.0], [46.6, 26387.0], [46.7, 26482.0], [46.8, 26482.0], [46.9, 26583.0], [47.0, 26628.0], [47.1, 26652.0], [47.2, 26652.0], [47.3, 26652.0], [47.4, 26691.0], [47.5, 26704.0], [47.6, 26704.0], [47.7, 26778.0], [47.8, 26783.0], [47.9, 26784.0], [48.0, 26784.0], [48.1, 26785.0], [48.2, 26857.0], [48.3, 26860.0], [48.4, 26860.0], [48.5, 26923.0], [48.6, 26971.0], [48.7, 26971.0], [48.8, 27010.0], [48.9, 27022.0], [49.0, 27031.0], [49.1, 27031.0], [49.2, 27049.0], [49.3, 27051.0], [49.4, 27072.0], [49.5, 27072.0], [49.6, 27161.0], [49.7, 27197.0], [49.8, 27206.0], [49.9, 27206.0], [50.0, 27274.0], [50.1, 27280.0], [50.2, 27280.0], [50.3, 27339.0], [50.4, 27411.0], [50.5, 27411.0], [50.6, 27411.0], [50.7, 27419.0], [50.8, 27427.0], [50.9, 27429.0], [51.0, 27429.0], [51.1, 27506.0], [51.2, 27510.0], [51.3, 27514.0], [51.4, 27514.0], [51.5, 27522.0], [51.6, 27560.0], [51.7, 27560.0], [51.8, 27572.0], [51.9, 27581.0], [52.0, 27582.0], [52.1, 27582.0], [52.2, 27589.0], [52.3, 27619.0], [52.4, 27667.0], [52.5, 27667.0], [52.6, 27668.0], [52.7, 27682.0], [52.8, 27684.0], [52.9, 27684.0], [53.0, 27704.0], [53.1, 27708.0], [53.2, 27727.0], [53.3, 27727.0], [53.4, 27766.0], [53.5, 27773.0], [53.6, 27773.0], [53.7, 27813.0], [53.8, 27851.0], [53.9, 27947.0], [54.0, 27947.0], [54.1, 27950.0], [54.2, 27963.0], [54.3, 27972.0], [54.4, 27972.0], [54.5, 27973.0], [54.6, 27981.0], [54.7, 28085.0], [54.8, 28085.0], [54.9, 28100.0], [55.0, 28116.0], [55.1, 28116.0], [55.2, 28194.0], [55.3, 28218.0], [55.4, 28228.0], [55.5, 28228.0], [55.6, 28262.0], [55.7, 28268.0], [55.8, 28323.0], [55.9, 28323.0], [56.0, 28363.0], [56.1, 28399.0], [56.2, 28400.0], [56.3, 28400.0], [56.4, 28414.0], [56.5, 28424.0], [56.6, 28433.0], [56.7, 28433.0], [56.8, 28446.0], [56.9, 28454.0], [57.0, 28454.0], [57.1, 28488.0], [57.2, 28499.0], [57.3, 28503.0], [57.4, 28503.0], [57.5, 28523.0], [57.6, 28531.0], [57.7, 28538.0], [57.8, 28538.0], [57.9, 28546.0], [58.0, 28567.0], [58.1, 28597.0], [58.2, 28597.0], [58.3, 28607.0], [58.4, 28607.0], [58.5, 28607.0], [58.6, 28626.0], [58.7, 28631.0], [58.8, 28673.0], [58.9, 28673.0], [59.0, 28679.0], [59.1, 28693.0], [59.2, 28705.0], [59.3, 28705.0], [59.4, 28729.0], [59.5, 28734.0], [59.6, 28744.0], [59.7, 28744.0], [59.8, 28745.0], [59.9, 28788.0], [60.0, 28791.0], [60.1, 28791.0], [60.2, 28799.0], [60.3, 28801.0], [60.4, 28801.0], [60.5, 28820.0], [60.6, 28829.0], [60.7, 28835.0], [60.8, 28835.0], [60.9, 28837.0], [61.0, 28864.0], [61.1, 28867.0], [61.2, 28867.0], [61.3, 28891.0], [61.4, 28917.0], [61.5, 28918.0], [61.6, 28918.0], [61.7, 28924.0], [61.8, 28956.0], [61.9, 28956.0], [62.0, 28959.0], [62.1, 28976.0], [62.2, 29022.0], [62.3, 29022.0], [62.4, 29046.0], [62.5, 29065.0], [62.6, 29086.0], [62.7, 29086.0], [62.8, 29086.0], [62.9, 29089.0], [63.0, 29103.0], [63.1, 29103.0], [63.2, 29107.0], [63.3, 29126.0], [63.4, 29126.0], [63.5, 29144.0], [63.6, 29156.0], [63.7, 29163.0], [63.8, 29163.0], [63.9, 29164.0], [64.0, 29169.0], [64.1, 29173.0], [64.2, 29173.0], [64.3, 29182.0], [64.4, 29200.0], [64.5, 29208.0], [64.6, 29208.0], [64.7, 29218.0], [64.8, 29223.0], [64.9, 29224.0], [65.0, 29224.0], [65.1, 29226.0], [65.2, 29233.0], [65.3, 29233.0], [65.4, 29239.0], [65.5, 29248.0], [65.6, 29253.0], [65.7, 29253.0], [65.8, 29265.0], [65.9, 29265.0], [66.0, 29270.0], [66.1, 29270.0], [66.2, 29273.0], [66.3, 29278.0], [66.4, 29282.0], [66.5, 29282.0], [66.6, 29291.0], [66.7, 29292.0], [66.8, 29292.0], [66.9, 29292.0], [67.0, 29294.0], [67.1, 29298.0], [67.2, 29298.0], [67.3, 29299.0], [67.4, 29304.0], [67.5, 29305.0], [67.6, 29305.0], [67.7, 29310.0], [67.8, 29333.0], [67.9, 29334.0], [68.0, 29334.0], [68.1, 29339.0], [68.2, 29343.0], [68.3, 29344.0], [68.4, 29344.0], [68.5, 29347.0], [68.6, 29350.0], [68.7, 29350.0], [68.8, 29358.0], [68.9, 29359.0], [69.0, 29366.0], [69.1, 29366.0], [69.2, 29373.0], [69.3, 29374.0], [69.4, 29374.0], [69.5, 29374.0], [69.6, 29378.0], [69.7, 29380.0], [69.8, 29385.0], [69.9, 29385.0], [70.0, 29386.0], [70.1, 29387.0], [70.2, 29387.0], [70.3, 29389.0], [70.4, 29393.0], [70.5, 29394.0], [70.6, 29394.0], [70.7, 29397.0], [70.8, 29399.0], [70.9, 29401.0], [71.0, 29401.0], [71.1, 29401.0], [71.2, 29409.0], [71.3, 29416.0], [71.4, 29416.0], [71.5, 29424.0], [71.6, 29425.0], [71.7, 29425.0], [71.8, 29440.0], [71.9, 29446.0], [72.0, 29447.0], [72.1, 29447.0], [72.2, 29453.0], [72.3, 29454.0], [72.4, 29454.0], [72.5, 29454.0], [72.6, 29455.0], [72.7, 29463.0], [72.8, 29464.0], [72.9, 29464.0], [73.0, 29468.0], [73.1, 29481.0], [73.2, 29481.0], [73.3, 29481.0], [73.4, 29485.0], [73.5, 29490.0], [73.6, 29490.0], [73.7, 29490.0], [73.8, 29491.0], [73.9, 29492.0], [74.0, 29492.0], [74.1, 29497.0], [74.2, 29500.0], [74.3, 29505.0], [74.4, 29505.0], [74.5, 29508.0], [74.6, 29510.0], [74.7, 29532.0], [74.8, 29532.0], [74.9, 29541.0], [75.0, 29556.0], [75.1, 29556.0], [75.2, 29560.0], [75.3, 29568.0], [75.4, 29575.0], [75.5, 29575.0], [75.6, 29576.0], [75.7, 29577.0], [75.8, 29581.0], [75.9, 29581.0], [76.0, 29581.0], [76.1, 29581.0], [76.2, 29585.0], [76.3, 29585.0], [76.4, 29586.0], [76.5, 29587.0], [76.6, 29588.0], [76.7, 29588.0], [76.8, 29590.0], [76.9, 29592.0], [77.0, 29592.0], [77.1, 29592.0], [77.2, 29597.0], [77.3, 29599.0], [77.4, 29599.0], [77.5, 29601.0], [77.6, 29603.0], [77.7, 29603.0], [77.8, 29603.0], [77.9, 29607.0], [78.0, 29609.0], [78.1, 29610.0], [78.2, 29610.0], [78.3, 29624.0], [78.4, 29632.0], [78.5, 29632.0], [78.6, 29637.0], [78.7, 29640.0], [78.8, 29647.0], [78.9, 29647.0], [79.0, 29648.0], [79.1, 29650.0], [79.2, 29652.0], [79.3, 29652.0], [79.4, 29655.0], [79.5, 29656.0], [79.6, 29668.0], [79.7, 29668.0], [79.8, 29673.0], [79.9, 29679.0], [80.0, 29695.0], [80.1, 29695.0], [80.2, 29698.0], [80.3, 29699.0], [80.4, 29699.0], [80.5, 29701.0], [80.6, 29707.0], [80.7, 29709.0], [80.8, 29709.0], [80.9, 29710.0], [81.0, 29712.0], [81.1, 29713.0], [81.2, 29713.0], [81.3, 29722.0], [81.4, 29726.0], [81.5, 29728.0], [81.6, 29728.0], [81.7, 29729.0], [81.8, 29730.0], [81.9, 29730.0], [82.0, 29730.0], [82.1, 29750.0], [82.2, 29760.0], [82.3, 29760.0], [82.4, 29776.0], [82.5, 29788.0], [82.6, 29788.0], [82.7, 29788.0], [82.8, 29789.0], [82.9, 29793.0], [83.0, 29795.0], [83.1, 29795.0], [83.2, 29797.0], [83.3, 29798.0], [83.4, 29798.0], [83.5, 29799.0], [83.6, 29800.0], [83.7, 29803.0], [83.8, 29803.0], [83.9, 29809.0], [84.0, 29814.0], [84.1, 29826.0], [84.2, 29826.0], [84.3, 29830.0], [84.4, 29832.0], [84.5, 29836.0], [84.6, 29836.0], [84.7, 29837.0], [84.8, 29845.0], [84.9, 29849.0], [85.0, 29849.0], [85.1, 29853.0], [85.2, 29856.0], [85.3, 29856.0], [85.4, 29859.0], [85.5, 29862.0], [85.6, 29862.0], [85.7, 29862.0], [85.8, 29865.0], [85.9, 29881.0], [86.0, 29881.0], [86.1, 29881.0], [86.2, 29882.0], [86.3, 29886.0], [86.4, 29887.0], [86.5, 29887.0], [86.6, 29895.0], [86.7, 29920.0], [86.8, 29920.0], [86.9, 29922.0], [87.0, 29922.0], [87.1, 29924.0], [87.2, 29924.0], [87.3, 29927.0], [87.4, 29927.0], [87.5, 29943.0], [87.6, 29943.0], [87.7, 29948.0], [87.8, 29956.0], [87.9, 29966.0], [88.0, 29966.0], [88.1, 29970.0], [88.2, 29979.0], [88.3, 29987.0], [88.4, 29987.0], [88.5, 30007.0], [88.6, 30008.0], [88.7, 30008.0], [88.8, 30012.0], [88.9, 30028.0], [89.0, 30040.0], [89.1, 30040.0], [89.2, 30041.0], [89.3, 30055.0], [89.4, 30056.0], [89.5, 30056.0], [89.6, 30059.0], [89.7, 30064.0], [89.8, 30092.0], [89.9, 30092.0], [90.0, 30115.0], [90.1, 30122.0], [90.2, 30122.0], [90.3, 30132.0], [90.4, 30141.0], [90.5, 30141.0], [90.6, 30141.0], [90.7, 30144.0], [90.8, 30146.0], [90.9, 30166.0], [91.0, 30166.0], [91.1, 30183.0], [91.2, 30202.0], [91.3, 30227.0], [91.4, 30227.0], [91.5, 30227.0], [91.6, 30231.0], [91.7, 30231.0], [91.8, 30233.0], [91.9, 30246.0], [92.0, 30328.0], [92.1, 30328.0], [92.2, 30352.0], [92.3, 30382.0], [92.4, 30393.0], [92.5, 30393.0], [92.6, 30478.0], [92.7, 30489.0], [92.8, 30504.0], [92.9, 30504.0], [93.0, 30505.0], [93.1, 30506.0], [93.2, 30513.0], [93.3, 30513.0], [93.4, 30717.0], [93.5, 30827.0], [93.6, 30827.0], [93.7, 30864.0], [93.8, 31024.0], [93.9, 31393.0], [94.0, 31393.0], [94.1, 31611.0], [94.2, 31829.0], [94.3, 31877.0], [94.4, 31877.0], [94.5, 31877.0], [94.6, 31894.0], [94.7, 31985.0], [94.8, 31985.0], [94.9, 32001.0], [95.0, 32002.0], [95.1, 32002.0], [95.2, 32180.0], [95.3, 32228.0], [95.4, 32287.0], [95.5, 32287.0], [95.6, 32292.0], [95.7, 33098.0], [95.8, 33103.0], [95.9, 33103.0], [96.0, 33444.0], [96.1, 33457.0], [96.2, 33616.0], [96.3, 33616.0], [96.4, 33764.0], [96.5, 33935.0], [96.6, 34765.0], [96.7, 34765.0], [96.8, 34784.0], [96.9, 35971.0], [97.0, 35971.0], [97.1, 36153.0], [97.2, 36199.0], [97.3, 36966.0], [97.4, 36966.0], [97.5, 37348.0], [97.6, 37786.0], [97.7, 37993.0], [97.8, 37993.0], [97.9, 38562.0], [98.0, 39445.0], [98.1, 40178.0], [98.2, 40178.0], [98.3, 41165.0], [98.4, 41720.0], [98.5, 41720.0], [98.6, 42275.0], [98.7, 42420.0], [98.8, 42563.0], [98.9, 42563.0], [99.0, 43328.0], [99.1, 43549.0], [99.2, 43949.0], [99.3, 43949.0], [99.4, 44121.0], [99.5, 44524.0], [99.6, 44620.0], [99.7, 44620.0], [99.8, 44921.0], [99.9, 45505.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 26.0, "series": [{"data": [[34700.0, 2.0], [33900.0, 1.0], [33100.0, 1.0], [33700.0, 1.0], [36100.0, 2.0], [35900.0, 1.0], [37300.0, 1.0], [37900.0, 1.0], [38500.0, 1.0], [36900.0, 1.0], [37700.0, 1.0], [40100.0, 1.0], [42500.0, 1.0], [41100.0, 1.0], [41700.0, 1.0], [44100.0, 1.0], [43500.0, 1.0], [44500.0, 1.0], [44900.0, 1.0], [43300.0, 1.0], [43900.0, 1.0], [45500.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8400.0, 1.0], [11100.0, 1.0], [13700.0, 1.0], [16200.0, 1.0], [17100.0, 4.0], [17000.0, 1.0], [16900.0, 1.0], [17200.0, 2.0], [17300.0, 2.0], [17400.0, 2.0], [18400.0, 7.0], [18300.0, 6.0], [18100.0, 9.0], [17900.0, 5.0], [18000.0, 6.0], [17700.0, 4.0], [17800.0, 4.0], [17500.0, 4.0], [18200.0, 1.0], [18500.0, 4.0], [19000.0, 3.0], [18900.0, 2.0], [19400.0, 3.0], [19300.0, 3.0], [19100.0, 3.0], [18800.0, 1.0], [18700.0, 1.0], [18600.0, 1.0], [20400.0, 4.0], [20300.0, 1.0], [19700.0, 1.0], [20100.0, 6.0], [19900.0, 3.0], [19600.0, 4.0], [20000.0, 5.0], [19800.0, 3.0], [19500.0, 2.0], [20200.0, 2.0], [20900.0, 4.0], [20800.0, 3.0], [21300.0, 2.0], [21200.0, 2.0], [20600.0, 2.0], [20500.0, 2.0], [21400.0, 3.0], [21500.0, 3.0], [22300.0, 3.0], [21800.0, 2.0], [21900.0, 4.0], [22400.0, 5.0], [22000.0, 2.0], [22500.0, 3.0], [22100.0, 5.0], [21700.0, 1.0], [21600.0, 3.0], [22200.0, 1.0], [23500.0, 8.0], [23200.0, 3.0], [22600.0, 5.0], [23300.0, 2.0], [22900.0, 1.0], [22800.0, 2.0], [23400.0, 6.0], [23000.0, 2.0], [23100.0, 2.0], [22700.0, 3.0], [23700.0, 3.0], [23900.0, 6.0], [23800.0, 6.0], [24400.0, 2.0], [24100.0, 4.0], [24500.0, 5.0], [24000.0, 10.0], [24300.0, 6.0], [24200.0, 8.0], [23600.0, 2.0], [25400.0, 5.0], [25500.0, 6.0], [25000.0, 6.0], [24600.0, 5.0], [24700.0, 7.0], [24900.0, 5.0], [24800.0, 5.0], [25200.0, 3.0], [25300.0, 4.0], [25100.0, 3.0], [25800.0, 8.0], [26200.0, 6.0], [25600.0, 3.0], [26600.0, 4.0], [26300.0, 7.0], [26100.0, 9.0], [25900.0, 4.0], [26000.0, 2.0], [26400.0, 1.0], [26500.0, 1.0], [25700.0, 3.0], [26700.0, 5.0], [27600.0, 5.0], [26900.0, 2.0], [27300.0, 1.0], [26800.0, 2.0], [27000.0, 6.0], [27500.0, 9.0], [27400.0, 5.0], [27200.0, 3.0], [27100.0, 2.0], [27900.0, 6.0], [28600.0, 7.0], [28400.0, 8.0], [27700.0, 5.0], [28200.0, 4.0], [28500.0, 7.0], [27800.0, 2.0], [28300.0, 3.0], [28100.0, 3.0], [28000.0, 1.0], [29500.0, 24.0], [29400.0, 24.0], [28900.0, 6.0], [29200.0, 22.0], [29600.0, 22.0], [29300.0, 26.0], [29100.0, 10.0], [29000.0, 6.0], [28700.0, 8.0], [28800.0, 8.0], [29800.0, 23.0], [30200.0, 6.0], [29900.0, 13.0], [30100.0, 9.0], [30000.0, 11.0], [29700.0, 23.0], [30300.0, 4.0], [30700.0, 1.0], [30500.0, 4.0], [30400.0, 2.0], [31000.0, 1.0], [31300.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [32100.0, 1.0], [32000.0, 2.0], [31900.0, 1.0], [31800.0, 4.0], [32200.0, 3.0], [33400.0, 2.0], [33000.0, 1.0], [33600.0, 1.0], [39400.0, 1.0], [42200.0, 1.0], [42400.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.5, "minX": 1.60283172E12, "maxY": 10.0, "series": [{"data": [[1.60283346E12, 10.0], [1.60283184E12, 10.0], [1.60283286E12, 10.0], [1.60283316E12, 10.0], [1.60283196E12, 10.0], [1.60283256E12, 10.0], [1.60283358E12, 10.0], [1.60283226E12, 10.0], [1.60283172E12, 10.0], [1.60283232E12, 10.0], [1.60283334E12, 10.0], [1.60283202E12, 10.0], [1.60283364E12, 9.961538461538462], [1.60283274E12, 10.0], [1.60283214E12, 10.0], [1.60283304E12, 10.0], [1.60283244E12, 10.0], [1.6028322E12, 10.0], [1.6028325E12, 10.0], [1.6028319E12, 10.0], [1.6028328E12, 10.0], [1.60283322E12, 10.0], [1.60283352E12, 10.0], [1.60283262E12, 10.0], [1.60283292E12, 10.0], [1.60283298E12, 10.0], [1.60283328E12, 10.0], [1.60283238E12, 10.0], [1.60283268E12, 10.0], [1.6028337E12, 4.5], [1.60283208E12, 10.0], [1.6028331E12, 10.0], [1.60283178E12, 10.0], [1.6028334E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028337E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17182.0, "minX": 1.0, "maxY": 26405.381542699713, "series": [{"data": [[8.0, 17182.0], [4.0, 17496.0], [2.0, 17389.0], [1.0, 17799.0], [9.0, 17186.0], [10.0, 26405.381542699713], [5.0, 17325.0], [6.0, 17265.0], [3.0, 17407.0], [7.0, 17218.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26294.65850340135]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.633333333333333, "minX": 1.60283172E12, "maxY": 207185.08333333334, "series": [{"data": [[1.60283346E12, 27088.166666666668], [1.60283184E12, 66859.16666666667], [1.60283286E12, 56979.3], [1.60283316E12, 49060.6], [1.60283196E12, 68141.28333333334], [1.60283256E12, 168077.81666666668], [1.60283358E12, 157474.01666666666], [1.60283226E12, 59399.166666666664], [1.60283172E12, 30397.316666666666], [1.60283232E12, 40755.71666666667], [1.60283334E12, 47356.11666666667], [1.60283202E12, 51595.0], [1.60283364E12, 68803.61666666667], [1.60283274E12, 106564.25], [1.60283214E12, 45941.1], [1.60283304E12, 47321.03333333333], [1.60283244E12, 33386.85], [1.6028322E12, 46278.75], [1.6028325E12, 37455.11666666667], [1.6028319E12, 140670.1], [1.6028328E12, 76254.63333333333], [1.60283322E12, 54063.23333333333], [1.60283352E12, 36868.78333333333], [1.60283262E12, 75719.3], [1.60283292E12, 66655.36666666667], [1.60283298E12, 33721.916666666664], [1.60283328E12, 45286.03333333333], [1.60283238E12, 44656.53333333333], [1.60283268E12, 192804.46666666667], [1.6028337E12, 3472.3333333333335], [1.60283208E12, 49881.05], [1.6028331E12, 48870.88333333333], [1.60283178E12, 207185.08333333334], [1.6028334E12, 38399.23333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60283346E12, 182.41666666666666], [1.60283184E12, 215.11666666666667], [1.60283286E12, 177.21666666666667], [1.60283316E12, 153.45], [1.60283196E12, 160.73333333333332], [1.60283256E12, 212.58333333333334], [1.60283358E12, 158.65], [1.60283226E12, 153.76666666666668], [1.60283172E12, 14.633333333333333], [1.60283232E12, 146.01666666666668], [1.60283334E12, 146.05], [1.60283202E12, 176.61666666666667], [1.60283364E12, 184.13333333333333], [1.60283274E12, 202.18333333333334], [1.60283214E12, 146.13333333333333], [1.60283304E12, 146.18333333333334], [1.60283244E12, 160.66666666666666], [1.6028322E12, 146.1], [1.6028325E12, 190.91666666666666], [1.6028319E12, 113.46666666666667], [1.6028328E12, 177.11666666666667], [1.60283322E12, 154.4], [1.60283352E12, 195.95], [1.60283262E12, 162.56666666666666], [1.60283292E12, 161.93333333333334], [1.60283298E12, 131.45], [1.60283328E12, 153.4], [1.60283238E12, 146.01666666666668], [1.60283268E12, 186.76666666666668], [1.6028337E12, 53.4], [1.60283208E12, 146.11666666666667], [1.6028331E12, 146.11666666666667], [1.60283178E12, 176.53333333333333], [1.6028334E12, 160.48333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028337E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4731.5, "minX": 1.60283172E12, "maxY": 35758.77777777779, "series": [{"data": [[1.60283346E12, 25065.879999999997], [1.60283184E12, 20023.46666666667], [1.60283286E12, 26164.625], [1.60283316E12, 29357.571428571428], [1.60283196E12, 32204.86363636364], [1.60283256E12, 19704.199999999997], [1.60283358E12, 24267.045454545452], [1.60283226E12, 29387.14285714286], [1.60283172E12, 4731.5], [1.60283232E12, 29236.25], [1.60283334E12, 29457.5], [1.60283202E12, 25394.750000000007], [1.60283364E12, 25427.69230769231], [1.60283274E12, 22499.000000000004], [1.60283214E12, 29924.95], [1.60283304E12, 29339.5], [1.60283244E12, 27965.454545454544], [1.6028322E12, 29752.2], [1.6028325E12, 24911.076923076922], [1.6028319E12, 32114.266666666666], [1.6028328E12, 21678.28], [1.60283322E12, 28135.238095238095], [1.60283352E12, 23093.814814814818], [1.60283262E12, 24653.0], [1.60283292E12, 24628.090909090915], [1.60283298E12, 35758.77777777779], [1.60283328E12, 29348.571428571428], [1.60283238E12, 29995.4], [1.60283268E12, 23371.923076923078], [1.6028337E12, 17385.125], [1.60283208E12, 28361.949999999997], [1.6028331E12, 29723.6], [1.60283178E12, 23233.749999999993], [1.6028334E12, 27460.045454545463]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028337E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4723.0, "minX": 1.60283172E12, "maxY": 35757.94444444444, "series": [{"data": [[1.60283346E12, 25065.08], [1.60283184E12, 20022.03333333333], [1.60283286E12, 26163.541666666668], [1.60283316E12, 29356.52380952381], [1.60283196E12, 32203.40909090909], [1.60283256E12, 19700.599999999995], [1.60283358E12, 24262.454545454548], [1.60283226E12, 29385.761904761905], [1.60283172E12, 4723.0], [1.60283232E12, 29235.15], [1.60283334E12, 29456.199999999997], [1.60283202E12, 25393.75], [1.60283364E12, 25425.461538461543], [1.60283274E12, 22496.78571428571], [1.60283214E12, 29923.800000000003], [1.60283304E12, 29338.25], [1.60283244E12, 27964.81818181818], [1.6028322E12, 29750.949999999993], [1.6028325E12, 24910.03846153846], [1.6028319E12, 32109.466666666667], [1.6028328E12, 21676.280000000006], [1.60283322E12, 28133.76190476191], [1.60283352E12, 23092.851851851858], [1.60283262E12, 24650.391304347824], [1.60283292E12, 24626.63636363636], [1.60283298E12, 35757.94444444444], [1.60283328E12, 29347.47619047619], [1.60283238E12, 29994.149999999998], [1.60283268E12, 23367.73076923077], [1.6028337E12, 17383.375], [1.60283208E12, 28360.8], [1.6028331E12, 29722.35], [1.60283178E12, 23230.29166666667], [1.6028334E12, 27459.409090909096]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028337E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60283172E12, "maxY": 36.0, "series": [{"data": [[1.60283346E12, 0.52], [1.60283184E12, 0.43333333333333335], [1.60283286E12, 0.41666666666666663], [1.60283316E12, 0.38095238095238093], [1.60283196E12, 0.7727272727272728], [1.60283256E12, 0.4000000000000002], [1.60283358E12, 0.4090909090909091], [1.60283226E12, 0.42857142857142866], [1.60283172E12, 36.0], [1.60283232E12, 0.5], [1.60283334E12, 0.5], [1.60283202E12, 0.29166666666666663], [1.60283364E12, 0.38461538461538464], [1.60283274E12, 0.3928571428571428], [1.60283214E12, 0.7000000000000001], [1.60283304E12, 0.39999999999999997], [1.60283244E12, 0.31818181818181823], [1.6028322E12, 0.35], [1.6028325E12, 0.3846153846153846], [1.6028319E12, 0.8666666666666667], [1.6028328E12, 0.04000000000000001], [1.60283322E12, 0.3809523809523809], [1.60283352E12, 0.5555555555555557], [1.60283262E12, 0.565217391304348], [1.60283292E12, 0.5], [1.60283298E12, 0.4444444444444445], [1.60283328E12, 0.47619047619047616], [1.60283238E12, 0.45000000000000007], [1.60283268E12, 0.5384615384615384], [1.6028337E12, 0.0], [1.60283208E12, 0.35000000000000003], [1.6028331E12, 0.7499999999999999], [1.60283178E12, 1.416666666666667], [1.6028334E12, 0.31818181818181823]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028337E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3225.0, "minX": 1.60283172E12, "maxY": 45505.0, "series": [{"data": [[1.60283346E12, 28218.0], [1.60283184E12, 23780.0], [1.60283286E12, 30064.0], [1.60283316E12, 29814.0], [1.60283196E12, 45505.0], [1.60283256E12, 22606.0], [1.60283358E12, 29440.0], [1.60283226E12, 29803.0], [1.60283172E12, 6238.0], [1.60283232E12, 29856.0], [1.60283334E12, 29887.0], [1.60283202E12, 30827.0], [1.60283364E12, 37786.0], [1.60283274E12, 28446.0], [1.60283214E12, 30513.0], [1.60283304E12, 30012.0], [1.60283244E12, 29927.0], [1.6028322E12, 30059.0], [1.6028325E12, 27813.0], [1.6028319E12, 44524.0], [1.6028328E12, 32292.0], [1.60283322E12, 28734.0], [1.60283352E12, 27572.0], [1.60283262E12, 32002.0], [1.60283292E12, 29797.0], [1.60283298E12, 43949.0], [1.60283328E12, 29729.0], [1.60283238E12, 30393.0], [1.60283268E12, 25895.0], [1.6028337E12, 17799.0], [1.60283208E12, 30141.0], [1.6028331E12, 30122.0], [1.60283178E12, 27947.0], [1.6028334E12, 29730.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60283346E12, 21948.0], [1.60283184E12, 17984.0], [1.60283286E12, 23082.0], [1.60283316E12, 28976.0], [1.60283196E12, 24825.0], [1.60283256E12, 17596.0], [1.60283358E12, 18932.0], [1.60283226E12, 28729.0], [1.60283172E12, 3225.0], [1.60283232E12, 28744.0], [1.60283334E12, 28788.0], [1.60283202E12, 22527.0], [1.60283364E12, 16948.0], [1.60283274E12, 18462.0], [1.60283214E12, 29200.0], [1.60283304E12, 26857.0], [1.60283244E12, 25651.0], [1.6028322E12, 29182.0], [1.6028325E12, 19320.0], [1.6028319E12, 23898.0], [1.6028328E12, 17589.0], [1.60283322E12, 27411.0], [1.60283352E12, 20675.0], [1.60283262E12, 17880.0], [1.60283292E12, 22374.0], [1.60283298E12, 25723.0], [1.60283328E12, 28262.0], [1.60283238E12, 29292.0], [1.60283268E12, 19469.0], [1.6028337E12, 17182.0], [1.60283208E12, 24775.0], [1.6028331E12, 29107.0], [1.60283178E12, 8464.0], [1.6028334E12, 24000.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60283346E12, 21948.0], [1.60283184E12, 17984.0], [1.60283286E12, 23082.0], [1.60283316E12, 28976.0], [1.60283196E12, 24825.0], [1.60283256E12, 17596.0], [1.60283358E12, 18932.0], [1.60283226E12, 28729.0], [1.60283172E12, 3225.0], [1.60283232E12, 28744.0], [1.60283334E12, 28788.0], [1.60283202E12, 22527.0], [1.60283364E12, 16948.0], [1.60283274E12, 18462.0], [1.60283214E12, 29200.0], [1.60283304E12, 26857.0], [1.60283244E12, 25651.0], [1.6028322E12, 29182.0], [1.6028325E12, 19320.0], [1.6028319E12, 23898.0], [1.6028328E12, 17589.0], [1.60283322E12, 27411.0], [1.60283352E12, 20675.0], [1.60283262E12, 17880.0], [1.60283292E12, 22374.0], [1.60283298E12, 25723.0], [1.60283328E12, 28262.0], [1.60283238E12, 29292.0], [1.60283268E12, 19469.0], [1.6028337E12, 17182.0], [1.60283208E12, 24775.0], [1.6028331E12, 29107.0], [1.60283178E12, 8464.0], [1.6028334E12, 24000.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60283346E12, 21948.0], [1.60283184E12, 17984.0], [1.60283286E12, 23082.0], [1.60283316E12, 28976.0], [1.60283196E12, 24825.0], [1.60283256E12, 17596.0], [1.60283358E12, 18932.0], [1.60283226E12, 28729.0], [1.60283172E12, 3225.0], [1.60283232E12, 28744.0], [1.60283334E12, 28788.0], [1.60283202E12, 22527.0], [1.60283364E12, 16948.0], [1.60283274E12, 18462.0], [1.60283214E12, 29200.0], [1.60283304E12, 26857.0], [1.60283244E12, 25651.0], [1.6028322E12, 29182.0], [1.6028325E12, 19320.0], [1.6028319E12, 23898.0], [1.6028328E12, 17589.0], [1.60283322E12, 27411.0], [1.60283352E12, 20675.0], [1.60283262E12, 17880.0], [1.60283292E12, 22374.0], [1.60283298E12, 25723.0], [1.60283328E12, 28262.0], [1.60283238E12, 29292.0], [1.60283268E12, 19469.0], [1.6028337E12, 17182.0], [1.60283208E12, 24775.0], [1.6028331E12, 29107.0], [1.60283178E12, 8464.0], [1.6028334E12, 24000.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60283346E12, 21948.0], [1.60283184E12, 17984.0], [1.60283286E12, 23082.0], [1.60283316E12, 28976.0], [1.60283196E12, 24825.0], [1.60283256E12, 17596.0], [1.60283358E12, 18932.0], [1.60283226E12, 28729.0], [1.60283172E12, 3225.0], [1.60283232E12, 28744.0], [1.60283334E12, 28788.0], [1.60283202E12, 22527.0], [1.60283364E12, 16948.0], [1.60283274E12, 18462.0], [1.60283214E12, 29200.0], [1.60283304E12, 26857.0], [1.60283244E12, 25651.0], [1.6028322E12, 29182.0], [1.6028325E12, 19320.0], [1.6028319E12, 23898.0], [1.6028328E12, 17589.0], [1.60283322E12, 27411.0], [1.60283352E12, 20675.0], [1.60283262E12, 17880.0], [1.60283292E12, 22374.0], [1.60283298E12, 25723.0], [1.60283328E12, 28262.0], [1.60283238E12, 29292.0], [1.60283268E12, 19469.0], [1.6028337E12, 17182.0], [1.60283208E12, 24775.0], [1.6028331E12, 29107.0], [1.60283178E12, 8464.0], [1.6028334E12, 24000.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60283346E12, 25338.0], [1.60283184E12, 19989.5], [1.60283286E12, 26457.0], [1.60283316E12, 29334.0], [1.60283196E12, 30812.0], [1.60283256E12, 19401.0], [1.60283358E12, 23720.5], [1.60283226E12, 29373.0], [1.60283172E12, 4731.5], [1.60283232E12, 29340.0], [1.60283334E12, 29584.5], [1.60283202E12, 24769.0], [1.60283364E12, 26731.0], [1.60283274E12, 20162.5], [1.60283214E12, 29946.5], [1.60283304E12, 29477.0], [1.60283244E12, 28412.5], [1.6028322E12, 29788.0], [1.6028325E12, 25341.5], [1.6028319E12, 27339.0], [1.6028328E12, 18306.0], [1.60283322E12, 28414.0], [1.60283352E12, 22476.0], [1.60283262E12, 22943.0], [1.60283292E12, 24318.0], [1.60283298E12, 36062.0], [1.60283328E12, 29447.0], [1.60283238E12, 30041.5], [1.60283268E12, 23753.5], [1.6028337E12, 17357.0], [1.60283208E12, 29558.5], [1.6028331E12, 29792.0], [1.60283178E12, 25731.5], [1.6028334E12, 27780.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028337E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27274.0, "minX": 1.0, "maxY": 27274.0, "series": [{"data": [[1.0, 27274.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27274.0, "minX": 1.0, "maxY": 27274.0, "series": [{"data": [[1.0, 27274.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60283172E12, "maxY": 0.5, "series": [{"data": [[1.60283346E12, 0.4166666666666667], [1.60283184E12, 0.5], [1.60283286E12, 0.4], [1.60283316E12, 0.35], [1.60283196E12, 0.36666666666666664], [1.60283256E12, 0.5], [1.60283358E12, 0.36666666666666664], [1.60283226E12, 0.35], [1.60283172E12, 0.2], [1.60283232E12, 0.3333333333333333], [1.60283334E12, 0.3333333333333333], [1.60283202E12, 0.4], [1.60283364E12, 0.4], [1.60283274E12, 0.4666666666666667], [1.60283214E12, 0.3333333333333333], [1.60283304E12, 0.3333333333333333], [1.60283244E12, 0.36666666666666664], [1.6028322E12, 0.3333333333333333], [1.6028325E12, 0.43333333333333335], [1.6028319E12, 0.25], [1.6028328E12, 0.4166666666666667], [1.60283322E12, 0.35], [1.60283352E12, 0.45], [1.60283262E12, 0.38333333333333336], [1.60283292E12, 0.36666666666666664], [1.60283298E12, 0.3], [1.60283328E12, 0.35], [1.60283238E12, 0.3333333333333333], [1.60283268E12, 0.43333333333333335], [1.60283208E12, 0.3333333333333333], [1.6028331E12, 0.3333333333333333], [1.60283178E12, 0.4], [1.6028334E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60283364E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60283172E12, "maxY": 0.5, "series": [{"data": [[1.60283346E12, 0.4166666666666667], [1.60283184E12, 0.5], [1.60283286E12, 0.4], [1.60283316E12, 0.35], [1.60283196E12, 0.36666666666666664], [1.60283256E12, 0.5], [1.60283358E12, 0.36666666666666664], [1.60283226E12, 0.35], [1.60283172E12, 0.03333333333333333], [1.60283232E12, 0.3333333333333333], [1.60283334E12, 0.3333333333333333], [1.60283202E12, 0.4], [1.60283364E12, 0.43333333333333335], [1.60283274E12, 0.4666666666666667], [1.60283214E12, 0.3333333333333333], [1.60283304E12, 0.3333333333333333], [1.60283244E12, 0.36666666666666664], [1.6028322E12, 0.3333333333333333], [1.6028325E12, 0.43333333333333335], [1.6028319E12, 0.25], [1.6028328E12, 0.4166666666666667], [1.60283322E12, 0.35], [1.60283352E12, 0.45], [1.60283262E12, 0.38333333333333336], [1.60283292E12, 0.36666666666666664], [1.60283298E12, 0.3], [1.60283328E12, 0.35], [1.60283238E12, 0.3333333333333333], [1.60283268E12, 0.43333333333333335], [1.6028337E12, 0.13333333333333333], [1.60283208E12, 0.3333333333333333], [1.6028331E12, 0.3333333333333333], [1.60283178E12, 0.4], [1.6028334E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6028337E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60283172E12, "maxY": 0.5, "series": [{"data": [[1.60283346E12, 0.4166666666666667], [1.60283184E12, 0.5], [1.60283286E12, 0.4], [1.60283316E12, 0.35], [1.60283196E12, 0.36666666666666664], [1.60283256E12, 0.5], [1.60283358E12, 0.36666666666666664], [1.60283226E12, 0.35], [1.60283172E12, 0.03333333333333333], [1.60283232E12, 0.3333333333333333], [1.60283334E12, 0.3333333333333333], [1.60283202E12, 0.4], [1.60283364E12, 0.43333333333333335], [1.60283274E12, 0.4666666666666667], [1.60283214E12, 0.3333333333333333], [1.60283304E12, 0.3333333333333333], [1.60283244E12, 0.36666666666666664], [1.6028322E12, 0.3333333333333333], [1.6028325E12, 0.43333333333333335], [1.6028319E12, 0.25], [1.6028328E12, 0.4166666666666667], [1.60283322E12, 0.35], [1.60283352E12, 0.45], [1.60283262E12, 0.38333333333333336], [1.60283292E12, 0.36666666666666664], [1.60283298E12, 0.3], [1.60283328E12, 0.35], [1.60283238E12, 0.3333333333333333], [1.60283268E12, 0.43333333333333335], [1.6028337E12, 0.13333333333333333], [1.60283208E12, 0.3333333333333333], [1.6028331E12, 0.3333333333333333], [1.60283178E12, 0.4], [1.6028334E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028337E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60283172E12, "maxY": 0.5, "series": [{"data": [[1.60283346E12, 0.4166666666666667], [1.60283184E12, 0.5], [1.60283286E12, 0.4], [1.60283316E12, 0.35], [1.60283196E12, 0.36666666666666664], [1.60283256E12, 0.5], [1.60283358E12, 0.36666666666666664], [1.60283226E12, 0.35], [1.60283172E12, 0.03333333333333333], [1.60283232E12, 0.3333333333333333], [1.60283334E12, 0.3333333333333333], [1.60283202E12, 0.4], [1.60283364E12, 0.43333333333333335], [1.60283274E12, 0.4666666666666667], [1.60283214E12, 0.3333333333333333], [1.60283304E12, 0.3333333333333333], [1.60283244E12, 0.36666666666666664], [1.6028322E12, 0.3333333333333333], [1.6028325E12, 0.43333333333333335], [1.6028319E12, 0.25], [1.6028328E12, 0.4166666666666667], [1.60283322E12, 0.35], [1.60283352E12, 0.45], [1.60283262E12, 0.38333333333333336], [1.60283292E12, 0.36666666666666664], [1.60283298E12, 0.3], [1.60283328E12, 0.35], [1.60283238E12, 0.3333333333333333], [1.60283268E12, 0.43333333333333335], [1.6028337E12, 0.13333333333333333], [1.60283208E12, 0.3333333333333333], [1.6028331E12, 0.3333333333333333], [1.60283178E12, 0.4], [1.6028334E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6028337E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

