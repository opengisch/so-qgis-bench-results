/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3132.0, "minX": 0.0, "maxY": 43789.0, "series": [{"data": [[0.0, 3132.0], [0.1, 3132.0], [0.2, 6068.0], [0.3, 8217.0], [0.4, 8217.0], [0.5, 10913.0], [0.6, 13408.0], [0.7, 15770.0], [0.8, 15770.0], [0.9, 16818.0], [1.0, 16835.0], [1.1, 16849.0], [1.2, 16849.0], [1.3, 16853.0], [1.4, 16853.0], [1.5, 16861.0], [1.6, 16861.0], [1.7, 16891.0], [1.8, 16894.0], [1.9, 16894.0], [2.0, 16927.0], [2.1, 16950.0], [2.2, 16959.0], [2.3, 16959.0], [2.4, 16964.0], [2.5, 16975.0], [2.6, 17033.0], [2.7, 17033.0], [2.8, 17044.0], [2.9, 17049.0], [3.0, 17062.0], [3.1, 17062.0], [3.2, 17063.0], [3.3, 17102.0], [3.4, 17102.0], [3.5, 17141.0], [3.6, 17179.0], [3.7, 17226.0], [3.8, 17226.0], [3.9, 17228.0], [4.0, 17238.0], [4.1, 17246.0], [4.2, 17246.0], [4.3, 17248.0], [4.4, 17251.0], [4.5, 17263.0], [4.6, 17263.0], [4.7, 17264.0], [4.8, 17280.0], [4.9, 17291.0], [5.0, 17291.0], [5.1, 17300.0], [5.2, 17314.0], [5.3, 17314.0], [5.4, 17325.0], [5.5, 17340.0], [5.6, 17342.0], [5.7, 17342.0], [5.8, 17351.0], [5.9, 17454.0], [6.0, 17492.0], [6.1, 17492.0], [6.2, 17493.0], [6.3, 17526.0], [6.4, 17528.0], [6.5, 17528.0], [6.6, 17610.0], [6.7, 17627.0], [6.8, 17627.0], [6.9, 17642.0], [7.0, 17646.0], [7.1, 17678.0], [7.2, 17678.0], [7.3, 17692.0], [7.4, 17714.0], [7.5, 17727.0], [7.6, 17727.0], [7.7, 17756.0], [7.8, 17759.0], [7.9, 17769.0], [8.0, 17769.0], [8.1, 17772.0], [8.2, 17798.0], [8.3, 17802.0], [8.4, 17802.0], [8.5, 17822.0], [8.6, 17870.0], [8.7, 17870.0], [8.8, 17883.0], [8.9, 17893.0], [9.0, 17980.0], [9.1, 17980.0], [9.2, 17982.0], [9.3, 18033.0], [9.4, 18060.0], [9.5, 18060.0], [9.6, 18063.0], [9.7, 18067.0], [9.8, 18131.0], [9.9, 18131.0], [10.0, 18251.0], [10.1, 18330.0], [10.2, 18330.0], [10.3, 18380.0], [10.4, 18420.0], [10.5, 18637.0], [10.6, 18637.0], [10.7, 18909.0], [10.8, 18938.0], [10.9, 18945.0], [11.0, 18945.0], [11.1, 19072.0], [11.2, 19086.0], [11.3, 19097.0], [11.4, 19097.0], [11.5, 19104.0], [11.6, 19114.0], [11.7, 19114.0], [11.8, 19136.0], [11.9, 19148.0], [12.0, 19174.0], [12.1, 19174.0], [12.2, 19222.0], [12.3, 19225.0], [12.4, 19247.0], [12.5, 19247.0], [12.6, 19305.0], [12.7, 19311.0], [12.8, 19338.0], [12.9, 19338.0], [13.0, 19366.0], [13.1, 19368.0], [13.2, 19372.0], [13.3, 19372.0], [13.4, 19465.0], [13.5, 19483.0], [13.6, 19483.0], [13.7, 19488.0], [13.8, 19555.0], [13.9, 19608.0], [14.0, 19608.0], [14.1, 19625.0], [14.2, 19650.0], [14.3, 19697.0], [14.4, 19697.0], [14.5, 19732.0], [14.6, 19776.0], [14.7, 19801.0], [14.8, 19801.0], [14.9, 19864.0], [15.0, 19900.0], [15.1, 19900.0], [15.2, 19908.0], [15.3, 19913.0], [15.4, 19936.0], [15.5, 19936.0], [15.6, 19939.0], [15.7, 19970.0], [15.8, 20059.0], [15.9, 20059.0], [16.0, 20147.0], [16.1, 20281.0], [16.2, 20402.0], [16.3, 20402.0], [16.4, 20434.0], [16.5, 20456.0], [16.6, 20477.0], [16.7, 20477.0], [16.8, 20518.0], [16.9, 20631.0], [17.0, 20631.0], [17.1, 20655.0], [17.2, 20715.0], [17.3, 20722.0], [17.4, 20722.0], [17.5, 20724.0], [17.6, 20789.0], [17.7, 20847.0], [17.8, 20847.0], [17.9, 20988.0], [18.0, 21050.0], [18.1, 21115.0], [18.2, 21115.0], [18.3, 21128.0], [18.4, 21141.0], [18.5, 21141.0], [18.6, 21160.0], [18.7, 21213.0], [18.8, 21216.0], [18.9, 21216.0], [19.0, 21248.0], [19.1, 21271.0], [19.2, 21279.0], [19.3, 21279.0], [19.4, 21369.0], [19.5, 21384.0], [19.6, 21391.0], [19.7, 21391.0], [19.8, 21392.0], [19.9, 21422.0], [20.0, 21474.0], [20.1, 21474.0], [20.2, 21515.0], [20.3, 21547.0], [20.4, 21547.0], [20.5, 21613.0], [20.6, 21658.0], [20.7, 21682.0], [20.8, 21682.0], [20.9, 21691.0], [21.0, 21706.0], [21.1, 21739.0], [21.2, 21739.0], [21.3, 21798.0], [21.4, 21817.0], [21.5, 21835.0], [21.6, 21835.0], [21.7, 21854.0], [21.8, 21884.0], [21.9, 21884.0], [22.0, 21902.0], [22.1, 21908.0], [22.2, 21908.0], [22.3, 21908.0], [22.4, 21920.0], [22.5, 21934.0], [22.6, 21966.0], [22.7, 21966.0], [22.8, 22018.0], [22.9, 22031.0], [23.0, 22040.0], [23.1, 22040.0], [23.2, 22060.0], [23.3, 22061.0], [23.4, 22061.0], [23.5, 22090.0], [23.6, 22147.0], [23.7, 22192.0], [23.8, 22192.0], [23.9, 22204.0], [24.0, 22206.0], [24.1, 22278.0], [24.2, 22278.0], [24.3, 22495.0], [24.4, 22544.0], [24.5, 22610.0], [24.6, 22610.0], [24.7, 22621.0], [24.8, 22640.0], [24.9, 22647.0], [25.0, 22647.0], [25.1, 22704.0], [25.2, 22769.0], [25.3, 22769.0], [25.4, 22807.0], [25.5, 22828.0], [25.6, 22843.0], [25.7, 22843.0], [25.8, 22848.0], [25.9, 22860.0], [26.0, 22883.0], [26.1, 22883.0], [26.2, 22887.0], [26.3, 22887.0], [26.4, 22904.0], [26.5, 22904.0], [26.6, 22909.0], [26.7, 22978.0], [26.8, 22978.0], [26.9, 22979.0], [27.0, 22985.0], [27.1, 22998.0], [27.2, 22998.0], [27.3, 23009.0], [27.4, 23043.0], [27.5, 23063.0], [27.6, 23063.0], [27.7, 23064.0], [27.8, 23064.0], [27.9, 23079.0], [28.0, 23079.0], [28.1, 23088.0], [28.2, 23096.0], [28.3, 23116.0], [28.4, 23116.0], [28.5, 23138.0], [28.6, 23166.0], [28.7, 23166.0], [28.8, 23178.0], [28.9, 23186.0], [29.0, 23197.0], [29.1, 23197.0], [29.2, 23211.0], [29.3, 23221.0], [29.4, 23277.0], [29.5, 23277.0], [29.6, 23280.0], [29.7, 23304.0], [29.8, 23325.0], [29.9, 23325.0], [30.0, 23328.0], [30.1, 23335.0], [30.2, 23335.0], [30.3, 23363.0], [30.4, 23431.0], [30.5, 23441.0], [30.6, 23441.0], [30.7, 23460.0], [30.8, 23468.0], [30.9, 23527.0], [31.0, 23527.0], [31.1, 23546.0], [31.2, 23563.0], [31.3, 23571.0], [31.4, 23571.0], [31.5, 23571.0], [31.6, 23654.0], [31.7, 23654.0], [31.8, 23679.0], [31.9, 23679.0], [32.0, 23688.0], [32.1, 23688.0], [32.2, 23695.0], [32.3, 23715.0], [32.4, 23722.0], [32.5, 23722.0], [32.6, 23727.0], [32.7, 23740.0], [32.8, 23746.0], [32.9, 23746.0], [33.0, 23750.0], [33.1, 23777.0], [33.2, 23794.0], [33.3, 23794.0], [33.4, 23802.0], [33.5, 23809.0], [33.6, 23809.0], [33.7, 23810.0], [33.8, 23824.0], [33.9, 23837.0], [34.0, 23837.0], [34.1, 23858.0], [34.2, 23871.0], [34.3, 23892.0], [34.4, 23892.0], [34.5, 23901.0], [34.6, 23909.0], [34.7, 23915.0], [34.8, 23915.0], [34.9, 23926.0], [35.0, 23940.0], [35.1, 23940.0], [35.2, 23955.0], [35.3, 23987.0], [35.4, 23998.0], [35.5, 23998.0], [35.6, 24015.0], [35.7, 24018.0], [35.8, 24021.0], [35.9, 24021.0], [36.0, 24041.0], [36.1, 24064.0], [36.2, 24067.0], [36.3, 24067.0], [36.4, 24125.0], [36.5, 24132.0], [36.6, 24157.0], [36.7, 24157.0], [36.8, 24180.0], [36.9, 24209.0], [37.0, 24209.0], [37.1, 24222.0], [37.2, 24240.0], [37.3, 24250.0], [37.4, 24250.0], [37.5, 24268.0], [37.6, 24289.0], [37.7, 24349.0], [37.8, 24349.0], [37.9, 24350.0], [38.0, 24359.0], [38.1, 24377.0], [38.2, 24377.0], [38.3, 24413.0], [38.4, 24448.0], [38.5, 24448.0], [38.6, 24505.0], [38.7, 24510.0], [38.8, 24525.0], [38.9, 24525.0], [39.0, 24571.0], [39.1, 24576.0], [39.2, 24591.0], [39.3, 24591.0], [39.4, 24599.0], [39.5, 24622.0], [39.6, 24655.0], [39.7, 24655.0], [39.8, 24718.0], [39.9, 24745.0], [40.0, 24761.0], [40.1, 24761.0], [40.2, 24777.0], [40.3, 24788.0], [40.4, 24788.0], [40.5, 24823.0], [40.6, 24826.0], [40.7, 24905.0], [40.8, 24905.0], [40.9, 24944.0], [41.0, 25053.0], [41.1, 25070.0], [41.2, 25070.0], [41.3, 25096.0], [41.4, 25140.0], [41.5, 25160.0], [41.6, 25160.0], [41.7, 25177.0], [41.8, 25183.0], [41.9, 25183.0], [42.0, 25200.0], [42.1, 25221.0], [42.2, 25290.0], [42.3, 25290.0], [42.4, 25294.0], [42.5, 25305.0], [42.6, 25311.0], [42.7, 25311.0], [42.8, 25337.0], [42.9, 25337.0], [43.0, 25338.0], [43.1, 25338.0], [43.2, 25348.0], [43.3, 25367.0], [43.4, 25367.0], [43.5, 25432.0], [43.6, 25433.0], [43.7, 25442.0], [43.8, 25442.0], [43.9, 25460.0], [44.0, 25469.0], [44.1, 25482.0], [44.2, 25482.0], [44.3, 25483.0], [44.4, 25506.0], [44.5, 25515.0], [44.6, 25515.0], [44.7, 25522.0], [44.8, 25539.0], [44.9, 25568.0], [45.0, 25568.0], [45.1, 25568.0], [45.2, 25577.0], [45.3, 25577.0], [45.4, 25579.0], [45.5, 25586.0], [45.6, 25594.0], [45.7, 25594.0], [45.8, 25624.0], [45.9, 25654.0], [46.0, 25682.0], [46.1, 25682.0], [46.2, 25694.0], [46.3, 25708.0], [46.4, 25708.0], [46.5, 25708.0], [46.6, 25773.0], [46.7, 25790.0], [46.8, 25790.0], [46.9, 25802.0], [47.0, 25858.0], [47.1, 25915.0], [47.2, 25915.0], [47.3, 25917.0], [47.4, 25924.0], [47.5, 25986.0], [47.6, 25986.0], [47.7, 26029.0], [47.8, 26042.0], [47.9, 26072.0], [48.0, 26072.0], [48.1, 26087.0], [48.2, 26087.0], [48.3, 26094.0], [48.4, 26094.0], [48.5, 26097.0], [48.6, 26111.0], [48.7, 26111.0], [48.8, 26116.0], [48.9, 26125.0], [49.0, 26145.0], [49.1, 26145.0], [49.2, 26145.0], [49.3, 26235.0], [49.4, 26237.0], [49.5, 26237.0], [49.6, 26325.0], [49.7, 26337.0], [49.8, 26494.0], [49.9, 26494.0], [50.0, 26500.0], [50.1, 26544.0], [50.2, 26544.0], [50.3, 26587.0], [50.4, 26635.0], [50.5, 26645.0], [50.6, 26645.0], [50.7, 26646.0], [50.8, 26675.0], [50.9, 26687.0], [51.0, 26687.0], [51.1, 26732.0], [51.2, 26758.0], [51.3, 26774.0], [51.4, 26774.0], [51.5, 26790.0], [51.6, 26807.0], [51.7, 26807.0], [51.8, 26817.0], [51.9, 26857.0], [52.0, 26902.0], [52.1, 26902.0], [52.2, 26917.0], [52.3, 26941.0], [52.4, 26944.0], [52.5, 26944.0], [52.6, 26953.0], [52.7, 26982.0], [52.8, 27027.0], [52.9, 27027.0], [53.0, 27042.0], [53.1, 27051.0], [53.2, 27065.0], [53.3, 27065.0], [53.4, 27087.0], [53.5, 27136.0], [53.6, 27136.0], [53.7, 27180.0], [53.8, 27208.0], [53.9, 27224.0], [54.0, 27224.0], [54.1, 27268.0], [54.2, 27273.0], [54.3, 27296.0], [54.4, 27296.0], [54.5, 27309.0], [54.6, 27314.0], [54.7, 27322.0], [54.8, 27322.0], [54.9, 27343.0], [55.0, 27351.0], [55.1, 27351.0], [55.2, 27363.0], [55.3, 27374.0], [55.4, 27382.0], [55.5, 27382.0], [55.6, 27421.0], [55.7, 27441.0], [55.8, 27454.0], [55.9, 27454.0], [56.0, 27466.0], [56.1, 27471.0], [56.2, 27509.0], [56.3, 27509.0], [56.4, 27534.0], [56.5, 27560.0], [56.6, 27581.0], [56.7, 27581.0], [56.8, 27583.0], [56.9, 27630.0], [57.0, 27630.0], [57.1, 27652.0], [57.2, 27665.0], [57.3, 27670.0], [57.4, 27670.0], [57.5, 27681.0], [57.6, 27695.0], [57.7, 27707.0], [57.8, 27707.0], [57.9, 27708.0], [58.0, 27745.0], [58.1, 27780.0], [58.2, 27780.0], [58.3, 27787.0], [58.4, 27789.0], [58.5, 27789.0], [58.6, 27833.0], [58.7, 27856.0], [58.8, 27865.0], [58.9, 27865.0], [59.0, 27868.0], [59.1, 27886.0], [59.2, 27917.0], [59.3, 27917.0], [59.4, 27935.0], [59.5, 27943.0], [59.6, 27946.0], [59.7, 27946.0], [59.8, 27958.0], [59.9, 27985.0], [60.0, 27986.0], [60.1, 27986.0], [60.2, 28015.0], [60.3, 28032.0], [60.4, 28032.0], [60.5, 28048.0], [60.6, 28057.0], [60.7, 28073.0], [60.8, 28073.0], [60.9, 28090.0], [61.0, 28093.0], [61.1, 28136.0], [61.2, 28136.0], [61.3, 28139.0], [61.4, 28192.0], [61.5, 28197.0], [61.6, 28197.0], [61.7, 28208.0], [61.8, 28216.0], [61.9, 28216.0], [62.0, 28224.0], [62.1, 28226.0], [62.2, 28254.0], [62.3, 28254.0], [62.4, 28258.0], [62.5, 28267.0], [62.6, 28273.0], [62.7, 28273.0], [62.8, 28298.0], [62.9, 28300.0], [63.0, 28301.0], [63.1, 28301.0], [63.2, 28313.0], [63.3, 28321.0], [63.4, 28321.0], [63.5, 28328.0], [63.6, 28342.0], [63.7, 28365.0], [63.8, 28365.0], [63.9, 28366.0], [64.0, 28366.0], [64.1, 28370.0], [64.2, 28370.0], [64.3, 28383.0], [64.4, 28385.0], [64.5, 28391.0], [64.6, 28391.0], [64.7, 28394.0], [64.8, 28401.0], [64.9, 28402.0], [65.0, 28402.0], [65.1, 28405.0], [65.2, 28408.0], [65.3, 28408.0], [65.4, 28414.0], [65.5, 28422.0], [65.6, 28425.0], [65.7, 28425.0], [65.8, 28429.0], [65.9, 28440.0], [66.0, 28444.0], [66.1, 28444.0], [66.2, 28451.0], [66.3, 28460.0], [66.4, 28461.0], [66.5, 28461.0], [66.6, 28462.0], [66.7, 28466.0], [66.8, 28466.0], [66.9, 28473.0], [67.0, 28474.0], [67.1, 28475.0], [67.2, 28475.0], [67.3, 28477.0], [67.4, 28490.0], [67.5, 28494.0], [67.6, 28494.0], [67.7, 28496.0], [67.8, 28497.0], [67.9, 28519.0], [68.0, 28519.0], [68.1, 28525.0], [68.2, 28526.0], [68.3, 28538.0], [68.4, 28538.0], [68.5, 28538.0], [68.6, 28539.0], [68.7, 28539.0], [68.8, 28542.0], [68.9, 28550.0], [69.0, 28554.0], [69.1, 28554.0], [69.2, 28560.0], [69.3, 28567.0], [69.4, 28571.0], [69.5, 28571.0], [69.6, 28573.0], [69.7, 28573.0], [69.8, 28576.0], [69.9, 28576.0], [70.0, 28578.0], [70.1, 28581.0], [70.2, 28581.0], [70.3, 28581.0], [70.4, 28581.0], [70.5, 28584.0], [70.6, 28584.0], [70.7, 28585.0], [70.8, 28586.0], [70.9, 28586.0], [71.0, 28586.0], [71.1, 28589.0], [71.2, 28589.0], [71.3, 28592.0], [71.4, 28592.0], [71.5, 28593.0], [71.6, 28594.0], [71.7, 28594.0], [71.8, 28596.0], [71.9, 28596.0], [72.0, 28598.0], [72.1, 28598.0], [72.2, 28601.0], [72.3, 28605.0], [72.4, 28607.0], [72.5, 28607.0], [72.6, 28609.0], [72.7, 28610.0], [72.8, 28611.0], [72.9, 28611.0], [73.0, 28613.0], [73.1, 28613.0], [73.2, 28626.0], [73.3, 28626.0], [73.4, 28626.0], [73.5, 28630.0], [73.6, 28630.0], [73.7, 28634.0], [73.8, 28634.0], [73.9, 28636.0], [74.0, 28636.0], [74.1, 28638.0], [74.2, 28640.0], [74.3, 28644.0], [74.4, 28644.0], [74.5, 28655.0], [74.6, 28656.0], [74.7, 28665.0], [74.8, 28665.0], [74.9, 28665.0], [75.0, 28669.0], [75.1, 28669.0], [75.2, 28674.0], [75.3, 28675.0], [75.4, 28679.0], [75.5, 28679.0], [75.6, 28680.0], [75.7, 28687.0], [75.8, 28688.0], [75.9, 28688.0], [76.0, 28695.0], [76.1, 28705.0], [76.2, 28706.0], [76.3, 28706.0], [76.4, 28708.0], [76.5, 28714.0], [76.6, 28715.0], [76.7, 28715.0], [76.8, 28716.0], [76.9, 28716.0], [77.0, 28716.0], [77.1, 28716.0], [77.2, 28725.0], [77.3, 28725.0], [77.4, 28725.0], [77.5, 28725.0], [77.6, 28726.0], [77.7, 28732.0], [77.8, 28732.0], [77.9, 28734.0], [78.0, 28738.0], [78.1, 28739.0], [78.2, 28739.0], [78.3, 28742.0], [78.4, 28743.0], [78.5, 28743.0], [78.6, 28749.0], [78.7, 28750.0], [78.8, 28753.0], [78.9, 28753.0], [79.0, 28754.0], [79.1, 28755.0], [79.2, 28755.0], [79.3, 28755.0], [79.4, 28762.0], [79.5, 28770.0], [79.6, 28771.0], [79.7, 28771.0], [79.8, 28773.0], [79.9, 28775.0], [80.0, 28779.0], [80.1, 28779.0], [80.2, 28781.0], [80.3, 28782.0], [80.4, 28782.0], [80.5, 28787.0], [80.6, 28790.0], [80.7, 28804.0], [80.8, 28804.0], [80.9, 28805.0], [81.0, 28814.0], [81.1, 28820.0], [81.2, 28820.0], [81.3, 28823.0], [81.4, 28823.0], [81.5, 28824.0], [81.6, 28824.0], [81.7, 28826.0], [81.8, 28842.0], [81.9, 28842.0], [82.0, 28847.0], [82.1, 28864.0], [82.2, 28869.0], [82.3, 28869.0], [82.4, 28870.0], [82.5, 28874.0], [82.6, 28888.0], [82.7, 28888.0], [82.8, 28890.0], [82.9, 28894.0], [83.0, 28895.0], [83.1, 28895.0], [83.2, 28895.0], [83.3, 28896.0], [83.4, 28896.0], [83.5, 28897.0], [83.6, 28898.0], [83.7, 28910.0], [83.8, 28910.0], [83.9, 28910.0], [84.0, 28912.0], [84.1, 28912.0], [84.2, 28912.0], [84.3, 28912.0], [84.4, 28915.0], [84.5, 28916.0], [84.6, 28916.0], [84.7, 28920.0], [84.8, 28922.0], [84.9, 28935.0], [85.0, 28935.0], [85.1, 28949.0], [85.2, 28959.0], [85.3, 28959.0], [85.4, 28960.0], [85.5, 28968.0], [85.6, 28969.0], [85.7, 28969.0], [85.8, 28971.0], [85.9, 28971.0], [86.0, 28972.0], [86.1, 28972.0], [86.2, 28977.0], [86.3, 28980.0], [86.4, 28981.0], [86.5, 28981.0], [86.6, 28992.0], [86.7, 28993.0], [86.8, 28993.0], [86.9, 28996.0], [87.0, 28997.0], [87.1, 29004.0], [87.2, 29004.0], [87.3, 29016.0], [87.4, 29027.0], [87.5, 29028.0], [87.6, 29028.0], [87.7, 29028.0], [87.8, 29031.0], [87.9, 29044.0], [88.0, 29044.0], [88.1, 29046.0], [88.2, 29047.0], [88.3, 29049.0], [88.4, 29049.0], [88.5, 29069.0], [88.6, 29077.0], [88.7, 29077.0], [88.8, 29079.0], [88.9, 29092.0], [89.0, 29093.0], [89.1, 29093.0], [89.2, 29094.0], [89.3, 29099.0], [89.4, 29109.0], [89.5, 29109.0], [89.6, 29115.0], [89.7, 29121.0], [89.8, 29122.0], [89.9, 29122.0], [90.0, 29129.0], [90.1, 29140.0], [90.2, 29140.0], [90.3, 29173.0], [90.4, 29189.0], [90.5, 29201.0], [90.6, 29201.0], [90.7, 29213.0], [90.8, 29230.0], [90.9, 29246.0], [91.0, 29246.0], [91.1, 29246.0], [91.2, 29255.0], [91.3, 29257.0], [91.4, 29257.0], [91.5, 29259.0], [91.6, 29267.0], [91.7, 29267.0], [91.8, 29274.0], [91.9, 29283.0], [92.0, 29308.0], [92.1, 29308.0], [92.2, 29316.0], [92.3, 29324.0], [92.4, 29357.0], [92.5, 29357.0], [92.6, 29549.0], [92.7, 29576.0], [92.8, 29627.0], [92.9, 29627.0], [93.0, 29678.0], [93.1, 29765.0], [93.2, 29881.0], [93.3, 29881.0], [93.4, 29951.0], [93.5, 30037.0], [93.6, 30037.0], [93.7, 30087.0], [93.8, 30320.0], [93.9, 30880.0], [94.0, 30880.0], [94.1, 30912.0], [94.2, 30915.0], [94.3, 31004.0], [94.4, 31004.0], [94.5, 31040.0], [94.6, 31154.0], [94.7, 31207.0], [94.8, 31207.0], [94.9, 31259.0], [95.0, 31676.0], [95.1, 31676.0], [95.2, 31766.0], [95.3, 31787.0], [95.4, 31844.0], [95.5, 31844.0], [95.6, 31887.0], [95.7, 32099.0], [95.8, 32292.0], [95.9, 32292.0], [96.0, 32682.0], [96.1, 33086.0], [96.2, 33253.0], [96.3, 33253.0], [96.4, 33348.0], [96.5, 33511.0], [96.6, 33731.0], [96.7, 33731.0], [96.8, 34431.0], [96.9, 35199.0], [97.0, 35199.0], [97.1, 35741.0], [97.2, 35757.0], [97.3, 35777.0], [97.4, 35777.0], [97.5, 36304.0], [97.6, 36786.0], [97.7, 37313.0], [97.8, 37313.0], [97.9, 38303.0], [98.0, 38463.0], [98.1, 38824.0], [98.2, 38824.0], [98.3, 40550.0], [98.4, 40681.0], [98.5, 40681.0], [98.6, 40898.0], [98.7, 41078.0], [98.8, 41405.0], [98.9, 41405.0], [99.0, 42030.0], [99.1, 42379.0], [99.2, 42506.0], [99.3, 42506.0], [99.4, 42818.0], [99.5, 43184.0], [99.6, 43247.0], [99.7, 43247.0], [99.8, 43321.0], [99.9, 43789.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 34.0, "series": [{"data": [[33500.0, 1.0], [33300.0, 1.0], [33700.0, 1.0], [35700.0, 3.0], [36700.0, 1.0], [36300.0, 1.0], [35100.0, 1.0], [38300.0, 1.0], [37300.0, 1.0], [40500.0, 1.0], [42300.0, 1.0], [42500.0, 1.0], [43700.0, 1.0], [43100.0, 1.0], [43300.0, 1.0], [3100.0, 1.0], [6000.0, 1.0], [8200.0, 1.0], [10900.0, 1.0], [13400.0, 1.0], [15700.0, 1.0], [17200.0, 10.0], [16900.0, 5.0], [17400.0, 3.0], [17300.0, 6.0], [16800.0, 8.0], [17000.0, 5.0], [17100.0, 3.0], [18200.0, 1.0], [17900.0, 2.0], [18300.0, 2.0], [18400.0, 1.0], [17700.0, 7.0], [17600.0, 6.0], [17500.0, 2.0], [17800.0, 5.0], [18000.0, 4.0], [18100.0, 1.0], [19300.0, 6.0], [19100.0, 5.0], [19200.0, 3.0], [18900.0, 3.0], [19000.0, 3.0], [19400.0, 3.0], [18600.0, 1.0], [19700.0, 2.0], [20400.0, 4.0], [19800.0, 2.0], [19900.0, 6.0], [19600.0, 4.0], [19500.0, 1.0], [20100.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [20700.0, 4.0], [20900.0, 1.0], [20500.0, 1.0], [21200.0, 5.0], [20600.0, 2.0], [21400.0, 2.0], [21300.0, 4.0], [21500.0, 2.0], [20800.0, 1.0], [21100.0, 4.0], [21000.0, 1.0], [21700.0, 3.0], [22500.0, 1.0], [22000.0, 6.0], [21900.0, 6.0], [21800.0, 4.0], [21600.0, 4.0], [22100.0, 2.0], [22200.0, 3.0], [22400.0, 1.0], [23400.0, 4.0], [23100.0, 6.0], [23300.0, 5.0], [23500.0, 5.0], [22800.0, 8.0], [23000.0, 8.0], [23200.0, 4.0], [22900.0, 6.0], [22600.0, 4.0], [22700.0, 2.0], [24500.0, 7.0], [23700.0, 8.0], [24200.0, 6.0], [23900.0, 8.0], [24000.0, 6.0], [24300.0, 4.0], [24100.0, 4.0], [23800.0, 8.0], [24400.0, 2.0], [23600.0, 5.0], [24800.0, 2.0], [25500.0, 10.0], [25100.0, 4.0], [25400.0, 7.0], [25300.0, 7.0], [25200.0, 4.0], [24700.0, 5.0], [24600.0, 2.0], [24900.0, 2.0], [25000.0, 3.0], [25700.0, 4.0], [25900.0, 4.0], [26000.0, 7.0], [26400.0, 1.0], [25800.0, 2.0], [26100.0, 5.0], [26300.0, 2.0], [26500.0, 3.0], [26600.0, 5.0], [26200.0, 2.0], [25600.0, 4.0], [27400.0, 5.0], [27100.0, 2.0], [27000.0, 5.0], [27500.0, 5.0], [27600.0, 6.0], [26900.0, 6.0], [26800.0, 3.0], [27300.0, 8.0], [26700.0, 4.0], [27200.0, 5.0], [27900.0, 7.0], [28300.0, 14.0], [28100.0, 4.0], [28000.0, 7.0], [28600.0, 29.0], [28500.0, 31.0], [28400.0, 23.0], [28200.0, 9.0], [27700.0, 6.0], [27800.0, 5.0], [28900.0, 25.0], [29200.0, 11.0], [28700.0, 34.0], [28800.0, 22.0], [29100.0, 8.0], [29000.0, 17.0], [29300.0, 4.0], [29600.0, 2.0], [29500.0, 2.0], [29900.0, 1.0], [30300.0, 1.0], [29700.0, 1.0], [29800.0, 1.0], [30000.0, 2.0], [31200.0, 2.0], [31100.0, 1.0], [31000.0, 2.0], [30900.0, 2.0], [30800.0, 1.0], [31600.0, 1.0], [31700.0, 2.0], [32600.0, 1.0], [32200.0, 1.0], [31800.0, 2.0], [32000.0, 1.0], [33200.0, 1.0], [34400.0, 1.0], [33000.0, 1.0], [38400.0, 1.0], [38800.0, 1.0], [40600.0, 1.0], [40800.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [41000.0, 1.0], [41400.0, 1.0], [43200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 43700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.5, "minX": 1.60282332E12, "maxY": 10.0, "series": [{"data": [[1.6028238E12, 10.0], [1.6028241E12, 10.0], [1.6028235E12, 10.0], [1.6028244E12, 10.0], [1.60282368E12, 10.0], [1.6028247E12, 10.0], [1.60282338E12, 10.0], [1.602825E12, 10.0], [1.60282332E12, 10.0], [1.60282392E12, 10.0], [1.60282494E12, 10.0], [1.60282362E12, 10.0], [1.60282524E12, 5.5], [1.60282482E12, 10.0], [1.60282512E12, 10.0], [1.60282422E12, 10.0], [1.60282452E12, 10.0], [1.60282506E12, 10.0], [1.60282344E12, 10.0], [1.60282446E12, 10.0], [1.60282476E12, 10.0], [1.60282434E12, 10.0], [1.60282374E12, 10.0], [1.60282464E12, 10.0], [1.60282404E12, 10.0], [1.60282458E12, 10.0], [1.60282488E12, 10.0], [1.60282398E12, 10.0], [1.60282428E12, 10.0], [1.60282356E12, 10.0], [1.60282416E12, 10.0], [1.60282518E12, 10.0], [1.60282386E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282524E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16818.0, "minX": 1.0, "maxY": 25671.11570247933, "series": [{"data": [[8.0, 17342.0], [4.0, 16818.0], [2.0, 16835.0], [1.0, 17248.0], [9.0, 17340.0], [10.0, 25671.11570247933], [5.0, 17049.0], [6.0, 17179.0], [3.0, 16894.0], [7.0, 17263.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25566.25578231291]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.95, "minX": 1.60282332E12, "maxY": 211390.26666666666, "series": [{"data": [[1.6028238E12, 48748.95], [1.6028241E12, 128700.75], [1.6028235E12, 130920.81666666667], [1.6028244E12, 82760.61666666667], [1.60282368E12, 52339.8], [1.6028247E12, 47772.05], [1.60282338E12, 211390.26666666666], [1.602825E12, 25840.516666666666], [1.60282332E12, 37759.61666666667], [1.60282392E12, 43644.316666666666], [1.60282494E12, 42401.98333333333], [1.60282362E12, 46590.96666666667], [1.60282524E12, 10557.45], [1.60282482E12, 48497.48333333333], [1.60282512E12, 151334.36666666667], [1.60282422E12, 79629.75], [1.60282452E12, 27953.616666666665], [1.60282506E12, 39490.6], [1.60282344E12, 70066.91666666667], [1.60282446E12, 83771.28333333334], [1.60282476E12, 55358.7], [1.60282434E12, 57928.01666666667], [1.60282374E12, 46814.55], [1.60282464E12, 51356.433333333334], [1.60282404E12, 30181.333333333332], [1.60282458E12, 45301.8], [1.60282488E12, 51510.55], [1.60282398E12, 46511.35], [1.60282428E12, 203466.7], [1.60282356E12, 76897.46666666666], [1.60282416E12, 121621.56666666667], [1.60282518E12, 69079.71666666666], [1.60282386E12, 57258.73333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6028238E12, 146.13333333333333], [1.6028241E12, 217.35], [1.6028235E12, 120.48333333333333], [1.6028244E12, 164.78333333333333], [1.60282368E12, 153.43333333333334], [1.6028247E12, 153.43333333333334], [1.60282338E12, 183.83333333333334], [1.602825E12, 175.08333333333334], [1.60282332E12, 21.95], [1.60282392E12, 146.06666666666666], [1.60282494E12, 167.81666666666666], [1.60282362E12, 176.58333333333334], [1.60282524E12, 67.6], [1.60282482E12, 153.43333333333334], [1.60282512E12, 177.26666666666668], [1.60282422E12, 194.01666666666668], [1.60282452E12, 116.88333333333334], [1.60282506E12, 198.9], [1.60282344E12, 215.43333333333334], [1.60282446E12, 198.46666666666667], [1.60282476E12, 161.68333333333334], [1.60282434E12, 215.95], [1.60282374E12, 153.43333333333334], [1.60282464E12, 153.45], [1.60282404E12, 182.48333333333332], [1.60282458E12, 146.13333333333333], [1.60282488E12, 153.4], [1.60282398E12, 153.33333333333334], [1.60282428E12, 190.5], [1.60282356E12, 168.01666666666668], [1.60282416E12, 173.41666666666666], [1.60282518E12, 177.55], [1.60282386E12, 160.98333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282524E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5805.666666666667, "minX": 1.60282332E12, "maxY": 34642.5, "series": [{"data": [[1.6028238E12, 28889.9], [1.6028241E12, 20492.166666666668], [1.6028235E12, 34289.68750000001], [1.6028244E12, 26289.727272727276], [1.60282368E12, 27940.809523809523], [1.6028247E12, 28896.904761904763], [1.60282338E12, 23166.16], [1.602825E12, 24616.875000000004], [1.60282332E12, 5805.666666666667], [1.60282392E12, 28712.6], [1.60282494E12, 27128.78260869565], [1.60282362E12, 25030.79166666667], [1.60282524E12, 17082.899999999998], [1.60282482E12, 28367.85714285714], [1.60282512E12, 23143.879999999997], [1.60282422E12, 22926.428571428576], [1.60282452E12, 34642.5], [1.60282506E12, 22986.444444444445], [1.60282344E12, 19372.966666666667], [1.60282446E12, 23999.7037037037], [1.60282476E12, 27621.31818181818], [1.60282434E12, 18334.838709677424], [1.60282374E12, 28597.95238095238], [1.60282464E12, 28540.619047619042], [1.60282404E12, 25680.52], [1.60282458E12, 29527.45], [1.60282488E12, 28596.571428571428], [1.60282398E12, 28920.80952380952], [1.60282428E12, 23916.26923076923], [1.60282356E12, 28393.347826086952], [1.60282416E12, 22539.666666666668], [1.60282518E12, 25853.32], [1.60282386E12, 28271.727272727272]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282524E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5800.0, "minX": 1.60282332E12, "maxY": 34641.75, "series": [{"data": [[1.6028238E12, 28888.900000000005], [1.6028241E12, 20489.166666666664], [1.6028235E12, 34285.875], [1.6028244E12, 26287.772727272728], [1.60282368E12, 27939.666666666664], [1.6028247E12, 28895.714285714286], [1.60282338E12, 23162.879999999997], [1.602825E12, 24615.708333333336], [1.60282332E12, 5800.0], [1.60282392E12, 28711.450000000004], [1.60282494E12, 27127.782608695652], [1.60282362E12, 25029.91666666667], [1.60282524E12, 17081.0], [1.60282482E12, 28366.476190476194], [1.60282512E12, 23139.84], [1.60282422E12, 22924.071428571428], [1.60282452E12, 34641.75], [1.60282506E12, 22985.25925925926], [1.60282344E12, 19371.433333333334], [1.60282446E12, 23998.222222222223], [1.60282476E12, 27619.90909090909], [1.60282434E12, 18333.290322580648], [1.60282374E12, 28596.809523809527], [1.60282464E12, 28539.42857142857], [1.60282404E12, 25679.280000000006], [1.60282458E12, 29526.200000000004], [1.60282488E12, 28595.190476190477], [1.60282398E12, 28919.428571428572], [1.60282428E12, 23912.346153846152], [1.60282356E12, 28391.608695652176], [1.60282416E12, 22536.41666666667], [1.60282518E12, 25851.279999999995], [1.60282386E12, 28270.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282524E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.10000000000000002, "minX": 1.60282332E12, "maxY": 22.666666666666664, "series": [{"data": [[1.6028238E12, 0.5], [1.6028241E12, 0.36666666666666664], [1.6028235E12, 0.375], [1.6028244E12, 0.6818181818181819], [1.60282368E12, 0.5714285714285716], [1.6028247E12, 0.23809523809523808], [1.60282338E12, 0.5999999999999999], [1.602825E12, 0.45833333333333337], [1.60282332E12, 22.666666666666664], [1.60282392E12, 0.39999999999999997], [1.60282494E12, 0.4782608695652174], [1.60282362E12, 0.33333333333333337], [1.60282524E12, 0.10000000000000002], [1.60282482E12, 0.47619047619047616], [1.60282512E12, 0.4800000000000001], [1.60282422E12, 0.46428571428571447], [1.60282452E12, 0.18749999999999997], [1.60282506E12, 0.40740740740740744], [1.60282344E12, 0.4666666666666667], [1.60282446E12, 0.2962962962962963], [1.60282476E12, 0.5454545454545455], [1.60282434E12, 0.3548387096774194], [1.60282374E12, 0.42857142857142866], [1.60282464E12, 0.7142857142857143], [1.60282404E12, 0.28], [1.60282458E12, 0.7000000000000001], [1.60282488E12, 0.2857142857142857], [1.60282398E12, 0.6190476190476191], [1.60282428E12, 0.42307692307692313], [1.60282356E12, 0.6086956521739131], [1.60282416E12, 0.25], [1.60282518E12, 0.44], [1.60282386E12, 0.31818181818181823]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282524E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3132.0, "minX": 1.60282332E12, "maxY": 43789.0, "series": [{"data": [[1.6028238E12, 29324.0], [1.6028241E12, 25917.0], [1.6028235E12, 43789.0], [1.6028244E12, 31844.0], [1.60282368E12, 29213.0], [1.6028247E12, 29129.0], [1.60282338E12, 27466.0], [1.602825E12, 28301.0], [1.60282332E12, 8217.0], [1.60282392E12, 29115.0], [1.60282494E12, 28771.0], [1.60282362E12, 29765.0], [1.60282524E12, 17342.0], [1.60282482E12, 28949.0], [1.60282512E12, 28584.0], [1.60282422E12, 30912.0], [1.60282452E12, 43321.0], [1.60282506E12, 26687.0], [1.60282344E12, 23940.0], [1.60282446E12, 28057.0], [1.60282476E12, 28898.0], [1.60282434E12, 21474.0], [1.60282374E12, 29230.0], [1.60282464E12, 29255.0], [1.60282404E12, 28920.0], [1.60282458E12, 35199.0], [1.60282488E12, 28754.0], [1.60282398E12, 29092.0], [1.60282428E12, 27886.0], [1.60282356E12, 41078.0], [1.60282416E12, 31154.0], [1.60282518E12, 37313.0], [1.60282386E12, 28749.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6028238E12, 28394.0], [1.6028241E12, 16853.0], [1.6028235E12, 23363.0], [1.6028244E12, 21920.0], [1.60282368E12, 23871.0], [1.6028247E12, 28571.0], [1.60282338E12, 10913.0], [1.602825E12, 21160.0], [1.60282332E12, 3132.0], [1.60282392E12, 27745.0], [1.60282494E12, 23280.0], [1.60282362E12, 22031.0], [1.60282524E12, 16818.0], [1.60282482E12, 27314.0], [1.60282512E12, 18945.0], [1.60282422E12, 17646.0], [1.60282452E12, 23096.0], [1.60282506E12, 20147.0], [1.60282344E12, 16927.0], [1.60282446E12, 21682.0], [1.60282476E12, 26544.0], [1.60282434E12, 16950.0], [1.60282374E12, 28139.0], [1.60282464E12, 28048.0], [1.60282404E12, 22978.0], [1.60282458E12, 25682.0], [1.60282488E12, 28366.0], [1.60282398E12, 28688.0], [1.60282428E12, 19072.0], [1.60282356E12, 24125.0], [1.60282416E12, 17692.0], [1.60282518E12, 16849.0], [1.60282386E12, 27780.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6028238E12, 28394.0], [1.6028241E12, 16853.0], [1.6028235E12, 23363.0], [1.6028244E12, 21920.0], [1.60282368E12, 23871.0], [1.6028247E12, 28571.0], [1.60282338E12, 10913.0], [1.602825E12, 21160.0], [1.60282332E12, 3132.0], [1.60282392E12, 27745.0], [1.60282494E12, 23280.0], [1.60282362E12, 22031.0], [1.60282524E12, 16818.0], [1.60282482E12, 27314.0], [1.60282512E12, 18945.0], [1.60282422E12, 17646.0], [1.60282452E12, 23096.0], [1.60282506E12, 20147.0], [1.60282344E12, 16927.0], [1.60282446E12, 21682.0], [1.60282476E12, 26544.0], [1.60282434E12, 16950.0], [1.60282374E12, 28139.0], [1.60282464E12, 28048.0], [1.60282404E12, 22978.0], [1.60282458E12, 25682.0], [1.60282488E12, 28366.0], [1.60282398E12, 28688.0], [1.60282428E12, 19072.0], [1.60282356E12, 24125.0], [1.60282416E12, 17692.0], [1.60282518E12, 16849.0], [1.60282386E12, 27780.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6028238E12, 28394.0], [1.6028241E12, 16853.0], [1.6028235E12, 23363.0], [1.6028244E12, 21920.0], [1.60282368E12, 23871.0], [1.6028247E12, 28571.0], [1.60282338E12, 10913.0], [1.602825E12, 21160.0], [1.60282332E12, 3132.0], [1.60282392E12, 27745.0], [1.60282494E12, 23280.0], [1.60282362E12, 22031.0], [1.60282524E12, 16818.0], [1.60282482E12, 27314.0], [1.60282512E12, 18945.0], [1.60282422E12, 17646.0], [1.60282452E12, 23096.0], [1.60282506E12, 20147.0], [1.60282344E12, 16927.0], [1.60282446E12, 21682.0], [1.60282476E12, 26544.0], [1.60282434E12, 16950.0], [1.60282374E12, 28139.0], [1.60282464E12, 28048.0], [1.60282404E12, 22978.0], [1.60282458E12, 25682.0], [1.60282488E12, 28366.0], [1.60282398E12, 28688.0], [1.60282428E12, 19072.0], [1.60282356E12, 24125.0], [1.60282416E12, 17692.0], [1.60282518E12, 16849.0], [1.60282386E12, 27780.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6028238E12, 28394.0], [1.6028241E12, 16853.0], [1.6028235E12, 23363.0], [1.6028244E12, 21920.0], [1.60282368E12, 23871.0], [1.6028247E12, 28571.0], [1.60282338E12, 10913.0], [1.602825E12, 21160.0], [1.60282332E12, 3132.0], [1.60282392E12, 27745.0], [1.60282494E12, 23280.0], [1.60282362E12, 22031.0], [1.60282524E12, 16818.0], [1.60282482E12, 27314.0], [1.60282512E12, 18945.0], [1.60282422E12, 17646.0], [1.60282452E12, 23096.0], [1.60282506E12, 20147.0], [1.60282344E12, 16927.0], [1.60282446E12, 21682.0], [1.60282476E12, 26544.0], [1.60282434E12, 16950.0], [1.60282374E12, 28139.0], [1.60282464E12, 28048.0], [1.60282404E12, 22978.0], [1.60282458E12, 25682.0], [1.60282488E12, 28366.0], [1.60282398E12, 28688.0], [1.60282428E12, 19072.0], [1.60282356E12, 24125.0], [1.60282416E12, 17692.0], [1.60282518E12, 16849.0], [1.60282386E12, 27780.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6028238E12, 28891.0], [1.6028241E12, 19169.5], [1.6028235E12, 37110.0], [1.6028244E12, 26079.5], [1.60282368E12, 28640.0], [1.6028247E12, 28897.0], [1.60282338E12, 24826.0], [1.602825E12, 24670.0], [1.60282332E12, 6068.0], [1.60282392E12, 28746.5], [1.60282494E12, 28391.0], [1.60282362E12, 24502.0], [1.60282524E12, 17114.0], [1.60282482E12, 28601.0], [1.60282512E12, 21739.0], [1.60282422E12, 23558.5], [1.60282452E12, 36040.5], [1.60282506E12, 22828.0], [1.60282344E12, 19294.0], [1.60282446E12, 23777.0], [1.60282476E12, 27446.0], [1.60282434E12, 17756.0], [1.60282374E12, 28560.0], [1.60282464E12, 28497.0], [1.60282404E12, 25594.0], [1.60282458E12, 29187.0], [1.60282488E12, 28605.0], [1.60282398E12, 28916.0], [1.60282428E12, 23629.5], [1.60282356E12, 26902.0], [1.60282416E12, 21564.0], [1.60282518E12, 28313.0], [1.60282386E12, 28261.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282524E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26500.0, "minX": 1.0, "maxY": 26500.0, "series": [{"data": [[1.0, 26500.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26499.0, "minX": 1.0, "maxY": 26499.0, "series": [{"data": [[1.0, 26499.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60282332E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6028238E12, 0.3333333333333333], [1.6028241E12, 0.5], [1.6028235E12, 0.26666666666666666], [1.6028244E12, 0.36666666666666664], [1.60282368E12, 0.35], [1.6028247E12, 0.35], [1.60282338E12, 0.4166666666666667], [1.602825E12, 0.4], [1.60282332E12, 0.21666666666666667], [1.60282392E12, 0.3333333333333333], [1.60282494E12, 0.38333333333333336], [1.60282362E12, 0.4], [1.60282482E12, 0.35], [1.60282512E12, 0.4166666666666667], [1.60282422E12, 0.4666666666666667], [1.60282452E12, 0.26666666666666666], [1.60282506E12, 0.45], [1.60282344E12, 0.5], [1.60282446E12, 0.45], [1.60282476E12, 0.36666666666666664], [1.60282434E12, 0.5166666666666667], [1.60282374E12, 0.35], [1.60282464E12, 0.35], [1.60282404E12, 0.4166666666666667], [1.60282458E12, 0.3333333333333333], [1.60282488E12, 0.35], [1.60282398E12, 0.35], [1.60282428E12, 0.43333333333333335], [1.60282356E12, 0.38333333333333336], [1.60282416E12, 0.4], [1.60282518E12, 0.4166666666666667], [1.60282386E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282518E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282332E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6028238E12, 0.3333333333333333], [1.6028241E12, 0.5], [1.6028235E12, 0.26666666666666666], [1.6028244E12, 0.36666666666666664], [1.60282368E12, 0.35], [1.6028247E12, 0.35], [1.60282338E12, 0.4166666666666667], [1.602825E12, 0.4], [1.60282332E12, 0.05], [1.60282392E12, 0.3333333333333333], [1.60282494E12, 0.38333333333333336], [1.60282362E12, 0.4], [1.60282524E12, 0.16666666666666666], [1.60282482E12, 0.35], [1.60282512E12, 0.4166666666666667], [1.60282422E12, 0.4666666666666667], [1.60282452E12, 0.26666666666666666], [1.60282506E12, 0.45], [1.60282344E12, 0.5], [1.60282446E12, 0.45], [1.60282476E12, 0.36666666666666664], [1.60282434E12, 0.5166666666666667], [1.60282374E12, 0.35], [1.60282464E12, 0.35], [1.60282404E12, 0.4166666666666667], [1.60282458E12, 0.3333333333333333], [1.60282488E12, 0.35], [1.60282398E12, 0.35], [1.60282428E12, 0.43333333333333335], [1.60282356E12, 0.38333333333333336], [1.60282416E12, 0.4], [1.60282518E12, 0.4166666666666667], [1.60282386E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60282524E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282332E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6028238E12, 0.3333333333333333], [1.6028241E12, 0.5], [1.6028235E12, 0.26666666666666666], [1.6028244E12, 0.36666666666666664], [1.60282368E12, 0.35], [1.6028247E12, 0.35], [1.60282338E12, 0.4166666666666667], [1.602825E12, 0.4], [1.60282332E12, 0.05], [1.60282392E12, 0.3333333333333333], [1.60282494E12, 0.38333333333333336], [1.60282362E12, 0.4], [1.60282524E12, 0.16666666666666666], [1.60282482E12, 0.35], [1.60282512E12, 0.4166666666666667], [1.60282422E12, 0.4666666666666667], [1.60282452E12, 0.26666666666666666], [1.60282506E12, 0.45], [1.60282344E12, 0.5], [1.60282446E12, 0.45], [1.60282476E12, 0.36666666666666664], [1.60282434E12, 0.5166666666666667], [1.60282374E12, 0.35], [1.60282464E12, 0.35], [1.60282404E12, 0.4166666666666667], [1.60282458E12, 0.3333333333333333], [1.60282488E12, 0.35], [1.60282398E12, 0.35], [1.60282428E12, 0.43333333333333335], [1.60282356E12, 0.38333333333333336], [1.60282416E12, 0.4], [1.60282518E12, 0.4166666666666667], [1.60282386E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282524E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60282332E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6028238E12, 0.3333333333333333], [1.6028241E12, 0.5], [1.6028235E12, 0.26666666666666666], [1.6028244E12, 0.36666666666666664], [1.60282368E12, 0.35], [1.6028247E12, 0.35], [1.60282338E12, 0.4166666666666667], [1.602825E12, 0.4], [1.60282332E12, 0.05], [1.60282392E12, 0.3333333333333333], [1.60282494E12, 0.38333333333333336], [1.60282362E12, 0.4], [1.60282524E12, 0.16666666666666666], [1.60282482E12, 0.35], [1.60282512E12, 0.4166666666666667], [1.60282422E12, 0.4666666666666667], [1.60282452E12, 0.26666666666666666], [1.60282506E12, 0.45], [1.60282344E12, 0.5], [1.60282446E12, 0.45], [1.60282476E12, 0.36666666666666664], [1.60282434E12, 0.5166666666666667], [1.60282374E12, 0.35], [1.60282464E12, 0.35], [1.60282404E12, 0.4166666666666667], [1.60282458E12, 0.3333333333333333], [1.60282488E12, 0.35], [1.60282398E12, 0.35], [1.60282428E12, 0.43333333333333335], [1.60282356E12, 0.38333333333333336], [1.60282416E12, 0.4], [1.60282518E12, 0.4166666666666667], [1.60282386E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60282524E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

