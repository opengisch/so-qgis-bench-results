/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3123.0, "minX": 0.0, "maxY": 44845.0, "series": [{"data": [[0.0, 3123.0], [0.1, 3123.0], [0.2, 6179.0], [0.3, 8677.0], [0.4, 8677.0], [0.5, 11502.0], [0.6, 14268.0], [0.7, 16460.0], [0.8, 16460.0], [0.9, 16534.0], [1.0, 16547.0], [1.1, 16575.0], [1.2, 16575.0], [1.3, 16827.0], [1.4, 16933.0], [1.5, 16992.0], [1.6, 16992.0], [1.7, 17006.0], [1.8, 17012.0], [1.9, 17012.0], [2.0, 17038.0], [2.1, 17063.0], [2.2, 17078.0], [2.3, 17078.0], [2.4, 17082.0], [2.5, 17094.0], [2.6, 17233.0], [2.7, 17233.0], [2.8, 17248.0], [2.9, 17315.0], [3.0, 17396.0], [3.1, 17396.0], [3.2, 17475.0], [3.3, 17504.0], [3.4, 17504.0], [3.5, 17550.0], [3.6, 17584.0], [3.7, 17599.0], [3.8, 17599.0], [3.9, 17608.0], [4.0, 17657.0], [4.1, 17659.0], [4.2, 17659.0], [4.3, 17750.0], [4.4, 17789.0], [4.5, 17823.0], [4.6, 17823.0], [4.7, 17823.0], [4.8, 17843.0], [4.9, 17883.0], [5.0, 17883.0], [5.1, 17885.0], [5.2, 17885.0], [5.3, 17885.0], [5.4, 17887.0], [5.5, 17935.0], [5.6, 17937.0], [5.7, 17937.0], [5.8, 17985.0], [5.9, 17998.0], [6.0, 18037.0], [6.1, 18037.0], [6.2, 18058.0], [6.3, 18069.0], [6.4, 18073.0], [6.5, 18073.0], [6.6, 18087.0], [6.7, 18088.0], [6.8, 18088.0], [6.9, 18116.0], [7.0, 18133.0], [7.1, 18194.0], [7.2, 18194.0], [7.3, 18194.0], [7.4, 18202.0], [7.5, 18203.0], [7.6, 18203.0], [7.7, 18214.0], [7.8, 18222.0], [7.9, 18263.0], [8.0, 18263.0], [8.1, 18277.0], [8.2, 18297.0], [8.3, 18331.0], [8.4, 18331.0], [8.5, 18343.0], [8.6, 18402.0], [8.7, 18402.0], [8.8, 18414.0], [8.9, 18516.0], [9.0, 18534.0], [9.1, 18534.0], [9.2, 18559.0], [9.3, 18560.0], [9.4, 18571.0], [9.5, 18571.0], [9.6, 18700.0], [9.7, 18805.0], [9.8, 18834.0], [9.9, 18834.0], [10.0, 18888.0], [10.1, 18900.0], [10.2, 18900.0], [10.3, 18946.0], [10.4, 18947.0], [10.5, 19010.0], [10.6, 19010.0], [10.7, 19015.0], [10.8, 19177.0], [10.9, 19284.0], [11.0, 19284.0], [11.1, 19304.0], [11.2, 19328.0], [11.3, 19337.0], [11.4, 19337.0], [11.5, 19356.0], [11.6, 19409.0], [11.7, 19409.0], [11.8, 19519.0], [11.9, 19551.0], [12.0, 19552.0], [12.1, 19552.0], [12.2, 19558.0], [12.3, 19573.0], [12.4, 19587.0], [12.5, 19587.0], [12.6, 19640.0], [12.7, 19664.0], [12.8, 19674.0], [12.9, 19674.0], [13.0, 19725.0], [13.1, 19929.0], [13.2, 20002.0], [13.3, 20002.0], [13.4, 20043.0], [13.5, 20094.0], [13.6, 20094.0], [13.7, 20094.0], [13.8, 20111.0], [13.9, 20132.0], [14.0, 20132.0], [14.1, 20179.0], [14.2, 20202.0], [14.3, 20281.0], [14.4, 20281.0], [14.5, 20284.0], [14.6, 20336.0], [14.7, 20364.0], [14.8, 20364.0], [14.9, 20431.0], [15.0, 20465.0], [15.1, 20465.0], [15.2, 20468.0], [15.3, 20473.0], [15.4, 20480.0], [15.5, 20480.0], [15.6, 20567.0], [15.7, 20579.0], [15.8, 20596.0], [15.9, 20596.0], [16.0, 20603.0], [16.1, 20634.0], [16.2, 20650.0], [16.3, 20650.0], [16.4, 20659.0], [16.5, 20715.0], [16.6, 20907.0], [16.7, 20907.0], [16.8, 20934.0], [16.9, 20937.0], [17.0, 20937.0], [17.1, 21130.0], [17.2, 21205.0], [17.3, 21222.0], [17.4, 21222.0], [17.5, 21267.0], [17.6, 21282.0], [17.7, 21288.0], [17.8, 21288.0], [17.9, 21366.0], [18.0, 21391.0], [18.1, 21394.0], [18.2, 21394.0], [18.3, 21438.0], [18.4, 21543.0], [18.5, 21543.0], [18.6, 21565.0], [18.7, 21586.0], [18.8, 21772.0], [18.9, 21772.0], [19.0, 21801.0], [19.1, 21813.0], [19.2, 22021.0], [19.3, 22021.0], [19.4, 22044.0], [19.5, 22096.0], [19.6, 22104.0], [19.7, 22104.0], [19.8, 22119.0], [19.9, 22125.0], [20.0, 22133.0], [20.1, 22133.0], [20.2, 22180.0], [20.3, 22242.0], [20.4, 22242.0], [20.5, 22280.0], [20.6, 22303.0], [20.7, 22325.0], [20.8, 22325.0], [20.9, 22388.0], [21.0, 22407.0], [21.1, 22414.0], [21.2, 22414.0], [21.3, 22438.0], [21.4, 22464.0], [21.5, 22478.0], [21.6, 22478.0], [21.7, 22487.0], [21.8, 22488.0], [21.9, 22488.0], [22.0, 22550.0], [22.1, 22551.0], [22.2, 22568.0], [22.3, 22568.0], [22.4, 22584.0], [22.5, 22626.0], [22.6, 22669.0], [22.7, 22669.0], [22.8, 22678.0], [22.9, 22711.0], [23.0, 22748.0], [23.1, 22748.0], [23.2, 22770.0], [23.3, 22839.0], [23.4, 22839.0], [23.5, 22996.0], [23.6, 23020.0], [23.7, 23034.0], [23.8, 23034.0], [23.9, 23049.0], [24.0, 23091.0], [24.1, 23184.0], [24.2, 23184.0], [24.3, 23198.0], [24.4, 23256.0], [24.5, 23280.0], [24.6, 23280.0], [24.7, 23321.0], [24.8, 23421.0], [24.9, 23449.0], [25.0, 23449.0], [25.1, 23463.0], [25.2, 23488.0], [25.3, 23488.0], [25.4, 23489.0], [25.5, 23489.0], [25.6, 23534.0], [25.7, 23534.0], [25.8, 23539.0], [25.9, 23561.0], [26.0, 23581.0], [26.1, 23581.0], [26.2, 23638.0], [26.3, 23650.0], [26.4, 23658.0], [26.5, 23658.0], [26.6, 23684.0], [26.7, 23757.0], [26.8, 23757.0], [26.9, 23766.0], [27.0, 23851.0], [27.1, 23859.0], [27.2, 23859.0], [27.3, 23869.0], [27.4, 23884.0], [27.5, 23914.0], [27.6, 23914.0], [27.7, 23934.0], [27.8, 23945.0], [27.9, 23969.0], [28.0, 23969.0], [28.1, 23971.0], [28.2, 23972.0], [28.3, 23972.0], [28.4, 23972.0], [28.5, 24001.0], [28.6, 24005.0], [28.7, 24005.0], [28.8, 24038.0], [28.9, 24049.0], [29.0, 24112.0], [29.1, 24112.0], [29.2, 24113.0], [29.3, 24119.0], [29.4, 24136.0], [29.5, 24136.0], [29.6, 24155.0], [29.7, 24178.0], [29.8, 24180.0], [29.9, 24180.0], [30.0, 24183.0], [30.1, 24203.0], [30.2, 24203.0], [30.3, 24208.0], [30.4, 24223.0], [30.5, 24223.0], [30.6, 24223.0], [30.7, 24250.0], [30.8, 24272.0], [30.9, 24284.0], [31.0, 24284.0], [31.1, 24285.0], [31.2, 24292.0], [31.3, 24298.0], [31.4, 24298.0], [31.5, 24315.0], [31.6, 24330.0], [31.7, 24330.0], [31.8, 24341.0], [31.9, 24348.0], [32.0, 24360.0], [32.1, 24360.0], [32.2, 24378.0], [32.3, 24408.0], [32.4, 24409.0], [32.5, 24409.0], [32.6, 24421.0], [32.7, 24421.0], [32.8, 24440.0], [32.9, 24440.0], [33.0, 24451.0], [33.1, 24471.0], [33.2, 24495.0], [33.3, 24495.0], [33.4, 24526.0], [33.5, 24580.0], [33.6, 24580.0], [33.7, 24632.0], [33.8, 24711.0], [33.9, 24742.0], [34.0, 24742.0], [34.1, 24752.0], [34.2, 24761.0], [34.3, 24769.0], [34.4, 24769.0], [34.5, 24799.0], [34.6, 24823.0], [34.7, 24856.0], [34.8, 24856.0], [34.9, 24874.0], [35.0, 24883.0], [35.1, 24883.0], [35.2, 24892.0], [35.3, 24978.0], [35.4, 25033.0], [35.5, 25033.0], [35.6, 25033.0], [35.7, 25040.0], [35.8, 25057.0], [35.9, 25057.0], [36.0, 25069.0], [36.1, 25069.0], [36.2, 25081.0], [36.3, 25081.0], [36.4, 25087.0], [36.5, 25101.0], [36.6, 25140.0], [36.7, 25140.0], [36.8, 25193.0], [36.9, 25214.0], [37.0, 25214.0], [37.1, 25233.0], [37.2, 25236.0], [37.3, 25258.0], [37.4, 25258.0], [37.5, 25282.0], [37.6, 25316.0], [37.7, 25317.0], [37.8, 25317.0], [37.9, 25358.0], [38.0, 25358.0], [38.1, 25365.0], [38.2, 25365.0], [38.3, 25391.0], [38.4, 25400.0], [38.5, 25400.0], [38.6, 25417.0], [38.7, 25436.0], [38.8, 25454.0], [38.9, 25454.0], [39.0, 25457.0], [39.1, 25462.0], [39.2, 25470.0], [39.3, 25470.0], [39.4, 25482.0], [39.5, 25490.0], [39.6, 25519.0], [39.7, 25519.0], [39.8, 25562.0], [39.9, 25622.0], [40.0, 25715.0], [40.1, 25715.0], [40.2, 25731.0], [40.3, 25742.0], [40.4, 25742.0], [40.5, 25744.0], [40.6, 25754.0], [40.7, 25756.0], [40.8, 25756.0], [40.9, 25773.0], [41.0, 25783.0], [41.1, 25823.0], [41.2, 25823.0], [41.3, 25927.0], [41.4, 25948.0], [41.5, 25953.0], [41.6, 25953.0], [41.7, 25954.0], [41.8, 25968.0], [41.9, 25968.0], [42.0, 25970.0], [42.1, 25996.0], [42.2, 26000.0], [42.3, 26000.0], [42.4, 26035.0], [42.5, 26060.0], [42.6, 26068.0], [42.7, 26068.0], [42.8, 26096.0], [42.9, 26101.0], [43.0, 26103.0], [43.1, 26103.0], [43.2, 26103.0], [43.3, 26111.0], [43.4, 26111.0], [43.5, 26160.0], [43.6, 26200.0], [43.7, 26201.0], [43.8, 26201.0], [43.9, 26217.0], [44.0, 26242.0], [44.1, 26254.0], [44.2, 26254.0], [44.3, 26262.0], [44.4, 26266.0], [44.5, 26277.0], [44.6, 26277.0], [44.7, 26279.0], [44.8, 26298.0], [44.9, 26316.0], [45.0, 26316.0], [45.1, 26329.0], [45.2, 26389.0], [45.3, 26389.0], [45.4, 26411.0], [45.5, 26433.0], [45.6, 26440.0], [45.7, 26440.0], [45.8, 26458.0], [45.9, 26461.0], [46.0, 26469.0], [46.1, 26469.0], [46.2, 26477.0], [46.3, 26482.0], [46.4, 26495.0], [46.5, 26495.0], [46.6, 26600.0], [46.7, 26649.0], [46.8, 26649.0], [46.9, 26654.0], [47.0, 26657.0], [47.1, 26661.0], [47.2, 26661.0], [47.3, 26674.0], [47.4, 26681.0], [47.5, 26702.0], [47.6, 26702.0], [47.7, 26741.0], [47.8, 26780.0], [47.9, 26851.0], [48.0, 26851.0], [48.1, 26882.0], [48.2, 26928.0], [48.3, 26937.0], [48.4, 26937.0], [48.5, 26942.0], [48.6, 26952.0], [48.7, 26952.0], [48.8, 26998.0], [48.9, 27052.0], [49.0, 27063.0], [49.1, 27063.0], [49.2, 27122.0], [49.3, 27140.0], [49.4, 27162.0], [49.5, 27162.0], [49.6, 27174.0], [49.7, 27229.0], [49.8, 27257.0], [49.9, 27257.0], [50.0, 27302.0], [50.1, 27309.0], [50.2, 27309.0], [50.3, 27452.0], [50.4, 27463.0], [50.5, 27521.0], [50.6, 27521.0], [50.7, 27530.0], [50.8, 27567.0], [50.9, 27579.0], [51.0, 27579.0], [51.1, 27613.0], [51.2, 27628.0], [51.3, 27647.0], [51.4, 27647.0], [51.5, 27667.0], [51.6, 27670.0], [51.7, 27670.0], [51.8, 27695.0], [51.9, 27745.0], [52.0, 27775.0], [52.1, 27775.0], [52.2, 27775.0], [52.3, 27831.0], [52.4, 27887.0], [52.5, 27887.0], [52.6, 27925.0], [52.7, 27937.0], [52.8, 27952.0], [52.9, 27952.0], [53.0, 27990.0], [53.1, 27994.0], [53.2, 28054.0], [53.3, 28054.0], [53.4, 28076.0], [53.5, 28107.0], [53.6, 28107.0], [53.7, 28114.0], [53.8, 28126.0], [53.9, 28167.0], [54.0, 28167.0], [54.1, 28197.0], [54.2, 28235.0], [54.3, 28281.0], [54.4, 28281.0], [54.5, 28324.0], [54.6, 28380.0], [54.7, 28404.0], [54.8, 28404.0], [54.9, 28409.0], [55.0, 28446.0], [55.1, 28446.0], [55.2, 28460.0], [55.3, 28506.0], [55.4, 28507.0], [55.5, 28507.0], [55.6, 28511.0], [55.7, 28514.0], [55.8, 28528.0], [55.9, 28528.0], [56.0, 28530.0], [56.1, 28536.0], [56.2, 28547.0], [56.3, 28547.0], [56.4, 28555.0], [56.5, 28565.0], [56.6, 28566.0], [56.7, 28566.0], [56.8, 28575.0], [56.9, 28606.0], [57.0, 28606.0], [57.1, 28614.0], [57.2, 28658.0], [57.3, 28678.0], [57.4, 28678.0], [57.5, 28685.0], [57.6, 28687.0], [57.7, 28716.0], [57.8, 28716.0], [57.9, 28737.0], [58.0, 28760.0], [58.1, 28768.0], [58.2, 28768.0], [58.3, 28783.0], [58.4, 28786.0], [58.5, 28786.0], [58.6, 28788.0], [58.7, 28822.0], [58.8, 28823.0], [58.9, 28823.0], [59.0, 28857.0], [59.1, 28860.0], [59.2, 28868.0], [59.3, 28868.0], [59.4, 28884.0], [59.5, 29021.0], [59.6, 29043.0], [59.7, 29043.0], [59.8, 29050.0], [59.9, 29062.0], [60.0, 29116.0], [60.1, 29116.0], [60.2, 29150.0], [60.3, 29165.0], [60.4, 29165.0], [60.5, 29180.0], [60.6, 29188.0], [60.7, 29189.0], [60.8, 29189.0], [60.9, 29191.0], [61.0, 29208.0], [61.1, 29240.0], [61.2, 29240.0], [61.3, 29260.0], [61.4, 29282.0], [61.5, 29297.0], [61.6, 29297.0], [61.7, 29298.0], [61.8, 29313.0], [61.9, 29313.0], [62.0, 29324.0], [62.1, 29331.0], [62.2, 29340.0], [62.3, 29340.0], [62.4, 29340.0], [62.5, 29376.0], [62.6, 29410.0], [62.7, 29410.0], [62.8, 29412.0], [62.9, 29428.0], [63.0, 29432.0], [63.1, 29432.0], [63.2, 29448.0], [63.3, 29475.0], [63.4, 29475.0], [63.5, 29485.0], [63.6, 29509.0], [63.7, 29516.0], [63.8, 29516.0], [63.9, 29530.0], [64.0, 29533.0], [64.1, 29549.0], [64.2, 29549.0], [64.3, 29551.0], [64.4, 29554.0], [64.5, 29558.0], [64.6, 29558.0], [64.7, 29571.0], [64.8, 29591.0], [64.9, 29591.0], [65.0, 29591.0], [65.1, 29619.0], [65.2, 29620.0], [65.3, 29620.0], [65.4, 29624.0], [65.5, 29629.0], [65.6, 29639.0], [65.7, 29639.0], [65.8, 29640.0], [65.9, 29642.0], [66.0, 29648.0], [66.1, 29648.0], [66.2, 29661.0], [66.3, 29661.0], [66.4, 29666.0], [66.5, 29666.0], [66.6, 29668.0], [66.7, 29681.0], [66.8, 29681.0], [66.9, 29681.0], [67.0, 29690.0], [67.1, 29690.0], [67.2, 29690.0], [67.3, 29698.0], [67.4, 29698.0], [67.5, 29703.0], [67.6, 29703.0], [67.7, 29709.0], [67.8, 29710.0], [67.9, 29711.0], [68.0, 29711.0], [68.1, 29711.0], [68.2, 29713.0], [68.3, 29716.0], [68.4, 29716.0], [68.5, 29719.0], [68.6, 29719.0], [68.7, 29719.0], [68.8, 29720.0], [68.9, 29720.0], [69.0, 29721.0], [69.1, 29721.0], [69.2, 29724.0], [69.3, 29727.0], [69.4, 29734.0], [69.5, 29734.0], [69.6, 29735.0], [69.7, 29739.0], [69.8, 29742.0], [69.9, 29742.0], [70.0, 29743.0], [70.1, 29744.0], [70.2, 29744.0], [70.3, 29746.0], [70.4, 29747.0], [70.5, 29749.0], [70.6, 29749.0], [70.7, 29751.0], [70.8, 29755.0], [70.9, 29762.0], [71.0, 29762.0], [71.1, 29763.0], [71.2, 29764.0], [71.3, 29765.0], [71.4, 29765.0], [71.5, 29770.0], [71.6, 29771.0], [71.7, 29771.0], [71.8, 29774.0], [71.9, 29776.0], [72.0, 29780.0], [72.1, 29780.0], [72.2, 29785.0], [72.3, 29791.0], [72.4, 29792.0], [72.5, 29792.0], [72.6, 29793.0], [72.7, 29794.0], [72.8, 29800.0], [72.9, 29800.0], [73.0, 29801.0], [73.1, 29810.0], [73.2, 29817.0], [73.3, 29817.0], [73.4, 29819.0], [73.5, 29821.0], [73.6, 29821.0], [73.7, 29824.0], [73.8, 29824.0], [73.9, 29827.0], [74.0, 29827.0], [74.1, 29828.0], [74.2, 29835.0], [74.3, 29837.0], [74.4, 29837.0], [74.5, 29846.0], [74.6, 29850.0], [74.7, 29855.0], [74.8, 29855.0], [74.9, 29858.0], [75.0, 29860.0], [75.1, 29860.0], [75.2, 29862.0], [75.3, 29862.0], [75.4, 29867.0], [75.5, 29867.0], [75.6, 29869.0], [75.7, 29870.0], [75.8, 29871.0], [75.9, 29871.0], [76.0, 29873.0], [76.1, 29875.0], [76.2, 29876.0], [76.3, 29876.0], [76.4, 29877.0], [76.5, 29880.0], [76.6, 29883.0], [76.7, 29883.0], [76.8, 29884.0], [76.9, 29886.0], [77.0, 29886.0], [77.1, 29887.0], [77.2, 29892.0], [77.3, 29897.0], [77.4, 29897.0], [77.5, 29900.0], [77.6, 29903.0], [77.7, 29906.0], [77.8, 29906.0], [77.9, 29906.0], [78.0, 29907.0], [78.1, 29912.0], [78.2, 29912.0], [78.3, 29915.0], [78.4, 29917.0], [78.5, 29917.0], [78.6, 29923.0], [78.7, 29929.0], [78.8, 29934.0], [78.9, 29934.0], [79.0, 29935.0], [79.1, 29936.0], [79.2, 29941.0], [79.3, 29941.0], [79.4, 29942.0], [79.5, 29947.0], [79.6, 29953.0], [79.7, 29953.0], [79.8, 29956.0], [79.9, 29962.0], [80.0, 29962.0], [80.1, 29962.0], [80.2, 29963.0], [80.3, 29965.0], [80.4, 29965.0], [80.5, 29972.0], [80.6, 29976.0], [80.7, 29977.0], [80.8, 29977.0], [80.9, 29978.0], [81.0, 29990.0], [81.1, 29999.0], [81.2, 29999.0], [81.3, 30001.0], [81.4, 30005.0], [81.5, 30007.0], [81.6, 30007.0], [81.7, 30007.0], [81.8, 30011.0], [81.9, 30011.0], [82.0, 30019.0], [82.1, 30032.0], [82.2, 30046.0], [82.3, 30046.0], [82.4, 30049.0], [82.5, 30050.0], [82.6, 30052.0], [82.7, 30052.0], [82.8, 30069.0], [82.9, 30072.0], [83.0, 30072.0], [83.1, 30072.0], [83.2, 30075.0], [83.3, 30081.0], [83.4, 30081.0], [83.5, 30084.0], [83.6, 30091.0], [83.7, 30091.0], [83.8, 30091.0], [83.9, 30093.0], [84.0, 30097.0], [84.1, 30114.0], [84.2, 30114.0], [84.3, 30114.0], [84.4, 30125.0], [84.5, 30131.0], [84.6, 30131.0], [84.7, 30136.0], [84.8, 30138.0], [84.9, 30139.0], [85.0, 30139.0], [85.1, 30143.0], [85.2, 30145.0], [85.3, 30145.0], [85.4, 30147.0], [85.5, 30150.0], [85.6, 30154.0], [85.7, 30154.0], [85.8, 30166.0], [85.9, 30169.0], [86.0, 30175.0], [86.1, 30175.0], [86.2, 30183.0], [86.3, 30199.0], [86.4, 30218.0], [86.5, 30218.0], [86.6, 30220.0], [86.7, 30227.0], [86.8, 30227.0], [86.9, 30260.0], [87.0, 30265.0], [87.1, 30268.0], [87.2, 30268.0], [87.3, 30273.0], [87.4, 30286.0], [87.5, 30307.0], [87.6, 30307.0], [87.7, 30333.0], [87.8, 30349.0], [87.9, 30353.0], [88.0, 30353.0], [88.1, 30361.0], [88.2, 30366.0], [88.3, 30376.0], [88.4, 30376.0], [88.5, 30392.0], [88.6, 30396.0], [88.7, 30396.0], [88.8, 30409.0], [88.9, 30415.0], [89.0, 30443.0], [89.1, 30443.0], [89.2, 30450.0], [89.3, 30454.0], [89.4, 30462.0], [89.5, 30462.0], [89.6, 30477.0], [89.7, 30499.0], [89.8, 30506.0], [89.9, 30506.0], [90.0, 30515.0], [90.1, 30519.0], [90.2, 30519.0], [90.3, 30526.0], [90.4, 30552.0], [90.5, 30555.0], [90.6, 30555.0], [90.7, 30560.0], [90.8, 30565.0], [90.9, 30581.0], [91.0, 30581.0], [91.1, 30592.0], [91.2, 30626.0], [91.3, 30636.0], [91.4, 30636.0], [91.5, 30661.0], [91.6, 30686.0], [91.7, 30686.0], [91.8, 30690.0], [91.9, 30701.0], [92.0, 30738.0], [92.1, 30738.0], [92.2, 30743.0], [92.3, 30775.0], [92.4, 30782.0], [92.5, 30782.0], [92.6, 30792.0], [92.7, 30854.0], [92.8, 30903.0], [92.9, 30903.0], [93.0, 30919.0], [93.1, 30939.0], [93.2, 30962.0], [93.3, 30962.0], [93.4, 31017.0], [93.5, 31030.0], [93.6, 31030.0], [93.7, 31068.0], [93.8, 31318.0], [93.9, 31478.0], [94.0, 31478.0], [94.1, 31584.0], [94.2, 31598.0], [94.3, 31601.0], [94.4, 31601.0], [94.5, 31607.0], [94.6, 31626.0], [94.7, 31652.0], [94.8, 31652.0], [94.9, 31985.0], [95.0, 32024.0], [95.1, 32024.0], [95.2, 32637.0], [95.3, 32817.0], [95.4, 32878.0], [95.5, 32878.0], [95.6, 33040.0], [95.7, 33068.0], [95.8, 33233.0], [95.9, 33233.0], [96.0, 33359.0], [96.1, 33545.0], [96.2, 34025.0], [96.3, 34025.0], [96.4, 34507.0], [96.5, 34727.0], [96.6, 34793.0], [96.7, 34793.0], [96.8, 35197.0], [96.9, 35790.0], [97.0, 35790.0], [97.1, 36357.0], [97.2, 36423.0], [97.3, 36939.0], [97.4, 36939.0], [97.5, 37496.0], [97.6, 37941.0], [97.7, 38491.0], [97.8, 38491.0], [97.9, 38628.0], [98.0, 39272.0], [98.1, 39922.0], [98.2, 39922.0], [98.3, 41250.0], [98.4, 41300.0], [98.5, 41300.0], [98.6, 41992.0], [98.7, 42118.0], [98.8, 42490.0], [98.9, 42490.0], [99.0, 42767.0], [99.1, 43241.0], [99.2, 43396.0], [99.3, 43396.0], [99.4, 43818.0], [99.5, 44247.0], [99.6, 44273.0], [99.7, 44273.0], [99.8, 44317.0], [99.9, 44845.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 39.0, "series": [{"data": [[34700.0, 2.0], [33300.0, 1.0], [34500.0, 1.0], [33500.0, 1.0], [35700.0, 1.0], [36300.0, 1.0], [35100.0, 1.0], [37900.0, 1.0], [36900.0, 1.0], [39900.0, 1.0], [41300.0, 1.0], [42700.0, 1.0], [42100.0, 1.0], [41900.0, 1.0], [43300.0, 1.0], [44300.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8600.0, 1.0], [11500.0, 1.0], [14200.0, 1.0], [16800.0, 1.0], [17300.0, 2.0], [17000.0, 7.0], [17400.0, 1.0], [16900.0, 2.0], [16500.0, 3.0], [16400.0, 1.0], [17200.0, 2.0], [18300.0, 2.0], [18000.0, 6.0], [18100.0, 4.0], [17800.0, 7.0], [17900.0, 4.0], [17500.0, 4.0], [17700.0, 2.0], [18200.0, 7.0], [18400.0, 2.0], [17600.0, 3.0], [18500.0, 5.0], [18900.0, 3.0], [19300.0, 4.0], [18800.0, 3.0], [19200.0, 1.0], [19400.0, 1.0], [19000.0, 2.0], [19100.0, 1.0], [18700.0, 1.0], [20000.0, 4.0], [20200.0, 3.0], [20400.0, 5.0], [19600.0, 3.0], [19500.0, 6.0], [20300.0, 2.0], [19900.0, 1.0], [20100.0, 3.0], [19700.0, 1.0], [20700.0, 1.0], [21500.0, 3.0], [20900.0, 3.0], [20500.0, 3.0], [20600.0, 4.0], [21200.0, 5.0], [21400.0, 1.0], [21300.0, 3.0], [21100.0, 1.0], [22000.0, 3.0], [21700.0, 1.0], [22300.0, 3.0], [22500.0, 4.0], [22100.0, 5.0], [22400.0, 7.0], [22200.0, 2.0], [21800.0, 2.0], [22700.0, 3.0], [23100.0, 2.0], [23500.0, 4.0], [23000.0, 4.0], [23400.0, 6.0], [23300.0, 1.0], [22600.0, 3.0], [22900.0, 1.0], [23200.0, 2.0], [22800.0, 1.0], [23800.0, 4.0], [24300.0, 6.0], [23900.0, 7.0], [24000.0, 4.0], [24100.0, 8.0], [24200.0, 10.0], [24400.0, 8.0], [23700.0, 2.0], [23600.0, 4.0], [24500.0, 2.0], [25400.0, 9.0], [24900.0, 1.0], [25500.0, 2.0], [25300.0, 6.0], [25200.0, 5.0], [25100.0, 3.0], [24800.0, 5.0], [24700.0, 6.0], [24600.0, 1.0], [25000.0, 8.0], [25700.0, 8.0], [26400.0, 9.0], [25800.0, 1.0], [26000.0, 5.0], [26600.0, 7.0], [26100.0, 5.0], [26200.0, 10.0], [26300.0, 3.0], [25600.0, 1.0], [25900.0, 7.0], [26800.0, 2.0], [26900.0, 5.0], [27500.0, 4.0], [27400.0, 2.0], [27000.0, 2.0], [26700.0, 3.0], [27100.0, 4.0], [27600.0, 6.0], [27200.0, 2.0], [27300.0, 2.0], [27900.0, 5.0], [27700.0, 3.0], [28500.0, 12.0], [28600.0, 6.0], [27800.0, 2.0], [28100.0, 5.0], [28400.0, 4.0], [28000.0, 2.0], [28300.0, 2.0], [28200.0, 2.0], [29600.0, 18.0], [29200.0, 6.0], [28700.0, 7.0], [29400.0, 7.0], [29300.0, 6.0], [29100.0, 7.0], [29000.0, 4.0], [28800.0, 6.0], [29500.0, 11.0], [30500.0, 10.0], [30000.0, 21.0], [30700.0, 6.0], [29700.0, 39.0], [29800.0, 34.0], [29900.0, 28.0], [30100.0, 17.0], [30200.0, 8.0], [30300.0, 9.0], [30400.0, 8.0], [30600.0, 5.0], [31000.0, 3.0], [30800.0, 1.0], [30900.0, 4.0], [31500.0, 2.0], [31600.0, 4.0], [31400.0, 1.0], [31300.0, 1.0], [32000.0, 1.0], [31900.0, 1.0], [32600.0, 1.0], [34000.0, 1.0], [33000.0, 2.0], [32800.0, 2.0], [33200.0, 1.0], [36400.0, 1.0], [38600.0, 1.0], [37400.0, 1.0], [38400.0, 1.0], [39200.0, 1.0], [41200.0, 1.0], [42400.0, 1.0], [43800.0, 1.0], [44800.0, 1.0], [44200.0, 2.0], [43200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.448275862068964, "minX": 1.60248336E12, "maxY": 10.0, "series": [{"data": [[1.60248384E12, 10.0], [1.60248354E12, 10.0], [1.60248426E12, 10.0], [1.60248456E12, 10.0], [1.60248486E12, 10.0], [1.60248516E12, 10.0], [1.60248396E12, 10.0], [1.60248366E12, 10.0], [1.60248336E12, 10.0], [1.6024851E12, 10.0], [1.60248408E12, 10.0], [1.60248438E12, 10.0], [1.60248378E12, 10.0], [1.60248468E12, 10.0], [1.60248348E12, 10.0], [1.60248498E12, 10.0], [1.60248528E12, 8.448275862068964], [1.60248462E12, 10.0], [1.60248492E12, 10.0], [1.60248522E12, 10.0], [1.6024839E12, 10.0], [1.6024836E12, 10.0], [1.6024842E12, 10.0], [1.6024845E12, 10.0], [1.6024848E12, 10.0], [1.60248402E12, 10.0], [1.60248444E12, 10.0], [1.60248372E12, 10.0], [1.60248474E12, 10.0], [1.60248342E12, 10.0], [1.60248504E12, 10.0], [1.60248414E12, 10.0], [1.60248432E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248528E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16933.0, "minX": 1.0, "maxY": 26570.407713498626, "series": [{"data": [[8.0, 17078.0], [4.0, 17038.0], [2.0, 17233.0], [1.0, 17584.0], [9.0, 16933.0], [10.0, 26570.407713498626], [5.0, 17063.0], [6.0, 17006.0], [3.0, 17248.0], [7.0, 17082.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26454.940136054425]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 95.11666666666666, "minX": 1.60248336E12, "maxY": 213960.2, "series": [{"data": [[1.60248384E12, 47444.816666666666], [1.60248354E12, 51706.88333333333], [1.60248426E12, 66851.21666666666], [1.60248456E12, 37626.583333333336], [1.60248486E12, 45642.5], [1.60248516E12, 104363.6], [1.60248396E12, 43644.316666666666], [1.60248366E12, 47063.433333333334], [1.60248336E12, 157271.4], [1.6024851E12, 31266.25], [1.60248408E12, 26868.866666666665], [1.60248438E12, 56476.1], [1.60248378E12, 44036.416666666664], [1.60248468E12, 50167.083333333336], [1.60248348E12, 143658.31666666668], [1.60248498E12, 43581.78333333333], [1.60248528E12, 50048.583333333336], [1.60248462E12, 40558.25], [1.60248492E12, 47802.316666666666], [1.60248522E12, 103024.53333333334], [1.6024839E12, 54550.316666666666], [1.6024836E12, 80287.78333333334], [1.6024842E12, 132153.06666666668], [1.6024845E12, 74658.73333333334], [1.6024848E12, 53239.666666666664], [1.60248402E12, 46511.35], [1.60248444E12, 86621.9], [1.60248372E12, 46233.683333333334], [1.60248474E12, 45424.6], [1.60248342E12, 108931.61666666667], [1.60248504E12, 32302.283333333333], [1.60248414E12, 109475.83333333333], [1.60248432E12, 213960.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60248384E12, 146.11666666666667], [1.60248354E12, 110.95], [1.60248426E12, 194.63333333333333], [1.60248456E12, 132.75], [1.60248486E12, 153.73333333333332], [1.60248516E12, 195.41666666666666], [1.60248396E12, 146.06666666666666], [1.60248366E12, 153.7], [1.60248336E12, 95.11666666666666], [1.6024851E12, 189.78333333333333], [1.60248408E12, 167.88333333333333], [1.60248438E12, 222.55], [1.60248378E12, 146.1], [1.60248468E12, 146.15], [1.60248348E12, 177.61666666666667], [1.60248498E12, 146.0], [1.60248528E12, 199.45], [1.60248462E12, 146.08333333333334], [1.60248492E12, 146.11666666666667], [1.60248522E12, 146.13333333333333], [1.6024839E12, 146.4], [1.6024836E12, 183.56666666666666], [1.6024842E12, 165.48333333333332], [1.6024845E12, 175.33333333333334], [1.6024848E12, 154.06666666666666], [1.60248402E12, 153.33333333333334], [1.60248444E12, 158.15], [1.60248372E12, 146.13333333333333], [1.60248474E12, 138.81666666666666], [1.60248342E12, 201.88333333333333], [1.60248504E12, 160.48333333333332], [1.60248414E12, 217.33333333333334], [1.60248432E12, 175.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248528E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17736.615384615383, "minX": 1.60248336E12, "maxY": 39708.066666666666, "series": [{"data": [[1.60248384E12, 30427.75], [1.60248354E12, 39708.066666666666], [1.60248426E12, 24087.428571428565], [1.60248456E12, 28910.333333333332], [1.60248486E12, 28936.666666666668], [1.60248516E12, 22503.37037037037], [1.60248396E12, 29700.199999999997], [1.60248366E12, 26666.571428571435], [1.60248336E12, 17736.615384615383], [1.6024851E12, 24417.96153846154], [1.60248408E12, 26351.565217391308], [1.60248438E12, 19418.1875], [1.60248378E12, 29775.399999999998], [1.60248468E12, 30391.450000000004], [1.60248348E12, 21955.250000000007], [1.60248498E12, 30010.799999999996], [1.60248528E12, 22301.79310344828], [1.60248462E12, 33046.200000000004], [1.60248492E12, 29988.2], [1.60248522E12, 27379.9], [1.6024839E12, 29509.55], [1.6024836E12, 26213.8], [1.6024842E12, 22219.30434782609], [1.6024845E12, 25987.958333333332], [1.6024848E12, 29331.857142857145], [1.60248402E12, 29801.666666666668], [1.60248444E12, 26113.238095238095], [1.60248372E12, 29933.0], [1.60248474E12, 30033.21052631579], [1.60248342E12, 23026.60714285714], [1.60248504E12, 26738.77272727273], [1.60248414E12, 21188.466666666664], [1.60248432E12, 24552.666666666668]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248528E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17730.53846153846, "minX": 1.60248336E12, "maxY": 39706.200000000004, "series": [{"data": [[1.60248384E12, 30426.55], [1.60248354E12, 39706.200000000004], [1.60248426E12, 24085.178571428576], [1.60248456E12, 28909.499999999996], [1.60248486E12, 28935.428571428572], [1.60248516E12, 22500.925925925927], [1.60248396E12, 29699.0], [1.60248366E12, 26665.333333333336], [1.60248336E12, 17730.53846153846], [1.6024851E12, 24417.346153846152], [1.60248408E12, 26351.0], [1.60248438E12, 19416.718749999996], [1.60248378E12, 29774.3], [1.60248468E12, 30390.200000000004], [1.60248348E12, 21952.08333333333], [1.60248498E12, 30009.5], [1.60248528E12, 22299.689655172413], [1.60248462E12, 33045.25000000001], [1.60248492E12, 29987.05], [1.60248522E12, 27376.85], [1.6024839E12, 29508.050000000007], [1.6024836E12, 26212.199999999997], [1.6024842E12, 22215.82608695652], [1.6024845E12, 25986.416666666668], [1.6024848E12, 29330.523809523813], [1.60248402E12, 29800.61904761905], [1.60248444E12, 26111.095238095233], [1.60248372E12, 29931.799999999996], [1.60248474E12, 30032.0], [1.60248342E12, 23024.714285714283], [1.60248504E12, 26737.909090909092], [1.60248414E12, 21186.16666666666], [1.60248432E12, 24548.249999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248528E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1739130434782609, "minX": 1.60248336E12, "maxY": 6.230769230769231, "series": [{"data": [[1.60248384E12, 0.7499999999999999], [1.60248354E12, 0.6], [1.60248426E12, 0.3214285714285714], [1.60248456E12, 0.7222222222222224], [1.60248486E12, 0.4761904761904762], [1.60248516E12, 0.4814814814814815], [1.60248396E12, 0.35], [1.60248366E12, 0.8571428571428572], [1.60248336E12, 6.230769230769231], [1.6024851E12, 0.3846153846153846], [1.60248408E12, 0.4782608695652174], [1.60248438E12, 0.3750000000000001], [1.60248378E12, 0.25], [1.60248468E12, 0.45000000000000007], [1.60248348E12, 0.375], [1.60248498E12, 0.6], [1.60248528E12, 0.4482758620689655], [1.60248462E12, 0.6000000000000002], [1.60248492E12, 0.5499999999999999], [1.60248522E12, 0.5], [1.6024839E12, 0.6], [1.6024836E12, 0.6399999999999999], [1.6024842E12, 0.1739130434782609], [1.6024845E12, 0.20833333333333331], [1.6024848E12, 0.5714285714285714], [1.60248402E12, 0.38095238095238093], [1.60248444E12, 0.42857142857142855], [1.60248372E12, 0.25], [1.60248474E12, 0.5789473684210527], [1.60248342E12, 0.3928571428571428], [1.60248504E12, 0.2727272727272727], [1.60248414E12, 0.4], [1.60248432E12, 0.5833333333333335]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248528E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3123.0, "minX": 1.60248336E12, "maxY": 44845.0, "series": [{"data": [[1.60248384E12, 31030.0], [1.60248354E12, 44845.0], [1.60248426E12, 31652.0], [1.60248456E12, 42490.0], [1.60248486E12, 30143.0], [1.60248516E12, 27670.0], [1.60248396E12, 29929.0], [1.60248366E12, 30743.0], [1.60248336E12, 26937.0], [1.6024851E12, 28868.0], [1.60248408E12, 29762.0], [1.60248438E12, 25140.0], [1.60248378E12, 30052.0], [1.60248468E12, 31017.0], [1.60248348E12, 30506.0], [1.60248498E12, 30581.0], [1.60248528E12, 38491.0], [1.60248462E12, 44247.0], [1.60248492E12, 30415.0], [1.60248522E12, 33068.0], [1.6024839E12, 30097.0], [1.6024836E12, 32024.0], [1.6024842E12, 31584.0], [1.6024845E12, 29509.0], [1.6024848E12, 30636.0], [1.60248402E12, 29956.0], [1.60248444E12, 32817.0], [1.60248372E12, 30169.0], [1.60248474E12, 30555.0], [1.60248342E12, 27994.0], [1.60248504E12, 29620.0], [1.60248414E12, 26600.0], [1.60248432E12, 28786.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60248384E12, 29711.0], [1.60248354E12, 33040.0], [1.60248426E12, 17550.0], [1.60248456E12, 22242.0], [1.60248486E12, 27937.0], [1.60248516E12, 18700.0], [1.60248396E12, 29340.0], [1.60248366E12, 23489.0], [1.60248336E12, 3123.0], [1.6024851E12, 21222.0], [1.60248408E12, 23684.0], [1.60248438E12, 17885.0], [1.60248378E12, 29432.0], [1.60248468E12, 29835.0], [1.60248348E12, 17599.0], [1.60248498E12, 29150.0], [1.60248528E12, 16460.0], [1.60248462E12, 26111.0], [1.60248492E12, 29666.0], [1.60248522E12, 20094.0], [1.6024839E12, 28884.0], [1.6024836E12, 23034.0], [1.6024842E12, 18087.0], [1.6024845E12, 23972.0], [1.6024848E12, 27831.0], [1.60248402E12, 29591.0], [1.60248444E12, 18202.0], [1.60248372E12, 29720.0], [1.60248474E12, 29549.0], [1.60248342E12, 18037.0], [1.60248504E12, 23972.0], [1.60248414E12, 17094.0], [1.60248432E12, 19337.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60248384E12, 29711.0], [1.60248354E12, 33040.0], [1.60248426E12, 17550.0], [1.60248456E12, 22242.0], [1.60248486E12, 27937.0], [1.60248516E12, 18700.0], [1.60248396E12, 29340.0], [1.60248366E12, 23489.0], [1.60248336E12, 3123.0], [1.6024851E12, 21222.0], [1.60248408E12, 23684.0], [1.60248438E12, 17885.0], [1.60248378E12, 29432.0], [1.60248468E12, 29835.0], [1.60248348E12, 17599.0], [1.60248498E12, 29150.0], [1.60248528E12, 16460.0], [1.60248462E12, 26111.0], [1.60248492E12, 29666.0], [1.60248522E12, 20094.0], [1.6024839E12, 28884.0], [1.6024836E12, 23034.0], [1.6024842E12, 18087.0], [1.6024845E12, 23972.0], [1.6024848E12, 27831.0], [1.60248402E12, 29591.0], [1.60248444E12, 18202.0], [1.60248372E12, 29720.0], [1.60248474E12, 29549.0], [1.60248342E12, 18037.0], [1.60248504E12, 23972.0], [1.60248414E12, 17094.0], [1.60248432E12, 19337.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60248384E12, 29711.0], [1.60248354E12, 33040.0], [1.60248426E12, 17550.0], [1.60248456E12, 22242.0], [1.60248486E12, 27937.0], [1.60248516E12, 18700.0], [1.60248396E12, 29340.0], [1.60248366E12, 23489.0], [1.60248336E12, 3123.0], [1.6024851E12, 21222.0], [1.60248408E12, 23684.0], [1.60248438E12, 17885.0], [1.60248378E12, 29432.0], [1.60248468E12, 29835.0], [1.60248348E12, 17599.0], [1.60248498E12, 29150.0], [1.60248528E12, 16460.0], [1.60248462E12, 26111.0], [1.60248492E12, 29666.0], [1.60248522E12, 20094.0], [1.6024839E12, 28884.0], [1.6024836E12, 23034.0], [1.6024842E12, 18087.0], [1.6024845E12, 23972.0], [1.6024848E12, 27831.0], [1.60248402E12, 29591.0], [1.60248444E12, 18202.0], [1.60248372E12, 29720.0], [1.60248474E12, 29549.0], [1.60248342E12, 18037.0], [1.60248504E12, 23972.0], [1.60248414E12, 17094.0], [1.60248432E12, 19337.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60248384E12, 29711.0], [1.60248354E12, 33040.0], [1.60248426E12, 17550.0], [1.60248456E12, 22242.0], [1.60248486E12, 27937.0], [1.60248516E12, 18700.0], [1.60248396E12, 29340.0], [1.60248366E12, 23489.0], [1.60248336E12, 3123.0], [1.6024851E12, 21222.0], [1.60248408E12, 23684.0], [1.60248438E12, 17885.0], [1.60248378E12, 29432.0], [1.60248468E12, 29835.0], [1.60248348E12, 17599.0], [1.60248498E12, 29150.0], [1.60248528E12, 16460.0], [1.60248462E12, 26111.0], [1.60248492E12, 29666.0], [1.60248522E12, 20094.0], [1.6024839E12, 28884.0], [1.6024836E12, 23034.0], [1.6024842E12, 18087.0], [1.6024845E12, 23972.0], [1.6024848E12, 27831.0], [1.60248402E12, 29591.0], [1.60248444E12, 18202.0], [1.60248372E12, 29720.0], [1.60248474E12, 29549.0], [1.60248342E12, 18037.0], [1.60248504E12, 23972.0], [1.60248414E12, 17094.0], [1.60248432E12, 19337.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60248384E12, 30384.0], [1.60248354E12, 41300.0], [1.60248426E12, 25590.5], [1.60248456E12, 25615.0], [1.60248486E12, 28760.0], [1.60248516E12, 21586.0], [1.60248396E12, 29717.5], [1.60248366E12, 26952.0], [1.60248336E12, 18946.0], [1.6024851E12, 24203.0], [1.60248408E12, 25968.0], [1.60248438E12, 18724.0], [1.60248378E12, 29775.0], [1.60248468E12, 30335.0], [1.60248348E12, 22438.0], [1.60248498E12, 30182.5], [1.60248528E12, 17475.0], [1.60248462E12, 29887.0], [1.60248492E12, 29967.5], [1.60248522E12, 28532.0], [1.6024839E12, 29551.0], [1.6024836E12, 25457.0], [1.6024842E12, 22125.0], [1.6024845E12, 25234.5], [1.6024848E12, 29410.0], [1.60248402E12, 29821.0], [1.60248444E12, 25482.0], [1.60248372E12, 29907.5], [1.60248474E12, 29990.0], [1.60248342E12, 22609.5], [1.60248504E12, 26307.0], [1.60248414E12, 19591.5], [1.60248432E12, 24306.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248528E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27302.0, "minX": 1.0, "maxY": 27302.0, "series": [{"data": [[1.0, 27302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27301.0, "minX": 1.0, "maxY": 27301.0, "series": [{"data": [[1.0, 27301.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60248336E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60248384E12, 0.3333333333333333], [1.60248354E12, 0.25], [1.60248426E12, 0.4666666666666667], [1.60248456E12, 0.3], [1.60248486E12, 0.35], [1.60248516E12, 0.45], [1.60248396E12, 0.3333333333333333], [1.60248366E12, 0.35], [1.60248336E12, 0.38333333333333336], [1.6024851E12, 0.43333333333333335], [1.60248408E12, 0.38333333333333336], [1.60248438E12, 0.5333333333333333], [1.60248378E12, 0.3333333333333333], [1.60248468E12, 0.3333333333333333], [1.60248348E12, 0.4], [1.60248498E12, 0.3333333333333333], [1.60248528E12, 0.31666666666666665], [1.60248462E12, 0.3333333333333333], [1.60248492E12, 0.3333333333333333], [1.60248522E12, 0.3333333333333333], [1.6024839E12, 0.3333333333333333], [1.6024836E12, 0.4166666666666667], [1.6024842E12, 0.38333333333333336], [1.6024845E12, 0.4], [1.6024848E12, 0.35], [1.60248402E12, 0.35], [1.60248444E12, 0.35], [1.60248372E12, 0.3333333333333333], [1.60248474E12, 0.31666666666666665], [1.60248342E12, 0.4666666666666667], [1.60248504E12, 0.36666666666666664], [1.60248414E12, 0.5], [1.60248432E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248528E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60248336E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60248384E12, 0.3333333333333333], [1.60248354E12, 0.25], [1.60248426E12, 0.4666666666666667], [1.60248456E12, 0.3], [1.60248486E12, 0.35], [1.60248516E12, 0.45], [1.60248396E12, 0.3333333333333333], [1.60248366E12, 0.35], [1.60248336E12, 0.21666666666666667], [1.6024851E12, 0.43333333333333335], [1.60248408E12, 0.38333333333333336], [1.60248438E12, 0.5333333333333333], [1.60248378E12, 0.3333333333333333], [1.60248468E12, 0.3333333333333333], [1.60248348E12, 0.4], [1.60248498E12, 0.3333333333333333], [1.60248528E12, 0.48333333333333334], [1.60248462E12, 0.3333333333333333], [1.60248492E12, 0.3333333333333333], [1.60248522E12, 0.3333333333333333], [1.6024839E12, 0.3333333333333333], [1.6024836E12, 0.4166666666666667], [1.6024842E12, 0.38333333333333336], [1.6024845E12, 0.4], [1.6024848E12, 0.35], [1.60248402E12, 0.35], [1.60248444E12, 0.35], [1.60248372E12, 0.3333333333333333], [1.60248474E12, 0.31666666666666665], [1.60248342E12, 0.4666666666666667], [1.60248504E12, 0.36666666666666664], [1.60248414E12, 0.5], [1.60248432E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248528E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60248336E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60248384E12, 0.3333333333333333], [1.60248354E12, 0.25], [1.60248426E12, 0.4666666666666667], [1.60248456E12, 0.3], [1.60248486E12, 0.35], [1.60248516E12, 0.45], [1.60248396E12, 0.3333333333333333], [1.60248366E12, 0.35], [1.60248336E12, 0.21666666666666667], [1.6024851E12, 0.43333333333333335], [1.60248408E12, 0.38333333333333336], [1.60248438E12, 0.5333333333333333], [1.60248378E12, 0.3333333333333333], [1.60248468E12, 0.3333333333333333], [1.60248348E12, 0.4], [1.60248498E12, 0.3333333333333333], [1.60248528E12, 0.48333333333333334], [1.60248462E12, 0.3333333333333333], [1.60248492E12, 0.3333333333333333], [1.60248522E12, 0.3333333333333333], [1.6024839E12, 0.3333333333333333], [1.6024836E12, 0.4166666666666667], [1.6024842E12, 0.38333333333333336], [1.6024845E12, 0.4], [1.6024848E12, 0.35], [1.60248402E12, 0.35], [1.60248444E12, 0.35], [1.60248372E12, 0.3333333333333333], [1.60248474E12, 0.31666666666666665], [1.60248342E12, 0.4666666666666667], [1.60248504E12, 0.36666666666666664], [1.60248414E12, 0.5], [1.60248432E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248528E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60248336E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60248384E12, 0.3333333333333333], [1.60248354E12, 0.25], [1.60248426E12, 0.4666666666666667], [1.60248456E12, 0.3], [1.60248486E12, 0.35], [1.60248516E12, 0.45], [1.60248396E12, 0.3333333333333333], [1.60248366E12, 0.35], [1.60248336E12, 0.21666666666666667], [1.6024851E12, 0.43333333333333335], [1.60248408E12, 0.38333333333333336], [1.60248438E12, 0.5333333333333333], [1.60248378E12, 0.3333333333333333], [1.60248468E12, 0.3333333333333333], [1.60248348E12, 0.4], [1.60248498E12, 0.3333333333333333], [1.60248528E12, 0.48333333333333334], [1.60248462E12, 0.3333333333333333], [1.60248492E12, 0.3333333333333333], [1.60248522E12, 0.3333333333333333], [1.6024839E12, 0.3333333333333333], [1.6024836E12, 0.4166666666666667], [1.6024842E12, 0.38333333333333336], [1.6024845E12, 0.4], [1.6024848E12, 0.35], [1.60248402E12, 0.35], [1.60248444E12, 0.35], [1.60248372E12, 0.3333333333333333], [1.60248474E12, 0.31666666666666665], [1.60248342E12, 0.4666666666666667], [1.60248504E12, 0.36666666666666664], [1.60248414E12, 0.5], [1.60248432E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248528E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

