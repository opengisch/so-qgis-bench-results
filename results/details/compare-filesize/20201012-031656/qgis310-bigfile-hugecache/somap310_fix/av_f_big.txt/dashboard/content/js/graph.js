/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3082.0, "minX": 0.0, "maxY": 45270.0, "series": [{"data": [[0.0, 3082.0], [0.1, 3082.0], [0.2, 5926.0], [0.3, 8011.0], [0.4, 8011.0], [0.5, 10691.0], [0.6, 13211.0], [0.7, 15691.0], [0.8, 15691.0], [0.9, 16610.0], [1.0, 16710.0], [1.1, 16719.0], [1.2, 16719.0], [1.3, 16723.0], [1.4, 16777.0], [1.5, 16780.0], [1.6, 16780.0], [1.7, 16782.0], [1.8, 16794.0], [1.9, 16794.0], [2.0, 16852.0], [2.1, 16969.0], [2.2, 16976.0], [2.3, 16976.0], [2.4, 16980.0], [2.5, 16995.0], [2.6, 17002.0], [2.7, 17002.0], [2.8, 17014.0], [2.9, 17055.0], [3.0, 17057.0], [3.1, 17057.0], [3.2, 17077.0], [3.3, 17081.0], [3.4, 17081.0], [3.5, 17088.0], [3.6, 17093.0], [3.7, 17093.0], [3.8, 17093.0], [3.9, 17101.0], [4.0, 17145.0], [4.1, 17152.0], [4.2, 17152.0], [4.3, 17179.0], [4.4, 17193.0], [4.5, 17197.0], [4.6, 17197.0], [4.7, 17220.0], [4.8, 17246.0], [4.9, 17262.0], [5.0, 17262.0], [5.1, 17267.0], [5.2, 17287.0], [5.3, 17287.0], [5.4, 17314.0], [5.5, 17351.0], [5.6, 17376.0], [5.7, 17376.0], [5.8, 17412.0], [5.9, 17423.0], [6.0, 17425.0], [6.1, 17425.0], [6.2, 17425.0], [6.3, 17447.0], [6.4, 17453.0], [6.5, 17453.0], [6.6, 17461.0], [6.7, 17462.0], [6.8, 17462.0], [6.9, 17524.0], [7.0, 17580.0], [7.1, 17669.0], [7.2, 17669.0], [7.3, 17740.0], [7.4, 17750.0], [7.5, 17784.0], [7.6, 17784.0], [7.7, 17822.0], [7.8, 17842.0], [7.9, 17847.0], [8.0, 17847.0], [8.1, 17880.0], [8.2, 17902.0], [8.3, 17906.0], [8.4, 17906.0], [8.5, 18008.0], [8.6, 18014.0], [8.7, 18014.0], [8.8, 18015.0], [8.9, 18022.0], [9.0, 18032.0], [9.1, 18032.0], [9.2, 18033.0], [9.3, 18049.0], [9.4, 18099.0], [9.5, 18099.0], [9.6, 18127.0], [9.7, 18143.0], [9.8, 18318.0], [9.9, 18318.0], [10.0, 18348.0], [10.1, 18495.0], [10.2, 18495.0], [10.3, 18574.0], [10.4, 18579.0], [10.5, 18613.0], [10.6, 18613.0], [10.7, 18653.0], [10.8, 18657.0], [10.9, 18935.0], [11.0, 18935.0], [11.1, 19033.0], [11.2, 19039.0], [11.3, 19042.0], [11.4, 19042.0], [11.5, 19069.0], [11.6, 19137.0], [11.7, 19137.0], [11.8, 19187.0], [11.9, 19249.0], [12.0, 19286.0], [12.1, 19286.0], [12.2, 19305.0], [12.3, 19311.0], [12.4, 19320.0], [12.5, 19320.0], [12.6, 19334.0], [12.7, 19342.0], [12.8, 19447.0], [12.9, 19447.0], [13.0, 19451.0], [13.1, 19454.0], [13.2, 19472.0], [13.3, 19472.0], [13.4, 19482.0], [13.5, 19584.0], [13.6, 19584.0], [13.7, 19689.0], [13.8, 19698.0], [13.9, 19806.0], [14.0, 19806.0], [14.1, 19823.0], [14.2, 19934.0], [14.3, 19972.0], [14.4, 19972.0], [14.5, 19972.0], [14.6, 20025.0], [14.7, 20037.0], [14.8, 20037.0], [14.9, 20049.0], [15.0, 20059.0], [15.1, 20059.0], [15.2, 20060.0], [15.3, 20068.0], [15.4, 20134.0], [15.5, 20134.0], [15.6, 20192.0], [15.7, 20228.0], [15.8, 20241.0], [15.9, 20241.0], [16.0, 20243.0], [16.1, 20335.0], [16.2, 20337.0], [16.3, 20337.0], [16.4, 20344.0], [16.5, 20345.0], [16.6, 20417.0], [16.7, 20417.0], [16.8, 20625.0], [16.9, 20644.0], [17.0, 20644.0], [17.1, 20846.0], [17.2, 20955.0], [17.3, 21015.0], [17.4, 21015.0], [17.5, 21038.0], [17.6, 21080.0], [17.7, 21148.0], [17.8, 21148.0], [17.9, 21186.0], [18.0, 21225.0], [18.1, 21233.0], [18.2, 21233.0], [18.3, 21390.0], [18.4, 21425.0], [18.5, 21425.0], [18.6, 21463.0], [18.7, 21480.0], [18.8, 21532.0], [18.9, 21532.0], [19.0, 21539.0], [19.1, 21547.0], [19.2, 21584.0], [19.3, 21584.0], [19.4, 21620.0], [19.5, 21635.0], [19.6, 21639.0], [19.7, 21639.0], [19.8, 21663.0], [19.9, 21671.0], [20.0, 21675.0], [20.1, 21675.0], [20.2, 21692.0], [20.3, 21731.0], [20.4, 21731.0], [20.5, 21751.0], [20.6, 21796.0], [20.7, 21815.0], [20.8, 21815.0], [20.9, 21897.0], [21.0, 21967.0], [21.1, 21995.0], [21.2, 21995.0], [21.3, 22003.0], [21.4, 22012.0], [21.5, 22024.0], [21.6, 22024.0], [21.7, 22073.0], [21.8, 22078.0], [21.9, 22078.0], [22.0, 22101.0], [22.1, 22126.0], [22.2, 22166.0], [22.3, 22166.0], [22.4, 22185.0], [22.5, 22244.0], [22.6, 22296.0], [22.7, 22296.0], [22.8, 22309.0], [22.9, 22330.0], [23.0, 22355.0], [23.1, 22355.0], [23.2, 22374.0], [23.3, 22433.0], [23.4, 22433.0], [23.5, 22449.0], [23.6, 22470.0], [23.7, 22516.0], [23.8, 22516.0], [23.9, 22631.0], [24.0, 22642.0], [24.1, 22741.0], [24.2, 22741.0], [24.3, 22802.0], [24.4, 22821.0], [24.5, 22839.0], [24.6, 22839.0], [24.7, 22907.0], [24.8, 23009.0], [24.9, 23027.0], [25.0, 23027.0], [25.1, 23042.0], [25.2, 23098.0], [25.3, 23098.0], [25.4, 23100.0], [25.5, 23139.0], [25.6, 23158.0], [25.7, 23158.0], [25.8, 23187.0], [25.9, 23206.0], [26.0, 23284.0], [26.1, 23284.0], [26.2, 23300.0], [26.3, 23315.0], [26.4, 23329.0], [26.5, 23329.0], [26.6, 23330.0], [26.7, 23336.0], [26.8, 23336.0], [26.9, 23339.0], [27.0, 23339.0], [27.1, 23350.0], [27.2, 23350.0], [27.3, 23357.0], [27.4, 23363.0], [27.5, 23378.0], [27.6, 23378.0], [27.7, 23390.0], [27.8, 23414.0], [27.9, 23426.0], [28.0, 23426.0], [28.1, 23516.0], [28.2, 23536.0], [28.3, 23547.0], [28.4, 23547.0], [28.5, 23580.0], [28.6, 23612.0], [28.7, 23612.0], [28.8, 23618.0], [28.9, 23670.0], [29.0, 23692.0], [29.1, 23692.0], [29.2, 23699.0], [29.3, 23712.0], [29.4, 23724.0], [29.5, 23724.0], [29.6, 23729.0], [29.7, 23729.0], [29.8, 23750.0], [29.9, 23750.0], [30.0, 23757.0], [30.1, 23765.0], [30.2, 23765.0], [30.3, 23788.0], [30.4, 23832.0], [30.5, 23834.0], [30.6, 23834.0], [30.7, 23857.0], [30.8, 23858.0], [30.9, 23894.0], [31.0, 23894.0], [31.1, 23902.0], [31.2, 23975.0], [31.3, 23981.0], [31.4, 23981.0], [31.5, 23994.0], [31.6, 24018.0], [31.7, 24018.0], [31.8, 24050.0], [31.9, 24062.0], [32.0, 24069.0], [32.1, 24069.0], [32.2, 24083.0], [32.3, 24083.0], [32.4, 24088.0], [32.5, 24088.0], [32.6, 24093.0], [32.7, 24110.0], [32.8, 24126.0], [32.9, 24126.0], [33.0, 24167.0], [33.1, 24209.0], [33.2, 24216.0], [33.3, 24216.0], [33.4, 24230.0], [33.5, 24237.0], [33.6, 24237.0], [33.7, 24252.0], [33.8, 24262.0], [33.9, 24282.0], [34.0, 24282.0], [34.1, 24309.0], [34.2, 24313.0], [34.3, 24359.0], [34.4, 24359.0], [34.5, 24378.0], [34.6, 24409.0], [34.7, 24443.0], [34.8, 24443.0], [34.9, 24464.0], [35.0, 24498.0], [35.1, 24498.0], [35.2, 24549.0], [35.3, 24550.0], [35.4, 24560.0], [35.5, 24560.0], [35.6, 24560.0], [35.7, 24600.0], [35.8, 24600.0], [35.9, 24600.0], [36.0, 24625.0], [36.1, 24627.0], [36.2, 24673.0], [36.3, 24673.0], [36.4, 24686.0], [36.5, 24698.0], [36.6, 24743.0], [36.7, 24743.0], [36.8, 24774.0], [36.9, 24811.0], [37.0, 24811.0], [37.1, 24829.0], [37.2, 24848.0], [37.3, 24861.0], [37.4, 24861.0], [37.5, 24876.0], [37.6, 24879.0], [37.7, 24899.0], [37.8, 24899.0], [37.9, 24901.0], [38.0, 24902.0], [38.1, 24906.0], [38.2, 24906.0], [38.3, 24949.0], [38.4, 24967.0], [38.5, 24967.0], [38.6, 25003.0], [38.7, 25015.0], [38.8, 25016.0], [38.9, 25016.0], [39.0, 25022.0], [39.1, 25060.0], [39.2, 25064.0], [39.3, 25064.0], [39.4, 25097.0], [39.5, 25115.0], [39.6, 25118.0], [39.7, 25118.0], [39.8, 25119.0], [39.9, 25165.0], [40.0, 25214.0], [40.1, 25214.0], [40.2, 25215.0], [40.3, 25234.0], [40.4, 25234.0], [40.5, 25255.0], [40.6, 25262.0], [40.7, 25286.0], [40.8, 25286.0], [40.9, 25301.0], [41.0, 25302.0], [41.1, 25308.0], [41.2, 25308.0], [41.3, 25313.0], [41.4, 25316.0], [41.5, 25334.0], [41.6, 25334.0], [41.7, 25342.0], [41.8, 25417.0], [41.9, 25417.0], [42.0, 25419.0], [42.1, 25425.0], [42.2, 25459.0], [42.3, 25459.0], [42.4, 25477.0], [42.5, 25481.0], [42.6, 25512.0], [42.7, 25512.0], [42.8, 25532.0], [42.9, 25538.0], [43.0, 25541.0], [43.1, 25541.0], [43.2, 25542.0], [43.3, 25576.0], [43.4, 25576.0], [43.5, 25600.0], [43.6, 25629.0], [43.7, 25660.0], [43.8, 25660.0], [43.9, 25663.0], [44.0, 25665.0], [44.1, 25673.0], [44.2, 25673.0], [44.3, 25711.0], [44.4, 25724.0], [44.5, 25733.0], [44.6, 25733.0], [44.7, 25808.0], [44.8, 25810.0], [44.9, 25816.0], [45.0, 25816.0], [45.1, 25870.0], [45.2, 25874.0], [45.3, 25874.0], [45.4, 25918.0], [45.5, 25930.0], [45.6, 25937.0], [45.7, 25937.0], [45.8, 25965.0], [45.9, 25974.0], [46.0, 25974.0], [46.1, 25974.0], [46.2, 26037.0], [46.3, 26045.0], [46.4, 26065.0], [46.5, 26065.0], [46.6, 26093.0], [46.7, 26151.0], [46.8, 26151.0], [46.9, 26156.0], [47.0, 26222.0], [47.1, 26240.0], [47.2, 26240.0], [47.3, 26264.0], [47.4, 26306.0], [47.5, 26330.0], [47.6, 26330.0], [47.7, 26419.0], [47.8, 26437.0], [47.9, 26477.0], [48.0, 26477.0], [48.1, 26485.0], [48.2, 26545.0], [48.3, 26556.0], [48.4, 26556.0], [48.5, 26574.0], [48.6, 26586.0], [48.7, 26586.0], [48.8, 26615.0], [48.9, 26647.0], [49.0, 26672.0], [49.1, 26672.0], [49.2, 26690.0], [49.3, 26720.0], [49.4, 26731.0], [49.5, 26731.0], [49.6, 26850.0], [49.7, 26894.0], [49.8, 26957.0], [49.9, 26957.0], [50.0, 26971.0], [50.1, 26982.0], [50.2, 26982.0], [50.3, 27048.0], [50.4, 27076.0], [50.5, 27089.0], [50.6, 27089.0], [50.7, 27136.0], [50.8, 27137.0], [50.9, 27164.0], [51.0, 27164.0], [51.1, 27167.0], [51.2, 27195.0], [51.3, 27254.0], [51.4, 27254.0], [51.5, 27279.0], [51.6, 27393.0], [51.7, 27393.0], [51.8, 27470.0], [51.9, 27479.0], [52.0, 27489.0], [52.1, 27489.0], [52.2, 27489.0], [52.3, 27538.0], [52.4, 27548.0], [52.5, 27548.0], [52.6, 27548.0], [52.7, 27564.0], [52.8, 27571.0], [52.9, 27571.0], [53.0, 27580.0], [53.1, 27586.0], [53.2, 27592.0], [53.3, 27592.0], [53.4, 27641.0], [53.5, 27644.0], [53.6, 27644.0], [53.7, 27685.0], [53.8, 27689.0], [53.9, 27692.0], [54.0, 27692.0], [54.1, 27706.0], [54.2, 27725.0], [54.3, 27772.0], [54.4, 27772.0], [54.5, 27777.0], [54.6, 27784.0], [54.7, 27791.0], [54.8, 27791.0], [54.9, 27799.0], [55.0, 27912.0], [55.1, 27912.0], [55.2, 27916.0], [55.3, 27932.0], [55.4, 27947.0], [55.5, 27947.0], [55.6, 27958.0], [55.7, 28046.0], [55.8, 28046.0], [55.9, 28046.0], [56.0, 28047.0], [56.1, 28050.0], [56.2, 28084.0], [56.3, 28084.0], [56.4, 28087.0], [56.5, 28264.0], [56.6, 28270.0], [56.7, 28270.0], [56.8, 28279.0], [56.9, 28284.0], [57.0, 28284.0], [57.1, 28291.0], [57.2, 28321.0], [57.3, 28322.0], [57.4, 28322.0], [57.5, 28325.0], [57.6, 28331.0], [57.7, 28353.0], [57.8, 28353.0], [57.9, 28407.0], [58.0, 28409.0], [58.1, 28425.0], [58.2, 28425.0], [58.3, 28459.0], [58.4, 28460.0], [58.5, 28460.0], [58.6, 28474.0], [58.7, 28513.0], [58.8, 28519.0], [58.9, 28519.0], [59.0, 28539.0], [59.1, 28581.0], [59.2, 28620.0], [59.3, 28620.0], [59.4, 28632.0], [59.5, 28646.0], [59.6, 28658.0], [59.7, 28658.0], [59.8, 28682.0], [59.9, 28686.0], [60.0, 28692.0], [60.1, 28692.0], [60.2, 28699.0], [60.3, 28708.0], [60.4, 28708.0], [60.5, 28719.0], [60.6, 28725.0], [60.7, 28756.0], [60.8, 28756.0], [60.9, 28761.0], [61.0, 28766.0], [61.1, 28773.0], [61.2, 28773.0], [61.3, 28778.0], [61.4, 28805.0], [61.5, 28812.0], [61.6, 28812.0], [61.7, 28822.0], [61.8, 28832.0], [61.9, 28832.0], [62.0, 28857.0], [62.1, 28869.0], [62.2, 28892.0], [62.3, 28892.0], [62.4, 28899.0], [62.5, 28899.0], [62.6, 28960.0], [62.7, 28960.0], [62.8, 28961.0], [62.9, 28963.0], [63.0, 28970.0], [63.1, 28970.0], [63.2, 28971.0], [63.3, 28972.0], [63.4, 28972.0], [63.5, 29016.0], [63.6, 29029.0], [63.7, 29032.0], [63.8, 29032.0], [63.9, 29044.0], [64.0, 29058.0], [64.1, 29072.0], [64.2, 29072.0], [64.3, 29081.0], [64.4, 29082.0], [64.5, 29085.0], [64.6, 29085.0], [64.7, 29116.0], [64.8, 29121.0], [64.9, 29121.0], [65.0, 29121.0], [65.1, 29130.0], [65.2, 29133.0], [65.3, 29133.0], [65.4, 29139.0], [65.5, 29157.0], [65.6, 29164.0], [65.7, 29164.0], [65.8, 29177.0], [65.9, 29194.0], [66.0, 29204.0], [66.1, 29204.0], [66.2, 29226.0], [66.3, 29230.0], [66.4, 29231.0], [66.5, 29231.0], [66.6, 29238.0], [66.7, 29248.0], [66.8, 29248.0], [66.9, 29248.0], [67.0, 29251.0], [67.1, 29252.0], [67.2, 29252.0], [67.3, 29267.0], [67.4, 29268.0], [67.5, 29283.0], [67.6, 29283.0], [67.7, 29311.0], [67.8, 29312.0], [67.9, 29315.0], [68.0, 29315.0], [68.1, 29316.0], [68.2, 29318.0], [68.3, 29330.0], [68.4, 29330.0], [68.5, 29330.0], [68.6, 29345.0], [68.7, 29345.0], [68.8, 29348.0], [68.9, 29351.0], [69.0, 29363.0], [69.1, 29363.0], [69.2, 29363.0], [69.3, 29373.0], [69.4, 29376.0], [69.5, 29376.0], [69.6, 29379.0], [69.7, 29380.0], [69.8, 29383.0], [69.9, 29383.0], [70.0, 29383.0], [70.1, 29390.0], [70.2, 29390.0], [70.3, 29393.0], [70.4, 29400.0], [70.5, 29400.0], [70.6, 29400.0], [70.7, 29404.0], [70.8, 29411.0], [70.9, 29412.0], [71.0, 29412.0], [71.1, 29414.0], [71.2, 29415.0], [71.3, 29418.0], [71.4, 29418.0], [71.5, 29433.0], [71.6, 29437.0], [71.7, 29437.0], [71.8, 29437.0], [71.9, 29454.0], [72.0, 29454.0], [72.1, 29454.0], [72.2, 29457.0], [72.3, 29459.0], [72.4, 29462.0], [72.5, 29462.0], [72.6, 29466.0], [72.7, 29466.0], [72.8, 29466.0], [72.9, 29466.0], [73.0, 29469.0], [73.1, 29473.0], [73.2, 29474.0], [73.3, 29474.0], [73.4, 29480.0], [73.5, 29481.0], [73.6, 29481.0], [73.7, 29483.0], [73.8, 29485.0], [73.9, 29496.0], [74.0, 29496.0], [74.1, 29501.0], [74.2, 29503.0], [74.3, 29504.0], [74.4, 29504.0], [74.5, 29505.0], [74.6, 29511.0], [74.7, 29516.0], [74.8, 29516.0], [74.9, 29516.0], [75.0, 29520.0], [75.1, 29520.0], [75.2, 29523.0], [75.3, 29530.0], [75.4, 29532.0], [75.5, 29532.0], [75.6, 29544.0], [75.7, 29550.0], [75.8, 29552.0], [75.9, 29552.0], [76.0, 29553.0], [76.1, 29553.0], [76.2, 29556.0], [76.3, 29556.0], [76.4, 29559.0], [76.5, 29566.0], [76.6, 29569.0], [76.7, 29569.0], [76.8, 29571.0], [76.9, 29576.0], [77.0, 29576.0], [77.1, 29576.0], [77.2, 29579.0], [77.3, 29580.0], [77.4, 29580.0], [77.5, 29588.0], [77.6, 29588.0], [77.7, 29594.0], [77.8, 29594.0], [77.9, 29595.0], [78.0, 29597.0], [78.1, 29600.0], [78.2, 29600.0], [78.3, 29604.0], [78.4, 29605.0], [78.5, 29605.0], [78.6, 29608.0], [78.7, 29610.0], [78.8, 29611.0], [78.9, 29611.0], [79.0, 29611.0], [79.1, 29612.0], [79.2, 29613.0], [79.3, 29613.0], [79.4, 29615.0], [79.5, 29624.0], [79.6, 29626.0], [79.7, 29626.0], [79.8, 29628.0], [79.9, 29630.0], [80.0, 29634.0], [80.1, 29634.0], [80.2, 29640.0], [80.3, 29642.0], [80.4, 29642.0], [80.5, 29645.0], [80.6, 29649.0], [80.7, 29650.0], [80.8, 29650.0], [80.9, 29652.0], [81.0, 29654.0], [81.1, 29655.0], [81.2, 29655.0], [81.3, 29657.0], [81.4, 29660.0], [81.5, 29667.0], [81.6, 29667.0], [81.7, 29670.0], [81.8, 29671.0], [81.9, 29671.0], [82.0, 29679.0], [82.1, 29682.0], [82.2, 29683.0], [82.3, 29683.0], [82.4, 29686.0], [82.5, 29693.0], [82.6, 29693.0], [82.7, 29693.0], [82.8, 29695.0], [82.9, 29696.0], [83.0, 29707.0], [83.1, 29707.0], [83.2, 29709.0], [83.3, 29710.0], [83.4, 29710.0], [83.5, 29713.0], [83.6, 29714.0], [83.7, 29723.0], [83.8, 29723.0], [83.9, 29726.0], [84.0, 29730.0], [84.1, 29734.0], [84.2, 29734.0], [84.3, 29740.0], [84.4, 29746.0], [84.5, 29751.0], [84.6, 29751.0], [84.7, 29762.0], [84.8, 29763.0], [84.9, 29763.0], [85.0, 29763.0], [85.1, 29776.0], [85.2, 29781.0], [85.3, 29781.0], [85.4, 29788.0], [85.5, 29790.0], [85.6, 29800.0], [85.7, 29800.0], [85.8, 29807.0], [85.9, 29810.0], [86.0, 29817.0], [86.1, 29817.0], [86.2, 29823.0], [86.3, 29825.0], [86.4, 29827.0], [86.5, 29827.0], [86.6, 29842.0], [86.7, 29847.0], [86.8, 29847.0], [86.9, 29876.0], [87.0, 29879.0], [87.1, 29879.0], [87.2, 29879.0], [87.3, 29881.0], [87.4, 29890.0], [87.5, 29906.0], [87.6, 29906.0], [87.7, 29908.0], [87.8, 29920.0], [87.9, 29920.0], [88.0, 29920.0], [88.1, 29921.0], [88.2, 29929.0], [88.3, 29938.0], [88.4, 29938.0], [88.5, 29946.0], [88.6, 29949.0], [88.7, 29949.0], [88.8, 29952.0], [88.9, 29958.0], [89.0, 29962.0], [89.1, 29962.0], [89.2, 29965.0], [89.3, 29977.0], [89.4, 29982.0], [89.5, 29982.0], [89.6, 29991.0], [89.7, 29996.0], [89.8, 30000.0], [89.9, 30000.0], [90.0, 30017.0], [90.1, 30017.0], [90.2, 30017.0], [90.3, 30035.0], [90.4, 30041.0], [90.5, 30047.0], [90.6, 30047.0], [90.7, 30055.0], [90.8, 30081.0], [90.9, 30093.0], [91.0, 30093.0], [91.1, 30124.0], [91.2, 30132.0], [91.3, 30133.0], [91.4, 30133.0], [91.5, 30158.0], [91.6, 30174.0], [91.7, 30174.0], [91.8, 30179.0], [91.9, 30195.0], [92.0, 30197.0], [92.1, 30197.0], [92.2, 30209.0], [92.3, 30219.0], [92.4, 30229.0], [92.5, 30229.0], [92.6, 30259.0], [92.7, 30270.0], [92.8, 30275.0], [92.9, 30275.0], [93.0, 30343.0], [93.1, 30363.0], [93.2, 30370.0], [93.3, 30370.0], [93.4, 30390.0], [93.5, 30418.0], [93.6, 30418.0], [93.7, 30489.0], [93.8, 30542.0], [93.9, 30962.0], [94.0, 30962.0], [94.1, 31050.0], [94.2, 31216.0], [94.3, 31220.0], [94.4, 31220.0], [94.5, 31220.0], [94.6, 31255.0], [94.7, 31271.0], [94.8, 31271.0], [94.9, 31376.0], [95.0, 31541.0], [95.1, 31541.0], [95.2, 32089.0], [95.3, 32166.0], [95.4, 32343.0], [95.5, 32343.0], [95.6, 32430.0], [95.7, 32583.0], [95.8, 32650.0], [95.9, 32650.0], [96.0, 32675.0], [96.1, 33116.0], [96.2, 33295.0], [96.3, 33295.0], [96.4, 33892.0], [96.5, 34006.0], [96.6, 34427.0], [96.7, 34427.0], [96.8, 34652.0], [96.9, 34897.0], [97.0, 34897.0], [97.1, 35469.0], [97.2, 36250.0], [97.3, 36433.0], [97.4, 36433.0], [97.5, 36608.0], [97.6, 37257.0], [97.7, 37747.0], [97.8, 37747.0], [97.9, 38002.0], [98.0, 38602.0], [98.1, 39668.0], [98.2, 39668.0], [98.3, 39821.0], [98.4, 40658.0], [98.5, 40658.0], [98.6, 40855.0], [98.7, 41874.0], [98.8, 42117.0], [98.9, 42117.0], [99.0, 42604.0], [99.1, 42710.0], [99.2, 43533.0], [99.3, 43533.0], [99.4, 44070.0], [99.5, 44437.0], [99.6, 44640.0], [99.7, 44640.0], [99.8, 44841.0], [99.9, 45270.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 36.0, "series": [{"data": [[33100.0, 1.0], [37700.0, 1.0], [42100.0, 1.0], [42700.0, 1.0], [43500.0, 1.0], [3000.0, 1.0], [5900.0, 1.0], [8000.0, 1.0], [10600.0, 1.0], [13200.0, 1.0], [15600.0, 1.0], [17400.0, 8.0], [17100.0, 6.0], [17200.0, 5.0], [17300.0, 3.0], [17000.0, 9.0], [16800.0, 1.0], [16700.0, 7.0], [16900.0, 4.0], [16600.0, 1.0], [17500.0, 2.0], [17800.0, 4.0], [18400.0, 1.0], [18000.0, 8.0], [17700.0, 3.0], [17900.0, 2.0], [18300.0, 2.0], [18100.0, 2.0], [17600.0, 1.0], [19400.0, 5.0], [19200.0, 2.0], [18600.0, 3.0], [19300.0, 5.0], [18500.0, 2.0], [19000.0, 4.0], [19100.0, 2.0], [18900.0, 1.0], [20300.0, 4.0], [20000.0, 6.0], [20100.0, 2.0], [19900.0, 3.0], [20200.0, 3.0], [19800.0, 2.0], [20400.0, 1.0], [19600.0, 2.0], [19500.0, 1.0], [21500.0, 4.0], [20600.0, 2.0], [21200.0, 2.0], [21000.0, 3.0], [21400.0, 3.0], [21100.0, 2.0], [20800.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [22300.0, 4.0], [21700.0, 3.0], [22400.0, 3.0], [22500.0, 1.0], [22100.0, 4.0], [22200.0, 2.0], [22000.0, 5.0], [21600.0, 7.0], [21800.0, 2.0], [21900.0, 2.0], [23300.0, 12.0], [22900.0, 1.0], [23400.0, 2.0], [23200.0, 2.0], [23000.0, 4.0], [23100.0, 4.0], [23500.0, 4.0], [22800.0, 3.0], [22600.0, 2.0], [22700.0, 1.0], [23600.0, 5.0], [23900.0, 4.0], [24100.0, 3.0], [24000.0, 8.0], [24500.0, 4.0], [24400.0, 4.0], [23700.0, 8.0], [23800.0, 5.0], [24300.0, 4.0], [24200.0, 7.0], [25400.0, 6.0], [25500.0, 6.0], [25100.0, 4.0], [24800.0, 7.0], [25300.0, 7.0], [25200.0, 6.0], [24600.0, 7.0], [24700.0, 2.0], [25000.0, 7.0], [24900.0, 5.0], [25600.0, 6.0], [25900.0, 6.0], [26400.0, 4.0], [26500.0, 4.0], [26000.0, 4.0], [26100.0, 2.0], [25800.0, 5.0], [26600.0, 4.0], [26200.0, 3.0], [26300.0, 2.0], [25700.0, 3.0], [27500.0, 8.0], [27100.0, 5.0], [27200.0, 2.0], [27300.0, 1.0], [26700.0, 2.0], [26900.0, 3.0], [27600.0, 5.0], [26800.0, 2.0], [27000.0, 3.0], [27400.0, 4.0], [28600.0, 8.0], [27700.0, 7.0], [28400.0, 6.0], [28200.0, 5.0], [28500.0, 4.0], [28300.0, 5.0], [27900.0, 5.0], [28000.0, 6.0], [28900.0, 6.0], [29400.0, 27.0], [28800.0, 9.0], [29500.0, 30.0], [29600.0, 36.0], [29100.0, 10.0], [29000.0, 9.0], [29200.0, 12.0], [29300.0, 20.0], [28700.0, 8.0], [30500.0, 1.0], [30200.0, 6.0], [30300.0, 4.0], [30400.0, 2.0], [30100.0, 8.0], [29900.0, 17.0], [29800.0, 14.0], [29700.0, 19.0], [30000.0, 9.0], [31300.0, 1.0], [31200.0, 5.0], [31000.0, 1.0], [31500.0, 1.0], [30900.0, 1.0], [32600.0, 2.0], [32300.0, 1.0], [32000.0, 1.0], [32100.0, 1.0], [32500.0, 1.0], [32400.0, 1.0], [34400.0, 1.0], [33200.0, 1.0], [34800.0, 1.0], [34000.0, 1.0], [33800.0, 1.0], [34600.0, 1.0], [36600.0, 1.0], [36400.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [38000.0, 1.0], [37200.0, 1.0], [38600.0, 1.0], [39600.0, 1.0], [39800.0, 1.0], [40800.0, 1.0], [40600.0, 1.0], [42600.0, 1.0], [41800.0, 1.0], [44000.0, 1.0], [44400.0, 1.0], [44800.0, 1.0], [44600.0, 1.0], [45200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.538461538461538, "minX": 1.602477E12, "maxY": 10.0, "series": [{"data": [[1.60247718E12, 10.0], [1.60247748E12, 10.0], [1.60247778E12, 10.0], [1.60247808E12, 10.0], [1.6024782E12, 10.0], [1.6024779E12, 10.0], [1.6024788E12, 10.0], [1.6024785E12, 10.0], [1.60247892E12, 6.538461538461538], [1.602477E12, 10.0], [1.60247862E12, 10.0], [1.6024773E12, 10.0], [1.6024776E12, 10.0], [1.60247742E12, 10.0], [1.60247772E12, 10.0], [1.60247832E12, 10.0], [1.60247802E12, 10.0], [1.60247844E12, 10.0], [1.60247814E12, 10.0], [1.60247712E12, 10.0], [1.60247874E12, 10.0], [1.60247724E12, 10.0], [1.60247886E12, 10.0], [1.60247754E12, 10.0], [1.60247784E12, 10.0], [1.60247766E12, 10.0], [1.60247796E12, 10.0], [1.60247856E12, 10.0], [1.60247826E12, 10.0], [1.60247868E12, 10.0], [1.60247838E12, 10.0], [1.60247706E12, 10.0], [1.60247736E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247892E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17093.0, "minX": 1.0, "maxY": 26152.1611570248, "series": [{"data": [[8.0, 17220.0], [4.0, 17425.0], [2.0, 17197.0], [1.0, 17669.0], [9.0, 17093.0], [10.0, 26152.1611570248], [5.0, 17461.0], [6.0, 17412.0], [3.0, 17267.0], [7.0, 17314.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26044.25442176871]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 87.26666666666667, "minX": 1.602477E12, "maxY": 172642.91666666666, "series": [{"data": [[1.60247718E12, 59520.333333333336], [1.60247748E12, 45768.98333333333], [1.60247778E12, 172642.91666666666], [1.60247808E12, 68703.3], [1.6024782E12, 31303.3], [1.6024779E12, 135003.18333333332], [1.6024788E12, 148561.76666666666], [1.6024785E12, 48497.48333333333], [1.60247892E12, 11364.833333333334], [1.602477E12, 164758.25], [1.60247862E12, 43274.78333333333], [1.6024773E12, 48137.166666666664], [1.6024776E12, 42389.03333333333], [1.60247742E12, 48149.183333333334], [1.60247772E12, 29133.683333333334], [1.60247832E12, 49737.416666666664], [1.60247802E12, 59807.2], [1.60247844E12, 53862.166666666664], [1.60247814E12, 75642.23333333334], [1.60247712E12, 141359.03333333333], [1.60247874E12, 35821.65], [1.60247724E12, 78140.98333333334], [1.60247886E12, 76322.61666666667], [1.60247754E12, 56335.65], [1.60247784E12, 72748.35], [1.60247766E12, 44842.433333333334], [1.60247796E12, 166808.26666666666], [1.60247856E12, 49117.01666666667], [1.60247826E12, 45868.066666666666], [1.60247868E12, 25752.516666666666], [1.60247838E12, 45127.13333333333], [1.60247706E12, 103710.95], [1.60247736E12, 45203.46666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60247718E12, 132.85], [1.60247748E12, 146.11666666666667], [1.60247778E12, 231.83333333333334], [1.60247808E12, 171.16666666666666], [1.6024782E12, 124.18333333333334], [1.6024779E12, 183.6], [1.6024788E12, 192.51666666666668], [1.6024785E12, 153.43333333333334], [1.60247892E12, 87.26666666666667], [1.602477E12, 102.43333333333334], [1.60247862E12, 160.58333333333334], [1.6024773E12, 161.03333333333333], [1.6024776E12, 146.05], [1.60247742E12, 146.13333333333333], [1.60247772E12, 167.9], [1.60247832E12, 146.15], [1.60247802E12, 202.31666666666666], [1.60247844E12, 154.38333333333333], [1.60247814E12, 176.53333333333333], [1.60247712E12, 157.56666666666666], [1.60247874E12, 190.63333333333333], [1.60247724E12, 176.26666666666668], [1.60247886E12, 165.5], [1.60247754E12, 153.66666666666666], [1.60247784E12, 176.7], [1.60247766E12, 160.65], [1.60247796E12, 190.41666666666666], [1.60247856E12, 146.1], [1.60247826E12, 153.43333333333334], [1.60247868E12, 175.01666666666668], [1.60247838E12, 146.11666666666667], [1.60247706E12, 214.61666666666667], [1.60247736E12, 146.11666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247892E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17144.153846153848, "minX": 1.602477E12, "maxY": 38328.94444444444, "series": [{"data": [[1.60247718E12, 38328.94444444444], [1.60247748E12, 29606.45], [1.60247778E12, 19716.093749999996], [1.60247808E12, 27410.347826086956], [1.6024782E12, 34862.0], [1.6024779E12, 21563.769230769234], [1.6024788E12, 22756.2962962963], [1.6024785E12, 29066.47619047619], [1.60247892E12, 17144.153846153848], [1.602477E12, 17547.785714285717], [1.60247862E12, 28100.545454545456], [1.6024773E12, 27520.318181818184], [1.6024776E12, 29564.000000000004], [1.60247742E12, 29682.1], [1.60247772E12, 25376.17391304348], [1.60247832E12, 29706.649999999998], [1.60247802E12, 18671.448275862065], [1.60247844E12, 28380.428571428572], [1.60247814E12, 24190.500000000004], [1.60247712E12, 22245.666666666664], [1.60247874E12, 23732.88461538462], [1.60247724E12, 24689.666666666664], [1.60247886E12, 27225.08695652174], [1.60247754E12, 29185.047619047615], [1.60247784E12, 24722.2], [1.60247766E12, 28871.63636363636], [1.60247796E12, 24047.499999999996], [1.60247856E12, 29701.55], [1.60247826E12, 29256.714285714286], [1.60247868E12, 24708.500000000007], [1.60247838E12, 29802.35], [1.60247706E12, 21980.0], [1.60247736E12, 29844.3]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247892E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17142.30769230769, "minX": 1.602477E12, "maxY": 38327.166666666664, "series": [{"data": [[1.60247718E12, 38327.166666666664], [1.60247748E12, 29605.250000000004], [1.60247778E12, 19712.343749999996], [1.60247808E12, 27408.826086956524], [1.6024782E12, 34861.23529411765], [1.6024779E12, 21560.46153846154], [1.6024788E12, 22752.37037037037], [1.6024785E12, 29065.285714285714], [1.60247892E12, 17142.30769230769], [1.602477E12, 17542.714285714283], [1.60247862E12, 28099.636363636364], [1.6024773E12, 27519.272727272728], [1.6024776E12, 29562.899999999998], [1.60247742E12, 29680.9], [1.60247772E12, 25375.304347826088], [1.60247832E12, 29705.25], [1.60247802E12, 18669.965517241377], [1.60247844E12, 28379.095238095237], [1.60247814E12, 24188.916666666668], [1.60247712E12, 22242.095238095237], [1.60247874E12, 23732.07692307692], [1.60247724E12, 24688.041666666668], [1.60247886E12, 27222.86956521739], [1.60247754E12, 29183.571428571428], [1.60247784E12, 24719.879999999997], [1.60247766E12, 28870.45454545454], [1.60247796E12, 24044.269230769234], [1.60247856E12, 29700.2], [1.60247826E12, 29255.571428571428], [1.60247868E12, 24707.749999999996], [1.60247838E12, 29801.3], [1.60247706E12, 21978.13333333333], [1.60247736E12, 29843.350000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247892E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.602477E12, "maxY": 5.928571428571429, "series": [{"data": [[1.60247718E12, 0.7222222222222224], [1.60247748E12, 0.6000000000000001], [1.60247778E12, 0.5], [1.60247808E12, 0.391304347826087], [1.6024782E12, 0.11764705882352944], [1.6024779E12, 0.23076923076923075], [1.6024788E12, 0.40740740740740733], [1.6024785E12, 0.47619047619047616], [1.60247892E12, 0.3076923076923077], [1.602477E12, 5.928571428571429], [1.60247862E12, 0.5], [1.6024773E12, 0.5909090909090909], [1.6024776E12, 0.39999999999999997], [1.60247742E12, 0.45], [1.60247772E12, 0.608695652173913], [1.60247832E12, 0.7500000000000001], [1.60247802E12, 0.5172413793103446], [1.60247844E12, 0.7142857142857143], [1.60247814E12, 0.4166666666666667], [1.60247712E12, 0.0], [1.60247874E12, 0.4615384615384616], [1.60247724E12, 0.5833333333333335], [1.60247886E12, 0.34782608695652173], [1.60247754E12, 0.2857142857142857], [1.60247784E12, 0.19999999999999998], [1.60247766E12, 0.6818181818181818], [1.60247796E12, 0.3846153846153846], [1.60247856E12, 0.3], [1.60247826E12, 0.6666666666666669], [1.60247868E12, 0.29166666666666663], [1.60247838E12, 0.10000000000000002], [1.60247706E12, 0.6333333333333334], [1.60247736E12, 0.15]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247892E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3082.0, "minX": 1.602477E12, "maxY": 45270.0, "series": [{"data": [[1.60247718E12, 45270.0], [1.60247748E12, 29996.0], [1.60247778E12, 25262.0], [1.60247808E12, 32166.0], [1.6024782E12, 42710.0], [1.6024779E12, 25532.0], [1.6024788E12, 28087.0], [1.6024785E12, 29667.0], [1.60247892E12, 17669.0], [1.602477E12, 25930.0], [1.60247862E12, 30000.0], [1.6024773E12, 30370.0], [1.6024776E12, 29842.0], [1.60247742E12, 30275.0], [1.60247772E12, 28322.0], [1.60247832E12, 29938.0], [1.60247802E12, 25918.0], [1.60247844E12, 29611.0], [1.60247814E12, 25870.0], [1.60247712E12, 30209.0], [1.60247874E12, 27586.0], [1.60247724E12, 28646.0], [1.60247886E12, 37747.0], [1.60247754E12, 29763.0], [1.60247784E12, 31271.0], [1.60247766E12, 29817.0], [1.60247796E12, 28513.0], [1.60247856E12, 30259.0], [1.60247826E12, 32650.0], [1.60247868E12, 28050.0], [1.60247838E12, 30390.0], [1.60247706E12, 27592.0], [1.60247736E12, 30418.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60247718E12, 29473.0], [1.60247748E12, 29363.0], [1.60247778E12, 16780.0], [1.60247808E12, 22631.0], [1.6024782E12, 24313.0], [1.6024779E12, 17055.0], [1.6024788E12, 18348.0], [1.6024785E12, 28291.0], [1.60247892E12, 16610.0], [1.602477E12, 3082.0], [1.60247862E12, 24625.0], [1.6024773E12, 24167.0], [1.6024776E12, 29379.0], [1.60247742E12, 29121.0], [1.60247772E12, 23100.0], [1.60247832E12, 29345.0], [1.60247802E12, 16723.0], [1.60247844E12, 27470.0], [1.60247814E12, 22244.0], [1.60247712E12, 17423.0], [1.60247874E12, 20846.0], [1.60247724E12, 22296.0], [1.60247886E12, 16782.0], [1.60247754E12, 28474.0], [1.60247784E12, 18613.0], [1.60247766E12, 26065.0], [1.60247796E12, 19342.0], [1.60247856E12, 29081.0], [1.60247826E12, 26093.0], [1.60247868E12, 21425.0], [1.60247838E12, 29418.0], [1.60247706E12, 17152.0], [1.60247736E12, 29504.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60247718E12, 29473.0], [1.60247748E12, 29363.0], [1.60247778E12, 16780.0], [1.60247808E12, 22631.0], [1.6024782E12, 24313.0], [1.6024779E12, 17055.0], [1.6024788E12, 18348.0], [1.6024785E12, 28291.0], [1.60247892E12, 16610.0], [1.602477E12, 3082.0], [1.60247862E12, 24625.0], [1.6024773E12, 24167.0], [1.6024776E12, 29379.0], [1.60247742E12, 29121.0], [1.60247772E12, 23100.0], [1.60247832E12, 29345.0], [1.60247802E12, 16723.0], [1.60247844E12, 27470.0], [1.60247814E12, 22244.0], [1.60247712E12, 17423.0], [1.60247874E12, 20846.0], [1.60247724E12, 22296.0], [1.60247886E12, 16782.0], [1.60247754E12, 28474.0], [1.60247784E12, 18613.0], [1.60247766E12, 26065.0], [1.60247796E12, 19342.0], [1.60247856E12, 29081.0], [1.60247826E12, 26093.0], [1.60247868E12, 21425.0], [1.60247838E12, 29418.0], [1.60247706E12, 17152.0], [1.60247736E12, 29504.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60247718E12, 29473.0], [1.60247748E12, 29363.0], [1.60247778E12, 16780.0], [1.60247808E12, 22631.0], [1.6024782E12, 24313.0], [1.6024779E12, 17055.0], [1.6024788E12, 18348.0], [1.6024785E12, 28291.0], [1.60247892E12, 16610.0], [1.602477E12, 3082.0], [1.60247862E12, 24625.0], [1.6024773E12, 24167.0], [1.6024776E12, 29379.0], [1.60247742E12, 29121.0], [1.60247772E12, 23100.0], [1.60247832E12, 29345.0], [1.60247802E12, 16723.0], [1.60247844E12, 27470.0], [1.60247814E12, 22244.0], [1.60247712E12, 17423.0], [1.60247874E12, 20846.0], [1.60247724E12, 22296.0], [1.60247886E12, 16782.0], [1.60247754E12, 28474.0], [1.60247784E12, 18613.0], [1.60247766E12, 26065.0], [1.60247796E12, 19342.0], [1.60247856E12, 29081.0], [1.60247826E12, 26093.0], [1.60247868E12, 21425.0], [1.60247838E12, 29418.0], [1.60247706E12, 17152.0], [1.60247736E12, 29504.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60247718E12, 29473.0], [1.60247748E12, 29363.0], [1.60247778E12, 16780.0], [1.60247808E12, 22631.0], [1.6024782E12, 24313.0], [1.6024779E12, 17055.0], [1.6024788E12, 18348.0], [1.6024785E12, 28291.0], [1.60247892E12, 16610.0], [1.602477E12, 3082.0], [1.60247862E12, 24625.0], [1.6024773E12, 24167.0], [1.6024776E12, 29379.0], [1.60247742E12, 29121.0], [1.60247772E12, 23100.0], [1.60247832E12, 29345.0], [1.60247802E12, 16723.0], [1.60247844E12, 27470.0], [1.60247814E12, 22244.0], [1.60247712E12, 17423.0], [1.60247874E12, 20846.0], [1.60247724E12, 22296.0], [1.60247886E12, 16782.0], [1.60247754E12, 28474.0], [1.60247784E12, 18613.0], [1.60247766E12, 26065.0], [1.60247796E12, 19342.0], [1.60247856E12, 29081.0], [1.60247826E12, 26093.0], [1.60247868E12, 21425.0], [1.60247838E12, 29418.0], [1.60247706E12, 17152.0], [1.60247736E12, 29504.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60247718E12, 38835.0], [1.60247748E12, 29594.5], [1.60247778E12, 18809.0], [1.60247808E12, 27912.0], [1.6024782E12, 35469.0], [1.6024779E12, 21502.5], [1.6024788E12, 21635.0], [1.6024785E12, 29139.0], [1.60247892E12, 17220.0], [1.602477E12, 19243.0], [1.60247862E12, 28791.5], [1.6024773E12, 27419.5], [1.6024776E12, 29537.0], [1.60247742E12, 29687.5], [1.60247772E12, 25600.0], [1.60247832E12, 29754.0], [1.60247802E12, 17580.0], [1.60247844E12, 28353.0], [1.60247814E12, 24163.0], [1.60247712E12, 22433.0], [1.60247874E12, 23757.5], [1.60247724E12, 24600.0], [1.60247886E12, 28761.0], [1.60247754E12, 29311.0], [1.60247784E12, 22166.0], [1.60247766E12, 29310.5], [1.60247796E12, 24055.5], [1.60247856E12, 29688.5], [1.60247826E12, 29373.0], [1.60247868E12, 24845.5], [1.60247838E12, 29747.0], [1.60247706E12, 20340.0], [1.60247736E12, 29877.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247892E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26971.0, "minX": 1.0, "maxY": 26971.0, "series": [{"data": [[1.0, 26971.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26970.0, "minX": 1.0, "maxY": 26970.0, "series": [{"data": [[1.0, 26970.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.602477E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60247718E12, 0.3], [1.60247748E12, 0.3333333333333333], [1.60247778E12, 0.5333333333333333], [1.60247808E12, 0.38333333333333336], [1.6024782E12, 0.2833333333333333], [1.6024779E12, 0.43333333333333335], [1.6024788E12, 0.45], [1.6024785E12, 0.35], [1.60247892E12, 0.05], [1.602477E12, 0.4], [1.60247862E12, 0.36666666666666664], [1.6024773E12, 0.36666666666666664], [1.6024776E12, 0.3333333333333333], [1.60247742E12, 0.3333333333333333], [1.60247772E12, 0.38333333333333336], [1.60247832E12, 0.3333333333333333], [1.60247802E12, 0.48333333333333334], [1.60247844E12, 0.35], [1.60247814E12, 0.4], [1.60247712E12, 0.35], [1.60247874E12, 0.43333333333333335], [1.60247724E12, 0.4], [1.60247886E12, 0.38333333333333336], [1.60247754E12, 0.35], [1.60247784E12, 0.4166666666666667], [1.60247766E12, 0.36666666666666664], [1.60247796E12, 0.43333333333333335], [1.60247856E12, 0.3333333333333333], [1.60247826E12, 0.35], [1.60247868E12, 0.4], [1.60247838E12, 0.3333333333333333], [1.60247706E12, 0.5], [1.60247736E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247892E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.602477E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60247718E12, 0.3], [1.60247748E12, 0.3333333333333333], [1.60247778E12, 0.5333333333333333], [1.60247808E12, 0.38333333333333336], [1.6024782E12, 0.2833333333333333], [1.6024779E12, 0.43333333333333335], [1.6024788E12, 0.45], [1.6024785E12, 0.35], [1.60247892E12, 0.21666666666666667], [1.602477E12, 0.23333333333333334], [1.60247862E12, 0.36666666666666664], [1.6024773E12, 0.36666666666666664], [1.6024776E12, 0.3333333333333333], [1.60247742E12, 0.3333333333333333], [1.60247772E12, 0.38333333333333336], [1.60247832E12, 0.3333333333333333], [1.60247802E12, 0.48333333333333334], [1.60247844E12, 0.35], [1.60247814E12, 0.4], [1.60247712E12, 0.35], [1.60247874E12, 0.43333333333333335], [1.60247724E12, 0.4], [1.60247886E12, 0.38333333333333336], [1.60247754E12, 0.35], [1.60247784E12, 0.4166666666666667], [1.60247766E12, 0.36666666666666664], [1.60247796E12, 0.43333333333333335], [1.60247856E12, 0.3333333333333333], [1.60247826E12, 0.35], [1.60247868E12, 0.4], [1.60247838E12, 0.3333333333333333], [1.60247706E12, 0.5], [1.60247736E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247892E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.602477E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60247718E12, 0.3], [1.60247748E12, 0.3333333333333333], [1.60247778E12, 0.5333333333333333], [1.60247808E12, 0.38333333333333336], [1.6024782E12, 0.2833333333333333], [1.6024779E12, 0.43333333333333335], [1.6024788E12, 0.45], [1.6024785E12, 0.35], [1.60247892E12, 0.21666666666666667], [1.602477E12, 0.23333333333333334], [1.60247862E12, 0.36666666666666664], [1.6024773E12, 0.36666666666666664], [1.6024776E12, 0.3333333333333333], [1.60247742E12, 0.3333333333333333], [1.60247772E12, 0.38333333333333336], [1.60247832E12, 0.3333333333333333], [1.60247802E12, 0.48333333333333334], [1.60247844E12, 0.35], [1.60247814E12, 0.4], [1.60247712E12, 0.35], [1.60247874E12, 0.43333333333333335], [1.60247724E12, 0.4], [1.60247886E12, 0.38333333333333336], [1.60247754E12, 0.35], [1.60247784E12, 0.4166666666666667], [1.60247766E12, 0.36666666666666664], [1.60247796E12, 0.43333333333333335], [1.60247856E12, 0.3333333333333333], [1.60247826E12, 0.35], [1.60247868E12, 0.4], [1.60247838E12, 0.3333333333333333], [1.60247706E12, 0.5], [1.60247736E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247892E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.602477E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60247718E12, 0.3], [1.60247748E12, 0.3333333333333333], [1.60247778E12, 0.5333333333333333], [1.60247808E12, 0.38333333333333336], [1.6024782E12, 0.2833333333333333], [1.6024779E12, 0.43333333333333335], [1.6024788E12, 0.45], [1.6024785E12, 0.35], [1.60247892E12, 0.21666666666666667], [1.602477E12, 0.23333333333333334], [1.60247862E12, 0.36666666666666664], [1.6024773E12, 0.36666666666666664], [1.6024776E12, 0.3333333333333333], [1.60247742E12, 0.3333333333333333], [1.60247772E12, 0.38333333333333336], [1.60247832E12, 0.3333333333333333], [1.60247802E12, 0.48333333333333334], [1.60247844E12, 0.35], [1.60247814E12, 0.4], [1.60247712E12, 0.35], [1.60247874E12, 0.43333333333333335], [1.60247724E12, 0.4], [1.60247886E12, 0.38333333333333336], [1.60247754E12, 0.35], [1.60247784E12, 0.4166666666666667], [1.60247766E12, 0.36666666666666664], [1.60247796E12, 0.43333333333333335], [1.60247856E12, 0.3333333333333333], [1.60247826E12, 0.35], [1.60247868E12, 0.4], [1.60247838E12, 0.3333333333333333], [1.60247706E12, 0.5], [1.60247736E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247892E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

