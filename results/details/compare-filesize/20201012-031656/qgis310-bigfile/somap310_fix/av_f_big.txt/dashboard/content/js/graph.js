/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3161.0, "minX": 0.0, "maxY": 44762.0, "series": [{"data": [[0.0, 3161.0], [0.1, 3161.0], [0.2, 6196.0], [0.3, 8413.0], [0.4, 8413.0], [0.5, 11254.0], [0.6, 13760.0], [0.7, 16228.0], [0.8, 16228.0], [0.9, 16978.0], [1.0, 17066.0], [1.1, 17099.0], [1.2, 17099.0], [1.3, 17211.0], [1.4, 17272.0], [1.5, 17288.0], [1.6, 17288.0], [1.7, 17306.0], [1.8, 17317.0], [1.9, 17317.0], [2.0, 17322.0], [2.1, 17347.0], [2.2, 17388.0], [2.3, 17388.0], [2.4, 17388.0], [2.5, 17401.0], [2.6, 17404.0], [2.7, 17404.0], [2.8, 17431.0], [2.9, 17435.0], [3.0, 17442.0], [3.1, 17442.0], [3.2, 17453.0], [3.3, 17473.0], [3.4, 17473.0], [3.5, 17501.0], [3.6, 17515.0], [3.7, 17517.0], [3.8, 17517.0], [3.9, 17529.0], [4.0, 17547.0], [4.1, 17552.0], [4.2, 17552.0], [4.3, 17609.0], [4.4, 17641.0], [4.5, 17656.0], [4.6, 17656.0], [4.7, 17671.0], [4.8, 17689.0], [4.9, 17697.0], [5.0, 17697.0], [5.1, 17702.0], [5.2, 17739.0], [5.3, 17739.0], [5.4, 17740.0], [5.5, 17747.0], [5.6, 17749.0], [5.7, 17749.0], [5.8, 17761.0], [5.9, 17797.0], [6.0, 17798.0], [6.1, 17798.0], [6.2, 17818.0], [6.3, 17827.0], [6.4, 17831.0], [6.5, 17831.0], [6.6, 17852.0], [6.7, 17899.0], [6.8, 17899.0], [6.9, 17916.0], [7.0, 17933.0], [7.1, 17944.0], [7.2, 17944.0], [7.3, 17990.0], [7.4, 18014.0], [7.5, 18017.0], [7.6, 18017.0], [7.7, 18038.0], [7.8, 18059.0], [7.9, 18081.0], [8.0, 18081.0], [8.1, 18171.0], [8.2, 18235.0], [8.3, 18335.0], [8.4, 18335.0], [8.5, 18338.0], [8.6, 18378.0], [8.7, 18378.0], [8.8, 18384.0], [8.9, 18404.0], [9.0, 18446.0], [9.1, 18446.0], [9.2, 18456.0], [9.3, 18459.0], [9.4, 18497.0], [9.5, 18497.0], [9.6, 18545.0], [9.7, 18649.0], [9.8, 18667.0], [9.9, 18667.0], [10.0, 18669.0], [10.1, 18672.0], [10.2, 18672.0], [10.3, 18817.0], [10.4, 18865.0], [10.5, 18889.0], [10.6, 18889.0], [10.7, 18904.0], [10.8, 18936.0], [10.9, 18984.0], [11.0, 18984.0], [11.1, 19018.0], [11.2, 19020.0], [11.3, 19021.0], [11.4, 19021.0], [11.5, 19055.0], [11.6, 19082.0], [11.7, 19082.0], [11.8, 19088.0], [11.9, 19124.0], [12.0, 19208.0], [12.1, 19208.0], [12.2, 19218.0], [12.3, 19224.0], [12.4, 19279.0], [12.5, 19279.0], [12.6, 19295.0], [12.7, 19412.0], [12.8, 19430.0], [12.9, 19430.0], [13.0, 19616.0], [13.1, 19617.0], [13.2, 19669.0], [13.3, 19669.0], [13.4, 19740.0], [13.5, 19745.0], [13.6, 19745.0], [13.7, 19862.0], [13.8, 19941.0], [13.9, 19997.0], [14.0, 19997.0], [14.1, 20036.0], [14.2, 20092.0], [14.3, 20134.0], [14.4, 20134.0], [14.5, 20149.0], [14.6, 20177.0], [14.7, 20199.0], [14.8, 20199.0], [14.9, 20223.0], [15.0, 20241.0], [15.1, 20241.0], [15.2, 20276.0], [15.3, 20286.0], [15.4, 20294.0], [15.5, 20294.0], [15.6, 20301.0], [15.7, 20324.0], [15.8, 20324.0], [15.9, 20324.0], [16.0, 20340.0], [16.1, 20340.0], [16.2, 20390.0], [16.3, 20390.0], [16.4, 20433.0], [16.5, 20456.0], [16.6, 20561.0], [16.7, 20561.0], [16.8, 20588.0], [16.9, 20630.0], [17.0, 20630.0], [17.1, 20641.0], [17.2, 20875.0], [17.3, 20935.0], [17.4, 20935.0], [17.5, 20978.0], [17.6, 21089.0], [17.7, 21233.0], [17.8, 21233.0], [17.9, 21257.0], [18.0, 21284.0], [18.1, 21301.0], [18.2, 21301.0], [18.3, 21349.0], [18.4, 21372.0], [18.5, 21372.0], [18.6, 21422.0], [18.7, 21448.0], [18.8, 21522.0], [18.9, 21522.0], [19.0, 21523.0], [19.1, 21526.0], [19.2, 21570.0], [19.3, 21570.0], [19.4, 21648.0], [19.5, 21701.0], [19.6, 21712.0], [19.7, 21712.0], [19.8, 21722.0], [19.9, 21735.0], [20.0, 21784.0], [20.1, 21784.0], [20.2, 21846.0], [20.3, 21880.0], [20.4, 21880.0], [20.5, 21919.0], [20.6, 21982.0], [20.7, 22017.0], [20.8, 22017.0], [20.9, 22039.0], [21.0, 22111.0], [21.1, 22162.0], [21.2, 22162.0], [21.3, 22164.0], [21.4, 22182.0], [21.5, 22183.0], [21.6, 22183.0], [21.7, 22203.0], [21.8, 22236.0], [21.9, 22236.0], [22.0, 22316.0], [22.1, 22326.0], [22.2, 22332.0], [22.3, 22332.0], [22.4, 22336.0], [22.5, 22356.0], [22.6, 22380.0], [22.7, 22380.0], [22.8, 22381.0], [22.9, 22395.0], [23.0, 22417.0], [23.1, 22417.0], [23.2, 22424.0], [23.3, 22533.0], [23.4, 22533.0], [23.5, 22753.0], [23.6, 22838.0], [23.7, 22873.0], [23.8, 22873.0], [23.9, 22877.0], [24.0, 22891.0], [24.1, 22954.0], [24.2, 22954.0], [24.3, 22958.0], [24.4, 22958.0], [24.5, 22959.0], [24.6, 22959.0], [24.7, 22961.0], [24.8, 22979.0], [24.9, 22997.0], [25.0, 22997.0], [25.1, 23035.0], [25.2, 23070.0], [25.3, 23070.0], [25.4, 23221.0], [25.5, 23234.0], [25.6, 23297.0], [25.7, 23297.0], [25.8, 23359.0], [25.9, 23368.0], [26.0, 23397.0], [26.1, 23397.0], [26.2, 23407.0], [26.3, 23441.0], [26.4, 23459.0], [26.5, 23459.0], [26.6, 23492.0], [26.7, 23517.0], [26.8, 23517.0], [26.9, 23560.0], [27.0, 23576.0], [27.1, 23600.0], [27.2, 23600.0], [27.3, 23612.0], [27.4, 23667.0], [27.5, 23683.0], [27.6, 23683.0], [27.7, 23699.0], [27.8, 23701.0], [27.9, 23709.0], [28.0, 23709.0], [28.1, 23733.0], [28.2, 23734.0], [28.3, 23763.0], [28.4, 23763.0], [28.5, 23775.0], [28.6, 23839.0], [28.7, 23839.0], [28.8, 23843.0], [28.9, 23845.0], [29.0, 23871.0], [29.1, 23871.0], [29.2, 23881.0], [29.3, 23891.0], [29.4, 23906.0], [29.5, 23906.0], [29.6, 23917.0], [29.7, 23965.0], [29.8, 23972.0], [29.9, 23972.0], [30.0, 23979.0], [30.1, 23986.0], [30.2, 23986.0], [30.3, 23999.0], [30.4, 24003.0], [30.5, 24019.0], [30.6, 24019.0], [30.7, 24073.0], [30.8, 24074.0], [30.9, 24116.0], [31.0, 24116.0], [31.1, 24118.0], [31.2, 24124.0], [31.3, 24141.0], [31.4, 24141.0], [31.5, 24156.0], [31.6, 24157.0], [31.7, 24157.0], [31.8, 24160.0], [31.9, 24192.0], [32.0, 24236.0], [32.1, 24236.0], [32.2, 24289.0], [32.3, 24304.0], [32.4, 24314.0], [32.5, 24314.0], [32.6, 24317.0], [32.7, 24325.0], [32.8, 24347.0], [32.9, 24347.0], [33.0, 24350.0], [33.1, 24372.0], [33.2, 24395.0], [33.3, 24395.0], [33.4, 24395.0], [33.5, 24407.0], [33.6, 24407.0], [33.7, 24410.0], [33.8, 24463.0], [33.9, 24494.0], [34.0, 24494.0], [34.1, 24536.0], [34.2, 24551.0], [34.3, 24572.0], [34.4, 24572.0], [34.5, 24585.0], [34.6, 24609.0], [34.7, 24612.0], [34.8, 24612.0], [34.9, 24628.0], [35.0, 24667.0], [35.1, 24667.0], [35.2, 24671.0], [35.3, 24738.0], [35.4, 24769.0], [35.5, 24769.0], [35.6, 24808.0], [35.7, 24816.0], [35.8, 24889.0], [35.9, 24889.0], [36.0, 24907.0], [36.1, 24915.0], [36.2, 24925.0], [36.3, 24925.0], [36.4, 24935.0], [36.5, 24940.0], [36.6, 24947.0], [36.7, 24947.0], [36.8, 24958.0], [36.9, 24962.0], [37.0, 24962.0], [37.1, 24970.0], [37.2, 24979.0], [37.3, 24984.0], [37.4, 24984.0], [37.5, 24991.0], [37.6, 25044.0], [37.7, 25209.0], [37.8, 25209.0], [37.9, 25215.0], [38.0, 25220.0], [38.1, 25234.0], [38.2, 25234.0], [38.3, 25241.0], [38.4, 25252.0], [38.5, 25252.0], [38.6, 25256.0], [38.7, 25284.0], [38.8, 25301.0], [38.9, 25301.0], [39.0, 25311.0], [39.1, 25338.0], [39.2, 25361.0], [39.3, 25361.0], [39.4, 25374.0], [39.5, 25388.0], [39.6, 25390.0], [39.7, 25390.0], [39.8, 25392.0], [39.9, 25416.0], [40.0, 25474.0], [40.1, 25474.0], [40.2, 25531.0], [40.3, 25533.0], [40.4, 25533.0], [40.5, 25553.0], [40.6, 25589.0], [40.7, 25645.0], [40.8, 25645.0], [40.9, 25666.0], [41.0, 25668.0], [41.1, 25699.0], [41.2, 25699.0], [41.3, 25700.0], [41.4, 25715.0], [41.5, 25772.0], [41.6, 25772.0], [41.7, 25784.0], [41.8, 25800.0], [41.9, 25800.0], [42.0, 25852.0], [42.1, 25866.0], [42.2, 25871.0], [42.3, 25871.0], [42.4, 25873.0], [42.5, 25875.0], [42.6, 25890.0], [42.7, 25890.0], [42.8, 25941.0], [42.9, 26003.0], [43.0, 26012.0], [43.1, 26012.0], [43.2, 26019.0], [43.3, 26048.0], [43.4, 26048.0], [43.5, 26061.0], [43.6, 26088.0], [43.7, 26112.0], [43.8, 26112.0], [43.9, 26155.0], [44.0, 26164.0], [44.1, 26166.0], [44.2, 26166.0], [44.3, 26182.0], [44.4, 26201.0], [44.5, 26205.0], [44.6, 26205.0], [44.7, 26210.0], [44.8, 26258.0], [44.9, 26261.0], [45.0, 26261.0], [45.1, 26270.0], [45.2, 26271.0], [45.3, 26271.0], [45.4, 26275.0], [45.5, 26280.0], [45.6, 26310.0], [45.7, 26310.0], [45.8, 26316.0], [45.9, 26393.0], [46.0, 26459.0], [46.1, 26459.0], [46.2, 26474.0], [46.3, 26487.0], [46.4, 26508.0], [46.5, 26508.0], [46.6, 26508.0], [46.7, 26524.0], [46.8, 26524.0], [46.9, 26536.0], [47.0, 26549.0], [47.1, 26581.0], [47.2, 26581.0], [47.3, 26601.0], [47.4, 26668.0], [47.5, 26703.0], [47.6, 26703.0], [47.7, 26734.0], [47.8, 26736.0], [47.9, 26745.0], [48.0, 26745.0], [48.1, 26750.0], [48.2, 26814.0], [48.3, 26840.0], [48.4, 26840.0], [48.5, 26851.0], [48.6, 26859.0], [48.7, 26859.0], [48.8, 26865.0], [48.9, 26903.0], [49.0, 26905.0], [49.1, 26905.0], [49.2, 26908.0], [49.3, 26995.0], [49.4, 27012.0], [49.5, 27012.0], [49.6, 27014.0], [49.7, 27124.0], [49.8, 27143.0], [49.9, 27143.0], [50.0, 27144.0], [50.1, 27147.0], [50.2, 27147.0], [50.3, 27150.0], [50.4, 27180.0], [50.5, 27202.0], [50.6, 27202.0], [50.7, 27218.0], [50.8, 27251.0], [50.9, 27308.0], [51.0, 27308.0], [51.1, 27337.0], [51.2, 27344.0], [51.3, 27351.0], [51.4, 27351.0], [51.5, 27366.0], [51.6, 27393.0], [51.7, 27393.0], [51.8, 27394.0], [51.9, 27412.0], [52.0, 27420.0], [52.1, 27420.0], [52.2, 27432.0], [52.3, 27442.0], [52.4, 27507.0], [52.5, 27507.0], [52.6, 27512.0], [52.7, 27590.0], [52.8, 27602.0], [52.9, 27602.0], [53.0, 27662.0], [53.1, 27667.0], [53.2, 27703.0], [53.3, 27703.0], [53.4, 27713.0], [53.5, 27764.0], [53.6, 27764.0], [53.7, 27790.0], [53.8, 27795.0], [53.9, 27810.0], [54.0, 27810.0], [54.1, 27844.0], [54.2, 27862.0], [54.3, 27878.0], [54.4, 27878.0], [54.5, 27881.0], [54.6, 27888.0], [54.7, 27888.0], [54.8, 27888.0], [54.9, 27939.0], [55.0, 27981.0], [55.1, 27981.0], [55.2, 27995.0], [55.3, 28002.0], [55.4, 28009.0], [55.5, 28009.0], [55.6, 28023.0], [55.7, 28036.0], [55.8, 28042.0], [55.9, 28042.0], [56.0, 28070.0], [56.1, 28073.0], [56.2, 28073.0], [56.3, 28073.0], [56.4, 28147.0], [56.5, 28159.0], [56.6, 28175.0], [56.7, 28175.0], [56.8, 28215.0], [56.9, 28216.0], [57.0, 28216.0], [57.1, 28251.0], [57.2, 28261.0], [57.3, 28267.0], [57.4, 28267.0], [57.5, 28278.0], [57.6, 28281.0], [57.7, 28296.0], [57.8, 28296.0], [57.9, 28307.0], [58.0, 28335.0], [58.1, 28355.0], [58.2, 28355.0], [58.3, 28383.0], [58.4, 28388.0], [58.5, 28388.0], [58.6, 28399.0], [58.7, 28501.0], [58.8, 28530.0], [58.9, 28530.0], [59.0, 28615.0], [59.1, 28619.0], [59.2, 28625.0], [59.3, 28625.0], [59.4, 28633.0], [59.5, 28657.0], [59.6, 28735.0], [59.7, 28735.0], [59.8, 28739.0], [59.9, 28744.0], [60.0, 28751.0], [60.1, 28751.0], [60.2, 28793.0], [60.3, 28799.0], [60.4, 28799.0], [60.5, 28859.0], [60.6, 28870.0], [60.7, 28895.0], [60.8, 28895.0], [60.9, 28903.0], [61.0, 28904.0], [61.1, 28929.0], [61.2, 28929.0], [61.3, 28940.0], [61.4, 28957.0], [61.5, 28982.0], [61.6, 28982.0], [61.7, 28990.0], [61.8, 28991.0], [61.9, 28991.0], [62.0, 29012.0], [62.1, 29023.0], [62.2, 29062.0], [62.3, 29062.0], [62.4, 29092.0], [62.5, 29102.0], [62.6, 29121.0], [62.7, 29121.0], [62.8, 29147.0], [62.9, 29150.0], [63.0, 29151.0], [63.1, 29151.0], [63.2, 29176.0], [63.3, 29183.0], [63.4, 29183.0], [63.5, 29188.0], [63.6, 29190.0], [63.7, 29194.0], [63.8, 29194.0], [63.9, 29211.0], [64.0, 29224.0], [64.1, 29229.0], [64.2, 29229.0], [64.3, 29238.0], [64.4, 29240.0], [64.5, 29247.0], [64.6, 29247.0], [64.7, 29256.0], [64.8, 29258.0], [64.9, 29271.0], [65.0, 29271.0], [65.1, 29272.0], [65.2, 29272.0], [65.3, 29272.0], [65.4, 29277.0], [65.5, 29278.0], [65.6, 29279.0], [65.7, 29279.0], [65.8, 29301.0], [65.9, 29305.0], [66.0, 29311.0], [66.1, 29311.0], [66.2, 29311.0], [66.3, 29324.0], [66.4, 29328.0], [66.5, 29328.0], [66.6, 29329.0], [66.7, 29352.0], [66.8, 29352.0], [66.9, 29365.0], [67.0, 29371.0], [67.1, 29375.0], [67.2, 29375.0], [67.3, 29379.0], [67.4, 29385.0], [67.5, 29386.0], [67.6, 29386.0], [67.7, 29390.0], [67.8, 29395.0], [67.9, 29397.0], [68.0, 29397.0], [68.1, 29399.0], [68.2, 29400.0], [68.3, 29406.0], [68.4, 29406.0], [68.5, 29408.0], [68.6, 29409.0], [68.7, 29409.0], [68.8, 29411.0], [68.9, 29411.0], [69.0, 29413.0], [69.1, 29413.0], [69.2, 29416.0], [69.3, 29422.0], [69.4, 29423.0], [69.5, 29423.0], [69.6, 29426.0], [69.7, 29435.0], [69.8, 29444.0], [69.9, 29444.0], [70.0, 29447.0], [70.1, 29459.0], [70.2, 29459.0], [70.3, 29461.0], [70.4, 29470.0], [70.5, 29470.0], [70.6, 29470.0], [70.7, 29472.0], [70.8, 29477.0], [70.9, 29491.0], [71.0, 29491.0], [71.1, 29492.0], [71.2, 29501.0], [71.3, 29501.0], [71.4, 29501.0], [71.5, 29502.0], [71.6, 29507.0], [71.7, 29507.0], [71.8, 29514.0], [71.9, 29520.0], [72.0, 29525.0], [72.1, 29525.0], [72.2, 29529.0], [72.3, 29532.0], [72.4, 29532.0], [72.5, 29532.0], [72.6, 29544.0], [72.7, 29545.0], [72.8, 29545.0], [72.9, 29545.0], [73.0, 29545.0], [73.1, 29548.0], [73.2, 29549.0], [73.3, 29549.0], [73.4, 29550.0], [73.5, 29551.0], [73.6, 29551.0], [73.7, 29556.0], [73.8, 29581.0], [73.9, 29583.0], [74.0, 29583.0], [74.1, 29583.0], [74.2, 29587.0], [74.3, 29587.0], [74.4, 29587.0], [74.5, 29593.0], [74.6, 29597.0], [74.7, 29600.0], [74.8, 29600.0], [74.9, 29601.0], [75.0, 29606.0], [75.1, 29606.0], [75.2, 29610.0], [75.3, 29610.0], [75.4, 29612.0], [75.5, 29612.0], [75.6, 29614.0], [75.7, 29616.0], [75.8, 29618.0], [75.9, 29618.0], [76.0, 29620.0], [76.1, 29624.0], [76.2, 29627.0], [76.3, 29627.0], [76.4, 29631.0], [76.5, 29634.0], [76.6, 29634.0], [76.7, 29634.0], [76.8, 29634.0], [76.9, 29636.0], [77.0, 29636.0], [77.1, 29639.0], [77.2, 29639.0], [77.3, 29645.0], [77.4, 29645.0], [77.5, 29647.0], [77.6, 29652.0], [77.7, 29653.0], [77.8, 29653.0], [77.9, 29655.0], [78.0, 29661.0], [78.1, 29661.0], [78.2, 29661.0], [78.3, 29665.0], [78.4, 29670.0], [78.5, 29670.0], [78.6, 29672.0], [78.7, 29674.0], [78.8, 29675.0], [78.9, 29675.0], [79.0, 29682.0], [79.1, 29684.0], [79.2, 29684.0], [79.3, 29684.0], [79.4, 29686.0], [79.5, 29690.0], [79.6, 29691.0], [79.7, 29691.0], [79.8, 29703.0], [79.9, 29706.0], [80.0, 29707.0], [80.1, 29707.0], [80.2, 29709.0], [80.3, 29710.0], [80.4, 29710.0], [80.5, 29713.0], [80.6, 29713.0], [80.7, 29717.0], [80.8, 29717.0], [80.9, 29720.0], [81.0, 29722.0], [81.1, 29730.0], [81.2, 29730.0], [81.3, 29731.0], [81.4, 29743.0], [81.5, 29744.0], [81.6, 29744.0], [81.7, 29746.0], [81.8, 29747.0], [81.9, 29747.0], [82.0, 29755.0], [82.1, 29775.0], [82.2, 29781.0], [82.3, 29781.0], [82.4, 29789.0], [82.5, 29790.0], [82.6, 29794.0], [82.7, 29794.0], [82.8, 29800.0], [82.9, 29800.0], [83.0, 29803.0], [83.1, 29803.0], [83.2, 29805.0], [83.3, 29810.0], [83.4, 29810.0], [83.5, 29813.0], [83.6, 29813.0], [83.7, 29841.0], [83.8, 29841.0], [83.9, 29844.0], [84.0, 29845.0], [84.1, 29847.0], [84.2, 29847.0], [84.3, 29849.0], [84.4, 29850.0], [84.5, 29862.0], [84.6, 29862.0], [84.7, 29864.0], [84.8, 29868.0], [84.9, 29873.0], [85.0, 29873.0], [85.1, 29875.0], [85.2, 29876.0], [85.3, 29876.0], [85.4, 29881.0], [85.5, 29887.0], [85.6, 29892.0], [85.7, 29892.0], [85.8, 29900.0], [85.9, 29916.0], [86.0, 29922.0], [86.1, 29922.0], [86.2, 29926.0], [86.3, 29926.0], [86.4, 29932.0], [86.5, 29932.0], [86.6, 29946.0], [86.7, 29947.0], [86.8, 29947.0], [86.9, 29954.0], [87.0, 29958.0], [87.1, 29965.0], [87.2, 29965.0], [87.3, 29981.0], [87.4, 29981.0], [87.5, 29986.0], [87.6, 29986.0], [87.7, 29988.0], [87.8, 29988.0], [87.9, 29989.0], [88.0, 29989.0], [88.1, 29991.0], [88.2, 30008.0], [88.3, 30014.0], [88.4, 30014.0], [88.5, 30019.0], [88.6, 30026.0], [88.7, 30026.0], [88.8, 30027.0], [88.9, 30027.0], [89.0, 30043.0], [89.1, 30043.0], [89.2, 30048.0], [89.3, 30050.0], [89.4, 30052.0], [89.5, 30052.0], [89.6, 30054.0], [89.7, 30062.0], [89.8, 30064.0], [89.9, 30064.0], [90.0, 30070.0], [90.1, 30072.0], [90.2, 30072.0], [90.3, 30074.0], [90.4, 30081.0], [90.5, 30088.0], [90.6, 30088.0], [90.7, 30089.0], [90.8, 30092.0], [90.9, 30106.0], [91.0, 30106.0], [91.1, 30160.0], [91.2, 30163.0], [91.3, 30167.0], [91.4, 30167.0], [91.5, 30199.0], [91.6, 30200.0], [91.7, 30200.0], [91.8, 30210.0], [91.9, 30218.0], [92.0, 30223.0], [92.1, 30223.0], [92.2, 30224.0], [92.3, 30228.0], [92.4, 30287.0], [92.5, 30287.0], [92.6, 30294.0], [92.7, 30309.0], [92.8, 30333.0], [92.9, 30333.0], [93.0, 30333.0], [93.1, 30421.0], [93.2, 30497.0], [93.3, 30497.0], [93.4, 30766.0], [93.5, 30984.0], [93.6, 30984.0], [93.7, 31361.0], [93.8, 31596.0], [93.9, 31620.0], [94.0, 31620.0], [94.1, 31682.0], [94.2, 31687.0], [94.3, 31808.0], [94.4, 31808.0], [94.5, 31907.0], [94.6, 31919.0], [94.7, 32051.0], [94.8, 32051.0], [94.9, 32132.0], [95.0, 32256.0], [95.1, 32256.0], [95.2, 32340.0], [95.3, 32386.0], [95.4, 33282.0], [95.5, 33282.0], [95.6, 33316.0], [95.7, 33665.0], [95.8, 33747.0], [95.9, 33747.0], [96.0, 34051.0], [96.1, 34103.0], [96.2, 34331.0], [96.3, 34331.0], [96.4, 34647.0], [96.5, 35115.0], [96.6, 35132.0], [96.7, 35132.0], [96.8, 35699.0], [96.9, 36185.0], [97.0, 36185.0], [97.1, 36477.0], [97.2, 36874.0], [97.3, 37473.0], [97.4, 37473.0], [97.5, 37568.0], [97.6, 38278.0], [97.7, 38737.0], [97.8, 38737.0], [97.9, 39070.0], [98.0, 39414.0], [98.1, 39783.0], [98.2, 39783.0], [98.3, 41310.0], [98.4, 41522.0], [98.5, 41522.0], [98.6, 41932.0], [98.7, 42270.0], [98.8, 42598.0], [98.9, 42598.0], [99.0, 42977.0], [99.1, 43449.0], [99.2, 43701.0], [99.3, 43701.0], [99.4, 43984.0], [99.5, 44388.0], [99.6, 44551.0], [99.7, 44551.0], [99.8, 44640.0], [99.9, 44762.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 37.0, "series": [{"data": [[34300.0, 1.0], [33700.0, 1.0], [33300.0, 1.0], [34100.0, 1.0], [35100.0, 2.0], [36100.0, 1.0], [38700.0, 1.0], [37500.0, 1.0], [39700.0, 1.0], [41500.0, 1.0], [42900.0, 1.0], [41300.0, 1.0], [42500.0, 1.0], [41900.0, 1.0], [43700.0, 1.0], [44700.0, 1.0], [44300.0, 1.0], [43900.0, 1.0], [44500.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8400.0, 1.0], [11200.0, 1.0], [13700.0, 1.0], [16200.0, 1.0], [17400.0, 7.0], [16900.0, 1.0], [17300.0, 6.0], [17200.0, 3.0], [17000.0, 2.0], [17600.0, 6.0], [18400.0, 5.0], [17900.0, 4.0], [18000.0, 5.0], [17700.0, 8.0], [17500.0, 6.0], [18300.0, 4.0], [18200.0, 1.0], [17800.0, 5.0], [18100.0, 1.0], [19400.0, 2.0], [19000.0, 6.0], [18900.0, 3.0], [18800.0, 3.0], [18600.0, 4.0], [18500.0, 1.0], [19200.0, 5.0], [19100.0, 1.0], [20400.0, 2.0], [20200.0, 5.0], [20100.0, 4.0], [19600.0, 3.0], [19900.0, 2.0], [20000.0, 2.0], [20300.0, 6.0], [19800.0, 1.0], [19700.0, 2.0], [21500.0, 4.0], [21000.0, 1.0], [20600.0, 2.0], [21200.0, 3.0], [20500.0, 2.0], [20900.0, 2.0], [20800.0, 1.0], [21300.0, 3.0], [21400.0, 2.0], [22300.0, 8.0], [21700.0, 5.0], [21600.0, 1.0], [22200.0, 2.0], [21900.0, 2.0], [22000.0, 2.0], [21800.0, 2.0], [22100.0, 5.0], [22500.0, 1.0], [22400.0, 2.0], [22900.0, 7.0], [23400.0, 4.0], [22800.0, 4.0], [23500.0, 3.0], [23200.0, 3.0], [23300.0, 3.0], [23000.0, 2.0], [22700.0, 1.0], [23800.0, 6.0], [24500.0, 4.0], [24000.0, 4.0], [23900.0, 7.0], [24100.0, 8.0], [24300.0, 9.0], [23600.0, 5.0], [23700.0, 6.0], [24400.0, 4.0], [24200.0, 2.0], [25400.0, 2.0], [25300.0, 8.0], [24900.0, 12.0], [25200.0, 8.0], [25500.0, 4.0], [24700.0, 2.0], [24600.0, 5.0], [24800.0, 3.0], [25000.0, 1.0], [25700.0, 4.0], [26500.0, 6.0], [25800.0, 7.0], [26200.0, 9.0], [26300.0, 3.0], [26100.0, 5.0], [26600.0, 2.0], [26400.0, 3.0], [26000.0, 6.0], [25900.0, 1.0], [25600.0, 4.0], [27400.0, 4.0], [26700.0, 5.0], [27500.0, 3.0], [26900.0, 4.0], [27200.0, 3.0], [27600.0, 3.0], [26800.0, 5.0], [27300.0, 7.0], [27100.0, 6.0], [27000.0, 2.0], [28200.0, 8.0], [27700.0, 5.0], [28300.0, 6.0], [28600.0, 5.0], [27800.0, 7.0], [28100.0, 3.0], [28000.0, 8.0], [28500.0, 2.0], [27900.0, 3.0], [28900.0, 8.0], [29100.0, 10.0], [29000.0, 4.0], [29600.0, 37.0], [29500.0, 26.0], [29400.0, 22.0], [29200.0, 14.0], [29300.0, 18.0], [28800.0, 3.0], [28700.0, 6.0], [29900.0, 18.0], [30000.0, 20.0], [30400.0, 2.0], [29700.0, 22.0], [29800.0, 22.0], [30200.0, 8.0], [30300.0, 3.0], [30100.0, 5.0], [30700.0, 1.0], [30900.0, 1.0], [31300.0, 1.0], [31600.0, 3.0], [31500.0, 1.0], [32300.0, 2.0], [31900.0, 2.0], [31800.0, 1.0], [32100.0, 1.0], [32200.0, 1.0], [32000.0, 1.0], [34000.0, 1.0], [34600.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [36800.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [38200.0, 1.0], [37400.0, 1.0], [39400.0, 1.0], [39000.0, 1.0], [42200.0, 1.0], [43400.0, 1.0], [44600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.954545454545455, "minX": 1.60247274E12, "maxY": 10.0, "series": [{"data": [[1.60247448E12, 10.0], [1.60247418E12, 10.0], [1.60247358E12, 10.0], [1.60247388E12, 10.0], [1.60247346E12, 10.0], [1.60247376E12, 10.0], [1.60247286E12, 10.0], [1.60247316E12, 10.0], [1.60247274E12, 10.0], [1.60247304E12, 10.0], [1.60247466E12, 7.954545454545455], [1.60247436E12, 10.0], [1.60247406E12, 10.0], [1.60247424E12, 10.0], [1.60247394E12, 10.0], [1.60247334E12, 10.0], [1.60247364E12, 10.0], [1.60247322E12, 10.0], [1.60247352E12, 10.0], [1.60247292E12, 10.0], [1.60247454E12, 10.0], [1.6024728E12, 10.0], [1.60247442E12, 10.0], [1.60247412E12, 10.0], [1.60247382E12, 10.0], [1.602474E12, 10.0], [1.6024737E12, 10.0], [1.6024731E12, 10.0], [1.6024734E12, 10.0], [1.60247298E12, 10.0], [1.60247328E12, 10.0], [1.6024746E12, 10.0], [1.6024743E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247466E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17099.0, "minX": 1.0, "maxY": 26353.634986225912, "series": [{"data": [[8.0, 17517.0], [4.0, 17388.0], [2.0, 17099.0], [1.0, 17473.0], [9.0, 17831.0], [10.0, 26353.634986225912], [5.0, 17656.0], [6.0, 17529.0], [3.0, 17272.0], [7.0, 17431.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26244.80952380954]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.43333333333334, "minX": 1.60247274E12, "maxY": 189747.21666666667, "series": [{"data": [[1.60247448E12, 29612.516666666666], [1.60247418E12, 55060.51666666667], [1.60247358E12, 96675.16666666667], [1.60247388E12, 78761.93333333333], [1.60247346E12, 25409.433333333334], [1.60247376E12, 57927.55], [1.60247286E12, 143358.41666666666], [1.60247316E12, 47825.63333333333], [1.60247274E12, 164758.25], [1.60247304E12, 49473.95], [1.60247466E12, 14367.666666666666], [1.60247436E12, 44381.916666666664], [1.60247406E12, 50144.55], [1.60247424E12, 46591.76666666667], [1.60247394E12, 27541.316666666666], [1.60247334E12, 44574.583333333336], [1.60247364E12, 91418.51666666666], [1.60247322E12, 45768.98333333333], [1.60247352E12, 152550.26666666666], [1.60247292E12, 57683.21666666667], [1.60247454E12, 141915.43333333332], [1.6024728E12, 101724.5], [1.60247442E12, 30266.35], [1.60247412E12, 45586.5], [1.60247382E12, 82760.61666666667], [1.602474E12, 46832.55], [1.6024737E12, 189747.21666666667], [1.6024731E12, 45203.46666666667], [1.6024734E12, 45600.083333333336], [1.60247298E12, 77146.15], [1.60247328E12, 53576.65], [1.6024746E12, 90128.41666666667], [1.6024743E12, 49034.28333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60247448E12, 189.86666666666667], [1.60247418E12, 154.05], [1.60247358E12, 172.31666666666666], [1.60247388E12, 183.25], [1.60247346E12, 167.88333333333333], [1.60247376E12, 215.95], [1.60247286E12, 164.88333333333333], [1.60247316E12, 146.11666666666667], [1.60247274E12, 102.43333333333334], [1.60247304E12, 161.03333333333333], [1.60247466E12, 146.3], [1.60247436E12, 160.56666666666666], [1.60247406E12, 146.16666666666666], [1.60247424E12, 153.73333333333332], [1.60247394E12, 110.23333333333333], [1.60247334E12, 146.06666666666666], [1.60247364E12, 187.9], [1.60247322E12, 146.11666666666667], [1.60247352E12, 224.58333333333334], [1.60247292E12, 125.55], [1.60247454E12, 181.7], [1.6024728E12, 207.3], [1.60247442E12, 167.75], [1.60247412E12, 153.41666666666666], [1.60247382E12, 164.78333333333333], [1.602474E12, 153.4], [1.6024737E12, 175.86666666666667], [1.6024731E12, 146.11666666666667], [1.6024734E12, 153.35], [1.60247298E12, 176.26666666666668], [1.60247328E12, 153.66666666666666], [1.6024746E12, 154.53333333333333], [1.6024743E12, 146.13333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247466E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17851.0, "minX": 1.60247274E12, "maxY": 38973.41176470589, "series": [{"data": [[1.60247448E12, 23378.038461538465], [1.60247418E12, 28210.571428571428], [1.60247358E12, 24635.916666666668], [1.60247388E12, 25116.68], [1.60247346E12, 25832.73913043478], [1.60247376E12, 18918.032258064522], [1.60247286E12, 22184.227272727265], [1.60247316E12, 29786.199999999997], [1.60247274E12, 17851.0], [1.60247304E12, 27190.409090909092], [1.60247466E12, 19082.90909090909], [1.60247436E12, 29043.136363636364], [1.60247406E12, 29670.650000000005], [1.60247424E12, 28704.571428571428], [1.60247394E12, 32788.799999999996], [1.60247334E12, 29829.850000000002], [1.60247364E12, 22063.14814814815], [1.60247322E12, 29807.799999999996], [1.60247352E12, 20342.0], [1.60247292E12, 38973.41176470589], [1.60247454E12, 21255.239999999998], [1.6024728E12, 22363.206896551725], [1.60247442E12, 25846.608695652172], [1.60247412E12, 29707.71428571429], [1.60247382E12, 26710.909090909092], [1.602474E12, 31613.76190476191], [1.6024737E12, 24953.125], [1.6024731E12, 29786.0], [1.6024734E12, 29515.904761904756], [1.60247298E12, 25449.125000000007], [1.60247328E12, 29191.38095238095], [1.6024746E12, 31022.95238095238], [1.6024743E12, 29505.249999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247466E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17846.42857142857, "minX": 1.60247274E12, "maxY": 38971.41176470588, "series": [{"data": [[1.60247448E12, 23377.5], [1.60247418E12, 28209.14285714286], [1.60247358E12, 24633.041666666668], [1.60247388E12, 25115.039999999997], [1.60247346E12, 25832.478260869568], [1.60247376E12, 18916.58064516129], [1.60247286E12, 22181.04545454545], [1.60247316E12, 29784.95], [1.60247274E12, 17846.42857142857], [1.60247304E12, 27189.227272727272], [1.60247466E12, 19081.090909090908], [1.60247436E12, 29042.136363636357], [1.60247406E12, 29669.25], [1.60247424E12, 28703.476190476187], [1.60247394E12, 32787.933333333334], [1.60247334E12, 29828.5], [1.60247364E12, 22060.55555555556], [1.60247322E12, 29806.600000000002], [1.60247352E12, 20338.77419354839], [1.60247292E12, 38971.41176470588], [1.60247454E12, 21251.719999999998], [1.6024728E12, 22361.379310344826], [1.60247442E12, 25846.217391304348], [1.60247412E12, 29706.76190476191], [1.60247382E12, 26709.045454545452], [1.602474E12, 31612.47619047619], [1.6024737E12, 24949.166666666668], [1.6024731E12, 29784.95], [1.6024734E12, 29514.85714285714], [1.60247298E12, 25447.375], [1.60247328E12, 29190.190476190473], [1.6024746E12, 31020.52380952381], [1.6024743E12, 29503.8]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247466E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1818181818181818, "minX": 1.60247274E12, "maxY": 6.571428571428571, "series": [{"data": [[1.60247448E12, 0.5384615384615385], [1.60247418E12, 0.4285714285714286], [1.60247358E12, 0.29166666666666663], [1.60247388E12, 0.39999999999999997], [1.60247346E12, 0.5217391304347827], [1.60247376E12, 0.3548387096774194], [1.60247286E12, 0.1818181818181818], [1.60247316E12, 0.5], [1.60247274E12, 6.571428571428571], [1.60247304E12, 0.681818181818182], [1.60247466E12, 0.45454545454545453], [1.60247436E12, 0.5454545454545454], [1.60247406E12, 0.5499999999999999], [1.60247424E12, 0.5238095238095238], [1.60247394E12, 0.39999999999999997], [1.60247334E12, 0.45000000000000007], [1.60247364E12, 0.37037037037037035], [1.60247322E12, 0.6500000000000001], [1.60247352E12, 0.5161290322580645], [1.60247292E12, 0.5882352941176471], [1.60247454E12, 0.24000000000000005], [1.6024728E12, 0.5517241379310345], [1.60247442E12, 0.5217391304347827], [1.60247412E12, 0.3809523809523809], [1.60247382E12, 0.5], [1.602474E12, 0.7142857142857142], [1.6024737E12, 0.375], [1.6024731E12, 0.25], [1.6024734E12, 0.6190476190476191], [1.60247298E12, 0.6250000000000001], [1.60247328E12, 0.2857142857142857], [1.6024746E12, 0.523809523809524], [1.6024743E12, 0.20000000000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247466E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3161.0, "minX": 1.60247274E12, "maxY": 44762.0, "series": [{"data": [[1.60247448E12, 27202.0], [1.60247418E12, 29375.0], [1.60247358E12, 31919.0], [1.60247388E12, 29151.0], [1.60247346E12, 28793.0], [1.60247376E12, 21735.0], [1.60247286E12, 30984.0], [1.60247316E12, 30064.0], [1.60247274E12, 26280.0], [1.60247304E12, 30421.0], [1.60247466E12, 27150.0], [1.60247436E12, 29709.0], [1.60247406E12, 30224.0], [1.60247424E12, 29550.0], [1.60247394E12, 44551.0], [1.60247334E12, 30199.0], [1.60247364E12, 28251.0], [1.60247322E12, 30081.0], [1.60247352E12, 26736.0], [1.60247292E12, 44762.0], [1.60247454E12, 25645.0], [1.6024728E12, 27713.0], [1.60247442E12, 28073.0], [1.60247412E12, 30052.0], [1.60247382E12, 32340.0], [1.602474E12, 41932.0], [1.6024737E12, 28744.0], [1.6024731E12, 30333.0], [1.6024734E12, 30210.0], [1.60247298E12, 30019.0], [1.60247328E12, 29722.0], [1.6024746E12, 39070.0], [1.6024743E12, 29639.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60247448E12, 20630.0], [1.60247418E12, 26995.0], [1.60247358E12, 17749.0], [1.60247388E12, 23441.0], [1.60247346E12, 23459.0], [1.60247376E12, 17501.0], [1.60247286E12, 17552.0], [1.60247316E12, 29477.0], [1.60247274E12, 3161.0], [1.60247304E12, 24073.0], [1.60247466E12, 17099.0], [1.60247436E12, 26316.0], [1.60247406E12, 29272.0], [1.60247424E12, 27810.0], [1.60247394E12, 22111.0], [1.60247334E12, 29507.0], [1.60247364E12, 17211.0], [1.60247322E12, 29422.0], [1.60247352E12, 16978.0], [1.60247292E12, 31361.0], [1.60247454E12, 18672.0], [1.6024728E12, 17435.0], [1.60247442E12, 23407.0], [1.60247412E12, 29176.0], [1.60247382E12, 22164.0], [1.602474E12, 25871.0], [1.6024737E12, 20036.0], [1.6024731E12, 29211.0], [1.6024734E12, 27667.0], [1.60247298E12, 22838.0], [1.60247328E12, 28625.0], [1.6024746E12, 27844.0], [1.6024743E12, 29272.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60247448E12, 20630.0], [1.60247418E12, 26995.0], [1.60247358E12, 17749.0], [1.60247388E12, 23441.0], [1.60247346E12, 23459.0], [1.60247376E12, 17501.0], [1.60247286E12, 17552.0], [1.60247316E12, 29477.0], [1.60247274E12, 3161.0], [1.60247304E12, 24073.0], [1.60247466E12, 17099.0], [1.60247436E12, 26316.0], [1.60247406E12, 29272.0], [1.60247424E12, 27810.0], [1.60247394E12, 22111.0], [1.60247334E12, 29507.0], [1.60247364E12, 17211.0], [1.60247322E12, 29422.0], [1.60247352E12, 16978.0], [1.60247292E12, 31361.0], [1.60247454E12, 18672.0], [1.6024728E12, 17435.0], [1.60247442E12, 23407.0], [1.60247412E12, 29176.0], [1.60247382E12, 22164.0], [1.602474E12, 25871.0], [1.6024737E12, 20036.0], [1.6024731E12, 29211.0], [1.6024734E12, 27667.0], [1.60247298E12, 22838.0], [1.60247328E12, 28625.0], [1.6024746E12, 27844.0], [1.6024743E12, 29272.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60247448E12, 20630.0], [1.60247418E12, 26995.0], [1.60247358E12, 17749.0], [1.60247388E12, 23441.0], [1.60247346E12, 23459.0], [1.60247376E12, 17501.0], [1.60247286E12, 17552.0], [1.60247316E12, 29477.0], [1.60247274E12, 3161.0], [1.60247304E12, 24073.0], [1.60247466E12, 17099.0], [1.60247436E12, 26316.0], [1.60247406E12, 29272.0], [1.60247424E12, 27810.0], [1.60247394E12, 22111.0], [1.60247334E12, 29507.0], [1.60247364E12, 17211.0], [1.60247322E12, 29422.0], [1.60247352E12, 16978.0], [1.60247292E12, 31361.0], [1.60247454E12, 18672.0], [1.6024728E12, 17435.0], [1.60247442E12, 23407.0], [1.60247412E12, 29176.0], [1.60247382E12, 22164.0], [1.602474E12, 25871.0], [1.6024737E12, 20036.0], [1.6024731E12, 29211.0], [1.6024734E12, 27667.0], [1.60247298E12, 22838.0], [1.60247328E12, 28625.0], [1.6024746E12, 27844.0], [1.6024743E12, 29272.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60247448E12, 20630.0], [1.60247418E12, 26995.0], [1.60247358E12, 17749.0], [1.60247388E12, 23441.0], [1.60247346E12, 23459.0], [1.60247376E12, 17501.0], [1.60247286E12, 17552.0], [1.60247316E12, 29477.0], [1.60247274E12, 3161.0], [1.60247304E12, 24073.0], [1.60247466E12, 17099.0], [1.60247436E12, 26316.0], [1.60247406E12, 29272.0], [1.60247424E12, 27810.0], [1.60247394E12, 22111.0], [1.60247334E12, 29507.0], [1.60247364E12, 17211.0], [1.60247322E12, 29422.0], [1.60247352E12, 16978.0], [1.60247292E12, 31361.0], [1.60247454E12, 18672.0], [1.6024728E12, 17435.0], [1.60247442E12, 23407.0], [1.60247412E12, 29176.0], [1.60247382E12, 22164.0], [1.602474E12, 25871.0], [1.6024737E12, 20036.0], [1.6024731E12, 29211.0], [1.6024734E12, 27667.0], [1.60247298E12, 22838.0], [1.60247328E12, 28625.0], [1.6024746E12, 27844.0], [1.6024743E12, 29272.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60247448E12, 23134.5], [1.60247418E12, 28307.0], [1.60247358E12, 22956.0], [1.60247388E12, 24769.0], [1.60247346E12, 25875.0], [1.60247376E12, 18497.0], [1.60247286E12, 22279.5], [1.60247316E12, 29797.0], [1.60247274E12, 19774.0], [1.60247304E12, 27151.0], [1.60247466E12, 17699.5], [1.60247436E12, 29275.5], [1.60247406E12, 29679.0], [1.60247424E12, 29092.0], [1.60247394E12, 32256.0], [1.60247334E12, 29827.0], [1.60247364E12, 21372.0], [1.60247322E12, 29801.5], [1.60247352E12, 18984.0], [1.60247292E12, 39414.0], [1.60247454E12, 21301.0], [1.6024728E12, 20641.0], [1.60247442E12, 25715.0], [1.60247412E12, 29682.0], [1.60247382E12, 26580.5], [1.602474E12, 30106.0], [1.6024737E12, 24303.0], [1.6024731E12, 29742.0], [1.6024734E12, 29587.0], [1.60247298E12, 25103.0], [1.60247328E12, 29301.0], [1.6024746E12, 29981.0], [1.6024743E12, 29521.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247466E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27144.0, "minX": 1.0, "maxY": 27144.0, "series": [{"data": [[1.0, 27144.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27143.0, "minX": 1.0, "maxY": 27143.0, "series": [{"data": [[1.0, 27143.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60247274E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247448E12, 0.43333333333333335], [1.60247418E12, 0.35], [1.60247358E12, 0.4], [1.60247388E12, 0.4166666666666667], [1.60247346E12, 0.38333333333333336], [1.60247376E12, 0.5166666666666667], [1.60247286E12, 0.36666666666666664], [1.60247316E12, 0.3333333333333333], [1.60247274E12, 0.4], [1.60247304E12, 0.36666666666666664], [1.60247466E12, 0.2], [1.60247436E12, 0.36666666666666664], [1.60247406E12, 0.3333333333333333], [1.60247424E12, 0.35], [1.60247394E12, 0.25], [1.60247334E12, 0.3333333333333333], [1.60247364E12, 0.45], [1.60247322E12, 0.3333333333333333], [1.60247352E12, 0.5166666666666667], [1.60247292E12, 0.2833333333333333], [1.60247454E12, 0.4166666666666667], [1.6024728E12, 0.48333333333333334], [1.60247442E12, 0.38333333333333336], [1.60247412E12, 0.35], [1.60247382E12, 0.36666666666666664], [1.602474E12, 0.35], [1.6024737E12, 0.4], [1.6024731E12, 0.3333333333333333], [1.6024734E12, 0.35], [1.60247298E12, 0.4], [1.60247328E12, 0.35], [1.6024746E12, 0.35], [1.6024743E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247466E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60247274E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247448E12, 0.43333333333333335], [1.60247418E12, 0.35], [1.60247358E12, 0.4], [1.60247388E12, 0.4166666666666667], [1.60247346E12, 0.38333333333333336], [1.60247376E12, 0.5166666666666667], [1.60247286E12, 0.36666666666666664], [1.60247316E12, 0.3333333333333333], [1.60247274E12, 0.23333333333333334], [1.60247304E12, 0.36666666666666664], [1.60247466E12, 0.36666666666666664], [1.60247436E12, 0.36666666666666664], [1.60247406E12, 0.3333333333333333], [1.60247424E12, 0.35], [1.60247394E12, 0.25], [1.60247334E12, 0.3333333333333333], [1.60247364E12, 0.45], [1.60247322E12, 0.3333333333333333], [1.60247352E12, 0.5166666666666667], [1.60247292E12, 0.2833333333333333], [1.60247454E12, 0.4166666666666667], [1.6024728E12, 0.48333333333333334], [1.60247442E12, 0.38333333333333336], [1.60247412E12, 0.35], [1.60247382E12, 0.36666666666666664], [1.602474E12, 0.35], [1.6024737E12, 0.4], [1.6024731E12, 0.3333333333333333], [1.6024734E12, 0.35], [1.60247298E12, 0.4], [1.60247328E12, 0.35], [1.6024746E12, 0.35], [1.6024743E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247466E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60247274E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247448E12, 0.43333333333333335], [1.60247418E12, 0.35], [1.60247358E12, 0.4], [1.60247388E12, 0.4166666666666667], [1.60247346E12, 0.38333333333333336], [1.60247376E12, 0.5166666666666667], [1.60247286E12, 0.36666666666666664], [1.60247316E12, 0.3333333333333333], [1.60247274E12, 0.23333333333333334], [1.60247304E12, 0.36666666666666664], [1.60247466E12, 0.36666666666666664], [1.60247436E12, 0.36666666666666664], [1.60247406E12, 0.3333333333333333], [1.60247424E12, 0.35], [1.60247394E12, 0.25], [1.60247334E12, 0.3333333333333333], [1.60247364E12, 0.45], [1.60247322E12, 0.3333333333333333], [1.60247352E12, 0.5166666666666667], [1.60247292E12, 0.2833333333333333], [1.60247454E12, 0.4166666666666667], [1.6024728E12, 0.48333333333333334], [1.60247442E12, 0.38333333333333336], [1.60247412E12, 0.35], [1.60247382E12, 0.36666666666666664], [1.602474E12, 0.35], [1.6024737E12, 0.4], [1.6024731E12, 0.3333333333333333], [1.6024734E12, 0.35], [1.60247298E12, 0.4], [1.60247328E12, 0.35], [1.6024746E12, 0.35], [1.6024743E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247466E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60247274E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247448E12, 0.43333333333333335], [1.60247418E12, 0.35], [1.60247358E12, 0.4], [1.60247388E12, 0.4166666666666667], [1.60247346E12, 0.38333333333333336], [1.60247376E12, 0.5166666666666667], [1.60247286E12, 0.36666666666666664], [1.60247316E12, 0.3333333333333333], [1.60247274E12, 0.23333333333333334], [1.60247304E12, 0.36666666666666664], [1.60247466E12, 0.36666666666666664], [1.60247436E12, 0.36666666666666664], [1.60247406E12, 0.3333333333333333], [1.60247424E12, 0.35], [1.60247394E12, 0.25], [1.60247334E12, 0.3333333333333333], [1.60247364E12, 0.45], [1.60247322E12, 0.3333333333333333], [1.60247352E12, 0.5166666666666667], [1.60247292E12, 0.2833333333333333], [1.60247454E12, 0.4166666666666667], [1.6024728E12, 0.48333333333333334], [1.60247442E12, 0.38333333333333336], [1.60247412E12, 0.35], [1.60247382E12, 0.36666666666666664], [1.602474E12, 0.35], [1.6024737E12, 0.4], [1.6024731E12, 0.3333333333333333], [1.6024734E12, 0.35], [1.60247298E12, 0.4], [1.60247328E12, 0.35], [1.6024746E12, 0.35], [1.6024743E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247466E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

