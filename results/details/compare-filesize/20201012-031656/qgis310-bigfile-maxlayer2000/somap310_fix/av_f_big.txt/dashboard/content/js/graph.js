/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2949.0, "minX": 0.0, "maxY": 44261.0, "series": [{"data": [[0.0, 2949.0], [0.1, 2949.0], [0.2, 5924.0], [0.3, 8078.0], [0.4, 8078.0], [0.5, 10891.0], [0.6, 13500.0], [0.7, 15948.0], [0.8, 15948.0], [0.9, 16514.0], [1.0, 16572.0], [1.1, 16633.0], [1.2, 16633.0], [1.3, 16762.0], [1.4, 16803.0], [1.5, 16832.0], [1.6, 16832.0], [1.7, 16865.0], [1.8, 16868.0], [1.9, 16868.0], [2.0, 16869.0], [2.1, 16870.0], [2.2, 16900.0], [2.3, 16900.0], [2.4, 16905.0], [2.5, 16915.0], [2.6, 16918.0], [2.7, 16918.0], [2.8, 16935.0], [2.9, 16941.0], [3.0, 16952.0], [3.1, 16952.0], [3.2, 16953.0], [3.3, 16976.0], [3.4, 16976.0], [3.5, 16979.0], [3.6, 16988.0], [3.7, 16990.0], [3.8, 16990.0], [3.9, 16991.0], [4.0, 17014.0], [4.1, 17033.0], [4.2, 17033.0], [4.3, 17035.0], [4.4, 17058.0], [4.5, 17066.0], [4.6, 17066.0], [4.7, 17089.0], [4.8, 17106.0], [4.9, 17155.0], [5.0, 17155.0], [5.1, 17161.0], [5.2, 17180.0], [5.3, 17180.0], [5.4, 17217.0], [5.5, 17226.0], [5.6, 17290.0], [5.7, 17290.0], [5.8, 17318.0], [5.9, 17330.0], [6.0, 17347.0], [6.1, 17347.0], [6.2, 17388.0], [6.3, 17399.0], [6.4, 17405.0], [6.5, 17405.0], [6.6, 17409.0], [6.7, 17450.0], [6.8, 17450.0], [6.9, 17487.0], [7.0, 17493.0], [7.1, 17544.0], [7.2, 17544.0], [7.3, 17545.0], [7.4, 17552.0], [7.5, 17571.0], [7.6, 17571.0], [7.7, 17576.0], [7.8, 17603.0], [7.9, 17614.0], [8.0, 17614.0], [8.1, 17633.0], [8.2, 17666.0], [8.3, 17718.0], [8.4, 17718.0], [8.5, 17752.0], [8.6, 17766.0], [8.7, 17766.0], [8.8, 17781.0], [8.9, 17817.0], [9.0, 17875.0], [9.1, 17875.0], [9.2, 17964.0], [9.3, 17971.0], [9.4, 18013.0], [9.5, 18013.0], [9.6, 18019.0], [9.7, 18045.0], [9.8, 18150.0], [9.9, 18150.0], [10.0, 18247.0], [10.1, 18330.0], [10.2, 18330.0], [10.3, 18421.0], [10.4, 18451.0], [10.5, 18461.0], [10.6, 18461.0], [10.7, 18532.0], [10.8, 18685.0], [10.9, 18691.0], [11.0, 18691.0], [11.1, 18727.0], [11.2, 18758.0], [11.3, 18783.0], [11.4, 18783.0], [11.5, 18865.0], [11.6, 18956.0], [11.7, 18956.0], [11.8, 18963.0], [11.9, 18967.0], [12.0, 18991.0], [12.1, 18991.0], [12.2, 18992.0], [12.3, 19135.0], [12.4, 19177.0], [12.5, 19177.0], [12.6, 19179.0], [12.7, 19223.0], [12.8, 19274.0], [12.9, 19274.0], [13.0, 19425.0], [13.1, 19437.0], [13.2, 19480.0], [13.3, 19480.0], [13.4, 19514.0], [13.5, 19536.0], [13.6, 19536.0], [13.7, 19554.0], [13.8, 19554.0], [13.9, 19596.0], [14.0, 19596.0], [14.1, 19645.0], [14.2, 19700.0], [14.3, 19796.0], [14.4, 19796.0], [14.5, 19832.0], [14.6, 19868.0], [14.7, 19923.0], [14.8, 19923.0], [14.9, 19986.0], [15.0, 19991.0], [15.1, 19991.0], [15.2, 20005.0], [15.3, 20012.0], [15.4, 20013.0], [15.5, 20013.0], [15.6, 20031.0], [15.7, 20090.0], [15.8, 20103.0], [15.9, 20103.0], [16.0, 20117.0], [16.1, 20139.0], [16.2, 20218.0], [16.3, 20218.0], [16.4, 20234.0], [16.5, 20265.0], [16.6, 20278.0], [16.7, 20278.0], [16.8, 20391.0], [16.9, 20449.0], [17.0, 20449.0], [17.1, 20523.0], [17.2, 20630.0], [17.3, 20859.0], [17.4, 20859.0], [17.5, 20914.0], [17.6, 21034.0], [17.7, 21145.0], [17.8, 21145.0], [17.9, 21292.0], [18.0, 21359.0], [18.1, 21482.0], [18.2, 21482.0], [18.3, 21509.0], [18.4, 21523.0], [18.5, 21523.0], [18.6, 21525.0], [18.7, 21558.0], [18.8, 21559.0], [18.9, 21559.0], [19.0, 21574.0], [19.1, 21583.0], [19.2, 21584.0], [19.3, 21584.0], [19.4, 21588.0], [19.5, 21643.0], [19.6, 21645.0], [19.7, 21645.0], [19.8, 21652.0], [19.9, 21671.0], [20.0, 21779.0], [20.1, 21779.0], [20.2, 21814.0], [20.3, 21864.0], [20.4, 21864.0], [20.5, 21866.0], [20.6, 21919.0], [20.7, 21965.0], [20.8, 21965.0], [20.9, 21975.0], [21.0, 21980.0], [21.1, 21991.0], [21.2, 21991.0], [21.3, 22005.0], [21.4, 22024.0], [21.5, 22035.0], [21.6, 22035.0], [21.7, 22090.0], [21.8, 22175.0], [21.9, 22175.0], [22.0, 22178.0], [22.1, 22179.0], [22.2, 22190.0], [22.3, 22190.0], [22.4, 22303.0], [22.5, 22322.0], [22.6, 22334.0], [22.7, 22334.0], [22.8, 22337.0], [22.9, 22358.0], [23.0, 22407.0], [23.1, 22407.0], [23.2, 22439.0], [23.3, 22573.0], [23.4, 22573.0], [23.5, 22576.0], [23.6, 22621.0], [23.7, 22660.0], [23.8, 22660.0], [23.9, 22717.0], [24.0, 22718.0], [24.1, 22726.0], [24.2, 22726.0], [24.3, 22778.0], [24.4, 22858.0], [24.5, 22870.0], [24.6, 22870.0], [24.7, 22897.0], [24.8, 22919.0], [24.9, 22932.0], [25.0, 22932.0], [25.1, 22959.0], [25.2, 23009.0], [25.3, 23009.0], [25.4, 23024.0], [25.5, 23056.0], [25.6, 23091.0], [25.7, 23091.0], [25.8, 23099.0], [25.9, 23132.0], [26.0, 23243.0], [26.1, 23243.0], [26.2, 23261.0], [26.3, 23319.0], [26.4, 23324.0], [26.5, 23324.0], [26.6, 23328.0], [26.7, 23349.0], [26.8, 23349.0], [26.9, 23357.0], [27.0, 23358.0], [27.1, 23360.0], [27.2, 23360.0], [27.3, 23396.0], [27.4, 23403.0], [27.5, 23432.0], [27.6, 23432.0], [27.7, 23439.0], [27.8, 23544.0], [27.9, 23545.0], [28.0, 23545.0], [28.1, 23551.0], [28.2, 23567.0], [28.3, 23578.0], [28.4, 23578.0], [28.5, 23603.0], [28.6, 23611.0], [28.7, 23611.0], [28.8, 23644.0], [28.9, 23683.0], [29.0, 23706.0], [29.1, 23706.0], [29.2, 23734.0], [29.3, 23751.0], [29.4, 23752.0], [29.5, 23752.0], [29.6, 23779.0], [29.7, 23783.0], [29.8, 23786.0], [29.9, 23786.0], [30.0, 23818.0], [30.1, 23836.0], [30.2, 23836.0], [30.3, 23836.0], [30.4, 23839.0], [30.5, 23850.0], [30.6, 23850.0], [30.7, 23895.0], [30.8, 23914.0], [30.9, 23915.0], [31.0, 23915.0], [31.1, 23934.0], [31.2, 23937.0], [31.3, 23954.0], [31.4, 23954.0], [31.5, 23983.0], [31.6, 23986.0], [31.7, 23986.0], [31.8, 23997.0], [31.9, 24026.0], [32.0, 24045.0], [32.1, 24045.0], [32.2, 24065.0], [32.3, 24091.0], [32.4, 24110.0], [32.5, 24110.0], [32.6, 24153.0], [32.7, 24240.0], [32.8, 24275.0], [32.9, 24275.0], [33.0, 24285.0], [33.1, 24288.0], [33.2, 24298.0], [33.3, 24298.0], [33.4, 24336.0], [33.5, 24357.0], [33.6, 24357.0], [33.7, 24366.0], [33.8, 24381.0], [33.9, 24392.0], [34.0, 24392.0], [34.1, 24393.0], [34.2, 24426.0], [34.3, 24430.0], [34.4, 24430.0], [34.5, 24453.0], [34.6, 24470.0], [34.7, 24480.0], [34.8, 24480.0], [34.9, 24496.0], [35.0, 24533.0], [35.1, 24533.0], [35.2, 24544.0], [35.3, 24561.0], [35.4, 24582.0], [35.5, 24582.0], [35.6, 24594.0], [35.7, 24614.0], [35.8, 24657.0], [35.9, 24657.0], [36.0, 24664.0], [36.1, 24667.0], [36.2, 24691.0], [36.3, 24691.0], [36.4, 24739.0], [36.5, 24746.0], [36.6, 24790.0], [36.7, 24790.0], [36.8, 24819.0], [36.9, 24836.0], [37.0, 24836.0], [37.1, 24866.0], [37.2, 24867.0], [37.3, 24910.0], [37.4, 24910.0], [37.5, 24942.0], [37.6, 25004.0], [37.7, 25026.0], [37.8, 25026.0], [37.9, 25032.0], [38.0, 25059.0], [38.1, 25065.0], [38.2, 25065.0], [38.3, 25066.0], [38.4, 25077.0], [38.5, 25077.0], [38.6, 25079.0], [38.7, 25113.0], [38.8, 25139.0], [38.9, 25139.0], [39.0, 25142.0], [39.1, 25152.0], [39.2, 25152.0], [39.3, 25152.0], [39.4, 25166.0], [39.5, 25174.0], [39.6, 25175.0], [39.7, 25175.0], [39.8, 25198.0], [39.9, 25262.0], [40.0, 25265.0], [40.1, 25265.0], [40.2, 25293.0], [40.3, 25303.0], [40.4, 25303.0], [40.5, 25310.0], [40.6, 25315.0], [40.7, 25341.0], [40.8, 25341.0], [40.9, 25345.0], [41.0, 25370.0], [41.1, 25381.0], [41.2, 25381.0], [41.3, 25439.0], [41.4, 25460.0], [41.5, 25468.0], [41.6, 25468.0], [41.7, 25477.0], [41.8, 25489.0], [41.9, 25489.0], [42.0, 25531.0], [42.1, 25557.0], [42.2, 25578.0], [42.3, 25578.0], [42.4, 25613.0], [42.5, 25635.0], [42.6, 25691.0], [42.7, 25691.0], [42.8, 25719.0], [42.9, 25722.0], [43.0, 25764.0], [43.1, 25764.0], [43.2, 25777.0], [43.3, 25796.0], [43.4, 25796.0], [43.5, 25811.0], [43.6, 25830.0], [43.7, 25844.0], [43.8, 25844.0], [43.9, 25851.0], [44.0, 25853.0], [44.1, 25886.0], [44.2, 25886.0], [44.3, 25896.0], [44.4, 25943.0], [44.5, 25947.0], [44.6, 25947.0], [44.7, 26061.0], [44.8, 26084.0], [44.9, 26090.0], [45.0, 26090.0], [45.1, 26145.0], [45.2, 26146.0], [45.3, 26146.0], [45.4, 26193.0], [45.5, 26247.0], [45.6, 26261.0], [45.7, 26261.0], [45.8, 26277.0], [45.9, 26284.0], [46.0, 26337.0], [46.1, 26337.0], [46.2, 26341.0], [46.3, 26364.0], [46.4, 26370.0], [46.5, 26370.0], [46.6, 26377.0], [46.7, 26392.0], [46.8, 26392.0], [46.9, 26421.0], [47.0, 26496.0], [47.1, 26541.0], [47.2, 26541.0], [47.3, 26560.0], [47.4, 26567.0], [47.5, 26567.0], [47.6, 26567.0], [47.7, 26580.0], [47.8, 26584.0], [47.9, 26591.0], [48.0, 26591.0], [48.1, 26667.0], [48.2, 26675.0], [48.3, 26717.0], [48.4, 26717.0], [48.5, 26747.0], [48.6, 26749.0], [48.7, 26749.0], [48.8, 26768.0], [48.9, 26834.0], [49.0, 26931.0], [49.1, 26931.0], [49.2, 26950.0], [49.3, 26975.0], [49.4, 26977.0], [49.5, 26977.0], [49.6, 26998.0], [49.7, 27007.0], [49.8, 27028.0], [49.9, 27028.0], [50.0, 27111.0], [50.1, 27171.0], [50.2, 27171.0], [50.3, 27182.0], [50.4, 27244.0], [50.5, 27272.0], [50.6, 27272.0], [50.7, 27322.0], [50.8, 27329.0], [50.9, 27330.0], [51.0, 27330.0], [51.1, 27350.0], [51.2, 27393.0], [51.3, 27404.0], [51.4, 27404.0], [51.5, 27439.0], [51.6, 27473.0], [51.7, 27473.0], [51.8, 27475.0], [51.9, 27485.0], [52.0, 27490.0], [52.1, 27490.0], [52.2, 27500.0], [52.3, 27506.0], [52.4, 27522.0], [52.5, 27522.0], [52.6, 27529.0], [52.7, 27563.0], [52.8, 27577.0], [52.9, 27577.0], [53.0, 27616.0], [53.1, 27622.0], [53.2, 27678.0], [53.3, 27678.0], [53.4, 27680.0], [53.5, 27690.0], [53.6, 27690.0], [53.7, 27706.0], [53.8, 27712.0], [53.9, 27713.0], [54.0, 27713.0], [54.1, 27731.0], [54.2, 27770.0], [54.3, 27781.0], [54.4, 27781.0], [54.5, 27802.0], [54.6, 27803.0], [54.7, 27826.0], [54.8, 27826.0], [54.9, 27863.0], [55.0, 27872.0], [55.1, 27872.0], [55.2, 27891.0], [55.3, 27901.0], [55.4, 27920.0], [55.5, 27920.0], [55.6, 27948.0], [55.7, 27959.0], [55.8, 27964.0], [55.9, 27964.0], [56.0, 27965.0], [56.1, 28018.0], [56.2, 28021.0], [56.3, 28021.0], [56.4, 28065.0], [56.5, 28073.0], [56.6, 28077.0], [56.7, 28077.0], [56.8, 28134.0], [56.9, 28137.0], [57.0, 28137.0], [57.1, 28166.0], [57.2, 28171.0], [57.3, 28193.0], [57.4, 28193.0], [57.5, 28231.0], [57.6, 28234.0], [57.7, 28276.0], [57.8, 28276.0], [57.9, 28287.0], [58.0, 28313.0], [58.1, 28315.0], [58.2, 28315.0], [58.3, 28335.0], [58.4, 28346.0], [58.5, 28346.0], [58.6, 28352.0], [58.7, 28356.0], [58.8, 28364.0], [58.9, 28364.0], [59.0, 28392.0], [59.1, 28404.0], [59.2, 28405.0], [59.3, 28405.0], [59.4, 28418.0], [59.5, 28418.0], [59.6, 28438.0], [59.7, 28438.0], [59.8, 28480.0], [59.9, 28490.0], [60.0, 28490.0], [60.1, 28490.0], [60.2, 28500.0], [60.3, 28503.0], [60.4, 28503.0], [60.5, 28533.0], [60.6, 28553.0], [60.7, 28574.0], [60.8, 28574.0], [60.9, 28636.0], [61.0, 28641.0], [61.1, 28658.0], [61.2, 28658.0], [61.3, 28664.0], [61.4, 28677.0], [61.5, 28692.0], [61.6, 28692.0], [61.7, 28700.0], [61.8, 28714.0], [61.9, 28714.0], [62.0, 28736.0], [62.1, 28740.0], [62.2, 28743.0], [62.3, 28743.0], [62.4, 28746.0], [62.5, 28755.0], [62.6, 28768.0], [62.7, 28768.0], [62.8, 28788.0], [62.9, 28790.0], [63.0, 28795.0], [63.1, 28795.0], [63.2, 28796.0], [63.3, 28799.0], [63.4, 28799.0], [63.5, 28814.0], [63.6, 28820.0], [63.7, 28824.0], [63.8, 28824.0], [63.9, 28831.0], [64.0, 28843.0], [64.1, 28855.0], [64.2, 28855.0], [64.3, 28860.0], [64.4, 28862.0], [64.5, 28867.0], [64.6, 28867.0], [64.7, 28882.0], [64.8, 28890.0], [64.9, 28891.0], [65.0, 28891.0], [65.1, 28898.0], [65.2, 28903.0], [65.3, 28903.0], [65.4, 28909.0], [65.5, 28912.0], [65.6, 28912.0], [65.7, 28912.0], [65.8, 28921.0], [65.9, 28925.0], [66.0, 28930.0], [66.1, 28930.0], [66.2, 28939.0], [66.3, 28961.0], [66.4, 28962.0], [66.5, 28962.0], [66.6, 28972.0], [66.7, 29009.0], [66.8, 29009.0], [66.9, 29011.0], [67.0, 29013.0], [67.1, 29018.0], [67.2, 29018.0], [67.3, 29019.0], [67.4, 29021.0], [67.5, 29022.0], [67.6, 29022.0], [67.7, 29038.0], [67.8, 29047.0], [67.9, 29047.0], [68.0, 29047.0], [68.1, 29057.0], [68.2, 29062.0], [68.3, 29063.0], [68.4, 29063.0], [68.5, 29073.0], [68.6, 29085.0], [68.7, 29085.0], [68.8, 29096.0], [68.9, 29100.0], [69.0, 29123.0], [69.1, 29123.0], [69.2, 29132.0], [69.3, 29134.0], [69.4, 29135.0], [69.5, 29135.0], [69.6, 29150.0], [69.7, 29162.0], [69.8, 29164.0], [69.9, 29164.0], [70.0, 29165.0], [70.1, 29165.0], [70.2, 29165.0], [70.3, 29165.0], [70.4, 29167.0], [70.5, 29167.0], [70.6, 29167.0], [70.7, 29185.0], [70.8, 29191.0], [70.9, 29192.0], [71.0, 29192.0], [71.1, 29195.0], [71.2, 29197.0], [71.3, 29203.0], [71.4, 29203.0], [71.5, 29230.0], [71.6, 29240.0], [71.7, 29240.0], [71.8, 29242.0], [71.9, 29263.0], [72.0, 29265.0], [72.1, 29265.0], [72.2, 29274.0], [72.3, 29280.0], [72.4, 29283.0], [72.5, 29283.0], [72.6, 29284.0], [72.7, 29290.0], [72.8, 29290.0], [72.9, 29290.0], [73.0, 29300.0], [73.1, 29311.0], [73.2, 29314.0], [73.3, 29314.0], [73.4, 29316.0], [73.5, 29318.0], [73.6, 29318.0], [73.7, 29322.0], [73.8, 29332.0], [73.9, 29333.0], [74.0, 29333.0], [74.1, 29352.0], [74.2, 29354.0], [74.3, 29358.0], [74.4, 29358.0], [74.5, 29366.0], [74.6, 29367.0], [74.7, 29367.0], [74.8, 29367.0], [74.9, 29372.0], [75.0, 29378.0], [75.1, 29378.0], [75.2, 29383.0], [75.3, 29393.0], [75.4, 29408.0], [75.5, 29408.0], [75.6, 29412.0], [75.7, 29420.0], [75.8, 29422.0], [75.9, 29422.0], [76.0, 29425.0], [76.1, 29429.0], [76.2, 29430.0], [76.3, 29430.0], [76.4, 29437.0], [76.5, 29448.0], [76.6, 29464.0], [76.7, 29464.0], [76.8, 29465.0], [76.9, 29476.0], [77.0, 29476.0], [77.1, 29478.0], [77.2, 29482.0], [77.3, 29484.0], [77.4, 29484.0], [77.5, 29489.0], [77.6, 29492.0], [77.7, 29496.0], [77.8, 29496.0], [77.9, 29504.0], [78.0, 29505.0], [78.1, 29507.0], [78.2, 29507.0], [78.3, 29512.0], [78.4, 29521.0], [78.5, 29521.0], [78.6, 29523.0], [78.7, 29532.0], [78.8, 29541.0], [78.9, 29541.0], [79.0, 29544.0], [79.1, 29552.0], [79.2, 29554.0], [79.3, 29554.0], [79.4, 29555.0], [79.5, 29559.0], [79.6, 29566.0], [79.7, 29566.0], [79.8, 29572.0], [79.9, 29573.0], [80.0, 29576.0], [80.1, 29576.0], [80.2, 29577.0], [80.3, 29578.0], [80.4, 29578.0], [80.5, 29578.0], [80.6, 29582.0], [80.7, 29583.0], [80.8, 29583.0], [80.9, 29590.0], [81.0, 29590.0], [81.1, 29598.0], [81.2, 29598.0], [81.3, 29599.0], [81.4, 29602.0], [81.5, 29606.0], [81.6, 29606.0], [81.7, 29606.0], [81.8, 29617.0], [81.9, 29617.0], [82.0, 29623.0], [82.1, 29626.0], [82.2, 29646.0], [82.3, 29646.0], [82.4, 29650.0], [82.5, 29652.0], [82.6, 29653.0], [82.7, 29653.0], [82.8, 29656.0], [82.9, 29666.0], [83.0, 29669.0], [83.1, 29669.0], [83.2, 29675.0], [83.3, 29684.0], [83.4, 29684.0], [83.5, 29684.0], [83.6, 29684.0], [83.7, 29686.0], [83.8, 29686.0], [83.9, 29689.0], [84.0, 29697.0], [84.1, 29698.0], [84.2, 29698.0], [84.3, 29698.0], [84.4, 29711.0], [84.5, 29711.0], [84.6, 29711.0], [84.7, 29714.0], [84.8, 29730.0], [84.9, 29737.0], [85.0, 29737.0], [85.1, 29738.0], [85.2, 29739.0], [85.3, 29739.0], [85.4, 29739.0], [85.5, 29749.0], [85.6, 29751.0], [85.7, 29751.0], [85.8, 29751.0], [85.9, 29756.0], [86.0, 29760.0], [86.1, 29760.0], [86.2, 29764.0], [86.3, 29766.0], [86.4, 29773.0], [86.5, 29773.0], [86.6, 29774.0], [86.7, 29774.0], [86.8, 29774.0], [86.9, 29774.0], [87.0, 29793.0], [87.1, 29798.0], [87.2, 29798.0], [87.3, 29799.0], [87.4, 29809.0], [87.5, 29818.0], [87.6, 29818.0], [87.7, 29827.0], [87.8, 29842.0], [87.9, 29852.0], [88.0, 29852.0], [88.1, 29861.0], [88.2, 29862.0], [88.3, 29866.0], [88.4, 29866.0], [88.5, 29874.0], [88.6, 29896.0], [88.7, 29896.0], [88.8, 29903.0], [88.9, 29907.0], [89.0, 29914.0], [89.1, 29914.0], [89.2, 29914.0], [89.3, 29914.0], [89.4, 29914.0], [89.5, 29914.0], [89.6, 29918.0], [89.7, 29919.0], [89.8, 29920.0], [89.9, 29920.0], [90.0, 29928.0], [90.1, 29929.0], [90.2, 29929.0], [90.3, 29934.0], [90.4, 29938.0], [90.5, 29944.0], [90.6, 29944.0], [90.7, 29949.0], [90.8, 29970.0], [90.9, 29981.0], [91.0, 29981.0], [91.1, 29994.0], [91.2, 29994.0], [91.3, 30012.0], [91.4, 30012.0], [91.5, 30028.0], [91.6, 30053.0], [91.7, 30053.0], [91.8, 30087.0], [91.9, 30154.0], [92.0, 30175.0], [92.1, 30175.0], [92.2, 30239.0], [92.3, 30321.0], [92.4, 30323.0], [92.5, 30323.0], [92.6, 30339.0], [92.7, 30362.0], [92.8, 30377.0], [92.9, 30377.0], [93.0, 30409.0], [93.1, 30450.0], [93.2, 30528.0], [93.3, 30528.0], [93.4, 30596.0], [93.5, 30724.0], [93.6, 30724.0], [93.7, 30805.0], [93.8, 30847.0], [93.9, 31364.0], [94.0, 31364.0], [94.1, 31382.0], [94.2, 31394.0], [94.3, 31554.0], [94.4, 31554.0], [94.5, 31592.0], [94.6, 31607.0], [94.7, 31620.0], [94.8, 31620.0], [94.9, 31817.0], [95.0, 31989.0], [95.1, 31989.0], [95.2, 32100.0], [95.3, 32131.0], [95.4, 32164.0], [95.5, 32164.0], [95.6, 32179.0], [95.7, 32793.0], [95.8, 33089.0], [95.9, 33089.0], [96.0, 33193.0], [96.1, 33208.0], [96.2, 33541.0], [96.3, 33541.0], [96.4, 33819.0], [96.5, 33836.0], [96.6, 34539.0], [96.7, 34539.0], [96.8, 34652.0], [96.9, 35112.0], [97.0, 35112.0], [97.1, 35615.0], [97.2, 35916.0], [97.3, 36251.0], [97.4, 36251.0], [97.5, 36284.0], [97.6, 37757.0], [97.7, 37810.0], [97.8, 37810.0], [97.9, 37963.0], [98.0, 38518.0], [98.1, 38841.0], [98.2, 38841.0], [98.3, 40400.0], [98.4, 40703.0], [98.5, 40703.0], [98.6, 41067.0], [98.7, 41433.0], [98.8, 41914.0], [98.9, 41914.0], [99.0, 42160.0], [99.1, 42584.0], [99.2, 42929.0], [99.3, 42929.0], [99.4, 43012.0], [99.5, 43321.0], [99.6, 43783.0], [99.7, 43783.0], [99.8, 43823.0], [99.9, 44261.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2900.0, "maxY": 26.0, "series": [{"data": [[34500.0, 1.0], [33100.0, 1.0], [33500.0, 1.0], [35900.0, 1.0], [35100.0, 1.0], [37900.0, 1.0], [38500.0, 1.0], [37700.0, 1.0], [40700.0, 1.0], [42500.0, 1.0], [41900.0, 1.0], [42100.0, 1.0], [42900.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [2900.0, 1.0], [5900.0, 1.0], [8000.0, 1.0], [10800.0, 1.0], [13500.0, 1.0], [15900.0, 1.0], [17300.0, 5.0], [17200.0, 3.0], [16900.0, 13.0], [17000.0, 6.0], [17400.0, 5.0], [17100.0, 4.0], [16500.0, 2.0], [16800.0, 6.0], [16700.0, 1.0], [16600.0, 1.0], [18400.0, 3.0], [18000.0, 3.0], [17900.0, 2.0], [17600.0, 4.0], [17500.0, 5.0], [17700.0, 4.0], [17800.0, 2.0], [18300.0, 1.0], [18200.0, 1.0], [18100.0, 1.0], [19200.0, 2.0], [18500.0, 1.0], [18800.0, 1.0], [18700.0, 3.0], [18600.0, 2.0], [18900.0, 5.0], [19100.0, 3.0], [19400.0, 3.0], [19700.0, 2.0], [20000.0, 5.0], [20200.0, 4.0], [19900.0, 3.0], [19500.0, 5.0], [19600.0, 1.0], [19800.0, 2.0], [20300.0, 1.0], [20400.0, 1.0], [20100.0, 3.0], [20600.0, 1.0], [21200.0, 1.0], [20900.0, 1.0], [21500.0, 9.0], [20500.0, 1.0], [20800.0, 1.0], [21000.0, 1.0], [21100.0, 1.0], [21300.0, 1.0], [21400.0, 1.0], [22300.0, 5.0], [22000.0, 4.0], [22100.0, 4.0], [22500.0, 2.0], [21600.0, 4.0], [21900.0, 5.0], [22400.0, 2.0], [21700.0, 1.0], [21800.0, 3.0], [23300.0, 8.0], [22700.0, 4.0], [23500.0, 5.0], [23400.0, 3.0], [23000.0, 5.0], [22900.0, 3.0], [22600.0, 2.0], [22800.0, 3.0], [23200.0, 2.0], [23100.0, 1.0], [23600.0, 4.0], [23700.0, 7.0], [23900.0, 8.0], [24000.0, 4.0], [24500.0, 5.0], [24200.0, 5.0], [24100.0, 2.0], [24300.0, 6.0], [24400.0, 6.0], [23800.0, 6.0], [25400.0, 5.0], [25300.0, 7.0], [24700.0, 3.0], [25200.0, 3.0], [25500.0, 3.0], [25100.0, 9.0], [25000.0, 8.0], [24900.0, 2.0], [24600.0, 5.0], [24800.0, 4.0], [25700.0, 5.0], [26500.0, 7.0], [26100.0, 3.0], [26200.0, 4.0], [26600.0, 2.0], [25800.0, 7.0], [26300.0, 6.0], [26400.0, 2.0], [26000.0, 3.0], [25900.0, 2.0], [25600.0, 3.0], [26700.0, 4.0], [27600.0, 5.0], [26900.0, 5.0], [27400.0, 6.0], [27500.0, 6.0], [27100.0, 3.0], [27200.0, 2.0], [27300.0, 5.0], [27000.0, 2.0], [26800.0, 1.0], [27700.0, 6.0], [28000.0, 5.0], [28400.0, 8.0], [27800.0, 6.0], [28600.0, 6.0], [28500.0, 5.0], [28200.0, 4.0], [28300.0, 8.0], [27900.0, 6.0], [28100.0, 5.0], [29500.0, 26.0], [29200.0, 12.0], [29400.0, 18.0], [28700.0, 13.0], [29600.0, 22.0], [29000.0, 16.0], [29300.0, 18.0], [29100.0, 18.0], [28900.0, 11.0], [28800.0, 13.0], [29900.0, 19.0], [30100.0, 2.0], [30000.0, 4.0], [30300.0, 5.0], [29800.0, 10.0], [29700.0, 22.0], [30500.0, 2.0], [30700.0, 1.0], [30200.0, 1.0], [30400.0, 2.0], [31300.0, 3.0], [30800.0, 2.0], [31500.0, 2.0], [31600.0, 2.0], [32700.0, 1.0], [32100.0, 4.0], [31800.0, 1.0], [31900.0, 1.0], [33800.0, 2.0], [33200.0, 1.0], [34600.0, 1.0], [33000.0, 1.0], [35600.0, 1.0], [36200.0, 2.0], [38800.0, 1.0], [37800.0, 1.0], [40400.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [41400.0, 1.0], [44200.0, 1.0], [43800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.200000000000001, "minX": 1.6024791E12, "maxY": 10.0, "series": [{"data": [[1.6024794E12, 10.0], [1.6024791E12, 10.0], [1.60248E12, 10.0], [1.60248102E12, 8.200000000000001], [1.6024797E12, 10.0], [1.60248042E12, 10.0], [1.60247982E12, 10.0], [1.60248072E12, 10.0], [1.60248012E12, 10.0], [1.60247952E12, 10.0], [1.60248054E12, 10.0], [1.60247922E12, 10.0], [1.60248084E12, 10.0], [1.60247964E12, 10.0], [1.60247934E12, 10.0], [1.60248024E12, 10.0], [1.60247994E12, 10.0], [1.60248066E12, 10.0], [1.60248096E12, 10.0], [1.60248006E12, 10.0], [1.60248036E12, 10.0], [1.60247916E12, 10.0], [1.60247976E12, 10.0], [1.60248078E12, 10.0], [1.60247946E12, 10.0], [1.60247988E12, 10.0], [1.60248018E12, 10.0], [1.60247958E12, 10.0], [1.60248048E12, 10.0], [1.6024809E12, 10.0], [1.60247928E12, 10.0], [1.6024803E12, 10.0], [1.6024806E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248102E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16762.0, "minX": 1.0, "maxY": 26117.589531680456, "series": [{"data": [[8.0, 17180.0], [4.0, 17035.0], [2.0, 16762.0], [1.0, 17058.0], [9.0, 17217.0], [10.0, 26117.589531680456], [5.0, 16976.0], [6.0, 17033.0], [3.0, 16905.0], [7.0, 17089.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26006.292517006816]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 51.21666666666667, "minX": 1.6024791E12, "maxY": 213935.61666666667, "series": [{"data": [[1.6024794E12, 43467.46666666667], [1.6024791E12, 92375.2], [1.60248E12, 68565.18333333333], [1.60248102E12, 34745.36666666667], [1.6024797E12, 45886.416666666664], [1.60248042E12, 51299.88333333333], [1.60247982E12, 34004.98333333333], [1.60248072E12, 43538.38333333333], [1.60248012E12, 58475.01666666667], [1.60247952E12, 45632.9], [1.60248054E12, 52331.933333333334], [1.60247922E12, 86604.25], [1.60248084E12, 27063.8], [1.60247964E12, 54119.63333333333], [1.60247934E12, 76704.28333333334], [1.60248024E12, 76226.45], [1.60247994E12, 170599.65], [1.60248066E12, 48137.28333333333], [1.60248096E12, 70904.95], [1.60248006E12, 213935.61666666667], [1.60248036E12, 44003.583333333336], [1.60247916E12, 165405.58333333334], [1.60247976E12, 42577.88333333333], [1.60248078E12, 33047.46666666667], [1.60247946E12, 51127.916666666664], [1.60247988E12, 70899.7], [1.60248018E12, 86290.05], [1.60247958E12, 49645.95], [1.60248048E12, 45514.416666666664], [1.6024809E12, 146159.4], [1.60247928E12, 109073.11666666667], [1.6024803E12, 36141.01666666667], [1.6024806E12, 48926.11666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6024794E12, 161.95], [1.6024791E12, 51.21666666666667], [1.60248E12, 202.23333333333332], [1.60248102E12, 169.08333333333334], [1.6024797E12, 153.36666666666667], [1.60248042E12, 146.16666666666666], [1.60247982E12, 175.25], [1.60248072E12, 153.26666666666668], [1.60248012E12, 229.86666666666667], [1.60247952E12, 153.41666666666666], [1.60248054E12, 154.05], [1.60247922E12, 209.08333333333334], [1.60248084E12, 175.2], [1.60247964E12, 153.68333333333334], [1.60247934E12, 168.03333333333333], [1.60248024E12, 182.93333333333334], [1.60247994E12, 172.48333333333332], [1.60248066E12, 146.13333333333333], [1.60248096E12, 139.36666666666667], [1.60248006E12, 175.95], [1.60248036E12, 153.38333333333333], [1.60247916E12, 183.8], [1.60247976E12, 146.0], [1.60248078E12, 175.03333333333333], [1.60247946E12, 146.15], [1.60247988E12, 217.3], [1.60248018E12, 158.15], [1.60247958E12, 146.13333333333333], [1.60248048E12, 146.1], [1.6024809E12, 203.36666666666667], [1.60247928E12, 112.21666666666667], [1.6024803E12, 125.15], [1.6024806E12, 153.76666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248102E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10762.142857142857, "minX": 1.6024791E12, "maxY": 37460.066666666666, "series": [{"data": [[1.6024794E12, 26355.636363636364], [1.6024791E12, 10762.142857142857], [1.60248E12, 23880.689655172413], [1.60248102E12, 20020.600000000002], [1.6024797E12, 28849.80952380952], [1.60248042E12, 30081.199999999997], [1.60247982E12, 26392.166666666664], [1.60248072E12, 29280.047619047615], [1.60248012E12, 18657.060606060604], [1.60247952E12, 29263.857142857145], [1.60248054E12, 28291.23809523809], [1.60247922E12, 19919.1724137931], [1.60248084E12, 23286.95833333334], [1.60247964E12, 28915.333333333332], [1.60247934E12, 27997.652173913044], [1.60248024E12, 25163.959999999995], [1.60247994E12, 21154.499999999996], [1.60248066E12, 29538.300000000003], [1.60248096E12, 29943.15789473684], [1.60248006E12, 24316.625], [1.60248036E12, 31743.33333333333], [1.60247916E12, 24461.2], [1.60247976E12, 29443.0], [1.60248078E12, 26441.208333333332], [1.60247946E12, 28768.65], [1.60247988E12, 20772.233333333337], [1.60248018E12, 25907.714285714286], [1.60247958E12, 29409.7], [1.60248048E12, 29724.8], [1.6024809E12, 21896.28571428571], [1.60247928E12, 37460.066666666666], [1.6024803E12, 30046.294117647063], [1.6024806E12, 28849.52380952381]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248102E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10756.285714285714, "minX": 1.6024791E12, "maxY": 37456.4, "series": [{"data": [[1.6024794E12, 26354.72727272728], [1.6024791E12, 10756.285714285714], [1.60248E12, 23878.586206896547], [1.60248102E12, 20018.8], [1.6024797E12, 28848.619047619046], [1.60248042E12, 30080.05], [1.60247982E12, 26390.666666666664], [1.60248072E12, 29278.85714285714], [1.60248012E12, 18655.666666666664], [1.60247952E12, 29262.76190476191], [1.60248054E12, 28289.90476190476], [1.60247922E12, 19917.344827586203], [1.60248084E12, 23285.541666666664], [1.60247964E12, 28914.190476190477], [1.60247934E12, 27995.999999999993], [1.60248024E12, 25162.52], [1.60247994E12, 21150.041666666668], [1.60248066E12, 29537.1], [1.60248096E12, 29940.89473684211], [1.60248006E12, 24312.124999999996], [1.60248036E12, 31742.285714285717], [1.60247916E12, 24458.480000000003], [1.60247976E12, 29441.85], [1.60248078E12, 26440.083333333336], [1.60247946E12, 28767.300000000003], [1.60247988E12, 20770.399999999998], [1.60248018E12, 25905.52380952381], [1.60247958E12, 29408.350000000002], [1.60248048E12, 29723.550000000003], [1.6024809E12, 21892.821428571424], [1.60247928E12, 37456.4], [1.6024803E12, 30045.23529411765], [1.6024806E12, 28848.333333333332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248102E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.20833333333333331, "minX": 1.6024791E12, "maxY": 11.428571428571429, "series": [{"data": [[1.6024794E12, 0.3181818181818182], [1.6024791E12, 11.428571428571429], [1.60248E12, 0.37931034482758624], [1.60248102E12, 0.44000000000000006], [1.6024797E12, 0.6190476190476191], [1.60248042E12, 0.65], [1.60247982E12, 0.2916666666666667], [1.60248072E12, 0.6666666666666665], [1.60248012E12, 0.36363636363636376], [1.60247952E12, 0.5238095238095238], [1.60248054E12, 0.6190476190476191], [1.60247922E12, 0.5862068965517243], [1.60248084E12, 0.20833333333333331], [1.60247964E12, 0.33333333333333337], [1.60247934E12, 0.7391304347826088], [1.60248024E12, 0.27999999999999997], [1.60247994E12, 0.41666666666666663], [1.60248066E12, 0.25], [1.60248096E12, 0.2631578947368421], [1.60248006E12, 0.5416666666666667], [1.60248036E12, 0.6666666666666667], [1.60247916E12, 0.24], [1.60247976E12, 0.5], [1.60248078E12, 0.5833333333333333], [1.60247946E12, 0.5500000000000002], [1.60247988E12, 0.4666666666666666], [1.60248018E12, 0.3333333333333333], [1.60247958E12, 0.55], [1.60248048E12, 0.35000000000000003], [1.6024809E12, 0.3571428571428572], [1.60247928E12, 0.6666666666666666], [1.6024803E12, 0.5294117647058824], [1.6024806E12, 0.2857142857142857]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248102E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2949.0, "minX": 1.6024791E12, "maxY": 44261.0, "series": [{"data": [[1.6024794E12, 30847.0], [1.6024791E12, 18045.0], [1.60248E12, 31817.0], [1.60248102E12, 33089.0], [1.6024797E12, 29393.0], [1.60248042E12, 30724.0], [1.60247982E12, 29554.0], [1.60248072E12, 29981.0], [1.60248012E12, 24819.0], [1.60247952E12, 29994.0], [1.60248054E12, 29195.0], [1.60247922E12, 24065.0], [1.60248084E12, 26560.0], [1.60247964E12, 29773.0], [1.60247934E12, 34539.0], [1.60248024E12, 28677.0], [1.60247994E12, 29920.0], [1.60248066E12, 29774.0], [1.60248096E12, 37757.0], [1.60248006E12, 28692.0], [1.60248036E12, 42929.0], [1.60247916E12, 28021.0], [1.60247976E12, 29914.0], [1.60248078E12, 28636.0], [1.60247946E12, 29994.0], [1.60247988E12, 25811.0], [1.60248018E12, 32100.0], [1.60247958E12, 29766.0], [1.60248048E12, 30053.0], [1.6024809E12, 27770.0], [1.60247928E12, 44261.0], [1.6024803E12, 42160.0], [1.6024806E12, 29714.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6024794E12, 23396.0], [1.6024791E12, 2949.0], [1.60248E12, 17388.0], [1.60248102E12, 16633.0], [1.6024797E12, 27948.0], [1.60248042E12, 29606.0], [1.60247982E12, 23895.0], [1.60248072E12, 28736.0], [1.60248012E12, 16572.0], [1.60247952E12, 28740.0], [1.60248054E12, 27111.0], [1.60247922E12, 16915.0], [1.60248084E12, 21145.0], [1.60247964E12, 27959.0], [1.60247934E12, 24288.0], [1.60248024E12, 23349.0], [1.60247994E12, 17571.0], [1.60248066E12, 29263.0], [1.60248096E12, 25460.0], [1.60248006E12, 18727.0], [1.60248036E12, 25844.0], [1.60247916E12, 20005.0], [1.60247976E12, 29073.0], [1.60248078E12, 24470.0], [1.60247946E12, 25139.0], [1.60247988E12, 16514.0], [1.60248018E12, 19480.0], [1.60247958E12, 28925.0], [1.60248048E12, 29165.0], [1.6024809E12, 18451.0], [1.60247928E12, 23545.0], [1.6024803E12, 22407.0], [1.6024806E12, 28171.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6024794E12, 23396.0], [1.6024791E12, 2949.0], [1.60248E12, 17388.0], [1.60248102E12, 16633.0], [1.6024797E12, 27948.0], [1.60248042E12, 29606.0], [1.60247982E12, 23895.0], [1.60248072E12, 28736.0], [1.60248012E12, 16572.0], [1.60247952E12, 28740.0], [1.60248054E12, 27111.0], [1.60247922E12, 16915.0], [1.60248084E12, 21145.0], [1.60247964E12, 27959.0], [1.60247934E12, 24288.0], [1.60248024E12, 23349.0], [1.60247994E12, 17571.0], [1.60248066E12, 29263.0], [1.60248096E12, 25460.0], [1.60248006E12, 18727.0], [1.60248036E12, 25844.0], [1.60247916E12, 20005.0], [1.60247976E12, 29073.0], [1.60248078E12, 24470.0], [1.60247946E12, 25139.0], [1.60247988E12, 16514.0], [1.60248018E12, 19480.0], [1.60247958E12, 28925.0], [1.60248048E12, 29165.0], [1.6024809E12, 18451.0], [1.60247928E12, 23545.0], [1.6024803E12, 22407.0], [1.6024806E12, 28171.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6024794E12, 23396.0], [1.6024791E12, 2949.0], [1.60248E12, 17388.0], [1.60248102E12, 16633.0], [1.6024797E12, 27948.0], [1.60248042E12, 29606.0], [1.60247982E12, 23895.0], [1.60248072E12, 28736.0], [1.60248012E12, 16572.0], [1.60247952E12, 28740.0], [1.60248054E12, 27111.0], [1.60247922E12, 16915.0], [1.60248084E12, 21145.0], [1.60247964E12, 27959.0], [1.60247934E12, 24288.0], [1.60248024E12, 23349.0], [1.60247994E12, 17571.0], [1.60248066E12, 29263.0], [1.60248096E12, 25460.0], [1.60248006E12, 18727.0], [1.60248036E12, 25844.0], [1.60247916E12, 20005.0], [1.60247976E12, 29073.0], [1.60248078E12, 24470.0], [1.60247946E12, 25139.0], [1.60247988E12, 16514.0], [1.60248018E12, 19480.0], [1.60247958E12, 28925.0], [1.60248048E12, 29165.0], [1.6024809E12, 18451.0], [1.60247928E12, 23545.0], [1.6024803E12, 22407.0], [1.6024806E12, 28171.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6024794E12, 23396.0], [1.6024791E12, 2949.0], [1.60248E12, 17388.0], [1.60248102E12, 16633.0], [1.6024797E12, 27948.0], [1.60248042E12, 29606.0], [1.60247982E12, 23895.0], [1.60248072E12, 28736.0], [1.60248012E12, 16572.0], [1.60247952E12, 28740.0], [1.60248054E12, 27111.0], [1.60247922E12, 16915.0], [1.60248084E12, 21145.0], [1.60247964E12, 27959.0], [1.60247934E12, 24288.0], [1.60248024E12, 23349.0], [1.60247994E12, 17571.0], [1.60248066E12, 29263.0], [1.60248096E12, 25460.0], [1.60248006E12, 18727.0], [1.60248036E12, 25844.0], [1.60247916E12, 20005.0], [1.60247976E12, 29073.0], [1.60248078E12, 24470.0], [1.60247946E12, 25139.0], [1.60247988E12, 16514.0], [1.60248018E12, 19480.0], [1.60247958E12, 28925.0], [1.60248048E12, 29165.0], [1.6024809E12, 18451.0], [1.60247928E12, 23545.0], [1.6024803E12, 22407.0], [1.6024806E12, 28171.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6024794E12, 26466.5], [1.6024791E12, 10891.0], [1.60248E12, 25059.0], [1.60248102E12, 17106.0], [1.6024797E12, 28867.0], [1.60248042E12, 29946.5], [1.60247982E12, 26199.0], [1.60248072E12, 29354.0], [1.60248012E12, 17817.0], [1.60247952E12, 29063.0], [1.60248054E12, 28480.0], [1.60247922E12, 19554.0], [1.60248084E12, 23115.5], [1.60247964E12, 29100.0], [1.60247934E12, 26146.0], [1.60248024E12, 24667.0], [1.60247994E12, 21586.0], [1.60248066E12, 29578.0], [1.60248096E12, 28961.0], [1.60248006E12, 23837.5], [1.60248036E12, 29896.0], [1.60247916E12, 25477.0], [1.60247976E12, 29362.5], [1.60248078E12, 26468.5], [1.60247946E12, 29303.0], [1.60247988E12, 21023.0], [1.60248018E12, 25777.0], [1.60247958E12, 29484.5], [1.60248048E12, 29752.5], [1.6024809E12, 21614.0], [1.60247928E12, 41067.0], [1.6024803E12, 27678.0], [1.6024806E12, 28500.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248102E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27111.0, "minX": 1.0, "maxY": 27111.0, "series": [{"data": [[1.0, 27111.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27111.0, "minX": 1.0, "maxY": 27111.0, "series": [{"data": [[1.0, 27111.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.6024791E12, "maxY": 0.55, "series": [{"data": [[1.6024794E12, 0.36666666666666664], [1.6024791E12, 0.2833333333333333], [1.60248E12, 0.48333333333333334], [1.60248102E12, 0.25], [1.6024797E12, 0.35], [1.60248042E12, 0.3333333333333333], [1.60247982E12, 0.4], [1.60248072E12, 0.35], [1.60248012E12, 0.55], [1.60247952E12, 0.35], [1.60248054E12, 0.35], [1.60247922E12, 0.48333333333333334], [1.60248084E12, 0.4], [1.60247964E12, 0.35], [1.60247934E12, 0.38333333333333336], [1.60248024E12, 0.4166666666666667], [1.60247994E12, 0.4], [1.60248066E12, 0.3333333333333333], [1.60248096E12, 0.31666666666666665], [1.60248006E12, 0.4], [1.60248036E12, 0.35], [1.60247916E12, 0.4166666666666667], [1.60247976E12, 0.3333333333333333], [1.60248078E12, 0.4], [1.60247946E12, 0.3333333333333333], [1.60247988E12, 0.5], [1.60248018E12, 0.35], [1.60247958E12, 0.3333333333333333], [1.60248048E12, 0.3333333333333333], [1.6024809E12, 0.4666666666666667], [1.60247928E12, 0.25], [1.6024803E12, 0.2833333333333333], [1.6024806E12, 0.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248102E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.6024791E12, "maxY": 0.55, "series": [{"data": [[1.6024794E12, 0.36666666666666664], [1.6024791E12, 0.11666666666666667], [1.60248E12, 0.48333333333333334], [1.60248102E12, 0.4166666666666667], [1.6024797E12, 0.35], [1.60248042E12, 0.3333333333333333], [1.60247982E12, 0.4], [1.60248072E12, 0.35], [1.60248012E12, 0.55], [1.60247952E12, 0.35], [1.60248054E12, 0.35], [1.60247922E12, 0.48333333333333334], [1.60248084E12, 0.4], [1.60247964E12, 0.35], [1.60247934E12, 0.38333333333333336], [1.60248024E12, 0.4166666666666667], [1.60247994E12, 0.4], [1.60248066E12, 0.3333333333333333], [1.60248096E12, 0.31666666666666665], [1.60248006E12, 0.4], [1.60248036E12, 0.35], [1.60247916E12, 0.4166666666666667], [1.60247976E12, 0.3333333333333333], [1.60248078E12, 0.4], [1.60247946E12, 0.3333333333333333], [1.60247988E12, 0.5], [1.60248018E12, 0.35], [1.60247958E12, 0.3333333333333333], [1.60248048E12, 0.3333333333333333], [1.6024809E12, 0.4666666666666667], [1.60247928E12, 0.25], [1.6024803E12, 0.2833333333333333], [1.6024806E12, 0.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248102E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.6024791E12, "maxY": 0.55, "series": [{"data": [[1.6024794E12, 0.36666666666666664], [1.6024791E12, 0.11666666666666667], [1.60248E12, 0.48333333333333334], [1.60248102E12, 0.4166666666666667], [1.6024797E12, 0.35], [1.60248042E12, 0.3333333333333333], [1.60247982E12, 0.4], [1.60248072E12, 0.35], [1.60248012E12, 0.55], [1.60247952E12, 0.35], [1.60248054E12, 0.35], [1.60247922E12, 0.48333333333333334], [1.60248084E12, 0.4], [1.60247964E12, 0.35], [1.60247934E12, 0.38333333333333336], [1.60248024E12, 0.4166666666666667], [1.60247994E12, 0.4], [1.60248066E12, 0.3333333333333333], [1.60248096E12, 0.31666666666666665], [1.60248006E12, 0.4], [1.60248036E12, 0.35], [1.60247916E12, 0.4166666666666667], [1.60247976E12, 0.3333333333333333], [1.60248078E12, 0.4], [1.60247946E12, 0.3333333333333333], [1.60247988E12, 0.5], [1.60248018E12, 0.35], [1.60247958E12, 0.3333333333333333], [1.60248048E12, 0.3333333333333333], [1.6024809E12, 0.4666666666666667], [1.60247928E12, 0.25], [1.6024803E12, 0.2833333333333333], [1.6024806E12, 0.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248102E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.6024791E12, "maxY": 0.55, "series": [{"data": [[1.6024794E12, 0.36666666666666664], [1.6024791E12, 0.11666666666666667], [1.60248E12, 0.48333333333333334], [1.60248102E12, 0.4166666666666667], [1.6024797E12, 0.35], [1.60248042E12, 0.3333333333333333], [1.60247982E12, 0.4], [1.60248072E12, 0.35], [1.60248012E12, 0.55], [1.60247952E12, 0.35], [1.60248054E12, 0.35], [1.60247922E12, 0.48333333333333334], [1.60248084E12, 0.4], [1.60247964E12, 0.35], [1.60247934E12, 0.38333333333333336], [1.60248024E12, 0.4166666666666667], [1.60247994E12, 0.4], [1.60248066E12, 0.3333333333333333], [1.60248096E12, 0.31666666666666665], [1.60248006E12, 0.4], [1.60248036E12, 0.35], [1.60247916E12, 0.4166666666666667], [1.60247976E12, 0.3333333333333333], [1.60248078E12, 0.4], [1.60247946E12, 0.3333333333333333], [1.60247988E12, 0.5], [1.60248018E12, 0.35], [1.60247958E12, 0.3333333333333333], [1.60248048E12, 0.3333333333333333], [1.6024809E12, 0.4666666666666667], [1.60247928E12, 0.25], [1.6024803E12, 0.2833333333333333], [1.6024806E12, 0.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248102E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

