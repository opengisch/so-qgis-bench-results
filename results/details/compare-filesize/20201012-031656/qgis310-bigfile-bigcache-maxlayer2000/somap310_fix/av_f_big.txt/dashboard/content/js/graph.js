/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3145.0, "minX": 0.0, "maxY": 44647.0, "series": [{"data": [[0.0, 3145.0], [0.1, 3145.0], [0.2, 6107.0], [0.3, 8257.0], [0.4, 8257.0], [0.5, 11013.0], [0.6, 13514.0], [0.7, 16015.0], [0.8, 16015.0], [0.9, 16466.0], [1.0, 16486.0], [1.1, 16500.0], [1.2, 16500.0], [1.3, 16516.0], [1.4, 16735.0], [1.5, 16774.0], [1.6, 16774.0], [1.7, 16777.0], [1.8, 16806.0], [1.9, 16806.0], [2.0, 16811.0], [2.1, 16881.0], [2.2, 16891.0], [2.3, 16891.0], [2.4, 16977.0], [2.5, 17050.0], [2.6, 17066.0], [2.7, 17066.0], [2.8, 17075.0], [2.9, 17083.0], [3.0, 17103.0], [3.1, 17103.0], [3.2, 17113.0], [3.3, 17132.0], [3.4, 17132.0], [3.5, 17170.0], [3.6, 17170.0], [3.7, 17206.0], [3.8, 17206.0], [3.9, 17212.0], [4.0, 17213.0], [4.1, 17213.0], [4.2, 17213.0], [4.3, 17215.0], [4.4, 17230.0], [4.5, 17230.0], [4.6, 17230.0], [4.7, 17240.0], [4.8, 17240.0], [4.9, 17272.0], [5.0, 17272.0], [5.1, 17280.0], [5.2, 17283.0], [5.3, 17283.0], [5.4, 17288.0], [5.5, 17318.0], [5.6, 17331.0], [5.7, 17331.0], [5.8, 17356.0], [5.9, 17359.0], [6.0, 17382.0], [6.1, 17382.0], [6.2, 17402.0], [6.3, 17422.0], [6.4, 17490.0], [6.5, 17490.0], [6.6, 17537.0], [6.7, 17561.0], [6.8, 17561.0], [6.9, 17581.0], [7.0, 17610.0], [7.1, 17628.0], [7.2, 17628.0], [7.3, 17643.0], [7.4, 17667.0], [7.5, 17722.0], [7.6, 17722.0], [7.7, 17745.0], [7.8, 17790.0], [7.9, 17811.0], [8.0, 17811.0], [8.1, 17832.0], [8.2, 17833.0], [8.3, 17904.0], [8.4, 17904.0], [8.5, 17914.0], [8.6, 17937.0], [8.7, 17937.0], [8.8, 17940.0], [8.9, 17958.0], [9.0, 17982.0], [9.1, 17982.0], [9.2, 18007.0], [9.3, 18172.0], [9.4, 18181.0], [9.5, 18181.0], [9.6, 18209.0], [9.7, 18268.0], [9.8, 18299.0], [9.9, 18299.0], [10.0, 18545.0], [10.1, 18564.0], [10.2, 18564.0], [10.3, 18647.0], [10.4, 18736.0], [10.5, 18738.0], [10.6, 18738.0], [10.7, 18765.0], [10.8, 18870.0], [10.9, 18918.0], [11.0, 18918.0], [11.1, 19047.0], [11.2, 19101.0], [11.3, 19105.0], [11.4, 19105.0], [11.5, 19109.0], [11.6, 19119.0], [11.7, 19119.0], [11.8, 19211.0], [11.9, 19213.0], [12.0, 19220.0], [12.1, 19220.0], [12.2, 19291.0], [12.3, 19316.0], [12.4, 19321.0], [12.5, 19321.0], [12.6, 19322.0], [12.7, 19423.0], [12.8, 19445.0], [12.9, 19445.0], [13.0, 19449.0], [13.1, 19479.0], [13.2, 19541.0], [13.3, 19541.0], [13.4, 19594.0], [13.5, 19595.0], [13.6, 19595.0], [13.7, 19600.0], [13.8, 19635.0], [13.9, 19641.0], [14.0, 19641.0], [14.1, 19707.0], [14.2, 19730.0], [14.3, 19750.0], [14.4, 19750.0], [14.5, 19797.0], [14.6, 19797.0], [14.7, 19803.0], [14.8, 19803.0], [14.9, 19850.0], [15.0, 19885.0], [15.1, 19885.0], [15.2, 19905.0], [15.3, 19978.0], [15.4, 19990.0], [15.5, 19990.0], [15.6, 20053.0], [15.7, 20128.0], [15.8, 20166.0], [15.9, 20166.0], [16.0, 20198.0], [16.1, 20223.0], [16.2, 20275.0], [16.3, 20275.0], [16.4, 20341.0], [16.5, 20369.0], [16.6, 20407.0], [16.7, 20407.0], [16.8, 20496.0], [16.9, 20696.0], [17.0, 20696.0], [17.1, 20824.0], [17.2, 20862.0], [17.3, 20983.0], [17.4, 20983.0], [17.5, 20989.0], [17.6, 21127.0], [17.7, 21372.0], [17.8, 21372.0], [17.9, 21383.0], [18.0, 21395.0], [18.1, 21412.0], [18.2, 21412.0], [18.3, 21490.0], [18.4, 21546.0], [18.5, 21546.0], [18.6, 21566.0], [18.7, 21628.0], [18.8, 21633.0], [18.9, 21633.0], [19.0, 21660.0], [19.1, 21723.0], [19.2, 21757.0], [19.3, 21757.0], [19.4, 21774.0], [19.5, 21789.0], [19.6, 21791.0], [19.7, 21791.0], [19.8, 21924.0], [19.9, 21960.0], [20.0, 21968.0], [20.1, 21968.0], [20.2, 22016.0], [20.3, 22027.0], [20.4, 22027.0], [20.5, 22031.0], [20.6, 22032.0], [20.7, 22042.0], [20.8, 22042.0], [20.9, 22042.0], [21.0, 22077.0], [21.1, 22101.0], [21.2, 22101.0], [21.3, 22104.0], [21.4, 22150.0], [21.5, 22262.0], [21.6, 22262.0], [21.7, 22265.0], [21.8, 22281.0], [21.9, 22281.0], [22.0, 22306.0], [22.1, 22320.0], [22.2, 22358.0], [22.3, 22358.0], [22.4, 22394.0], [22.5, 22399.0], [22.6, 22404.0], [22.7, 22404.0], [22.8, 22413.0], [22.9, 22429.0], [23.0, 22517.0], [23.1, 22517.0], [23.2, 22548.0], [23.3, 22553.0], [23.4, 22553.0], [23.5, 22567.0], [23.6, 22576.0], [23.7, 22594.0], [23.8, 22594.0], [23.9, 22599.0], [24.0, 22826.0], [24.1, 22852.0], [24.2, 22852.0], [24.3, 22889.0], [24.4, 22898.0], [24.5, 22986.0], [24.6, 22986.0], [24.7, 23012.0], [24.8, 23079.0], [24.9, 23093.0], [25.0, 23093.0], [25.1, 23118.0], [25.2, 23232.0], [25.3, 23232.0], [25.4, 23239.0], [25.5, 23300.0], [25.6, 23304.0], [25.7, 23304.0], [25.8, 23319.0], [25.9, 23328.0], [26.0, 23353.0], [26.1, 23353.0], [26.2, 23370.0], [26.3, 23383.0], [26.4, 23386.0], [26.5, 23386.0], [26.6, 23404.0], [26.7, 23419.0], [26.8, 23419.0], [26.9, 23448.0], [27.0, 23464.0], [27.1, 23501.0], [27.2, 23501.0], [27.3, 23510.0], [27.4, 23527.0], [27.5, 23553.0], [27.6, 23553.0], [27.7, 23569.0], [27.8, 23569.0], [27.9, 23650.0], [28.0, 23650.0], [28.1, 23657.0], [28.2, 23693.0], [28.3, 23738.0], [28.4, 23738.0], [28.5, 23738.0], [28.6, 23777.0], [28.7, 23777.0], [28.8, 23801.0], [28.9, 23805.0], [29.0, 23842.0], [29.1, 23842.0], [29.2, 23874.0], [29.3, 23894.0], [29.4, 23910.0], [29.5, 23910.0], [29.6, 23918.0], [29.7, 23919.0], [29.8, 23925.0], [29.9, 23925.0], [30.0, 23930.0], [30.1, 23934.0], [30.2, 23934.0], [30.3, 23939.0], [30.4, 23955.0], [30.5, 23956.0], [30.6, 23956.0], [30.7, 23982.0], [30.8, 24009.0], [30.9, 24018.0], [31.0, 24018.0], [31.1, 24084.0], [31.2, 24098.0], [31.3, 24098.0], [31.4, 24098.0], [31.5, 24114.0], [31.6, 24131.0], [31.7, 24131.0], [31.8, 24163.0], [31.9, 24166.0], [32.0, 24201.0], [32.1, 24201.0], [32.2, 24241.0], [32.3, 24253.0], [32.4, 24255.0], [32.5, 24255.0], [32.6, 24259.0], [32.7, 24285.0], [32.8, 24290.0], [32.9, 24290.0], [33.0, 24290.0], [33.1, 24296.0], [33.2, 24298.0], [33.3, 24298.0], [33.4, 24318.0], [33.5, 24426.0], [33.6, 24426.0], [33.7, 24432.0], [33.8, 24436.0], [33.9, 24462.0], [34.0, 24462.0], [34.1, 24465.0], [34.2, 24470.0], [34.3, 24554.0], [34.4, 24554.0], [34.5, 24558.0], [34.6, 24561.0], [34.7, 24569.0], [34.8, 24569.0], [34.9, 24575.0], [35.0, 24582.0], [35.1, 24582.0], [35.2, 24596.0], [35.3, 24617.0], [35.4, 24625.0], [35.5, 24625.0], [35.6, 24627.0], [35.7, 24631.0], [35.8, 24639.0], [35.9, 24639.0], [36.0, 24646.0], [36.1, 24649.0], [36.2, 24685.0], [36.3, 24685.0], [36.4, 24697.0], [36.5, 24744.0], [36.6, 24747.0], [36.7, 24747.0], [36.8, 24752.0], [36.9, 24776.0], [37.0, 24776.0], [37.1, 24804.0], [37.2, 24817.0], [37.3, 24860.0], [37.4, 24860.0], [37.5, 24867.0], [37.6, 24877.0], [37.7, 24881.0], [37.8, 24881.0], [37.9, 24893.0], [38.0, 24899.0], [38.1, 24913.0], [38.2, 24913.0], [38.3, 24937.0], [38.4, 24947.0], [38.5, 24947.0], [38.6, 24997.0], [38.7, 25028.0], [38.8, 25090.0], [38.9, 25090.0], [39.0, 25111.0], [39.1, 25120.0], [39.2, 25121.0], [39.3, 25121.0], [39.4, 25153.0], [39.5, 25172.0], [39.6, 25176.0], [39.7, 25176.0], [39.8, 25189.0], [39.9, 25195.0], [40.0, 25233.0], [40.1, 25233.0], [40.2, 25257.0], [40.3, 25331.0], [40.4, 25331.0], [40.5, 25383.0], [40.6, 25385.0], [40.7, 25394.0], [40.8, 25394.0], [40.9, 25398.0], [41.0, 25419.0], [41.1, 25435.0], [41.2, 25435.0], [41.3, 25455.0], [41.4, 25455.0], [41.5, 25473.0], [41.6, 25473.0], [41.7, 25474.0], [41.8, 25478.0], [41.9, 25478.0], [42.0, 25486.0], [42.1, 25488.0], [42.2, 25488.0], [42.3, 25488.0], [42.4, 25559.0], [42.5, 25570.0], [42.6, 25576.0], [42.7, 25576.0], [42.8, 25616.0], [42.9, 25660.0], [43.0, 25681.0], [43.1, 25681.0], [43.2, 25690.0], [43.3, 25732.0], [43.4, 25732.0], [43.5, 25738.0], [43.6, 25740.0], [43.7, 25750.0], [43.8, 25750.0], [43.9, 25751.0], [44.0, 25754.0], [44.1, 25803.0], [44.2, 25803.0], [44.3, 25880.0], [44.4, 25883.0], [44.5, 25894.0], [44.6, 25894.0], [44.7, 25916.0], [44.8, 25920.0], [44.9, 25925.0], [45.0, 25925.0], [45.1, 25934.0], [45.2, 25959.0], [45.3, 25959.0], [45.4, 25970.0], [45.5, 26006.0], [45.6, 26022.0], [45.7, 26022.0], [45.8, 26123.0], [45.9, 26125.0], [46.0, 26128.0], [46.1, 26128.0], [46.2, 26168.0], [46.3, 26252.0], [46.4, 26259.0], [46.5, 26259.0], [46.6, 26298.0], [46.7, 26326.0], [46.8, 26326.0], [46.9, 26331.0], [47.0, 26332.0], [47.1, 26414.0], [47.2, 26414.0], [47.3, 26421.0], [47.4, 26440.0], [47.5, 26455.0], [47.6, 26455.0], [47.7, 26483.0], [47.8, 26538.0], [47.9, 26538.0], [48.0, 26538.0], [48.1, 26582.0], [48.2, 26589.0], [48.3, 26590.0], [48.4, 26590.0], [48.5, 26626.0], [48.6, 26655.0], [48.7, 26655.0], [48.8, 26675.0], [48.9, 26681.0], [49.0, 26688.0], [49.1, 26688.0], [49.2, 26693.0], [49.3, 26710.0], [49.4, 26774.0], [49.5, 26774.0], [49.6, 26826.0], [49.7, 26890.0], [49.8, 27000.0], [49.9, 27000.0], [50.0, 27034.0], [50.1, 27048.0], [50.2, 27048.0], [50.3, 27067.0], [50.4, 27086.0], [50.5, 27103.0], [50.6, 27103.0], [50.7, 27140.0], [50.8, 27145.0], [50.9, 27149.0], [51.0, 27149.0], [51.1, 27198.0], [51.2, 27230.0], [51.3, 27231.0], [51.4, 27231.0], [51.5, 27240.0], [51.6, 27280.0], [51.7, 27280.0], [51.8, 27321.0], [51.9, 27359.0], [52.0, 27367.0], [52.1, 27367.0], [52.2, 27377.0], [52.3, 27409.0], [52.4, 27419.0], [52.5, 27419.0], [52.6, 27424.0], [52.7, 27427.0], [52.8, 27432.0], [52.9, 27432.0], [53.0, 27448.0], [53.1, 27477.0], [53.2, 27534.0], [53.3, 27534.0], [53.4, 27537.0], [53.5, 27544.0], [53.6, 27544.0], [53.7, 27568.0], [53.8, 27578.0], [53.9, 27640.0], [54.0, 27640.0], [54.1, 27647.0], [54.2, 27694.0], [54.3, 27703.0], [54.4, 27703.0], [54.5, 27753.0], [54.6, 27819.0], [54.7, 27841.0], [54.8, 27841.0], [54.9, 27852.0], [55.0, 27873.0], [55.1, 27873.0], [55.2, 27873.0], [55.3, 27891.0], [55.4, 27948.0], [55.5, 27948.0], [55.6, 27955.0], [55.7, 27964.0], [55.8, 27967.0], [55.9, 27967.0], [56.0, 27969.0], [56.1, 28007.0], [56.2, 28025.0], [56.3, 28025.0], [56.4, 28120.0], [56.5, 28122.0], [56.6, 28142.0], [56.7, 28142.0], [56.8, 28168.0], [56.9, 28182.0], [57.0, 28182.0], [57.1, 28184.0], [57.2, 28188.0], [57.3, 28194.0], [57.4, 28194.0], [57.5, 28212.0], [57.6, 28261.0], [57.7, 28264.0], [57.8, 28264.0], [57.9, 28302.0], [58.0, 28308.0], [58.1, 28313.0], [58.2, 28313.0], [58.3, 28331.0], [58.4, 28345.0], [58.5, 28345.0], [58.6, 28368.0], [58.7, 28399.0], [58.8, 28436.0], [58.9, 28436.0], [59.0, 28472.0], [59.1, 28487.0], [59.2, 28496.0], [59.3, 28496.0], [59.4, 28533.0], [59.5, 28535.0], [59.6, 28547.0], [59.7, 28547.0], [59.8, 28569.0], [59.9, 28574.0], [60.0, 28634.0], [60.1, 28634.0], [60.2, 28636.0], [60.3, 28649.0], [60.4, 28649.0], [60.5, 28678.0], [60.6, 28684.0], [60.7, 28706.0], [60.8, 28706.0], [60.9, 28732.0], [61.0, 28745.0], [61.1, 28751.0], [61.2, 28751.0], [61.3, 28751.0], [61.4, 28754.0], [61.5, 28787.0], [61.6, 28787.0], [61.7, 28802.0], [61.8, 28843.0], [61.9, 28843.0], [62.0, 28892.0], [62.1, 28904.0], [62.2, 28912.0], [62.3, 28912.0], [62.4, 28926.0], [62.5, 28937.0], [62.6, 28938.0], [62.7, 28938.0], [62.8, 28945.0], [62.9, 28982.0], [63.0, 28996.0], [63.1, 28996.0], [63.2, 29014.0], [63.3, 29025.0], [63.4, 29025.0], [63.5, 29034.0], [63.6, 29035.0], [63.7, 29052.0], [63.8, 29052.0], [63.9, 29061.0], [64.0, 29067.0], [64.1, 29068.0], [64.2, 29068.0], [64.3, 29069.0], [64.4, 29084.0], [64.5, 29088.0], [64.6, 29088.0], [64.7, 29103.0], [64.8, 29106.0], [64.9, 29106.0], [65.0, 29106.0], [65.1, 29117.0], [65.2, 29124.0], [65.3, 29124.0], [65.4, 29127.0], [65.5, 29130.0], [65.6, 29132.0], [65.7, 29132.0], [65.8, 29136.0], [65.9, 29137.0], [66.0, 29142.0], [66.1, 29142.0], [66.2, 29146.0], [66.3, 29151.0], [66.4, 29157.0], [66.5, 29157.0], [66.6, 29158.0], [66.7, 29169.0], [66.8, 29169.0], [66.9, 29170.0], [67.0, 29174.0], [67.1, 29185.0], [67.2, 29185.0], [67.3, 29191.0], [67.4, 29192.0], [67.5, 29197.0], [67.6, 29197.0], [67.7, 29200.0], [67.8, 29202.0], [67.9, 29203.0], [68.0, 29203.0], [68.1, 29205.0], [68.2, 29206.0], [68.3, 29216.0], [68.4, 29216.0], [68.5, 29221.0], [68.6, 29224.0], [68.7, 29224.0], [68.8, 29225.0], [68.9, 29230.0], [69.0, 29230.0], [69.1, 29230.0], [69.2, 29241.0], [69.3, 29248.0], [69.4, 29254.0], [69.5, 29254.0], [69.6, 29260.0], [69.7, 29262.0], [69.8, 29263.0], [69.9, 29263.0], [70.0, 29263.0], [70.1, 29269.0], [70.2, 29269.0], [70.3, 29273.0], [70.4, 29284.0], [70.5, 29294.0], [70.6, 29294.0], [70.7, 29294.0], [70.8, 29303.0], [70.9, 29304.0], [71.0, 29304.0], [71.1, 29307.0], [71.2, 29314.0], [71.3, 29318.0], [71.4, 29318.0], [71.5, 29320.0], [71.6, 29325.0], [71.7, 29325.0], [71.8, 29332.0], [71.9, 29338.0], [72.0, 29341.0], [72.1, 29341.0], [72.2, 29346.0], [72.3, 29349.0], [72.4, 29353.0], [72.5, 29353.0], [72.6, 29361.0], [72.7, 29371.0], [72.8, 29382.0], [72.9, 29382.0], [73.0, 29383.0], [73.1, 29390.0], [73.2, 29394.0], [73.3, 29394.0], [73.4, 29394.0], [73.5, 29398.0], [73.6, 29398.0], [73.7, 29404.0], [73.8, 29409.0], [73.9, 29410.0], [74.0, 29410.0], [74.1, 29416.0], [74.2, 29420.0], [74.3, 29420.0], [74.4, 29420.0], [74.5, 29427.0], [74.6, 29428.0], [74.7, 29432.0], [74.8, 29432.0], [74.9, 29434.0], [75.0, 29440.0], [75.1, 29440.0], [75.2, 29445.0], [75.3, 29445.0], [75.4, 29449.0], [75.5, 29449.0], [75.6, 29450.0], [75.7, 29453.0], [75.8, 29464.0], [75.9, 29464.0], [76.0, 29465.0], [76.1, 29469.0], [76.2, 29470.0], [76.3, 29470.0], [76.4, 29472.0], [76.5, 29473.0], [76.6, 29476.0], [76.7, 29476.0], [76.8, 29478.0], [76.9, 29480.0], [77.0, 29480.0], [77.1, 29480.0], [77.2, 29488.0], [77.3, 29489.0], [77.4, 29489.0], [77.5, 29490.0], [77.6, 29492.0], [77.7, 29493.0], [77.8, 29493.0], [77.9, 29502.0], [78.0, 29506.0], [78.1, 29513.0], [78.2, 29513.0], [78.3, 29514.0], [78.4, 29523.0], [78.5, 29523.0], [78.6, 29526.0], [78.7, 29526.0], [78.8, 29528.0], [78.9, 29528.0], [79.0, 29529.0], [79.1, 29530.0], [79.2, 29530.0], [79.3, 29530.0], [79.4, 29530.0], [79.5, 29535.0], [79.6, 29549.0], [79.7, 29549.0], [79.8, 29552.0], [79.9, 29556.0], [80.0, 29559.0], [80.1, 29559.0], [80.2, 29560.0], [80.3, 29562.0], [80.4, 29562.0], [80.5, 29566.0], [80.6, 29566.0], [80.7, 29569.0], [80.8, 29569.0], [80.9, 29573.0], [81.0, 29577.0], [81.1, 29581.0], [81.2, 29581.0], [81.3, 29581.0], [81.4, 29588.0], [81.5, 29589.0], [81.6, 29589.0], [81.7, 29591.0], [81.8, 29592.0], [81.9, 29592.0], [82.0, 29596.0], [82.1, 29616.0], [82.2, 29620.0], [82.3, 29620.0], [82.4, 29621.0], [82.5, 29625.0], [82.6, 29627.0], [82.7, 29627.0], [82.8, 29630.0], [82.9, 29634.0], [83.0, 29640.0], [83.1, 29640.0], [83.2, 29644.0], [83.3, 29648.0], [83.4, 29648.0], [83.5, 29649.0], [83.6, 29652.0], [83.7, 29658.0], [83.8, 29658.0], [83.9, 29659.0], [84.0, 29662.0], [84.1, 29667.0], [84.2, 29667.0], [84.3, 29668.0], [84.4, 29673.0], [84.5, 29675.0], [84.6, 29675.0], [84.7, 29676.0], [84.8, 29678.0], [84.9, 29680.0], [85.0, 29680.0], [85.1, 29684.0], [85.2, 29693.0], [85.3, 29693.0], [85.4, 29696.0], [85.5, 29707.0], [85.6, 29712.0], [85.7, 29712.0], [85.8, 29724.0], [85.9, 29725.0], [86.0, 29727.0], [86.1, 29727.0], [86.2, 29733.0], [86.3, 29738.0], [86.4, 29741.0], [86.5, 29741.0], [86.6, 29750.0], [86.7, 29751.0], [86.8, 29751.0], [86.9, 29756.0], [87.0, 29761.0], [87.1, 29762.0], [87.2, 29762.0], [87.3, 29765.0], [87.4, 29765.0], [87.5, 29766.0], [87.6, 29766.0], [87.7, 29769.0], [87.8, 29770.0], [87.9, 29783.0], [88.0, 29783.0], [88.1, 29794.0], [88.2, 29796.0], [88.3, 29800.0], [88.4, 29800.0], [88.5, 29805.0], [88.6, 29807.0], [88.7, 29807.0], [88.8, 29808.0], [88.9, 29812.0], [89.0, 29813.0], [89.1, 29813.0], [89.2, 29813.0], [89.3, 29837.0], [89.4, 29868.0], [89.5, 29868.0], [89.6, 29869.0], [89.7, 29880.0], [89.8, 29889.0], [89.9, 29889.0], [90.0, 29889.0], [90.1, 29904.0], [90.2, 29904.0], [90.3, 29904.0], [90.4, 29905.0], [90.5, 29936.0], [90.6, 29936.0], [90.7, 29948.0], [90.8, 29949.0], [90.9, 29962.0], [91.0, 29962.0], [91.1, 29994.0], [91.2, 30007.0], [91.3, 30022.0], [91.4, 30022.0], [91.5, 30028.0], [91.6, 30043.0], [91.7, 30043.0], [91.8, 30060.0], [91.9, 30072.0], [92.0, 30080.0], [92.1, 30080.0], [92.2, 30082.0], [92.3, 30106.0], [92.4, 30186.0], [92.5, 30186.0], [92.6, 30193.0], [92.7, 30195.0], [92.8, 30239.0], [92.9, 30239.0], [93.0, 30254.0], [93.1, 30277.0], [93.2, 30389.0], [93.3, 30389.0], [93.4, 30472.0], [93.5, 30764.0], [93.6, 30764.0], [93.7, 30937.0], [93.8, 30942.0], [93.9, 31011.0], [94.0, 31011.0], [94.1, 31073.0], [94.2, 31086.0], [94.3, 31134.0], [94.4, 31134.0], [94.5, 31138.0], [94.6, 31331.0], [94.7, 31348.0], [94.8, 31348.0], [94.9, 31372.0], [95.0, 31448.0], [95.1, 31448.0], [95.2, 31843.0], [95.3, 32295.0], [95.4, 32332.0], [95.5, 32332.0], [95.6, 32858.0], [95.7, 32998.0], [95.8, 33394.0], [95.9, 33394.0], [96.0, 33486.0], [96.1, 33836.0], [96.2, 33925.0], [96.3, 33925.0], [96.4, 33970.0], [96.5, 34309.0], [96.6, 34773.0], [96.7, 34773.0], [96.8, 35277.0], [96.9, 35840.0], [97.0, 35840.0], [97.1, 35975.0], [97.2, 36491.0], [97.3, 36943.0], [97.4, 36943.0], [97.5, 36955.0], [97.6, 37809.0], [97.7, 38363.0], [97.8, 38363.0], [97.9, 38399.0], [98.0, 39452.0], [98.1, 39468.0], [98.2, 39468.0], [98.3, 41066.0], [98.4, 41569.0], [98.5, 41569.0], [98.6, 41650.0], [98.7, 42079.0], [98.8, 42243.0], [98.9, 42243.0], [99.0, 43070.0], [99.1, 43141.0], [99.2, 43467.0], [99.3, 43467.0], [99.4, 43823.0], [99.5, 43998.0], [99.6, 44033.0], [99.7, 44033.0], [99.8, 44041.0], [99.9, 44647.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 31.0, "series": [{"data": [[34700.0, 1.0], [33900.0, 2.0], [33300.0, 1.0], [32900.0, 1.0], [34300.0, 1.0], [35900.0, 1.0], [36900.0, 2.0], [38300.0, 2.0], [41500.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8200.0, 1.0], [11000.0, 1.0], [13500.0, 1.0], [16000.0, 1.0], [17300.0, 5.0], [17100.0, 5.0], [17200.0, 13.0], [17400.0, 3.0], [16900.0, 1.0], [17000.0, 4.0], [16700.0, 3.0], [16800.0, 4.0], [16500.0, 2.0], [16400.0, 2.0], [18100.0, 2.0], [18200.0, 3.0], [17900.0, 6.0], [17500.0, 3.0], [17600.0, 4.0], [18000.0, 1.0], [17800.0, 3.0], [17700.0, 3.0], [19200.0, 4.0], [18900.0, 1.0], [19100.0, 4.0], [18700.0, 3.0], [18500.0, 2.0], [18600.0, 1.0], [19400.0, 4.0], [19300.0, 3.0], [18800.0, 1.0], [19000.0, 1.0], [19700.0, 5.0], [20300.0, 2.0], [20400.0, 2.0], [20100.0, 3.0], [20000.0, 1.0], [20200.0, 2.0], [19800.0, 3.0], [19500.0, 3.0], [19900.0, 3.0], [19600.0, 3.0], [20600.0, 1.0], [21300.0, 3.0], [20800.0, 2.0], [20900.0, 2.0], [21400.0, 2.0], [21100.0, 1.0], [21500.0, 2.0], [21700.0, 5.0], [22500.0, 7.0], [21900.0, 3.0], [22100.0, 3.0], [22000.0, 7.0], [21600.0, 3.0], [22200.0, 3.0], [22400.0, 3.0], [22300.0, 5.0], [23400.0, 4.0], [23300.0, 8.0], [23000.0, 3.0], [23500.0, 6.0], [23100.0, 1.0], [23200.0, 2.0], [22800.0, 4.0], [22900.0, 1.0], [23800.0, 5.0], [24200.0, 10.0], [24300.0, 1.0], [23900.0, 10.0], [24100.0, 4.0], [24400.0, 6.0], [24000.0, 5.0], [23600.0, 3.0], [24500.0, 7.0], [23700.0, 3.0], [24800.0, 8.0], [25500.0, 3.0], [25400.0, 10.0], [25100.0, 8.0], [24600.0, 9.0], [24700.0, 4.0], [25300.0, 5.0], [24900.0, 4.0], [25200.0, 2.0], [25000.0, 2.0], [25700.0, 6.0], [25900.0, 6.0], [26100.0, 4.0], [26300.0, 3.0], [26000.0, 2.0], [25600.0, 4.0], [26200.0, 3.0], [26500.0, 5.0], [26600.0, 6.0], [25800.0, 4.0], [26400.0, 5.0], [27200.0, 4.0], [27000.0, 5.0], [27300.0, 4.0], [27500.0, 5.0], [26800.0, 2.0], [27400.0, 7.0], [27100.0, 5.0], [26700.0, 2.0], [27600.0, 3.0], [28500.0, 5.0], [28200.0, 3.0], [28400.0, 4.0], [28300.0, 7.0], [28100.0, 8.0], [28000.0, 2.0], [27900.0, 5.0], [27700.0, 2.0], [27800.0, 6.0], [28600.0, 5.0], [29600.0, 25.0], [28800.0, 3.0], [29300.0, 21.0], [28700.0, 7.0], [29400.0, 31.0], [29500.0, 31.0], [28900.0, 8.0], [29100.0, 22.0], [29200.0, 23.0], [29000.0, 11.0], [30200.0, 3.0], [30400.0, 1.0], [30000.0, 8.0], [30100.0, 4.0], [29900.0, 8.0], [29800.0, 13.0], [29700.0, 21.0], [30700.0, 1.0], [30300.0, 1.0], [30900.0, 2.0], [31400.0, 1.0], [31000.0, 3.0], [31100.0, 2.0], [31300.0, 3.0], [32200.0, 1.0], [31800.0, 1.0], [32300.0, 1.0], [33400.0, 1.0], [32800.0, 1.0], [33800.0, 1.0], [35800.0, 1.0], [36400.0, 1.0], [35200.0, 1.0], [37800.0, 1.0], [39400.0, 2.0], [43000.0, 1.0], [42000.0, 1.0], [41000.0, 1.0], [42200.0, 1.0], [41600.0, 1.0], [43400.0, 1.0], [43800.0, 1.0], [44600.0, 1.0], [44000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.60248126E12, "maxY": 10.0, "series": [{"data": [[1.60248162E12, 10.0], [1.60248192E12, 10.0], [1.60248132E12, 10.0], [1.60248294E12, 10.0], [1.60248264E12, 10.0], [1.60248234E12, 10.0], [1.60248174E12, 10.0], [1.60248204E12, 10.0], [1.60248144E12, 10.0], [1.60248306E12, 10.0], [1.60248276E12, 10.0], [1.60248246E12, 10.0], [1.60248186E12, 10.0], [1.60248216E12, 10.0], [1.60248126E12, 10.0], [1.60248156E12, 10.0], [1.60248318E12, 1.5], [1.60248288E12, 10.0], [1.60248258E12, 10.0], [1.60248198E12, 10.0], [1.60248228E12, 10.0], [1.60248138E12, 10.0], [1.60248168E12, 10.0], [1.602483E12, 10.0], [1.6024827E12, 10.0], [1.6024824E12, 10.0], [1.6024821E12, 10.0], [1.6024815E12, 10.0], [1.6024818E12, 10.0], [1.60248312E12, 9.03448275862069], [1.60248282E12, 10.0], [1.60248252E12, 10.0], [1.60248222E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248318E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16735.0, "minX": 1.0, "maxY": 26172.23966942149, "series": [{"data": [[8.0, 16881.0], [4.0, 17382.0], [2.0, 17331.0], [1.0, 17832.0], [9.0, 16735.0], [10.0, 26172.23966942149], [5.0, 17402.0], [6.0, 17240.0], [3.0, 17283.0], [7.0, 17050.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26062.832653061225]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13.083333333333334, "minX": 1.60248126E12, "maxY": 222451.76666666666, "series": [{"data": [[1.60248162E12, 48334.63333333333], [1.60248192E12, 33386.85], [1.60248132E12, 77686.53333333334], [1.60248294E12, 28296.733333333334], [1.60248264E12, 53213.35], [1.60248234E12, 62989.75], [1.60248174E12, 59399.166666666664], [1.60248204E12, 168579.96666666667], [1.60248144E12, 56754.916666666664], [1.60248306E12, 154792.0], [1.60248276E12, 45378.28333333333], [1.60248246E12, 36654.53333333333], [1.60248186E12, 46153.066666666666], [1.60248216E12, 210128.86666666667], [1.60248126E12, 222451.76666666666], [1.60248156E12, 46708.333333333336], [1.60248318E12, 870.5833333333334], [1.60248288E12, 36596.066666666666], [1.60248258E12, 51649.01666666667], [1.60248198E12, 37474.48333333333], [1.60248228E12, 87572.73333333334], [1.60248138E12, 143298.88333333333], [1.60248168E12, 48464.3], [1.602483E12, 51796.01666666667], [1.6024827E12, 47447.23333333333], [1.6024824E12, 50313.933333333334], [1.6024821E12, 75547.46666666666], [1.6024815E12, 60858.85], [1.6024818E12, 41652.71666666667], [1.60248312E12, 54652.8], [1.60248282E12, 45767.333333333336], [1.60248252E12, 47235.96666666667], [1.60248222E12, 91336.38333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60248162E12, 153.43333333333334], [1.60248192E12, 160.66666666666666], [1.60248132E12, 221.81666666666666], [1.60248294E12, 182.43333333333334], [1.60248264E12, 154.05], [1.60248234E12, 168.33333333333334], [1.60248174E12, 153.76666666666668], [1.60248204E12, 219.13333333333333], [1.60248144E12, 153.45], [1.60248306E12, 153.11666666666667], [1.60248276E12, 146.13333333333333], [1.60248246E12, 138.76666666666668], [1.60248186E12, 153.31666666666666], [1.60248216E12, 194.1], [1.60248126E12, 169.25], [1.60248156E12, 146.1], [1.60248318E12, 13.083333333333334], [1.60248288E12, 167.76666666666668], [1.60248258E12, 153.45], [1.60248198E12, 198.53333333333333], [1.60248228E12, 188.78333333333333], [1.60248138E12, 121.36666666666666], [1.60248168E12, 146.11666666666667], [1.602483E12, 195.13333333333333], [1.6024827E12, 153.75], [1.6024824E12, 147.36666666666667], [1.6024821E12, 156.0], [1.6024815E12, 176.61666666666667], [1.6024818E12, 146.01666666666668], [1.60248312E12, 201.61666666666667], [1.60248282E12, 146.01666666666668], [1.60248252E12, 146.13333333333333], [1.60248222E12, 213.66666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248318E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17581.5, "minX": 1.60248126E12, "maxY": 35079.89473684211, "series": [{"data": [[1.60248162E12, 29525.428571428576], [1.60248192E12, 27750.363636363636], [1.60248132E12, 19824.32258064516], [1.60248294E12, 24215.719999999998], [1.60248264E12, 29049.000000000004], [1.60248234E12, 24985.869565217392], [1.60248174E12, 29359.571428571428], [1.60248204E12, 19382.29032258064], [1.60248144E12, 33149.52380952381], [1.60248306E12, 25252.428571428572], [1.60248276E12, 29534.449999999997], [1.60248246E12, 35079.89473684211], [1.60248186E12, 29309.47619047619], [1.60248216E12, 23436.999999999996], [1.60248126E12, 21036.913043478264], [1.60248156E12, 28243.599999999995], [1.60248318E12, 17581.5], [1.60248288E12, 27002.60869565218], [1.60248258E12, 29513.76190476191], [1.60248198E12, 23639.518518518522], [1.60248228E12, 22430.269230769227], [1.60248138E12, 29783.0], [1.60248168E12, 29362.35], [1.602483E12, 23393.074074074077], [1.6024827E12, 28109.999999999996], [1.6024824E12, 25608.749999999996], [1.6024821E12, 24338.45454545454], [1.6024815E12, 25350.333333333336], [1.6024818E12, 28949.3], [1.60248312E12, 23286.793103448268], [1.60248282E12, 29967.000000000004], [1.60248252E12, 29528.05], [1.60248222E12, 21317.43333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248318E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17579.5, "minX": 1.60248126E12, "maxY": 35078.94736842105, "series": [{"data": [[1.60248162E12, 29524.428571428565], [1.60248192E12, 27749.454545454548], [1.60248132E12, 19822.67741935484], [1.60248294E12, 24215.08], [1.60248264E12, 29047.76190476191], [1.60248234E12, 24984.56521739131], [1.60248174E12, 29358.04761904762], [1.60248204E12, 19378.516129032258], [1.60248144E12, 33147.904761904756], [1.60248306E12, 25248.333333333336], [1.60248276E12, 29533.399999999998], [1.60248246E12, 35078.94736842105], [1.60248186E12, 29308.380952380954], [1.60248216E12, 23432.74074074074], [1.60248126E12, 21032.95652173913], [1.60248156E12, 28242.449999999997], [1.60248318E12, 17579.5], [1.60248288E12, 27001.956521739125], [1.60248258E12, 29512.66666666667], [1.60248198E12, 23638.555555555555], [1.60248228E12, 22428.076923076922], [1.60248138E12, 29778.312499999996], [1.60248168E12, 29361.25], [1.602483E12, 23391.814814814814], [1.6024827E12, 28108.85714285714], [1.6024824E12, 25607.599999999995], [1.6024821E12, 24336.136363636364], [1.6024815E12, 25349.000000000004], [1.6024818E12, 28948.0], [1.60248312E12, 23284.758620689656], [1.60248282E12, 29965.800000000003], [1.60248252E12, 29527.0], [1.60248222E12, 21315.566666666662]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248318E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60248126E12, "maxY": 3.5652173913043472, "series": [{"data": [[1.60248162E12, 0.6666666666666667], [1.60248192E12, 0.3636363636363636], [1.60248132E12, 0.5161290322580646], [1.60248294E12, 0.4000000000000001], [1.60248264E12, 0.7142857142857143], [1.60248234E12, 0.5217391304347828], [1.60248174E12, 0.5714285714285716], [1.60248204E12, 0.4516129032258066], [1.60248144E12, 0.8095238095238095], [1.60248306E12, 0.33333333333333337], [1.60248276E12, 0.55], [1.60248246E12, 0.47368421052631576], [1.60248186E12, 0.14285714285714285], [1.60248216E12, 0.4074074074074074], [1.60248126E12, 3.5652173913043472], [1.60248156E12, 0.7000000000000001], [1.60248318E12, 0.0], [1.60248288E12, 0.26086956521739135], [1.60248258E12, 0.6190476190476193], [1.60248198E12, 0.40740740740740755], [1.60248228E12, 0.03846153846153847], [1.60248138E12, 0.4375], [1.60248168E12, 0.0], [1.602483E12, 0.4814814814814815], [1.6024827E12, 0.14285714285714288], [1.6024824E12, 0.55], [1.6024821E12, 0.6363636363636365], [1.6024815E12, 0.29166666666666674], [1.6024818E12, 0.6000000000000001], [1.60248312E12, 0.41379310344827586], [1.60248282E12, 0.5], [1.60248252E12, 0.25], [1.60248222E12, 0.4333333333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248318E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3145.0, "minX": 1.60248126E12, "maxY": 44647.0, "series": [{"data": [[1.60248162E12, 29880.0], [1.60248192E12, 29549.0], [1.60248132E12, 25570.0], [1.60248294E12, 28182.0], [1.60248264E12, 29769.0], [1.60248234E12, 28678.0], [1.60248174E12, 29794.0], [1.60248204E12, 22101.0], [1.60248144E12, 44647.0], [1.60248306E12, 28751.0], [1.60248276E12, 29808.0], [1.60248246E12, 43998.0], [1.60248186E12, 29904.0], [1.60248216E12, 25803.0], [1.60248126E12, 27359.0], [1.60248156E12, 30239.0], [1.60248318E12, 17832.0], [1.60248288E12, 29750.0], [1.60248258E12, 29936.0], [1.60248198E12, 27140.0], [1.60248228E12, 31372.0], [1.60248138E12, 43467.0], [1.60248168E12, 29625.0], [1.602483E12, 28184.0], [1.6024827E12, 29562.0], [1.6024824E12, 33486.0], [1.6024821E12, 31138.0], [1.6024815E12, 30472.0], [1.6024818E12, 29648.0], [1.60248312E12, 38399.0], [1.60248282E12, 30254.0], [1.60248252E12, 29868.0], [1.60248222E12, 28331.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60248162E12, 29158.0], [1.60248192E12, 25233.0], [1.60248132E12, 17170.0], [1.60248294E12, 20989.0], [1.60248264E12, 27103.0], [1.60248234E12, 22265.0], [1.60248174E12, 28787.0], [1.60248204E12, 16774.0], [1.60248144E12, 24462.0], [1.60248306E12, 19594.0], [1.60248276E12, 29205.0], [1.60248246E12, 25970.0], [1.60248186E12, 28904.0], [1.60248216E12, 19211.0], [1.60248126E12, 3145.0], [1.60248156E12, 25419.0], [1.60248318E12, 17331.0], [1.60248288E12, 23919.0], [1.60248258E12, 29103.0], [1.60248198E12, 17103.0], [1.60248228E12, 16891.0], [1.60248138E12, 21789.0], [1.60248168E12, 29088.0], [1.602483E12, 18647.0], [1.6024827E12, 27067.0], [1.6024824E12, 22594.0], [1.6024821E12, 17628.0], [1.6024815E12, 23118.0], [1.6024818E12, 28120.0], [1.60248312E12, 16466.0], [1.60248282E12, 29658.0], [1.60248252E12, 29137.0], [1.60248222E12, 16777.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60248162E12, 29158.0], [1.60248192E12, 25233.0], [1.60248132E12, 17170.0], [1.60248294E12, 20989.0], [1.60248264E12, 27103.0], [1.60248234E12, 22265.0], [1.60248174E12, 28787.0], [1.60248204E12, 16774.0], [1.60248144E12, 24462.0], [1.60248306E12, 19594.0], [1.60248276E12, 29205.0], [1.60248246E12, 25970.0], [1.60248186E12, 28904.0], [1.60248216E12, 19211.0], [1.60248126E12, 3145.0], [1.60248156E12, 25419.0], [1.60248318E12, 17331.0], [1.60248288E12, 23919.0], [1.60248258E12, 29103.0], [1.60248198E12, 17103.0], [1.60248228E12, 16891.0], [1.60248138E12, 21789.0], [1.60248168E12, 29088.0], [1.602483E12, 18647.0], [1.6024827E12, 27067.0], [1.6024824E12, 22594.0], [1.6024821E12, 17628.0], [1.6024815E12, 23118.0], [1.6024818E12, 28120.0], [1.60248312E12, 16466.0], [1.60248282E12, 29658.0], [1.60248252E12, 29137.0], [1.60248222E12, 16777.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60248162E12, 29158.0], [1.60248192E12, 25233.0], [1.60248132E12, 17170.0], [1.60248294E12, 20989.0], [1.60248264E12, 27103.0], [1.60248234E12, 22265.0], [1.60248174E12, 28787.0], [1.60248204E12, 16774.0], [1.60248144E12, 24462.0], [1.60248306E12, 19594.0], [1.60248276E12, 29205.0], [1.60248246E12, 25970.0], [1.60248186E12, 28904.0], [1.60248216E12, 19211.0], [1.60248126E12, 3145.0], [1.60248156E12, 25419.0], [1.60248318E12, 17331.0], [1.60248288E12, 23919.0], [1.60248258E12, 29103.0], [1.60248198E12, 17103.0], [1.60248228E12, 16891.0], [1.60248138E12, 21789.0], [1.60248168E12, 29088.0], [1.602483E12, 18647.0], [1.6024827E12, 27067.0], [1.6024824E12, 22594.0], [1.6024821E12, 17628.0], [1.6024815E12, 23118.0], [1.6024818E12, 28120.0], [1.60248312E12, 16466.0], [1.60248282E12, 29658.0], [1.60248252E12, 29137.0], [1.60248222E12, 16777.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60248162E12, 29158.0], [1.60248192E12, 25233.0], [1.60248132E12, 17170.0], [1.60248294E12, 20989.0], [1.60248264E12, 27103.0], [1.60248234E12, 22265.0], [1.60248174E12, 28787.0], [1.60248204E12, 16774.0], [1.60248144E12, 24462.0], [1.60248306E12, 19594.0], [1.60248276E12, 29205.0], [1.60248246E12, 25970.0], [1.60248186E12, 28904.0], [1.60248216E12, 19211.0], [1.60248126E12, 3145.0], [1.60248156E12, 25419.0], [1.60248318E12, 17331.0], [1.60248288E12, 23919.0], [1.60248258E12, 29103.0], [1.60248198E12, 17103.0], [1.60248228E12, 16891.0], [1.60248138E12, 21789.0], [1.60248168E12, 29088.0], [1.602483E12, 18647.0], [1.6024827E12, 27067.0], [1.6024824E12, 22594.0], [1.6024821E12, 17628.0], [1.6024815E12, 23118.0], [1.6024818E12, 28120.0], [1.60248312E12, 16466.0], [1.60248282E12, 29658.0], [1.60248252E12, 29137.0], [1.60248222E12, 16777.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60248162E12, 29581.0], [1.60248192E12, 28270.5], [1.60248132E12, 19885.0], [1.60248294E12, 23910.0], [1.60248264E12, 29224.0], [1.60248234E12, 24290.0], [1.60248174E12, 29341.0], [1.60248204E12, 19119.0], [1.60248144E12, 32295.0], [1.60248306E12, 27753.0], [1.60248276E12, 29550.5], [1.60248246E12, 35840.0], [1.60248186E12, 29200.0], [1.60248216E12, 24201.0], [1.60248126E12, 25195.0], [1.60248156E12, 28141.0], [1.60248318E12, 17581.5], [1.60248288E12, 26455.0], [1.60248258E12, 29559.0], [1.60248198E12, 24465.0], [1.60248228E12, 21346.5], [1.60248138E12, 25112.0], [1.60248168E12, 29388.0], [1.602483E12, 22852.0], [1.6024827E12, 28025.0], [1.6024824E12, 24451.0], [1.6024821E12, 24340.5], [1.6024815E12, 24887.0], [1.6024818E12, 29096.0], [1.60248312E12, 17937.0], [1.60248282E12, 30000.5], [1.60248252E12, 29521.0], [1.60248222E12, 19763.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248318E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27034.0, "minX": 1.0, "maxY": 27034.0, "series": [{"data": [[1.0, 27034.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27031.0, "minX": 1.0, "maxY": 27031.0, "series": [{"data": [[1.0, 27031.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6024812E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60248162E12, 0.35], [1.60248192E12, 0.36666666666666664], [1.60248132E12, 0.5166666666666667], [1.60248294E12, 0.4166666666666667], [1.60248264E12, 0.35], [1.60248234E12, 0.38333333333333336], [1.60248174E12, 0.35], [1.60248204E12, 0.5166666666666667], [1.60248144E12, 0.35], [1.60248306E12, 0.35], [1.60248276E12, 0.3333333333333333], [1.60248246E12, 0.31666666666666665], [1.60248186E12, 0.35], [1.60248216E12, 0.45], [1.60248126E12, 0.38333333333333336], [1.60248156E12, 0.3333333333333333], [1.60248288E12, 0.38333333333333336], [1.60248258E12, 0.35], [1.60248198E12, 0.45], [1.60248228E12, 0.43333333333333335], [1.60248138E12, 0.26666666666666666], [1.60248168E12, 0.3333333333333333], [1.602483E12, 0.45], [1.6024827E12, 0.35], [1.6024824E12, 0.3333333333333333], [1.6024821E12, 0.36666666666666664], [1.6024815E12, 0.4], [1.6024818E12, 0.3333333333333333], [1.60248312E12, 0.35], [1.6024812E12, 0.16666666666666666], [1.60248282E12, 0.3333333333333333], [1.60248252E12, 0.3333333333333333], [1.60248222E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248312E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60248126E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60248162E12, 0.35], [1.60248192E12, 0.36666666666666664], [1.60248132E12, 0.5166666666666667], [1.60248294E12, 0.4166666666666667], [1.60248264E12, 0.35], [1.60248234E12, 0.38333333333333336], [1.60248174E12, 0.35], [1.60248204E12, 0.5166666666666667], [1.60248144E12, 0.35], [1.60248306E12, 0.35], [1.60248276E12, 0.3333333333333333], [1.60248246E12, 0.31666666666666665], [1.60248186E12, 0.35], [1.60248216E12, 0.45], [1.60248126E12, 0.38333333333333336], [1.60248156E12, 0.3333333333333333], [1.60248318E12, 0.03333333333333333], [1.60248288E12, 0.38333333333333336], [1.60248258E12, 0.35], [1.60248198E12, 0.45], [1.60248228E12, 0.43333333333333335], [1.60248138E12, 0.26666666666666666], [1.60248168E12, 0.3333333333333333], [1.602483E12, 0.45], [1.6024827E12, 0.35], [1.6024824E12, 0.3333333333333333], [1.6024821E12, 0.36666666666666664], [1.6024815E12, 0.4], [1.6024818E12, 0.3333333333333333], [1.60248312E12, 0.48333333333333334], [1.60248282E12, 0.3333333333333333], [1.60248252E12, 0.3333333333333333], [1.60248222E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60248318E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60248126E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60248162E12, 0.35], [1.60248192E12, 0.36666666666666664], [1.60248132E12, 0.5166666666666667], [1.60248294E12, 0.4166666666666667], [1.60248264E12, 0.35], [1.60248234E12, 0.38333333333333336], [1.60248174E12, 0.35], [1.60248204E12, 0.5166666666666667], [1.60248144E12, 0.35], [1.60248306E12, 0.35], [1.60248276E12, 0.3333333333333333], [1.60248246E12, 0.31666666666666665], [1.60248186E12, 0.35], [1.60248216E12, 0.45], [1.60248126E12, 0.38333333333333336], [1.60248156E12, 0.3333333333333333], [1.60248318E12, 0.03333333333333333], [1.60248288E12, 0.38333333333333336], [1.60248258E12, 0.35], [1.60248198E12, 0.45], [1.60248228E12, 0.43333333333333335], [1.60248138E12, 0.26666666666666666], [1.60248168E12, 0.3333333333333333], [1.602483E12, 0.45], [1.6024827E12, 0.35], [1.6024824E12, 0.3333333333333333], [1.6024821E12, 0.36666666666666664], [1.6024815E12, 0.4], [1.6024818E12, 0.3333333333333333], [1.60248312E12, 0.48333333333333334], [1.60248282E12, 0.3333333333333333], [1.60248252E12, 0.3333333333333333], [1.60248222E12, 0.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248318E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60248126E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60248162E12, 0.35], [1.60248192E12, 0.36666666666666664], [1.60248132E12, 0.5166666666666667], [1.60248294E12, 0.4166666666666667], [1.60248264E12, 0.35], [1.60248234E12, 0.38333333333333336], [1.60248174E12, 0.35], [1.60248204E12, 0.5166666666666667], [1.60248144E12, 0.35], [1.60248306E12, 0.35], [1.60248276E12, 0.3333333333333333], [1.60248246E12, 0.31666666666666665], [1.60248186E12, 0.35], [1.60248216E12, 0.45], [1.60248126E12, 0.38333333333333336], [1.60248156E12, 0.3333333333333333], [1.60248318E12, 0.03333333333333333], [1.60248288E12, 0.38333333333333336], [1.60248258E12, 0.35], [1.60248198E12, 0.45], [1.60248228E12, 0.43333333333333335], [1.60248138E12, 0.26666666666666666], [1.60248168E12, 0.3333333333333333], [1.602483E12, 0.45], [1.6024827E12, 0.35], [1.6024824E12, 0.3333333333333333], [1.6024821E12, 0.36666666666666664], [1.6024815E12, 0.4], [1.6024818E12, 0.3333333333333333], [1.60248312E12, 0.48333333333333334], [1.60248282E12, 0.3333333333333333], [1.60248252E12, 0.3333333333333333], [1.60248222E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60248318E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

