/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3136.0, "minX": 0.0, "maxY": 44416.0, "series": [{"data": [[0.0, 3136.0], [0.1, 3136.0], [0.2, 6168.0], [0.3, 8295.0], [0.4, 8295.0], [0.5, 11066.0], [0.6, 13740.0], [0.7, 16103.0], [0.8, 16103.0], [0.9, 16110.0], [1.0, 16153.0], [1.1, 16167.0], [1.2, 16167.0], [1.3, 16221.0], [1.4, 16588.0], [1.5, 16603.0], [1.6, 16603.0], [1.7, 16607.0], [1.8, 16630.0], [1.9, 16630.0], [2.0, 16647.0], [2.1, 16709.0], [2.2, 16784.0], [2.3, 16784.0], [2.4, 16821.0], [2.5, 16852.0], [2.6, 16889.0], [2.7, 16889.0], [2.8, 16973.0], [2.9, 17065.0], [3.0, 17079.0], [3.1, 17079.0], [3.2, 17133.0], [3.3, 17147.0], [3.4, 17147.0], [3.5, 17158.0], [3.6, 17169.0], [3.7, 17178.0], [3.8, 17178.0], [3.9, 17225.0], [4.0, 17250.0], [4.1, 17287.0], [4.2, 17287.0], [4.3, 17305.0], [4.4, 17312.0], [4.5, 17330.0], [4.6, 17330.0], [4.7, 17362.0], [4.8, 17394.0], [4.9, 17404.0], [5.0, 17404.0], [5.1, 17429.0], [5.2, 17451.0], [5.3, 17451.0], [5.4, 17455.0], [5.5, 17488.0], [5.6, 17524.0], [5.7, 17524.0], [5.8, 17538.0], [5.9, 17540.0], [6.0, 17543.0], [6.1, 17543.0], [6.2, 17556.0], [6.3, 17568.0], [6.4, 17573.0], [6.5, 17573.0], [6.6, 17611.0], [6.7, 17740.0], [6.8, 17740.0], [6.9, 17765.0], [7.0, 17783.0], [7.1, 17783.0], [7.2, 17783.0], [7.3, 17787.0], [7.4, 17835.0], [7.5, 17868.0], [7.6, 17868.0], [7.7, 17885.0], [7.8, 17920.0], [7.9, 17936.0], [8.0, 17936.0], [8.1, 17943.0], [8.2, 18182.0], [8.3, 18235.0], [8.4, 18235.0], [8.5, 18244.0], [8.6, 18251.0], [8.7, 18251.0], [8.8, 18284.0], [8.9, 18371.0], [9.0, 18452.0], [9.1, 18452.0], [9.2, 18486.0], [9.3, 18498.0], [9.4, 18544.0], [9.5, 18544.0], [9.6, 18546.0], [9.7, 18550.0], [9.8, 18576.0], [9.9, 18576.0], [10.0, 18596.0], [10.1, 18602.0], [10.2, 18602.0], [10.3, 18615.0], [10.4, 18669.0], [10.5, 18726.0], [10.6, 18726.0], [10.7, 18831.0], [10.8, 18858.0], [10.9, 18931.0], [11.0, 18931.0], [11.1, 18944.0], [11.2, 19082.0], [11.3, 19158.0], [11.4, 19158.0], [11.5, 19200.0], [11.6, 19285.0], [11.7, 19285.0], [11.8, 19286.0], [11.9, 19456.0], [12.0, 19479.0], [12.1, 19479.0], [12.2, 19492.0], [12.3, 19511.0], [12.4, 19519.0], [12.5, 19519.0], [12.6, 19567.0], [12.7, 19620.0], [12.8, 19624.0], [12.9, 19624.0], [13.0, 19727.0], [13.1, 19759.0], [13.2, 19807.0], [13.3, 19807.0], [13.4, 19840.0], [13.5, 19843.0], [13.6, 19843.0], [13.7, 19870.0], [13.8, 19895.0], [13.9, 19916.0], [14.0, 19916.0], [14.1, 19945.0], [14.2, 19954.0], [14.3, 19964.0], [14.4, 19964.0], [14.5, 19967.0], [14.6, 19971.0], [14.7, 20031.0], [14.8, 20031.0], [14.9, 20049.0], [15.0, 20112.0], [15.1, 20112.0], [15.2, 20192.0], [15.3, 20213.0], [15.4, 20266.0], [15.5, 20266.0], [15.6, 20276.0], [15.7, 20295.0], [15.8, 20313.0], [15.9, 20313.0], [16.0, 20318.0], [16.1, 20332.0], [16.2, 20348.0], [16.3, 20348.0], [16.4, 20470.0], [16.5, 20498.0], [16.6, 20533.0], [16.7, 20533.0], [16.8, 20553.0], [16.9, 20758.0], [17.0, 20758.0], [17.1, 20846.0], [17.2, 20876.0], [17.3, 21067.0], [17.4, 21067.0], [17.5, 21119.0], [17.6, 21212.0], [17.7, 21219.0], [17.8, 21219.0], [17.9, 21223.0], [18.0, 21256.0], [18.1, 21260.0], [18.2, 21260.0], [18.3, 21271.0], [18.4, 21340.0], [18.5, 21340.0], [18.6, 21423.0], [18.7, 21435.0], [18.8, 21473.0], [18.9, 21473.0], [19.0, 21491.0], [19.1, 21600.0], [19.2, 21614.0], [19.3, 21614.0], [19.4, 21636.0], [19.5, 21676.0], [19.6, 21740.0], [19.7, 21740.0], [19.8, 21769.0], [19.9, 21773.0], [20.0, 21798.0], [20.1, 21798.0], [20.2, 21819.0], [20.3, 21856.0], [20.4, 21856.0], [20.5, 21880.0], [20.6, 21891.0], [20.7, 21921.0], [20.8, 21921.0], [20.9, 21922.0], [21.0, 21949.0], [21.1, 21994.0], [21.2, 21994.0], [21.3, 22014.0], [21.4, 22026.0], [21.5, 22111.0], [21.6, 22111.0], [21.7, 22111.0], [21.8, 22139.0], [21.9, 22139.0], [22.0, 22154.0], [22.1, 22163.0], [22.2, 22164.0], [22.3, 22164.0], [22.4, 22169.0], [22.5, 22202.0], [22.6, 22210.0], [22.7, 22210.0], [22.8, 22218.0], [22.9, 22220.0], [23.0, 22323.0], [23.1, 22323.0], [23.2, 22359.0], [23.3, 22376.0], [23.4, 22376.0], [23.5, 22377.0], [23.6, 22467.0], [23.7, 22539.0], [23.8, 22539.0], [23.9, 22570.0], [24.0, 22606.0], [24.1, 22649.0], [24.2, 22649.0], [24.3, 22675.0], [24.4, 22686.0], [24.5, 22695.0], [24.6, 22695.0], [24.7, 22724.0], [24.8, 22733.0], [24.9, 22875.0], [25.0, 22875.0], [25.1, 22880.0], [25.2, 23011.0], [25.3, 23011.0], [25.4, 23051.0], [25.5, 23065.0], [25.6, 23066.0], [25.7, 23066.0], [25.8, 23171.0], [25.9, 23171.0], [26.0, 23218.0], [26.1, 23218.0], [26.2, 23240.0], [26.3, 23255.0], [26.4, 23275.0], [26.5, 23275.0], [26.6, 23352.0], [26.7, 23357.0], [26.8, 23357.0], [26.9, 23376.0], [27.0, 23394.0], [27.1, 23403.0], [27.2, 23403.0], [27.3, 23472.0], [27.4, 23521.0], [27.5, 23524.0], [27.6, 23524.0], [27.7, 23546.0], [27.8, 23561.0], [27.9, 23566.0], [28.0, 23566.0], [28.1, 23581.0], [28.2, 23582.0], [28.3, 23611.0], [28.4, 23611.0], [28.5, 23630.0], [28.6, 23639.0], [28.7, 23639.0], [28.8, 23642.0], [28.9, 23645.0], [29.0, 23645.0], [29.1, 23645.0], [29.2, 23659.0], [29.3, 23660.0], [29.4, 23720.0], [29.5, 23720.0], [29.6, 23733.0], [29.7, 23809.0], [29.8, 23812.0], [29.9, 23812.0], [30.0, 23813.0], [30.1, 23814.0], [30.2, 23814.0], [30.3, 23823.0], [30.4, 23826.0], [30.5, 23835.0], [30.6, 23835.0], [30.7, 23854.0], [30.8, 23875.0], [30.9, 23901.0], [31.0, 23901.0], [31.1, 23926.0], [31.2, 23942.0], [31.3, 23950.0], [31.4, 23950.0], [31.5, 24002.0], [31.6, 24041.0], [31.7, 24041.0], [31.8, 24057.0], [31.9, 24058.0], [32.0, 24102.0], [32.1, 24102.0], [32.2, 24117.0], [32.3, 24123.0], [32.4, 24127.0], [32.5, 24127.0], [32.6, 24190.0], [32.7, 24198.0], [32.8, 24210.0], [32.9, 24210.0], [33.0, 24253.0], [33.1, 24275.0], [33.2, 24284.0], [33.3, 24284.0], [33.4, 24290.0], [33.5, 24321.0], [33.6, 24321.0], [33.7, 24344.0], [33.8, 24370.0], [33.9, 24374.0], [34.0, 24374.0], [34.1, 24423.0], [34.2, 24445.0], [34.3, 24447.0], [34.4, 24447.0], [34.5, 24454.0], [34.6, 24464.0], [34.7, 24493.0], [34.8, 24493.0], [34.9, 24523.0], [35.0, 24569.0], [35.1, 24569.0], [35.2, 24588.0], [35.3, 24592.0], [35.4, 24593.0], [35.5, 24593.0], [35.6, 24598.0], [35.7, 24608.0], [35.8, 24616.0], [35.9, 24616.0], [36.0, 24641.0], [36.1, 24657.0], [36.2, 24674.0], [36.3, 24674.0], [36.4, 24675.0], [36.5, 24676.0], [36.6, 24691.0], [36.7, 24691.0], [36.8, 24706.0], [36.9, 24737.0], [37.0, 24737.0], [37.1, 24770.0], [37.2, 24793.0], [37.3, 24846.0], [37.4, 24846.0], [37.5, 24852.0], [37.6, 24905.0], [37.7, 24932.0], [37.8, 24932.0], [37.9, 24957.0], [38.0, 24987.0], [38.1, 24988.0], [38.2, 24988.0], [38.3, 25001.0], [38.4, 25015.0], [38.5, 25015.0], [38.6, 25018.0], [38.7, 25018.0], [38.8, 25033.0], [38.9, 25033.0], [39.0, 25144.0], [39.1, 25163.0], [39.2, 25195.0], [39.3, 25195.0], [39.4, 25219.0], [39.5, 25243.0], [39.6, 25266.0], [39.7, 25266.0], [39.8, 25280.0], [39.9, 25355.0], [40.0, 25389.0], [40.1, 25389.0], [40.2, 25392.0], [40.3, 25397.0], [40.4, 25397.0], [40.5, 25398.0], [40.6, 25405.0], [40.7, 25416.0], [40.8, 25416.0], [40.9, 25417.0], [41.0, 25424.0], [41.1, 25467.0], [41.2, 25467.0], [41.3, 25513.0], [41.4, 25517.0], [41.5, 25524.0], [41.6, 25524.0], [41.7, 25588.0], [41.8, 25602.0], [41.9, 25602.0], [42.0, 25645.0], [42.1, 25658.0], [42.2, 25675.0], [42.3, 25675.0], [42.4, 25676.0], [42.5, 25695.0], [42.6, 25723.0], [42.7, 25723.0], [42.8, 25736.0], [42.9, 25752.0], [43.0, 25756.0], [43.1, 25756.0], [43.2, 25761.0], [43.3, 25777.0], [43.4, 25777.0], [43.5, 25859.0], [43.6, 25863.0], [43.7, 25870.0], [43.8, 25870.0], [43.9, 25881.0], [44.0, 25887.0], [44.1, 25893.0], [44.2, 25893.0], [44.3, 25908.0], [44.4, 25915.0], [44.5, 25917.0], [44.6, 25917.0], [44.7, 25954.0], [44.8, 25955.0], [44.9, 26008.0], [45.0, 26008.0], [45.1, 26063.0], [45.2, 26068.0], [45.3, 26068.0], [45.4, 26101.0], [45.5, 26125.0], [45.6, 26141.0], [45.7, 26141.0], [45.8, 26149.0], [45.9, 26160.0], [46.0, 26176.0], [46.1, 26176.0], [46.2, 26184.0], [46.3, 26201.0], [46.4, 26215.0], [46.5, 26215.0], [46.6, 26271.0], [46.7, 26352.0], [46.8, 26352.0], [46.9, 26410.0], [47.0, 26426.0], [47.1, 26426.0], [47.2, 26426.0], [47.3, 26435.0], [47.4, 26475.0], [47.5, 26481.0], [47.6, 26481.0], [47.7, 26485.0], [47.8, 26493.0], [47.9, 26524.0], [48.0, 26524.0], [48.1, 26554.0], [48.2, 26579.0], [48.3, 26600.0], [48.4, 26600.0], [48.5, 26641.0], [48.6, 26642.0], [48.7, 26642.0], [48.8, 26707.0], [48.9, 26786.0], [49.0, 26854.0], [49.1, 26854.0], [49.2, 26863.0], [49.3, 26925.0], [49.4, 26955.0], [49.5, 26955.0], [49.6, 26988.0], [49.7, 27006.0], [49.8, 27040.0], [49.9, 27040.0], [50.0, 27079.0], [50.1, 27106.0], [50.2, 27106.0], [50.3, 27130.0], [50.4, 27140.0], [50.5, 27167.0], [50.6, 27167.0], [50.7, 27168.0], [50.8, 27186.0], [50.9, 27232.0], [51.0, 27232.0], [51.1, 27237.0], [51.2, 27254.0], [51.3, 27259.0], [51.4, 27259.0], [51.5, 27259.0], [51.6, 27274.0], [51.7, 27274.0], [51.8, 27275.0], [51.9, 27286.0], [52.0, 27297.0], [52.1, 27297.0], [52.2, 27333.0], [52.3, 27368.0], [52.4, 27377.0], [52.5, 27377.0], [52.6, 27415.0], [52.7, 27440.0], [52.8, 27455.0], [52.9, 27455.0], [53.0, 27498.0], [53.1, 27508.0], [53.2, 27508.0], [53.3, 27508.0], [53.4, 27513.0], [53.5, 27519.0], [53.6, 27519.0], [53.7, 27527.0], [53.8, 27544.0], [53.9, 27548.0], [54.0, 27548.0], [54.1, 27593.0], [54.2, 27615.0], [54.3, 27681.0], [54.4, 27681.0], [54.5, 27698.0], [54.6, 27733.0], [54.7, 27833.0], [54.8, 27833.0], [54.9, 27870.0], [55.0, 27884.0], [55.1, 27884.0], [55.2, 27894.0], [55.3, 27916.0], [55.4, 27955.0], [55.5, 27955.0], [55.6, 27956.0], [55.7, 27970.0], [55.8, 27980.0], [55.9, 27980.0], [56.0, 28022.0], [56.1, 28040.0], [56.2, 28055.0], [56.3, 28055.0], [56.4, 28061.0], [56.5, 28065.0], [56.6, 28102.0], [56.7, 28102.0], [56.8, 28119.0], [56.9, 28125.0], [57.0, 28125.0], [57.1, 28126.0], [57.2, 28134.0], [57.3, 28136.0], [57.4, 28136.0], [57.5, 28139.0], [57.6, 28162.0], [57.7, 28216.0], [57.8, 28216.0], [57.9, 28235.0], [58.0, 28252.0], [58.1, 28329.0], [58.2, 28329.0], [58.3, 28404.0], [58.4, 28406.0], [58.5, 28406.0], [58.6, 28427.0], [58.7, 28432.0], [58.8, 28450.0], [58.9, 28450.0], [59.0, 28472.0], [59.1, 28511.0], [59.2, 28514.0], [59.3, 28514.0], [59.4, 28521.0], [59.5, 28531.0], [59.6, 28554.0], [59.7, 28554.0], [59.8, 28568.0], [59.9, 28576.0], [60.0, 28576.0], [60.1, 28576.0], [60.2, 28583.0], [60.3, 28609.0], [60.4, 28609.0], [60.5, 28614.0], [60.6, 28630.0], [60.7, 28654.0], [60.8, 28654.0], [60.9, 28672.0], [61.0, 28689.0], [61.1, 28690.0], [61.2, 28690.0], [61.3, 28693.0], [61.4, 28714.0], [61.5, 28728.0], [61.6, 28728.0], [61.7, 28735.0], [61.8, 28754.0], [61.9, 28754.0], [62.0, 28761.0], [62.1, 28762.0], [62.2, 28777.0], [62.3, 28777.0], [62.4, 28783.0], [62.5, 28798.0], [62.6, 28833.0], [62.7, 28833.0], [62.8, 28835.0], [62.9, 28867.0], [63.0, 28872.0], [63.1, 28872.0], [63.2, 28881.0], [63.3, 28891.0], [63.4, 28891.0], [63.5, 28892.0], [63.6, 28900.0], [63.7, 28901.0], [63.8, 28901.0], [63.9, 28907.0], [64.0, 28908.0], [64.1, 28911.0], [64.2, 28911.0], [64.3, 28914.0], [64.4, 28920.0], [64.5, 28923.0], [64.6, 28923.0], [64.7, 28938.0], [64.8, 28945.0], [64.9, 28975.0], [65.0, 28975.0], [65.1, 28991.0], [65.2, 29010.0], [65.3, 29010.0], [65.4, 29015.0], [65.5, 29017.0], [65.6, 29018.0], [65.7, 29018.0], [65.8, 29020.0], [65.9, 29022.0], [66.0, 29026.0], [66.1, 29026.0], [66.2, 29040.0], [66.3, 29052.0], [66.4, 29061.0], [66.5, 29061.0], [66.6, 29081.0], [66.7, 29086.0], [66.8, 29086.0], [66.9, 29093.0], [67.0, 29094.0], [67.1, 29096.0], [67.2, 29096.0], [67.3, 29100.0], [67.4, 29122.0], [67.5, 29122.0], [67.6, 29122.0], [67.7, 29125.0], [67.8, 29132.0], [67.9, 29133.0], [68.0, 29133.0], [68.1, 29134.0], [68.2, 29137.0], [68.3, 29140.0], [68.4, 29140.0], [68.5, 29144.0], [68.6, 29175.0], [68.7, 29175.0], [68.8, 29184.0], [68.9, 29195.0], [69.0, 29197.0], [69.1, 29197.0], [69.2, 29233.0], [69.3, 29248.0], [69.4, 29250.0], [69.5, 29250.0], [69.6, 29251.0], [69.7, 29255.0], [69.8, 29256.0], [69.9, 29256.0], [70.0, 29258.0], [70.1, 29267.0], [70.2, 29267.0], [70.3, 29268.0], [70.4, 29279.0], [70.5, 29282.0], [70.6, 29282.0], [70.7, 29283.0], [70.8, 29288.0], [70.9, 29307.0], [71.0, 29307.0], [71.1, 29308.0], [71.2, 29312.0], [71.3, 29314.0], [71.4, 29314.0], [71.5, 29315.0], [71.6, 29315.0], [71.7, 29315.0], [71.8, 29326.0], [71.9, 29354.0], [72.0, 29358.0], [72.1, 29358.0], [72.2, 29358.0], [72.3, 29362.0], [72.4, 29374.0], [72.5, 29374.0], [72.6, 29374.0], [72.7, 29375.0], [72.8, 29375.0], [72.9, 29375.0], [73.0, 29377.0], [73.1, 29397.0], [73.2, 29398.0], [73.3, 29398.0], [73.4, 29400.0], [73.5, 29400.0], [73.6, 29400.0], [73.7, 29402.0], [73.8, 29405.0], [73.9, 29410.0], [74.0, 29410.0], [74.1, 29418.0], [74.2, 29432.0], [74.3, 29434.0], [74.4, 29434.0], [74.5, 29437.0], [74.6, 29437.0], [74.7, 29444.0], [74.8, 29444.0], [74.9, 29445.0], [75.0, 29465.0], [75.1, 29465.0], [75.2, 29468.0], [75.3, 29475.0], [75.4, 29478.0], [75.5, 29478.0], [75.6, 29480.0], [75.7, 29482.0], [75.8, 29488.0], [75.9, 29488.0], [76.0, 29491.0], [76.1, 29498.0], [76.2, 29504.0], [76.3, 29504.0], [76.4, 29509.0], [76.5, 29518.0], [76.6, 29522.0], [76.7, 29522.0], [76.8, 29523.0], [76.9, 29529.0], [77.0, 29529.0], [77.1, 29537.0], [77.2, 29539.0], [77.3, 29542.0], [77.4, 29542.0], [77.5, 29554.0], [77.6, 29560.0], [77.7, 29572.0], [77.8, 29572.0], [77.9, 29584.0], [78.0, 29590.0], [78.1, 29591.0], [78.2, 29591.0], [78.3, 29597.0], [78.4, 29614.0], [78.5, 29614.0], [78.6, 29623.0], [78.7, 29628.0], [78.8, 29649.0], [78.9, 29649.0], [79.0, 29650.0], [79.1, 29651.0], [79.2, 29660.0], [79.3, 29660.0], [79.4, 29668.0], [79.5, 29675.0], [79.6, 29680.0], [79.7, 29680.0], [79.8, 29691.0], [79.9, 29694.0], [80.0, 29699.0], [80.1, 29699.0], [80.2, 29700.0], [80.3, 29708.0], [80.4, 29708.0], [80.5, 29711.0], [80.6, 29719.0], [80.7, 29728.0], [80.8, 29728.0], [80.9, 29732.0], [81.0, 29757.0], [81.1, 29757.0], [81.2, 29757.0], [81.3, 29759.0], [81.4, 29759.0], [81.5, 29763.0], [81.6, 29763.0], [81.7, 29768.0], [81.8, 29769.0], [81.9, 29769.0], [82.0, 29770.0], [82.1, 29773.0], [82.2, 29781.0], [82.3, 29781.0], [82.4, 29782.0], [82.5, 29795.0], [82.6, 29796.0], [82.7, 29796.0], [82.8, 29797.0], [82.9, 29803.0], [83.0, 29804.0], [83.1, 29804.0], [83.2, 29817.0], [83.3, 29823.0], [83.4, 29823.0], [83.5, 29843.0], [83.6, 29844.0], [83.7, 29850.0], [83.8, 29850.0], [83.9, 29875.0], [84.0, 29884.0], [84.1, 29887.0], [84.2, 29887.0], [84.3, 29905.0], [84.4, 29912.0], [84.5, 29912.0], [84.6, 29912.0], [84.7, 29933.0], [84.8, 29934.0], [84.9, 29947.0], [85.0, 29947.0], [85.1, 29950.0], [85.2, 29951.0], [85.3, 29951.0], [85.4, 29961.0], [85.5, 29975.0], [85.6, 29978.0], [85.7, 29978.0], [85.8, 29987.0], [85.9, 30005.0], [86.0, 30007.0], [86.1, 30007.0], [86.2, 30009.0], [86.3, 30024.0], [86.4, 30026.0], [86.5, 30026.0], [86.6, 30030.0], [86.7, 30052.0], [86.8, 30052.0], [86.9, 30056.0], [87.0, 30065.0], [87.1, 30071.0], [87.2, 30071.0], [87.3, 30087.0], [87.4, 30094.0], [87.5, 30099.0], [87.6, 30099.0], [87.7, 30101.0], [87.8, 30104.0], [87.9, 30112.0], [88.0, 30112.0], [88.1, 30154.0], [88.2, 30159.0], [88.3, 30163.0], [88.4, 30163.0], [88.5, 30164.0], [88.6, 30166.0], [88.7, 30166.0], [88.8, 30170.0], [88.9, 30176.0], [89.0, 30184.0], [89.1, 30184.0], [89.2, 30216.0], [89.3, 30229.0], [89.4, 30237.0], [89.5, 30237.0], [89.6, 30247.0], [89.7, 30253.0], [89.8, 30267.0], [89.9, 30267.0], [90.0, 30297.0], [90.1, 30300.0], [90.2, 30300.0], [90.3, 30321.0], [90.4, 30330.0], [90.5, 30331.0], [90.6, 30331.0], [90.7, 30333.0], [90.8, 30337.0], [90.9, 30350.0], [91.0, 30350.0], [91.1, 30352.0], [91.2, 30354.0], [91.3, 30356.0], [91.4, 30356.0], [91.5, 30371.0], [91.6, 30407.0], [91.7, 30407.0], [91.8, 30420.0], [91.9, 30440.0], [92.0, 30446.0], [92.1, 30446.0], [92.2, 30477.0], [92.3, 30504.0], [92.4, 30508.0], [92.5, 30508.0], [92.6, 30524.0], [92.7, 30551.0], [92.8, 30556.0], [92.9, 30556.0], [93.0, 30579.0], [93.1, 30586.0], [93.2, 30633.0], [93.3, 30633.0], [93.4, 30641.0], [93.5, 30689.0], [93.6, 30689.0], [93.7, 30712.0], [93.8, 30766.0], [93.9, 30813.0], [94.0, 30813.0], [94.1, 31040.0], [94.2, 31354.0], [94.3, 31467.0], [94.4, 31467.0], [94.5, 31519.0], [94.6, 31598.0], [94.7, 31602.0], [94.8, 31602.0], [94.9, 31604.0], [95.0, 31695.0], [95.1, 31695.0], [95.2, 31905.0], [95.3, 31943.0], [95.4, 32007.0], [95.5, 32007.0], [95.6, 32372.0], [95.7, 32573.0], [95.8, 32648.0], [95.9, 32648.0], [96.0, 32785.0], [96.1, 32944.0], [96.2, 33402.0], [96.3, 33402.0], [96.4, 33807.0], [96.5, 33887.0], [96.6, 34308.0], [96.7, 34308.0], [96.8, 34597.0], [96.9, 34945.0], [97.0, 34945.0], [97.1, 35288.0], [97.2, 35740.0], [97.3, 36310.0], [97.4, 36310.0], [97.5, 36390.0], [97.6, 37298.0], [97.7, 37335.0], [97.8, 37335.0], [97.9, 37677.0], [98.0, 38682.0], [98.1, 39099.0], [98.2, 39099.0], [98.3, 39951.0], [98.4, 40796.0], [98.5, 40796.0], [98.6, 41073.0], [98.7, 41139.0], [98.8, 41564.0], [98.9, 41564.0], [99.0, 42146.0], [99.1, 42777.0], [99.2, 43002.0], [99.3, 43002.0], [99.4, 43274.0], [99.5, 43611.0], [99.6, 43834.0], [99.7, 43834.0], [99.8, 43989.0], [99.9, 44416.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 21.0, "series": [{"data": [[34500.0, 1.0], [32900.0, 1.0], [34300.0, 1.0], [36300.0, 2.0], [34900.0, 1.0], [35700.0, 1.0], [37300.0, 1.0], [39900.0, 1.0], [40700.0, 1.0], [41100.0, 1.0], [42700.0, 1.0], [41500.0, 1.0], [42100.0, 1.0], [43900.0, 1.0], [3100.0, 1.0], [6100.0, 1.0], [8200.0, 1.0], [11000.0, 1.0], [13700.0, 1.0], [16200.0, 1.0], [16100.0, 4.0], [17200.0, 3.0], [17400.0, 5.0], [17100.0, 5.0], [17300.0, 5.0], [17000.0, 2.0], [16900.0, 1.0], [16700.0, 2.0], [16800.0, 3.0], [16500.0, 1.0], [16600.0, 4.0], [18200.0, 4.0], [18400.0, 3.0], [17800.0, 3.0], [17500.0, 7.0], [17600.0, 1.0], [17700.0, 5.0], [18300.0, 1.0], [17900.0, 3.0], [18100.0, 1.0], [18600.0, 3.0], [18700.0, 1.0], [18900.0, 2.0], [18500.0, 5.0], [18800.0, 2.0], [19200.0, 3.0], [19400.0, 3.0], [19100.0, 1.0], [19000.0, 1.0], [19700.0, 2.0], [20400.0, 2.0], [20200.0, 4.0], [20300.0, 4.0], [20100.0, 2.0], [20000.0, 2.0], [19500.0, 3.0], [19600.0, 2.0], [19800.0, 5.0], [19900.0, 6.0], [20800.0, 2.0], [20500.0, 2.0], [21400.0, 4.0], [21200.0, 6.0], [21300.0, 1.0], [21100.0, 1.0], [20700.0, 1.0], [21000.0, 1.0], [21700.0, 4.0], [21600.0, 4.0], [22200.0, 4.0], [22300.0, 4.0], [22100.0, 7.0], [21800.0, 4.0], [21900.0, 4.0], [22000.0, 2.0], [22500.0, 2.0], [22400.0, 1.0], [23300.0, 4.0], [23500.0, 7.0], [22800.0, 2.0], [23000.0, 4.0], [23100.0, 2.0], [23200.0, 4.0], [23400.0, 2.0], [22600.0, 5.0], [22700.0, 2.0], [23600.0, 8.0], [23800.0, 9.0], [24000.0, 4.0], [24100.0, 6.0], [23900.0, 4.0], [24500.0, 6.0], [24400.0, 6.0], [24200.0, 5.0], [24300.0, 4.0], [23700.0, 2.0], [25400.0, 5.0], [25300.0, 5.0], [24600.0, 8.0], [25000.0, 5.0], [24900.0, 5.0], [24700.0, 4.0], [25100.0, 3.0], [25500.0, 4.0], [25200.0, 4.0], [24800.0, 2.0], [25700.0, 6.0], [26200.0, 3.0], [26300.0, 1.0], [26100.0, 7.0], [26400.0, 8.0], [25800.0, 6.0], [25600.0, 6.0], [26600.0, 3.0], [26500.0, 3.0], [26000.0, 3.0], [25900.0, 5.0], [27400.0, 4.0], [27100.0, 6.0], [27500.0, 8.0], [26900.0, 3.0], [27600.0, 3.0], [27000.0, 3.0], [27200.0, 9.0], [27300.0, 3.0], [26800.0, 2.0], [26700.0, 2.0], [27900.0, 5.0], [28100.0, 8.0], [28400.0, 6.0], [28300.0, 1.0], [28200.0, 3.0], [28600.0, 8.0], [28500.0, 9.0], [27700.0, 1.0], [27800.0, 4.0], [28000.0, 5.0], [28900.0, 12.0], [29600.0, 13.0], [29000.0, 15.0], [29500.0, 16.0], [29100.0, 14.0], [29400.0, 21.0], [28800.0, 7.0], [28700.0, 9.0], [29300.0, 18.0], [29200.0, 13.0], [30500.0, 7.0], [30700.0, 2.0], [30400.0, 5.0], [30300.0, 11.0], [30600.0, 3.0], [30200.0, 7.0], [30000.0, 13.0], [29900.0, 12.0], [29800.0, 10.0], [29700.0, 20.0], [30100.0, 11.0], [30800.0, 1.0], [31600.0, 3.0], [31400.0, 1.0], [31500.0, 2.0], [31300.0, 1.0], [31000.0, 1.0], [32500.0, 1.0], [31900.0, 2.0], [32600.0, 1.0], [32300.0, 1.0], [32000.0, 1.0], [32700.0, 1.0], [33800.0, 2.0], [33400.0, 1.0], [35200.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [38600.0, 1.0], [39000.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [43200.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [43800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60247484E12, "maxY": 10.0, "series": [{"data": [[1.60247586E12, 10.0], [1.6024755E12, 10.0], [1.60247616E12, 10.0], [1.60247568E12, 10.0], [1.60247598E12, 10.0], [1.60247538E12, 10.0], [1.60247628E12, 10.0], [1.60247508E12, 10.0], [1.60247658E12, 10.0], [1.60247496E12, 10.0], [1.6024767E12, 10.0], [1.6024758E12, 10.0], [1.60247556E12, 10.0], [1.6024761E12, 10.0], [1.60247526E12, 10.0], [1.6024764E12, 10.0], [1.60247544E12, 10.0], [1.60247622E12, 10.0], [1.60247514E12, 10.0], [1.60247652E12, 10.0], [1.60247484E12, 10.0], [1.60247682E12, 1.0], [1.60247574E12, 10.0], [1.60247592E12, 10.0], [1.60247562E12, 10.0], [1.60247604E12, 10.0], [1.60247532E12, 10.0], [1.60247634E12, 10.0], [1.60247502E12, 10.0], [1.60247664E12, 10.0], [1.6024752E12, 10.0], [1.60247646E12, 10.0], [1.6024749E12, 10.0], [1.60247676E12, 8.8]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247682E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16603.0, "minX": 1.0, "maxY": 26188.15977961432, "series": [{"data": [[8.0, 16607.0], [4.0, 16821.0], [2.0, 16889.0], [1.0, 17158.0], [9.0, 16603.0], [10.0, 26188.15977961432], [5.0, 16784.0], [6.0, 16647.0], [3.0, 16852.0], [7.0, 16630.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 26072.91836734694]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.533333333333333, "minX": 1.60247484E12, "maxY": 209351.45, "series": [{"data": [[1.60247586E12, 117609.08333333333], [1.6024755E12, 44656.53333333333], [1.60247616E12, 46913.9], [1.60247568E12, 167936.26666666666], [1.60247598E12, 56535.316666666666], [1.60247538E12, 59399.166666666664], [1.60247628E12, 56892.48333333333], [1.60247508E12, 61406.01666666667], [1.60247658E12, 29141.3], [1.60247496E12, 78711.7], [1.6024767E12, 154792.0], [1.6024758E12, 191243.36666666667], [1.60247556E12, 33146.71666666667], [1.6024761E12, 36522.583333333336], [1.60247526E12, 45941.1], [1.6024764E12, 46183.03333333333], [1.60247544E12, 41652.71666666667], [1.60247622E12, 48225.26666666667], [1.60247514E12, 56443.73333333333], [1.60247652E12, 37248.03333333333], [1.60247484E12, 15506.333333333334], [1.60247682E12, 520.8166666666667], [1.60247574E12, 64397.1], [1.60247592E12, 78697.98333333334], [1.60247562E12, 39172.416666666664], [1.60247604E12, 66655.23333333334], [1.60247532E12, 48464.3], [1.60247634E12, 45979.96666666667], [1.60247502E12, 141539.95], [1.60247664E12, 51796.01666666667], [1.6024752E12, 47187.86666666667], [1.60247646E12, 48568.0], [1.6024749E12, 209351.45], [1.60247676E12, 55002.566666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60247586E12, 202.18333333333334], [1.6024755E12, 146.01666666666668], [1.60247616E12, 146.16666666666666], [1.60247568E12, 213.65], [1.60247598E12, 169.61666666666667], [1.60247538E12, 153.76666666666668], [1.60247628E12, 153.76666666666668], [1.60247508E12, 153.43333333333334], [1.60247658E12, 189.71666666666667], [1.60247496E12, 222.11666666666667], [1.6024767E12, 153.11666666666667], [1.6024758E12, 187.06666666666666], [1.60247556E12, 153.38333333333333], [1.6024761E12, 138.76666666666668], [1.60247526E12, 146.13333333333333], [1.6024764E12, 153.4], [1.60247544E12, 146.01666666666668], [1.60247622E12, 146.13333333333333], [1.60247514E12, 176.6], [1.60247652E12, 167.78333333333333], [1.60247484E12, 7.316666666666666], [1.60247682E12, 6.533333333333333], [1.60247574E12, 161.5], [1.60247592E12, 192.03333333333333], [1.60247562E12, 197.88333333333333], [1.60247604E12, 161.93333333333334], [1.60247532E12, 146.11666666666667], [1.60247634E12, 154.06666666666666], [1.60247502E12, 121.06666666666666], [1.60247664E12, 195.13333333333333], [1.6024752E12, 146.11666666666667], [1.60247646E12, 153.33333333333334], [1.6024749E12, 169.25], [1.60247676E12, 208.16666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247682E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3136.0, "minX": 1.60247484E12, "maxY": 34663.210526315794, "series": [{"data": [[1.60247586E12, 22727.07142857143], [1.6024755E12, 29982.85], [1.60247616E12, 29181.949999999997], [1.60247568E12, 19339.033333333333], [1.60247598E12, 25835.82608695653], [1.60247538E12, 29654.666666666668], [1.60247628E12, 29127.142857142855], [1.60247508E12, 32091.19047619047], [1.60247658E12, 23870.23076923077], [1.60247496E12, 19864.548387096773], [1.6024767E12, 25207.523809523806], [1.6024758E12, 23676.46153846154], [1.60247556E12, 28134.95238095238], [1.6024761E12, 34663.210526315794], [1.60247526E12, 30184.45], [1.6024764E12, 29170.2380952381], [1.60247544E12, 29238.9], [1.60247622E12, 29511.2], [1.60247514E12, 25096.625000000004], [1.60247652E12, 26643.217391304348], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 24367.782608695656], [1.60247592E12, 21270.518518518526], [1.60247562E12, 24746.14814814815], [1.60247604E12, 24329.090909090908], [1.60247532E12, 30199.8], [1.60247634E12, 27829.523809523813], [1.60247502E12, 30919.687500000004], [1.60247664E12, 22612.48148148148], [1.6024752E12, 28599.5], [1.60247646E12, 29195.238095238095], [1.6024749E12, 22152.304347826084], [1.60247676E12, 22577.400000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247682E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3129.0, "minX": 1.60247484E12, "maxY": 34661.8947368421, "series": [{"data": [[1.60247586E12, 22724.96428571429], [1.6024755E12, 29981.5], [1.60247616E12, 29180.95], [1.60247568E12, 19335.666666666668], [1.60247598E12, 25834.69565217391], [1.60247538E12, 29653.47619047619], [1.60247628E12, 29125.7619047619], [1.60247508E12, 32089.80952380952], [1.60247658E12, 23868.846153846152], [1.60247496E12, 19863.064516129038], [1.6024767E12, 25203.047619047622], [1.6024758E12, 23672.80769230769], [1.60247556E12, 28133.66666666667], [1.6024761E12, 34661.8947368421], [1.60247526E12, 30183.1], [1.6024764E12, 29169.14285714286], [1.60247544E12, 29237.850000000002], [1.60247622E12, 29510.149999999998], [1.60247514E12, 25095.374999999996], [1.60247652E12, 26642.478260869568], [1.60247484E12, 3129.0], [1.60247682E12, 17156.0], [1.60247574E12, 24365.434782608696], [1.60247592E12, 21268.814814814818], [1.60247562E12, 24744.40740740741], [1.60247604E12, 24327.545454545456], [1.60247532E12, 30198.55000000001], [1.60247634E12, 27828.619047619046], [1.60247502E12, 30915.1875], [1.60247664E12, 22610.777777777777], [1.6024752E12, 28598.250000000004], [1.60247646E12, 29193.80952380953], [1.6024749E12, 22149.0], [1.60247676E12, 22575.36666666667]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247682E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60247484E12, "maxY": 37.0, "series": [{"data": [[1.60247586E12, 0.42857142857142866], [1.6024755E12, 0.8], [1.60247616E12, 0.25], [1.60247568E12, 0.4666666666666667], [1.60247598E12, 0.5217391304347826], [1.60247538E12, 0.38095238095238093], [1.60247628E12, 0.42857142857142855], [1.60247508E12, 0.7142857142857144], [1.60247658E12, 0.42307692307692313], [1.60247496E12, 0.5483870967741934], [1.6024767E12, 0.6190476190476191], [1.6024758E12, 0.30769230769230765], [1.60247556E12, 0.38095238095238093], [1.6024761E12, 0.2631578947368421], [1.60247526E12, 0.7], [1.6024764E12, 0.6190476190476191], [1.60247544E12, 0.35000000000000003], [1.60247622E12, 0.7499999999999999], [1.60247514E12, 0.20833333333333331], [1.60247652E12, 0.13043478260869565], [1.60247484E12, 37.0], [1.60247682E12, 0.0], [1.60247574E12, 0.4782608695652174], [1.60247592E12, 0.18518518518518517], [1.60247562E12, 0.5555555555555555], [1.60247604E12, 0.5909090909090908], [1.60247532E12, 0.7000000000000001], [1.60247634E12, 0.19047619047619052], [1.60247502E12, 0.4375], [1.60247664E12, 0.37037037037037035], [1.6024752E12, 0.7000000000000001], [1.60247646E12, 0.5238095238095238], [1.6024749E12, 2.3043478260869574], [1.60247676E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247682E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3136.0, "minX": 1.60247484E12, "maxY": 44416.0, "series": [{"data": [[1.60247586E12, 28728.0], [1.6024755E12, 30446.0], [1.60247616E12, 29773.0], [1.60247568E12, 22686.0], [1.60247598E12, 29410.0], [1.60247538E12, 30176.0], [1.60247628E12, 29522.0], [1.60247508E12, 44416.0], [1.60247658E12, 28065.0], [1.60247496E12, 23630.0], [1.6024767E12, 28901.0], [1.6024758E12, 26149.0], [1.60247556E12, 30420.0], [1.6024761E12, 43002.0], [1.60247526E12, 30556.0], [1.6024764E12, 29523.0], [1.60247544E12, 30170.0], [1.60247622E12, 29803.0], [1.60247514E12, 30477.0], [1.60247652E12, 28881.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 31604.0], [1.60247592E12, 31943.0], [1.60247562E12, 28531.0], [1.60247604E12, 29308.0], [1.60247532E12, 30641.0], [1.60247634E12, 28511.0], [1.60247502E12, 43611.0], [1.60247664E12, 27527.0], [1.6024752E12, 30689.0], [1.60247646E12, 29675.0], [1.6024749E12, 27544.0], [1.60247676E12, 37335.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60247586E12, 18182.0], [1.6024755E12, 29628.0], [1.60247616E12, 27593.0], [1.60247568E12, 17169.0], [1.60247598E12, 22467.0], [1.60247538E12, 28891.0], [1.60247628E12, 28576.0], [1.60247508E12, 24691.0], [1.60247658E12, 20276.0], [1.60247496E12, 17178.0], [1.6024767E12, 19519.0], [1.6024758E12, 20049.0], [1.60247556E12, 25397.0], [1.6024761E12, 25424.0], [1.60247526E12, 29804.0], [1.6024764E12, 28835.0], [1.60247544E12, 28406.0], [1.60247622E12, 29282.0], [1.60247514E12, 22359.0], [1.60247652E12, 23809.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 17783.0], [1.60247592E12, 16973.0], [1.60247562E12, 18944.0], [1.60247604E12, 21994.0], [1.60247532E12, 29719.0], [1.60247634E12, 27167.0], [1.60247502E12, 21856.0], [1.60247664E12, 18498.0], [1.6024752E12, 25280.0], [1.60247646E12, 28614.0], [1.6024749E12, 6168.0], [1.60247676E12, 16103.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60247586E12, 18182.0], [1.6024755E12, 29628.0], [1.60247616E12, 27593.0], [1.60247568E12, 17169.0], [1.60247598E12, 22467.0], [1.60247538E12, 28891.0], [1.60247628E12, 28576.0], [1.60247508E12, 24691.0], [1.60247658E12, 20276.0], [1.60247496E12, 17178.0], [1.6024767E12, 19519.0], [1.6024758E12, 20049.0], [1.60247556E12, 25397.0], [1.6024761E12, 25424.0], [1.60247526E12, 29804.0], [1.6024764E12, 28835.0], [1.60247544E12, 28406.0], [1.60247622E12, 29282.0], [1.60247514E12, 22359.0], [1.60247652E12, 23809.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 17783.0], [1.60247592E12, 16973.0], [1.60247562E12, 18944.0], [1.60247604E12, 21994.0], [1.60247532E12, 29719.0], [1.60247634E12, 27167.0], [1.60247502E12, 21856.0], [1.60247664E12, 18498.0], [1.6024752E12, 25280.0], [1.60247646E12, 28614.0], [1.6024749E12, 6168.0], [1.60247676E12, 16103.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60247586E12, 18182.0], [1.6024755E12, 29628.0], [1.60247616E12, 27593.0], [1.60247568E12, 17169.0], [1.60247598E12, 22467.0], [1.60247538E12, 28891.0], [1.60247628E12, 28576.0], [1.60247508E12, 24691.0], [1.60247658E12, 20276.0], [1.60247496E12, 17178.0], [1.6024767E12, 19519.0], [1.6024758E12, 20049.0], [1.60247556E12, 25397.0], [1.6024761E12, 25424.0], [1.60247526E12, 29804.0], [1.6024764E12, 28835.0], [1.60247544E12, 28406.0], [1.60247622E12, 29282.0], [1.60247514E12, 22359.0], [1.60247652E12, 23809.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 17783.0], [1.60247592E12, 16973.0], [1.60247562E12, 18944.0], [1.60247604E12, 21994.0], [1.60247532E12, 29719.0], [1.60247634E12, 27167.0], [1.60247502E12, 21856.0], [1.60247664E12, 18498.0], [1.6024752E12, 25280.0], [1.60247646E12, 28614.0], [1.6024749E12, 6168.0], [1.60247676E12, 16103.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60247586E12, 18182.0], [1.6024755E12, 29628.0], [1.60247616E12, 27593.0], [1.60247568E12, 17169.0], [1.60247598E12, 22467.0], [1.60247538E12, 28891.0], [1.60247628E12, 28576.0], [1.60247508E12, 24691.0], [1.60247658E12, 20276.0], [1.60247496E12, 17178.0], [1.6024767E12, 19519.0], [1.6024758E12, 20049.0], [1.60247556E12, 25397.0], [1.6024761E12, 25424.0], [1.60247526E12, 29804.0], [1.6024764E12, 28835.0], [1.60247544E12, 28406.0], [1.60247622E12, 29282.0], [1.60247514E12, 22359.0], [1.60247652E12, 23809.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 17783.0], [1.60247592E12, 16973.0], [1.60247562E12, 18944.0], [1.60247604E12, 21994.0], [1.60247532E12, 29719.0], [1.60247634E12, 27167.0], [1.60247502E12, 21856.0], [1.60247664E12, 18498.0], [1.6024752E12, 25280.0], [1.60247646E12, 28614.0], [1.6024749E12, 6168.0], [1.60247676E12, 16103.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60247586E12, 20777.0], [1.6024755E12, 29941.5], [1.60247616E12, 29340.5], [1.60247568E12, 18763.5], [1.60247598E12, 25870.0], [1.60247538E12, 29668.0], [1.60247628E12, 29093.0], [1.60247508E12, 30712.0], [1.60247658E12, 23610.0], [1.60247496E12, 20192.0], [1.6024767E12, 27508.0], [1.6024758E12, 24322.5], [1.60247556E12, 29122.0], [1.6024761E12, 34945.0], [1.60247526E12, 30174.0], [1.6024764E12, 29144.0], [1.60247544E12, 29314.5], [1.60247622E12, 29493.0], [1.60247514E12, 24510.5], [1.60247652E12, 26068.0], [1.60247484E12, 3136.0], [1.60247682E12, 17158.0], [1.60247574E12, 22323.0], [1.60247592E12, 17740.0], [1.60247562E12, 25018.0], [1.60247604E12, 24268.5], [1.60247532E12, 30197.5], [1.60247634E12, 28022.0], [1.60247502E12, 26332.0], [1.60247664E12, 21949.0], [1.6024752E12, 29451.0], [1.60247646E12, 29197.0], [1.6024749E12, 25658.0], [1.60247676E12, 17555.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247682E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27079.0, "minX": 1.0, "maxY": 27079.0, "series": [{"data": [[1.0, 27079.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27076.0, "minX": 1.0, "maxY": 27076.0, "series": [{"data": [[1.0, 27076.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.60247484E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247586E12, 0.4666666666666667], [1.6024755E12, 0.3333333333333333], [1.60247616E12, 0.3333333333333333], [1.60247568E12, 0.5], [1.60247598E12, 0.38333333333333336], [1.60247538E12, 0.35], [1.60247628E12, 0.35], [1.60247508E12, 0.35], [1.60247658E12, 0.43333333333333335], [1.60247496E12, 0.5166666666666667], [1.6024767E12, 0.35], [1.6024758E12, 0.43333333333333335], [1.60247556E12, 0.35], [1.6024761E12, 0.31666666666666665], [1.60247526E12, 0.3333333333333333], [1.6024764E12, 0.35], [1.60247544E12, 0.3333333333333333], [1.60247622E12, 0.3333333333333333], [1.60247514E12, 0.4], [1.60247652E12, 0.38333333333333336], [1.60247484E12, 0.18333333333333332], [1.60247574E12, 0.38333333333333336], [1.60247592E12, 0.45], [1.60247562E12, 0.45], [1.60247604E12, 0.36666666666666664], [1.60247532E12, 0.3333333333333333], [1.60247634E12, 0.35], [1.60247502E12, 0.26666666666666666], [1.60247664E12, 0.45], [1.6024752E12, 0.3333333333333333], [1.60247646E12, 0.35], [1.6024749E12, 0.38333333333333336], [1.60247676E12, 0.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247676E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60247484E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247586E12, 0.4666666666666667], [1.6024755E12, 0.3333333333333333], [1.60247616E12, 0.3333333333333333], [1.60247568E12, 0.5], [1.60247598E12, 0.38333333333333336], [1.60247538E12, 0.35], [1.60247628E12, 0.35], [1.60247508E12, 0.35], [1.60247658E12, 0.43333333333333335], [1.60247496E12, 0.5166666666666667], [1.6024767E12, 0.35], [1.6024758E12, 0.43333333333333335], [1.60247556E12, 0.35], [1.6024761E12, 0.31666666666666665], [1.60247526E12, 0.3333333333333333], [1.6024764E12, 0.35], [1.60247544E12, 0.3333333333333333], [1.60247622E12, 0.3333333333333333], [1.60247514E12, 0.4], [1.60247652E12, 0.38333333333333336], [1.60247484E12, 0.016666666666666666], [1.60247682E12, 0.016666666666666666], [1.60247574E12, 0.38333333333333336], [1.60247592E12, 0.45], [1.60247562E12, 0.45], [1.60247604E12, 0.36666666666666664], [1.60247532E12, 0.3333333333333333], [1.60247634E12, 0.35], [1.60247502E12, 0.26666666666666666], [1.60247664E12, 0.45], [1.6024752E12, 0.3333333333333333], [1.60247646E12, 0.35], [1.6024749E12, 0.38333333333333336], [1.60247676E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60247682E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60247484E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247586E12, 0.4666666666666667], [1.6024755E12, 0.3333333333333333], [1.60247616E12, 0.3333333333333333], [1.60247568E12, 0.5], [1.60247598E12, 0.38333333333333336], [1.60247538E12, 0.35], [1.60247628E12, 0.35], [1.60247508E12, 0.35], [1.60247658E12, 0.43333333333333335], [1.60247496E12, 0.5166666666666667], [1.6024767E12, 0.35], [1.6024758E12, 0.43333333333333335], [1.60247556E12, 0.35], [1.6024761E12, 0.31666666666666665], [1.60247526E12, 0.3333333333333333], [1.6024764E12, 0.35], [1.60247544E12, 0.3333333333333333], [1.60247622E12, 0.3333333333333333], [1.60247514E12, 0.4], [1.60247652E12, 0.38333333333333336], [1.60247484E12, 0.016666666666666666], [1.60247682E12, 0.016666666666666666], [1.60247574E12, 0.38333333333333336], [1.60247592E12, 0.45], [1.60247562E12, 0.45], [1.60247604E12, 0.36666666666666664], [1.60247532E12, 0.3333333333333333], [1.60247634E12, 0.35], [1.60247502E12, 0.26666666666666666], [1.60247664E12, 0.45], [1.6024752E12, 0.3333333333333333], [1.60247646E12, 0.35], [1.6024749E12, 0.38333333333333336], [1.60247676E12, 0.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247682E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60247484E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60247586E12, 0.4666666666666667], [1.6024755E12, 0.3333333333333333], [1.60247616E12, 0.3333333333333333], [1.60247568E12, 0.5], [1.60247598E12, 0.38333333333333336], [1.60247538E12, 0.35], [1.60247628E12, 0.35], [1.60247508E12, 0.35], [1.60247658E12, 0.43333333333333335], [1.60247496E12, 0.5166666666666667], [1.6024767E12, 0.35], [1.6024758E12, 0.43333333333333335], [1.60247556E12, 0.35], [1.6024761E12, 0.31666666666666665], [1.60247526E12, 0.3333333333333333], [1.6024764E12, 0.35], [1.60247544E12, 0.3333333333333333], [1.60247622E12, 0.3333333333333333], [1.60247514E12, 0.4], [1.60247652E12, 0.38333333333333336], [1.60247484E12, 0.016666666666666666], [1.60247682E12, 0.016666666666666666], [1.60247574E12, 0.38333333333333336], [1.60247592E12, 0.45], [1.60247562E12, 0.45], [1.60247604E12, 0.36666666666666664], [1.60247532E12, 0.3333333333333333], [1.60247634E12, 0.35], [1.60247502E12, 0.26666666666666666], [1.60247664E12, 0.45], [1.6024752E12, 0.3333333333333333], [1.60247646E12, 0.35], [1.6024749E12, 0.38333333333333336], [1.60247676E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60247682E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

