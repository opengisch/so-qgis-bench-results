/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 32593.0, "minX": 0.0, "maxY": 215428.0, "series": [{"data": [[0.0, 32593.0], [0.1, 32593.0], [0.2, 32593.0], [0.3, 32632.0], [0.4, 32632.0], [0.5, 32632.0], [0.6, 32748.0], [0.7, 32748.0], [0.8, 32748.0], [0.9, 32804.0], [1.0, 32804.0], [1.1, 32804.0], [1.2, 32815.0], [1.3, 32815.0], [1.4, 32815.0], [1.5, 32832.0], [1.6, 32832.0], [1.7, 32832.0], [1.8, 32894.0], [1.9, 32894.0], [2.0, 32894.0], [2.1, 32900.0], [2.2, 32900.0], [2.3, 32900.0], [2.4, 32908.0], [2.5, 32908.0], [2.6, 32951.0], [2.7, 32951.0], [2.8, 32951.0], [2.9, 32969.0], [3.0, 32969.0], [3.1, 32969.0], [3.2, 32982.0], [3.3, 32982.0], [3.4, 32982.0], [3.5, 32986.0], [3.6, 32986.0], [3.7, 32986.0], [3.8, 33005.0], [3.9, 33005.0], [4.0, 33005.0], [4.1, 33017.0], [4.2, 33017.0], [4.3, 33017.0], [4.4, 33023.0], [4.5, 33023.0], [4.6, 33023.0], [4.7, 33030.0], [4.8, 33030.0], [4.9, 33039.0], [5.0, 33039.0], [5.1, 33039.0], [5.2, 33051.0], [5.3, 33051.0], [5.4, 33051.0], [5.5, 33057.0], [5.6, 33057.0], [5.7, 33057.0], [5.8, 33065.0], [5.9, 33065.0], [6.0, 33065.0], [6.1, 33075.0], [6.2, 33075.0], [6.3, 33075.0], [6.4, 33089.0], [6.5, 33089.0], [6.6, 33089.0], [6.7, 33093.0], [6.8, 33093.0], [6.9, 33093.0], [7.0, 33094.0], [7.1, 33094.0], [7.2, 33094.0], [7.3, 33104.0], [7.4, 33104.0], [7.5, 33106.0], [7.6, 33106.0], [7.7, 33106.0], [7.8, 33107.0], [7.9, 33107.0], [8.0, 33107.0], [8.1, 33112.0], [8.2, 33112.0], [8.3, 33112.0], [8.4, 33122.0], [8.5, 33122.0], [8.6, 33122.0], [8.7, 33125.0], [8.8, 33125.0], [8.9, 33125.0], [9.0, 33144.0], [9.1, 33144.0], [9.2, 33144.0], [9.3, 33149.0], [9.4, 33149.0], [9.5, 33149.0], [9.6, 33152.0], [9.7, 33152.0], [9.8, 33163.0], [9.9, 33163.0], [10.0, 33163.0], [10.1, 33176.0], [10.2, 33176.0], [10.3, 33176.0], [10.4, 33186.0], [10.5, 33186.0], [10.6, 33186.0], [10.7, 33186.0], [10.8, 33186.0], [10.9, 33186.0], [11.0, 33195.0], [11.1, 33195.0], [11.2, 33195.0], [11.3, 33197.0], [11.4, 33197.0], [11.5, 33197.0], [11.6, 33197.0], [11.7, 33197.0], [11.8, 33197.0], [11.9, 33199.0], [12.0, 33199.0], [12.1, 33199.0], [12.2, 33202.0], [12.3, 33202.0], [12.4, 33204.0], [12.5, 33204.0], [12.6, 33204.0], [12.7, 33205.0], [12.8, 33205.0], [12.9, 33205.0], [13.0, 33208.0], [13.1, 33208.0], [13.2, 33208.0], [13.3, 33211.0], [13.4, 33211.0], [13.5, 33211.0], [13.6, 33215.0], [13.7, 33215.0], [13.8, 33215.0], [13.9, 33218.0], [14.0, 33218.0], [14.1, 33218.0], [14.2, 33221.0], [14.3, 33221.0], [14.4, 33221.0], [14.5, 33223.0], [14.6, 33223.0], [14.7, 33224.0], [14.8, 33224.0], [14.9, 33224.0], [15.0, 33235.0], [15.1, 33235.0], [15.2, 33235.0], [15.3, 33237.0], [15.4, 33237.0], [15.5, 33237.0], [15.6, 33240.0], [15.7, 33240.0], [15.8, 33240.0], [15.9, 33241.0], [16.0, 33241.0], [16.1, 33241.0], [16.2, 33251.0], [16.3, 33251.0], [16.4, 33251.0], [16.5, 33265.0], [16.6, 33265.0], [16.7, 33265.0], [16.8, 33273.0], [16.9, 33273.0], [17.0, 33273.0], [17.1, 33274.0], [17.2, 33274.0], [17.3, 33277.0], [17.4, 33277.0], [17.5, 33277.0], [17.6, 33281.0], [17.7, 33281.0], [17.8, 33281.0], [17.9, 33293.0], [18.0, 33293.0], [18.1, 33293.0], [18.2, 33298.0], [18.3, 33298.0], [18.4, 33298.0], [18.5, 33298.0], [18.6, 33298.0], [18.7, 33298.0], [18.8, 33302.0], [18.9, 33302.0], [19.0, 33302.0], [19.1, 33305.0], [19.2, 33305.0], [19.3, 33305.0], [19.4, 33311.0], [19.5, 33311.0], [19.6, 33313.0], [19.7, 33313.0], [19.8, 33313.0], [19.9, 33314.0], [20.0, 33314.0], [20.1, 33314.0], [20.2, 33333.0], [20.3, 33333.0], [20.4, 33333.0], [20.5, 33333.0], [20.6, 33333.0], [20.7, 33333.0], [20.8, 33333.0], [20.9, 33333.0], [21.0, 33333.0], [21.1, 33336.0], [21.2, 33336.0], [21.3, 33336.0], [21.4, 33336.0], [21.5, 33336.0], [21.6, 33336.0], [21.7, 33357.0], [21.8, 33357.0], [21.9, 33357.0], [22.0, 33362.0], [22.1, 33362.0], [22.2, 33364.0], [22.3, 33364.0], [22.4, 33364.0], [22.5, 33369.0], [22.6, 33369.0], [22.7, 33369.0], [22.8, 33387.0], [22.9, 33387.0], [23.0, 33387.0], [23.1, 33388.0], [23.2, 33388.0], [23.3, 33388.0], [23.4, 33389.0], [23.5, 33389.0], [23.6, 33389.0], [23.7, 33390.0], [23.8, 33390.0], [23.9, 33390.0], [24.0, 33408.0], [24.1, 33408.0], [24.2, 33408.0], [24.3, 33414.0], [24.4, 33414.0], [24.5, 33426.0], [24.6, 33426.0], [24.7, 33426.0], [24.8, 33432.0], [24.9, 33432.0], [25.0, 33432.0], [25.1, 33443.0], [25.2, 33443.0], [25.3, 33443.0], [25.4, 33452.0], [25.5, 33452.0], [25.6, 33452.0], [25.7, 33465.0], [25.8, 33465.0], [25.9, 33465.0], [26.0, 33467.0], [26.1, 33467.0], [26.2, 33467.0], [26.3, 33473.0], [26.4, 33473.0], [26.5, 33473.0], [26.6, 33476.0], [26.7, 33476.0], [26.8, 33476.0], [26.9, 33500.0], [27.0, 33500.0], [27.1, 33501.0], [27.2, 33501.0], [27.3, 33501.0], [27.4, 33501.0], [27.5, 33501.0], [27.6, 33501.0], [27.7, 33507.0], [27.8, 33507.0], [27.9, 33507.0], [28.0, 33508.0], [28.1, 33508.0], [28.2, 33508.0], [28.3, 33522.0], [28.4, 33522.0], [28.5, 33522.0], [28.6, 33523.0], [28.7, 33523.0], [28.8, 33523.0], [28.9, 33535.0], [29.0, 33535.0], [29.1, 33535.0], [29.2, 33538.0], [29.3, 33538.0], [29.4, 33544.0], [29.5, 33544.0], [29.6, 33544.0], [29.7, 33545.0], [29.8, 33545.0], [29.9, 33545.0], [30.0, 33578.0], [30.1, 33578.0], [30.2, 33578.0], [30.3, 33584.0], [30.4, 33584.0], [30.5, 33584.0], [30.6, 33587.0], [30.7, 33587.0], [30.8, 33587.0], [30.9, 33591.0], [31.0, 33591.0], [31.1, 33591.0], [31.2, 33607.0], [31.3, 33607.0], [31.4, 33607.0], [31.5, 33610.0], [31.6, 33610.0], [31.7, 33610.0], [31.8, 33622.0], [31.9, 33622.0], [32.0, 33626.0], [32.1, 33626.0], [32.2, 33626.0], [32.3, 33639.0], [32.4, 33639.0], [32.5, 33639.0], [32.6, 33646.0], [32.7, 33646.0], [32.8, 33646.0], [32.9, 33650.0], [33.0, 33650.0], [33.1, 33650.0], [33.2, 33653.0], [33.3, 33653.0], [33.4, 33653.0], [33.5, 33659.0], [33.6, 33659.0], [33.7, 33659.0], [33.8, 33664.0], [33.9, 33664.0], [34.0, 33664.0], [34.1, 33678.0], [34.2, 33678.0], [34.3, 33698.0], [34.4, 33698.0], [34.5, 33698.0], [34.6, 33720.0], [34.7, 33720.0], [34.8, 33720.0], [34.9, 33728.0], [35.0, 33728.0], [35.1, 33728.0], [35.2, 33732.0], [35.3, 33732.0], [35.4, 33732.0], [35.5, 33745.0], [35.6, 33745.0], [35.7, 33745.0], [35.8, 33757.0], [35.9, 33757.0], [36.0, 33757.0], [36.1, 33788.0], [36.2, 33788.0], [36.3, 33788.0], [36.4, 33789.0], [36.5, 33789.0], [36.6, 33798.0], [36.7, 33798.0], [36.8, 33798.0], [36.9, 33813.0], [37.0, 33813.0], [37.1, 33813.0], [37.2, 33817.0], [37.3, 33817.0], [37.4, 33817.0], [37.5, 33833.0], [37.6, 33833.0], [37.7, 33833.0], [37.8, 33834.0], [37.9, 33834.0], [38.0, 33834.0], [38.1, 33836.0], [38.2, 33836.0], [38.3, 33836.0], [38.4, 33844.0], [38.5, 33844.0], [38.6, 33844.0], [38.7, 33850.0], [38.8, 33850.0], [38.9, 33850.0], [39.0, 33856.0], [39.1, 33856.0], [39.2, 33863.0], [39.3, 33863.0], [39.4, 33863.0], [39.5, 33872.0], [39.6, 33872.0], [39.7, 33872.0], [39.8, 33898.0], [39.9, 33898.0], [40.0, 33898.0], [40.1, 33907.0], [40.2, 33907.0], [40.3, 33907.0], [40.4, 33923.0], [40.5, 33923.0], [40.6, 33923.0], [40.7, 33938.0], [40.8, 33938.0], [40.9, 33938.0], [41.0, 33972.0], [41.1, 33972.0], [41.2, 33972.0], [41.3, 33974.0], [41.4, 33974.0], [41.5, 33990.0], [41.6, 33990.0], [41.7, 33990.0], [41.8, 34018.0], [41.9, 34018.0], [42.0, 34018.0], [42.1, 34033.0], [42.2, 34033.0], [42.3, 34033.0], [42.4, 34042.0], [42.5, 34042.0], [42.6, 34042.0], [42.7, 34044.0], [42.8, 34044.0], [42.9, 34044.0], [43.0, 34080.0], [43.1, 34080.0], [43.2, 34080.0], [43.3, 34110.0], [43.4, 34110.0], [43.5, 34110.0], [43.6, 34112.0], [43.7, 34112.0], [43.8, 34112.0], [43.9, 34118.0], [44.0, 34118.0], [44.1, 34144.0], [44.2, 34144.0], [44.3, 34144.0], [44.4, 34203.0], [44.5, 34203.0], [44.6, 34203.0], [44.7, 34204.0], [44.8, 34204.0], [44.9, 34204.0], [45.0, 34216.0], [45.1, 34216.0], [45.2, 34216.0], [45.3, 34216.0], [45.4, 34216.0], [45.5, 34216.0], [45.6, 34235.0], [45.7, 34235.0], [45.8, 34235.0], [45.9, 34261.0], [46.0, 34261.0], [46.1, 34261.0], [46.2, 34270.0], [46.3, 34270.0], [46.4, 34277.0], [46.5, 34277.0], [46.6, 34277.0], [46.7, 34300.0], [46.8, 34300.0], [46.9, 34300.0], [47.0, 34317.0], [47.1, 34317.0], [47.2, 34317.0], [47.3, 34323.0], [47.4, 34323.0], [47.5, 34323.0], [47.6, 34345.0], [47.7, 34345.0], [47.8, 34345.0], [47.9, 34350.0], [48.0, 34350.0], [48.1, 34350.0], [48.2, 34353.0], [48.3, 34353.0], [48.4, 34353.0], [48.5, 34405.0], [48.6, 34405.0], [48.7, 34405.0], [48.8, 34433.0], [48.9, 34433.0], [49.0, 34444.0], [49.1, 34444.0], [49.2, 34444.0], [49.3, 34444.0], [49.4, 34444.0], [49.5, 34444.0], [49.6, 34468.0], [49.7, 34468.0], [49.8, 34468.0], [49.9, 34473.0], [50.0, 34473.0], [50.1, 34473.0], [50.2, 34488.0], [50.3, 34488.0], [50.4, 34488.0], [50.5, 34546.0], [50.6, 34546.0], [50.7, 34546.0], [50.8, 34588.0], [50.9, 34588.0], [51.0, 34588.0], [51.1, 34601.0], [51.2, 34601.0], [51.3, 34601.0], [51.4, 34601.0], [51.5, 34601.0], [51.6, 34611.0], [51.7, 34611.0], [51.8, 34611.0], [51.9, 34629.0], [52.0, 34629.0], [52.1, 34629.0], [52.2, 34632.0], [52.3, 34632.0], [52.4, 34632.0], [52.5, 34639.0], [52.6, 34639.0], [52.7, 34639.0], [52.8, 34657.0], [52.9, 34657.0], [53.0, 34657.0], [53.1, 34677.0], [53.2, 34677.0], [53.3, 34677.0], [53.4, 34681.0], [53.5, 34681.0], [53.6, 34681.0], [53.7, 34706.0], [53.8, 34706.0], [53.9, 34715.0], [54.0, 34715.0], [54.1, 34715.0], [54.2, 34784.0], [54.3, 34784.0], [54.4, 34784.0], [54.5, 34895.0], [54.6, 34895.0], [54.7, 34895.0], [54.8, 34925.0], [54.9, 34925.0], [55.0, 34925.0], [55.1, 35208.0], [55.2, 35208.0], [55.3, 35208.0], [55.4, 35275.0], [55.5, 35275.0], [55.6, 35275.0], [55.7, 35490.0], [55.8, 35490.0], [55.9, 35490.0], [56.0, 35509.0], [56.1, 35509.0], [56.2, 36408.0], [56.3, 36408.0], [56.4, 36408.0], [56.5, 37184.0], [56.6, 37184.0], [56.7, 37184.0], [56.8, 37609.0], [56.9, 37609.0], [57.0, 37609.0], [57.1, 38083.0], [57.2, 38083.0], [57.3, 38083.0], [57.4, 38407.0], [57.5, 38407.0], [57.6, 38407.0], [57.7, 40003.0], [57.8, 40003.0], [57.9, 40003.0], [58.0, 40242.0], [58.1, 40242.0], [58.2, 40242.0], [58.3, 41097.0], [58.4, 41097.0], [58.5, 41097.0], [58.6, 41797.0], [58.7, 41797.0], [58.8, 42286.0], [58.9, 42286.0], [59.0, 42286.0], [59.1, 43771.0], [59.2, 43771.0], [59.3, 43771.0], [59.4, 44339.0], [59.5, 44339.0], [59.6, 44339.0], [59.7, 46250.0], [59.8, 46250.0], [59.9, 46250.0], [60.0, 47243.0], [60.1, 47243.0], [60.2, 47243.0], [60.3, 48251.0], [60.4, 48251.0], [60.5, 48251.0], [60.6, 48647.0], [60.7, 48647.0], [60.8, 48647.0], [60.9, 49134.0], [61.0, 49134.0], [61.1, 49598.0], [61.2, 49598.0], [61.3, 49598.0], [61.4, 50199.0], [61.5, 50199.0], [61.6, 50199.0], [61.7, 51604.0], [61.8, 51604.0], [61.9, 51604.0], [62.0, 51875.0], [62.1, 51875.0], [62.2, 51875.0], [62.3, 52051.0], [62.4, 52051.0], [62.5, 52051.0], [62.6, 52115.0], [62.7, 52115.0], [62.8, 52115.0], [62.9, 54041.0], [63.0, 54041.0], [63.1, 54041.0], [63.2, 54293.0], [63.3, 54293.0], [63.4, 54293.0], [63.5, 54512.0], [63.6, 54512.0], [63.7, 56090.0], [63.8, 56090.0], [63.9, 56090.0], [64.0, 56511.0], [64.1, 56511.0], [64.2, 56511.0], [64.3, 56883.0], [64.4, 56883.0], [64.5, 56883.0], [64.6, 57254.0], [64.7, 57254.0], [64.8, 57254.0], [64.9, 57271.0], [65.0, 57271.0], [65.1, 57271.0], [65.2, 57579.0], [65.3, 57579.0], [65.4, 57579.0], [65.5, 57985.0], [65.6, 57985.0], [65.7, 57985.0], [65.8, 58050.0], [65.9, 58050.0], [66.0, 58110.0], [66.1, 58110.0], [66.2, 58110.0], [66.3, 58709.0], [66.4, 58709.0], [66.5, 58709.0], [66.6, 59603.0], [66.7, 59603.0], [66.8, 59603.0], [66.9, 59669.0], [67.0, 59669.0], [67.1, 59669.0], [67.2, 60419.0], [67.3, 60419.0], [67.4, 60419.0], [67.5, 61072.0], [67.6, 61072.0], [67.7, 61072.0], [67.8, 62089.0], [67.9, 62089.0], [68.0, 62089.0], [68.1, 62615.0], [68.2, 62615.0], [68.3, 63629.0], [68.4, 63629.0], [68.5, 63629.0], [68.6, 64620.0], [68.7, 64620.0], [68.8, 64620.0], [68.9, 64980.0], [69.0, 64980.0], [69.1, 64980.0], [69.2, 65540.0], [69.3, 65540.0], [69.4, 65540.0], [69.5, 65580.0], [69.6, 65580.0], [69.7, 65580.0], [69.8, 65828.0], [69.9, 65828.0], [70.0, 65828.0], [70.1, 65947.0], [70.2, 65947.0], [70.3, 65947.0], [70.4, 65968.0], [70.5, 65968.0], [70.6, 65968.0], [70.7, 66095.0], [70.8, 66095.0], [70.9, 66180.0], [71.0, 66180.0], [71.1, 66180.0], [71.2, 66266.0], [71.3, 66266.0], [71.4, 66266.0], [71.5, 66270.0], [71.6, 66270.0], [71.7, 66270.0], [71.8, 66291.0], [71.9, 66291.0], [72.0, 66291.0], [72.1, 66313.0], [72.2, 66313.0], [72.3, 66313.0], [72.4, 66359.0], [72.5, 66359.0], [72.6, 66359.0], [72.7, 66379.0], [72.8, 66379.0], [72.9, 66379.0], [73.0, 66404.0], [73.1, 66404.0], [73.2, 66414.0], [73.3, 66414.0], [73.4, 66414.0], [73.5, 66429.0], [73.6, 66429.0], [73.7, 66429.0], [73.8, 66562.0], [73.9, 66562.0], [74.0, 66562.0], [74.1, 66607.0], [74.2, 66607.0], [74.3, 66607.0], [74.4, 66626.0], [74.5, 66626.0], [74.6, 66626.0], [74.7, 66626.0], [74.8, 66626.0], [74.9, 66626.0], [75.0, 66782.0], [75.1, 66782.0], [75.2, 66782.0], [75.3, 66806.0], [75.4, 66806.0], [75.5, 66806.0], [75.6, 66825.0], [75.7, 66825.0], [75.8, 66835.0], [75.9, 66835.0], [76.0, 66835.0], [76.1, 66877.0], [76.2, 66877.0], [76.3, 66877.0], [76.4, 66881.0], [76.5, 66881.0], [76.6, 66881.0], [76.7, 66887.0], [76.8, 66887.0], [76.9, 66887.0], [77.0, 66909.0], [77.1, 66909.0], [77.2, 66909.0], [77.3, 66935.0], [77.4, 66935.0], [77.5, 66935.0], [77.6, 66940.0], [77.7, 66940.0], [77.8, 66940.0], [77.9, 66944.0], [78.0, 66944.0], [78.1, 67011.0], [78.2, 67011.0], [78.3, 67011.0], [78.4, 67046.0], [78.5, 67046.0], [78.6, 67046.0], [78.7, 67131.0], [78.8, 67131.0], [78.9, 67131.0], [79.0, 67240.0], [79.1, 67240.0], [79.2, 67240.0], [79.3, 67313.0], [79.4, 67313.0], [79.5, 67313.0], [79.6, 67326.0], [79.7, 67326.0], [79.8, 67326.0], [79.9, 67346.0], [80.0, 67346.0], [80.1, 67346.0], [80.2, 67375.0], [80.3, 67375.0], [80.4, 67375.0], [80.5, 67407.0], [80.6, 67407.0], [80.7, 67474.0], [80.8, 67474.0], [80.9, 67474.0], [81.0, 67581.0], [81.1, 67581.0], [81.2, 67581.0], [81.3, 67799.0], [81.4, 67799.0], [81.5, 67799.0], [81.6, 67861.0], [81.7, 67861.0], [81.8, 67861.0], [81.9, 67869.0], [82.0, 67869.0], [82.1, 67869.0], [82.2, 67920.0], [82.3, 67920.0], [82.4, 67920.0], [82.5, 68238.0], [82.6, 68238.0], [82.7, 68238.0], [82.8, 68473.0], [82.9, 68473.0], [83.0, 68958.0], [83.1, 68958.0], [83.2, 68958.0], [83.3, 69249.0], [83.4, 69249.0], [83.5, 69249.0], [83.6, 72384.0], [83.7, 72384.0], [83.8, 72384.0], [83.9, 74492.0], [84.0, 74492.0], [84.1, 74492.0], [84.2, 76454.0], [84.3, 76454.0], [84.4, 76454.0], [84.5, 78421.0], [84.6, 78421.0], [84.7, 78421.0], [84.8, 80875.0], [84.9, 80875.0], [85.0, 80875.0], [85.1, 83265.0], [85.2, 83265.0], [85.3, 83265.0], [85.4, 85481.0], [85.5, 85481.0], [85.6, 88633.0], [85.7, 88633.0], [85.8, 88633.0], [85.9, 90736.0], [86.0, 90736.0], [86.1, 90736.0], [86.2, 93192.0], [86.3, 93192.0], [86.4, 93192.0], [86.5, 95541.0], [86.6, 95541.0], [86.7, 95541.0], [86.8, 95951.0], [86.9, 95951.0], [87.0, 95951.0], [87.1, 99667.0], [87.2, 99667.0], [87.3, 99667.0], [87.4, 103098.0], [87.5, 103098.0], [87.6, 103098.0], [87.7, 104193.0], [87.8, 104193.0], [87.9, 105025.0], [88.0, 105025.0], [88.1, 105025.0], [88.2, 105699.0], [88.3, 105699.0], [88.4, 105699.0], [88.5, 106572.0], [88.6, 106572.0], [88.7, 106572.0], [88.8, 108406.0], [88.9, 108406.0], [89.0, 108406.0], [89.1, 110645.0], [89.2, 110645.0], [89.3, 110645.0], [89.4, 112496.0], [89.5, 112496.0], [89.6, 112496.0], [89.7, 114432.0], [89.8, 114432.0], [89.9, 114432.0], [90.0, 115142.0], [90.1, 115142.0], [90.2, 115142.0], [90.3, 116897.0], [90.4, 116897.0], [90.5, 119253.0], [90.6, 119253.0], [90.7, 119253.0], [90.8, 121556.0], [90.9, 121556.0], [91.0, 121556.0], [91.1, 124365.0], [91.2, 124365.0], [91.3, 124365.0], [91.4, 127187.0], [91.5, 127187.0], [91.6, 127187.0], [91.7, 130349.0], [91.8, 130349.0], [91.9, 130349.0], [92.0, 132193.0], [92.1, 132193.0], [92.2, 132193.0], [92.3, 133293.0], [92.4, 133293.0], [92.5, 133293.0], [92.6, 136370.0], [92.7, 136370.0], [92.8, 138998.0], [92.9, 138998.0], [93.0, 138998.0], [93.1, 140774.0], [93.2, 140774.0], [93.3, 140774.0], [93.4, 141851.0], [93.5, 141851.0], [93.6, 141851.0], [93.7, 142847.0], [93.8, 142847.0], [93.9, 142847.0], [94.0, 143247.0], [94.1, 143247.0], [94.2, 143247.0], [94.3, 145106.0], [94.4, 145106.0], [94.5, 145106.0], [94.6, 146442.0], [94.7, 146442.0], [94.8, 146442.0], [94.9, 148434.0], [95.0, 148434.0], [95.1, 148434.0], [95.2, 150438.0], [95.3, 150438.0], [95.4, 150803.0], [95.5, 150803.0], [95.6, 150803.0], [95.7, 151101.0], [95.8, 151101.0], [95.9, 151101.0], [96.0, 152315.0], [96.1, 152315.0], [96.2, 152315.0], [96.3, 152402.0], [96.4, 152402.0], [96.5, 152402.0], [96.6, 155168.0], [96.7, 155168.0], [96.8, 155168.0], [96.9, 159085.0], [97.0, 159085.0], [97.1, 159085.0], [97.2, 160745.0], [97.3, 160745.0], [97.4, 160745.0], [97.5, 178538.0], [97.6, 178538.0], [97.7, 181881.0], [97.8, 181881.0], [97.9, 181881.0], [98.0, 183151.0], [98.1, 183151.0], [98.2, 183151.0], [98.3, 187247.0], [98.4, 187247.0], [98.5, 187247.0], [98.6, 196283.0], [98.7, 196283.0], [98.8, 196283.0], [98.9, 209615.0], [99.0, 209615.0], [99.1, 209615.0], [99.2, 212176.0], [99.3, 212176.0], [99.4, 212176.0], [99.5, 214072.0], [99.6, 214072.0], [99.7, 214072.0], [99.8, 215428.0], [99.9, 215428.0], [100.0, 215428.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 32500.0, "maxY": 23.0, "series": [{"data": [[146400.0, 1.0], [143200.0, 1.0], [150400.0, 1.0], [187200.0, 1.0], [209600.0, 1.0], [132100.0, 1.0], [178500.0, 1.0], [212100.0, 1.0], [67900.0, 1.0], [66700.0, 1.0], [66300.0, 3.0], [65900.0, 2.0], [67500.0, 1.0], [67100.0, 1.0], [72300.0, 1.0], [90700.0, 1.0], [93100.0, 1.0], [95900.0, 1.0], [95500.0, 1.0], [115100.0, 1.0], [121500.0, 1.0], [124300.0, 1.0], [127100.0, 1.0], [130300.0, 1.0], [141800.0, 1.0], [181800.0, 1.0], [196200.0, 1.0], [215400.0, 1.0], [34700.0, 3.0], [34500.0, 2.0], [34300.0, 6.0], [136300.0, 1.0], [34100.0, 4.0], [33900.0, 6.0], [33700.0, 8.0], [33500.0, 15.0], [32900.0, 6.0], [33300.0, 18.0], [33100.0, 17.0], [35500.0, 1.0], [34900.0, 1.0], [145100.0, 1.0], [37100.0, 1.0], [152300.0, 1.0], [41700.0, 1.0], [44300.0, 1.0], [43700.0, 1.0], [49100.0, 1.0], [49500.0, 1.0], [50100.0, 1.0], [52100.0, 1.0], [54500.0, 1.0], [56500.0, 1.0], [58700.0, 1.0], [58100.0, 1.0], [57500.0, 1.0], [57900.0, 1.0], [65500.0, 2.0], [64900.0, 1.0], [65800.0, 1.0], [67400.0, 2.0], [67800.0, 2.0], [68200.0, 1.0], [66600.0, 3.0], [66200.0, 3.0], [67000.0, 2.0], [85400.0, 1.0], [88600.0, 1.0], [103000.0, 1.0], [105000.0, 1.0], [110600.0, 1.0], [133200.0, 1.0], [142800.0, 1.0], [148400.0, 1.0], [150800.0, 1.0], [152400.0, 1.0], [214000.0, 1.0], [138900.0, 1.0], [66100.0, 1.0], [66500.0, 1.0], [67300.0, 4.0], [67700.0, 1.0], [68900.0, 1.0], [66900.0, 4.0], [104100.0, 1.0], [106500.0, 1.0], [159000.0, 1.0], [32700.0, 1.0], [32500.0, 1.0], [32600.0, 1.0], [34400.0, 7.0], [34600.0, 9.0], [34800.0, 1.0], [34000.0, 5.0], [33800.0, 11.0], [33400.0, 10.0], [33000.0, 12.0], [33600.0, 12.0], [32800.0, 4.0], [33200.0, 23.0], [34200.0, 8.0], [35400.0, 1.0], [35200.0, 2.0], [140700.0, 1.0], [36400.0, 1.0], [38000.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [151100.0, 1.0], [155100.0, 1.0], [40000.0, 1.0], [160700.0, 1.0], [40200.0, 1.0], [41000.0, 1.0], [42200.0, 1.0], [46200.0, 1.0], [183100.0, 1.0], [47200.0, 1.0], [48200.0, 1.0], [48600.0, 1.0], [51600.0, 1.0], [52000.0, 1.0], [51800.0, 1.0], [54200.0, 1.0], [54000.0, 1.0], [56800.0, 1.0], [56000.0, 1.0], [57200.0, 2.0], [58000.0, 1.0], [59600.0, 2.0], [61000.0, 1.0], [60400.0, 1.0], [62600.0, 1.0], [62000.0, 1.0], [64600.0, 1.0], [63600.0, 1.0], [66000.0, 1.0], [68400.0, 1.0], [66800.0, 6.0], [69200.0, 1.0], [66400.0, 3.0], [67200.0, 1.0], [74400.0, 1.0], [76400.0, 1.0], [78400.0, 1.0], [80800.0, 1.0], [83200.0, 1.0], [99600.0, 1.0], [105600.0, 1.0], [108400.0, 1.0], [112400.0, 1.0], [114400.0, 1.0], [116800.0, 1.0], [119200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 215400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 347.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 347.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 347.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.60264818E12, "maxY": 10.0, "series": [{"data": [[1.60264962E12, 10.0], [1.60264992E12, 10.0], [1.60264902E12, 10.0], [1.60264932E12, 10.0], [1.60264842E12, 10.0], [1.60264872E12, 10.0], [1.60264974E12, 10.0], [1.60265004E12, 9.9], [1.60264914E12, 10.0], [1.60264944E12, 10.0], [1.60264854E12, 10.0], [1.60264884E12, 10.0], [1.60265016E12, 2.0], [1.60264824E12, 10.0], [1.60264986E12, 10.0], [1.60264926E12, 10.0], [1.60264956E12, 10.0], [1.60264866E12, 10.0], [1.60264896E12, 10.0], [1.60264836E12, 10.0], [1.60264998E12, 10.0], [1.60264938E12, 10.0], [1.60264968E12, 10.0], [1.60264878E12, 10.0], [1.60264908E12, 10.0], [1.60264818E12, 10.0], [1.60264848E12, 10.0], [1.6026501E12, 5.5], [1.6026495E12, 10.0], [1.6026498E12, 10.0], [1.6026489E12, 10.0], [1.6026492E12, 10.0], [1.6026483E12, 10.0], [1.6026486E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265016E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32593.0, "minX": 2.0, "maxY": 187247.0, "series": [{"data": [[8.0, 32986.0], [4.0, 115142.0], [2.0, 169159.5], [9.0, 49134.0], [10.0, 55957.89053254436], [5.0, 32632.0], [6.0, 32593.0], [3.0, 187247.0], [7.0, 33221.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.873198847262247, 56873.31700288184]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.5, "minX": 1.60264818E12, "maxY": 106.65, "series": [{"data": [[1.60264962E12, 35.75], [1.60264992E12, 30.25], [1.60264902E12, 30.25], [1.60264932E12, 30.25], [1.60264842E12, 30.25], [1.60264872E12, 33.0], [1.60264974E12, 19.25], [1.60265004E12, 27.5], [1.60264914E12, 33.0], [1.60264944E12, 35.75], [1.60264854E12, 33.0], [1.60264884E12, 30.25], [1.60265016E12, 5.5], [1.60264824E12, 30.25], [1.60264986E12, 33.0], [1.60264926E12, 33.0], [1.60264956E12, 27.5], [1.60264866E12, 30.25], [1.60264896E12, 33.0], [1.60264836E12, 19.25], [1.60264998E12, 27.5], [1.60264938E12, 30.25], [1.60264968E12, 33.0], [1.60264878E12, 33.0], [1.60264908E12, 33.0], [1.60264818E12, 33.0], [1.60264848E12, 33.0], [1.6026501E12, 16.5], [1.6026495E12, 16.5], [1.6026498E12, 30.25], [1.6026489E12, 19.25], [1.6026492E12, 16.5], [1.6026483E12, 33.0], [1.6026486E12, 19.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60264962E12, 106.65], [1.60264992E12, 90.05], [1.60264902E12, 90.46666666666667], [1.60264932E12, 89.95], [1.60264842E12, 89.75], [1.60264872E12, 98.5], [1.60264974E12, 57.68333333333333], [1.60265004E12, 81.75], [1.60264914E12, 97.98333333333333], [1.60264944E12, 106.63333333333334], [1.60264854E12, 98.3], [1.60264884E12, 90.38333333333334], [1.60265016E12, 16.366666666666667], [1.60264824E12, 90.01666666666667], [1.60264986E12, 98.71666666666667], [1.60264926E12, 98.35], [1.60264956E12, 81.8], [1.60264866E12, 89.78333333333333], [1.60264896E12, 97.93333333333334], [1.60264836E12, 57.233333333333334], [1.60264998E12, 81.9], [1.60264938E12, 90.08333333333333], [1.60264968E12, 98.16666666666667], [1.60264878E12, 98.53333333333333], [1.60264908E12, 98.25], [1.60264818E12, 97.95], [1.60264848E12, 98.4], [1.6026501E12, 48.833333333333336], [1.6026495E12, 49.1], [1.6026498E12, 90.18333333333334], [1.6026489E12, 57.516666666666666], [1.6026492E12, 49.266666666666666], [1.6026483E12, 98.03333333333333], [1.6026486E12, 57.06666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265016E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 34985.0, "minX": 1.60264818E12, "maxY": 169159.5, "series": [{"data": [[1.60264962E12, 78511.61538461539], [1.60264992E12, 51085.0], [1.60264902E12, 50548.0], [1.60264932E12, 48667.72727272727], [1.60264842E12, 53591.09090909091], [1.60264872E12, 56706.833333333336], [1.60264974E12, 40578.857142857145], [1.60265004E12, 76471.5], [1.60264914E12, 56224.33333333333], [1.60264944E12, 66929.00000000001], [1.60264854E12, 55985.833333333336], [1.60264884E12, 50820.45454545454], [1.60265016E12, 169159.5], [1.60264824E12, 55300.09090909091], [1.60264986E12, 50859.416666666664], [1.60264926E12, 56756.833333333336], [1.60264956E12, 34985.0], [1.60264866E12, 59406.63636363637], [1.60264896E12, 56420.666666666664], [1.60264836E12, 59923.71428571428], [1.60264998E12, 47296.799999999996], [1.60264938E12, 46159.090909090904], [1.60264968E12, 57038.25], [1.60264878E12, 56265.83333333333], [1.60264908E12, 56578.41666666667], [1.60264818E12, 46232.416666666664], [1.60264848E12, 55987.91666666667], [1.6026501E12, 72303.5], [1.6026495E12, 57120.333333333336], [1.6026498E12, 69374.09090909091], [1.6026489E12, 64636.142857142855], [1.6026492E12, 56609.666666666664], [1.6026483E12, 56305.5], [1.6026486E12, 53638.28571428572]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265016E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 34984.7, "minX": 1.60264818E12, "maxY": 169159.5, "series": [{"data": [[1.60264962E12, 78511.3076923077], [1.60264992E12, 51084.909090909096], [1.60264902E12, 50548.0], [1.60264932E12, 48667.36363636364], [1.60264842E12, 53591.0], [1.60264872E12, 56706.75], [1.60264974E12, 40578.57142857143], [1.60265004E12, 76471.3], [1.60264914E12, 56224.33333333333], [1.60264944E12, 66928.6923076923], [1.60264854E12, 55985.58333333333], [1.60264884E12, 50820.27272727272], [1.60265016E12, 169159.5], [1.60264824E12, 55299.818181818184], [1.60264986E12, 50859.25000000001], [1.60264926E12, 56756.66666666667], [1.60264956E12, 34984.7], [1.60264866E12, 59406.27272727273], [1.60264896E12, 56420.49999999999], [1.60264836E12, 59923.28571428572], [1.60264998E12, 47296.600000000006], [1.60264938E12, 46158.90909090909], [1.60264968E12, 57038.083333333336], [1.60264878E12, 56265.583333333336], [1.60264908E12, 56578.25], [1.60264818E12, 46231.83333333333], [1.60264848E12, 55987.66666666667], [1.6026501E12, 72303.33333333333], [1.6026495E12, 57120.166666666664], [1.6026498E12, 69373.9090909091], [1.6026489E12, 64635.857142857145], [1.6026492E12, 56609.5], [1.6026483E12, 56305.166666666664], [1.6026486E12, 53638.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265016E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4545454545454546, "minX": 1.60264818E12, "maxY": 7.750000000000002, "series": [{"data": [[1.60264962E12, 0.5384615384615384], [1.60264992E12, 0.9090909090909091], [1.60264902E12, 0.8181818181818181], [1.60264932E12, 0.9090909090909091], [1.60264842E12, 1.090909090909091], [1.60264872E12, 0.9166666666666666], [1.60264974E12, 1.0], [1.60265004E12, 0.8], [1.60264914E12, 1.0000000000000002], [1.60264944E12, 0.8461538461538461], [1.60264854E12, 1.4166666666666667], [1.60264884E12, 1.1818181818181819], [1.60265016E12, 0.5], [1.60264824E12, 1.5454545454545456], [1.60264986E12, 0.7499999999999999], [1.60264926E12, 0.75], [1.60264956E12, 0.8], [1.60264866E12, 0.9999999999999999], [1.60264896E12, 0.5833333333333334], [1.60264836E12, 1.1428571428571428], [1.60264998E12, 0.8], [1.60264938E12, 0.8181818181818182], [1.60264968E12, 0.9999999999999999], [1.60264878E12, 0.9166666666666666], [1.60264908E12, 1.0], [1.60264818E12, 7.750000000000002], [1.60264848E12, 0.9166666666666666], [1.6026501E12, 1.0], [1.6026495E12, 1.1666666666666665], [1.6026498E12, 0.4545454545454546], [1.6026489E12, 0.8571428571428572], [1.6026492E12, 0.6666666666666666], [1.6026483E12, 1.3333333333333333], [1.6026486E12, 1.1428571428571428]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265016E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 33825.5, "minX": 1.0, "maxY": 59636.0, "series": [{"data": [[1.0, 59636.0], [4.0, 33825.5], [2.0, 33939.5], [5.0, 34629.0], [3.0, 34318.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 33825.5, "minX": 1.0, "maxY": 59636.0, "series": [{"data": [[1.0, 59636.0], [4.0, 33825.5], [2.0, 33939.5], [5.0, 34628.0], [3.0, 34318.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60264812E12, "maxY": 0.21666666666666667, "series": [{"data": [[1.60264962E12, 0.21666666666666667], [1.60264992E12, 0.18333333333333332], [1.60264902E12, 0.18333333333333332], [1.60264932E12, 0.18333333333333332], [1.60264842E12, 0.18333333333333332], [1.60264872E12, 0.2], [1.60264974E12, 0.11666666666666667], [1.60265004E12, 0.13333333333333333], [1.60264812E12, 0.16666666666666666], [1.60264914E12, 0.2], [1.60264944E12, 0.21666666666666667], [1.60264854E12, 0.2], [1.60264884E12, 0.18333333333333332], [1.60264824E12, 0.18333333333333332], [1.60264986E12, 0.2], [1.60264926E12, 0.2], [1.60264956E12, 0.16666666666666666], [1.60264866E12, 0.18333333333333332], [1.60264896E12, 0.2], [1.60264836E12, 0.11666666666666667], [1.60264998E12, 0.16666666666666666], [1.60264938E12, 0.18333333333333332], [1.60264968E12, 0.2], [1.60264878E12, 0.2], [1.60264908E12, 0.2], [1.60264818E12, 0.2], [1.60264848E12, 0.2], [1.6026495E12, 0.1], [1.6026498E12, 0.18333333333333332], [1.6026489E12, 0.11666666666666667], [1.6026492E12, 0.1], [1.6026483E12, 0.2], [1.6026486E12, 0.11666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265004E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60264818E12, "maxY": 0.21666666666666667, "series": [{"data": [[1.60264962E12, 0.21666666666666667], [1.60264992E12, 0.18333333333333332], [1.60264902E12, 0.18333333333333332], [1.60264932E12, 0.18333333333333332], [1.60264842E12, 0.18333333333333332], [1.60264872E12, 0.2], [1.60264974E12, 0.11666666666666667], [1.60265004E12, 0.16666666666666666], [1.60264914E12, 0.2], [1.60264944E12, 0.21666666666666667], [1.60264854E12, 0.2], [1.60264884E12, 0.18333333333333332], [1.60265016E12, 0.03333333333333333], [1.60264824E12, 0.18333333333333332], [1.60264986E12, 0.2], [1.60264926E12, 0.2], [1.60264956E12, 0.16666666666666666], [1.60264866E12, 0.18333333333333332], [1.60264896E12, 0.2], [1.60264836E12, 0.11666666666666667], [1.60264998E12, 0.16666666666666666], [1.60264938E12, 0.18333333333333332], [1.60264968E12, 0.2], [1.60264878E12, 0.2], [1.60264908E12, 0.2], [1.60264818E12, 0.2], [1.60264848E12, 0.2], [1.6026501E12, 0.1], [1.6026495E12, 0.1], [1.6026498E12, 0.18333333333333332], [1.6026489E12, 0.11666666666666667], [1.6026492E12, 0.1], [1.6026483E12, 0.2], [1.6026486E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60265016E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60264818E12, "maxY": 0.21666666666666667, "series": [{"data": [[1.60264962E12, 0.21666666666666667], [1.60264992E12, 0.18333333333333332], [1.60264902E12, 0.18333333333333332], [1.60264932E12, 0.18333333333333332], [1.60264842E12, 0.18333333333333332], [1.60264872E12, 0.2], [1.60264974E12, 0.11666666666666667], [1.60265004E12, 0.16666666666666666], [1.60264914E12, 0.2], [1.60264944E12, 0.21666666666666667], [1.60264854E12, 0.2], [1.60264884E12, 0.18333333333333332], [1.60265016E12, 0.03333333333333333], [1.60264824E12, 0.18333333333333332], [1.60264986E12, 0.2], [1.60264926E12, 0.2], [1.60264956E12, 0.16666666666666666], [1.60264866E12, 0.18333333333333332], [1.60264896E12, 0.2], [1.60264836E12, 0.11666666666666667], [1.60264998E12, 0.16666666666666666], [1.60264938E12, 0.18333333333333332], [1.60264968E12, 0.2], [1.60264878E12, 0.2], [1.60264908E12, 0.2], [1.60264818E12, 0.2], [1.60264848E12, 0.2], [1.6026501E12, 0.1], [1.6026495E12, 0.1], [1.6026498E12, 0.18333333333333332], [1.6026489E12, 0.11666666666666667], [1.6026492E12, 0.1], [1.6026483E12, 0.2], [1.6026486E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265016E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60264818E12, "maxY": 0.21666666666666667, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60264962E12, 0.21666666666666667], [1.60264992E12, 0.18333333333333332], [1.60264902E12, 0.18333333333333332], [1.60264932E12, 0.18333333333333332], [1.60264842E12, 0.18333333333333332], [1.60264872E12, 0.2], [1.60264974E12, 0.11666666666666667], [1.60265004E12, 0.16666666666666666], [1.60264914E12, 0.2], [1.60264944E12, 0.21666666666666667], [1.60264854E12, 0.2], [1.60264884E12, 0.18333333333333332], [1.60265016E12, 0.03333333333333333], [1.60264824E12, 0.18333333333333332], [1.60264986E12, 0.2], [1.60264926E12, 0.2], [1.60264956E12, 0.16666666666666666], [1.60264866E12, 0.18333333333333332], [1.60264896E12, 0.2], [1.60264836E12, 0.11666666666666667], [1.60264998E12, 0.16666666666666666], [1.60264938E12, 0.18333333333333332], [1.60264968E12, 0.2], [1.60264878E12, 0.2], [1.60264908E12, 0.2], [1.60264818E12, 0.2], [1.60264848E12, 0.2], [1.6026501E12, 0.1], [1.6026495E12, 0.1], [1.6026498E12, 0.18333333333333332], [1.6026489E12, 0.11666666666666667], [1.6026492E12, 0.1], [1.6026483E12, 0.2], [1.6026486E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60265016E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

