/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2191.0, "minX": 0.0, "maxY": 23253.0, "series": [{"data": [[0.0, 2191.0], [0.1, 2259.0], [0.2, 2277.0], [0.3, 2290.0], [0.4, 2300.0], [0.5, 2313.0], [0.6, 2327.0], [0.7, 2332.0], [0.8, 2334.0], [0.9, 2342.0], [1.0, 2351.0], [1.1, 2359.0], [1.2, 2362.0], [1.3, 2365.0], [1.4, 2374.0], [1.5, 2384.0], [1.6, 2389.0], [1.7, 2392.0], [1.8, 2396.0], [1.9, 2401.0], [2.0, 2406.0], [2.1, 2413.0], [2.2, 2421.0], [2.3, 2431.0], [2.4, 2435.0], [2.5, 2444.0], [2.6, 2450.0], [2.7, 2459.0], [2.8, 2466.0], [2.9, 2471.0], [3.0, 2475.0], [3.1, 2479.0], [3.2, 2483.0], [3.3, 2489.0], [3.4, 2496.0], [3.5, 2502.0], [3.6, 2506.0], [3.7, 2507.0], [3.8, 2511.0], [3.9, 2520.0], [4.0, 2524.0], [4.1, 2541.0], [4.2, 2548.0], [4.3, 2554.0], [4.4, 2560.0], [4.5, 2561.0], [4.6, 2569.0], [4.7, 2578.0], [4.8, 2586.0], [4.9, 2590.0], [5.0, 2594.0], [5.1, 2604.0], [5.2, 2610.0], [5.3, 2633.0], [5.4, 2651.0], [5.5, 2664.0], [5.6, 2672.0], [5.7, 2678.0], [5.8, 2681.0], [5.9, 2686.0], [6.0, 2694.0], [6.1, 2706.0], [6.2, 2728.0], [6.3, 2741.0], [6.4, 2747.0], [6.5, 2755.0], [6.6, 2762.0], [6.7, 2774.0], [6.8, 2787.0], [6.9, 2808.0], [7.0, 2813.0], [7.1, 2826.0], [7.2, 2833.0], [7.3, 2849.0], [7.4, 2859.0], [7.5, 2880.0], [7.6, 2896.0], [7.7, 2900.0], [7.8, 2909.0], [7.9, 2924.0], [8.0, 2933.0], [8.1, 2952.0], [8.2, 2961.0], [8.3, 2983.0], [8.4, 2988.0], [8.5, 3011.0], [8.6, 3026.0], [8.7, 3037.0], [8.8, 3047.0], [8.9, 3058.0], [9.0, 3075.0], [9.1, 3079.0], [9.2, 3092.0], [9.3, 3100.0], [9.4, 3107.0], [9.5, 3117.0], [9.6, 3123.0], [9.7, 3135.0], [9.8, 3150.0], [9.9, 3163.0], [10.0, 3179.0], [10.1, 3187.0], [10.2, 3200.0], [10.3, 3223.0], [10.4, 3233.0], [10.5, 3244.0], [10.6, 3260.0], [10.7, 3266.0], [10.8, 3271.0], [10.9, 3280.0], [11.0, 3294.0], [11.1, 3304.0], [11.2, 3316.0], [11.3, 3324.0], [11.4, 3334.0], [11.5, 3346.0], [11.6, 3355.0], [11.7, 3359.0], [11.8, 3365.0], [11.9, 3367.0], [12.0, 3373.0], [12.1, 3377.0], [12.2, 3380.0], [12.3, 3387.0], [12.4, 3392.0], [12.5, 3395.0], [12.6, 3402.0], [12.7, 3405.0], [12.8, 3421.0], [12.9, 3426.0], [13.0, 3433.0], [13.1, 3449.0], [13.2, 3459.0], [13.3, 3471.0], [13.4, 3482.0], [13.5, 3488.0], [13.6, 3498.0], [13.7, 3507.0], [13.8, 3513.0], [13.9, 3528.0], [14.0, 3545.0], [14.1, 3568.0], [14.2, 3580.0], [14.3, 3596.0], [14.4, 3604.0], [14.5, 3623.0], [14.6, 3640.0], [14.7, 3650.0], [14.8, 3655.0], [14.9, 3662.0], [15.0, 3668.0], [15.1, 3674.0], [15.2, 3684.0], [15.3, 3692.0], [15.4, 3698.0], [15.5, 3702.0], [15.6, 3707.0], [15.7, 3730.0], [15.8, 3747.0], [15.9, 3754.0], [16.0, 3764.0], [16.1, 3788.0], [16.2, 3793.0], [16.3, 3799.0], [16.4, 3816.0], [16.5, 3823.0], [16.6, 3835.0], [16.7, 3853.0], [16.8, 3865.0], [16.9, 3882.0], [17.0, 3891.0], [17.1, 3894.0], [17.2, 3907.0], [17.3, 3932.0], [17.4, 3944.0], [17.5, 3954.0], [17.6, 3967.0], [17.7, 3981.0], [17.8, 3997.0], [17.9, 4008.0], [18.0, 4019.0], [18.1, 4028.0], [18.2, 4040.0], [18.3, 4053.0], [18.4, 4059.0], [18.5, 4063.0], [18.6, 4072.0], [18.7, 4078.0], [18.8, 4086.0], [18.9, 4091.0], [19.0, 4096.0], [19.1, 4104.0], [19.2, 4110.0], [19.3, 4118.0], [19.4, 4126.0], [19.5, 4136.0], [19.6, 4141.0], [19.7, 4147.0], [19.8, 4151.0], [19.9, 4158.0], [20.0, 4166.0], [20.1, 4175.0], [20.2, 4179.0], [20.3, 4186.0], [20.4, 4194.0], [20.5, 4207.0], [20.6, 4211.0], [20.7, 4217.0], [20.8, 4224.0], [20.9, 4230.0], [21.0, 4240.0], [21.1, 4245.0], [21.2, 4256.0], [21.3, 4265.0], [21.4, 4270.0], [21.5, 4278.0], [21.6, 4285.0], [21.7, 4296.0], [21.8, 4309.0], [21.9, 4321.0], [22.0, 4328.0], [22.1, 4335.0], [22.2, 4340.0], [22.3, 4345.0], [22.4, 4353.0], [22.5, 4360.0], [22.6, 4362.0], [22.7, 4369.0], [22.8, 4378.0], [22.9, 4390.0], [23.0, 4396.0], [23.1, 4402.0], [23.2, 4415.0], [23.3, 4425.0], [23.4, 4432.0], [23.5, 4449.0], [23.6, 4463.0], [23.7, 4475.0], [23.8, 4479.0], [23.9, 4484.0], [24.0, 4494.0], [24.1, 4500.0], [24.2, 4505.0], [24.3, 4511.0], [24.4, 4515.0], [24.5, 4522.0], [24.6, 4530.0], [24.7, 4540.0], [24.8, 4551.0], [24.9, 4557.0], [25.0, 4566.0], [25.1, 4572.0], [25.2, 4577.0], [25.3, 4583.0], [25.4, 4604.0], [25.5, 4609.0], [25.6, 4613.0], [25.7, 4619.0], [25.8, 4624.0], [25.9, 4626.0], [26.0, 4634.0], [26.1, 4642.0], [26.2, 4644.0], [26.3, 4650.0], [26.4, 4664.0], [26.5, 4674.0], [26.6, 4681.0], [26.7, 4685.0], [26.8, 4700.0], [26.9, 4711.0], [27.0, 4713.0], [27.1, 4717.0], [27.2, 4722.0], [27.3, 4732.0], [27.4, 4742.0], [27.5, 4753.0], [27.6, 4758.0], [27.7, 4760.0], [27.8, 4763.0], [27.9, 4771.0], [28.0, 4775.0], [28.1, 4780.0], [28.2, 4791.0], [28.3, 4793.0], [28.4, 4801.0], [28.5, 4805.0], [28.6, 4810.0], [28.7, 4813.0], [28.8, 4819.0], [28.9, 4825.0], [29.0, 4830.0], [29.1, 4842.0], [29.2, 4848.0], [29.3, 4856.0], [29.4, 4859.0], [29.5, 4865.0], [29.6, 4871.0], [29.7, 4880.0], [29.8, 4887.0], [29.9, 4890.0], [30.0, 4894.0], [30.1, 4897.0], [30.2, 4901.0], [30.3, 4903.0], [30.4, 4907.0], [30.5, 4912.0], [30.6, 4920.0], [30.7, 4927.0], [30.8, 4932.0], [30.9, 4936.0], [31.0, 4943.0], [31.1, 4947.0], [31.2, 4951.0], [31.3, 4955.0], [31.4, 4960.0], [31.5, 4966.0], [31.6, 4971.0], [31.7, 4975.0], [31.8, 4980.0], [31.9, 4982.0], [32.0, 4986.0], [32.1, 4989.0], [32.2, 4994.0], [32.3, 5000.0], [32.4, 5002.0], [32.5, 5008.0], [32.6, 5009.0], [32.7, 5014.0], [32.8, 5022.0], [32.9, 5033.0], [33.0, 5042.0], [33.1, 5046.0], [33.2, 5051.0], [33.3, 5064.0], [33.4, 5067.0], [33.5, 5072.0], [33.6, 5076.0], [33.7, 5082.0], [33.8, 5088.0], [33.9, 5092.0], [34.0, 5096.0], [34.1, 5103.0], [34.2, 5113.0], [34.3, 5123.0], [34.4, 5128.0], [34.5, 5131.0], [34.6, 5137.0], [34.7, 5141.0], [34.8, 5146.0], [34.9, 5155.0], [35.0, 5158.0], [35.1, 5167.0], [35.2, 5171.0], [35.3, 5176.0], [35.4, 5180.0], [35.5, 5186.0], [35.6, 5190.0], [35.7, 5200.0], [35.8, 5205.0], [35.9, 5212.0], [36.0, 5216.0], [36.1, 5221.0], [36.2, 5224.0], [36.3, 5226.0], [36.4, 5227.0], [36.5, 5234.0], [36.6, 5240.0], [36.7, 5247.0], [36.8, 5251.0], [36.9, 5255.0], [37.0, 5262.0], [37.1, 5266.0], [37.2, 5274.0], [37.3, 5277.0], [37.4, 5284.0], [37.5, 5287.0], [37.6, 5293.0], [37.7, 5298.0], [37.8, 5307.0], [37.9, 5309.0], [38.0, 5312.0], [38.1, 5315.0], [38.2, 5320.0], [38.3, 5324.0], [38.4, 5329.0], [38.5, 5340.0], [38.6, 5351.0], [38.7, 5355.0], [38.8, 5360.0], [38.9, 5364.0], [39.0, 5367.0], [39.1, 5373.0], [39.2, 5377.0], [39.3, 5382.0], [39.4, 5385.0], [39.5, 5387.0], [39.6, 5394.0], [39.7, 5400.0], [39.8, 5403.0], [39.9, 5405.0], [40.0, 5408.0], [40.1, 5414.0], [40.2, 5422.0], [40.3, 5433.0], [40.4, 5438.0], [40.5, 5450.0], [40.6, 5455.0], [40.7, 5460.0], [40.8, 5463.0], [40.9, 5464.0], [41.0, 5469.0], [41.1, 5473.0], [41.2, 5477.0], [41.3, 5480.0], [41.4, 5482.0], [41.5, 5484.0], [41.6, 5491.0], [41.7, 5494.0], [41.8, 5497.0], [41.9, 5499.0], [42.0, 5505.0], [42.1, 5508.0], [42.2, 5512.0], [42.3, 5517.0], [42.4, 5522.0], [42.5, 5526.0], [42.6, 5529.0], [42.7, 5534.0], [42.8, 5538.0], [42.9, 5543.0], [43.0, 5552.0], [43.1, 5557.0], [43.2, 5564.0], [43.3, 5571.0], [43.4, 5574.0], [43.5, 5577.0], [43.6, 5588.0], [43.7, 5593.0], [43.8, 5595.0], [43.9, 5598.0], [44.0, 5603.0], [44.1, 5609.0], [44.2, 5613.0], [44.3, 5619.0], [44.4, 5622.0], [44.5, 5630.0], [44.6, 5632.0], [44.7, 5635.0], [44.8, 5639.0], [44.9, 5642.0], [45.0, 5647.0], [45.1, 5649.0], [45.2, 5651.0], [45.3, 5657.0], [45.4, 5659.0], [45.5, 5668.0], [45.6, 5672.0], [45.7, 5675.0], [45.8, 5679.0], [45.9, 5681.0], [46.0, 5683.0], [46.1, 5685.0], [46.2, 5690.0], [46.3, 5692.0], [46.4, 5698.0], [46.5, 5702.0], [46.6, 5709.0], [46.7, 5712.0], [46.8, 5718.0], [46.9, 5725.0], [47.0, 5730.0], [47.1, 5732.0], [47.2, 5735.0], [47.3, 5738.0], [47.4, 5744.0], [47.5, 5746.0], [47.6, 5748.0], [47.7, 5752.0], [47.8, 5757.0], [47.9, 5763.0], [48.0, 5768.0], [48.1, 5776.0], [48.2, 5778.0], [48.3, 5785.0], [48.4, 5789.0], [48.5, 5792.0], [48.6, 5796.0], [48.7, 5799.0], [48.8, 5802.0], [48.9, 5804.0], [49.0, 5812.0], [49.1, 5813.0], [49.2, 5815.0], [49.3, 5820.0], [49.4, 5824.0], [49.5, 5828.0], [49.6, 5834.0], [49.7, 5836.0], [49.8, 5840.0], [49.9, 5845.0], [50.0, 5847.0], [50.1, 5853.0], [50.2, 5854.0], [50.3, 5859.0], [50.4, 5866.0], [50.5, 5869.0], [50.6, 5876.0], [50.7, 5880.0], [50.8, 5882.0], [50.9, 5885.0], [51.0, 5890.0], [51.1, 5893.0], [51.2, 5895.0], [51.3, 5897.0], [51.4, 5904.0], [51.5, 5909.0], [51.6, 5914.0], [51.7, 5919.0], [51.8, 5924.0], [51.9, 5927.0], [52.0, 5931.0], [52.1, 5933.0], [52.2, 5935.0], [52.3, 5941.0], [52.4, 5944.0], [52.5, 5950.0], [52.6, 5957.0], [52.7, 5966.0], [52.8, 5969.0], [52.9, 5972.0], [53.0, 5978.0], [53.1, 5981.0], [53.2, 5983.0], [53.3, 5988.0], [53.4, 5990.0], [53.5, 5996.0], [53.6, 6002.0], [53.7, 6005.0], [53.8, 6010.0], [53.9, 6012.0], [54.0, 6016.0], [54.1, 6019.0], [54.2, 6025.0], [54.3, 6031.0], [54.4, 6032.0], [54.5, 6035.0], [54.6, 6039.0], [54.7, 6042.0], [54.8, 6050.0], [54.9, 6052.0], [55.0, 6055.0], [55.1, 6058.0], [55.2, 6067.0], [55.3, 6070.0], [55.4, 6072.0], [55.5, 6080.0], [55.6, 6081.0], [55.7, 6085.0], [55.8, 6091.0], [55.9, 6097.0], [56.0, 6102.0], [56.1, 6106.0], [56.2, 6109.0], [56.3, 6116.0], [56.4, 6123.0], [56.5, 6127.0], [56.6, 6129.0], [56.7, 6137.0], [56.8, 6141.0], [56.9, 6144.0], [57.0, 6148.0], [57.1, 6151.0], [57.2, 6154.0], [57.3, 6162.0], [57.4, 6168.0], [57.5, 6179.0], [57.6, 6183.0], [57.7, 6189.0], [57.8, 6194.0], [57.9, 6202.0], [58.0, 6208.0], [58.1, 6217.0], [58.2, 6218.0], [58.3, 6226.0], [58.4, 6229.0], [58.5, 6235.0], [58.6, 6241.0], [58.7, 6249.0], [58.8, 6257.0], [58.9, 6266.0], [59.0, 6269.0], [59.1, 6273.0], [59.2, 6276.0], [59.3, 6279.0], [59.4, 6283.0], [59.5, 6289.0], [59.6, 6293.0], [59.7, 6297.0], [59.8, 6302.0], [59.9, 6307.0], [60.0, 6311.0], [60.1, 6315.0], [60.2, 6319.0], [60.3, 6323.0], [60.4, 6328.0], [60.5, 6331.0], [60.6, 6337.0], [60.7, 6342.0], [60.8, 6351.0], [60.9, 6356.0], [61.0, 6362.0], [61.1, 6369.0], [61.2, 6373.0], [61.3, 6377.0], [61.4, 6381.0], [61.5, 6387.0], [61.6, 6393.0], [61.7, 6397.0], [61.8, 6401.0], [61.9, 6405.0], [62.0, 6408.0], [62.1, 6412.0], [62.2, 6420.0], [62.3, 6425.0], [62.4, 6430.0], [62.5, 6437.0], [62.6, 6439.0], [62.7, 6444.0], [62.8, 6445.0], [62.9, 6450.0], [63.0, 6460.0], [63.1, 6464.0], [63.2, 6469.0], [63.3, 6473.0], [63.4, 6479.0], [63.5, 6486.0], [63.6, 6491.0], [63.7, 6494.0], [63.8, 6503.0], [63.9, 6505.0], [64.0, 6508.0], [64.1, 6514.0], [64.2, 6518.0], [64.3, 6524.0], [64.4, 6532.0], [64.5, 6539.0], [64.6, 6544.0], [64.7, 6547.0], [64.8, 6550.0], [64.9, 6554.0], [65.0, 6556.0], [65.1, 6559.0], [65.2, 6565.0], [65.3, 6571.0], [65.4, 6575.0], [65.5, 6580.0], [65.6, 6587.0], [65.7, 6588.0], [65.8, 6592.0], [65.9, 6602.0], [66.0, 6616.0], [66.1, 6622.0], [66.2, 6629.0], [66.3, 6633.0], [66.4, 6639.0], [66.5, 6644.0], [66.6, 6647.0], [66.7, 6652.0], [66.8, 6656.0], [66.9, 6662.0], [67.0, 6675.0], [67.1, 6680.0], [67.2, 6687.0], [67.3, 6691.0], [67.4, 6696.0], [67.5, 6703.0], [67.6, 6707.0], [67.7, 6714.0], [67.8, 6723.0], [67.9, 6730.0], [68.0, 6737.0], [68.1, 6744.0], [68.2, 6753.0], [68.3, 6755.0], [68.4, 6761.0], [68.5, 6767.0], [68.6, 6772.0], [68.7, 6776.0], [68.8, 6782.0], [68.9, 6787.0], [69.0, 6790.0], [69.1, 6796.0], [69.2, 6800.0], [69.3, 6806.0], [69.4, 6811.0], [69.5, 6815.0], [69.6, 6822.0], [69.7, 6828.0], [69.8, 6838.0], [69.9, 6840.0], [70.0, 6843.0], [70.1, 6853.0], [70.2, 6858.0], [70.3, 6861.0], [70.4, 6869.0], [70.5, 6878.0], [70.6, 6886.0], [70.7, 6895.0], [70.8, 6897.0], [70.9, 6901.0], [71.0, 6907.0], [71.1, 6911.0], [71.2, 6916.0], [71.3, 6918.0], [71.4, 6924.0], [71.5, 6932.0], [71.6, 6936.0], [71.7, 6944.0], [71.8, 6948.0], [71.9, 6949.0], [72.0, 6955.0], [72.1, 6960.0], [72.2, 6965.0], [72.3, 6969.0], [72.4, 6973.0], [72.5, 6987.0], [72.6, 6991.0], [72.7, 6998.0], [72.8, 7012.0], [72.9, 7018.0], [73.0, 7022.0], [73.1, 7036.0], [73.2, 7050.0], [73.3, 7052.0], [73.4, 7059.0], [73.5, 7068.0], [73.6, 7075.0], [73.7, 7079.0], [73.8, 7086.0], [73.9, 7093.0], [74.0, 7099.0], [74.1, 7104.0], [74.2, 7111.0], [74.3, 7121.0], [74.4, 7127.0], [74.5, 7139.0], [74.6, 7149.0], [74.7, 7154.0], [74.8, 7158.0], [74.9, 7165.0], [75.0, 7171.0], [75.1, 7179.0], [75.2, 7189.0], [75.3, 7202.0], [75.4, 7208.0], [75.5, 7212.0], [75.6, 7215.0], [75.7, 7219.0], [75.8, 7229.0], [75.9, 7234.0], [76.0, 7241.0], [76.1, 7249.0], [76.2, 7252.0], [76.3, 7255.0], [76.4, 7262.0], [76.5, 7266.0], [76.6, 7271.0], [76.7, 7278.0], [76.8, 7281.0], [76.9, 7284.0], [77.0, 7289.0], [77.1, 7293.0], [77.2, 7295.0], [77.3, 7301.0], [77.4, 7305.0], [77.5, 7307.0], [77.6, 7314.0], [77.7, 7317.0], [77.8, 7320.0], [77.9, 7336.0], [78.0, 7340.0], [78.1, 7346.0], [78.2, 7354.0], [78.3, 7362.0], [78.4, 7368.0], [78.5, 7371.0], [78.6, 7378.0], [78.7, 7385.0], [78.8, 7394.0], [78.9, 7402.0], [79.0, 7410.0], [79.1, 7414.0], [79.2, 7423.0], [79.3, 7429.0], [79.4, 7440.0], [79.5, 7450.0], [79.6, 7455.0], [79.7, 7462.0], [79.8, 7467.0], [79.9, 7470.0], [80.0, 7476.0], [80.1, 7486.0], [80.2, 7491.0], [80.3, 7504.0], [80.4, 7516.0], [80.5, 7523.0], [80.6, 7532.0], [80.7, 7538.0], [80.8, 7539.0], [80.9, 7548.0], [81.0, 7554.0], [81.1, 7561.0], [81.2, 7574.0], [81.3, 7584.0], [81.4, 7596.0], [81.5, 7600.0], [81.6, 7602.0], [81.7, 7613.0], [81.8, 7617.0], [81.9, 7622.0], [82.0, 7627.0], [82.1, 7634.0], [82.2, 7639.0], [82.3, 7651.0], [82.4, 7658.0], [82.5, 7668.0], [82.6, 7671.0], [82.7, 7684.0], [82.8, 7692.0], [82.9, 7704.0], [83.0, 7711.0], [83.1, 7718.0], [83.2, 7727.0], [83.3, 7741.0], [83.4, 7750.0], [83.5, 7757.0], [83.6, 7772.0], [83.7, 7781.0], [83.8, 7787.0], [83.9, 7794.0], [84.0, 7802.0], [84.1, 7816.0], [84.2, 7821.0], [84.3, 7838.0], [84.4, 7860.0], [84.5, 7871.0], [84.6, 7884.0], [84.7, 7893.0], [84.8, 7907.0], [84.9, 7916.0], [85.0, 7927.0], [85.1, 7937.0], [85.2, 7947.0], [85.3, 7961.0], [85.4, 7970.0], [85.5, 7979.0], [85.6, 7992.0], [85.7, 8013.0], [85.8, 8020.0], [85.9, 8025.0], [86.0, 8029.0], [86.1, 8037.0], [86.2, 8045.0], [86.3, 8049.0], [86.4, 8063.0], [86.5, 8070.0], [86.6, 8083.0], [86.7, 8086.0], [86.8, 8106.0], [86.9, 8117.0], [87.0, 8126.0], [87.1, 8136.0], [87.2, 8143.0], [87.3, 8148.0], [87.4, 8170.0], [87.5, 8197.0], [87.6, 8205.0], [87.7, 8217.0], [87.8, 8223.0], [87.9, 8247.0], [88.0, 8250.0], [88.1, 8252.0], [88.2, 8264.0], [88.3, 8277.0], [88.4, 8295.0], [88.5, 8299.0], [88.6, 8315.0], [88.7, 8325.0], [88.8, 8331.0], [88.9, 8340.0], [89.0, 8351.0], [89.1, 8372.0], [89.2, 8380.0], [89.3, 8390.0], [89.4, 8419.0], [89.5, 8432.0], [89.6, 8443.0], [89.7, 8459.0], [89.8, 8475.0], [89.9, 8499.0], [90.0, 8514.0], [90.1, 8528.0], [90.2, 8542.0], [90.3, 8558.0], [90.4, 8581.0], [90.5, 8606.0], [90.6, 8621.0], [90.7, 8658.0], [90.8, 8669.0], [90.9, 8685.0], [91.0, 8701.0], [91.1, 8722.0], [91.2, 8754.0], [91.3, 8759.0], [91.4, 8779.0], [91.5, 8789.0], [91.6, 8814.0], [91.7, 8838.0], [91.8, 8856.0], [91.9, 8871.0], [92.0, 8884.0], [92.1, 8921.0], [92.2, 8964.0], [92.3, 8994.0], [92.4, 9013.0], [92.5, 9040.0], [92.6, 9054.0], [92.7, 9070.0], [92.8, 9105.0], [92.9, 9122.0], [93.0, 9142.0], [93.1, 9179.0], [93.2, 9219.0], [93.3, 9228.0], [93.4, 9251.0], [93.5, 9289.0], [93.6, 9301.0], [93.7, 9345.0], [93.8, 9362.0], [93.9, 9402.0], [94.0, 9423.0], [94.1, 9456.0], [94.2, 9488.0], [94.3, 9496.0], [94.4, 9506.0], [94.5, 9542.0], [94.6, 9558.0], [94.7, 9594.0], [94.8, 9631.0], [94.9, 9658.0], [95.0, 9684.0], [95.1, 9736.0], [95.2, 9801.0], [95.3, 9843.0], [95.4, 9859.0], [95.5, 9898.0], [95.6, 9932.0], [95.7, 9980.0], [95.8, 10040.0], [95.9, 10076.0], [96.0, 10111.0], [96.1, 10171.0], [96.2, 10227.0], [96.3, 10260.0], [96.4, 10295.0], [96.5, 10379.0], [96.6, 10471.0], [96.7, 10518.0], [96.8, 10597.0], [96.9, 10679.0], [97.0, 10784.0], [97.1, 10855.0], [97.2, 10916.0], [97.3, 10961.0], [97.4, 11018.0], [97.5, 11192.0], [97.6, 11281.0], [97.7, 11420.0], [97.8, 11616.0], [97.9, 11736.0], [98.0, 11867.0], [98.1, 11955.0], [98.2, 12054.0], [98.3, 12106.0], [98.4, 12298.0], [98.5, 12484.0], [98.6, 12541.0], [98.7, 12603.0], [98.8, 12754.0], [98.9, 13093.0], [99.0, 13343.0], [99.1, 13505.0], [99.2, 13679.0], [99.3, 13904.0], [99.4, 13975.0], [99.5, 14263.0], [99.6, 14543.0], [99.7, 15234.0], [99.8, 17615.0], [99.9, 18797.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 136.0, "series": [{"data": [[2100.0, 1.0], [2300.0, 77.0], [2200.0, 19.0], [2400.0, 81.0], [2500.0, 84.0], [2600.0, 51.0], [2800.0, 43.0], [2700.0, 42.0], [2900.0, 42.0], [3000.0, 42.0], [3100.0, 47.0], [3300.0, 82.0], [3200.0, 42.0], [3400.0, 53.0], [3500.0, 41.0], [3700.0, 45.0], [3600.0, 54.0], [3800.0, 43.0], [3900.0, 35.0], [4000.0, 65.0], [4200.0, 69.0], [4300.0, 67.0], [4100.0, 71.0], [4400.0, 54.0], [4600.0, 73.0], [4500.0, 67.0], [4800.0, 95.0], [4700.0, 82.0], [4900.0, 108.0], [5100.0, 86.0], [5000.0, 91.0], [5300.0, 102.0], [5200.0, 105.0], [5400.0, 116.0], [5500.0, 105.0], [5600.0, 129.0], [5800.0, 136.0], [5700.0, 119.0], [5900.0, 116.0], [6100.0, 100.0], [6000.0, 125.0], [6200.0, 94.0], [6300.0, 107.0], [6500.0, 108.0], [6400.0, 105.0], [6600.0, 81.0], [6800.0, 88.0], [6900.0, 96.0], [6700.0, 90.0], [7100.0, 62.0], [7000.0, 70.0], [7200.0, 105.0], [7300.0, 81.0], [7400.0, 75.0], [7500.0, 62.0], [7600.0, 73.0], [7900.0, 45.0], [7800.0, 41.0], [7700.0, 56.0], [8100.0, 41.0], [8000.0, 59.0], [8300.0, 43.0], [8700.0, 29.0], [8600.0, 26.0], [8500.0, 30.0], [8200.0, 50.0], [8400.0, 29.0], [9100.0, 20.0], [8900.0, 16.0], [9000.0, 23.0], [9200.0, 22.0], [8800.0, 25.0], [9600.0, 16.0], [9400.0, 25.0], [9300.0, 16.0], [9700.0, 8.0], [9500.0, 18.0], [9800.0, 18.0], [9900.0, 10.0], [10000.0, 14.0], [10200.0, 16.0], [10100.0, 7.0], [10700.0, 6.0], [10300.0, 7.0], [10500.0, 9.0], [10400.0, 3.0], [10600.0, 6.0], [11000.0, 3.0], [11200.0, 5.0], [10900.0, 13.0], [10800.0, 6.0], [11100.0, 4.0], [11500.0, 3.0], [11600.0, 5.0], [11300.0, 2.0], [11400.0, 3.0], [11700.0, 3.0], [11800.0, 4.0], [12000.0, 8.0], [12100.0, 5.0], [11900.0, 6.0], [12200.0, 1.0], [12500.0, 9.0], [12400.0, 2.0], [12700.0, 4.0], [12300.0, 4.0], [12600.0, 3.0], [13000.0, 4.0], [13100.0, 2.0], [13300.0, 3.0], [12800.0, 1.0], [13200.0, 2.0], [13800.0, 3.0], [13600.0, 4.0], [13700.0, 1.0], [13500.0, 2.0], [13400.0, 2.0], [14200.0, 4.0], [14300.0, 1.0], [13900.0, 7.0], [14000.0, 3.0], [14800.0, 1.0], [14500.0, 2.0], [14400.0, 1.0], [14900.0, 1.0], [15000.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15500.0, 1.0], [16000.0, 1.0], [17400.0, 1.0], [17600.0, 2.0], [17900.0, 1.0], [18200.0, 2.0], [19200.0, 1.0], [18800.0, 1.0], [18700.0, 1.0], [22400.0, 1.0], [22500.0, 1.0], [23200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.555555555555555, "minX": 1.60423212E12, "maxY": 12.0, "series": [{"data": [[1.60423308E12, 12.0], [1.60423338E12, 12.0], [1.60423278E12, 12.0], [1.60423368E12, 12.0], [1.6042347E12, 9.555555555555555], [1.60423236E12, 12.0], [1.60423458E12, 12.0], [1.60423296E12, 12.0], [1.60423398E12, 12.0], [1.60423266E12, 12.0], [1.60423428E12, 12.0], [1.6042326E12, 12.0], [1.6042323E12, 12.0], [1.6042332E12, 12.0], [1.60423422E12, 12.0], [1.6042329E12, 12.0], [1.60423452E12, 12.0], [1.6042341E12, 12.0], [1.6042344E12, 12.0], [1.60423248E12, 12.0], [1.6042335E12, 12.0], [1.60423218E12, 12.0], [1.6042338E12, 12.0], [1.60423434E12, 12.0], [1.60423212E12, 12.0], [1.60423464E12, 12.0], [1.60423272E12, 12.0], [1.60423374E12, 12.0], [1.60423242E12, 12.0], [1.60423404E12, 12.0], [1.60423362E12, 12.0], [1.60423302E12, 12.0], [1.60423392E12, 12.0], [1.60423332E12, 12.0], [1.60423386E12, 12.0], [1.60423416E12, 12.0], [1.60423224E12, 12.0], [1.60423326E12, 12.0], [1.60423356E12, 12.0], [1.60423284E12, 12.0], [1.60423254E12, 12.0], [1.60423344E12, 12.0], [1.60423446E12, 12.0], [1.60423314E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042347E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5125.0, "minX": 1.0, "maxY": 7318.0, "series": [{"data": [[8.0, 5125.0], [4.0, 7277.0], [2.0, 7318.0], [1.0, 7079.0], [9.0, 6236.0], [10.0, 6468.0], [5.0, 7189.0], [11.0, 6514.0], [12.0, 5985.75033790306], [6.0, 7070.0], [3.0, 7288.0], [7.0, 6998.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5987.430250481684]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 211.63333333333333, "minX": 1.60423212E12, "maxY": 798374.5833333334, "series": [{"data": [[1.60423308E12, 565799.6], [1.60423338E12, 544105.4], [1.60423278E12, 597530.6333333333], [1.60423368E12, 634274.05], [1.6042347E12, 126821.95], [1.60423236E12, 633112.9333333333], [1.60423458E12, 501744.7166666667], [1.60423296E12, 586477.4], [1.60423398E12, 774697.85], [1.60423266E12, 751740.4833333333], [1.60423428E12, 548928.85], [1.6042326E12, 522043.06666666665], [1.6042323E12, 484828.38333333336], [1.6042332E12, 489706.23333333334], [1.60423422E12, 511316.73333333334], [1.6042329E12, 697912.05], [1.60423452E12, 555406.05], [1.6042341E12, 615540.9], [1.6042344E12, 557788.05], [1.60423248E12, 399087.76666666666], [1.6042335E12, 587802.4166666666], [1.60423218E12, 647675.85], [1.6042338E12, 306241.36666666664], [1.60423434E12, 526874.2666666667], [1.60423212E12, 640560.35], [1.60423464E12, 458465.5], [1.60423272E12, 731467.8333333334], [1.60423374E12, 421377.5833333333], [1.60423242E12, 421079.31666666665], [1.60423404E12, 798374.5833333334], [1.60423362E12, 450690.55], [1.60423302E12, 544334.55], [1.60423392E12, 404039.23333333334], [1.60423332E12, 561727.2], [1.60423386E12, 431656.01666666666], [1.60423416E12, 631202.4666666667], [1.60423224E12, 479249.7833333333], [1.60423326E12, 506773.13333333336], [1.60423356E12, 479608.26666666666], [1.60423284E12, 629974.55], [1.60423254E12, 286421.3], [1.60423344E12, 644885.45], [1.60423446E12, 569056.9166666666], [1.60423314E12, 713825.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60423308E12, 938.6166666666667], [1.60423338E12, 720.9166666666666], [1.60423278E12, 1065.1666666666667], [1.60423368E12, 954.5], [1.6042347E12, 211.63333333333333], [1.60423236E12, 1035.6166666666666], [1.60423458E12, 790.2833333333333], [1.60423296E12, 740.9833333333333], [1.60423398E12, 717.75], [1.60423266E12, 770.2666666666667], [1.60423428E12, 855.4], [1.6042326E12, 861.3833333333333], [1.6042323E12, 703.2], [1.6042332E12, 1203.2166666666667], [1.60423422E12, 1104.9833333333333], [1.6042329E12, 1047.8833333333334], [1.60423452E12, 1033.8833333333334], [1.6042341E12, 1049.4333333333334], [1.6042344E12, 1079.2666666666667], [1.60423248E12, 728.75], [1.6042335E12, 694.2666666666667], [1.60423218E12, 582.8], [1.6042338E12, 838.8166666666667], [1.60423434E12, 921.0166666666667], [1.60423212E12, 716.7333333333333], [1.60423464E12, 724.25], [1.60423272E12, 798.3166666666667], [1.60423374E12, 645.85], [1.60423242E12, 771.55], [1.60423404E12, 836.3], [1.60423362E12, 708.7], [1.60423302E12, 888.4], [1.60423392E12, 893.6166666666667], [1.60423332E12, 783.3833333333333], [1.60423386E12, 1343.3], [1.60423416E12, 979.6666666666666], [1.60423224E12, 1026.0833333333333], [1.60423326E12, 730.2166666666667], [1.60423356E12, 1012.0333333333333], [1.60423284E12, 1017.8833333333333], [1.60423254E12, 1366.6833333333334], [1.60423344E12, 739.5166666666667], [1.60423446E12, 988.6333333333333], [1.60423314E12, 956.1833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042347E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3870.2747252747263, "minX": 1.60423212E12, "maxY": 9220.487804878048, "series": [{"data": [[1.60423308E12, 6052.016260162601], [1.60423338E12, 7689.191489361701], [1.60423278E12, 5189.000000000003], [1.60423368E12, 5544.217054263565], [1.6042347E12, 6408.14814814815], [1.60423236E12, 5230.607142857141], [1.60423458E12, 7013.179245283019], [1.60423296E12, 7161.494845360824], [1.60423398E12, 7632.053191489361], [1.60423266E12, 7037.623762376235], [1.60423428E12, 6321.580357142858], [1.6042326E12, 5886.333333333335], [1.6042323E12, 6893.176470588234], [1.6042332E12, 4571.325000000002], [1.60423422E12, 5056.506849315072], [1.6042329E12, 5360.733812949639], [1.60423452E12, 5124.518248175182], [1.6042341E12, 5272.179856115111], [1.6042344E12, 5178.9647887323945], [1.60423248E12, 7211.705882352947], [1.6042335E12, 7766.224489795916], [1.60423218E12, 9220.487804878048], [1.6042338E12, 6377.728813559321], [1.60423434E12, 5915.603305785125], [1.60423212E12, 6878.329787234041], [1.60423464E12, 7298.61855670103], [1.60423272E12, 6875.076190476189], [1.60423374E12, 7862.806818181818], [1.60423242E12, 6701.342857142857], [1.60423404E12, 6602.863636363635], [1.60423362E12, 7357.990000000002], [1.60423302E12, 6279.153846153845], [1.60423392E12, 5475.666666666668], [1.60423332E12, 6893.923809523808], [1.60423386E12, 3994.463687150838], [1.60423416E12, 5437.4418604651155], [1.60423224E12, 4931.082758620688], [1.60423326E12, 7381.628865979381], [1.60423356E12, 5033.152777777777], [1.60423284E12, 5247.985074626865], [1.60423254E12, 3870.2747252747263], [1.60423344E12, 6692.683168316833], [1.60423446E12, 5502.984615384615], [1.60423314E12, 5377.698412698412]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6042347E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3869.5714285714303, "minX": 1.60423212E12, "maxY": 9216.792682926829, "series": [{"data": [[1.60423308E12, 6050.048780487802], [1.60423338E12, 7686.446808510639], [1.60423278E12, 5187.163120567377], [1.60423368E12, 5542.279069767442], [1.6042347E12, 6406.148148148149], [1.60423236E12, 5228.52142857143], [1.60423458E12, 7011.405660377357], [1.60423296E12, 7158.752577319588], [1.60423398E12, 7628.829787234043], [1.60423266E12, 7034.3366336633635], [1.60423428E12, 6319.580357142856], [1.6042326E12, 5884.325203252032], [1.6042323E12, 6890.8627450980375], [1.6042332E12, 4569.937499999997], [1.60423422E12, 5055.1369863013715], [1.6042329E12, 5358.496402877699], [1.60423452E12, 5122.999999999999], [1.6042341E12, 5270.4964028776985], [1.6042344E12, 5177.577464788732], [1.60423248E12, 7209.862745098039], [1.6042335E12, 7763.877551020411], [1.60423218E12, 9216.792682926829], [1.6042338E12, 6376.610169491521], [1.60423434E12, 5913.826446280993], [1.60423212E12, 6875.46808510638], [1.60423464E12, 7296.814432989694], [1.60423272E12, 6872.009523809523], [1.60423374E12, 7860.795454545457], [1.60423242E12, 6699.476190476189], [1.60423404E12, 6600.136363636364], [1.60423362E12, 7356.149999999997], [1.60423302E12, 6276.940170940169], [1.60423392E12, 5474.372093023257], [1.60423332E12, 6891.485714285715], [1.60423386E12, 3993.5307262569827], [1.60423416E12, 5435.697674418605], [1.60423224E12, 4929.524137931032], [1.60423326E12, 7379.278350515464], [1.60423356E12, 5031.666666666663], [1.60423284E12, 5245.8582089552265], [1.60423254E12, 3869.5714285714303], [1.60423344E12, 6689.485148514848], [1.60423446E12, 5501.315384615384], [1.60423314E12, 5375.277777777774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6042347E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60423212E12, "maxY": 1.2978723404255323, "series": [{"data": [[1.60423308E12, 0.10569105691056914], [1.60423338E12, 0.14893617021276595], [1.60423278E12, 0.09219858156028368], [1.60423368E12, 0.1162790697674419], [1.6042347E12, 0.037037037037037035], [1.60423236E12, 0.10000000000000002], [1.60423458E12, 0.13207547169811326], [1.60423296E12, 0.15463917525773196], [1.60423398E12, 0.11702127659574477], [1.60423266E12, 0.1485148514851486], [1.60423428E12, 0.1071428571428572], [1.6042326E12, 0.13008130081300814], [1.6042323E12, 0.14705882352941185], [1.6042332E12, 0.11250000000000014], [1.60423422E12, 0.08219178082191786], [1.6042329E12, 0.0935251798561151], [1.60423452E12, 0.08029197080291972], [1.6042341E12, 0.07913669064748204], [1.6042344E12, 0.09154929577464786], [1.60423248E12, 0.1372549019607843], [1.6042335E12, 0.13265306122448983], [1.60423218E12, 0.17073170731707318], [1.6042338E12, 0.12711864406779663], [1.60423434E12, 0.09090909090909093], [1.60423212E12, 1.2978723404255323], [1.60423464E12, 0.10309278350515466], [1.60423272E12, 0.1428571428571429], [1.60423374E12, 0.10227272727272727], [1.60423242E12, 0.14285714285714293], [1.60423404E12, 0.1], [1.60423362E12, 0.13999999999999999], [1.60423302E12, 0.11965811965811965], [1.60423392E12, 0.07751937984496125], [1.60423332E12, 0.13333333333333333], [1.60423386E12, 0.055865921787709494], [1.60423416E12, 0.0775193798449612], [1.60423224E12, 0.11034482758620695], [1.60423326E12, 0.1134020618556701], [1.60423356E12, 0.08333333333333336], [1.60423284E12, 0.09701492537313432], [1.60423254E12, 0.0824175824175824], [1.60423344E12, 0.1485148514851486], [1.60423446E12, 0.10769230769230766], [1.60423314E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6042347E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2191.0, "minX": 1.60423212E12, "maxY": 23253.0, "series": [{"data": [[1.60423308E12, 8527.0], [1.60423338E12, 14588.0], [1.60423278E12, 7983.0], [1.60423368E12, 8206.0], [1.6042347E12, 7318.0], [1.60423236E12, 8013.0], [1.60423458E12, 12484.0], [1.60423296E12, 10054.0], [1.60423398E12, 9965.0], [1.60423266E12, 10608.0], [1.60423428E12, 8921.0], [1.6042326E12, 10503.0], [1.6042323E12, 15234.0], [1.6042332E12, 12718.0], [1.60423422E12, 8459.0], [1.6042329E12, 10905.0], [1.60423452E12, 10983.0], [1.6042341E12, 8722.0], [1.6042344E12, 9293.0], [1.60423248E12, 12517.0], [1.6042335E12, 23253.0], [1.60423218E12, 16095.0], [1.6042338E12, 10510.0], [1.60423434E12, 8814.0], [1.60423212E12, 9636.0], [1.60423464E12, 11295.0], [1.60423272E12, 8779.0], [1.60423374E12, 13904.0], [1.60423242E12, 10948.0], [1.60423404E12, 8884.0], [1.60423362E12, 14263.0], [1.60423302E12, 9658.0], [1.60423392E12, 9138.0], [1.60423332E12, 10587.0], [1.60423386E12, 6776.0], [1.60423416E12, 8869.0], [1.60423224E12, 7149.0], [1.60423326E12, 14099.0], [1.60423356E12, 6394.0], [1.60423284E12, 8153.0], [1.60423254E12, 9801.0], [1.60423344E12, 8782.0], [1.60423446E12, 10853.0], [1.60423314E12, 10206.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60423308E12, 2429.1319992017748], [1.60423338E12, 4011.0], [1.60423278E12, 2949.4959921455384], [1.60423368E12, 3598.239997768402], [1.6042347E12, 5125.0], [1.60423236E12, 3475.4969995629785], [1.60423458E12, 3904.0], [1.60423296E12, 4378.0], [1.60423398E12, 5725.0], [1.60423266E12, 4141.0], [1.60423428E12, 2697.518994423151], [1.6042326E12, 3388.6199942350386], [1.6042323E12, 3950.0], [1.6042332E12, 2286.3879995393754], [1.60423422E12, 2474.773981144428], [1.6042329E12, 2353.9199985980986], [1.60423452E12, 2193.1779997038843], [1.6042341E12, 2405.4599992990493], [1.6042344E12, 2289.008999761343], [1.60423248E12, 3799.0], [1.6042335E12, 2335.0], [1.60423218E12, 4744.0], [1.6042338E12, 3774.069995176792], [1.60423434E12, 2892.9799997091295], [1.60423212E12, 3303.0], [1.60423464E12, 3636.0], [1.60423272E12, 4335.0], [1.60423374E12, 3596.0], [1.60423242E12, 3652.0], [1.60423404E12, 4871.0], [1.60423362E12, 4519.0], [1.60423302E12, 4370.771994204521], [1.60423392E12, 3388.4499973654747], [1.60423332E12, 3730.0], [1.60423386E12, 2268.29999935627], [1.60423416E12, 2562.889999473095], [1.60423224E12, 2524.0], [1.60423326E12, 4667.0], [1.60423356E12, 2533.829992878437], [1.60423284E12, 2268.3649996459485], [1.60423254E12, 2275.2929991710184], [1.60423344E12, 4614.0], [1.60423446E12, 2572.7589993441106], [1.60423314E12, 2446.71599963665]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60423308E12, 2432.1452003192903], [1.60423338E12, 4011.0], [1.60423278E12, 2979.1456031417847], [1.60423368E12, 3606.6640008926393], [1.6042347E12, 5125.0], [1.60423236E12, 3477.1467001748083], [1.60423458E12, 3915.326301949024], [1.60423296E12, 4378.0], [1.60423398E12, 5725.0], [1.60423266E12, 4141.4116004085545], [1.60423428E12, 2718.5709022307396], [1.6042326E12, 3410.3820023059843], [1.6042323E12, 3957.486003732681], [1.6042332E12, 2288.12680018425], [1.60423422E12, 2545.9514075422285], [1.6042329E12, 2359.2120005607603], [1.60423452E12, 2194.2958001184466], [1.6042341E12, 2408.10600028038], [1.6042344E12, 2289.909900095463], [1.60423248E12, 3802.703601846695], [1.6042335E12, 2335.0], [1.60423218E12, 4744.0], [1.6042338E12, 3792.277001929283], [1.60423434E12, 2894.0780001163484], [1.60423212E12, 3303.0], [1.60423464E12, 3636.0], [1.60423272E12, 4335.345800070762], [1.60423374E12, 3596.0], [1.60423242E12, 3652.2470000505446], [1.60423404E12, 4871.890100095272], [1.60423362E12, 4519.0], [1.60423302E12, 4392.649202318192], [1.60423392E12, 3398.39500105381], [1.60423332E12, 3734.2978008794785], [1.60423386E12, 2270.730000257492], [1.60423416E12, 2564.879000210762], [1.60423224E12, 2524.0], [1.60423326E12, 4667.0], [1.60423356E12, 2560.7130028486254], [1.60423284E12, 2269.7015001416207], [1.60423254E12, 2278.4223003315924], [1.60423344E12, 4618.184604153633], [1.60423446E12, 2575.234900262356], [1.60423314E12, 2448.08760014534]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60423308E12, 2430.8059996008874], [1.60423338E12, 4011.0], [1.60423278E12, 2965.967996072769], [1.60423368E12, 3602.919998884201], [1.6042347E12, 5125.0], [1.60423236E12, 3476.4134997814895], [1.60423458E12, 3907.1514975637197], [1.60423296E12, 4378.0], [1.60423398E12, 5725.0], [1.60423266E12, 4141.0], [1.60423428E12, 2709.2144972115757], [1.6042326E12, 3400.7099971175194], [1.6042323E12, 3950.0], [1.6042332E12, 2287.3539997696876], [1.60423422E12, 2514.316990572214], [1.6042329E12, 2356.8599992990494], [1.60423452E12, 2193.798999851942], [1.6042341E12, 2406.9299996495247], [1.6042344E12, 2289.5094998806717], [1.60423248E12, 3799.0], [1.6042335E12, 2335.0], [1.60423218E12, 4744.0], [1.6042338E12, 3784.184997588396], [1.60423434E12, 2893.5899998545647], [1.60423212E12, 3303.0], [1.60423464E12, 3636.0], [1.60423272E12, 4335.048999911547], [1.60423374E12, 3596.0], [1.60423242E12, 3652.034999936819], [1.60423404E12, 4871.49049988091], [1.60423362E12, 4519.0], [1.60423302E12, 4382.92599710226], [1.60423392E12, 3393.9749986827374], [1.60423332E12, 3730.608998900652], [1.60423386E12, 2269.649999678135], [1.60423416E12, 2563.9949997365475], [1.60423224E12, 2524.0], [1.60423326E12, 4667.0], [1.60423356E12, 2548.7649964392185], [1.60423284E12, 2269.107499822974], [1.60423254E12, 2277.031499585509], [1.60423344E12, 4614.0], [1.60423446E12, 2574.1344996720554], [1.60423314E12, 2447.477999818325]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60423308E12, 2426.0], [1.60423338E12, 4011.0], [1.60423278E12, 2885.0], [1.60423368E12, 3586.0], [1.6042347E12, 5125.0], [1.60423236E12, 3472.0], [1.60423458E12, 3904.0], [1.60423296E12, 4378.0], [1.60423398E12, 5725.0], [1.60423266E12, 4141.0], [1.60423428E12, 2694.0], [1.6042326E12, 3366.0], [1.6042323E12, 3950.0], [1.6042332E12, 2281.0], [1.60423422E12, 2301.0], [1.6042329E12, 2343.0], [1.60423452E12, 2191.0], [1.6042341E12, 2400.0], [1.6042344E12, 2287.0], [1.60423248E12, 3799.0], [1.6042335E12, 2335.0], [1.60423218E12, 4744.0], [1.6042338E12, 3762.0], [1.60423434E12, 2892.0], [1.60423212E12, 3303.0], [1.60423464E12, 3636.0], [1.60423272E12, 4335.0], [1.60423374E12, 3596.0], [1.60423242E12, 3652.0], [1.60423404E12, 4871.0], [1.60423362E12, 4519.0], [1.60423302E12, 4358.0], [1.60423392E12, 3374.0], [1.60423332E12, 3730.0], [1.60423386E12, 2259.0], [1.60423416E12, 2560.0], [1.60423224E12, 2524.0], [1.60423326E12, 4667.0], [1.60423356E12, 2471.0], [1.60423284E12, 2266.0], [1.60423254E12, 2263.0], [1.60423344E12, 4614.0], [1.60423446E12, 2569.0], [1.60423314E12, 2445.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60423308E12, 6567.0], [1.60423338E12, 7268.5], [1.60423278E12, 5193.0], [1.60423368E12, 5565.0], [1.6042347E12, 6382.0], [1.60423236E12, 4902.5], [1.60423458E12, 6933.0], [1.60423296E12, 7360.0], [1.60423398E12, 7606.5], [1.60423266E12, 6656.0], [1.60423428E12, 6456.0], [1.6042326E12, 5355.0], [1.6042323E12, 5784.0], [1.6042332E12, 3636.0], [1.60423422E12, 5135.5], [1.6042329E12, 4955.0], [1.60423452E12, 4884.0], [1.6042341E12, 5615.0], [1.6042344E12, 5271.5], [1.60423248E12, 7064.0], [1.6042335E12, 6209.0], [1.60423218E12, 9011.5], [1.6042338E12, 5594.5], [1.60423434E12, 6017.0], [1.60423212E12, 7046.0], [1.60423464E12, 7369.0], [1.60423272E12, 6892.0], [1.60423374E12, 5406.0], [1.60423242E12, 6276.0], [1.60423404E12, 6649.5], [1.60423362E12, 5841.5], [1.60423302E12, 5799.0], [1.60423392E12, 5323.0], [1.60423332E12, 6776.0], [1.60423386E12, 3694.0], [1.60423416E12, 5835.0], [1.60423224E12, 5024.0], [1.60423326E12, 6839.0], [1.60423356E12, 5278.0], [1.60423284E12, 5737.5], [1.60423254E12, 3374.5], [1.60423344E12, 6653.0], [1.60423446E12, 5311.5], [1.60423314E12, 4860.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042347E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2509.0, "minX": 1.0, "maxY": 7032.0, "series": [{"data": [[2.0, 6334.0], [1.0, 7032.0], [4.0, 4617.0], [5.0, 3038.0], [3.0, 5814.0], [6.0, 2509.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2509.0, "minX": 1.0, "maxY": 7022.0, "series": [{"data": [[2.0, 6333.5], [1.0, 7022.0], [4.0, 4614.0], [5.0, 3037.5], [3.0, 5813.0], [6.0, 2509.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.60423212E12, "maxY": 3.033333333333333, "series": [{"data": [[1.60423308E12, 2.05], [1.60423338E12, 1.5666666666666667], [1.60423278E12, 2.35], [1.60423368E12, 2.15], [1.6042347E12, 0.25], [1.60423236E12, 2.3333333333333335], [1.60423458E12, 1.7666666666666666], [1.60423296E12, 1.6166666666666667], [1.60423398E12, 1.5666666666666667], [1.60423266E12, 1.6833333333333333], [1.60423428E12, 1.8666666666666667], [1.6042326E12, 2.05], [1.6042323E12, 1.7], [1.6042332E12, 2.6666666666666665], [1.60423422E12, 2.433333333333333], [1.6042329E12, 2.316666666666667], [1.60423452E12, 2.283333333333333], [1.6042341E12, 2.316666666666667], [1.6042344E12, 2.3666666666666667], [1.60423248E12, 1.7], [1.6042335E12, 1.6333333333333333], [1.60423218E12, 1.3666666666666667], [1.6042338E12, 1.9666666666666666], [1.60423434E12, 2.0166666666666666], [1.60423212E12, 1.7666666666666666], [1.60423464E12, 1.6166666666666667], [1.60423272E12, 1.75], [1.60423374E12, 1.4666666666666666], [1.60423242E12, 1.75], [1.60423404E12, 1.8333333333333333], [1.60423362E12, 1.6666666666666667], [1.60423302E12, 1.95], [1.60423392E12, 2.15], [1.60423332E12, 1.75], [1.60423386E12, 2.9833333333333334], [1.60423416E12, 2.15], [1.60423224E12, 2.4166666666666665], [1.60423326E12, 1.6166666666666667], [1.60423356E12, 2.4], [1.60423284E12, 2.2333333333333334], [1.60423254E12, 3.033333333333333], [1.60423344E12, 1.6833333333333333], [1.60423446E12, 2.1666666666666665], [1.60423314E12, 2.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042347E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.60423212E12, "maxY": 3.033333333333333, "series": [{"data": [[1.60423308E12, 2.05], [1.60423338E12, 1.5666666666666667], [1.60423278E12, 2.35], [1.60423368E12, 2.15], [1.6042347E12, 0.45], [1.60423236E12, 2.3333333333333335], [1.60423458E12, 1.7666666666666666], [1.60423296E12, 1.6166666666666667], [1.60423398E12, 1.5666666666666667], [1.60423266E12, 1.6833333333333333], [1.60423428E12, 1.8666666666666667], [1.6042326E12, 2.05], [1.6042323E12, 1.7], [1.6042332E12, 2.6666666666666665], [1.60423422E12, 2.433333333333333], [1.6042329E12, 2.316666666666667], [1.60423452E12, 2.283333333333333], [1.6042341E12, 2.316666666666667], [1.6042344E12, 2.3666666666666667], [1.60423248E12, 1.7], [1.6042335E12, 1.6333333333333333], [1.60423218E12, 1.3666666666666667], [1.6042338E12, 1.9666666666666666], [1.60423434E12, 2.0166666666666666], [1.60423212E12, 1.5666666666666667], [1.60423464E12, 1.6166666666666667], [1.60423272E12, 1.75], [1.60423374E12, 1.4666666666666666], [1.60423242E12, 1.75], [1.60423404E12, 1.8333333333333333], [1.60423362E12, 1.6666666666666667], [1.60423302E12, 1.95], [1.60423392E12, 2.15], [1.60423332E12, 1.75], [1.60423386E12, 2.9833333333333334], [1.60423416E12, 2.15], [1.60423224E12, 2.4166666666666665], [1.60423326E12, 1.6166666666666667], [1.60423356E12, 2.4], [1.60423284E12, 2.2333333333333334], [1.60423254E12, 3.033333333333333], [1.60423344E12, 1.6833333333333333], [1.60423446E12, 2.1666666666666665], [1.60423314E12, 2.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6042347E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.60423212E12, "maxY": 3.033333333333333, "series": [{"data": [[1.60423308E12, 2.05], [1.60423338E12, 1.5666666666666667], [1.60423278E12, 2.35], [1.60423368E12, 2.15], [1.6042347E12, 0.45], [1.60423236E12, 2.3333333333333335], [1.60423458E12, 1.7666666666666666], [1.60423296E12, 1.6166666666666667], [1.60423398E12, 1.5666666666666667], [1.60423266E12, 1.6833333333333333], [1.60423428E12, 1.8666666666666667], [1.6042326E12, 2.05], [1.6042323E12, 1.7], [1.6042332E12, 2.6666666666666665], [1.60423422E12, 2.433333333333333], [1.6042329E12, 2.316666666666667], [1.60423452E12, 2.283333333333333], [1.6042341E12, 2.316666666666667], [1.6042344E12, 2.3666666666666667], [1.60423248E12, 1.7], [1.6042335E12, 1.6333333333333333], [1.60423218E12, 1.3666666666666667], [1.6042338E12, 1.9666666666666666], [1.60423434E12, 2.0166666666666666], [1.60423212E12, 1.5666666666666667], [1.60423464E12, 1.6166666666666667], [1.60423272E12, 1.75], [1.60423374E12, 1.4666666666666666], [1.60423242E12, 1.75], [1.60423404E12, 1.8333333333333333], [1.60423362E12, 1.6666666666666667], [1.60423302E12, 1.95], [1.60423392E12, 2.15], [1.60423332E12, 1.75], [1.60423386E12, 2.9833333333333334], [1.60423416E12, 2.15], [1.60423224E12, 2.4166666666666665], [1.60423326E12, 1.6166666666666667], [1.60423356E12, 2.4], [1.60423284E12, 2.2333333333333334], [1.60423254E12, 3.033333333333333], [1.60423344E12, 1.6833333333333333], [1.60423446E12, 2.1666666666666665], [1.60423314E12, 2.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6042347E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.60423212E12, "maxY": 3.033333333333333, "series": [{"data": [[1.60423308E12, 2.05], [1.60423338E12, 1.5666666666666667], [1.60423278E12, 2.35], [1.60423368E12, 2.15], [1.6042347E12, 0.45], [1.60423236E12, 2.3333333333333335], [1.60423458E12, 1.7666666666666666], [1.60423296E12, 1.6166666666666667], [1.60423398E12, 1.5666666666666667], [1.60423266E12, 1.6833333333333333], [1.60423428E12, 1.8666666666666667], [1.6042326E12, 2.05], [1.6042323E12, 1.7], [1.6042332E12, 2.6666666666666665], [1.60423422E12, 2.433333333333333], [1.6042329E12, 2.316666666666667], [1.60423452E12, 2.283333333333333], [1.6042341E12, 2.316666666666667], [1.6042344E12, 2.3666666666666667], [1.60423248E12, 1.7], [1.6042335E12, 1.6333333333333333], [1.60423218E12, 1.3666666666666667], [1.6042338E12, 1.9666666666666666], [1.60423434E12, 2.0166666666666666], [1.60423212E12, 1.5666666666666667], [1.60423464E12, 1.6166666666666667], [1.60423272E12, 1.75], [1.60423374E12, 1.4666666666666666], [1.60423242E12, 1.75], [1.60423404E12, 1.8333333333333333], [1.60423362E12, 1.6666666666666667], [1.60423302E12, 1.95], [1.60423392E12, 2.15], [1.60423332E12, 1.75], [1.60423386E12, 2.9833333333333334], [1.60423416E12, 2.15], [1.60423224E12, 2.4166666666666665], [1.60423326E12, 1.6166666666666667], [1.60423356E12, 2.4], [1.60423284E12, 2.2333333333333334], [1.60423254E12, 3.033333333333333], [1.60423344E12, 1.6833333333333333], [1.60423446E12, 2.1666666666666665], [1.60423314E12, 2.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6042347E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

