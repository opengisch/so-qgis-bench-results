/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2200.0, "minX": 0.0, "maxY": 23278.0, "series": [{"data": [[0.0, 2200.0], [0.1, 2210.0], [0.2, 2220.0], [0.3, 2232.0], [0.4, 2244.0], [0.5, 2251.0], [0.6, 2265.0], [0.7, 2269.0], [0.8, 2274.0], [0.9, 2280.0], [1.0, 2286.0], [1.1, 2295.0], [1.2, 2299.0], [1.3, 2301.0], [1.4, 2308.0], [1.5, 2315.0], [1.6, 2320.0], [1.7, 2323.0], [1.8, 2324.0], [1.9, 2336.0], [2.0, 2346.0], [2.1, 2350.0], [2.2, 2355.0], [2.3, 2358.0], [2.4, 2364.0], [2.5, 2367.0], [2.6, 2370.0], [2.7, 2380.0], [2.8, 2388.0], [2.9, 2392.0], [3.0, 2401.0], [3.1, 2405.0], [3.2, 2410.0], [3.3, 2413.0], [3.4, 2422.0], [3.5, 2427.0], [3.6, 2429.0], [3.7, 2434.0], [3.8, 2436.0], [3.9, 2442.0], [4.0, 2447.0], [4.1, 2453.0], [4.2, 2457.0], [4.3, 2460.0], [4.4, 2462.0], [4.5, 2465.0], [4.6, 2470.0], [4.7, 2473.0], [4.8, 2484.0], [4.9, 2494.0], [5.0, 2503.0], [5.1, 2512.0], [5.2, 2537.0], [5.3, 2565.0], [5.4, 2579.0], [5.5, 2589.0], [5.6, 2600.0], [5.7, 2614.0], [5.8, 2632.0], [5.9, 2642.0], [6.0, 2647.0], [6.1, 2670.0], [6.2, 2681.0], [6.3, 2690.0], [6.4, 2701.0], [6.5, 2712.0], [6.6, 2723.0], [6.7, 2729.0], [6.8, 2740.0], [6.9, 2751.0], [7.0, 2753.0], [7.1, 2768.0], [7.2, 2773.0], [7.3, 2789.0], [7.4, 2809.0], [7.5, 2826.0], [7.6, 2839.0], [7.7, 2850.0], [7.8, 2855.0], [7.9, 2872.0], [8.0, 2882.0], [8.1, 2902.0], [8.2, 2910.0], [8.3, 2930.0], [8.4, 2938.0], [8.5, 2951.0], [8.6, 2956.0], [8.7, 2979.0], [8.8, 2998.0], [8.9, 3004.0], [9.0, 3008.0], [9.1, 3010.0], [9.2, 3021.0], [9.3, 3030.0], [9.4, 3041.0], [9.5, 3050.0], [9.6, 3054.0], [9.7, 3061.0], [9.8, 3079.0], [9.9, 3090.0], [10.0, 3100.0], [10.1, 3105.0], [10.2, 3111.0], [10.3, 3114.0], [10.4, 3118.0], [10.5, 3123.0], [10.6, 3126.0], [10.7, 3129.0], [10.8, 3133.0], [10.9, 3143.0], [11.0, 3151.0], [11.1, 3169.0], [11.2, 3185.0], [11.3, 3193.0], [11.4, 3205.0], [11.5, 3216.0], [11.6, 3232.0], [11.7, 3246.0], [11.8, 3256.0], [11.9, 3262.0], [12.0, 3279.0], [12.1, 3290.0], [12.2, 3305.0], [12.3, 3310.0], [12.4, 3322.0], [12.5, 3327.0], [12.6, 3340.0], [12.7, 3347.0], [12.8, 3353.0], [12.9, 3363.0], [13.0, 3373.0], [13.1, 3377.0], [13.2, 3387.0], [13.3, 3392.0], [13.4, 3406.0], [13.5, 3418.0], [13.6, 3424.0], [13.7, 3440.0], [13.8, 3443.0], [13.9, 3456.0], [14.0, 3472.0], [14.1, 3479.0], [14.2, 3486.0], [14.3, 3494.0], [14.4, 3502.0], [14.5, 3507.0], [14.6, 3516.0], [14.7, 3531.0], [14.8, 3544.0], [14.9, 3550.0], [15.0, 3552.0], [15.1, 3564.0], [15.2, 3574.0], [15.3, 3585.0], [15.4, 3595.0], [15.5, 3606.0], [15.6, 3615.0], [15.7, 3626.0], [15.8, 3630.0], [15.9, 3645.0], [16.0, 3649.0], [16.1, 3657.0], [16.2, 3672.0], [16.3, 3684.0], [16.4, 3700.0], [16.5, 3711.0], [16.6, 3720.0], [16.7, 3732.0], [16.8, 3748.0], [16.9, 3762.0], [17.0, 3770.0], [17.1, 3777.0], [17.2, 3786.0], [17.3, 3789.0], [17.4, 3795.0], [17.5, 3802.0], [17.6, 3810.0], [17.7, 3815.0], [17.8, 3822.0], [17.9, 3841.0], [18.0, 3848.0], [18.1, 3852.0], [18.2, 3858.0], [18.3, 3865.0], [18.4, 3874.0], [18.5, 3881.0], [18.6, 3887.0], [18.7, 3892.0], [18.8, 3900.0], [18.9, 3910.0], [19.0, 3917.0], [19.1, 3928.0], [19.2, 3934.0], [19.3, 3941.0], [19.4, 3954.0], [19.5, 3965.0], [19.6, 3969.0], [19.7, 3985.0], [19.8, 3994.0], [19.9, 4002.0], [20.0, 4013.0], [20.1, 4016.0], [20.2, 4026.0], [20.3, 4035.0], [20.4, 4049.0], [20.5, 4063.0], [20.6, 4071.0], [20.7, 4083.0], [20.8, 4088.0], [20.9, 4094.0], [21.0, 4101.0], [21.1, 4108.0], [21.2, 4120.0], [21.3, 4127.0], [21.4, 4128.0], [21.5, 4136.0], [21.6, 4150.0], [21.7, 4156.0], [21.8, 4165.0], [21.9, 4179.0], [22.0, 4184.0], [22.1, 4190.0], [22.2, 4200.0], [22.3, 4204.0], [22.4, 4209.0], [22.5, 4219.0], [22.6, 4236.0], [22.7, 4248.0], [22.8, 4265.0], [22.9, 4268.0], [23.0, 4284.0], [23.1, 4292.0], [23.2, 4299.0], [23.3, 4306.0], [23.4, 4314.0], [23.5, 4325.0], [23.6, 4329.0], [23.7, 4335.0], [23.8, 4340.0], [23.9, 4345.0], [24.0, 4350.0], [24.1, 4359.0], [24.2, 4370.0], [24.3, 4384.0], [24.4, 4394.0], [24.5, 4401.0], [24.6, 4408.0], [24.7, 4413.0], [24.8, 4419.0], [24.9, 4424.0], [25.0, 4436.0], [25.1, 4444.0], [25.2, 4452.0], [25.3, 4456.0], [25.4, 4458.0], [25.5, 4469.0], [25.6, 4473.0], [25.7, 4485.0], [25.8, 4492.0], [25.9, 4497.0], [26.0, 4508.0], [26.1, 4515.0], [26.2, 4523.0], [26.3, 4533.0], [26.4, 4541.0], [26.5, 4545.0], [26.6, 4549.0], [26.7, 4558.0], [26.8, 4566.0], [26.9, 4574.0], [27.0, 4575.0], [27.1, 4582.0], [27.2, 4584.0], [27.3, 4589.0], [27.4, 4596.0], [27.5, 4605.0], [27.6, 4610.0], [27.7, 4619.0], [27.8, 4623.0], [27.9, 4630.0], [28.0, 4639.0], [28.1, 4642.0], [28.2, 4644.0], [28.3, 4650.0], [28.4, 4654.0], [28.5, 4660.0], [28.6, 4666.0], [28.7, 4671.0], [28.8, 4673.0], [28.9, 4677.0], [29.0, 4683.0], [29.1, 4686.0], [29.2, 4691.0], [29.3, 4696.0], [29.4, 4702.0], [29.5, 4708.0], [29.6, 4712.0], [29.7, 4714.0], [29.8, 4717.0], [29.9, 4720.0], [30.0, 4726.0], [30.1, 4732.0], [30.2, 4738.0], [30.3, 4743.0], [30.4, 4750.0], [30.5, 4757.0], [30.6, 4764.0], [30.7, 4770.0], [30.8, 4781.0], [30.9, 4784.0], [31.0, 4790.0], [31.1, 4794.0], [31.2, 4800.0], [31.3, 4807.0], [31.4, 4817.0], [31.5, 4819.0], [31.6, 4823.0], [31.7, 4830.0], [31.8, 4835.0], [31.9, 4842.0], [32.0, 4848.0], [32.1, 4854.0], [32.2, 4861.0], [32.3, 4868.0], [32.4, 4876.0], [32.5, 4879.0], [32.6, 4885.0], [32.7, 4893.0], [32.8, 4900.0], [32.9, 4903.0], [33.0, 4907.0], [33.1, 4915.0], [33.2, 4920.0], [33.3, 4923.0], [33.4, 4929.0], [33.5, 4933.0], [33.6, 4942.0], [33.7, 4946.0], [33.8, 4951.0], [33.9, 4960.0], [34.0, 4968.0], [34.1, 4975.0], [34.2, 4978.0], [34.3, 4984.0], [34.4, 4987.0], [34.5, 4994.0], [34.6, 5001.0], [34.7, 5006.0], [34.8, 5013.0], [34.9, 5019.0], [35.0, 5030.0], [35.1, 5034.0], [35.2, 5037.0], [35.3, 5042.0], [35.4, 5046.0], [35.5, 5050.0], [35.6, 5055.0], [35.7, 5057.0], [35.8, 5064.0], [35.9, 5066.0], [36.0, 5071.0], [36.1, 5075.0], [36.2, 5080.0], [36.3, 5085.0], [36.4, 5089.0], [36.5, 5094.0], [36.6, 5099.0], [36.7, 5105.0], [36.8, 5112.0], [36.9, 5117.0], [37.0, 5122.0], [37.1, 5126.0], [37.2, 5129.0], [37.3, 5141.0], [37.4, 5146.0], [37.5, 5153.0], [37.6, 5157.0], [37.7, 5160.0], [37.8, 5164.0], [37.9, 5171.0], [38.0, 5173.0], [38.1, 5176.0], [38.2, 5182.0], [38.3, 5187.0], [38.4, 5192.0], [38.5, 5197.0], [38.6, 5204.0], [38.7, 5210.0], [38.8, 5218.0], [38.9, 5221.0], [39.0, 5227.0], [39.1, 5234.0], [39.2, 5238.0], [39.3, 5246.0], [39.4, 5252.0], [39.5, 5255.0], [39.6, 5261.0], [39.7, 5265.0], [39.8, 5267.0], [39.9, 5270.0], [40.0, 5276.0], [40.1, 5283.0], [40.2, 5287.0], [40.3, 5294.0], [40.4, 5298.0], [40.5, 5303.0], [40.6, 5307.0], [40.7, 5311.0], [40.8, 5313.0], [40.9, 5319.0], [41.0, 5322.0], [41.1, 5329.0], [41.2, 5332.0], [41.3, 5339.0], [41.4, 5343.0], [41.5, 5349.0], [41.6, 5361.0], [41.7, 5365.0], [41.8, 5373.0], [41.9, 5377.0], [42.0, 5380.0], [42.1, 5388.0], [42.2, 5391.0], [42.3, 5396.0], [42.4, 5399.0], [42.5, 5403.0], [42.6, 5408.0], [42.7, 5412.0], [42.8, 5416.0], [42.9, 5421.0], [43.0, 5423.0], [43.1, 5426.0], [43.2, 5433.0], [43.3, 5439.0], [43.4, 5445.0], [43.5, 5450.0], [43.6, 5456.0], [43.7, 5462.0], [43.8, 5465.0], [43.9, 5467.0], [44.0, 5470.0], [44.1, 5479.0], [44.2, 5485.0], [44.3, 5489.0], [44.4, 5491.0], [44.5, 5492.0], [44.6, 5498.0], [44.7, 5502.0], [44.8, 5506.0], [44.9, 5508.0], [45.0, 5513.0], [45.1, 5517.0], [45.2, 5523.0], [45.3, 5528.0], [45.4, 5532.0], [45.5, 5535.0], [45.6, 5538.0], [45.7, 5544.0], [45.8, 5549.0], [45.9, 5552.0], [46.0, 5555.0], [46.1, 5558.0], [46.2, 5563.0], [46.3, 5568.0], [46.4, 5576.0], [46.5, 5580.0], [46.6, 5582.0], [46.7, 5585.0], [46.8, 5591.0], [46.9, 5594.0], [47.0, 5599.0], [47.1, 5603.0], [47.2, 5607.0], [47.3, 5612.0], [47.4, 5618.0], [47.5, 5621.0], [47.6, 5624.0], [47.7, 5627.0], [47.8, 5634.0], [47.9, 5638.0], [48.0, 5640.0], [48.1, 5648.0], [48.2, 5652.0], [48.3, 5656.0], [48.4, 5660.0], [48.5, 5666.0], [48.6, 5667.0], [48.7, 5670.0], [48.8, 5671.0], [48.9, 5673.0], [49.0, 5676.0], [49.1, 5678.0], [49.2, 5682.0], [49.3, 5686.0], [49.4, 5692.0], [49.5, 5694.0], [49.6, 5697.0], [49.7, 5702.0], [49.8, 5708.0], [49.9, 5710.0], [50.0, 5713.0], [50.1, 5716.0], [50.2, 5722.0], [50.3, 5727.0], [50.4, 5731.0], [50.5, 5733.0], [50.6, 5734.0], [50.7, 5737.0], [50.8, 5744.0], [50.9, 5745.0], [51.0, 5748.0], [51.1, 5757.0], [51.2, 5761.0], [51.3, 5764.0], [51.4, 5766.0], [51.5, 5768.0], [51.6, 5773.0], [51.7, 5777.0], [51.8, 5780.0], [51.9, 5788.0], [52.0, 5793.0], [52.1, 5796.0], [52.2, 5805.0], [52.3, 5808.0], [52.4, 5811.0], [52.5, 5818.0], [52.6, 5822.0], [52.7, 5829.0], [52.8, 5834.0], [52.9, 5837.0], [53.0, 5840.0], [53.1, 5844.0], [53.2, 5849.0], [53.3, 5852.0], [53.4, 5860.0], [53.5, 5862.0], [53.6, 5868.0], [53.7, 5873.0], [53.8, 5876.0], [53.9, 5879.0], [54.0, 5882.0], [54.1, 5884.0], [54.2, 5889.0], [54.3, 5893.0], [54.4, 5897.0], [54.5, 5902.0], [54.6, 5906.0], [54.7, 5909.0], [54.8, 5915.0], [54.9, 5920.0], [55.0, 5921.0], [55.1, 5926.0], [55.2, 5928.0], [55.3, 5932.0], [55.4, 5935.0], [55.5, 5941.0], [55.6, 5945.0], [55.7, 5953.0], [55.8, 5956.0], [55.9, 5960.0], [56.0, 5962.0], [56.1, 5969.0], [56.2, 5975.0], [56.3, 5978.0], [56.4, 5980.0], [56.5, 5990.0], [56.6, 5991.0], [56.7, 5996.0], [56.8, 5999.0], [56.9, 6007.0], [57.0, 6015.0], [57.1, 6018.0], [57.2, 6025.0], [57.3, 6035.0], [57.4, 6040.0], [57.5, 6044.0], [57.6, 6045.0], [57.7, 6049.0], [57.8, 6054.0], [57.9, 6056.0], [58.0, 6059.0], [58.1, 6060.0], [58.2, 6064.0], [58.3, 6070.0], [58.4, 6075.0], [58.5, 6083.0], [58.6, 6084.0], [58.7, 6094.0], [58.8, 6096.0], [58.9, 6104.0], [59.0, 6107.0], [59.1, 6110.0], [59.2, 6112.0], [59.3, 6118.0], [59.4, 6122.0], [59.5, 6128.0], [59.6, 6133.0], [59.7, 6138.0], [59.8, 6146.0], [59.9, 6151.0], [60.0, 6161.0], [60.1, 6165.0], [60.2, 6174.0], [60.3, 6181.0], [60.4, 6188.0], [60.5, 6191.0], [60.6, 6194.0], [60.7, 6198.0], [60.8, 6209.0], [60.9, 6214.0], [61.0, 6221.0], [61.1, 6227.0], [61.2, 6236.0], [61.3, 6242.0], [61.4, 6248.0], [61.5, 6257.0], [61.6, 6264.0], [61.7, 6269.0], [61.8, 6274.0], [61.9, 6279.0], [62.0, 6283.0], [62.1, 6288.0], [62.2, 6292.0], [62.3, 6298.0], [62.4, 6308.0], [62.5, 6316.0], [62.6, 6320.0], [62.7, 6324.0], [62.8, 6332.0], [62.9, 6335.0], [63.0, 6340.0], [63.1, 6348.0], [63.2, 6350.0], [63.3, 6354.0], [63.4, 6356.0], [63.5, 6361.0], [63.6, 6363.0], [63.7, 6367.0], [63.8, 6369.0], [63.9, 6378.0], [64.0, 6381.0], [64.1, 6388.0], [64.2, 6391.0], [64.3, 6395.0], [64.4, 6401.0], [64.5, 6404.0], [64.6, 6405.0], [64.7, 6407.0], [64.8, 6412.0], [64.9, 6415.0], [65.0, 6423.0], [65.1, 6426.0], [65.2, 6429.0], [65.3, 6433.0], [65.4, 6436.0], [65.5, 6440.0], [65.6, 6444.0], [65.7, 6447.0], [65.8, 6452.0], [65.9, 6458.0], [66.0, 6465.0], [66.1, 6469.0], [66.2, 6476.0], [66.3, 6483.0], [66.4, 6488.0], [66.5, 6491.0], [66.6, 6497.0], [66.7, 6500.0], [66.8, 6507.0], [66.9, 6512.0], [67.0, 6519.0], [67.1, 6522.0], [67.2, 6527.0], [67.3, 6531.0], [67.4, 6534.0], [67.5, 6536.0], [67.6, 6542.0], [67.7, 6545.0], [67.8, 6549.0], [67.9, 6553.0], [68.0, 6559.0], [68.1, 6562.0], [68.2, 6567.0], [68.3, 6570.0], [68.4, 6573.0], [68.5, 6578.0], [68.6, 6584.0], [68.7, 6588.0], [68.8, 6593.0], [68.9, 6600.0], [69.0, 6608.0], [69.1, 6612.0], [69.2, 6624.0], [69.3, 6628.0], [69.4, 6630.0], [69.5, 6636.0], [69.6, 6644.0], [69.7, 6650.0], [69.8, 6657.0], [69.9, 6665.0], [70.0, 6673.0], [70.1, 6682.0], [70.2, 6689.0], [70.3, 6693.0], [70.4, 6698.0], [70.5, 6707.0], [70.6, 6714.0], [70.7, 6719.0], [70.8, 6727.0], [70.9, 6732.0], [71.0, 6739.0], [71.1, 6751.0], [71.2, 6756.0], [71.3, 6764.0], [71.4, 6770.0], [71.5, 6776.0], [71.6, 6778.0], [71.7, 6789.0], [71.8, 6794.0], [71.9, 6800.0], [72.0, 6809.0], [72.1, 6816.0], [72.2, 6822.0], [72.3, 6827.0], [72.4, 6833.0], [72.5, 6839.0], [72.6, 6842.0], [72.7, 6850.0], [72.8, 6860.0], [72.9, 6871.0], [73.0, 6880.0], [73.1, 6886.0], [73.2, 6893.0], [73.3, 6899.0], [73.4, 6907.0], [73.5, 6912.0], [73.6, 6919.0], [73.7, 6926.0], [73.8, 6936.0], [73.9, 6946.0], [74.0, 6957.0], [74.1, 6964.0], [74.2, 6969.0], [74.3, 6975.0], [74.4, 6981.0], [74.5, 6985.0], [74.6, 6990.0], [74.7, 6997.0], [74.8, 7003.0], [74.9, 7010.0], [75.0, 7017.0], [75.1, 7030.0], [75.2, 7037.0], [75.3, 7042.0], [75.4, 7051.0], [75.5, 7056.0], [75.6, 7060.0], [75.7, 7067.0], [75.8, 7071.0], [75.9, 7082.0], [76.0, 7084.0], [76.1, 7088.0], [76.2, 7099.0], [76.3, 7103.0], [76.4, 7120.0], [76.5, 7125.0], [76.6, 7136.0], [76.7, 7138.0], [76.8, 7148.0], [76.9, 7155.0], [77.0, 7162.0], [77.1, 7166.0], [77.2, 7170.0], [77.3, 7172.0], [77.4, 7177.0], [77.5, 7185.0], [77.6, 7189.0], [77.7, 7197.0], [77.8, 7202.0], [77.9, 7208.0], [78.0, 7210.0], [78.1, 7216.0], [78.2, 7225.0], [78.3, 7234.0], [78.4, 7237.0], [78.5, 7242.0], [78.6, 7248.0], [78.7, 7257.0], [78.8, 7268.0], [78.9, 7275.0], [79.0, 7280.0], [79.1, 7284.0], [79.2, 7290.0], [79.3, 7296.0], [79.4, 7299.0], [79.5, 7304.0], [79.6, 7308.0], [79.7, 7310.0], [79.8, 7317.0], [79.9, 7321.0], [80.0, 7326.0], [80.1, 7329.0], [80.2, 7333.0], [80.3, 7337.0], [80.4, 7345.0], [80.5, 7353.0], [80.6, 7363.0], [80.7, 7373.0], [80.8, 7378.0], [80.9, 7387.0], [81.0, 7397.0], [81.1, 7411.0], [81.2, 7421.0], [81.3, 7428.0], [81.4, 7438.0], [81.5, 7444.0], [81.6, 7449.0], [81.7, 7464.0], [81.8, 7469.0], [81.9, 7492.0], [82.0, 7502.0], [82.1, 7512.0], [82.2, 7526.0], [82.3, 7536.0], [82.4, 7544.0], [82.5, 7548.0], [82.6, 7557.0], [82.7, 7568.0], [82.8, 7580.0], [82.9, 7589.0], [83.0, 7600.0], [83.1, 7611.0], [83.2, 7622.0], [83.3, 7635.0], [83.4, 7638.0], [83.5, 7648.0], [83.6, 7659.0], [83.7, 7665.0], [83.8, 7673.0], [83.9, 7678.0], [84.0, 7687.0], [84.1, 7692.0], [84.2, 7701.0], [84.3, 7709.0], [84.4, 7717.0], [84.5, 7722.0], [84.6, 7734.0], [84.7, 7746.0], [84.8, 7752.0], [84.9, 7756.0], [85.0, 7762.0], [85.1, 7771.0], [85.2, 7782.0], [85.3, 7794.0], [85.4, 7803.0], [85.5, 7815.0], [85.6, 7824.0], [85.7, 7829.0], [85.8, 7840.0], [85.9, 7844.0], [86.0, 7850.0], [86.1, 7864.0], [86.2, 7883.0], [86.3, 7899.0], [86.4, 7907.0], [86.5, 7920.0], [86.6, 7937.0], [86.7, 7941.0], [86.8, 7949.0], [86.9, 7961.0], [87.0, 7971.0], [87.1, 7981.0], [87.2, 7987.0], [87.3, 7991.0], [87.4, 7998.0], [87.5, 8012.0], [87.6, 8026.0], [87.7, 8035.0], [87.8, 8048.0], [87.9, 8057.0], [88.0, 8064.0], [88.1, 8071.0], [88.2, 8082.0], [88.3, 8096.0], [88.4, 8109.0], [88.5, 8130.0], [88.6, 8149.0], [88.7, 8158.0], [88.8, 8167.0], [88.9, 8176.0], [89.0, 8184.0], [89.1, 8194.0], [89.2, 8205.0], [89.3, 8232.0], [89.4, 8250.0], [89.5, 8279.0], [89.6, 8290.0], [89.7, 8299.0], [89.8, 8310.0], [89.9, 8322.0], [90.0, 8340.0], [90.1, 8360.0], [90.2, 8373.0], [90.3, 8381.0], [90.4, 8402.0], [90.5, 8416.0], [90.6, 8447.0], [90.7, 8466.0], [90.8, 8481.0], [90.9, 8495.0], [91.0, 8504.0], [91.1, 8531.0], [91.2, 8539.0], [91.3, 8556.0], [91.4, 8593.0], [91.5, 8636.0], [91.6, 8681.0], [91.7, 8705.0], [91.8, 8713.0], [91.9, 8725.0], [92.0, 8739.0], [92.1, 8770.0], [92.2, 8788.0], [92.3, 8828.0], [92.4, 8836.0], [92.5, 8874.0], [92.6, 8901.0], [92.7, 8923.0], [92.8, 8942.0], [92.9, 8968.0], [93.0, 9015.0], [93.1, 9052.0], [93.2, 9070.0], [93.3, 9086.0], [93.4, 9130.0], [93.5, 9161.0], [93.6, 9187.0], [93.7, 9222.0], [93.8, 9272.0], [93.9, 9280.0], [94.0, 9297.0], [94.1, 9318.0], [94.2, 9332.0], [94.3, 9362.0], [94.4, 9390.0], [94.5, 9414.0], [94.6, 9446.0], [94.7, 9467.0], [94.8, 9511.0], [94.9, 9551.0], [95.0, 9575.0], [95.1, 9590.0], [95.2, 9636.0], [95.3, 9676.0], [95.4, 9683.0], [95.5, 9706.0], [95.6, 9746.0], [95.7, 9824.0], [95.8, 9889.0], [95.9, 9930.0], [96.0, 9984.0], [96.1, 10033.0], [96.2, 10087.0], [96.3, 10161.0], [96.4, 10247.0], [96.5, 10290.0], [96.6, 10343.0], [96.7, 10366.0], [96.8, 10390.0], [96.9, 10456.0], [97.0, 10573.0], [97.1, 10613.0], [97.2, 10738.0], [97.3, 10817.0], [97.4, 10888.0], [97.5, 10942.0], [97.6, 11047.0], [97.7, 11212.0], [97.8, 11362.0], [97.9, 11489.0], [98.0, 11660.0], [98.1, 11740.0], [98.2, 11884.0], [98.3, 11950.0], [98.4, 11981.0], [98.5, 12211.0], [98.6, 12322.0], [98.7, 12431.0], [98.8, 12572.0], [98.9, 12782.0], [99.0, 12943.0], [99.1, 13112.0], [99.2, 13322.0], [99.3, 13495.0], [99.4, 13596.0], [99.5, 13770.0], [99.6, 14178.0], [99.7, 14963.0], [99.8, 17794.0], [99.9, 18994.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 137.0, "series": [{"data": [[2200.0, 63.0], [2300.0, 92.0], [2400.0, 102.0], [2500.0, 32.0], [2600.0, 42.0], [2700.0, 51.0], [2800.0, 38.0], [2900.0, 38.0], [3000.0, 59.0], [3100.0, 73.0], [3300.0, 62.0], [3200.0, 41.0], [3400.0, 52.0], [3500.0, 56.0], [3600.0, 50.0], [3700.0, 54.0], [3800.0, 69.0], [3900.0, 57.0], [4000.0, 58.0], [4100.0, 62.0], [4300.0, 64.0], [4200.0, 54.0], [4400.0, 76.0], [4600.0, 98.0], [4500.0, 81.0], [4700.0, 94.0], [4800.0, 82.0], [4900.0, 93.0], [5000.0, 108.0], [5100.0, 100.0], [5200.0, 96.0], [5300.0, 104.0], [5600.0, 137.0], [5500.0, 123.0], [5400.0, 116.0], [5700.0, 131.0], [5800.0, 119.0], [5900.0, 121.0], [6100.0, 97.0], [6000.0, 107.0], [6200.0, 82.0], [6300.0, 107.0], [6400.0, 119.0], [6600.0, 81.0], [6500.0, 114.0], [6900.0, 74.0], [6800.0, 74.0], [6700.0, 76.0], [7000.0, 77.0], [7100.0, 79.0], [7300.0, 83.0], [7200.0, 87.0], [7400.0, 49.0], [7600.0, 61.0], [7500.0, 53.0], [7700.0, 62.0], [7900.0, 58.0], [7800.0, 49.0], [8000.0, 47.0], [8100.0, 43.0], [8400.0, 29.0], [8600.0, 14.0], [8500.0, 25.0], [8300.0, 35.0], [8700.0, 28.0], [8200.0, 29.0], [8800.0, 18.0], [9200.0, 19.0], [9000.0, 20.0], [8900.0, 20.0], [9100.0, 16.0], [9400.0, 19.0], [9300.0, 20.0], [9600.0, 18.0], [9700.0, 11.0], [9500.0, 17.0], [9800.0, 8.0], [10000.0, 8.0], [10200.0, 8.0], [9900.0, 12.0], [10100.0, 8.0], [10600.0, 4.0], [10500.0, 7.0], [10400.0, 6.0], [10300.0, 16.0], [10700.0, 7.0], [10800.0, 7.0], [10900.0, 9.0], [11000.0, 2.0], [11100.0, 3.0], [11200.0, 3.0], [11400.0, 2.0], [11300.0, 7.0], [11600.0, 4.0], [11500.0, 3.0], [11700.0, 4.0], [11900.0, 10.0], [12000.0, 3.0], [11800.0, 4.0], [12100.0, 1.0], [12200.0, 5.0], [12400.0, 4.0], [12300.0, 5.0], [12500.0, 3.0], [12600.0, 4.0], [12700.0, 1.0], [12900.0, 5.0], [13100.0, 2.0], [13300.0, 4.0], [12800.0, 3.0], [13200.0, 2.0], [13000.0, 2.0], [13700.0, 5.0], [13800.0, 1.0], [13500.0, 5.0], [13400.0, 3.0], [13600.0, 1.0], [14100.0, 1.0], [14000.0, 2.0], [13900.0, 1.0], [14200.0, 1.0], [14800.0, 1.0], [14700.0, 1.0], [14900.0, 2.0], [15200.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [17600.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [18300.0, 1.0], [17700.0, 1.0], [19200.0, 1.0], [19000.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [22400.0, 1.0], [23200.0, 1.0], [22600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5190.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.705882352941178, "minX": 1.60384734E12, "maxY": 12.0, "series": [{"data": [[1.60384794E12, 12.0], [1.60384824E12, 12.0], [1.60384986E12, 10.705882352941178], [1.60384926E12, 12.0], [1.60384734E12, 12.0], [1.60384956E12, 12.0], [1.60384764E12, 12.0], [1.60384914E12, 12.0], [1.60384944E12, 12.0], [1.60384752E12, 12.0], [1.60384854E12, 12.0], [1.60384884E12, 12.0], [1.60384842E12, 12.0], [1.60384872E12, 12.0], [1.60384782E12, 12.0], [1.60384812E12, 12.0], [1.60384974E12, 12.0], [1.6038477E12, 12.0], [1.603848E12, 12.0], [1.60384962E12, 12.0], [1.60384902E12, 12.0], [1.60384932E12, 12.0], [1.6038474E12, 12.0], [1.6038489E12, 12.0], [1.6038492E12, 12.0], [1.6038483E12, 12.0], [1.6038486E12, 12.0], [1.60384818E12, 12.0], [1.60384848E12, 12.0], [1.60384758E12, 12.0], [1.6038498E12, 12.0], [1.60384788E12, 12.0], [1.6038495E12, 12.0], [1.60384938E12, 12.0], [1.60384746E12, 12.0], [1.60384968E12, 12.0], [1.60384776E12, 12.0], [1.60384878E12, 12.0], [1.60384908E12, 12.0], [1.60384866E12, 12.0], [1.60384896E12, 12.0], [1.60384806E12, 12.0], [1.60384836E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60384986E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4994.0, "minX": 1.0, "maxY": 7171.0, "series": [{"data": [[8.0, 4994.0], [4.0, 7076.0], [2.0, 7171.0], [1.0, 6984.0], [9.0, 6070.0], [10.0, 6336.0], [5.0, 7014.0], [11.0, 6364.0], [12.0, 5850.386754199663], [6.0, 6946.0], [3.0, 7147.0], [7.0, 6904.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.987283236994216, 5852.053757225445]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 392.55, "minX": 1.60384734E12, "maxY": 845078.6833333333, "series": [{"data": [[1.60384794E12, 722967.0833333334], [1.60384824E12, 567277.0833333334], [1.60384986E12, 224653.8], [1.60384926E12, 745387.1], [1.60384734E12, 522041.0], [1.60384956E12, 618994.65], [1.60384764E12, 453760.06666666665], [1.60384914E12, 674444.3], [1.60384944E12, 547360.3833333333], [1.60384752E12, 487961.8], [1.60384854E12, 519153.81666666665], [1.60384884E12, 546538.45], [1.60384842E12, 507107.56666666665], [1.60384872E12, 496328.38333333336], [1.60384782E12, 527339.2166666667], [1.60384812E12, 700349.4666666667], [1.60384974E12, 567163.9], [1.6038477E12, 408612.8], [1.603848E12, 692874.7], [1.60384962E12, 518059.63333333336], [1.60384902E12, 358247.5333333333], [1.60384932E12, 606540.8333333334], [1.6038474E12, 678131.3], [1.6038489E12, 554289.6333333333], [1.6038492E12, 764966.9833333333], [1.6038483E12, 489402.81666666665], [1.6038486E12, 643018.05], [1.60384818E12, 555724.9166666666], [1.60384848E12, 455700.11666666664], [1.60384758E12, 654607.5166666667], [1.6038498E12, 502929.93333333335], [1.60384788E12, 769246.1666666666], [1.6038495E12, 502575.6666666667], [1.60384938E12, 567068.1166666667], [1.60384746E12, 502242.5333333333], [1.60384968E12, 504895.81666666665], [1.60384776E12, 331175.98333333334], [1.60384878E12, 539535.5166666667], [1.60384908E12, 460142.15], [1.60384866E12, 665494.4666666667], [1.60384896E12, 333177.6], [1.60384806E12, 639947.6166666667], [1.60384836E12, 845078.6833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60384794E12, 892.2], [1.60384824E12, 921.0833333333334], [1.60384986E12, 392.55], [1.60384926E12, 830.1166666666667], [1.60384734E12, 570.45], [1.60384956E12, 904.1666666666666], [1.60384764E12, 816.3666666666667], [1.60384914E12, 762.6333333333333], [1.60384944E12, 937.75], [1.60384752E12, 815.0833333333334], [1.60384854E12, 675.85], [1.60384884E12, 883.7666666666667], [1.60384842E12, 1256.1833333333334], [1.60384872E12, 1011.4833333333333], [1.60384782E12, 884.5333333333333], [1.60384812E12, 1101.1333333333334], [1.60384974E12, 736.85], [1.6038477E12, 787.4833333333333], [1.603848E12, 1049.3666666666666], [1.60384962E12, 1132.05], [1.60384902E12, 1328.6666666666667], [1.60384932E12, 1044.85], [1.6038474E12, 537.8], [1.6038489E12, 905.1833333333333], [1.6038492E12, 830.5333333333333], [1.6038483E12, 1112.1166666666666], [1.6038486E12, 854.7], [1.60384818E12, 762.5], [1.60384848E12, 781.4833333333333], [1.60384758E12, 1052.5333333333333], [1.6038498E12, 773.45], [1.60384788E12, 769.2166666666667], [1.6038495E12, 887.8166666666667], [1.60384938E12, 1222.05], [1.60384746E12, 1014.6833333333333], [1.60384968E12, 1157.5833333333333], [1.60384776E12, 1383.0333333333333], [1.60384878E12, 877.1333333333333], [1.60384908E12, 1048.2666666666667], [1.60384866E12, 517.2], [1.60384896E12, 600.65], [1.60384806E12, 987.2333333333333], [1.60384836E12, 767.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60384986E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3788.538043478261, "minX": 1.60384734E12, "maxY": 9360.693333333333, "series": [{"data": [[1.60384794E12, 6382.111111111111], [1.60384824E12, 6141.9416666666675], [1.60384986E12, 6956.980392156862], [1.60384926E12, 6618.01834862385], [1.60384734E12, 6582.026666666667], [1.60384956E12, 6177.415254237288], [1.60384764E12, 6159.4774774774805], [1.60384914E12, 6850.754901960785], [1.60384944E12, 5615.349593495934], [1.60384752E12, 6221.547008547009], [1.60384854E12, 7863.311111111111], [1.60384884E12, 5938.819672131149], [1.60384842E12, 4303.449101796407], [1.60384872E12, 5393.30985915493], [1.60384782E12, 5699.642857142856], [1.60384812E12, 4933.034246575346], [1.60384974E12, 7230.500000000001], [1.6038477E12, 6979.872727272728], [1.603848E12, 5059.100719424461], [1.60384962E12, 4678.693333333332], [1.60384902E12, 3987.895604395604], [1.60384932E12, 5009.927536231886], [1.6038474E12, 9360.693333333333], [1.6038489E12, 5753.89344262295], [1.6038492E12, 6646.321100917431], [1.6038483E12, 4956.448979591835], [1.6038486E12, 6401.205357142858], [1.60384818E12, 7102.653465346532], [1.60384848E12, 6978.714285714286], [1.60384758E12, 5031.167832167833], [1.6038498E12, 6880.451923076925], [1.60384788E12, 7052.950495049507], [1.6038495E12, 6231.111111111111], [1.60384938E12, 4724.932098765432], [1.60384746E12, 5309.356643356642], [1.60384968E12, 4799.424836601304], [1.60384776E12, 3788.538043478261], [1.60384878E12, 5595.687999999997], [1.60384908E12, 4846.364864864865], [1.60384866E12, 9307.109589041098], [1.60384896E12, 9140.614457831329], [1.60384806E12, 5456.553846153848], [1.60384836E12, 7140.760000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60384986E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3787.6250000000014, "minX": 1.60384734E12, "maxY": 9356.519999999999, "series": [{"data": [[1.60384794E12, 6379.230769230769], [1.60384824E12, 6139.958333333333], [1.60384986E12, 6955.352941176471], [1.60384926E12, 6615.486238532109], [1.60384734E12, 6578.920000000002], [1.60384956E12, 6175.313559322033], [1.60384764E12, 6157.54954954955], [1.60384914E12, 6848.039215686276], [1.60384944E12, 5613.585365853659], [1.60384752E12, 6219.683760683762], [1.60384854E12, 7860.922222222222], [1.60384884E12, 5936.549180327868], [1.60384842E12, 4302.215568862277], [1.60384872E12, 5391.8239436619715], [1.60384782E12, 5697.666666666667], [1.60384812E12, 4930.643835616435], [1.60384974E12, 7228.224489795917], [1.6038477E12, 6978.045454545455], [1.603848E12, 5056.791366906472], [1.60384962E12, 4677.320000000001], [1.60384902E12, 3987.0549450549443], [1.60384932E12, 5008.188405797099], [1.6038474E12, 9356.519999999999], [1.6038489E12, 5751.975409836067], [1.6038492E12, 6643.577981651379], [1.6038483E12, 4955.10884353741], [1.6038486E12, 6398.705357142857], [1.60384818E12, 7100.2178217821765], [1.60384848E12, 6976.933333333332], [1.60384758E12, 5029.013986013987], [1.6038498E12, 6878.53846153846], [1.60384788E12, 7049.405940594061], [1.6038495E12, 6229.410256410255], [1.60384938E12, 4723.67901234568], [1.60384746E12, 5307.699300699303], [1.60384968E12, 4798.1372549019625], [1.60384776E12, 3787.6250000000014], [1.60384878E12, 5594.023999999999], [1.60384908E12, 4845.02027027027], [1.60384866E12, 9303.356164383562], [1.60384896E12, 9138.963855421685], [1.60384806E12, 5454.292307692307], [1.60384836E12, 7137.149999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60384986E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.052287581699346414, "minX": 1.60384734E12, "maxY": 1.3200000000000003, "series": [{"data": [[1.60384794E12, 0.15384615384615385], [1.60384824E12, 0.10833333333333335], [1.60384986E12, 0.17647058823529413], [1.60384926E12, 0.11926605504587155], [1.60384734E12, 1.3200000000000003], [1.60384956E12, 0.07627118644067792], [1.60384764E12, 0.1261261261261261], [1.60384914E12, 0.11764705882352941], [1.60384944E12, 0.09756097560975609], [1.60384752E12, 0.14529914529914528], [1.60384854E12, 0.1222222222222223], [1.60384884E12, 0.12295081967213128], [1.60384842E12, 0.0658682634730539], [1.60384872E12, 0.08450704225352115], [1.60384782E12, 0.11111111111111115], [1.60384812E12, 0.10958904109589042], [1.60384974E12, 0.11224489795918373], [1.6038477E12, 0.12727272727272726], [1.603848E12, 0.11510791366906475], [1.60384962E12, 0.06666666666666665], [1.60384902E12, 0.07142857142857144], [1.60384932E12, 0.08695652173913046], [1.6038474E12, 0.21333333333333335], [1.6038489E12, 0.10655737704918036], [1.6038492E12, 0.08256880733944955], [1.6038483E12, 0.10884353741496601], [1.6038486E12, 0.08928571428571425], [1.60384818E12, 0.0891089108910891], [1.60384848E12, 0.11428571428571427], [1.60384758E12, 0.097902097902098], [1.6038498E12, 0.1057692307692308], [1.60384788E12, 0.12871287128712872], [1.6038495E12, 0.09401709401709402], [1.60384938E12, 0.08641975308641972], [1.60384746E12, 0.09090909090909094], [1.60384968E12, 0.052287581699346414], [1.60384776E12, 0.07608695652173912], [1.60384878E12, 0.11200000000000003], [1.60384908E12, 0.10135135135135134], [1.60384866E12, 0.1917808219178082], [1.60384896E12, 0.14457831325301204], [1.60384806E12, 0.10000000000000003], [1.60384836E12, 0.11000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60384986E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2200.0, "minX": 1.60384734E12, "maxY": 23278.0, "series": [{"data": [[1.60384794E12, 8409.0], [1.60384824E12, 9061.0], [1.60384986E12, 9325.0], [1.60384926E12, 8954.0], [1.60384734E12, 9432.0], [1.60384956E12, 9038.0], [1.60384764E12, 10738.0], [1.60384914E12, 9490.0], [1.60384944E12, 8353.0], [1.60384752E12, 14927.0], [1.60384854E12, 14214.0], [1.60384884E12, 13659.0], [1.60384842E12, 7696.0], [1.60384872E12, 14045.0], [1.60384782E12, 10532.0], [1.60384812E12, 10562.0], [1.60384974E12, 12572.0], [1.6038477E12, 12311.0], [1.603848E12, 7769.0], [1.60384962E12, 10505.0], [1.60384902E12, 6584.0], [1.60384932E12, 7582.0], [1.6038474E12, 15898.0], [1.6038489E12, 13474.0], [1.6038492E12, 9576.0], [1.6038483E12, 8208.0], [1.6038486E12, 8293.0], [1.60384818E12, 9861.0], [1.60384848E12, 13728.0], [1.60384758E12, 7781.0], [1.6038498E12, 11168.0], [1.60384788E12, 10456.0], [1.6038495E12, 8768.0], [1.60384938E12, 8764.0], [1.60384746E12, 15440.0], [1.60384968E12, 9988.0], [1.60384776E12, 9319.0], [1.60384878E12, 10929.0], [1.60384908E12, 8069.0], [1.60384866E12, 23278.0], [1.60384896E12, 13232.0], [1.60384806E12, 10848.0], [1.60384836E12, 12503.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60384794E12, 3836.879993247986], [1.60384824E12, 4220.532994316816], [1.60384986E12, 4977.0], [1.60384926E12, 3333.0], [1.60384734E12, 3348.0], [1.60384956E12, 4419.697998921871], [1.60384764E12, 3441.5199982643126], [1.60384914E12, 3503.0], [1.60384944E12, 2263.623984804153], [1.60384752E12, 2438.045999071598], [1.60384854E12, 3596.0], [1.60384884E12, 3378.004993695021], [1.60384842E12, 2211.023999919891], [1.60384872E12, 2320.0], [1.60384782E12, 3080.315993580818], [1.60384812E12, 2324.6149998247624], [1.60384974E12, 3792.0], [1.6038477E12, 3459.0], [1.603848E12, 2921.2399925231935], [1.60384962E12, 2390.0769998919964], [1.60384902E12, 2201.940999869108], [1.60384932E12, 2402.25099996686], [1.6038474E12, 5298.0], [1.6038489E12, 3402.6839937829973], [1.6038492E12, 4622.0], [1.6038483E12, 2271.323999752998], [1.6038486E12, 3647.2159933185576], [1.60384818E12, 4325.0], [1.60384848E12, 3800.0], [1.60384758E12, 3133.2959999656678], [1.6038498E12, 3544.0], [1.60384788E12, 4122.0], [1.6038495E12, 2783.4879993247987], [1.60384938E12, 2381.20299965024], [1.60384746E12, 2207.8879998970033], [1.60384968E12, 2214.929999816418], [1.60384776E12, 2287.6499995589256], [1.60384878E12, 2475.6759935712817], [1.60384908E12, 2373.3869997513293], [1.60384866E12, 4480.0], [1.60384896E12, 4071.0], [1.60384806E12, 2363.3579999375343], [1.60384836E12, 4053.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60384794E12, 3862.368002700806], [1.60384824E12, 4241.986302273273], [1.60384986E12, 4977.0], [1.60384926E12, 3341.2770009756086], [1.60384734E12, 3348.0], [1.60384956E12, 4423.767800431251], [1.60384764E12, 3448.0720006942747], [1.60384914E12, 3507.0188020038604], [1.60384944E12, 2320.9864060783384], [1.60384752E12, 2441.550600371361], [1.60384854E12, 3596.0], [1.60384884E12, 3401.805502521992], [1.60384842E12, 2211.3264000320432], [1.60384872E12, 2320.0], [1.60384782E12, 3104.5476025676726], [1.60384812E12, 2325.276500070095], [1.60384974E12, 3792.0], [1.6038477E12, 3480.659102318287], [1.603848E12, 2949.4640029907227], [1.60384962E12, 2390.4847000432014], [1.60384902E12, 2202.4351000523566], [1.60384932E12, 2402.3761000132563], [1.6038474E12, 5298.0], [1.6038489E12, 3426.1524024868013], [1.6038492E12, 4623.780000209808], [1.6038483E12, 2272.2564000988004], [1.6038486E12, 3672.4376026725768], [1.60384818E12, 4328.26340323925], [1.60384848E12, 3819.6612040233613], [1.60384758E12, 3133.425600013733], [1.6038498E12, 3547.318000841141], [1.60384788E12, 4122.058800058365], [1.6038495E12, 2786.0368002700807], [1.60384938E12, 2382.523300139904], [1.60384746E12, 2208.276800041199], [1.60384968E12, 2215.623000073433], [1.60384776E12, 2289.3150001764297], [1.60384878E12, 2499.9436025714876], [1.60384908E12, 2374.325700099468], [1.60384866E12, 4480.0], [1.60384896E12, 4071.0], [1.60384806E12, 2363.593800024986], [1.60384836E12, 4053.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60384794E12, 3851.039996623993], [1.60384824E12, 4232.4514971584085], [1.60384986E12, 4977.0], [1.60384926E12, 3337.184998780489], [1.60384734E12, 3348.0], [1.60384956E12, 4421.958999460936], [1.60384764E12, 3445.1599991321564], [1.60384914E12, 3503.0], [1.60384944E12, 2295.491992402077], [1.60384752E12, 2439.992999535799], [1.60384854E12, 3596.0], [1.60384884E12, 3391.2274968475103], [1.60384842E12, 2211.191999959946], [1.60384872E12, 2320.0], [1.60384782E12, 3093.777996790409], [1.60384812E12, 2324.982499912381], [1.60384974E12, 3792.0], [1.6038477E12, 3470.935497102141], [1.603848E12, 2936.9199962615967], [1.60384962E12, 2390.3034999459983], [1.60384902E12, 2202.215499934554], [1.60384932E12, 2402.3204999834297], [1.6038474E12, 5298.0], [1.6038489E12, 3415.7219968914987], [1.6038492E12, 4622.89999973774], [1.6038483E12, 2271.8419998764994], [1.6038486E12, 3661.2279966592787], [1.60384818E12, 4325.0], [1.60384848E12, 3802.7859949707986], [1.60384758E12, 3133.3679999828337], [1.6038498E12, 3544.0], [1.60384788E12, 4122.0], [1.6038495E12, 2784.903999662399], [1.60384938E12, 2381.93649982512], [1.60384746E12, 2208.1039999485015], [1.60384968E12, 2215.314999908209], [1.60384776E12, 2288.574999779463], [1.60384878E12, 2489.1579967856405], [1.60384908E12, 2373.908499875665], [1.60384866E12, 4480.0], [1.60384896E12, 4071.0], [1.60384806E12, 2363.488999968767], [1.60384836E12, 4053.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60384794E12, 3822.0], [1.60384824E12, 4203.0], [1.60384986E12, 4977.0], [1.60384926E12, 3333.0], [1.60384734E12, 3348.0], [1.60384956E12, 4417.0], [1.60384764E12, 3441.0], [1.60384914E12, 3503.0], [1.60384944E12, 2204.0], [1.60384752E12, 2436.0], [1.60384854E12, 3596.0], [1.60384884E12, 3355.0], [1.60384842E12, 2210.0], [1.60384872E12, 2320.0], [1.60384782E12, 3050.0], [1.60384812E12, 2323.0], [1.60384974E12, 3792.0], [1.6038477E12, 3459.0], [1.603848E12, 2863.0], [1.60384962E12, 2389.0], [1.60384902E12, 2200.0], [1.60384932E12, 2402.0], [1.6038474E12, 5298.0], [1.6038489E12, 3380.0], [1.6038492E12, 4622.0], [1.6038483E12, 2269.0], [1.6038486E12, 3643.0], [1.60384818E12, 4325.0], [1.60384848E12, 3800.0], [1.60384758E12, 3133.0], [1.6038498E12, 3544.0], [1.60384788E12, 4122.0], [1.6038495E12, 2782.0], [1.60384938E12, 2377.0], [1.60384746E12, 2207.0], [1.60384968E12, 2213.0], [1.60384776E12, 2281.0], [1.60384878E12, 2447.0], [1.60384908E12, 2371.0], [1.60384866E12, 4480.0], [1.60384896E12, 4071.0], [1.60384806E12, 2363.0], [1.60384836E12, 4053.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60384794E12, 6529.0], [1.60384824E12, 5826.5], [1.60384986E12, 7014.0], [1.60384926E12, 6550.0], [1.60384734E12, 6694.0], [1.60384956E12, 6060.0], [1.60384764E12, 5763.0], [1.60384914E12, 7002.0], [1.60384944E12, 5976.0], [1.60384752E12, 5594.0], [1.60384854E12, 7572.0], [1.60384884E12, 5087.5], [1.60384842E12, 3791.0], [1.60384872E12, 5312.5], [1.60384782E12, 5210.0], [1.60384812E12, 4854.0], [1.60384974E12, 6765.5], [1.6038477E12, 6762.5], [1.603848E12, 5148.0], [1.60384962E12, 3945.5], [1.60384902E12, 4138.0], [1.60384932E12, 5553.5], [1.6038474E12, 8794.0], [1.6038489E12, 5155.5], [1.6038492E12, 6521.0], [1.6038483E12, 3941.0], [1.6038486E12, 6457.5], [1.60384818E12, 7394.0], [1.60384848E12, 6402.0], [1.60384758E12, 4686.0], [1.6038498E12, 6981.5], [1.60384788E12, 7314.0], [1.6038495E12, 6267.0], [1.60384938E12, 4623.0], [1.60384746E12, 5127.0], [1.60384968E12, 4861.0], [1.60384776E12, 3181.5], [1.60384878E12, 5501.0], [1.60384908E12, 4743.0], [1.60384866E12, 7459.0], [1.60384896E12, 9182.0], [1.60384806E12, 5626.0], [1.60384836E12, 6477.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60384986E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2413.0, "minX": 1.0, "maxY": 7006.0, "series": [{"data": [[1.0, 7006.0], [2.0, 6226.5], [4.0, 4585.0], [5.0, 3051.0], [3.0, 5725.5], [6.0, 2413.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2412.5, "minX": 1.0, "maxY": 7003.0, "series": [{"data": [[1.0, 7003.0], [2.0, 6224.5], [4.0, 4584.5], [5.0, 3051.0], [3.0, 5725.0], [6.0, 2412.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.60384734E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60384794E12, 1.95], [1.60384824E12, 2.0], [1.60384986E12, 0.65], [1.60384926E12, 1.8166666666666667], [1.60384734E12, 1.45], [1.60384956E12, 1.9666666666666666], [1.60384764E12, 1.85], [1.60384914E12, 1.7], [1.60384944E12, 2.05], [1.60384752E12, 1.95], [1.60384854E12, 1.5], [1.60384884E12, 2.033333333333333], [1.60384842E12, 2.783333333333333], [1.60384872E12, 2.3666666666666667], [1.60384782E12, 2.1], [1.60384812E12, 2.433333333333333], [1.60384974E12, 1.6333333333333333], [1.6038477E12, 1.8333333333333333], [1.603848E12, 2.316666666666667], [1.60384962E12, 2.5], [1.60384902E12, 3.033333333333333], [1.60384932E12, 2.3], [1.6038474E12, 1.25], [1.6038489E12, 2.033333333333333], [1.6038492E12, 1.8166666666666667], [1.6038483E12, 2.45], [1.6038486E12, 1.8666666666666667], [1.60384818E12, 1.6833333333333333], [1.60384848E12, 1.75], [1.60384758E12, 2.3833333333333333], [1.6038498E12, 1.7333333333333334], [1.60384788E12, 1.6833333333333333], [1.6038495E12, 1.95], [1.60384938E12, 2.7], [1.60384746E12, 2.3833333333333333], [1.60384968E12, 2.55], [1.60384776E12, 3.066666666666667], [1.60384878E12, 2.0833333333333335], [1.60384908E12, 2.466666666666667], [1.60384866E12, 1.2166666666666666], [1.60384896E12, 1.3833333333333333], [1.60384806E12, 2.1666666666666665], [1.60384836E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60384986E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.60384734E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60384794E12, 1.95], [1.60384824E12, 2.0], [1.60384986E12, 0.85], [1.60384926E12, 1.8166666666666667], [1.60384734E12, 1.25], [1.60384956E12, 1.9666666666666666], [1.60384764E12, 1.85], [1.60384914E12, 1.7], [1.60384944E12, 2.05], [1.60384752E12, 1.95], [1.60384854E12, 1.5], [1.60384884E12, 2.033333333333333], [1.60384842E12, 2.783333333333333], [1.60384872E12, 2.3666666666666667], [1.60384782E12, 2.1], [1.60384812E12, 2.433333333333333], [1.60384974E12, 1.6333333333333333], [1.6038477E12, 1.8333333333333333], [1.603848E12, 2.316666666666667], [1.60384962E12, 2.5], [1.60384902E12, 3.033333333333333], [1.60384932E12, 2.3], [1.6038474E12, 1.25], [1.6038489E12, 2.033333333333333], [1.6038492E12, 1.8166666666666667], [1.6038483E12, 2.45], [1.6038486E12, 1.8666666666666667], [1.60384818E12, 1.6833333333333333], [1.60384848E12, 1.75], [1.60384758E12, 2.3833333333333333], [1.6038498E12, 1.7333333333333334], [1.60384788E12, 1.6833333333333333], [1.6038495E12, 1.95], [1.60384938E12, 2.7], [1.60384746E12, 2.3833333333333333], [1.60384968E12, 2.55], [1.60384776E12, 3.066666666666667], [1.60384878E12, 2.0833333333333335], [1.60384908E12, 2.466666666666667], [1.60384866E12, 1.2166666666666666], [1.60384896E12, 1.3833333333333333], [1.60384806E12, 2.1666666666666665], [1.60384836E12, 1.6666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60384986E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.60384734E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60384794E12, 1.95], [1.60384824E12, 2.0], [1.60384986E12, 0.85], [1.60384926E12, 1.8166666666666667], [1.60384734E12, 1.25], [1.60384956E12, 1.9666666666666666], [1.60384764E12, 1.85], [1.60384914E12, 1.7], [1.60384944E12, 2.05], [1.60384752E12, 1.95], [1.60384854E12, 1.5], [1.60384884E12, 2.033333333333333], [1.60384842E12, 2.783333333333333], [1.60384872E12, 2.3666666666666667], [1.60384782E12, 2.1], [1.60384812E12, 2.433333333333333], [1.60384974E12, 1.6333333333333333], [1.6038477E12, 1.8333333333333333], [1.603848E12, 2.316666666666667], [1.60384962E12, 2.5], [1.60384902E12, 3.033333333333333], [1.60384932E12, 2.3], [1.6038474E12, 1.25], [1.6038489E12, 2.033333333333333], [1.6038492E12, 1.8166666666666667], [1.6038483E12, 2.45], [1.6038486E12, 1.8666666666666667], [1.60384818E12, 1.6833333333333333], [1.60384848E12, 1.75], [1.60384758E12, 2.3833333333333333], [1.6038498E12, 1.7333333333333334], [1.60384788E12, 1.6833333333333333], [1.6038495E12, 1.95], [1.60384938E12, 2.7], [1.60384746E12, 2.3833333333333333], [1.60384968E12, 2.55], [1.60384776E12, 3.066666666666667], [1.60384878E12, 2.0833333333333335], [1.60384908E12, 2.466666666666667], [1.60384866E12, 1.2166666666666666], [1.60384896E12, 1.3833333333333333], [1.60384806E12, 2.1666666666666665], [1.60384836E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60384986E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.60384734E12, "maxY": 3.066666666666667, "series": [{"data": [[1.60384794E12, 1.95], [1.60384824E12, 2.0], [1.60384986E12, 0.85], [1.60384926E12, 1.8166666666666667], [1.60384734E12, 1.25], [1.60384956E12, 1.9666666666666666], [1.60384764E12, 1.85], [1.60384914E12, 1.7], [1.60384944E12, 2.05], [1.60384752E12, 1.95], [1.60384854E12, 1.5], [1.60384884E12, 2.033333333333333], [1.60384842E12, 2.783333333333333], [1.60384872E12, 2.3666666666666667], [1.60384782E12, 2.1], [1.60384812E12, 2.433333333333333], [1.60384974E12, 1.6333333333333333], [1.6038477E12, 1.8333333333333333], [1.603848E12, 2.316666666666667], [1.60384962E12, 2.5], [1.60384902E12, 3.033333333333333], [1.60384932E12, 2.3], [1.6038474E12, 1.25], [1.6038489E12, 2.033333333333333], [1.6038492E12, 1.8166666666666667], [1.6038483E12, 2.45], [1.6038486E12, 1.8666666666666667], [1.60384818E12, 1.6833333333333333], [1.60384848E12, 1.75], [1.60384758E12, 2.3833333333333333], [1.6038498E12, 1.7333333333333334], [1.60384788E12, 1.6833333333333333], [1.6038495E12, 1.95], [1.60384938E12, 2.7], [1.60384746E12, 2.3833333333333333], [1.60384968E12, 2.55], [1.60384776E12, 3.066666666666667], [1.60384878E12, 2.0833333333333335], [1.60384908E12, 2.466666666666667], [1.60384866E12, 1.2166666666666666], [1.60384896E12, 1.3833333333333333], [1.60384806E12, 2.1666666666666665], [1.60384836E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60384986E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

