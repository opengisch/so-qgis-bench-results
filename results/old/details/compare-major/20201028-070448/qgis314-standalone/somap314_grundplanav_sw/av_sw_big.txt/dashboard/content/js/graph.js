/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 191.0, "minX": 0.0, "maxY": 308578.0, "series": [{"data": [[0.0, 191.0], [0.1, 201.0], [0.2, 204.0], [0.3, 206.0], [0.4, 209.0], [0.5, 210.0], [0.6, 213.0], [0.7, 215.0], [0.8, 216.0], [0.9, 218.0], [1.0, 219.0], [1.1, 221.0], [1.2, 223.0], [1.3, 225.0], [1.4, 226.0], [1.5, 227.0], [1.6, 228.0], [1.7, 228.0], [1.8, 229.0], [1.9, 230.0], [2.0, 230.0], [2.1, 231.0], [2.2, 231.0], [2.3, 232.0], [2.4, 233.0], [2.5, 234.0], [2.6, 234.0], [2.7, 234.0], [2.8, 236.0], [2.9, 236.0], [3.0, 236.0], [3.1, 237.0], [3.2, 238.0], [3.3, 238.0], [3.4, 240.0], [3.5, 240.0], [3.6, 241.0], [3.7, 241.0], [3.8, 241.0], [3.9, 241.0], [4.0, 242.0], [4.1, 242.0], [4.2, 243.0], [4.3, 243.0], [4.4, 243.0], [4.5, 244.0], [4.6, 244.0], [4.7, 245.0], [4.8, 245.0], [4.9, 246.0], [5.0, 246.0], [5.1, 247.0], [5.2, 247.0], [5.3, 248.0], [5.4, 248.0], [5.5, 248.0], [5.6, 249.0], [5.7, 249.0], [5.8, 250.0], [5.9, 251.0], [6.0, 251.0], [6.1, 251.0], [6.2, 251.0], [6.3, 252.0], [6.4, 252.0], [6.5, 252.0], [6.6, 253.0], [6.7, 254.0], [6.8, 255.0], [6.9, 256.0], [7.0, 256.0], [7.1, 257.0], [7.2, 257.0], [7.3, 258.0], [7.4, 258.0], [7.5, 258.0], [7.6, 259.0], [7.7, 259.0], [7.8, 260.0], [7.9, 260.0], [8.0, 261.0], [8.1, 261.0], [8.2, 262.0], [8.3, 263.0], [8.4, 263.0], [8.5, 264.0], [8.6, 264.0], [8.7, 265.0], [8.8, 266.0], [8.9, 266.0], [9.0, 266.0], [9.1, 267.0], [9.2, 269.0], [9.3, 270.0], [9.4, 271.0], [9.5, 272.0], [9.6, 272.0], [9.7, 274.0], [9.8, 275.0], [9.9, 276.0], [10.0, 277.0], [10.1, 278.0], [10.2, 280.0], [10.3, 281.0], [10.4, 282.0], [10.5, 283.0], [10.6, 284.0], [10.7, 285.0], [10.8, 286.0], [10.9, 287.0], [11.0, 288.0], [11.1, 289.0], [11.2, 291.0], [11.3, 292.0], [11.4, 293.0], [11.5, 295.0], [11.6, 296.0], [11.7, 298.0], [11.8, 299.0], [11.9, 301.0], [12.0, 302.0], [12.1, 303.0], [12.2, 304.0], [12.3, 305.0], [12.4, 306.0], [12.5, 306.0], [12.6, 307.0], [12.7, 309.0], [12.8, 310.0], [12.9, 311.0], [13.0, 312.0], [13.1, 313.0], [13.2, 313.0], [13.3, 316.0], [13.4, 316.0], [13.5, 318.0], [13.6, 319.0], [13.7, 320.0], [13.8, 321.0], [13.9, 321.0], [14.0, 323.0], [14.1, 323.0], [14.2, 324.0], [14.3, 324.0], [14.4, 325.0], [14.5, 326.0], [14.6, 326.0], [14.7, 327.0], [14.8, 328.0], [14.9, 328.0], [15.0, 329.0], [15.1, 330.0], [15.2, 331.0], [15.3, 332.0], [15.4, 332.0], [15.5, 333.0], [15.6, 333.0], [15.7, 333.0], [15.8, 334.0], [15.9, 335.0], [16.0, 335.0], [16.1, 336.0], [16.2, 336.0], [16.3, 337.0], [16.4, 337.0], [16.5, 338.0], [16.6, 339.0], [16.7, 339.0], [16.8, 339.0], [16.9, 340.0], [17.0, 340.0], [17.1, 341.0], [17.2, 341.0], [17.3, 342.0], [17.4, 342.0], [17.5, 343.0], [17.6, 343.0], [17.7, 344.0], [17.8, 345.0], [17.9, 346.0], [18.0, 346.0], [18.1, 347.0], [18.2, 347.0], [18.3, 348.0], [18.4, 348.0], [18.5, 349.0], [18.6, 349.0], [18.7, 350.0], [18.8, 350.0], [18.9, 351.0], [19.0, 351.0], [19.1, 352.0], [19.2, 352.0], [19.3, 353.0], [19.4, 353.0], [19.5, 354.0], [19.6, 354.0], [19.7, 355.0], [19.8, 356.0], [19.9, 356.0], [20.0, 357.0], [20.1, 358.0], [20.2, 358.0], [20.3, 359.0], [20.4, 360.0], [20.5, 360.0], [20.6, 361.0], [20.7, 361.0], [20.8, 362.0], [20.9, 363.0], [21.0, 364.0], [21.1, 364.0], [21.2, 365.0], [21.3, 366.0], [21.4, 366.0], [21.5, 367.0], [21.6, 368.0], [21.7, 369.0], [21.8, 370.0], [21.9, 371.0], [22.0, 371.0], [22.1, 372.0], [22.2, 373.0], [22.3, 374.0], [22.4, 374.0], [22.5, 375.0], [22.6, 376.0], [22.7, 376.0], [22.8, 377.0], [22.9, 377.0], [23.0, 378.0], [23.1, 379.0], [23.2, 380.0], [23.3, 381.0], [23.4, 382.0], [23.5, 383.0], [23.6, 384.0], [23.7, 385.0], [23.8, 385.0], [23.9, 386.0], [24.0, 387.0], [24.1, 388.0], [24.2, 388.0], [24.3, 389.0], [24.4, 390.0], [24.5, 391.0], [24.6, 391.0], [24.7, 392.0], [24.8, 393.0], [24.9, 394.0], [25.0, 394.0], [25.1, 396.0], [25.2, 397.0], [25.3, 397.0], [25.4, 398.0], [25.5, 398.0], [25.6, 400.0], [25.7, 401.0], [25.8, 401.0], [25.9, 403.0], [26.0, 404.0], [26.1, 405.0], [26.2, 406.0], [26.3, 407.0], [26.4, 409.0], [26.5, 410.0], [26.6, 410.0], [26.7, 410.0], [26.8, 411.0], [26.9, 413.0], [27.0, 414.0], [27.1, 416.0], [27.2, 418.0], [27.3, 419.0], [27.4, 421.0], [27.5, 422.0], [27.6, 423.0], [27.7, 424.0], [27.8, 425.0], [27.9, 426.0], [28.0, 426.0], [28.1, 427.0], [28.2, 428.0], [28.3, 428.0], [28.4, 431.0], [28.5, 432.0], [28.6, 433.0], [28.7, 433.0], [28.8, 434.0], [28.9, 435.0], [29.0, 436.0], [29.1, 439.0], [29.2, 440.0], [29.3, 441.0], [29.4, 443.0], [29.5, 444.0], [29.6, 446.0], [29.7, 447.0], [29.8, 448.0], [29.9, 448.0], [30.0, 449.0], [30.1, 450.0], [30.2, 452.0], [30.3, 453.0], [30.4, 456.0], [30.5, 457.0], [30.6, 458.0], [30.7, 459.0], [30.8, 459.0], [30.9, 461.0], [31.0, 463.0], [31.1, 464.0], [31.2, 466.0], [31.3, 466.0], [31.4, 467.0], [31.5, 468.0], [31.6, 470.0], [31.7, 471.0], [31.8, 473.0], [31.9, 475.0], [32.0, 477.0], [32.1, 478.0], [32.2, 480.0], [32.3, 480.0], [32.4, 481.0], [32.5, 483.0], [32.6, 486.0], [32.7, 487.0], [32.8, 488.0], [32.9, 489.0], [33.0, 491.0], [33.1, 493.0], [33.2, 495.0], [33.3, 495.0], [33.4, 496.0], [33.5, 497.0], [33.6, 498.0], [33.7, 499.0], [33.8, 501.0], [33.9, 502.0], [34.0, 503.0], [34.1, 505.0], [34.2, 505.0], [34.3, 507.0], [34.4, 509.0], [34.5, 510.0], [34.6, 512.0], [34.7, 514.0], [34.8, 515.0], [34.9, 517.0], [35.0, 518.0], [35.1, 519.0], [35.2, 521.0], [35.3, 522.0], [35.4, 524.0], [35.5, 526.0], [35.6, 527.0], [35.7, 529.0], [35.8, 531.0], [35.9, 532.0], [36.0, 533.0], [36.1, 534.0], [36.2, 535.0], [36.3, 537.0], [36.4, 538.0], [36.5, 539.0], [36.6, 540.0], [36.7, 542.0], [36.8, 543.0], [36.9, 546.0], [37.0, 547.0], [37.1, 550.0], [37.2, 550.0], [37.3, 551.0], [37.4, 552.0], [37.5, 554.0], [37.6, 555.0], [37.7, 557.0], [37.8, 558.0], [37.9, 560.0], [38.0, 562.0], [38.1, 565.0], [38.2, 567.0], [38.3, 568.0], [38.4, 569.0], [38.5, 572.0], [38.6, 574.0], [38.7, 575.0], [38.8, 576.0], [38.9, 576.0], [39.0, 579.0], [39.1, 580.0], [39.2, 582.0], [39.3, 583.0], [39.4, 584.0], [39.5, 586.0], [39.6, 587.0], [39.7, 588.0], [39.8, 591.0], [39.9, 592.0], [40.0, 595.0], [40.1, 596.0], [40.2, 597.0], [40.3, 600.0], [40.4, 600.0], [40.5, 602.0], [40.6, 603.0], [40.7, 604.0], [40.8, 605.0], [40.9, 606.0], [41.0, 608.0], [41.1, 609.0], [41.2, 610.0], [41.3, 611.0], [41.4, 613.0], [41.5, 614.0], [41.6, 616.0], [41.7, 618.0], [41.8, 619.0], [41.9, 620.0], [42.0, 622.0], [42.1, 623.0], [42.2, 626.0], [42.3, 628.0], [42.4, 629.0], [42.5, 630.0], [42.6, 631.0], [42.7, 633.0], [42.8, 634.0], [42.9, 635.0], [43.0, 637.0], [43.1, 638.0], [43.2, 640.0], [43.3, 643.0], [43.4, 644.0], [43.5, 646.0], [43.6, 647.0], [43.7, 648.0], [43.8, 650.0], [43.9, 652.0], [44.0, 654.0], [44.1, 655.0], [44.2, 657.0], [44.3, 658.0], [44.4, 660.0], [44.5, 662.0], [44.6, 663.0], [44.7, 666.0], [44.8, 669.0], [44.9, 669.0], [45.0, 670.0], [45.1, 672.0], [45.2, 674.0], [45.3, 675.0], [45.4, 676.0], [45.5, 678.0], [45.6, 679.0], [45.7, 681.0], [45.8, 684.0], [45.9, 685.0], [46.0, 687.0], [46.1, 689.0], [46.2, 691.0], [46.3, 692.0], [46.4, 696.0], [46.5, 697.0], [46.6, 698.0], [46.7, 700.0], [46.8, 702.0], [46.9, 705.0], [47.0, 706.0], [47.1, 707.0], [47.2, 708.0], [47.3, 710.0], [47.4, 713.0], [47.5, 717.0], [47.6, 719.0], [47.7, 721.0], [47.8, 722.0], [47.9, 723.0], [48.0, 726.0], [48.1, 728.0], [48.2, 729.0], [48.3, 731.0], [48.4, 732.0], [48.5, 734.0], [48.6, 737.0], [48.7, 738.0], [48.8, 741.0], [48.9, 742.0], [49.0, 745.0], [49.1, 747.0], [49.2, 748.0], [49.3, 749.0], [49.4, 750.0], [49.5, 752.0], [49.6, 754.0], [49.7, 757.0], [49.8, 758.0], [49.9, 760.0], [50.0, 762.0], [50.1, 763.0], [50.2, 767.0], [50.3, 768.0], [50.4, 769.0], [50.5, 770.0], [50.6, 773.0], [50.7, 777.0], [50.8, 781.0], [50.9, 782.0], [51.0, 783.0], [51.1, 787.0], [51.2, 788.0], [51.3, 790.0], [51.4, 792.0], [51.5, 793.0], [51.6, 797.0], [51.7, 800.0], [51.8, 802.0], [51.9, 804.0], [52.0, 806.0], [52.1, 808.0], [52.2, 809.0], [52.3, 811.0], [52.4, 814.0], [52.5, 817.0], [52.6, 820.0], [52.7, 825.0], [52.8, 828.0], [52.9, 829.0], [53.0, 831.0], [53.1, 832.0], [53.2, 833.0], [53.3, 835.0], [53.4, 837.0], [53.5, 840.0], [53.6, 843.0], [53.7, 845.0], [53.8, 847.0], [53.9, 850.0], [54.0, 853.0], [54.1, 856.0], [54.2, 859.0], [54.3, 861.0], [54.4, 864.0], [54.5, 868.0], [54.6, 869.0], [54.7, 872.0], [54.8, 875.0], [54.9, 878.0], [55.0, 880.0], [55.1, 883.0], [55.2, 886.0], [55.3, 887.0], [55.4, 889.0], [55.5, 892.0], [55.6, 895.0], [55.7, 897.0], [55.8, 899.0], [55.9, 901.0], [56.0, 905.0], [56.1, 909.0], [56.2, 911.0], [56.3, 913.0], [56.4, 916.0], [56.5, 918.0], [56.6, 922.0], [56.7, 924.0], [56.8, 925.0], [56.9, 928.0], [57.0, 929.0], [57.1, 934.0], [57.2, 937.0], [57.3, 939.0], [57.4, 942.0], [57.5, 945.0], [57.6, 948.0], [57.7, 950.0], [57.8, 952.0], [57.9, 954.0], [58.0, 956.0], [58.1, 960.0], [58.2, 963.0], [58.3, 966.0], [58.4, 968.0], [58.5, 973.0], [58.6, 977.0], [58.7, 980.0], [58.8, 983.0], [58.9, 986.0], [59.0, 987.0], [59.1, 989.0], [59.2, 993.0], [59.3, 995.0], [59.4, 998.0], [59.5, 999.0], [59.6, 1000.0], [59.7, 1005.0], [59.8, 1007.0], [59.9, 1009.0], [60.0, 1013.0], [60.1, 1016.0], [60.2, 1022.0], [60.3, 1025.0], [60.4, 1029.0], [60.5, 1030.0], [60.6, 1033.0], [60.7, 1034.0], [60.8, 1037.0], [60.9, 1040.0], [61.0, 1043.0], [61.1, 1047.0], [61.2, 1049.0], [61.3, 1052.0], [61.4, 1055.0], [61.5, 1057.0], [61.6, 1059.0], [61.7, 1061.0], [61.8, 1063.0], [61.9, 1065.0], [62.0, 1068.0], [62.1, 1072.0], [62.2, 1077.0], [62.3, 1083.0], [62.4, 1085.0], [62.5, 1092.0], [62.6, 1098.0], [62.7, 1099.0], [62.8, 1101.0], [62.9, 1104.0], [63.0, 1107.0], [63.1, 1112.0], [63.2, 1120.0], [63.3, 1123.0], [63.4, 1124.0], [63.5, 1127.0], [63.6, 1129.0], [63.7, 1135.0], [63.8, 1137.0], [63.9, 1140.0], [64.0, 1143.0], [64.1, 1145.0], [64.2, 1148.0], [64.3, 1150.0], [64.4, 1153.0], [64.5, 1155.0], [64.6, 1158.0], [64.7, 1160.0], [64.8, 1165.0], [64.9, 1168.0], [65.0, 1173.0], [65.1, 1176.0], [65.2, 1179.0], [65.3, 1186.0], [65.4, 1191.0], [65.5, 1194.0], [65.6, 1198.0], [65.7, 1201.0], [65.8, 1203.0], [65.9, 1206.0], [66.0, 1209.0], [66.1, 1213.0], [66.2, 1217.0], [66.3, 1218.0], [66.4, 1223.0], [66.5, 1227.0], [66.6, 1232.0], [66.7, 1234.0], [66.8, 1236.0], [66.9, 1239.0], [67.0, 1241.0], [67.1, 1245.0], [67.2, 1247.0], [67.3, 1249.0], [67.4, 1256.0], [67.5, 1259.0], [67.6, 1262.0], [67.7, 1269.0], [67.8, 1273.0], [67.9, 1280.0], [68.0, 1283.0], [68.1, 1286.0], [68.2, 1292.0], [68.3, 1293.0], [68.4, 1295.0], [68.5, 1298.0], [68.6, 1301.0], [68.7, 1303.0], [68.8, 1307.0], [68.9, 1313.0], [69.0, 1321.0], [69.1, 1327.0], [69.2, 1330.0], [69.3, 1332.0], [69.4, 1336.0], [69.5, 1340.0], [69.6, 1345.0], [69.7, 1348.0], [69.8, 1350.0], [69.9, 1359.0], [70.0, 1366.0], [70.1, 1370.0], [70.2, 1372.0], [70.3, 1376.0], [70.4, 1380.0], [70.5, 1384.0], [70.6, 1387.0], [70.7, 1392.0], [70.8, 1399.0], [70.9, 1406.0], [71.0, 1413.0], [71.1, 1416.0], [71.2, 1424.0], [71.3, 1430.0], [71.4, 1433.0], [71.5, 1442.0], [71.6, 1453.0], [71.7, 1457.0], [71.8, 1461.0], [71.9, 1466.0], [72.0, 1469.0], [72.1, 1473.0], [72.2, 1477.0], [72.3, 1482.0], [72.4, 1486.0], [72.5, 1491.0], [72.6, 1494.0], [72.7, 1502.0], [72.8, 1507.0], [72.9, 1510.0], [73.0, 1517.0], [73.1, 1523.0], [73.2, 1529.0], [73.3, 1532.0], [73.4, 1535.0], [73.5, 1537.0], [73.6, 1539.0], [73.7, 1547.0], [73.8, 1554.0], [73.9, 1562.0], [74.0, 1566.0], [74.1, 1568.0], [74.2, 1579.0], [74.3, 1584.0], [74.4, 1590.0], [74.5, 1593.0], [74.6, 1595.0], [74.7, 1599.0], [74.8, 1606.0], [74.9, 1612.0], [75.0, 1623.0], [75.1, 1626.0], [75.2, 1630.0], [75.3, 1637.0], [75.4, 1643.0], [75.5, 1647.0], [75.6, 1652.0], [75.7, 1654.0], [75.8, 1663.0], [75.9, 1667.0], [76.0, 1672.0], [76.1, 1676.0], [76.2, 1683.0], [76.3, 1688.0], [76.4, 1695.0], [76.5, 1700.0], [76.6, 1702.0], [76.7, 1708.0], [76.8, 1714.0], [76.9, 1719.0], [77.0, 1724.0], [77.1, 1733.0], [77.2, 1740.0], [77.3, 1745.0], [77.4, 1751.0], [77.5, 1757.0], [77.6, 1761.0], [77.7, 1764.0], [77.8, 1772.0], [77.9, 1776.0], [78.0, 1778.0], [78.1, 1785.0], [78.2, 1790.0], [78.3, 1793.0], [78.4, 1797.0], [78.5, 1804.0], [78.6, 1808.0], [78.7, 1811.0], [78.8, 1815.0], [78.9, 1819.0], [79.0, 1824.0], [79.1, 1830.0], [79.2, 1839.0], [79.3, 1844.0], [79.4, 1856.0], [79.5, 1868.0], [79.6, 1871.0], [79.7, 1873.0], [79.8, 1883.0], [79.9, 1893.0], [80.0, 1904.0], [80.1, 1912.0], [80.2, 1920.0], [80.3, 1925.0], [80.4, 1931.0], [80.5, 1936.0], [80.6, 1942.0], [80.7, 1953.0], [80.8, 1959.0], [80.9, 1968.0], [81.0, 1979.0], [81.1, 1988.0], [81.2, 1996.0], [81.3, 2005.0], [81.4, 2015.0], [81.5, 2025.0], [81.6, 2031.0], [81.7, 2052.0], [81.8, 2063.0], [81.9, 2073.0], [82.0, 2079.0], [82.1, 2090.0], [82.2, 2106.0], [82.3, 2113.0], [82.4, 2127.0], [82.5, 2136.0], [82.6, 2148.0], [82.7, 2162.0], [82.8, 2173.0], [82.9, 2185.0], [83.0, 2191.0], [83.1, 2200.0], [83.2, 2214.0], [83.3, 2226.0], [83.4, 2235.0], [83.5, 2242.0], [83.6, 2250.0], [83.7, 2259.0], [83.8, 2273.0], [83.9, 2277.0], [84.0, 2292.0], [84.1, 2298.0], [84.2, 2306.0], [84.3, 2320.0], [84.4, 2324.0], [84.5, 2335.0], [84.6, 2346.0], [84.7, 2354.0], [84.8, 2370.0], [84.9, 2388.0], [85.0, 2401.0], [85.1, 2426.0], [85.2, 2436.0], [85.3, 2463.0], [85.4, 2468.0], [85.5, 2473.0], [85.6, 2486.0], [85.7, 2494.0], [85.8, 2506.0], [85.9, 2515.0], [86.0, 2524.0], [86.1, 2536.0], [86.2, 2552.0], [86.3, 2566.0], [86.4, 2575.0], [86.5, 2580.0], [86.6, 2589.0], [86.7, 2596.0], [86.8, 2611.0], [86.9, 2638.0], [87.0, 2643.0], [87.1, 2656.0], [87.2, 2678.0], [87.3, 2691.0], [87.4, 2708.0], [87.5, 2732.0], [87.6, 2760.0], [87.7, 2780.0], [87.8, 2786.0], [87.9, 2814.0], [88.0, 2832.0], [88.1, 2853.0], [88.2, 2892.0], [88.3, 2906.0], [88.4, 2926.0], [88.5, 2952.0], [88.6, 2964.0], [88.7, 2975.0], [88.8, 2990.0], [88.9, 3018.0], [89.0, 3040.0], [89.1, 3049.0], [89.2, 3070.0], [89.3, 3101.0], [89.4, 3149.0], [89.5, 3164.0], [89.6, 3187.0], [89.7, 3214.0], [89.8, 3223.0], [89.9, 3249.0], [90.0, 3289.0], [90.1, 3298.0], [90.2, 3339.0], [90.3, 3361.0], [90.4, 3384.0], [90.5, 3425.0], [90.6, 3450.0], [90.7, 3488.0], [90.8, 3517.0], [90.9, 3575.0], [91.0, 3659.0], [91.1, 3704.0], [91.2, 3728.0], [91.3, 3797.0], [91.4, 3834.0], [91.5, 3857.0], [91.6, 3906.0], [91.7, 3939.0], [91.8, 3984.0], [91.9, 3997.0], [92.0, 4088.0], [92.1, 4113.0], [92.2, 4166.0], [92.3, 4213.0], [92.4, 4253.0], [92.5, 4352.0], [92.6, 4426.0], [92.7, 4593.0], [92.8, 4617.0], [92.9, 4695.0], [93.0, 4770.0], [93.1, 4864.0], [93.2, 5059.0], [93.3, 5138.0], [93.4, 5258.0], [93.5, 5528.0], [93.6, 5608.0], [93.7, 5908.0], [93.8, 6129.0], [93.9, 6320.0], [94.0, 6559.0], [94.1, 6910.0], [94.2, 7136.0], [94.3, 7733.0], [94.4, 8504.0], [94.5, 9399.0], [94.6, 10466.0], [94.7, 12913.0], [94.8, 17206.0], [94.9, 25710.0], [95.0, 29845.0], [95.1, 42818.0], [95.2, 53512.0], [95.3, 58768.0], [95.4, 63236.0], [95.5, 65812.0], [95.6, 66881.0], [95.7, 69677.0], [95.8, 70793.0], [95.9, 71106.0], [96.0, 71347.0], [96.1, 71883.0], [96.2, 72263.0], [96.3, 72758.0], [96.4, 73191.0], [96.5, 73519.0], [96.6, 73563.0], [96.7, 73763.0], [96.8, 73968.0], [96.9, 74332.0], [97.0, 74447.0], [97.1, 74487.0], [97.2, 74781.0], [97.3, 74918.0], [97.4, 75045.0], [97.5, 75258.0], [97.6, 75438.0], [97.7, 75698.0], [97.8, 76003.0], [97.9, 76435.0], [98.0, 77519.0], [98.1, 78165.0], [98.2, 78646.0], [98.3, 81594.0], [98.4, 88011.0], [98.5, 90189.0], [98.6, 91316.0], [98.7, 92904.0], [98.8, 116415.0], [98.9, 127040.0], [99.0, 141546.0], [99.1, 142844.0], [99.2, 144304.0], [99.3, 146034.0], [99.4, 147977.0], [99.5, 150149.0], [99.6, 183455.0], [99.7, 211253.0], [99.8, 222600.0], [99.9, 285431.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 711.0, "series": [{"data": [[143200.0, 1.0], [146400.0, 1.0], [168800.0, 1.0], [234400.0, 1.0], [132900.0, 1.0], [144100.0, 1.0], [153700.0, 1.0], [204900.0, 2.0], [222500.0, 1.0], [72300.0, 1.0], [291400.0, 1.0], [70700.0, 1.0], [73100.0, 3.0], [71500.0, 1.0], [69900.0, 1.0], [74700.0, 3.0], [77100.0, 1.0], [75500.0, 3.0], [76300.0, 1.0], [73900.0, 4.0], [80300.0, 1.0], [91500.0, 1.0], [90700.0, 1.0], [118700.0, 1.0], [141800.0, 1.0], [306900.0, 1.0], [183400.0, 1.0], [100.0, 5.0], [144300.0, 1.0], [50900.0, 1.0], [200.0, 610.0], [62500.0, 1.0], [64500.0, 1.0], [64100.0, 1.0], [65800.0, 2.0], [68200.0, 1.0], [72200.0, 1.0], [285400.0, 1.0], [69800.0, 1.0], [300.0, 711.0], [73800.0, 2.0], [74600.0, 3.0], [75400.0, 2.0], [78600.0, 2.0], [87400.0, 1.0], [89800.0, 1.0], [90600.0, 1.0], [100200.0, 1.0], [98600.0, 1.0], [400.0, 424.0], [500.0, 341.0], [145200.0, 1.0], [600.0, 331.0], [700.0, 260.0], [800.0, 216.0], [900.0, 194.0], [1000.0, 164.0], [1100.0, 153.0], [1200.0, 150.0], [1300.0, 116.0], [1400.0, 97.0], [1500.0, 105.0], [1600.0, 93.0], [1700.0, 102.0], [1800.0, 76.0], [1900.0, 69.0], [2000.0, 48.0], [2100.0, 46.0], [2300.0, 46.0], [2200.0, 54.0], [2400.0, 39.0], [2500.0, 51.0], [2600.0, 33.0], [2700.0, 25.0], [2800.0, 19.0], [2900.0, 32.0], [3000.0, 24.0], [3100.0, 18.0], [3200.0, 25.0], [3300.0, 15.0], [3400.0, 16.0], [3500.0, 11.0], [3600.0, 9.0], [3700.0, 11.0], [3800.0, 13.0], [3900.0, 18.0], [4000.0, 7.0], [4100.0, 13.0], [4200.0, 8.0], [4300.0, 5.0], [66500.0, 1.0], [68900.0, 1.0], [4600.0, 10.0], [4400.0, 5.0], [72100.0, 2.0], [4500.0, 4.0], [71300.0, 3.0], [72900.0, 2.0], [73700.0, 1.0], [4800.0, 6.0], [77700.0, 2.0], [4700.0, 5.0], [76100.0, 4.0], [75300.0, 1.0], [4900.0, 3.0], [5000.0, 4.0], [5100.0, 4.0], [5200.0, 4.0], [5300.0, 4.0], [5600.0, 4.0], [5500.0, 4.0], [88900.0, 1.0], [5700.0, 2.0], [92900.0, 1.0], [91300.0, 1.0], [5800.0, 1.0], [6000.0, 3.0], [5900.0, 1.0], [6100.0, 5.0], [6300.0, 1.0], [6200.0, 1.0], [6400.0, 3.0], [6500.0, 3.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 2.0], [7000.0, 3.0], [7100.0, 1.0], [7400.0, 2.0], [7200.0, 1.0], [7500.0, 2.0], [7700.0, 2.0], [7800.0, 2.0], [124100.0, 1.0], [8100.0, 1.0], [8600.0, 2.0], [8500.0, 2.0], [8700.0, 1.0], [145400.0, 1.0], [9400.0, 1.0], [9700.0, 1.0], [307700.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10200.0, 1.0], [10700.0, 1.0], [10400.0, 1.0], [11000.0, 1.0], [11900.0, 1.0], [11800.0, 1.0], [13000.0, 1.0], [12900.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15300.0, 2.0], [17200.0, 1.0], [18600.0, 1.0], [19200.0, 1.0], [25200.0, 1.0], [26000.0, 1.0], [29400.0, 1.0], [29800.0, 1.0], [144700.0, 2.0], [141500.0, 1.0], [147900.0, 1.0], [42400.0, 1.0], [42800.0, 1.0], [54000.0, 1.0], [60800.0, 1.0], [63200.0, 1.0], [65200.0, 1.0], [68800.0, 1.0], [69600.0, 3.0], [66400.0, 1.0], [286200.0, 1.0], [71200.0, 1.0], [73600.0, 3.0], [72000.0, 2.0], [72800.0, 1.0], [70400.0, 1.0], [74400.0, 9.0], [77600.0, 2.0], [75200.0, 4.0], [76000.0, 1.0], [78400.0, 3.0], [85600.0, 1.0], [88800.0, 1.0], [88000.0, 1.0], [92000.0, 1.0], [120000.0, 1.0], [129600.0, 1.0], [134400.0, 1.0], [142400.0, 2.0], [211200.0, 1.0], [141700.0, 1.0], [148100.0, 1.0], [73500.0, 7.0], [71100.0, 2.0], [70300.0, 1.0], [72700.0, 1.0], [283400.0, 1.0], [75900.0, 2.0], [77500.0, 1.0], [74300.0, 4.0], [75100.0, 1.0], [81500.0, 1.0], [79100.0, 1.0], [84700.0, 1.0], [91900.0, 1.0], [90300.0, 1.0], [107900.0, 1.0], [121500.0, 1.0], [144200.0, 1.0], [308500.0, 1.0], [149000.0, 1.0], [208200.0, 1.0], [217800.0, 1.0], [222600.0, 1.0], [284700.0, 1.0], [44300.0, 1.0], [209100.0, 1.0], [51500.0, 1.0], [220300.0, 1.0], [53500.0, 1.0], [55100.0, 1.0], [56300.0, 1.0], [58700.0, 2.0], [73400.0, 2.0], [71800.0, 2.0], [71000.0, 3.0], [75000.0, 5.0], [76600.0, 1.0], [75800.0, 1.0], [90200.0, 1.0], [127000.0, 1.0], [139600.0, 1.0], [146000.0, 1.0], [141200.0, 1.0], [142800.0, 2.0], [147600.0, 1.0], [174800.0, 1.0], [148500.0, 2.0], [150100.0, 1.0], [72500.0, 1.0], [73300.0, 1.0], [284200.0, 1.0], [74900.0, 8.0], [75700.0, 1.0], [77300.0, 1.0], [74100.0, 1.0], [78900.0, 1.0], [78100.0, 1.0], [83700.0, 1.0], [90100.0, 1.0], [92500.0, 1.0], [147800.0, 2.0], [149400.0, 1.0], [211800.0, 1.0], [21100.0, 1.0], [25700.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [32500.0, 1.0], [37800.0, 1.0], [158300.0, 1.0], [41000.0, 1.0], [53800.0, 1.0], [53400.0, 1.0], [55800.0, 1.0], [61000.0, 1.0], [63800.0, 1.0], [66800.0, 2.0], [73200.0, 1.0], [72400.0, 2.0], [71600.0, 2.0], [70800.0, 1.0], [77200.0, 1.0], [75600.0, 1.0], [74000.0, 1.0], [76400.0, 1.0], [79600.0, 1.0], [88400.0, 1.0], [89200.0, 1.0], [107600.0, 1.0], [116400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 308500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1417.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2022.0, "series": [{"data": [[0.0, 1751.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2022.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1417.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.25, "minX": 1.6038729E12, "maxY": 10.0, "series": [{"data": [[1.60387344E12, 10.0], [1.60387506E12, 10.0], [1.60387446E12, 10.0], [1.60387386E12, 10.0], [1.60387608E12, 3.25], [1.60387326E12, 10.0], [1.60387548E12, 10.0], [1.60387362E12, 10.0], [1.60387584E12, 10.0], [1.60387302E12, 10.0], [1.60387524E12, 10.0], [1.60387464E12, 10.0], [1.60387404E12, 10.0], [1.60387566E12, 10.0], [1.6038741E12, 10.0], [1.60387572E12, 10.0], [1.6038735E12, 10.0], [1.6038729E12, 10.0], [1.60387512E12, 10.0], [1.60387452E12, 10.0], [1.60387488E12, 10.0], [1.60387428E12, 10.0], [1.6038759E12, 10.0], [1.60387368E12, 10.0], [1.6038753E12, 10.0], [1.60387308E12, 10.0], [1.6038747E12, 10.0], [1.60387314E12, 10.0], [1.60387536E12, 10.0], [1.60387476E12, 10.0], [1.60387416E12, 10.0], [1.60387578E12, 10.0], [1.60387356E12, 10.0], [1.60387392E12, 10.0], [1.60387554E12, 10.0], [1.60387332E12, 10.0], [1.60387494E12, 10.0], [1.60387374E12, 10.0], [1.60387596E12, 10.0], [1.6038744E12, 10.0], [1.60387602E12, 9.75862068965517], [1.6038738E12, 10.0], [1.60387542E12, 10.0], [1.60387422E12, 10.0], [1.60387458E12, 10.0], [1.60387296E12, 10.0], [1.60387398E12, 10.0], [1.60387338E12, 10.0], [1.6038756E12, 10.0], [1.603875E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60387608E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 298.0, "minX": 1.0, "maxY": 71006.66666666667, "series": [{"data": [[8.0, 570.0], [4.0, 71006.66666666667], [1.0, 70413.0], [10.0, 6015.979737553059], [5.0, 2929.0], [6.0, 3810.0], [7.0, 298.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.992100192678226, 6062.783622350665]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.933333333333334, "minX": 1.6038729E12, "maxY": 2635942.9, "series": [{"data": [[1.60387344E12, 71.8], [1.60387506E12, 287.26666666666665], [1.60387446E12, 1395097.6333333333], [1.60387386E12, 4888.233333333334], [1.60387608E12, 6084.416666666667], [1.60387326E12, 307508.1], [1.60387548E12, 58963.5], [1.60387362E12, 23191.016666666666], [1.60387584E12, 30579.35], [1.60387302E12, 1026493.1], [1.60387524E12, 23047.45], [1.60387464E12, 1001883.1], [1.60387404E12, 22744.9], [1.60387566E12, 483399.65], [1.6038741E12, 22477.666666666668], [1.60387572E12, 357.1], [1.6038735E12, 359.0], [1.6038729E12, 2019270.3166666667], [1.60387512E12, 878.5666666666667], [1.60387452E12, 2326853.433333333], [1.60387488E12, 204439.78333333333], [1.60387428E12, 66275.13333333333], [1.6038759E12, 113971.08333333333], [1.60387368E12, 14555.883333333333], [1.6038753E12, 70611.05], [1.60387308E12, 2365863.933333333], [1.6038747E12, 2109970.183333333], [1.60387314E12, 2223331.183333333], [1.60387536E12, 2910.4333333333334], [1.60387476E12, 2635942.9], [1.60387416E12, 99476.71666666666], [1.60387578E12, 204459.91666666666], [1.60387356E12, 7356.2], [1.60387392E12, 215.4], [1.60387554E12, 7741.45], [1.60387332E12, 26046.616666666665], [1.60387494E12, 29397.566666666666], [1.60387374E12, 50255.36666666667], [1.60387596E12, 1824979.55], [1.6038744E12, 318169.76666666666], [1.60387602E12, 259315.15], [1.6038738E12, 10619.416666666666], [1.60387542E12, 28161.7], [1.60387422E12, 422315.63333333336], [1.60387458E12, 914594.7], [1.60387296E12, 243311.95], [1.60387398E12, 18260.266666666666], [1.60387338E12, 359.1333333333333], [1.6038756E12, 53285.51666666667], [1.603875E12, 21665.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60387344E12, 7.933333333333334], [1.60387506E12, 31.733333333333334], [1.60387446E12, 2199.5666666666666], [1.60387386E12, 77.5], [1.60387608E12, 31.733333333333334], [1.60387326E12, 363.3666666666667], [1.60387548E12, 187.81666666666666], [1.60387362E12, 69.53333333333333], [1.60387584E12, 271.95], [1.60387302E12, 1838.6666666666667], [1.60387524E12, 110.03333333333333], [1.60387464E12, 1742.7666666666667], [1.60387404E12, 124.51666666666667], [1.60387566E12, 772.6833333333333], [1.6038741E12, 102.53333333333333], [1.60387572E12, 31.683333333333334], [1.6038735E12, 39.666666666666664], [1.6038729E12, 2798.7166666666667], [1.60387512E12, 47.61666666666667], [1.60387452E12, 2917.95], [1.60387488E12, 355.53333333333336], [1.60387428E12, 70.93333333333334], [1.6038759E12, 417.76666666666665], [1.60387368E12, 54.016666666666666], [1.6038753E12, 215.2], [1.60387308E12, 4305.666666666667], [1.6038747E12, 4209.6], [1.60387314E12, 3588.8], [1.60387536E12, 30.566666666666666], [1.60387476E12, 4224.9], [1.60387416E12, 182.06666666666666], [1.60387578E12, 431.26666666666665], [1.60387356E12, 71.48333333333333], [1.60387392E12, 22.6], [1.60387554E12, 39.333333333333336], [1.60387332E12, 47.36666666666667], [1.60387494E12, 47.68333333333333], [1.60387374E12, 91.35], [1.60387596E12, 2982.516666666667], [1.6038744E12, 987.5666666666667], [1.60387602E12, 456.8333333333333], [1.6038738E12, 37.46666666666667], [1.60387542E12, 54.583333333333336], [1.60387422E12, 682.0], [1.60387458E12, 1820.1333333333334], [1.60387296E12, 332.95], [1.60387398E12, 53.983333333333334], [1.60387338E12, 39.666666666666664], [1.6038756E12, 127.13333333333334], [1.603875E12, 39.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60387608E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 650.2222222222225, "minX": 1.6038729E12, "maxY": 246511.33333333334, "series": [{"data": [[1.60387344E12, 75963.0], [1.60387506E12, 89415.5], [1.60387446E12, 3682.4503546099277], [1.60387386E12, 141622.6], [1.60387608E12, 70858.25], [1.60387326E12, 20594.239130434777], [1.60387548E12, 54522.20833333334], [1.60387362E12, 61568.77777777778], [1.60387584E12, 19195.62857142857], [1.60387302E12, 4701.442148760331], [1.60387524E12, 64496.07142857143], [1.60387464E12, 4091.9739130434727], [1.60387404E12, 64995.18750000001], [1.60387566E12, 10383.714285714284], [1.6038741E12, 25460.53846153846], [1.60387572E12, 73312.5], [1.6038735E12, 78535.4], [1.6038729E12, 1346.9655172413802], [1.60387512E12, 246511.33333333334], [1.60387452E12, 1578.228346456693], [1.60387488E12, 16825.555555555547], [1.60387428E12, 68400.0], [1.6038759E12, 650.2222222222225], [1.60387368E12, 67174.28571428571], [1.6038753E12, 33232.7857142857], [1.60387308E12, 1073.3086419753092], [1.6038747E12, 1084.800000000001], [1.60387314E12, 1011.9217391304342], [1.60387536E12, 55486.75], [1.60387476E12, 1008.5360443622919], [1.60387416E12, 13461.260869565214], [1.60387578E12, 21827.472727272732], [1.60387356E12, 180359.33333333334], [1.60387392E12, 76749.33333333333], [1.60387554E12, 34240.2], [1.60387332E12, 76664.66666666666], [1.60387494E12, 74105.0], [1.60387374E12, 15644.166666666668], [1.60387596E12, 2961.979166666669], [1.6038744E12, 7792.047244094489], [1.60387602E12, 1724.2758620689658], [1.6038738E12, 37158.6], [1.60387542E12, 50173.42857142858], [1.60387422E12, 13694.732558139536], [1.60387458E12, 998.1767068273091], [1.60387296E12, 1282.7608695652173], [1.60387398E12, 119165.57142857142], [1.60387338E12, 90640.4], [1.6038756E12, 27986.875000000004], [1.603875E12, 59700.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60387608E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 630.1851851851853, "minX": 1.6038729E12, "maxY": 246511.33333333334, "series": [{"data": [[1.60387344E12, 75962.0], [1.60387506E12, 89415.25], [1.60387446E12, 3636.1276595744685], [1.60387386E12, 141622.3], [1.60387608E12, 70857.75], [1.60387326E12, 20541.239130434784], [1.60387548E12, 54507.41666666667], [1.60387362E12, 61567.333333333336], [1.60387584E12, 19185.11428571429], [1.60387302E12, 4661.698347107439], [1.60387524E12, 64495.35714285714], [1.60387464E12, 4057.0826086956563], [1.60387404E12, 64994.375], [1.60387566E12, 10336.38775510204], [1.6038741E12, 25459.69230769231], [1.60387572E12, 73312.5], [1.6038735E12, 78535.4], [1.6038729E12, 1289.9893899204244], [1.60387512E12, 246511.33333333334], [1.60387452E12, 1526.7979002624668], [1.60387488E12, 16776.555555555562], [1.60387428E12, 68333.66666666669], [1.6038759E12, 630.1851851851853], [1.60387368E12, 67173.71428571429], [1.6038753E12, 33230.75000000001], [1.60387308E12, 1027.218694885361], [1.6038747E12, 1045.417857142857], [1.60387314E12, 957.6521739130434], [1.60387536E12, 55486.5], [1.60387476E12, 959.8724584103516], [1.60387416E12, 13452.347826086954], [1.60387578E12, 21805.163636363643], [1.60387356E12, 180333.77777777778], [1.60387392E12, 76749.0], [1.60387554E12, 34191.2], [1.60387332E12, 76661.83333333333], [1.60387494E12, 74077.0], [1.60387374E12, 15642.749999999998], [1.60387596E12, 2930.5963541666642], [1.6038744E12, 7756.267716535433], [1.60387602E12, 1689.2241379310346], [1.6038738E12, 37157.6], [1.60387542E12, 50172.28571428571], [1.60387422E12, 13635.511627906979], [1.60387458E12, 954.3614457831322], [1.60387296E12, 1268.2826086956522], [1.60387398E12, 119164.57142857143], [1.60387338E12, 90640.4], [1.6038756E12, 27985.875], [1.603875E12, 59698.8]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60387608E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.6038729E12, "maxY": 1.8, "series": [{"data": [[1.60387344E12, 1.0], [1.60387506E12, 1.5], [1.60387446E12, 0.6950354609929081], [1.60387386E12, 1.0], [1.60387608E12, 0.25], [1.60387326E12, 0.8043478260869564], [1.60387548E12, 0.5000000000000001], [1.60387362E12, 0.5555555555555556], [1.60387584E12, 1.2285714285714289], [1.60387302E12, 0.9256198347107438], [1.60387524E12, 0.8571428571428571], [1.60387464E12, 1.0434782608695659], [1.60387404E12, 0.6874999999999999], [1.60387566E12, 0.6020408163265305], [1.6038741E12, 1.0000000000000002], [1.60387572E12, 0.75], [1.6038735E12, 1.0], [1.6038729E12, 1.3129973474801073], [1.60387512E12, 0.5], [1.60387452E12, 0.590551181102362], [1.60387488E12, 0.5111111111111111], [1.60387428E12, 0.3333333333333333], [1.6038759E12, 0.6111111111111112], [1.60387368E12, 0.2857142857142857], [1.6038753E12, 0.6785714285714285], [1.60387308E12, 0.7513227513227506], [1.6038747E12, 0.6267857142857151], [1.60387314E12, 0.6304347826086959], [1.60387536E12, 0.25], [1.60387476E12, 0.5157116451016635], [1.60387416E12, 0.6086956521739133], [1.60387578E12, 0.5818181818181817], [1.60387356E12, 0.5555555555555556], [1.60387392E12, 0.33333333333333337], [1.60387554E12, 0.8], [1.60387332E12, 0.33333333333333337], [1.60387494E12, 0.5], [1.60387374E12, 0.75], [1.60387596E12, 0.53125], [1.6038744E12, 0.6062992125984255], [1.60387602E12, 0.5862068965517242], [1.6038738E12, 1.0], [1.60387542E12, 0.7142857142857143], [1.60387422E12, 1.1162790697674418], [1.60387458E12, 0.5863453815261045], [1.60387296E12, 0.9130434782608693], [1.60387398E12, 1.0], [1.60387338E12, 1.8], [1.6038756E12, 0.5], [1.603875E12, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60387608E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 191.0, "minX": 1.6038729E12, "maxY": 308578.0, "series": [{"data": [[1.60387344E12, 75963.0], [1.60387506E12, 142452.0], [1.60387446E12, 76134.0], [1.60387386E12, 291426.0], [1.60387608E12, 71688.0], [1.60387326E12, 92904.0], [1.60387548E12, 211817.0], [1.60387362E12, 148536.0], [1.60387584E12, 72812.0], [1.60387302E12, 92516.0], [1.60387524E12, 146481.0], [1.60387464E12, 75968.0], [1.60387404E12, 222600.0], [1.60387566E12, 144290.0], [1.6038741E12, 144762.0], [1.60387572E12, 73564.0], [1.6038735E12, 78935.0], [1.6038729E12, 11938.0], [1.60387512E12, 285431.0], [1.60387452E12, 9801.0], [1.60387488E12, 73963.0], [1.60387428E12, 79166.0], [1.6038759E12, 2237.0], [1.60387368E12, 147977.0], [1.6038753E12, 145494.0], [1.60387308E12, 6407.0], [1.6038747E12, 5604.0], [1.60387314E12, 5547.0], [1.60387536E12, 74332.0], [1.60387476E12, 4482.0], [1.60387416E12, 75290.0], [1.60387578E12, 149484.0], [1.60387356E12, 308578.0], [1.60387392E12, 77604.0], [1.60387554E12, 74602.0], [1.60387332E12, 91316.0], [1.60387494E12, 76435.0], [1.60387374E12, 76686.0], [1.60387596E12, 75273.0], [1.6038744E12, 150149.0], [1.60387602E12, 7898.0], [1.6038738E12, 75045.0], [1.60387542E12, 145294.0], [1.60387422E12, 217897.0], [1.60387458E12, 6431.0], [1.60387296E12, 6746.0], [1.60387398E12, 220371.0], [1.60387338E12, 147875.0], [1.6038756E12, 74449.0], [1.603875E12, 75438.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60387344E12, 75963.0], [1.60387506E12, 69689.0], [1.60387446E12, 203.54699993252754], [1.60387386E12, 471.0], [1.60387608E12, 69989.0], [1.60387326E12, 326.0], [1.60387548E12, 284.0], [1.60387362E12, 433.0], [1.60387584E12, 249.0], [1.60387302E12, 243.74799976825713], [1.60387524E12, 252.0], [1.60387464E12, 236.47399966955186], [1.60387404E12, 304.0], [1.60387566E12, 223.0], [1.6038741E12, 266.0], [1.60387572E12, 72974.0], [1.6038735E12, 78165.0], [1.6038729E12, 242.20599972963333], [1.60387512E12, 132925.0], [1.60387452E12, 250.4379999089241], [1.60387488E12, 319.0], [1.60387428E12, 865.0], [1.6038759E12, 220.0], [1.60387368E12, 773.0], [1.6038753E12, 227.0], [1.60387308E12, 217.33599959373475], [1.6038747E12, 227.0], [1.60387314E12, 209.14899989008904], [1.60387536E12, 489.0], [1.60387476E12, 204.0], [1.60387416E12, 333.0], [1.60387578E12, 222.0], [1.60387356E12, 74979.0], [1.60387392E12, 75470.0], [1.60387554E12, 14961.0], [1.60387332E12, 72303.0], [1.60387494E12, 71332.0], [1.60387374E12, 221.0], [1.60387596E12, 204.71999926567076], [1.6038744E12, 216.45599990844727], [1.60387602E12, 240.0], [1.6038738E12, 247.0], [1.60387542E12, 334.0], [1.60387422E12, 250.0], [1.60387458E12, 225.74999982118607], [1.60387296E12, 248.0], [1.60387398E12, 1151.0], [1.60387338E12, 75778.0], [1.6038756E12, 325.0], [1.603875E12, 1405.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60387344E12, 75963.0], [1.60387506E12, 69689.0], [1.60387446E12, 203.80170002698898], [1.60387386E12, 471.0], [1.60387608E12, 69989.0], [1.60387326E12, 326.0], [1.60387548E12, 284.0], [1.60387362E12, 433.0], [1.60387584E12, 249.0], [1.60387302E12, 244.62280009269713], [1.60387524E12, 252.0], [1.60387464E12, 237.72140013217927], [1.60387404E12, 304.0], [1.60387566E12, 223.0], [1.6038741E12, 266.0], [1.60387572E12, 72974.0], [1.6038735E12, 78165.0], [1.6038729E12, 243.22660010814667], [1.60387512E12, 132925.0], [1.60387452E12, 250.78180003643035], [1.60387488E12, 319.0], [1.60387428E12, 865.0], [1.6038759E12, 220.0], [1.60387368E12, 773.0], [1.6038753E12, 227.0], [1.60387308E12, 218.86960016250612], [1.6038747E12, 227.0], [1.60387314E12, 209.5639000439644], [1.60387536E12, 489.0], [1.60387476E12, 205.09740015506745], [1.60387416E12, 333.0], [1.60387578E12, 222.0], [1.60387356E12, 74979.0], [1.60387392E12, 75470.0], [1.60387554E12, 14961.0], [1.60387332E12, 72303.0], [1.60387494E12, 71332.0], [1.60387374E12, 221.0], [1.60387596E12, 207.49200029373168], [1.6038744E12, 216.8016000366211], [1.60387602E12, 240.0], [1.6038738E12, 247.0], [1.60387542E12, 334.0], [1.60387422E12, 250.0], [1.60387458E12, 226.42500007152557], [1.60387296E12, 248.0], [1.60387398E12, 1151.0], [1.60387338E12, 75778.0], [1.6038756E12, 325.0], [1.603875E12, 1405.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60387344E12, 75963.0], [1.60387506E12, 69689.0], [1.60387446E12, 203.68849996626378], [1.60387386E12, 471.0], [1.60387608E12, 69989.0], [1.60387326E12, 326.0], [1.60387548E12, 284.0], [1.60387362E12, 433.0], [1.60387584E12, 249.0], [1.60387302E12, 244.23399988412856], [1.60387524E12, 252.0], [1.60387464E12, 237.16699983477594], [1.60387404E12, 304.0], [1.60387566E12, 223.0], [1.6038741E12, 266.0], [1.60387572E12, 72974.0], [1.6038735E12, 78165.0], [1.6038729E12, 242.77299986481665], [1.60387512E12, 132925.0], [1.60387452E12, 250.62899995446205], [1.60387488E12, 319.0], [1.60387428E12, 865.0], [1.6038759E12, 220.0], [1.60387368E12, 773.0], [1.6038753E12, 227.0], [1.60387308E12, 218.18799979686736], [1.6038747E12, 227.0], [1.60387314E12, 209.37949994504453], [1.60387536E12, 489.0], [1.60387476E12, 204.4469998061657], [1.60387416E12, 333.0], [1.60387578E12, 222.0], [1.60387356E12, 74979.0], [1.60387392E12, 75470.0], [1.60387554E12, 14961.0], [1.60387332E12, 72303.0], [1.60387494E12, 71332.0], [1.60387374E12, 221.0], [1.60387596E12, 206.2599996328354], [1.6038744E12, 216.64799995422362], [1.60387602E12, 240.0], [1.6038738E12, 247.0], [1.60387542E12, 334.0], [1.60387422E12, 250.0], [1.60387458E12, 226.12499991059303], [1.60387296E12, 248.0], [1.60387398E12, 1151.0], [1.60387338E12, 75778.0], [1.6038756E12, 325.0], [1.603875E12, 1405.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60387344E12, 75963.0], [1.60387506E12, 69689.0], [1.60387446E12, 201.0], [1.60387386E12, 471.0], [1.60387608E12, 69989.0], [1.60387326E12, 326.0], [1.60387548E12, 284.0], [1.60387362E12, 433.0], [1.60387584E12, 249.0], [1.60387302E12, 241.0], [1.60387524E12, 252.0], [1.60387464E12, 231.0], [1.60387404E12, 304.0], [1.60387566E12, 223.0], [1.6038741E12, 266.0], [1.60387572E12, 72974.0], [1.6038735E12, 78165.0], [1.6038729E12, 215.0], [1.60387512E12, 132925.0], [1.60387452E12, 233.0], [1.60387488E12, 319.0], [1.60387428E12, 865.0], [1.6038759E12, 220.0], [1.60387368E12, 773.0], [1.6038753E12, 227.0], [1.60387308E12, 205.0], [1.6038747E12, 195.0], [1.60387314E12, 204.0], [1.60387536E12, 489.0], [1.60387476E12, 191.0], [1.60387416E12, 333.0], [1.60387578E12, 222.0], [1.60387356E12, 74979.0], [1.60387392E12, 75470.0], [1.60387554E12, 14961.0], [1.60387332E12, 72303.0], [1.60387494E12, 71332.0], [1.60387374E12, 221.0], [1.60387596E12, 196.0], [1.6038744E12, 216.0], [1.60387602E12, 240.0], [1.6038738E12, 247.0], [1.60387542E12, 334.0], [1.60387422E12, 250.0], [1.60387458E12, 220.0], [1.60387296E12, 248.0], [1.60387398E12, 1151.0], [1.60387338E12, 75778.0], [1.6038756E12, 325.0], [1.603875E12, 1405.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60387344E12, 75963.0], [1.60387506E12, 72760.5], [1.60387446E12, 688.0], [1.60387386E12, 127970.5], [1.60387608E12, 70878.0], [1.60387326E12, 1117.5], [1.60387548E12, 696.5], [1.60387362E12, 74759.0], [1.60387584E12, 602.0], [1.60387302E12, 710.0], [1.60387524E12, 73132.0], [1.60387464E12, 677.0], [1.60387404E12, 22316.0], [1.60387566E12, 743.5], [1.6038741E12, 936.0], [1.60387572E12, 73356.0], [1.6038735E12, 78488.0], [1.6038729E12, 855.0], [1.60387512E12, 283873.5], [1.60387452E12, 951.0], [1.60387488E12, 940.0], [1.60387428E12, 76003.0], [1.6038759E12, 369.0], [1.60387368E12, 65837.0], [1.6038753E12, 14047.5], [1.60387308E12, 668.0], [1.6038747E12, 746.0], [1.60387314E12, 633.5], [1.60387536E12, 73563.0], [1.60387476E12, 670.0], [1.60387416E12, 467.0], [1.60387578E12, 510.0], [1.60387356E12, 158359.0], [1.60387392E12, 77174.0], [1.60387554E12, 15331.0], [1.60387332E12, 74023.5], [1.60387494E12, 74638.0], [1.60387374E12, 1065.0], [1.60387596E12, 766.5], [1.6038744E12, 457.0], [1.60387602E12, 1184.0], [1.6038738E12, 53843.0], [1.60387542E12, 4680.0], [1.60387422E12, 944.5], [1.60387458E12, 749.0], [1.60387296E12, 645.0], [1.60387398E12, 107679.0], [1.60387338E12, 76170.0], [1.6038756E12, 7964.5], [1.603875E12, 73852.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60387608E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 275.0, "minX": 1.0, "maxY": 1433.0, "series": [{"data": [[2.0, 1133.5], [3.0, 1106.5], [4.0, 1146.5], [5.0, 980.0], [6.0, 986.5], [7.0, 801.0], [8.0, 879.5], [9.0, 899.0], [10.0, 931.5], [11.0, 793.0], [12.0, 707.0], [13.0, 690.5], [14.0, 619.0], [15.0, 505.0], [1.0, 1433.0], [16.0, 597.5], [17.0, 423.0], [18.0, 429.5], [19.0, 346.0], [20.0, 332.5], [21.0, 292.0], [22.0, 275.0], [23.0, 377.0], [24.0, 352.5], [25.0, 371.0], [26.0, 287.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 275.0, "minX": 1.0, "maxY": 1422.0, "series": [{"data": [[2.0, 1128.0], [3.0, 1082.0], [4.0, 1131.0], [5.0, 956.0], [6.0, 940.0], [7.0, 773.0], [8.0, 853.0], [9.0, 857.0], [10.0, 855.5], [11.0, 770.0], [12.0, 696.5], [13.0, 682.0], [14.0, 614.0], [15.0, 504.0], [1.0, 1422.0], [16.0, 582.5], [17.0, 422.5], [18.0, 429.5], [19.0, 346.0], [20.0, 332.0], [21.0, 292.0], [22.0, 275.0], [23.0, 377.0], [24.0, 352.5], [25.0, 371.0], [26.0, 287.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038729E12, "maxY": 9.45, "series": [{"data": [[1.60387344E12, 0.016666666666666666], [1.60387506E12, 0.06666666666666667], [1.60387446E12, 4.7], [1.60387386E12, 0.16666666666666666], [1.60387326E12, 0.7666666666666667], [1.60387548E12, 0.4], [1.60387362E12, 0.15], [1.60387584E12, 0.5833333333333334], [1.60387302E12, 4.033333333333333], [1.60387524E12, 0.23333333333333334], [1.60387464E12, 3.8333333333333335], [1.60387404E12, 0.26666666666666666], [1.60387566E12, 1.6333333333333333], [1.6038741E12, 0.21666666666666667], [1.60387572E12, 0.06666666666666667], [1.6038735E12, 0.08333333333333333], [1.6038729E12, 6.45], [1.60387512E12, 0.1], [1.60387452E12, 6.35], [1.60387488E12, 0.75], [1.60387428E12, 0.15], [1.6038759E12, 0.9], [1.60387368E12, 0.11666666666666667], [1.6038753E12, 0.4666666666666667], [1.60387308E12, 9.45], [1.6038747E12, 9.333333333333334], [1.60387314E12, 7.666666666666667], [1.60387536E12, 0.06666666666666667], [1.60387476E12, 9.016666666666667], [1.60387416E12, 0.38333333333333336], [1.60387578E12, 0.9166666666666666], [1.60387356E12, 0.15], [1.60387392E12, 0.05], [1.60387554E12, 0.08333333333333333], [1.60387332E12, 0.1], [1.60387494E12, 0.1], [1.60387374E12, 0.2], [1.60387596E12, 6.4], [1.6038744E12, 2.1166666666666667], [1.60387602E12, 0.8666666666666667], [1.6038738E12, 0.08333333333333333], [1.60387542E12, 0.11666666666666667], [1.60387422E12, 1.4333333333333333], [1.60387458E12, 4.15], [1.60387296E12, 0.7666666666666667], [1.60387398E12, 0.11666666666666667], [1.60387338E12, 0.08333333333333333], [1.6038756E12, 0.26666666666666666], [1.603875E12, 0.08333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60387602E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038729E12, "maxY": 9.45, "series": [{"data": [[1.60387344E12, 0.016666666666666666], [1.60387506E12, 0.06666666666666667], [1.60387446E12, 4.7], [1.60387386E12, 0.16666666666666666], [1.60387608E12, 0.06666666666666667], [1.60387326E12, 0.7666666666666667], [1.60387548E12, 0.4], [1.60387362E12, 0.15], [1.60387584E12, 0.5833333333333334], [1.60387302E12, 4.033333333333333], [1.60387524E12, 0.23333333333333334], [1.60387464E12, 3.8333333333333335], [1.60387404E12, 0.26666666666666666], [1.60387566E12, 1.6333333333333333], [1.6038741E12, 0.21666666666666667], [1.60387572E12, 0.06666666666666667], [1.6038735E12, 0.08333333333333333], [1.6038729E12, 6.283333333333333], [1.60387512E12, 0.1], [1.60387452E12, 6.35], [1.60387488E12, 0.75], [1.60387428E12, 0.15], [1.6038759E12, 0.9], [1.60387368E12, 0.11666666666666667], [1.6038753E12, 0.4666666666666667], [1.60387308E12, 9.45], [1.6038747E12, 9.333333333333334], [1.60387314E12, 7.666666666666667], [1.60387536E12, 0.06666666666666667], [1.60387476E12, 9.016666666666667], [1.60387416E12, 0.38333333333333336], [1.60387578E12, 0.9166666666666666], [1.60387356E12, 0.15], [1.60387392E12, 0.05], [1.60387554E12, 0.08333333333333333], [1.60387332E12, 0.1], [1.60387494E12, 0.1], [1.60387374E12, 0.2], [1.60387596E12, 6.4], [1.6038744E12, 2.1166666666666667], [1.60387602E12, 0.9666666666666667], [1.6038738E12, 0.08333333333333333], [1.60387542E12, 0.11666666666666667], [1.60387422E12, 1.4333333333333333], [1.60387458E12, 4.15], [1.60387296E12, 0.7666666666666667], [1.60387398E12, 0.11666666666666667], [1.60387338E12, 0.08333333333333333], [1.6038756E12, 0.26666666666666666], [1.603875E12, 0.08333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60387608E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038729E12, "maxY": 9.45, "series": [{"data": [[1.60387344E12, 0.016666666666666666], [1.60387506E12, 0.06666666666666667], [1.60387446E12, 4.7], [1.60387386E12, 0.16666666666666666], [1.60387608E12, 0.06666666666666667], [1.60387326E12, 0.7666666666666667], [1.60387548E12, 0.4], [1.60387362E12, 0.15], [1.60387584E12, 0.5833333333333334], [1.60387302E12, 4.033333333333333], [1.60387524E12, 0.23333333333333334], [1.60387464E12, 3.8333333333333335], [1.60387404E12, 0.26666666666666666], [1.60387566E12, 1.6333333333333333], [1.6038741E12, 0.21666666666666667], [1.60387572E12, 0.06666666666666667], [1.6038735E12, 0.08333333333333333], [1.6038729E12, 6.283333333333333], [1.60387512E12, 0.1], [1.60387452E12, 6.35], [1.60387488E12, 0.75], [1.60387428E12, 0.15], [1.6038759E12, 0.9], [1.60387368E12, 0.11666666666666667], [1.6038753E12, 0.4666666666666667], [1.60387308E12, 9.45], [1.6038747E12, 9.333333333333334], [1.60387314E12, 7.666666666666667], [1.60387536E12, 0.06666666666666667], [1.60387476E12, 9.016666666666667], [1.60387416E12, 0.38333333333333336], [1.60387578E12, 0.9166666666666666], [1.60387356E12, 0.15], [1.60387392E12, 0.05], [1.60387554E12, 0.08333333333333333], [1.60387332E12, 0.1], [1.60387494E12, 0.1], [1.60387374E12, 0.2], [1.60387596E12, 6.4], [1.6038744E12, 2.1166666666666667], [1.60387602E12, 0.9666666666666667], [1.6038738E12, 0.08333333333333333], [1.60387542E12, 0.11666666666666667], [1.60387422E12, 1.4333333333333333], [1.60387458E12, 4.15], [1.60387296E12, 0.7666666666666667], [1.60387398E12, 0.11666666666666667], [1.60387338E12, 0.08333333333333333], [1.6038756E12, 0.26666666666666666], [1.603875E12, 0.08333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60387608E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6038729E12, "maxY": 9.45, "series": [{"data": [[1.60387344E12, 0.016666666666666666], [1.60387506E12, 0.06666666666666667], [1.60387446E12, 4.7], [1.60387386E12, 0.16666666666666666], [1.60387608E12, 0.06666666666666667], [1.60387326E12, 0.7666666666666667], [1.60387548E12, 0.4], [1.60387362E12, 0.15], [1.60387584E12, 0.5833333333333334], [1.60387302E12, 4.033333333333333], [1.60387524E12, 0.23333333333333334], [1.60387464E12, 3.8333333333333335], [1.60387404E12, 0.26666666666666666], [1.60387566E12, 1.6333333333333333], [1.6038741E12, 0.21666666666666667], [1.60387572E12, 0.06666666666666667], [1.6038735E12, 0.08333333333333333], [1.6038729E12, 6.283333333333333], [1.60387512E12, 0.1], [1.60387452E12, 6.35], [1.60387488E12, 0.75], [1.60387428E12, 0.15], [1.6038759E12, 0.9], [1.60387368E12, 0.11666666666666667], [1.6038753E12, 0.4666666666666667], [1.60387308E12, 9.45], [1.6038747E12, 9.333333333333334], [1.60387314E12, 7.666666666666667], [1.60387536E12, 0.06666666666666667], [1.60387476E12, 9.016666666666667], [1.60387416E12, 0.38333333333333336], [1.60387578E12, 0.9166666666666666], [1.60387356E12, 0.15], [1.60387392E12, 0.05], [1.60387554E12, 0.08333333333333333], [1.60387332E12, 0.1], [1.60387494E12, 0.1], [1.60387374E12, 0.2], [1.60387596E12, 6.4], [1.6038744E12, 2.1166666666666667], [1.60387602E12, 0.9666666666666667], [1.6038738E12, 0.08333333333333333], [1.60387542E12, 0.11666666666666667], [1.60387422E12, 1.4333333333333333], [1.60387458E12, 4.15], [1.60387296E12, 0.7666666666666667], [1.60387398E12, 0.11666666666666667], [1.60387338E12, 0.08333333333333333], [1.6038756E12, 0.26666666666666666], [1.603875E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60387608E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

