/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3133.0, "minX": 0.0, "maxY": 44311.0, "series": [{"data": [[0.0, 3133.0], [0.1, 3133.0], [0.2, 6228.0], [0.3, 8502.0], [0.4, 8502.0], [0.5, 11412.0], [0.6, 13913.0], [0.7, 16536.0], [0.8, 16536.0], [0.9, 16544.0], [1.0, 16701.0], [1.1, 16775.0], [1.2, 16775.0], [1.3, 16806.0], [1.4, 16873.0], [1.5, 16909.0], [1.6, 16909.0], [1.7, 17003.0], [1.8, 17037.0], [1.9, 17037.0], [2.0, 17164.0], [2.1, 17226.0], [2.2, 17229.0], [2.3, 17229.0], [2.4, 17250.0], [2.5, 17254.0], [2.6, 17300.0], [2.7, 17300.0], [2.8, 17315.0], [2.9, 17328.0], [3.0, 17330.0], [3.1, 17330.0], [3.2, 17340.0], [3.3, 17345.0], [3.4, 17345.0], [3.5, 17352.0], [3.6, 17357.0], [3.7, 17361.0], [3.8, 17361.0], [3.9, 17369.0], [4.0, 17385.0], [4.1, 17422.0], [4.2, 17422.0], [4.3, 17425.0], [4.4, 17432.0], [4.5, 17442.0], [4.6, 17442.0], [4.7, 17455.0], [4.8, 17522.0], [4.9, 17541.0], [5.0, 17541.0], [5.1, 17552.0], [5.2, 17559.0], [5.3, 17559.0], [5.4, 17577.0], [5.5, 17584.0], [5.6, 17689.0], [5.7, 17689.0], [5.8, 17690.0], [5.9, 17724.0], [6.0, 17742.0], [6.1, 17742.0], [6.2, 17766.0], [6.3, 17769.0], [6.4, 17770.0], [6.5, 17770.0], [6.6, 17772.0], [6.7, 17785.0], [6.8, 17785.0], [6.9, 17812.0], [7.0, 17820.0], [7.1, 17825.0], [7.2, 17825.0], [7.3, 17853.0], [7.4, 17854.0], [7.5, 17860.0], [7.6, 17860.0], [7.7, 18008.0], [7.8, 18010.0], [7.9, 18108.0], [8.0, 18108.0], [8.1, 18133.0], [8.2, 18135.0], [8.3, 18150.0], [8.4, 18150.0], [8.5, 18161.0], [8.6, 18175.0], [8.7, 18175.0], [8.8, 18182.0], [8.9, 18235.0], [9.0, 18267.0], [9.1, 18267.0], [9.2, 18370.0], [9.3, 18390.0], [9.4, 18434.0], [9.5, 18434.0], [9.6, 18443.0], [9.7, 18581.0], [9.8, 18599.0], [9.9, 18599.0], [10.0, 18644.0], [10.1, 18709.0], [10.2, 18709.0], [10.3, 18796.0], [10.4, 18840.0], [10.5, 18863.0], [10.6, 18863.0], [10.7, 18887.0], [10.8, 18983.0], [10.9, 18997.0], [11.0, 18997.0], [11.1, 19020.0], [11.2, 19105.0], [11.3, 19120.0], [11.4, 19120.0], [11.5, 19125.0], [11.6, 19135.0], [11.7, 19135.0], [11.8, 19181.0], [11.9, 19186.0], [12.0, 19187.0], [12.1, 19187.0], [12.2, 19200.0], [12.3, 19216.0], [12.4, 19254.0], [12.5, 19254.0], [12.6, 19274.0], [12.7, 19296.0], [12.8, 19398.0], [12.9, 19398.0], [13.0, 19488.0], [13.1, 19506.0], [13.2, 19526.0], [13.3, 19526.0], [13.4, 19630.0], [13.5, 19640.0], [13.6, 19640.0], [13.7, 19643.0], [13.8, 19754.0], [13.9, 19760.0], [14.0, 19760.0], [14.1, 19786.0], [14.2, 19850.0], [14.3, 19858.0], [14.4, 19858.0], [14.5, 19868.0], [14.6, 19932.0], [14.7, 20134.0], [14.8, 20134.0], [14.9, 20228.0], [15.0, 20275.0], [15.1, 20275.0], [15.2, 20341.0], [15.3, 20426.0], [15.4, 20436.0], [15.5, 20436.0], [15.6, 20484.0], [15.7, 20609.0], [15.8, 20627.0], [15.9, 20627.0], [16.0, 20632.0], [16.1, 20669.0], [16.2, 20705.0], [16.3, 20705.0], [16.4, 20732.0], [16.5, 20733.0], [16.6, 20796.0], [16.7, 20796.0], [16.8, 20799.0], [16.9, 20819.0], [17.0, 20819.0], [17.1, 20935.0], [17.2, 20942.0], [17.3, 21000.0], [17.4, 21000.0], [17.5, 21003.0], [17.6, 21055.0], [17.7, 21084.0], [17.8, 21084.0], [17.9, 21128.0], [18.0, 21138.0], [18.1, 21184.0], [18.2, 21184.0], [18.3, 21210.0], [18.4, 21230.0], [18.5, 21230.0], [18.6, 21306.0], [18.7, 21356.0], [18.8, 21462.0], [18.9, 21462.0], [19.0, 21544.0], [19.1, 21659.0], [19.2, 21702.0], [19.3, 21702.0], [19.4, 21722.0], [19.5, 21741.0], [19.6, 21765.0], [19.7, 21765.0], [19.8, 21794.0], [19.9, 21820.0], [20.0, 21830.0], [20.1, 21830.0], [20.2, 21844.0], [20.3, 21874.0], [20.4, 21874.0], [20.5, 21924.0], [20.6, 21939.0], [20.7, 21970.0], [20.8, 21970.0], [20.9, 21989.0], [21.0, 22037.0], [21.1, 22048.0], [21.2, 22048.0], [21.3, 22073.0], [21.4, 22124.0], [21.5, 22126.0], [21.6, 22126.0], [21.7, 22164.0], [21.8, 22199.0], [21.9, 22199.0], [22.0, 22226.0], [22.1, 22237.0], [22.2, 22258.0], [22.3, 22258.0], [22.4, 22317.0], [22.5, 22343.0], [22.6, 22417.0], [22.7, 22417.0], [22.8, 22419.0], [22.9, 22479.0], [23.0, 22591.0], [23.1, 22591.0], [23.2, 22614.0], [23.3, 22646.0], [23.4, 22646.0], [23.5, 22652.0], [23.6, 22666.0], [23.7, 22696.0], [23.8, 22696.0], [23.9, 22763.0], [24.0, 22776.0], [24.1, 22833.0], [24.2, 22833.0], [24.3, 22866.0], [24.4, 22907.0], [24.5, 22912.0], [24.6, 22912.0], [24.7, 22919.0], [24.8, 22953.0], [24.9, 23009.0], [25.0, 23009.0], [25.1, 23016.0], [25.2, 23019.0], [25.3, 23019.0], [25.4, 23048.0], [25.5, 23122.0], [25.6, 23201.0], [25.7, 23201.0], [25.8, 23225.0], [25.9, 23254.0], [26.0, 23257.0], [26.1, 23257.0], [26.2, 23285.0], [26.3, 23300.0], [26.4, 23300.0], [26.5, 23300.0], [26.6, 23340.0], [26.7, 23347.0], [26.8, 23347.0], [26.9, 23353.0], [27.0, 23355.0], [27.1, 23365.0], [27.2, 23365.0], [27.3, 23399.0], [27.4, 23426.0], [27.5, 23436.0], [27.6, 23436.0], [27.7, 23441.0], [27.8, 23478.0], [27.9, 23481.0], [28.0, 23481.0], [28.1, 23524.0], [28.2, 23546.0], [28.3, 23564.0], [28.4, 23564.0], [28.5, 23617.0], [28.6, 23620.0], [28.7, 23620.0], [28.8, 23696.0], [28.9, 23696.0], [29.0, 23699.0], [29.1, 23699.0], [29.2, 23723.0], [29.3, 23771.0], [29.4, 23783.0], [29.5, 23783.0], [29.6, 23783.0], [29.7, 23787.0], [29.8, 23787.0], [29.9, 23787.0], [30.0, 23816.0], [30.1, 23867.0], [30.2, 23867.0], [30.3, 23883.0], [30.4, 23890.0], [30.5, 23893.0], [30.6, 23893.0], [30.7, 23909.0], [30.8, 23915.0], [30.9, 23940.0], [31.0, 23940.0], [31.1, 23946.0], [31.2, 23948.0], [31.3, 23960.0], [31.4, 23960.0], [31.5, 23965.0], [31.6, 23989.0], [31.7, 23989.0], [31.8, 24026.0], [31.9, 24035.0], [32.0, 24039.0], [32.1, 24039.0], [32.2, 24054.0], [32.3, 24058.0], [32.4, 24092.0], [32.5, 24092.0], [32.6, 24093.0], [32.7, 24094.0], [32.8, 24102.0], [32.9, 24102.0], [33.0, 24120.0], [33.1, 24150.0], [33.2, 24154.0], [33.3, 24154.0], [33.4, 24172.0], [33.5, 24180.0], [33.6, 24180.0], [33.7, 24187.0], [33.8, 24222.0], [33.9, 24260.0], [34.0, 24260.0], [34.1, 24283.0], [34.2, 24323.0], [34.3, 24333.0], [34.4, 24333.0], [34.5, 24346.0], [34.6, 24351.0], [34.7, 24363.0], [34.8, 24363.0], [34.9, 24380.0], [35.0, 24395.0], [35.1, 24395.0], [35.2, 24450.0], [35.3, 24486.0], [35.4, 24502.0], [35.5, 24502.0], [35.6, 24513.0], [35.7, 24544.0], [35.8, 24549.0], [35.9, 24549.0], [36.0, 24554.0], [36.1, 24583.0], [36.2, 24585.0], [36.3, 24585.0], [36.4, 24592.0], [36.5, 24660.0], [36.6, 24665.0], [36.7, 24665.0], [36.8, 24683.0], [36.9, 24686.0], [37.0, 24686.0], [37.1, 24709.0], [37.2, 24732.0], [37.3, 24773.0], [37.4, 24773.0], [37.5, 24849.0], [37.6, 24860.0], [37.7, 24867.0], [37.8, 24867.0], [37.9, 24885.0], [38.0, 24946.0], [38.1, 24949.0], [38.2, 24949.0], [38.3, 24971.0], [38.4, 25009.0], [38.5, 25009.0], [38.6, 25025.0], [38.7, 25069.0], [38.8, 25088.0], [38.9, 25088.0], [39.0, 25097.0], [39.1, 25154.0], [39.2, 25168.0], [39.3, 25168.0], [39.4, 25183.0], [39.5, 25198.0], [39.6, 25201.0], [39.7, 25201.0], [39.8, 25218.0], [39.9, 25241.0], [40.0, 25253.0], [40.1, 25253.0], [40.2, 25263.0], [40.3, 25292.0], [40.4, 25292.0], [40.5, 25364.0], [40.6, 25365.0], [40.7, 25367.0], [40.8, 25367.0], [40.9, 25371.0], [41.0, 25380.0], [41.1, 25414.0], [41.2, 25414.0], [41.3, 25415.0], [41.4, 25420.0], [41.5, 25423.0], [41.6, 25423.0], [41.7, 25473.0], [41.8, 25497.0], [41.9, 25497.0], [42.0, 25504.0], [42.1, 25507.0], [42.2, 25543.0], [42.3, 25543.0], [42.4, 25558.0], [42.5, 25576.0], [42.6, 25596.0], [42.7, 25596.0], [42.8, 25639.0], [42.9, 25643.0], [43.0, 25654.0], [43.1, 25654.0], [43.2, 25690.0], [43.3, 25693.0], [43.4, 25693.0], [43.5, 25764.0], [43.6, 25770.0], [43.7, 25795.0], [43.8, 25795.0], [43.9, 25819.0], [44.0, 25835.0], [44.1, 25898.0], [44.2, 25898.0], [44.3, 25901.0], [44.4, 25937.0], [44.5, 25976.0], [44.6, 25976.0], [44.7, 25982.0], [44.8, 25993.0], [44.9, 25995.0], [45.0, 25995.0], [45.1, 25998.0], [45.2, 26050.0], [45.3, 26050.0], [45.4, 26060.0], [45.5, 26074.0], [45.6, 26094.0], [45.7, 26094.0], [45.8, 26107.0], [45.9, 26130.0], [46.0, 26153.0], [46.1, 26153.0], [46.2, 26185.0], [46.3, 26215.0], [46.4, 26218.0], [46.5, 26218.0], [46.6, 26228.0], [46.7, 26313.0], [46.8, 26313.0], [46.9, 26325.0], [47.0, 26338.0], [47.1, 26427.0], [47.2, 26427.0], [47.3, 26460.0], [47.4, 26470.0], [47.5, 26472.0], [47.6, 26472.0], [47.7, 26491.0], [47.8, 26518.0], [47.9, 26554.0], [48.0, 26554.0], [48.1, 26578.0], [48.2, 26593.0], [48.3, 26601.0], [48.4, 26601.0], [48.5, 26622.0], [48.6, 26658.0], [48.7, 26658.0], [48.8, 26688.0], [48.9, 26690.0], [49.0, 26697.0], [49.1, 26697.0], [49.2, 26833.0], [49.3, 26872.0], [49.4, 26934.0], [49.5, 26934.0], [49.6, 26967.0], [49.7, 26996.0], [49.8, 27006.0], [49.9, 27006.0], [50.0, 27028.0], [50.1, 27031.0], [50.2, 27031.0], [50.3, 27118.0], [50.4, 27124.0], [50.5, 27141.0], [50.6, 27141.0], [50.7, 27157.0], [50.8, 27159.0], [50.9, 27192.0], [51.0, 27192.0], [51.1, 27299.0], [51.2, 27332.0], [51.3, 27374.0], [51.4, 27374.0], [51.5, 27443.0], [51.6, 27457.0], [51.7, 27457.0], [51.8, 27501.0], [51.9, 27529.0], [52.0, 27540.0], [52.1, 27540.0], [52.2, 27547.0], [52.3, 27563.0], [52.4, 27596.0], [52.5, 27596.0], [52.6, 27613.0], [52.7, 27615.0], [52.8, 27627.0], [52.9, 27627.0], [53.0, 27653.0], [53.1, 27698.0], [53.2, 27713.0], [53.3, 27713.0], [53.4, 27739.0], [53.5, 27767.0], [53.6, 27767.0], [53.7, 27785.0], [53.8, 27803.0], [53.9, 27806.0], [54.0, 27806.0], [54.1, 27806.0], [54.2, 27810.0], [54.3, 27819.0], [54.4, 27819.0], [54.5, 27852.0], [54.6, 27877.0], [54.7, 27891.0], [54.8, 27891.0], [54.9, 27923.0], [55.0, 27930.0], [55.1, 27930.0], [55.2, 27939.0], [55.3, 27953.0], [55.4, 27966.0], [55.5, 27966.0], [55.6, 27982.0], [55.7, 28082.0], [55.8, 28089.0], [55.9, 28089.0], [56.0, 28136.0], [56.1, 28136.0], [56.2, 28147.0], [56.3, 28147.0], [56.4, 28177.0], [56.5, 28223.0], [56.6, 28240.0], [56.7, 28240.0], [56.8, 28241.0], [56.9, 28248.0], [57.0, 28248.0], [57.1, 28250.0], [57.2, 28262.0], [57.3, 28270.0], [57.4, 28270.0], [57.5, 28288.0], [57.6, 28316.0], [57.7, 28341.0], [57.8, 28341.0], [57.9, 28349.0], [58.0, 28370.0], [58.1, 28377.0], [58.2, 28377.0], [58.3, 28399.0], [58.4, 28402.0], [58.5, 28402.0], [58.6, 28423.0], [58.7, 28426.0], [58.8, 28436.0], [58.9, 28436.0], [59.0, 28438.0], [59.1, 28483.0], [59.2, 28505.0], [59.3, 28505.0], [59.4, 28510.0], [59.5, 28511.0], [59.6, 28517.0], [59.7, 28517.0], [59.8, 28525.0], [59.9, 28533.0], [60.0, 28547.0], [60.1, 28547.0], [60.2, 28554.0], [60.3, 28555.0], [60.4, 28555.0], [60.5, 28557.0], [60.6, 28562.0], [60.7, 28567.0], [60.8, 28567.0], [60.9, 28572.0], [61.0, 28580.0], [61.1, 28600.0], [61.2, 28600.0], [61.3, 28607.0], [61.4, 28638.0], [61.5, 28644.0], [61.6, 28644.0], [61.7, 28682.0], [61.8, 28686.0], [61.9, 28686.0], [62.0, 28696.0], [62.1, 28697.0], [62.2, 28706.0], [62.3, 28706.0], [62.4, 28711.0], [62.5, 28714.0], [62.6, 28719.0], [62.7, 28719.0], [62.8, 28726.0], [62.9, 28741.0], [63.0, 28742.0], [63.1, 28742.0], [63.2, 28747.0], [63.3, 28771.0], [63.4, 28771.0], [63.5, 28772.0], [63.6, 28775.0], [63.7, 28799.0], [63.8, 28799.0], [63.9, 28802.0], [64.0, 28814.0], [64.1, 28820.0], [64.2, 28820.0], [64.3, 28824.0], [64.4, 28830.0], [64.5, 28836.0], [64.6, 28836.0], [64.7, 28836.0], [64.8, 28841.0], [64.9, 28845.0], [65.0, 28845.0], [65.1, 28847.0], [65.2, 28865.0], [65.3, 28865.0], [65.4, 28868.0], [65.5, 28875.0], [65.6, 28881.0], [65.7, 28881.0], [65.8, 28882.0], [65.9, 28885.0], [66.0, 28896.0], [66.1, 28896.0], [66.2, 28898.0], [66.3, 28903.0], [66.4, 28905.0], [66.5, 28905.0], [66.6, 28914.0], [66.7, 28919.0], [66.8, 28919.0], [66.9, 28919.0], [67.0, 28922.0], [67.1, 28923.0], [67.2, 28923.0], [67.3, 28931.0], [67.4, 28932.0], [67.5, 28939.0], [67.6, 28939.0], [67.7, 28943.0], [67.8, 28944.0], [67.9, 28960.0], [68.0, 28960.0], [68.1, 28962.0], [68.2, 28965.0], [68.3, 28971.0], [68.4, 28971.0], [68.5, 28975.0], [68.6, 28978.0], [68.7, 28978.0], [68.8, 28984.0], [68.9, 28984.0], [69.0, 28990.0], [69.1, 28990.0], [69.2, 28992.0], [69.3, 28993.0], [69.4, 29002.0], [69.5, 29002.0], [69.6, 29009.0], [69.7, 29010.0], [69.8, 29013.0], [69.9, 29013.0], [70.0, 29016.0], [70.1, 29020.0], [70.2, 29020.0], [70.3, 29022.0], [70.4, 29023.0], [70.5, 29030.0], [70.6, 29030.0], [70.7, 29035.0], [70.8, 29045.0], [70.9, 29045.0], [71.0, 29045.0], [71.1, 29052.0], [71.2, 29058.0], [71.3, 29063.0], [71.4, 29063.0], [71.5, 29065.0], [71.6, 29066.0], [71.7, 29066.0], [71.8, 29067.0], [71.9, 29069.0], [72.0, 29073.0], [72.1, 29073.0], [72.2, 29074.0], [72.3, 29075.0], [72.4, 29080.0], [72.5, 29080.0], [72.6, 29086.0], [72.7, 29096.0], [72.8, 29097.0], [72.9, 29097.0], [73.0, 29106.0], [73.1, 29108.0], [73.2, 29108.0], [73.3, 29108.0], [73.4, 29109.0], [73.5, 29119.0], [73.6, 29119.0], [73.7, 29122.0], [73.8, 29135.0], [73.9, 29144.0], [74.0, 29144.0], [74.1, 29150.0], [74.2, 29153.0], [74.3, 29156.0], [74.4, 29156.0], [74.5, 29157.0], [74.6, 29161.0], [74.7, 29164.0], [74.8, 29164.0], [74.9, 29180.0], [75.0, 29181.0], [75.1, 29181.0], [75.2, 29185.0], [75.3, 29187.0], [75.4, 29191.0], [75.5, 29191.0], [75.6, 29199.0], [75.7, 29199.0], [75.8, 29206.0], [75.9, 29206.0], [76.0, 29210.0], [76.1, 29214.0], [76.2, 29215.0], [76.3, 29215.0], [76.4, 29217.0], [76.5, 29218.0], [76.6, 29220.0], [76.7, 29220.0], [76.8, 29230.0], [76.9, 29232.0], [77.0, 29232.0], [77.1, 29234.0], [77.2, 29243.0], [77.3, 29245.0], [77.4, 29245.0], [77.5, 29249.0], [77.6, 29269.0], [77.7, 29278.0], [77.8, 29278.0], [77.9, 29294.0], [78.0, 29301.0], [78.1, 29303.0], [78.2, 29303.0], [78.3, 29316.0], [78.4, 29318.0], [78.5, 29318.0], [78.6, 29320.0], [78.7, 29321.0], [78.8, 29322.0], [78.9, 29322.0], [79.0, 29324.0], [79.1, 29326.0], [79.2, 29327.0], [79.3, 29327.0], [79.4, 29327.0], [79.5, 29331.0], [79.6, 29332.0], [79.7, 29332.0], [79.8, 29333.0], [79.9, 29340.0], [80.0, 29346.0], [80.1, 29346.0], [80.2, 29348.0], [80.3, 29350.0], [80.4, 29350.0], [80.5, 29354.0], [80.6, 29354.0], [80.7, 29355.0], [80.8, 29355.0], [80.9, 29356.0], [81.0, 29362.0], [81.1, 29364.0], [81.2, 29364.0], [81.3, 29365.0], [81.4, 29368.0], [81.5, 29368.0], [81.6, 29368.0], [81.7, 29369.0], [81.8, 29372.0], [81.9, 29372.0], [82.0, 29372.0], [82.1, 29381.0], [82.2, 29381.0], [82.3, 29381.0], [82.4, 29385.0], [82.5, 29386.0], [82.6, 29395.0], [82.7, 29395.0], [82.8, 29402.0], [82.9, 29405.0], [83.0, 29412.0], [83.1, 29412.0], [83.2, 29412.0], [83.3, 29418.0], [83.4, 29418.0], [83.5, 29430.0], [83.6, 29430.0], [83.7, 29432.0], [83.8, 29432.0], [83.9, 29435.0], [84.0, 29444.0], [84.1, 29446.0], [84.2, 29446.0], [84.3, 29448.0], [84.4, 29455.0], [84.5, 29459.0], [84.6, 29459.0], [84.7, 29464.0], [84.8, 29468.0], [84.9, 29471.0], [85.0, 29471.0], [85.1, 29486.0], [85.2, 29492.0], [85.3, 29492.0], [85.4, 29494.0], [85.5, 29498.0], [85.6, 29500.0], [85.7, 29500.0], [85.8, 29500.0], [85.9, 29503.0], [86.0, 29506.0], [86.1, 29506.0], [86.2, 29508.0], [86.3, 29510.0], [86.4, 29528.0], [86.5, 29528.0], [86.6, 29529.0], [86.7, 29535.0], [86.8, 29535.0], [86.9, 29538.0], [87.0, 29541.0], [87.1, 29543.0], [87.2, 29543.0], [87.3, 29560.0], [87.4, 29567.0], [87.5, 29572.0], [87.6, 29572.0], [87.7, 29572.0], [87.8, 29578.0], [87.9, 29578.0], [88.0, 29578.0], [88.1, 29582.0], [88.2, 29596.0], [88.3, 29599.0], [88.4, 29599.0], [88.5, 29600.0], [88.6, 29601.0], [88.7, 29601.0], [88.8, 29618.0], [88.9, 29622.0], [89.0, 29623.0], [89.1, 29623.0], [89.2, 29635.0], [89.3, 29644.0], [89.4, 29657.0], [89.5, 29657.0], [89.6, 29663.0], [89.7, 29670.0], [89.8, 29691.0], [89.9, 29691.0], [90.0, 29695.0], [90.1, 29704.0], [90.2, 29704.0], [90.3, 29721.0], [90.4, 29739.0], [90.5, 29741.0], [90.6, 29741.0], [90.7, 29751.0], [90.8, 29763.0], [90.9, 29766.0], [91.0, 29766.0], [91.1, 29766.0], [91.2, 29780.0], [91.3, 29808.0], [91.4, 29808.0], [91.5, 29811.0], [91.6, 29838.0], [91.7, 29838.0], [91.8, 29855.0], [91.9, 29857.0], [92.0, 29914.0], [92.1, 29914.0], [92.2, 29918.0], [92.3, 29919.0], [92.4, 29923.0], [92.5, 29923.0], [92.6, 29925.0], [92.7, 29961.0], [92.8, 29972.0], [92.9, 29972.0], [93.0, 30099.0], [93.1, 30253.0], [93.2, 30320.0], [93.3, 30320.0], [93.4, 30343.0], [93.5, 30343.0], [93.6, 30343.0], [93.7, 30697.0], [93.8, 30921.0], [93.9, 31024.0], [94.0, 31024.0], [94.1, 31083.0], [94.2, 31517.0], [94.3, 31551.0], [94.4, 31551.0], [94.5, 31582.0], [94.6, 31597.0], [94.7, 31618.0], [94.8, 31618.0], [94.9, 31693.0], [95.0, 31793.0], [95.1, 31793.0], [95.2, 32066.0], [95.3, 32098.0], [95.4, 32367.0], [95.5, 32367.0], [95.6, 32471.0], [95.7, 32575.0], [95.8, 32620.0], [95.9, 32620.0], [96.0, 32839.0], [96.1, 33048.0], [96.2, 33406.0], [96.3, 33406.0], [96.4, 33824.0], [96.5, 33871.0], [96.6, 34233.0], [96.7, 34233.0], [96.8, 34444.0], [96.9, 34856.0], [97.0, 34856.0], [97.1, 35251.0], [97.2, 36108.0], [97.3, 36379.0], [97.4, 36379.0], [97.5, 36396.0], [97.6, 37325.0], [97.7, 37674.0], [97.8, 37674.0], [97.9, 37709.0], [98.0, 38702.0], [98.1, 39176.0], [98.2, 39176.0], [98.3, 39881.0], [98.4, 40796.0], [98.5, 40796.0], [98.6, 41200.0], [98.7, 41349.0], [98.8, 41812.0], [98.9, 41812.0], [99.0, 42295.0], [99.1, 42707.0], [99.2, 43002.0], [99.3, 43002.0], [99.4, 43160.0], [99.5, 43424.0], [99.6, 43665.0], [99.7, 43665.0], [99.8, 43713.0], [99.9, 44311.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 35.0, "series": [{"data": [[36100.0, 1.0], [36300.0, 2.0], [37700.0, 1.0], [37300.0, 1.0], [38700.0, 1.0], [39100.0, 1.0], [40700.0, 1.0], [42700.0, 1.0], [41300.0, 1.0], [44300.0, 1.0], [43700.0, 1.0], [43100.0, 1.0], [3100.0, 1.0], [6200.0, 1.0], [8500.0, 1.0], [11400.0, 1.0], [13900.0, 1.0], [17200.0, 4.0], [16500.0, 2.0], [17300.0, 11.0], [17400.0, 5.0], [17100.0, 1.0], [17000.0, 2.0], [16800.0, 2.0], [16900.0, 1.0], [16700.0, 2.0], [18200.0, 2.0], [17800.0, 6.0], [17700.0, 7.0], [17500.0, 6.0], [18000.0, 2.0], [18100.0, 7.0], [17600.0, 2.0], [18400.0, 2.0], [18300.0, 2.0], [18500.0, 2.0], [18800.0, 3.0], [18900.0, 2.0], [18700.0, 2.0], [19000.0, 1.0], [19200.0, 5.0], [19100.0, 7.0], [19400.0, 1.0], [19300.0, 1.0], [18600.0, 1.0], [20400.0, 3.0], [20200.0, 2.0], [19700.0, 3.0], [19600.0, 3.0], [20100.0, 1.0], [19500.0, 2.0], [19800.0, 3.0], [19900.0, 1.0], [20300.0, 1.0], [20700.0, 5.0], [20800.0, 1.0], [21000.0, 4.0], [20600.0, 4.0], [21400.0, 1.0], [21500.0, 1.0], [21200.0, 2.0], [21100.0, 3.0], [20900.0, 2.0], [21300.0, 2.0], [21700.0, 5.0], [21800.0, 4.0], [21900.0, 4.0], [22100.0, 4.0], [22500.0, 1.0], [22200.0, 3.0], [22400.0, 3.0], [22300.0, 2.0], [22000.0, 3.0], [21600.0, 1.0], [22700.0, 2.0], [23300.0, 8.0], [22600.0, 5.0], [23400.0, 5.0], [23200.0, 5.0], [23000.0, 4.0], [22900.0, 4.0], [22800.0, 2.0], [23100.0, 1.0], [23500.0, 3.0], [23700.0, 6.0], [24500.0, 8.0], [23900.0, 8.0], [24000.0, 8.0], [24100.0, 7.0], [23600.0, 5.0], [24300.0, 7.0], [23800.0, 5.0], [24400.0, 2.0], [24200.0, 3.0], [25400.0, 6.0], [25200.0, 6.0], [25300.0, 5.0], [25100.0, 4.0], [24900.0, 3.0], [25000.0, 5.0], [24800.0, 4.0], [24700.0, 3.0], [24600.0, 4.0], [25500.0, 6.0], [26400.0, 5.0], [26100.0, 4.0], [26600.0, 6.0], [26000.0, 4.0], [26300.0, 3.0], [26500.0, 4.0], [26200.0, 3.0], [25900.0, 7.0], [25800.0, 3.0], [25700.0, 3.0], [25600.0, 5.0], [26800.0, 2.0], [27100.0, 6.0], [27000.0, 3.0], [26900.0, 3.0], [27600.0, 5.0], [27300.0, 2.0], [27500.0, 6.0], [27200.0, 1.0], [27400.0, 2.0], [28500.0, 14.0], [28200.0, 8.0], [28300.0, 6.0], [28100.0, 4.0], [28000.0, 2.0], [28600.0, 8.0], [27700.0, 4.0], [27800.0, 8.0], [27900.0, 6.0], [28400.0, 6.0], [29500.0, 21.0], [29200.0, 16.0], [29000.0, 26.0], [29100.0, 21.0], [29300.0, 35.0], [29400.0, 21.0], [28900.0, 23.0], [29600.0, 12.0], [28800.0, 18.0], [28700.0, 12.0], [30300.0, 3.0], [29900.0, 7.0], [29800.0, 5.0], [29700.0, 9.0], [30000.0, 1.0], [30600.0, 1.0], [30200.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [31500.0, 4.0], [31600.0, 2.0], [31000.0, 2.0], [32400.0, 1.0], [32000.0, 2.0], [32500.0, 1.0], [32300.0, 1.0], [32600.0, 1.0], [34200.0, 1.0], [33400.0, 1.0], [32800.0, 1.0], [34800.0, 1.0], [33800.0, 2.0], [34400.0, 1.0], [33000.0, 1.0], [35200.0, 1.0], [37600.0, 1.0], [39800.0, 1.0], [41200.0, 1.0], [43000.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [43400.0, 1.0], [43600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.999999999999999, "minX": 1.60386348E12, "maxY": 10.0, "series": [{"data": [[1.60386348E12, 10.0], [1.60386408E12, 10.0], [1.6038651E12, 10.0], [1.60386378E12, 10.0], [1.6038654E12, 6.999999999999999], [1.60386498E12, 10.0], [1.60386528E12, 10.0], [1.60386438E12, 10.0], [1.60386468E12, 10.0], [1.60386522E12, 10.0], [1.6038636E12, 10.0], [1.60386462E12, 10.0], [1.60386492E12, 10.0], [1.6038645E12, 10.0], [1.6038639E12, 10.0], [1.6038648E12, 10.0], [1.6038642E12, 10.0], [1.60386474E12, 10.0], [1.60386504E12, 10.0], [1.60386414E12, 10.0], [1.60386444E12, 10.0], [1.60386372E12, 10.0], [1.60386432E12, 10.0], [1.60386534E12, 10.0], [1.60386402E12, 10.0], [1.60386396E12, 10.0], [1.60386426E12, 10.0], [1.60386366E12, 10.0], [1.60386456E12, 10.0], [1.60386384E12, 10.0], [1.60386486E12, 10.0], [1.60386354E12, 10.0], [1.60386516E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038654E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17229.0, "minX": 1.0, "maxY": 26095.637741046816, "series": [{"data": [[8.0, 17300.0], [4.0, 17522.0], [2.0, 17352.0], [1.0, 17853.0], [9.0, 17229.0], [10.0, 26095.637741046816], [5.0, 17552.0], [6.0, 17442.0], [3.0, 17455.0], [7.0, 17328.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25989.74965986393]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 87.8, "minX": 1.60386348E12, "maxY": 189601.58333333334, "series": [{"data": [[1.60386348E12, 150670.86666666667], [1.60386408E12, 43929.3], [1.6038651E12, 43275.15], [1.60386378E12, 49897.11666666667], [1.6038654E12, 12262.866666666667], [1.60386498E12, 48497.833333333336], [1.60386528E12, 148684.73333333334], [1.60386438E12, 104996.11666666667], [1.60386468E12, 27953.883333333335], [1.60386522E12, 34986.63333333333], [1.6038636E12, 125102.1], [1.60386462E12, 82710.23333333334], [1.60386492E12, 52558.38333333333], [1.6038645E12, 61200.816666666666], [1.6038639E12, 48615.85], [1.6038648E12, 52538.433333333334], [1.6038642E12, 25409.816666666666], [1.60386474E12, 46514.03333333333], [1.60386504E12, 51918.03333333333], [1.60386414E12, 47993.98333333333], [1.60386444E12, 189601.58333333334], [1.60386372E12, 80444.38333333333], [1.60386432E12, 89216.15], [1.60386534E12, 76138.11666666667], [1.60386402E12, 56408.166666666664], [1.60386396E12, 44613.98333333333], [1.60386426E12, 160531.03333333333], [1.60386366E12, 69424.93333333333], [1.60386456E12, 66595.36666666667], [1.60386384E12, 46234.01666666667], [1.60386486E12, 45378.85], [1.60386354E12, 113386.0], [1.60386516E12, 25752.916666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60386348E12, 87.8], [1.60386408E12, 146.08333333333334], [1.6038651E12, 160.58333333333334], [1.60386378E12, 161.0], [1.6038654E12, 100.4], [1.60386498E12, 153.43333333333334], [1.60386528E12, 187.0], [1.60386438E12, 188.65], [1.60386468E12, 116.88333333333334], [1.60386522E12, 183.01666666666668], [1.6038636E12, 183.66666666666666], [1.60386462E12, 191.15], [1.60386492E12, 154.36666666666667], [1.6038645E12, 209.0], [1.6038639E12, 153.41666666666666], [1.6038648E12, 153.46666666666667], [1.6038642E12, 167.88333333333333], [1.60386474E12, 153.41666666666666], [1.60386504E12, 153.41666666666666], [1.60386414E12, 160.65], [1.60386444E12, 183.13333333333333], [1.60386372E12, 183.56666666666666], [1.60386432E12, 171.6], [1.60386534E12, 165.5], [1.60386402E12, 153.66666666666666], [1.60386396E12, 146.11666666666667], [1.60386426E12, 231.86666666666667], [1.60386366E12, 111.28333333333333], [1.60386456E12, 164.46666666666667], [1.60386384E12, 146.13333333333333], [1.60386486E12, 146.13333333333333], [1.60386354E12, 195.51666666666668], [1.60386516E12, 175.01666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038654E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17074.25, "minX": 1.60386348E12, "maxY": 39175.00000000001, "series": [{"data": [[1.60386348E12, 17074.25], [1.60386408E12, 29084.05], [1.6038651E12, 27856.590909090908], [1.60386378E12, 26296.818181818187], [1.6038654E12, 17175.53333333333], [1.60386498E12, 28552.52380952381], [1.60386528E12, 22633.615384615383], [1.60386438E12, 21926.814814814818], [1.60386468E12, 34179.75], [1.60386522E12, 23788.680000000004], [1.6038636E12, 21098.52], [1.60386462E12, 24326.384615384617], [1.60386492E12, 28503.857142857138], [1.6038645E12, 18562.500000000004], [1.6038639E12, 29439.142857142855], [1.6038648E12, 29219.238095238095], [1.6038642E12, 25166.13043478261], [1.60386474E12, 29419.285714285714], [1.60386504E12, 28972.619047619046], [1.60386414E12, 29183.81818181818], [1.60386444E12, 24300.24], [1.60386372E12, 26133.840000000004], [1.60386432E12, 24738.375000000007], [1.60386534E12, 28394.217391304348], [1.60386402E12, 28905.52380952381], [1.60386396E12, 29600.700000000004], [1.60386426E12, 20060.000000000004], [1.60386366E12, 39175.00000000001], [1.60386456E12, 27266.181818181816], [1.60386384E12, 29363.399999999998], [1.60386486E12, 29538.149999999998], [1.60386354E12, 23450.25925925926], [1.60386516E12, 25150.291666666668]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038654E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17068.333333333332, "minX": 1.60386348E12, "maxY": 39172.26666666667, "series": [{"data": [[1.60386348E12, 17068.333333333332], [1.60386408E12, 29083.0], [1.6038651E12, 27855.68181818182], [1.60386378E12, 26295.499999999996], [1.6038654E12, 17173.266666666674], [1.60386498E12, 28551.190476190477], [1.60386528E12, 22629.615384615376], [1.60386438E12, 21923.77777777778], [1.60386468E12, 34178.75], [1.60386522E12, 23788.08], [1.6038636E12, 21096.039999999997], [1.60386462E12, 24324.65384615385], [1.60386492E12, 28502.66666666667], [1.6038645E12, 18560.833333333332], [1.6038639E12, 29437.7619047619], [1.6038648E12, 29217.809523809523], [1.6038642E12, 25165.521739130436], [1.60386474E12, 29418.000000000004], [1.60386504E12, 28971.33333333333], [1.60386414E12, 29182.54545454546], [1.60386444E12, 24296.279999999995], [1.60386372E12, 26131.960000000003], [1.60386432E12, 24735.458333333332], [1.60386534E12, 28392.086956521736], [1.60386402E12, 28904.190476190477], [1.60386396E12, 29599.5], [1.60386426E12, 20056.750000000004], [1.60386366E12, 39172.26666666667], [1.60386456E12, 27264.409090909092], [1.60386384E12, 29362.250000000004], [1.60386486E12, 29536.9], [1.60386354E12, 23448.407407407416], [1.60386516E12, 25149.708333333336]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038654E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.125, "minX": 1.60386348E12, "maxY": 8.583333333333332, "series": [{"data": [[1.60386348E12, 8.583333333333332], [1.60386408E12, 0.3], [1.6038651E12, 0.5], [1.60386378E12, 0.7727272727272726], [1.6038654E12, 0.3333333333333333], [1.60386498E12, 0.6190476190476191], [1.60386528E12, 0.3846153846153846], [1.60386438E12, 0.4444444444444444], [1.60386468E12, 0.25000000000000006], [1.60386522E12, 0.52], [1.6038636E12, 0.32], [1.60386462E12, 0.3461538461538461], [1.60386492E12, 0.5714285714285716], [1.6038645E12, 0.46666666666666684], [1.6038639E12, 0.5238095238095237], [1.6038648E12, 0.6666666666666667], [1.6038642E12, 0.5217391304347827], [1.60386474E12, 0.5238095238095238], [1.60386504E12, 0.1904761904761905], [1.60386414E12, 0.5909090909090909], [1.60386444E12, 0.4800000000000001], [1.60386372E12, 0.5600000000000002], [1.60386432E12, 0.125], [1.60386534E12, 0.3478260869565218], [1.60386402E12, 0.2857142857142857], [1.60386396E12, 0.7999999999999998], [1.60386426E12, 0.37500000000000006], [1.60386366E12, 0.6666666666666666], [1.60386456E12, 0.5454545454545454], [1.60386384E12, 0.25000000000000006], [1.60386486E12, 0.15000000000000002], [1.60386354E12, 0.3703703703703703], [1.60386516E12, 0.45833333333333337]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038654E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3133.0, "minX": 1.60386348E12, "maxY": 44311.0, "series": [{"data": [[1.60386348E12, 27157.0], [1.60386408E12, 29618.0], [1.6038651E12, 29372.0], [1.60386378E12, 30343.0], [1.6038654E12, 17853.0], [1.60386498E12, 29080.0], [1.60386528E12, 28423.0], [1.60386438E12, 25993.0], [1.60386468E12, 43160.0], [1.60386522E12, 27563.0], [1.6038636E12, 26601.0], [1.60386462E12, 27930.0], [1.60386492E12, 29486.0], [1.6038645E12, 22417.0], [1.6038639E12, 29923.0], [1.6038648E12, 29582.0], [1.6038642E12, 27891.0], [1.60386474E12, 35251.0], [1.60386504E12, 29199.0], [1.60386414E12, 29766.0], [1.60386444E12, 28270.0], [1.60386372E12, 32471.0], [1.60386432E12, 31693.0], [1.60386534E12, 37674.0], [1.60386402E12, 29386.0], [1.60386396E12, 29972.0], [1.60386426E12, 25795.0], [1.60386366E12, 44311.0], [1.60386456E12, 32098.0], [1.60386384E12, 29578.0], [1.60386486E12, 29919.0], [1.60386354E12, 27698.0], [1.60386516E12, 28341.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60386348E12, 3133.0], [1.60386408E12, 28638.0], [1.6038651E12, 24450.0], [1.60386378E12, 22919.0], [1.6038654E12, 16536.0], [1.60386498E12, 27810.0], [1.60386528E12, 18863.0], [1.60386438E12, 18108.0], [1.60386468E12, 23019.0], [1.60386522E12, 20426.0], [1.6038636E12, 17226.0], [1.60386462E12, 21924.0], [1.60386492E12, 27613.0], [1.6038645E12, 17037.0], [1.6038639E12, 28971.0], [1.6038648E12, 28847.0], [1.6038642E12, 23225.0], [1.60386474E12, 25835.0], [1.60386504E12, 28714.0], [1.60386414E12, 26658.0], [1.60386444E12, 19120.0], [1.60386372E12, 22479.0], [1.60386432E12, 17742.0], [1.60386534E12, 17361.0], [1.60386402E12, 28223.0], [1.60386396E12, 29119.0], [1.60386426E12, 17003.0], [1.60386366E12, 30320.0], [1.60386456E12, 23048.0], [1.60386384E12, 29010.0], [1.60386486E12, 29074.0], [1.60386354E12, 18267.0], [1.60386516E12, 21939.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60386348E12, 3133.0], [1.60386408E12, 28638.0], [1.6038651E12, 24450.0], [1.60386378E12, 22919.0], [1.6038654E12, 16536.0], [1.60386498E12, 27810.0], [1.60386528E12, 18863.0], [1.60386438E12, 18108.0], [1.60386468E12, 23019.0], [1.60386522E12, 20426.0], [1.6038636E12, 17226.0], [1.60386462E12, 21924.0], [1.60386492E12, 27613.0], [1.6038645E12, 17037.0], [1.6038639E12, 28971.0], [1.6038648E12, 28847.0], [1.6038642E12, 23225.0], [1.60386474E12, 25835.0], [1.60386504E12, 28714.0], [1.60386414E12, 26658.0], [1.60386444E12, 19120.0], [1.60386372E12, 22479.0], [1.60386432E12, 17742.0], [1.60386534E12, 17361.0], [1.60386402E12, 28223.0], [1.60386396E12, 29119.0], [1.60386426E12, 17003.0], [1.60386366E12, 30320.0], [1.60386456E12, 23048.0], [1.60386384E12, 29010.0], [1.60386486E12, 29074.0], [1.60386354E12, 18267.0], [1.60386516E12, 21939.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60386348E12, 3133.0], [1.60386408E12, 28638.0], [1.6038651E12, 24450.0], [1.60386378E12, 22919.0], [1.6038654E12, 16536.0], [1.60386498E12, 27810.0], [1.60386528E12, 18863.0], [1.60386438E12, 18108.0], [1.60386468E12, 23019.0], [1.60386522E12, 20426.0], [1.6038636E12, 17226.0], [1.60386462E12, 21924.0], [1.60386492E12, 27613.0], [1.6038645E12, 17037.0], [1.6038639E12, 28971.0], [1.6038648E12, 28847.0], [1.6038642E12, 23225.0], [1.60386474E12, 25835.0], [1.60386504E12, 28714.0], [1.60386414E12, 26658.0], [1.60386444E12, 19120.0], [1.60386372E12, 22479.0], [1.60386432E12, 17742.0], [1.60386534E12, 17361.0], [1.60386402E12, 28223.0], [1.60386396E12, 29119.0], [1.60386426E12, 17003.0], [1.60386366E12, 30320.0], [1.60386456E12, 23048.0], [1.60386384E12, 29010.0], [1.60386486E12, 29074.0], [1.60386354E12, 18267.0], [1.60386516E12, 21939.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60386348E12, 3133.0], [1.60386408E12, 28638.0], [1.6038651E12, 24450.0], [1.60386378E12, 22919.0], [1.6038654E12, 16536.0], [1.60386498E12, 27810.0], [1.60386528E12, 18863.0], [1.60386438E12, 18108.0], [1.60386468E12, 23019.0], [1.60386522E12, 20426.0], [1.6038636E12, 17226.0], [1.60386462E12, 21924.0], [1.60386492E12, 27613.0], [1.6038645E12, 17037.0], [1.6038639E12, 28971.0], [1.6038648E12, 28847.0], [1.6038642E12, 23225.0], [1.60386474E12, 25835.0], [1.60386504E12, 28714.0], [1.60386414E12, 26658.0], [1.60386444E12, 19120.0], [1.60386372E12, 22479.0], [1.60386432E12, 17742.0], [1.60386534E12, 17361.0], [1.60386402E12, 28223.0], [1.60386396E12, 29119.0], [1.60386426E12, 17003.0], [1.60386366E12, 30320.0], [1.60386456E12, 23048.0], [1.60386384E12, 29010.0], [1.60386486E12, 29074.0], [1.60386354E12, 18267.0], [1.60386516E12, 21939.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60386348E12, 17692.0], [1.60386408E12, 29045.0], [1.6038651E12, 28532.5], [1.60386378E12, 26556.5], [1.6038654E12, 17300.0], [1.60386498E12, 28557.0], [1.60386528E12, 21161.0], [1.60386438E12, 21055.0], [1.60386468E12, 35617.5], [1.60386522E12, 23723.0], [1.6038636E12, 22124.0], [1.60386462E12, 24017.0], [1.60386492E12, 28525.0], [1.6038645E12, 17935.0], [1.6038639E12, 29430.0], [1.6038648E12, 29220.0], [1.6038642E12, 25218.0], [1.60386474E12, 29002.0], [1.60386504E12, 29013.0], [1.60386414E12, 29396.5], [1.60386444E12, 24260.0], [1.60386372E12, 25088.0], [1.60386432E12, 22181.5], [1.60386534E12, 29385.0], [1.60386402E12, 28919.0], [1.60386396E12, 29646.0], [1.60386426E12, 19001.5], [1.60386366E12, 41200.0], [1.60386456E12, 27482.5], [1.60386384E12, 29388.0], [1.60386486E12, 29539.5], [1.60386354E12, 23787.0], [1.60386516E12, 25230.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038654E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27028.0, "minX": 1.0, "maxY": 27028.0, "series": [{"data": [[1.0, 27028.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27017.0, "minX": 1.0, "maxY": 27017.0, "series": [{"data": [[1.0, 27017.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.60386348E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60386348E12, 0.36666666666666664], [1.60386408E12, 0.3333333333333333], [1.6038651E12, 0.36666666666666664], [1.60386378E12, 0.36666666666666664], [1.6038654E12, 0.08333333333333333], [1.60386498E12, 0.35], [1.60386528E12, 0.43333333333333335], [1.60386438E12, 0.45], [1.60386468E12, 0.26666666666666666], [1.60386522E12, 0.4166666666666667], [1.6038636E12, 0.4166666666666667], [1.60386462E12, 0.43333333333333335], [1.60386492E12, 0.35], [1.6038645E12, 0.5], [1.6038639E12, 0.35], [1.6038648E12, 0.35], [1.6038642E12, 0.38333333333333336], [1.60386474E12, 0.35], [1.60386504E12, 0.35], [1.60386414E12, 0.36666666666666664], [1.60386444E12, 0.4166666666666667], [1.60386372E12, 0.4166666666666667], [1.60386432E12, 0.4], [1.60386534E12, 0.38333333333333336], [1.60386402E12, 0.35], [1.60386396E12, 0.3333333333333333], [1.60386426E12, 0.5333333333333333], [1.60386366E12, 0.25], [1.60386456E12, 0.36666666666666664], [1.60386384E12, 0.3333333333333333], [1.60386486E12, 0.3333333333333333], [1.60386354E12, 0.45], [1.60386516E12, 0.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038654E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60386348E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60386348E12, 0.2], [1.60386408E12, 0.3333333333333333], [1.6038651E12, 0.36666666666666664], [1.60386378E12, 0.36666666666666664], [1.6038654E12, 0.25], [1.60386498E12, 0.35], [1.60386528E12, 0.43333333333333335], [1.60386438E12, 0.45], [1.60386468E12, 0.26666666666666666], [1.60386522E12, 0.4166666666666667], [1.6038636E12, 0.4166666666666667], [1.60386462E12, 0.43333333333333335], [1.60386492E12, 0.35], [1.6038645E12, 0.5], [1.6038639E12, 0.35], [1.6038648E12, 0.35], [1.6038642E12, 0.38333333333333336], [1.60386474E12, 0.35], [1.60386504E12, 0.35], [1.60386414E12, 0.36666666666666664], [1.60386444E12, 0.4166666666666667], [1.60386372E12, 0.4166666666666667], [1.60386432E12, 0.4], [1.60386534E12, 0.38333333333333336], [1.60386402E12, 0.35], [1.60386396E12, 0.3333333333333333], [1.60386426E12, 0.5333333333333333], [1.60386366E12, 0.25], [1.60386456E12, 0.36666666666666664], [1.60386384E12, 0.3333333333333333], [1.60386486E12, 0.3333333333333333], [1.60386354E12, 0.45], [1.60386516E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038654E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60386348E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60386348E12, 0.2], [1.60386408E12, 0.3333333333333333], [1.6038651E12, 0.36666666666666664], [1.60386378E12, 0.36666666666666664], [1.6038654E12, 0.25], [1.60386498E12, 0.35], [1.60386528E12, 0.43333333333333335], [1.60386438E12, 0.45], [1.60386468E12, 0.26666666666666666], [1.60386522E12, 0.4166666666666667], [1.6038636E12, 0.4166666666666667], [1.60386462E12, 0.43333333333333335], [1.60386492E12, 0.35], [1.6038645E12, 0.5], [1.6038639E12, 0.35], [1.6038648E12, 0.35], [1.6038642E12, 0.38333333333333336], [1.60386474E12, 0.35], [1.60386504E12, 0.35], [1.60386414E12, 0.36666666666666664], [1.60386444E12, 0.4166666666666667], [1.60386372E12, 0.4166666666666667], [1.60386432E12, 0.4], [1.60386534E12, 0.38333333333333336], [1.60386402E12, 0.35], [1.60386396E12, 0.3333333333333333], [1.60386426E12, 0.5333333333333333], [1.60386366E12, 0.25], [1.60386456E12, 0.36666666666666664], [1.60386384E12, 0.3333333333333333], [1.60386486E12, 0.3333333333333333], [1.60386354E12, 0.45], [1.60386516E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038654E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.60386348E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60386348E12, 0.2], [1.60386408E12, 0.3333333333333333], [1.6038651E12, 0.36666666666666664], [1.60386378E12, 0.36666666666666664], [1.6038654E12, 0.25], [1.60386498E12, 0.35], [1.60386528E12, 0.43333333333333335], [1.60386438E12, 0.45], [1.60386468E12, 0.26666666666666666], [1.60386522E12, 0.4166666666666667], [1.6038636E12, 0.4166666666666667], [1.60386462E12, 0.43333333333333335], [1.60386492E12, 0.35], [1.6038645E12, 0.5], [1.6038639E12, 0.35], [1.6038648E12, 0.35], [1.6038642E12, 0.38333333333333336], [1.60386474E12, 0.35], [1.60386504E12, 0.35], [1.60386414E12, 0.36666666666666664], [1.60386444E12, 0.4166666666666667], [1.60386372E12, 0.4166666666666667], [1.60386432E12, 0.4], [1.60386534E12, 0.38333333333333336], [1.60386402E12, 0.35], [1.60386396E12, 0.3333333333333333], [1.60386426E12, 0.5333333333333333], [1.60386366E12, 0.25], [1.60386456E12, 0.36666666666666664], [1.60386384E12, 0.3333333333333333], [1.60386486E12, 0.3333333333333333], [1.60386354E12, 0.45], [1.60386516E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038654E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

