/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3250.0, "minX": 0.0, "maxY": 44645.0, "series": [{"data": [[0.0, 3250.0], [0.1, 3250.0], [0.2, 6259.0], [0.3, 8717.0], [0.4, 8717.0], [0.5, 11686.0], [0.6, 14262.0], [0.7, 16735.0], [0.8, 16735.0], [0.9, 17065.0], [1.0, 17126.0], [1.1, 17204.0], [1.2, 17204.0], [1.3, 17250.0], [1.4, 17340.0], [1.5, 17370.0], [1.6, 17370.0], [1.7, 17374.0], [1.8, 17387.0], [1.9, 17387.0], [2.0, 17401.0], [2.1, 17421.0], [2.2, 17465.0], [2.3, 17465.0], [2.4, 17468.0], [2.5, 17497.0], [2.6, 17527.0], [2.7, 17527.0], [2.8, 17532.0], [2.9, 17607.0], [3.0, 17634.0], [3.1, 17634.0], [3.2, 17667.0], [3.3, 17670.0], [3.4, 17670.0], [3.5, 17680.0], [3.6, 17684.0], [3.7, 17691.0], [3.8, 17691.0], [3.9, 17699.0], [4.0, 17703.0], [4.1, 17719.0], [4.2, 17719.0], [4.3, 17719.0], [4.4, 17730.0], [4.5, 17750.0], [4.6, 17750.0], [4.7, 17752.0], [4.8, 17767.0], [4.9, 17779.0], [5.0, 17779.0], [5.1, 17790.0], [5.2, 17807.0], [5.3, 17807.0], [5.4, 17812.0], [5.5, 17819.0], [5.6, 17824.0], [5.7, 17824.0], [5.8, 17825.0], [5.9, 17829.0], [6.0, 17830.0], [6.1, 17830.0], [6.2, 17836.0], [6.3, 17849.0], [6.4, 17906.0], [6.5, 17906.0], [6.6, 17937.0], [6.7, 17941.0], [6.8, 17941.0], [6.9, 17962.0], [7.0, 17983.0], [7.1, 17999.0], [7.2, 17999.0], [7.3, 18047.0], [7.4, 18056.0], [7.5, 18057.0], [7.6, 18057.0], [7.7, 18070.0], [7.8, 18087.0], [7.9, 18157.0], [8.0, 18157.0], [8.1, 18194.0], [8.2, 18206.0], [8.3, 18213.0], [8.4, 18213.0], [8.5, 18239.0], [8.6, 18288.0], [8.7, 18288.0], [8.8, 18324.0], [8.9, 18378.0], [9.0, 18398.0], [9.1, 18398.0], [9.2, 18404.0], [9.3, 18455.0], [9.4, 18470.0], [9.5, 18470.0], [9.6, 18617.0], [9.7, 18674.0], [9.8, 18690.0], [9.9, 18690.0], [10.0, 18720.0], [10.1, 18759.0], [10.2, 18759.0], [10.3, 18763.0], [10.4, 18775.0], [10.5, 18786.0], [10.6, 18786.0], [10.7, 18818.0], [10.8, 18849.0], [10.9, 19025.0], [11.0, 19025.0], [11.1, 19117.0], [11.2, 19260.0], [11.3, 19320.0], [11.4, 19320.0], [11.5, 19384.0], [11.6, 19406.0], [11.7, 19406.0], [11.8, 19411.0], [11.9, 19445.0], [12.0, 19448.0], [12.1, 19448.0], [12.2, 19502.0], [12.3, 19534.0], [12.4, 19582.0], [12.5, 19582.0], [12.6, 19586.0], [12.7, 19613.0], [12.8, 19680.0], [12.9, 19680.0], [13.0, 19697.0], [13.1, 19709.0], [13.2, 19767.0], [13.3, 19767.0], [13.4, 19803.0], [13.5, 19811.0], [13.6, 19811.0], [13.7, 19855.0], [13.8, 19857.0], [13.9, 19926.0], [14.0, 19926.0], [14.1, 19934.0], [14.2, 19942.0], [14.3, 19944.0], [14.4, 19944.0], [14.5, 19946.0], [14.6, 19987.0], [14.7, 20007.0], [14.8, 20007.0], [14.9, 20109.0], [15.0, 20114.0], [15.1, 20114.0], [15.2, 20126.0], [15.3, 20161.0], [15.4, 20163.0], [15.5, 20163.0], [15.6, 20168.0], [15.7, 20257.0], [15.8, 20274.0], [15.9, 20274.0], [16.0, 20299.0], [16.1, 20342.0], [16.2, 20349.0], [16.3, 20349.0], [16.4, 20420.0], [16.5, 20502.0], [16.6, 20646.0], [16.7, 20646.0], [16.8, 20675.0], [16.9, 20928.0], [17.0, 20928.0], [17.1, 21000.0], [17.2, 21012.0], [17.3, 21061.0], [17.4, 21061.0], [17.5, 21196.0], [17.6, 21286.0], [17.7, 21309.0], [17.8, 21309.0], [17.9, 21342.0], [18.0, 21453.0], [18.1, 21471.0], [18.2, 21471.0], [18.3, 21639.0], [18.4, 21715.0], [18.5, 21715.0], [18.6, 21734.0], [18.7, 21806.0], [18.8, 21837.0], [18.9, 21837.0], [19.0, 21925.0], [19.1, 21932.0], [19.2, 21936.0], [19.3, 21936.0], [19.4, 21937.0], [19.5, 21967.0], [19.6, 21969.0], [19.7, 21969.0], [19.8, 21978.0], [19.9, 21991.0], [20.0, 21994.0], [20.1, 21994.0], [20.2, 21998.0], [20.3, 22037.0], [20.4, 22037.0], [20.5, 22049.0], [20.6, 22109.0], [20.7, 22174.0], [20.8, 22174.0], [20.9, 22176.0], [21.0, 22224.0], [21.1, 22229.0], [21.2, 22229.0], [21.3, 22288.0], [21.4, 22311.0], [21.5, 22348.0], [21.6, 22348.0], [21.7, 22349.0], [21.8, 22385.0], [21.9, 22385.0], [22.0, 22410.0], [22.1, 22464.0], [22.2, 22494.0], [22.3, 22494.0], [22.4, 22496.0], [22.5, 22502.0], [22.6, 22518.0], [22.7, 22518.0], [22.8, 22562.0], [22.9, 22592.0], [23.0, 22686.0], [23.1, 22686.0], [23.2, 22764.0], [23.3, 22764.0], [23.4, 22764.0], [23.5, 22791.0], [23.6, 22798.0], [23.7, 22801.0], [23.8, 22801.0], [23.9, 22898.0], [24.0, 22982.0], [24.1, 22985.0], [24.2, 22985.0], [24.3, 23000.0], [24.4, 23009.0], [24.5, 23011.0], [24.6, 23011.0], [24.7, 23024.0], [24.8, 23083.0], [24.9, 23118.0], [25.0, 23118.0], [25.1, 23119.0], [25.2, 23128.0], [25.3, 23128.0], [25.4, 23142.0], [25.5, 23179.0], [25.6, 23202.0], [25.7, 23202.0], [25.8, 23242.0], [25.9, 23253.0], [26.0, 23258.0], [26.1, 23258.0], [26.2, 23272.0], [26.3, 23279.0], [26.4, 23304.0], [26.5, 23304.0], [26.6, 23319.0], [26.7, 23358.0], [26.8, 23358.0], [26.9, 23382.0], [27.0, 23384.0], [27.1, 23408.0], [27.2, 23408.0], [27.3, 23449.0], [27.4, 23453.0], [27.5, 23532.0], [27.6, 23532.0], [27.7, 23539.0], [27.8, 23547.0], [27.9, 23549.0], [28.0, 23549.0], [28.1, 23549.0], [28.2, 23559.0], [28.3, 23592.0], [28.4, 23592.0], [28.5, 23601.0], [28.6, 23621.0], [28.7, 23621.0], [28.8, 23667.0], [28.9, 23696.0], [29.0, 23755.0], [29.1, 23755.0], [29.2, 23766.0], [29.3, 23767.0], [29.4, 23770.0], [29.5, 23770.0], [29.6, 23779.0], [29.7, 23855.0], [29.8, 23860.0], [29.9, 23860.0], [30.0, 23861.0], [30.1, 23867.0], [30.2, 23867.0], [30.3, 23868.0], [30.4, 23897.0], [30.5, 23901.0], [30.6, 23901.0], [30.7, 23908.0], [30.8, 23932.0], [30.9, 23935.0], [31.0, 23935.0], [31.1, 23960.0], [31.2, 23982.0], [31.3, 23984.0], [31.4, 23984.0], [31.5, 23988.0], [31.6, 24010.0], [31.7, 24010.0], [31.8, 24020.0], [31.9, 24041.0], [32.0, 24071.0], [32.1, 24071.0], [32.2, 24077.0], [32.3, 24084.0], [32.4, 24138.0], [32.5, 24138.0], [32.6, 24142.0], [32.7, 24165.0], [32.8, 24197.0], [32.9, 24197.0], [33.0, 24205.0], [33.1, 24213.0], [33.2, 24220.0], [33.3, 24220.0], [33.4, 24258.0], [33.5, 24274.0], [33.6, 24274.0], [33.7, 24307.0], [33.8, 24319.0], [33.9, 24332.0], [34.0, 24332.0], [34.1, 24363.0], [34.2, 24374.0], [34.3, 24375.0], [34.4, 24375.0], [34.5, 24417.0], [34.6, 24437.0], [34.7, 24467.0], [34.8, 24467.0], [34.9, 24492.0], [35.0, 24509.0], [35.1, 24509.0], [35.2, 24511.0], [35.3, 24536.0], [35.4, 24557.0], [35.5, 24557.0], [35.6, 24604.0], [35.7, 24619.0], [35.8, 24642.0], [35.9, 24642.0], [36.0, 24644.0], [36.1, 24661.0], [36.2, 24675.0], [36.3, 24675.0], [36.4, 24679.0], [36.5, 24696.0], [36.6, 24715.0], [36.7, 24715.0], [36.8, 24741.0], [36.9, 24742.0], [37.0, 24742.0], [37.1, 24758.0], [37.2, 24764.0], [37.3, 24797.0], [37.4, 24797.0], [37.5, 24804.0], [37.6, 24812.0], [37.7, 24818.0], [37.8, 24818.0], [37.9, 24832.0], [38.0, 24840.0], [38.1, 24885.0], [38.2, 24885.0], [38.3, 24923.0], [38.4, 24958.0], [38.5, 24958.0], [38.6, 25068.0], [38.7, 25101.0], [38.8, 25106.0], [38.9, 25106.0], [39.0, 25181.0], [39.1, 25183.0], [39.2, 25185.0], [39.3, 25185.0], [39.4, 25197.0], [39.5, 25224.0], [39.6, 25249.0], [39.7, 25249.0], [39.8, 25291.0], [39.9, 25338.0], [40.0, 25344.0], [40.1, 25344.0], [40.2, 25362.0], [40.3, 25362.0], [40.4, 25362.0], [40.5, 25372.0], [40.6, 25376.0], [40.7, 25388.0], [40.8, 25388.0], [40.9, 25389.0], [41.0, 25450.0], [41.1, 25473.0], [41.2, 25473.0], [41.3, 25497.0], [41.4, 25529.0], [41.5, 25542.0], [41.6, 25542.0], [41.7, 25549.0], [41.8, 25577.0], [41.9, 25577.0], [42.0, 25580.0], [42.1, 25605.0], [42.2, 25607.0], [42.3, 25607.0], [42.4, 25637.0], [42.5, 25650.0], [42.6, 25658.0], [42.7, 25658.0], [42.8, 25671.0], [42.9, 25672.0], [43.0, 25675.0], [43.1, 25675.0], [43.2, 25714.0], [43.3, 25820.0], [43.4, 25820.0], [43.5, 25846.0], [43.6, 25848.0], [43.7, 25849.0], [43.8, 25849.0], [43.9, 25866.0], [44.0, 25889.0], [44.1, 25893.0], [44.2, 25893.0], [44.3, 25935.0], [44.4, 25945.0], [44.5, 25948.0], [44.6, 25948.0], [44.7, 25975.0], [44.8, 25994.0], [44.9, 25994.0], [45.0, 25994.0], [45.1, 26012.0], [45.2, 26019.0], [45.3, 26019.0], [45.4, 26045.0], [45.5, 26049.0], [45.6, 26085.0], [45.7, 26085.0], [45.8, 26095.0], [45.9, 26129.0], [46.0, 26151.0], [46.1, 26151.0], [46.2, 26167.0], [46.3, 26212.0], [46.4, 26217.0], [46.5, 26217.0], [46.6, 26272.0], [46.7, 26305.0], [46.8, 26305.0], [46.9, 26333.0], [47.0, 26341.0], [47.1, 26371.0], [47.2, 26371.0], [47.3, 26382.0], [47.4, 26394.0], [47.5, 26401.0], [47.6, 26401.0], [47.7, 26415.0], [47.8, 26416.0], [47.9, 26433.0], [48.0, 26433.0], [48.1, 26440.0], [48.2, 26470.0], [48.3, 26505.0], [48.4, 26505.0], [48.5, 26622.0], [48.6, 26644.0], [48.7, 26644.0], [48.8, 26651.0], [48.9, 26658.0], [49.0, 26768.0], [49.1, 26768.0], [49.2, 26805.0], [49.3, 26823.0], [49.4, 26845.0], [49.5, 26845.0], [49.6, 26850.0], [49.7, 26852.0], [49.8, 26856.0], [49.9, 26856.0], [50.0, 26863.0], [50.1, 26864.0], [50.2, 26864.0], [50.3, 26874.0], [50.4, 26885.0], [50.5, 26912.0], [50.6, 26912.0], [50.7, 27012.0], [50.8, 27024.0], [50.9, 27093.0], [51.0, 27093.0], [51.1, 27146.0], [51.2, 27174.0], [51.3, 27187.0], [51.4, 27187.0], [51.5, 27215.0], [51.6, 27228.0], [51.7, 27228.0], [51.8, 27385.0], [51.9, 27389.0], [52.0, 27409.0], [52.1, 27409.0], [52.2, 27438.0], [52.3, 27468.0], [52.4, 27470.0], [52.5, 27470.0], [52.6, 27478.0], [52.7, 27494.0], [52.8, 27503.0], [52.9, 27503.0], [53.0, 27558.0], [53.1, 27592.0], [53.2, 27628.0], [53.3, 27628.0], [53.4, 27636.0], [53.5, 27648.0], [53.6, 27648.0], [53.7, 27649.0], [53.8, 27664.0], [53.9, 27678.0], [54.0, 27678.0], [54.1, 27684.0], [54.2, 27692.0], [54.3, 27694.0], [54.4, 27694.0], [54.5, 27700.0], [54.6, 27712.0], [54.7, 27736.0], [54.8, 27736.0], [54.9, 27759.0], [55.0, 27762.0], [55.1, 27762.0], [55.2, 27797.0], [55.3, 27810.0], [55.4, 27813.0], [55.5, 27813.0], [55.6, 27818.0], [55.7, 27818.0], [55.8, 27819.0], [55.9, 27819.0], [56.0, 27822.0], [56.1, 27836.0], [56.2, 27844.0], [56.3, 27844.0], [56.4, 27844.0], [56.5, 27869.0], [56.6, 27893.0], [56.7, 27893.0], [56.8, 27915.0], [56.9, 27935.0], [57.0, 27935.0], [57.1, 27950.0], [57.2, 27967.0], [57.3, 27996.0], [57.4, 27996.0], [57.5, 28002.0], [57.6, 28005.0], [57.7, 28009.0], [57.8, 28009.0], [57.9, 28013.0], [58.0, 28016.0], [58.1, 28084.0], [58.2, 28084.0], [58.3, 28101.0], [58.4, 28109.0], [58.5, 28109.0], [58.6, 28111.0], [58.7, 28131.0], [58.8, 28165.0], [58.9, 28165.0], [59.0, 28168.0], [59.1, 28237.0], [59.2, 28250.0], [59.3, 28250.0], [59.4, 28253.0], [59.5, 28286.0], [59.6, 28297.0], [59.7, 28297.0], [59.8, 28341.0], [59.9, 28349.0], [60.0, 28414.0], [60.1, 28414.0], [60.2, 28425.0], [60.3, 28433.0], [60.4, 28433.0], [60.5, 28437.0], [60.6, 28445.0], [60.7, 28466.0], [60.8, 28466.0], [60.9, 28475.0], [61.0, 28490.0], [61.1, 28491.0], [61.2, 28491.0], [61.3, 28496.0], [61.4, 28507.0], [61.5, 28509.0], [61.6, 28509.0], [61.7, 28525.0], [61.8, 28531.0], [61.9, 28531.0], [62.0, 28569.0], [62.1, 28574.0], [62.2, 28616.0], [62.3, 28616.0], [62.4, 28634.0], [62.5, 28642.0], [62.6, 28646.0], [62.7, 28646.0], [62.8, 28651.0], [62.9, 28651.0], [63.0, 28663.0], [63.1, 28663.0], [63.2, 28667.0], [63.3, 28668.0], [63.4, 28668.0], [63.5, 28671.0], [63.6, 28674.0], [63.7, 28676.0], [63.8, 28676.0], [63.9, 28681.0], [64.0, 28691.0], [64.1, 28694.0], [64.2, 28694.0], [64.3, 28699.0], [64.4, 28704.0], [64.5, 28710.0], [64.6, 28710.0], [64.7, 28713.0], [64.8, 28715.0], [64.9, 28717.0], [65.0, 28717.0], [65.1, 28719.0], [65.2, 28721.0], [65.3, 28721.0], [65.4, 28730.0], [65.5, 28735.0], [65.6, 28736.0], [65.7, 28736.0], [65.8, 28739.0], [65.9, 28749.0], [66.0, 28750.0], [66.1, 28750.0], [66.2, 28757.0], [66.3, 28763.0], [66.4, 28765.0], [66.5, 28765.0], [66.6, 28768.0], [66.7, 28774.0], [66.8, 28774.0], [66.9, 28775.0], [67.0, 28782.0], [67.1, 28789.0], [67.2, 28789.0], [67.3, 28793.0], [67.4, 28794.0], [67.5, 28794.0], [67.6, 28794.0], [67.7, 28802.0], [67.8, 28805.0], [67.9, 28807.0], [68.0, 28807.0], [68.1, 28814.0], [68.2, 28819.0], [68.3, 28820.0], [68.4, 28820.0], [68.5, 28823.0], [68.6, 28830.0], [68.7, 28830.0], [68.8, 28838.0], [68.9, 28840.0], [69.0, 28841.0], [69.1, 28841.0], [69.2, 28843.0], [69.3, 28845.0], [69.4, 28850.0], [69.5, 28850.0], [69.6, 28855.0], [69.7, 28855.0], [69.8, 28856.0], [69.9, 28856.0], [70.0, 28860.0], [70.1, 28861.0], [70.2, 28861.0], [70.3, 28861.0], [70.4, 28865.0], [70.5, 28866.0], [70.6, 28866.0], [70.7, 28876.0], [70.8, 28879.0], [70.9, 28884.0], [71.0, 28884.0], [71.1, 28885.0], [71.2, 28887.0], [71.3, 28891.0], [71.4, 28891.0], [71.5, 28892.0], [71.6, 28892.0], [71.7, 28892.0], [71.8, 28899.0], [71.9, 28904.0], [72.0, 28904.0], [72.1, 28904.0], [72.2, 28905.0], [72.3, 28906.0], [72.4, 28915.0], [72.5, 28915.0], [72.6, 28915.0], [72.7, 28923.0], [72.8, 28933.0], [72.9, 28933.0], [73.0, 28935.0], [73.1, 28938.0], [73.2, 28940.0], [73.3, 28940.0], [73.4, 28943.0], [73.5, 28953.0], [73.6, 28953.0], [73.7, 28964.0], [73.8, 28966.0], [73.9, 28967.0], [74.0, 28967.0], [74.1, 28968.0], [74.2, 28972.0], [74.3, 28974.0], [74.4, 28974.0], [74.5, 28975.0], [74.6, 28978.0], [74.7, 28979.0], [74.8, 28979.0], [74.9, 28979.0], [75.0, 28983.0], [75.1, 28983.0], [75.2, 28984.0], [75.3, 28986.0], [75.4, 28986.0], [75.5, 28986.0], [75.6, 28990.0], [75.7, 28991.0], [75.8, 28992.0], [75.9, 28992.0], [76.0, 28997.0], [76.1, 29005.0], [76.2, 29015.0], [76.3, 29015.0], [76.4, 29015.0], [76.5, 29020.0], [76.6, 29024.0], [76.7, 29024.0], [76.8, 29025.0], [76.9, 29029.0], [77.0, 29029.0], [77.1, 29032.0], [77.2, 29034.0], [77.3, 29035.0], [77.4, 29035.0], [77.5, 29037.0], [77.6, 29040.0], [77.7, 29042.0], [77.8, 29042.0], [77.9, 29042.0], [78.0, 29045.0], [78.1, 29047.0], [78.2, 29047.0], [78.3, 29051.0], [78.4, 29052.0], [78.5, 29052.0], [78.6, 29053.0], [78.7, 29054.0], [78.8, 29059.0], [78.9, 29059.0], [79.0, 29060.0], [79.1, 29063.0], [79.2, 29066.0], [79.3, 29066.0], [79.4, 29067.0], [79.5, 29069.0], [79.6, 29076.0], [79.7, 29076.0], [79.8, 29077.0], [79.9, 29078.0], [80.0, 29082.0], [80.1, 29082.0], [80.2, 29083.0], [80.3, 29089.0], [80.4, 29089.0], [80.5, 29091.0], [80.6, 29091.0], [80.7, 29096.0], [80.8, 29096.0], [80.9, 29101.0], [81.0, 29117.0], [81.1, 29130.0], [81.2, 29130.0], [81.3, 29131.0], [81.4, 29131.0], [81.5, 29136.0], [81.6, 29136.0], [81.7, 29139.0], [81.8, 29141.0], [81.9, 29141.0], [82.0, 29143.0], [82.1, 29153.0], [82.2, 29156.0], [82.3, 29156.0], [82.4, 29161.0], [82.5, 29164.0], [82.6, 29165.0], [82.7, 29165.0], [82.8, 29168.0], [82.9, 29175.0], [83.0, 29175.0], [83.1, 29175.0], [83.2, 29184.0], [83.3, 29184.0], [83.4, 29184.0], [83.5, 29187.0], [83.6, 29191.0], [83.7, 29192.0], [83.8, 29192.0], [83.9, 29192.0], [84.0, 29195.0], [84.1, 29197.0], [84.2, 29197.0], [84.3, 29208.0], [84.4, 29209.0], [84.5, 29219.0], [84.6, 29219.0], [84.7, 29223.0], [84.8, 29228.0], [84.9, 29231.0], [85.0, 29231.0], [85.1, 29233.0], [85.2, 29234.0], [85.3, 29234.0], [85.4, 29239.0], [85.5, 29244.0], [85.6, 29259.0], [85.7, 29259.0], [85.8, 29261.0], [85.9, 29264.0], [86.0, 29264.0], [86.1, 29264.0], [86.2, 29270.0], [86.3, 29276.0], [86.4, 29278.0], [86.5, 29278.0], [86.6, 29281.0], [86.7, 29294.0], [86.8, 29294.0], [86.9, 29298.0], [87.0, 29299.0], [87.1, 29308.0], [87.2, 29308.0], [87.3, 29319.0], [87.4, 29319.0], [87.5, 29320.0], [87.6, 29320.0], [87.7, 29333.0], [87.8, 29337.0], [87.9, 29350.0], [88.0, 29350.0], [88.1, 29361.0], [88.2, 29363.0], [88.3, 29375.0], [88.4, 29375.0], [88.5, 29379.0], [88.6, 29383.0], [88.7, 29383.0], [88.8, 29387.0], [88.9, 29388.0], [89.0, 29404.0], [89.1, 29404.0], [89.2, 29431.0], [89.3, 29432.0], [89.4, 29434.0], [89.5, 29434.0], [89.6, 29439.0], [89.7, 29446.0], [89.8, 29451.0], [89.9, 29451.0], [90.0, 29453.0], [90.1, 29455.0], [90.2, 29455.0], [90.3, 29477.0], [90.4, 29482.0], [90.5, 29484.0], [90.6, 29484.0], [90.7, 29506.0], [90.8, 29510.0], [90.9, 29517.0], [91.0, 29517.0], [91.1, 29520.0], [91.2, 29537.0], [91.3, 29538.0], [91.4, 29538.0], [91.5, 29572.0], [91.6, 29574.0], [91.7, 29574.0], [91.8, 29576.0], [91.9, 29579.0], [92.0, 29611.0], [92.1, 29611.0], [92.2, 29612.0], [92.3, 29665.0], [92.4, 29710.0], [92.5, 29710.0], [92.6, 29725.0], [92.7, 29735.0], [92.8, 29831.0], [92.9, 29831.0], [93.0, 29930.0], [93.1, 29934.0], [93.2, 30037.0], [93.3, 30037.0], [93.4, 30150.0], [93.5, 30276.0], [93.6, 30276.0], [93.7, 30460.0], [93.8, 31058.0], [93.9, 31102.0], [94.0, 31102.0], [94.1, 31215.0], [94.2, 31277.0], [94.3, 31417.0], [94.4, 31417.0], [94.5, 31419.0], [94.6, 31438.0], [94.7, 31444.0], [94.8, 31444.0], [94.9, 31477.0], [95.0, 31558.0], [95.1, 31558.0], [95.2, 31572.0], [95.3, 31989.0], [95.4, 32264.0], [95.5, 32264.0], [95.6, 32775.0], [95.7, 32875.0], [95.8, 32888.0], [95.9, 32888.0], [96.0, 33114.0], [96.1, 33207.0], [96.2, 33393.0], [96.3, 33393.0], [96.4, 33726.0], [96.5, 34331.0], [96.6, 34337.0], [96.7, 34337.0], [96.8, 35006.0], [96.9, 35086.0], [97.0, 35086.0], [97.1, 35519.0], [97.2, 35766.0], [97.3, 35850.0], [97.4, 35850.0], [97.5, 36872.0], [97.6, 37288.0], [97.7, 37435.0], [97.8, 37435.0], [97.9, 38372.0], [98.0, 38649.0], [98.1, 39101.0], [98.2, 39101.0], [98.3, 40096.0], [98.4, 41039.0], [98.5, 41039.0], [98.6, 41260.0], [98.7, 41278.0], [98.8, 42299.0], [98.9, 42299.0], [99.0, 42321.0], [99.1, 42772.0], [99.2, 43288.0], [99.3, 43288.0], [99.4, 43408.0], [99.5, 43473.0], [99.6, 44431.0], [99.7, 44431.0], [99.8, 44444.0], [99.9, 44645.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3200.0, "maxY": 35.0, "series": [{"data": [[33700.0, 1.0], [34300.0, 2.0], [33100.0, 1.0], [33300.0, 1.0], [35500.0, 1.0], [35700.0, 1.0], [38300.0, 1.0], [39100.0, 1.0], [42700.0, 1.0], [42300.0, 1.0], [3200.0, 1.0], [6200.0, 1.0], [8700.0, 1.0], [11600.0, 1.0], [14200.0, 1.0], [16700.0, 1.0], [17400.0, 5.0], [17200.0, 2.0], [17300.0, 4.0], [17000.0, 1.0], [17100.0, 1.0], [17600.0, 8.0], [17900.0, 6.0], [18400.0, 3.0], [17700.0, 9.0], [18000.0, 5.0], [18300.0, 3.0], [18200.0, 4.0], [17800.0, 9.0], [17500.0, 2.0], [18100.0, 2.0], [18700.0, 5.0], [18600.0, 3.0], [18800.0, 2.0], [19200.0, 1.0], [19400.0, 4.0], [19300.0, 2.0], [19100.0, 1.0], [19000.0, 1.0], [20300.0, 2.0], [20100.0, 6.0], [19900.0, 6.0], [19600.0, 3.0], [19500.0, 4.0], [20200.0, 3.0], [20400.0, 1.0], [20000.0, 1.0], [19700.0, 2.0], [19800.0, 4.0], [21300.0, 2.0], [20600.0, 2.0], [21200.0, 1.0], [21000.0, 3.0], [20500.0, 1.0], [20900.0, 1.0], [21400.0, 2.0], [21100.0, 1.0], [22300.0, 4.0], [21800.0, 2.0], [22400.0, 4.0], [22200.0, 3.0], [22100.0, 3.0], [22500.0, 4.0], [21900.0, 10.0], [21700.0, 2.0], [21600.0, 1.0], [22000.0, 2.0], [23300.0, 5.0], [23000.0, 5.0], [23500.0, 7.0], [23100.0, 5.0], [23400.0, 3.0], [23200.0, 6.0], [22800.0, 2.0], [22700.0, 4.0], [22600.0, 1.0], [22900.0, 2.0], [23800.0, 6.0], [23900.0, 8.0], [23600.0, 4.0], [23700.0, 5.0], [24000.0, 6.0], [24400.0, 4.0], [24500.0, 4.0], [24100.0, 4.0], [24300.0, 6.0], [24200.0, 5.0], [25500.0, 5.0], [24700.0, 6.0], [25100.0, 6.0], [24600.0, 8.0], [24900.0, 2.0], [25000.0, 1.0], [24800.0, 6.0], [25300.0, 8.0], [25400.0, 3.0], [25200.0, 3.0], [25800.0, 7.0], [26500.0, 1.0], [26000.0, 6.0], [26300.0, 6.0], [26600.0, 4.0], [26100.0, 3.0], [26400.0, 6.0], [26200.0, 3.0], [25900.0, 6.0], [25600.0, 8.0], [25700.0, 1.0], [27400.0, 6.0], [27600.0, 9.0], [27200.0, 2.0], [26800.0, 10.0], [27500.0, 3.0], [27300.0, 2.0], [26700.0, 1.0], [27100.0, 3.0], [27000.0, 3.0], [26900.0, 1.0], [28500.0, 6.0], [28000.0, 6.0], [27700.0, 6.0], [28100.0, 6.0], [28200.0, 5.0], [28600.0, 16.0], [28400.0, 10.0], [28300.0, 2.0], [27800.0, 11.0], [27900.0, 5.0], [28800.0, 31.0], [29000.0, 35.0], [28900.0, 31.0], [28700.0, 24.0], [29100.0, 25.0], [29200.0, 21.0], [29300.0, 14.0], [29400.0, 12.0], [29500.0, 10.0], [29600.0, 3.0], [30000.0, 1.0], [29900.0, 2.0], [30400.0, 1.0], [29700.0, 3.0], [30100.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [31100.0, 1.0], [31400.0, 5.0], [31200.0, 2.0], [31000.0, 1.0], [31500.0, 2.0], [32200.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [33200.0, 1.0], [32800.0, 2.0], [35000.0, 2.0], [36800.0, 1.0], [35800.0, 1.0], [38600.0, 1.0], [37200.0, 1.0], [37400.0, 1.0], [40000.0, 1.0], [41200.0, 2.0], [41000.0, 1.0], [42200.0, 1.0], [43200.0, 1.0], [43400.0, 2.0], [44600.0, 1.0], [44400.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.200000000000001, "minX": 1.60385502E12, "maxY": 10.0, "series": [{"data": [[1.60385508E12, 10.0], [1.60385568E12, 10.0], [1.6038567E12, 10.0], [1.60385538E12, 10.0], [1.6038561E12, 10.0], [1.6038555E12, 10.0], [1.6038564E12, 10.0], [1.6038558E12, 10.0], [1.60385682E12, 10.0], [1.6038552E12, 10.0], [1.60385622E12, 10.0], [1.60385652E12, 10.0], [1.60385532E12, 10.0], [1.60385502E12, 10.0], [1.60385592E12, 10.0], [1.60385694E12, 8.200000000000001], [1.60385562E12, 10.0], [1.60385634E12, 10.0], [1.60385664E12, 10.0], [1.60385574E12, 10.0], [1.60385604E12, 10.0], [1.60385544E12, 10.0], [1.60385646E12, 10.0], [1.60385514E12, 10.0], [1.60385676E12, 10.0], [1.60385556E12, 10.0], [1.60385586E12, 10.0], [1.60385526E12, 10.0], [1.60385616E12, 10.0], [1.60385658E12, 10.0], [1.60385688E12, 10.0], [1.60385598E12, 10.0], [1.60385628E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385694E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17065.0, "minX": 1.0, "maxY": 26058.468319559233, "series": [{"data": [[8.0, 17807.0], [4.0, 17065.0], [2.0, 17204.0], [1.0, 17607.0], [9.0, 17906.0], [10.0, 26058.468319559233], [5.0, 17401.0], [6.0, 17779.0], [3.0, 17126.0], [7.0, 17830.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25953.976870748305]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 29.266666666666666, "minX": 1.60385502E12, "maxY": 226563.15, "series": [{"data": [[1.60385508E12, 196553.35], [1.60385568E12, 44564.63333333333], [1.6038567E12, 33047.86666666667], [1.60385538E12, 54810.35], [1.6038561E12, 87555.26666666666], [1.6038555E12, 51549.96666666667], [1.6038564E12, 48848.683333333334], [1.6038558E12, 53128.566666666666], [1.60385682E12, 146159.86666666667], [1.6038552E12, 129269.91666666667], [1.60385622E12, 42824.46666666667], [1.60385652E12, 49333.6], [1.60385532E12, 44564.11666666667], [1.60385502E12, 52600.683333333334], [1.60385592E12, 71100.63333333333], [1.60385694E12, 34745.78333333333], [1.60385562E12, 42596.21666666667], [1.60385634E12, 51915.35], [1.60385664E12, 43538.73333333333], [1.60385574E12, 35250.416666666664], [1.60385604E12, 59718.9], [1.60385544E12, 43729.566666666666], [1.60385646E12, 52524.7], [1.60385514E12, 70067.41666666667], [1.60385676E12, 27064.2], [1.60385556E12, 55016.98333333333], [1.60385586E12, 167209.1], [1.60385526E12, 74501.73333333334], [1.60385616E12, 71086.95], [1.60385658E12, 50531.166666666664], [1.60385688E12, 70905.26666666666], [1.60385598E12, 226563.15], [1.60385628E12, 40551.73333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60385508E12, 176.51666666666668], [1.60385568E12, 153.28333333333333], [1.6038567E12, 175.03333333333333], [1.60385538E12, 153.46666666666667], [1.6038561E12, 170.9], [1.6038555E12, 153.45], [1.6038564E12, 146.13333333333333], [1.6038558E12, 209.35], [1.60385682E12, 203.36666666666667], [1.6038552E12, 113.16666666666667], [1.60385622E12, 140.06666666666666], [1.60385652E12, 153.78333333333333], [1.60385532E12, 176.58333333333334], [1.60385502E12, 29.266666666666666], [1.60385592E12, 189.76666666666668], [1.60385694E12, 169.08333333333334], [1.60385562E12, 146.06666666666666], [1.60385634E12, 153.46666666666667], [1.60385664E12, 153.26666666666668], [1.60385574E12, 167.96666666666667], [1.60385604E12, 224.43333333333334], [1.60385544E12, 146.1], [1.60385646E12, 161.33333333333334], [1.60385514E12, 215.43333333333334], [1.60385676E12, 175.2], [1.60385556E12, 153.68333333333334], [1.60385586E12, 179.8], [1.60385526E12, 160.71666666666667], [1.60385616E12, 175.33333333333334], [1.60385658E12, 153.43333333333334], [1.60385688E12, 139.36666666666667], [1.60385598E12, 174.4], [1.60385628E12, 146.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385694E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7478.0, "minX": 1.60385502E12, "maxY": 34035.53333333333, "series": [{"data": [[1.60385508E12, 24388.291666666668], [1.60385568E12, 29197.666666666664], [1.6038567E12, 26188.875], [1.60385538E12, 27945.571428571435], [1.6038561E12, 24217.521739130436], [1.6038555E12, 29102.904761904763], [1.6038564E12, 29121.55], [1.6038558E12, 21614.931034482754], [1.60385682E12, 22266.214285714283], [1.6038552E12, 34035.53333333333], [1.60385622E12, 27300.894736842103], [1.60385652E12, 28162.190476190477], [1.60385532E12, 25383.125], [1.60385502E12, 7478.0], [1.60385592E12, 25051.185185185186], [1.60385694E12, 20376.12], [1.60385562E12, 28832.149999999998], [1.60385634E12, 29130.904761904767], [1.60385664E12, 28878.428571428572], [1.60385574E12, 26847.91304347826], [1.60385604E12, 20155.375], [1.60385544E12, 29437.400000000005], [1.60385646E12, 28000.590909090908], [1.60385514E12, 19791.900000000005], [1.60385676E12, 23481.041666666664], [1.60385556E12, 28838.142857142855], [1.60385586E12, 20694.079999999998], [1.60385526E12, 30120.409090909096], [1.60385616E12, 25444.75], [1.60385658E12, 28950.809523809527], [1.60385688E12, 29818.21052631579], [1.60385598E12, 23509.875], [1.60385628E12, 33074.049999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385694E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7471.25, "minX": 1.60385502E12, "maxY": 34030.933333333334, "series": [{"data": [[1.60385508E12, 24384.958333333336], [1.60385568E12, 29196.380952380954], [1.6038567E12, 26188.249999999996], [1.60385538E12, 27944.476190476187], [1.6038561E12, 24215.434782608696], [1.6038555E12, 29101.428571428572], [1.6038564E12, 29120.149999999998], [1.6038558E12, 21613.58620689655], [1.60385682E12, 22263.0], [1.6038552E12, 34030.933333333334], [1.60385622E12, 27299.63157894737], [1.60385652E12, 28161.142857142855], [1.60385532E12, 25382.29166666667], [1.60385502E12, 7471.25], [1.60385592E12, 25048.85185185185], [1.60385694E12, 20374.079999999998], [1.60385562E12, 28831.2], [1.60385634E12, 29129.619047619046], [1.60385664E12, 28877.190476190473], [1.60385574E12, 26847.04347826087], [1.60385604E12, 20153.874999999993], [1.60385544E12, 29436.100000000002], [1.60385646E12, 27999.318181818184], [1.60385514E12, 19790.53333333333], [1.60385676E12, 23480.45833333333], [1.60385556E12, 28836.809523809527], [1.60385586E12, 20689.680000000008], [1.60385526E12, 30118.72727272728], [1.60385616E12, 25443.333333333336], [1.60385658E12, 28949.52380952381], [1.60385688E12, 29815.894736842103], [1.60385598E12, 23504.583333333336], [1.60385628E12, 33073.1]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385694E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.14285714285714288, "minX": 1.60385502E12, "maxY": 20.0, "series": [{"data": [[1.60385508E12, 0.541666666666667], [1.60385568E12, 0.4761904761904762], [1.6038567E12, 0.5], [1.60385538E12, 0.4285714285714286], [1.6038561E12, 0.21739130434782608], [1.6038555E12, 0.2857142857142857], [1.6038564E12, 0.8000000000000002], [1.6038558E12, 0.4482758620689655], [1.60385682E12, 0.39285714285714296], [1.6038552E12, 0.5333333333333333], [1.60385622E12, 0.6315789473684211], [1.60385652E12, 0.3333333333333333], [1.60385532E12, 0.20833333333333331], [1.60385502E12, 20.0], [1.60385592E12, 0.3333333333333332], [1.60385694E12, 0.44000000000000006], [1.60385562E12, 0.65], [1.60385634E12, 0.14285714285714288], [1.60385664E12, 0.5238095238095238], [1.60385574E12, 0.1739130434782609], [1.60385604E12, 0.40625], [1.60385544E12, 0.7000000000000001], [1.60385646E12, 0.5454545454545455], [1.60385514E12, 0.5333333333333333], [1.60385676E12, 0.20833333333333337], [1.60385556E12, 0.33333333333333337], [1.60385586E12, 0.44000000000000006], [1.60385526E12, 0.7727272727272728], [1.60385616E12, 0.25], [1.60385658E12, 0.38095238095238104], [1.60385688E12, 0.5263157894736842], [1.60385598E12, 0.5], [1.60385628E12, 0.7000000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385694E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3250.0, "minX": 1.60385502E12, "maxY": 44645.0, "series": [{"data": [[1.60385508E12, 28084.0], [1.60385568E12, 29611.0], [1.6038567E12, 28651.0], [1.60385538E12, 29375.0], [1.6038561E12, 31572.0], [1.6038555E12, 29446.0], [1.6038564E12, 29387.0], [1.6038558E12, 26212.0], [1.60385682E12, 27712.0], [1.6038552E12, 44645.0], [1.60385622E12, 40096.0], [1.60385652E12, 29015.0], [1.60385532E12, 30460.0], [1.60385502E12, 11686.0], [1.60385592E12, 31477.0], [1.60385694E12, 32875.0], [1.60385562E12, 29175.0], [1.60385634E12, 29388.0], [1.60385664E12, 29264.0], [1.60385574E12, 28938.0], [1.60385604E12, 27494.0], [1.60385544E12, 29735.0], [1.60385646E12, 29076.0], [1.60385514E12, 23908.0], [1.60385676E12, 26341.0], [1.60385556E12, 29434.0], [1.60385586E12, 25106.0], [1.60385526E12, 44444.0], [1.60385616E12, 29037.0], [1.60385658E12, 29320.0], [1.60385688E12, 37435.0], [1.60385598E12, 28634.0], [1.60385628E12, 43408.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60385508E12, 14262.0], [1.60385568E12, 28681.0], [1.6038567E12, 24020.0], [1.60385538E12, 24437.0], [1.6038561E12, 17680.0], [1.6038555E12, 28699.0], [1.6038564E12, 28953.0], [1.6038558E12, 17340.0], [1.60385682E12, 19025.0], [1.6038552E12, 23304.0], [1.60385622E12, 21998.0], [1.60385652E12, 26850.0], [1.60385532E12, 22385.0], [1.60385502E12, 3250.0], [1.60385592E12, 18056.0], [1.60385694E12, 17065.0], [1.60385562E12, 28131.0], [1.60385634E12, 28861.0], [1.60385664E12, 28531.0], [1.60385574E12, 25185.0], [1.60385604E12, 17387.0], [1.60385544E12, 28866.0], [1.60385646E12, 26856.0], [1.60385514E12, 17250.0], [1.60385676E12, 21000.0], [1.60385556E12, 28341.0], [1.60385586E12, 17999.0], [1.60385526E12, 24467.0], [1.60385616E12, 23382.0], [1.60385658E12, 28496.0], [1.60385688E12, 25672.0], [1.60385598E12, 19320.0], [1.60385628E12, 25605.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60385508E12, 14262.0], [1.60385568E12, 28681.0], [1.6038567E12, 24020.0], [1.60385538E12, 24437.0], [1.6038561E12, 17680.0], [1.6038555E12, 28699.0], [1.6038564E12, 28953.0], [1.6038558E12, 17340.0], [1.60385682E12, 19025.0], [1.6038552E12, 23304.0], [1.60385622E12, 21998.0], [1.60385652E12, 26850.0], [1.60385532E12, 22385.0], [1.60385502E12, 3250.0], [1.60385592E12, 18056.0], [1.60385694E12, 17065.0], [1.60385562E12, 28131.0], [1.60385634E12, 28861.0], [1.60385664E12, 28531.0], [1.60385574E12, 25185.0], [1.60385604E12, 17387.0], [1.60385544E12, 28866.0], [1.60385646E12, 26856.0], [1.60385514E12, 17250.0], [1.60385676E12, 21000.0], [1.60385556E12, 28341.0], [1.60385586E12, 17999.0], [1.60385526E12, 24467.0], [1.60385616E12, 23382.0], [1.60385658E12, 28496.0], [1.60385688E12, 25672.0], [1.60385598E12, 19320.0], [1.60385628E12, 25605.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60385508E12, 14262.0], [1.60385568E12, 28681.0], [1.6038567E12, 24020.0], [1.60385538E12, 24437.0], [1.6038561E12, 17680.0], [1.6038555E12, 28699.0], [1.6038564E12, 28953.0], [1.6038558E12, 17340.0], [1.60385682E12, 19025.0], [1.6038552E12, 23304.0], [1.60385622E12, 21998.0], [1.60385652E12, 26850.0], [1.60385532E12, 22385.0], [1.60385502E12, 3250.0], [1.60385592E12, 18056.0], [1.60385694E12, 17065.0], [1.60385562E12, 28131.0], [1.60385634E12, 28861.0], [1.60385664E12, 28531.0], [1.60385574E12, 25185.0], [1.60385604E12, 17387.0], [1.60385544E12, 28866.0], [1.60385646E12, 26856.0], [1.60385514E12, 17250.0], [1.60385676E12, 21000.0], [1.60385556E12, 28341.0], [1.60385586E12, 17999.0], [1.60385526E12, 24467.0], [1.60385616E12, 23382.0], [1.60385658E12, 28496.0], [1.60385688E12, 25672.0], [1.60385598E12, 19320.0], [1.60385628E12, 25605.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60385508E12, 14262.0], [1.60385568E12, 28681.0], [1.6038567E12, 24020.0], [1.60385538E12, 24437.0], [1.6038561E12, 17680.0], [1.6038555E12, 28699.0], [1.6038564E12, 28953.0], [1.6038558E12, 17340.0], [1.60385682E12, 19025.0], [1.6038552E12, 23304.0], [1.60385622E12, 21998.0], [1.60385652E12, 26850.0], [1.60385532E12, 22385.0], [1.60385502E12, 3250.0], [1.60385592E12, 18056.0], [1.60385694E12, 17065.0], [1.60385562E12, 28131.0], [1.60385634E12, 28861.0], [1.60385664E12, 28531.0], [1.60385574E12, 25185.0], [1.60385604E12, 17387.0], [1.60385544E12, 28866.0], [1.60385646E12, 26856.0], [1.60385514E12, 17250.0], [1.60385676E12, 21000.0], [1.60385556E12, 28341.0], [1.60385586E12, 17999.0], [1.60385526E12, 24467.0], [1.60385616E12, 23382.0], [1.60385658E12, 28496.0], [1.60385688E12, 25672.0], [1.60385598E12, 19320.0], [1.60385628E12, 25605.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60385508E12, 25831.0], [1.60385568E12, 29228.0], [1.6038567E12, 26015.5], [1.60385538E12, 28805.0], [1.6038561E12, 23547.0], [1.6038555E12, 29164.0], [1.6038564E12, 29130.5], [1.6038558E12, 22592.0], [1.60385682E12, 22007.5], [1.6038552E12, 35519.0], [1.60385622E12, 24812.0], [1.60385652E12, 27935.0], [1.60385532E12, 24677.0], [1.60385502E12, 7488.0], [1.60385592E12, 25658.0], [1.60385694E12, 17849.0], [1.60385562E12, 28875.0], [1.60385634E12, 29165.0], [1.60385664E12, 28855.0], [1.60385574E12, 26433.0], [1.60385604E12, 19738.0], [1.60385544E12, 29480.5], [1.60385646E12, 28268.0], [1.60385514E12, 19807.0], [1.60385676E12, 23606.5], [1.60385556E12, 28820.0], [1.60385586E12, 19613.0], [1.60385526E12, 28565.5], [1.60385616E12, 24534.0], [1.60385658E12, 28991.0], [1.60385688E12, 28719.0], [1.60385598E12, 23900.0], [1.60385628E12, 30624.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385694E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26863.0, "minX": 1.0, "maxY": 26863.0, "series": [{"data": [[1.0, 26863.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26862.0, "minX": 1.0, "maxY": 26862.0, "series": [{"data": [[1.0, 26862.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.60385502E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385508E12, 0.4], [1.60385568E12, 0.35], [1.6038567E12, 0.4], [1.60385538E12, 0.35], [1.6038561E12, 0.38333333333333336], [1.6038555E12, 0.35], [1.6038564E12, 0.3333333333333333], [1.6038558E12, 0.48333333333333334], [1.60385682E12, 0.4666666666666667], [1.6038552E12, 0.25], [1.60385622E12, 0.31666666666666665], [1.60385652E12, 0.35], [1.60385532E12, 0.4], [1.60385502E12, 0.23333333333333334], [1.60385592E12, 0.45], [1.60385694E12, 0.25], [1.60385562E12, 0.3333333333333333], [1.60385634E12, 0.35], [1.60385664E12, 0.35], [1.60385574E12, 0.38333333333333336], [1.60385604E12, 0.5333333333333333], [1.60385544E12, 0.3333333333333333], [1.60385646E12, 0.36666666666666664], [1.60385514E12, 0.5], [1.60385676E12, 0.4], [1.60385556E12, 0.35], [1.60385586E12, 0.4166666666666667], [1.60385526E12, 0.36666666666666664], [1.60385616E12, 0.4], [1.60385658E12, 0.35], [1.60385688E12, 0.31666666666666665], [1.60385598E12, 0.4], [1.60385628E12, 0.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385694E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60385502E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385508E12, 0.4], [1.60385568E12, 0.35], [1.6038567E12, 0.4], [1.60385538E12, 0.35], [1.6038561E12, 0.38333333333333336], [1.6038555E12, 0.35], [1.6038564E12, 0.3333333333333333], [1.6038558E12, 0.48333333333333334], [1.60385682E12, 0.4666666666666667], [1.6038552E12, 0.25], [1.60385622E12, 0.31666666666666665], [1.60385652E12, 0.35], [1.60385532E12, 0.4], [1.60385502E12, 0.06666666666666667], [1.60385592E12, 0.45], [1.60385694E12, 0.4166666666666667], [1.60385562E12, 0.3333333333333333], [1.60385634E12, 0.35], [1.60385664E12, 0.35], [1.60385574E12, 0.38333333333333336], [1.60385604E12, 0.5333333333333333], [1.60385544E12, 0.3333333333333333], [1.60385646E12, 0.36666666666666664], [1.60385514E12, 0.5], [1.60385676E12, 0.4], [1.60385556E12, 0.35], [1.60385586E12, 0.4166666666666667], [1.60385526E12, 0.36666666666666664], [1.60385616E12, 0.4], [1.60385658E12, 0.35], [1.60385688E12, 0.31666666666666665], [1.60385598E12, 0.4], [1.60385628E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385694E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60385502E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385508E12, 0.4], [1.60385568E12, 0.35], [1.6038567E12, 0.4], [1.60385538E12, 0.35], [1.6038561E12, 0.38333333333333336], [1.6038555E12, 0.35], [1.6038564E12, 0.3333333333333333], [1.6038558E12, 0.48333333333333334], [1.60385682E12, 0.4666666666666667], [1.6038552E12, 0.25], [1.60385622E12, 0.31666666666666665], [1.60385652E12, 0.35], [1.60385532E12, 0.4], [1.60385502E12, 0.06666666666666667], [1.60385592E12, 0.45], [1.60385694E12, 0.4166666666666667], [1.60385562E12, 0.3333333333333333], [1.60385634E12, 0.35], [1.60385664E12, 0.35], [1.60385574E12, 0.38333333333333336], [1.60385604E12, 0.5333333333333333], [1.60385544E12, 0.3333333333333333], [1.60385646E12, 0.36666666666666664], [1.60385514E12, 0.5], [1.60385676E12, 0.4], [1.60385556E12, 0.35], [1.60385586E12, 0.4166666666666667], [1.60385526E12, 0.36666666666666664], [1.60385616E12, 0.4], [1.60385658E12, 0.35], [1.60385688E12, 0.31666666666666665], [1.60385598E12, 0.4], [1.60385628E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385694E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60385502E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.60385508E12, 0.4], [1.60385568E12, 0.35], [1.6038567E12, 0.4], [1.60385538E12, 0.35], [1.6038561E12, 0.38333333333333336], [1.6038555E12, 0.35], [1.6038564E12, 0.3333333333333333], [1.6038558E12, 0.48333333333333334], [1.60385682E12, 0.4666666666666667], [1.6038552E12, 0.25], [1.60385622E12, 0.31666666666666665], [1.60385652E12, 0.35], [1.60385532E12, 0.4], [1.60385502E12, 0.06666666666666667], [1.60385592E12, 0.45], [1.60385694E12, 0.4166666666666667], [1.60385562E12, 0.3333333333333333], [1.60385634E12, 0.35], [1.60385664E12, 0.35], [1.60385574E12, 0.38333333333333336], [1.60385604E12, 0.5333333333333333], [1.60385544E12, 0.3333333333333333], [1.60385646E12, 0.36666666666666664], [1.60385514E12, 0.5], [1.60385676E12, 0.4], [1.60385556E12, 0.35], [1.60385586E12, 0.4166666666666667], [1.60385526E12, 0.36666666666666664], [1.60385616E12, 0.4], [1.60385658E12, 0.35], [1.60385688E12, 0.31666666666666665], [1.60385598E12, 0.4], [1.60385628E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385694E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

