/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2356.0, "minX": 0.0, "maxY": 44403.0, "series": [{"data": [[0.0, 2356.0], [0.1, 2356.0], [0.2, 5380.0], [0.3, 8140.0], [0.4, 8140.0], [0.5, 10859.0], [0.6, 13311.0], [0.7, 15784.0], [0.8, 15784.0], [0.9, 16729.0], [1.0, 16730.0], [1.1, 16818.0], [1.2, 16818.0], [1.3, 16822.0], [1.4, 16855.0], [1.5, 16964.0], [1.6, 16964.0], [1.7, 17007.0], [1.8, 17031.0], [1.9, 17031.0], [2.0, 17083.0], [2.1, 17098.0], [2.2, 17169.0], [2.3, 17169.0], [2.4, 17189.0], [2.5, 17199.0], [2.6, 17204.0], [2.7, 17204.0], [2.8, 17209.0], [2.9, 17227.0], [3.0, 17244.0], [3.1, 17244.0], [3.2, 17262.0], [3.3, 17268.0], [3.4, 17268.0], [3.5, 17272.0], [3.6, 17288.0], [3.7, 17291.0], [3.8, 17291.0], [3.9, 17295.0], [4.0, 17311.0], [4.1, 17330.0], [4.2, 17330.0], [4.3, 17337.0], [4.4, 17358.0], [4.5, 17362.0], [4.6, 17362.0], [4.7, 17372.0], [4.8, 17388.0], [4.9, 17395.0], [5.0, 17395.0], [5.1, 17470.0], [5.2, 17518.0], [5.3, 17518.0], [5.4, 17541.0], [5.5, 17575.0], [5.6, 17606.0], [5.7, 17606.0], [5.8, 17621.0], [5.9, 17675.0], [6.0, 17701.0], [6.1, 17701.0], [6.2, 17779.0], [6.3, 17800.0], [6.4, 17814.0], [6.5, 17814.0], [6.6, 17819.0], [6.7, 17838.0], [6.8, 17838.0], [6.9, 17856.0], [7.0, 17856.0], [7.1, 17866.0], [7.2, 17866.0], [7.3, 17871.0], [7.4, 17913.0], [7.5, 17925.0], [7.6, 17925.0], [7.7, 17936.0], [7.8, 17957.0], [7.9, 17978.0], [8.0, 17978.0], [8.1, 18005.0], [8.2, 18030.0], [8.3, 18067.0], [8.4, 18067.0], [8.5, 18092.0], [8.6, 18106.0], [8.7, 18106.0], [8.8, 18116.0], [8.9, 18119.0], [9.0, 18149.0], [9.1, 18149.0], [9.2, 18152.0], [9.3, 18280.0], [9.4, 18288.0], [9.5, 18288.0], [9.6, 18326.0], [9.7, 18458.0], [9.8, 18466.0], [9.9, 18466.0], [10.0, 18552.0], [10.1, 18585.0], [10.2, 18585.0], [10.3, 18598.0], [10.4, 18599.0], [10.5, 18670.0], [10.6, 18670.0], [10.7, 18672.0], [10.8, 18799.0], [10.9, 18806.0], [11.0, 18806.0], [11.1, 18836.0], [11.2, 19088.0], [11.3, 19122.0], [11.4, 19122.0], [11.5, 19131.0], [11.6, 19133.0], [11.7, 19133.0], [11.8, 19137.0], [11.9, 19159.0], [12.0, 19161.0], [12.1, 19161.0], [12.2, 19170.0], [12.3, 19187.0], [12.4, 19204.0], [12.5, 19204.0], [12.6, 19234.0], [12.7, 19241.0], [12.8, 19336.0], [12.9, 19336.0], [13.0, 19343.0], [13.1, 19388.0], [13.2, 19507.0], [13.3, 19507.0], [13.4, 19525.0], [13.5, 19668.0], [13.6, 19668.0], [13.7, 19681.0], [13.8, 19758.0], [13.9, 19775.0], [14.0, 19775.0], [14.1, 19776.0], [14.2, 19817.0], [14.3, 19899.0], [14.4, 19899.0], [14.5, 19905.0], [14.6, 19936.0], [14.7, 19939.0], [14.8, 19939.0], [14.9, 20001.0], [15.0, 20024.0], [15.1, 20024.0], [15.2, 20037.0], [15.3, 20045.0], [15.4, 20078.0], [15.5, 20078.0], [15.6, 20084.0], [15.7, 20093.0], [15.8, 20121.0], [15.9, 20121.0], [16.0, 20148.0], [16.1, 20169.0], [16.2, 20180.0], [16.3, 20180.0], [16.4, 20235.0], [16.5, 20446.0], [16.6, 20457.0], [16.7, 20457.0], [16.8, 20491.0], [16.9, 20570.0], [17.0, 20570.0], [17.1, 20585.0], [17.2, 20708.0], [17.3, 20771.0], [17.4, 20771.0], [17.5, 20883.0], [17.6, 20991.0], [17.7, 21001.0], [17.8, 21001.0], [17.9, 21069.0], [18.0, 21173.0], [18.1, 21204.0], [18.2, 21204.0], [18.3, 21330.0], [18.4, 21442.0], [18.5, 21442.0], [18.6, 21449.0], [18.7, 21454.0], [18.8, 21459.0], [18.9, 21459.0], [19.0, 21486.0], [19.1, 21546.0], [19.2, 21546.0], [19.3, 21546.0], [19.4, 21665.0], [19.5, 21674.0], [19.6, 21711.0], [19.7, 21711.0], [19.8, 21760.0], [19.9, 21771.0], [20.0, 21817.0], [20.1, 21817.0], [20.2, 21823.0], [20.3, 21833.0], [20.4, 21833.0], [20.5, 21839.0], [20.6, 21848.0], [20.7, 21853.0], [20.8, 21853.0], [20.9, 21867.0], [21.0, 21891.0], [21.1, 21926.0], [21.2, 21926.0], [21.3, 21930.0], [21.4, 21940.0], [21.5, 21942.0], [21.6, 21942.0], [21.7, 21943.0], [21.8, 21969.0], [21.9, 21969.0], [22.0, 21981.0], [22.1, 21989.0], [22.2, 22013.0], [22.3, 22013.0], [22.4, 22018.0], [22.5, 22129.0], [22.6, 22173.0], [22.7, 22173.0], [22.8, 22187.0], [22.9, 22235.0], [23.0, 22236.0], [23.1, 22236.0], [23.2, 22259.0], [23.3, 22291.0], [23.4, 22291.0], [23.5, 22309.0], [23.6, 22322.0], [23.7, 22393.0], [23.8, 22393.0], [23.9, 22394.0], [24.0, 22515.0], [24.1, 22535.0], [24.2, 22535.0], [24.3, 22556.0], [24.4, 22647.0], [24.5, 22665.0], [24.6, 22665.0], [24.7, 22668.0], [24.8, 22733.0], [24.9, 22758.0], [25.0, 22758.0], [25.1, 22792.0], [25.2, 22809.0], [25.3, 22809.0], [25.4, 22871.0], [25.5, 22916.0], [25.6, 22928.0], [25.7, 22928.0], [25.8, 22935.0], [25.9, 22998.0], [26.0, 23000.0], [26.1, 23000.0], [26.2, 23005.0], [26.3, 23012.0], [26.4, 23027.0], [26.5, 23027.0], [26.6, 23038.0], [26.7, 23043.0], [26.8, 23043.0], [26.9, 23130.0], [27.0, 23158.0], [27.1, 23161.0], [27.2, 23161.0], [27.3, 23183.0], [27.4, 23219.0], [27.5, 23223.0], [27.6, 23223.0], [27.7, 23232.0], [27.8, 23235.0], [27.9, 23248.0], [28.0, 23248.0], [28.1, 23310.0], [28.2, 23335.0], [28.3, 23342.0], [28.4, 23342.0], [28.5, 23342.0], [28.6, 23361.0], [28.7, 23361.0], [28.8, 23389.0], [28.9, 23445.0], [29.0, 23462.0], [29.1, 23462.0], [29.2, 23471.0], [29.3, 23488.0], [29.4, 23500.0], [29.5, 23500.0], [29.6, 23540.0], [29.7, 23559.0], [29.8, 23573.0], [29.9, 23573.0], [30.0, 23583.0], [30.1, 23616.0], [30.2, 23616.0], [30.3, 23667.0], [30.4, 23669.0], [30.5, 23681.0], [30.6, 23681.0], [30.7, 23698.0], [30.8, 23703.0], [30.9, 23708.0], [31.0, 23708.0], [31.1, 23715.0], [31.2, 23746.0], [31.3, 23776.0], [31.4, 23776.0], [31.5, 23790.0], [31.6, 23805.0], [31.7, 23805.0], [31.8, 23805.0], [31.9, 23822.0], [32.0, 23825.0], [32.1, 23825.0], [32.2, 23881.0], [32.3, 23887.0], [32.4, 23892.0], [32.5, 23892.0], [32.6, 23911.0], [32.7, 23914.0], [32.8, 23916.0], [32.9, 23916.0], [33.0, 23920.0], [33.1, 23926.0], [33.2, 23952.0], [33.3, 23952.0], [33.4, 23980.0], [33.5, 23983.0], [33.6, 23983.0], [33.7, 24000.0], [33.8, 24005.0], [33.9, 24024.0], [34.0, 24024.0], [34.1, 24067.0], [34.2, 24087.0], [34.3, 24093.0], [34.4, 24093.0], [34.5, 24147.0], [34.6, 24185.0], [34.7, 24217.0], [34.8, 24217.0], [34.9, 24222.0], [35.0, 24223.0], [35.1, 24223.0], [35.2, 24226.0], [35.3, 24273.0], [35.4, 24285.0], [35.5, 24285.0], [35.6, 24286.0], [35.7, 24313.0], [35.8, 24333.0], [35.9, 24333.0], [36.0, 24347.0], [36.1, 24357.0], [36.2, 24387.0], [36.3, 24387.0], [36.4, 24407.0], [36.5, 24421.0], [36.6, 24437.0], [36.7, 24437.0], [36.8, 24448.0], [36.9, 24454.0], [37.0, 24454.0], [37.1, 24485.0], [37.2, 24514.0], [37.3, 24558.0], [37.4, 24558.0], [37.5, 24573.0], [37.6, 24599.0], [37.7, 24609.0], [37.8, 24609.0], [37.9, 24631.0], [38.0, 24641.0], [38.1, 24664.0], [38.2, 24664.0], [38.3, 24687.0], [38.4, 24754.0], [38.5, 24754.0], [38.6, 24771.0], [38.7, 24805.0], [38.8, 24830.0], [38.9, 24830.0], [39.0, 24872.0], [39.1, 24887.0], [39.2, 24893.0], [39.3, 24893.0], [39.4, 24905.0], [39.5, 24918.0], [39.6, 24921.0], [39.7, 24921.0], [39.8, 24935.0], [39.9, 24966.0], [40.0, 25040.0], [40.1, 25040.0], [40.2, 25065.0], [40.3, 25072.0], [40.4, 25072.0], [40.5, 25096.0], [40.6, 25166.0], [40.7, 25174.0], [40.8, 25174.0], [40.9, 25189.0], [41.0, 25203.0], [41.1, 25212.0], [41.2, 25212.0], [41.3, 25250.0], [41.4, 25279.0], [41.5, 25292.0], [41.6, 25292.0], [41.7, 25300.0], [41.8, 25360.0], [41.9, 25360.0], [42.0, 25362.0], [42.1, 25389.0], [42.2, 25394.0], [42.3, 25394.0], [42.4, 25425.0], [42.5, 25433.0], [42.6, 25459.0], [42.7, 25459.0], [42.8, 25461.0], [42.9, 25470.0], [43.0, 25485.0], [43.1, 25485.0], [43.2, 25525.0], [43.3, 25527.0], [43.4, 25527.0], [43.5, 25598.0], [43.6, 25602.0], [43.7, 25613.0], [43.8, 25613.0], [43.9, 25615.0], [44.0, 25636.0], [44.1, 25648.0], [44.2, 25648.0], [44.3, 25662.0], [44.4, 25707.0], [44.5, 25737.0], [44.6, 25737.0], [44.7, 25806.0], [44.8, 25814.0], [44.9, 25840.0], [45.0, 25840.0], [45.1, 25886.0], [45.2, 25889.0], [45.3, 25889.0], [45.4, 25898.0], [45.5, 25933.0], [45.6, 25940.0], [45.7, 25940.0], [45.8, 25949.0], [45.9, 26020.0], [46.0, 26042.0], [46.1, 26042.0], [46.2, 26042.0], [46.3, 26071.0], [46.4, 26076.0], [46.5, 26076.0], [46.6, 26111.0], [46.7, 26136.0], [46.8, 26136.0], [46.9, 26216.0], [47.0, 26222.0], [47.1, 26293.0], [47.2, 26293.0], [47.3, 26303.0], [47.4, 26304.0], [47.5, 26330.0], [47.6, 26330.0], [47.7, 26412.0], [47.8, 26436.0], [47.9, 26492.0], [48.0, 26492.0], [48.1, 26522.0], [48.2, 26534.0], [48.3, 26554.0], [48.4, 26554.0], [48.5, 26585.0], [48.6, 26643.0], [48.7, 26643.0], [48.8, 26654.0], [48.9, 26657.0], [49.0, 26661.0], [49.1, 26661.0], [49.2, 26679.0], [49.3, 26736.0], [49.4, 26780.0], [49.5, 26780.0], [49.6, 26810.0], [49.7, 26833.0], [49.8, 26834.0], [49.9, 26834.0], [50.0, 26855.0], [50.1, 26890.0], [50.2, 26890.0], [50.3, 26965.0], [50.4, 26990.0], [50.5, 27013.0], [50.6, 27013.0], [50.7, 27045.0], [50.8, 27068.0], [50.9, 27110.0], [51.0, 27110.0], [51.1, 27189.0], [51.2, 27207.0], [51.3, 27215.0], [51.4, 27215.0], [51.5, 27258.0], [51.6, 27270.0], [51.7, 27270.0], [51.8, 27282.0], [51.9, 27306.0], [52.0, 27341.0], [52.1, 27341.0], [52.2, 27383.0], [52.3, 27385.0], [52.4, 27420.0], [52.5, 27420.0], [52.6, 27461.0], [52.7, 27461.0], [52.8, 27487.0], [52.9, 27487.0], [53.0, 27509.0], [53.1, 27551.0], [53.2, 27564.0], [53.3, 27564.0], [53.4, 27567.0], [53.5, 27584.0], [53.6, 27584.0], [53.7, 27613.0], [53.8, 27620.0], [53.9, 27628.0], [54.0, 27628.0], [54.1, 27631.0], [54.2, 27639.0], [54.3, 27686.0], [54.4, 27686.0], [54.5, 27704.0], [54.6, 27721.0], [54.7, 27751.0], [54.8, 27751.0], [54.9, 27875.0], [55.0, 27889.0], [55.1, 27889.0], [55.2, 27974.0], [55.3, 28024.0], [55.4, 28028.0], [55.5, 28028.0], [55.6, 28069.0], [55.7, 28097.0], [55.8, 28123.0], [55.9, 28123.0], [56.0, 28131.0], [56.1, 28140.0], [56.2, 28161.0], [56.3, 28161.0], [56.4, 28175.0], [56.5, 28177.0], [56.6, 28179.0], [56.7, 28179.0], [56.8, 28182.0], [56.9, 28191.0], [57.0, 28191.0], [57.1, 28201.0], [57.2, 28214.0], [57.3, 28216.0], [57.4, 28216.0], [57.5, 28217.0], [57.6, 28254.0], [57.7, 28273.0], [57.8, 28273.0], [57.9, 28275.0], [58.0, 28284.0], [58.1, 28285.0], [58.2, 28285.0], [58.3, 28297.0], [58.4, 28297.0], [58.5, 28297.0], [58.6, 28318.0], [58.7, 28327.0], [58.8, 28338.0], [58.9, 28338.0], [59.0, 28343.0], [59.1, 28345.0], [59.2, 28354.0], [59.3, 28354.0], [59.4, 28357.0], [59.5, 28368.0], [59.6, 28382.0], [59.7, 28382.0], [59.8, 28402.0], [59.9, 28402.0], [60.0, 28405.0], [60.1, 28405.0], [60.2, 28417.0], [60.3, 28425.0], [60.4, 28425.0], [60.5, 28431.0], [60.6, 28467.0], [60.7, 28483.0], [60.8, 28483.0], [60.9, 28485.0], [61.0, 28488.0], [61.1, 28503.0], [61.2, 28503.0], [61.3, 28508.0], [61.4, 28509.0], [61.5, 28510.0], [61.6, 28510.0], [61.7, 28511.0], [61.8, 28515.0], [61.9, 28515.0], [62.0, 28517.0], [62.1, 28522.0], [62.2, 28540.0], [62.3, 28540.0], [62.4, 28549.0], [62.5, 28553.0], [62.6, 28554.0], [62.7, 28554.0], [62.8, 28557.0], [62.9, 28559.0], [63.0, 28559.0], [63.1, 28559.0], [63.2, 28563.0], [63.3, 28566.0], [63.4, 28566.0], [63.5, 28570.0], [63.6, 28577.0], [63.7, 28583.0], [63.8, 28583.0], [63.9, 28588.0], [64.0, 28589.0], [64.1, 28598.0], [64.2, 28598.0], [64.3, 28599.0], [64.4, 28608.0], [64.5, 28609.0], [64.6, 28609.0], [64.7, 28613.0], [64.8, 28618.0], [64.9, 28622.0], [65.0, 28622.0], [65.1, 28625.0], [65.2, 28629.0], [65.3, 28629.0], [65.4, 28635.0], [65.5, 28641.0], [65.6, 28649.0], [65.7, 28649.0], [65.8, 28652.0], [65.9, 28657.0], [66.0, 28658.0], [66.1, 28658.0], [66.2, 28660.0], [66.3, 28662.0], [66.4, 28667.0], [66.5, 28667.0], [66.6, 28670.0], [66.7, 28673.0], [66.8, 28673.0], [66.9, 28674.0], [67.0, 28676.0], [67.1, 28688.0], [67.2, 28688.0], [67.3, 28689.0], [67.4, 28690.0], [67.5, 28691.0], [67.6, 28691.0], [67.7, 28694.0], [67.8, 28697.0], [67.9, 28700.0], [68.0, 28700.0], [68.1, 28700.0], [68.2, 28703.0], [68.3, 28708.0], [68.4, 28708.0], [68.5, 28710.0], [68.6, 28710.0], [68.7, 28710.0], [68.8, 28721.0], [68.9, 28727.0], [69.0, 28737.0], [69.1, 28737.0], [69.2, 28737.0], [69.3, 28738.0], [69.4, 28744.0], [69.5, 28744.0], [69.6, 28746.0], [69.7, 28752.0], [69.8, 28754.0], [69.9, 28754.0], [70.0, 28757.0], [70.1, 28763.0], [70.2, 28763.0], [70.3, 28763.0], [70.4, 28774.0], [70.5, 28775.0], [70.6, 28775.0], [70.7, 28779.0], [70.8, 28779.0], [70.9, 28787.0], [71.0, 28787.0], [71.1, 28788.0], [71.2, 28793.0], [71.3, 28796.0], [71.4, 28796.0], [71.5, 28798.0], [71.6, 28800.0], [71.7, 28800.0], [71.8, 28801.0], [71.9, 28802.0], [72.0, 28803.0], [72.1, 28803.0], [72.2, 28804.0], [72.3, 28808.0], [72.4, 28808.0], [72.5, 28808.0], [72.6, 28812.0], [72.7, 28814.0], [72.8, 28824.0], [72.9, 28824.0], [73.0, 28828.0], [73.1, 28835.0], [73.2, 28836.0], [73.3, 28836.0], [73.4, 28855.0], [73.5, 28856.0], [73.6, 28856.0], [73.7, 28863.0], [73.8, 28864.0], [73.9, 28864.0], [74.0, 28864.0], [74.1, 28866.0], [74.2, 28868.0], [74.3, 28869.0], [74.4, 28869.0], [74.5, 28873.0], [74.6, 28878.0], [74.7, 28878.0], [74.8, 28878.0], [74.9, 28881.0], [75.0, 28885.0], [75.1, 28885.0], [75.2, 28885.0], [75.3, 28889.0], [75.4, 28892.0], [75.5, 28892.0], [75.6, 28895.0], [75.7, 28897.0], [75.8, 28902.0], [75.9, 28902.0], [76.0, 28907.0], [76.1, 28910.0], [76.2, 28914.0], [76.3, 28914.0], [76.4, 28921.0], [76.5, 28931.0], [76.6, 28931.0], [76.7, 28931.0], [76.8, 28931.0], [76.9, 28933.0], [77.0, 28933.0], [77.1, 28934.0], [77.2, 28935.0], [77.3, 28935.0], [77.4, 28935.0], [77.5, 28941.0], [77.6, 28944.0], [77.7, 28944.0], [77.8, 28944.0], [77.9, 28944.0], [78.0, 28948.0], [78.1, 28956.0], [78.2, 28956.0], [78.3, 28958.0], [78.4, 28961.0], [78.5, 28961.0], [78.6, 28961.0], [78.7, 28970.0], [78.8, 28990.0], [78.9, 28990.0], [79.0, 28992.0], [79.1, 28999.0], [79.2, 29000.0], [79.3, 29000.0], [79.4, 29005.0], [79.5, 29005.0], [79.6, 29013.0], [79.7, 29013.0], [79.8, 29015.0], [79.9, 29015.0], [80.0, 29015.0], [80.1, 29015.0], [80.2, 29017.0], [80.3, 29019.0], [80.4, 29019.0], [80.5, 29020.0], [80.6, 29020.0], [80.7, 29022.0], [80.8, 29022.0], [80.9, 29022.0], [81.0, 29023.0], [81.1, 29026.0], [81.2, 29026.0], [81.3, 29032.0], [81.4, 29036.0], [81.5, 29037.0], [81.6, 29037.0], [81.7, 29045.0], [81.8, 29059.0], [81.9, 29059.0], [82.0, 29068.0], [82.1, 29068.0], [82.2, 29069.0], [82.3, 29069.0], [82.4, 29071.0], [82.5, 29072.0], [82.6, 29075.0], [82.7, 29075.0], [82.8, 29078.0], [82.9, 29095.0], [83.0, 29102.0], [83.1, 29102.0], [83.2, 29106.0], [83.3, 29107.0], [83.4, 29107.0], [83.5, 29117.0], [83.6, 29118.0], [83.7, 29133.0], [83.8, 29133.0], [83.9, 29138.0], [84.0, 29141.0], [84.1, 29144.0], [84.2, 29144.0], [84.3, 29145.0], [84.4, 29145.0], [84.5, 29159.0], [84.6, 29159.0], [84.7, 29160.0], [84.8, 29171.0], [84.9, 29177.0], [85.0, 29177.0], [85.1, 29179.0], [85.2, 29181.0], [85.3, 29181.0], [85.4, 29185.0], [85.5, 29188.0], [85.6, 29198.0], [85.7, 29198.0], [85.8, 29199.0], [85.9, 29207.0], [86.0, 29211.0], [86.1, 29211.0], [86.2, 29216.0], [86.3, 29219.0], [86.4, 29221.0], [86.5, 29221.0], [86.6, 29229.0], [86.7, 29230.0], [86.8, 29230.0], [86.9, 29233.0], [87.0, 29242.0], [87.1, 29253.0], [87.2, 29253.0], [87.3, 29266.0], [87.4, 29269.0], [87.5, 29281.0], [87.6, 29281.0], [87.7, 29289.0], [87.8, 29292.0], [87.9, 29294.0], [88.0, 29294.0], [88.1, 29298.0], [88.2, 29305.0], [88.3, 29306.0], [88.4, 29306.0], [88.5, 29307.0], [88.6, 29310.0], [88.7, 29310.0], [88.8, 29315.0], [88.9, 29322.0], [89.0, 29329.0], [89.1, 29329.0], [89.2, 29337.0], [89.3, 29345.0], [89.4, 29350.0], [89.5, 29350.0], [89.6, 29353.0], [89.7, 29354.0], [89.8, 29366.0], [89.9, 29366.0], [90.0, 29381.0], [90.1, 29388.0], [90.2, 29388.0], [90.3, 29393.0], [90.4, 29421.0], [90.5, 29426.0], [90.6, 29426.0], [90.7, 29440.0], [90.8, 29444.0], [90.9, 29462.0], [91.0, 29462.0], [91.1, 29464.0], [91.2, 29500.0], [91.3, 29516.0], [91.4, 29516.0], [91.5, 29522.0], [91.6, 29534.0], [91.7, 29534.0], [91.8, 29534.0], [91.9, 29575.0], [92.0, 29579.0], [92.1, 29579.0], [92.2, 29581.0], [92.3, 29609.0], [92.4, 29609.0], [92.5, 29609.0], [92.6, 29658.0], [92.7, 29797.0], [92.8, 29802.0], [92.9, 29802.0], [93.0, 29845.0], [93.1, 30096.0], [93.2, 30204.0], [93.3, 30204.0], [93.4, 30235.0], [93.5, 30278.0], [93.6, 30278.0], [93.7, 30308.0], [93.8, 30573.0], [93.9, 30705.0], [94.0, 30705.0], [94.1, 30765.0], [94.2, 30875.0], [94.3, 30875.0], [94.4, 30875.0], [94.5, 30912.0], [94.6, 31005.0], [94.7, 31016.0], [94.8, 31016.0], [94.9, 31292.0], [95.0, 31572.0], [95.1, 31572.0], [95.2, 31745.0], [95.3, 31763.0], [95.4, 31920.0], [95.5, 31920.0], [95.6, 32187.0], [95.7, 32382.0], [95.8, 32507.0], [95.9, 32507.0], [96.0, 32955.0], [96.1, 33023.0], [96.2, 33064.0], [96.3, 33064.0], [96.4, 33569.0], [96.5, 33799.0], [96.6, 34517.0], [96.7, 34517.0], [96.8, 34644.0], [96.9, 34755.0], [97.0, 34755.0], [97.1, 35156.0], [97.2, 35961.0], [97.3, 36068.0], [97.4, 36068.0], [97.5, 36072.0], [97.6, 37477.0], [97.7, 37559.0], [97.8, 37559.0], [97.9, 37899.0], [98.0, 38244.0], [98.1, 38923.0], [98.2, 38923.0], [98.3, 39945.0], [98.4, 40425.0], [98.5, 40425.0], [98.6, 40848.0], [98.7, 40902.0], [98.8, 41677.0], [98.9, 41677.0], [99.0, 41891.0], [99.1, 42736.0], [99.2, 42737.0], [99.3, 42737.0], [99.4, 42962.0], [99.5, 43527.0], [99.6, 44058.0], [99.7, 44058.0], [99.8, 44114.0], [99.9, 44403.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2300.0, "maxY": 31.0, "series": [{"data": [[33700.0, 1.0], [32900.0, 1.0], [34700.0, 1.0], [33500.0, 1.0], [34500.0, 1.0], [35100.0, 1.0], [35900.0, 1.0], [38900.0, 1.0], [37500.0, 1.0], [39900.0, 1.0], [40900.0, 1.0], [42900.0, 1.0], [42700.0, 2.0], [43500.0, 1.0], [44100.0, 1.0], [2300.0, 1.0], [5300.0, 1.0], [8100.0, 1.0], [10800.0, 1.0], [13300.0, 1.0], [15700.0, 1.0], [17300.0, 8.0], [17200.0, 10.0], [16900.0, 1.0], [17000.0, 4.0], [16700.0, 2.0], [17400.0, 1.0], [16800.0, 3.0], [17100.0, 3.0], [18300.0, 1.0], [17900.0, 5.0], [18100.0, 5.0], [17800.0, 8.0], [17500.0, 3.0], [18000.0, 4.0], [18400.0, 2.0], [17600.0, 3.0], [18200.0, 2.0], [17700.0, 2.0], [19300.0, 3.0], [18700.0, 1.0], [18500.0, 4.0], [18800.0, 2.0], [19100.0, 8.0], [18600.0, 2.0], [19200.0, 3.0], [19000.0, 1.0], [20400.0, 3.0], [20200.0, 1.0], [20100.0, 4.0], [19800.0, 2.0], [20000.0, 7.0], [19900.0, 3.0], [19500.0, 2.0], [19600.0, 2.0], [19700.0, 3.0], [21400.0, 5.0], [21300.0, 1.0], [21000.0, 2.0], [20700.0, 2.0], [20500.0, 2.0], [20900.0, 1.0], [20800.0, 1.0], [21500.0, 2.0], [21200.0, 1.0], [21100.0, 1.0], [21700.0, 3.0], [21800.0, 8.0], [22100.0, 3.0], [21900.0, 8.0], [22300.0, 4.0], [22500.0, 3.0], [22200.0, 4.0], [22000.0, 2.0], [21600.0, 2.0], [23300.0, 6.0], [23200.0, 5.0], [23000.0, 6.0], [23500.0, 5.0], [23400.0, 4.0], [22700.0, 3.0], [22600.0, 3.0], [22900.0, 4.0], [22800.0, 2.0], [23100.0, 4.0], [23800.0, 7.0], [23900.0, 8.0], [24000.0, 6.0], [23700.0, 6.0], [24300.0, 5.0], [24400.0, 6.0], [24200.0, 7.0], [23600.0, 5.0], [24500.0, 4.0], [24100.0, 2.0], [25400.0, 6.0], [25300.0, 5.0], [24900.0, 5.0], [25500.0, 3.0], [25100.0, 3.0], [24800.0, 5.0], [24700.0, 2.0], [24600.0, 5.0], [25200.0, 5.0], [25000.0, 4.0], [26400.0, 3.0], [26600.0, 5.0], [25800.0, 6.0], [25700.0, 2.0], [26200.0, 3.0], [26300.0, 3.0], [26500.0, 4.0], [26000.0, 5.0], [25900.0, 3.0], [26100.0, 2.0], [25600.0, 6.0], [26800.0, 5.0], [27000.0, 3.0], [26900.0, 2.0], [27300.0, 4.0], [27100.0, 2.0], [27200.0, 5.0], [27500.0, 5.0], [26700.0, 2.0], [27600.0, 6.0], [27400.0, 4.0], [28500.0, 24.0], [28100.0, 9.0], [28400.0, 10.0], [28200.0, 11.0], [28000.0, 4.0], [27700.0, 3.0], [28600.0, 26.0], [28300.0, 9.0], [27800.0, 2.0], [27900.0, 1.0], [28900.0, 25.0], [28700.0, 27.0], [29000.0, 28.0], [29200.0, 17.0], [29300.0, 16.0], [29400.0, 6.0], [29500.0, 8.0], [29600.0, 3.0], [29100.0, 21.0], [28800.0, 31.0], [30500.0, 1.0], [29800.0, 2.0], [30200.0, 3.0], [30700.0, 2.0], [30000.0, 1.0], [30300.0, 1.0], [29700.0, 1.0], [31700.0, 2.0], [30900.0, 1.0], [30800.0, 2.0], [31000.0, 2.0], [31200.0, 1.0], [31500.0, 1.0], [32300.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [34600.0, 1.0], [33000.0, 2.0], [36000.0, 2.0], [37800.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [40800.0, 1.0], [40400.0, 1.0], [41600.0, 1.0], [41800.0, 1.0], [44400.0, 1.0], [44000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.392857142857142, "minX": 1.60385718E12, "maxY": 10.0, "series": [{"data": [[1.6038573E12, 10.0], [1.6038576E12, 10.0], [1.60385892E12, 10.0], [1.60385862E12, 10.0], [1.60385832E12, 10.0], [1.60385802E12, 10.0], [1.60385742E12, 10.0], [1.60385772E12, 10.0], [1.60385904E12, 8.392857142857142], [1.60385874E12, 10.0], [1.60385844E12, 10.0], [1.60385814E12, 10.0], [1.60385754E12, 10.0], [1.60385784E12, 10.0], [1.60385724E12, 10.0], [1.60385886E12, 10.0], [1.60385856E12, 10.0], [1.60385826E12, 10.0], [1.60385766E12, 10.0], [1.60385796E12, 10.0], [1.60385736E12, 10.0], [1.60385898E12, 10.0], [1.60385868E12, 10.0], [1.60385838E12, 10.0], [1.60385778E12, 10.0], [1.60385808E12, 10.0], [1.60385718E12, 10.0], [1.60385748E12, 10.0], [1.6038588E12, 10.0], [1.6038585E12, 10.0], [1.6038582E12, 10.0], [1.6038579E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385904E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17083.0, "minX": 1.0, "maxY": 25898.004132231425, "series": [{"data": [[8.0, 17169.0], [4.0, 17330.0], [2.0, 17083.0], [1.0, 17541.0], [9.0, 17199.0], [10.0, 25898.004132231425], [5.0, 17291.0], [6.0, 17098.0], [3.0, 17311.0], [7.0, 17189.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25792.05714285716]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 131.86666666666667, "minX": 1.60385718E12, "maxY": 213408.5, "series": [{"data": [[1.6038573E12, 145646.13333333333], [1.6038576E12, 49387.73333333333], [1.60385892E12, 127750.55], [1.60385862E12, 46288.46666666667], [1.60385832E12, 52071.3], [1.60385802E12, 75547.83333333333], [1.60385742E12, 67044.63333333333], [1.60385772E12, 54150.45], [1.60385904E12, 49081.583333333336], [1.60385874E12, 44794.01666666667], [1.60385844E12, 51169.78333333333], [1.60385814E12, 91327.28333333334], [1.60385754E12, 46838.433333333334], [1.60385784E12, 34014.566666666666], [1.60385724E12, 65273.183333333334], [1.60385886E12, 32787.46666666667], [1.60385856E12, 57173.5], [1.60385826E12, 62989.833333333336], [1.60385766E12, 49295.666666666664], [1.60385796E12, 168580.48333333334], [1.60385736E12, 64277.85], [1.60385898E12, 78218.96666666666], [1.60385868E12, 48338.683333333334], [1.60385838E12, 37292.0], [1.60385778E12, 44656.86666666667], [1.60385808E12, 210129.31666666668], [1.60385718E12, 213408.5], [1.60385748E12, 50264.916666666664], [1.6038588E12, 33168.75], [1.6038585E12, 46534.23333333333], [1.6038582E12, 87573.16666666667], [1.6038579E12, 38344.13333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6038573E12, 136.23333333333332], [1.6038576E12, 153.43333333333334], [1.60385892E12, 210.0], [1.60385862E12, 153.71666666666667], [1.60385832E12, 154.66666666666666], [1.60385802E12, 156.0], [1.60385742E12, 176.56666666666666], [1.60385772E12, 153.65], [1.60385904E12, 191.83333333333334], [1.60385874E12, 153.28333333333333], [1.60385844E12, 153.46666666666667], [1.60385814E12, 213.66666666666666], [1.60385754E12, 146.13333333333333], [1.60385784E12, 160.66666666666666], [1.60385724E12, 221.23333333333332], [1.60385886E12, 189.8], [1.60385856E12, 161.4], [1.60385826E12, 168.33333333333334], [1.60385766E12, 153.43333333333334], [1.60385796E12, 219.13333333333333], [1.60385736E12, 146.5], [1.60385898E12, 131.86666666666667], [1.60385868E12, 146.15], [1.60385838E12, 138.76666666666668], [1.60385778E12, 146.01666666666668], [1.60385808E12, 194.1], [1.60385718E12, 140.01666666666668], [1.60385748E12, 160.73333333333332], [1.6038588E12, 167.76666666666668], [1.6038585E12, 146.1], [1.6038582E12, 188.78333333333333], [1.6038579E12, 205.83333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385904E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19178.225806451617, "minX": 1.60385718E12, "maxY": 35190.149999999994, "series": [{"data": [[1.6038573E12, 26190.388888888887], [1.6038576E12, 28756.571428571428], [1.60385892E12, 22373.58620689655], [1.60385862E12, 28369.2380952381], [1.60385832E12, 25436.428571428565], [1.60385802E12, 24467.772727272728], [1.60385742E12, 24193.083333333332], [1.60385772E12, 28620.04761904762], [1.60385904E12, 21835.17857142857], [1.60385874E12, 28925.38095238095], [1.60385844E12, 28811.142857142855], [1.60385814E12, 21554.16666666667], [1.60385754E12, 29148.499999999996], [1.60385784E12, 27419.636363636368], [1.60385724E12, 20574.09677419355], [1.60385886E12, 23428.961538461535], [1.60385856E12, 28345.909090909092], [1.60385826E12, 24695.608695652172], [1.60385766E12, 29092.142857142855], [1.60385796E12, 19178.225806451617], [1.60385736E12, 35190.149999999994], [1.60385898E12, 28405.0], [1.60385868E12, 28766.350000000002], [1.60385838E12, 33674.42105263159], [1.60385778E12, 29247.4], [1.60385808E12, 23129.85185185185], [1.60385718E12, 20140.473684210527], [1.60385748E12, 27741.954545454548], [1.6038588E12, 26270.521739130432], [1.6038585E12, 29288.600000000002], [1.6038582E12, 22990.692307692305], [1.6038579E12, 23643.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385904E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19174.064516129038, "minX": 1.60385718E12, "maxY": 35188.350000000006, "series": [{"data": [[1.6038573E12, 26186.777777777777], [1.6038576E12, 28755.52380952381], [1.60385892E12, 22370.44827586207], [1.60385862E12, 28368.04761904761], [1.60385832E12, 25435.428571428572], [1.60385802E12, 24465.181818181816], [1.60385742E12, 24191.79166666667], [1.60385772E12, 28618.38095238095], [1.60385904E12, 21833.071428571428], [1.60385874E12, 28924.095238095237], [1.60385844E12, 28809.904761904763], [1.60385814E12, 21552.333333333332], [1.60385754E12, 29147.449999999997], [1.60385784E12, 27418.545454545456], [1.60385724E12, 20573.064516129034], [1.60385886E12, 23428.07692307693], [1.60385856E12, 28344.636363636368], [1.60385826E12, 24694.260869565216], [1.60385766E12, 29090.809523809523], [1.60385796E12, 19174.064516129038], [1.60385736E12, 35188.350000000006], [1.60385898E12, 28402.388888888887], [1.60385868E12, 28765.1], [1.60385838E12, 33673.42105263159], [1.60385778E12, 29246.300000000003], [1.60385808E12, 23125.814814814818], [1.60385718E12, 20135.526315789473], [1.60385748E12, 27740.772727272724], [1.6038588E12, 26269.5652173913], [1.6038585E12, 29287.500000000004], [1.6038582E12, 22988.500000000004], [1.6038579E12, 23642.64285714286]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385904E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.60385718E12, "maxY": 4.315789473684211, "series": [{"data": [[1.6038573E12, 0.2222222222222222], [1.6038576E12, 0.14285714285714285], [1.60385892E12, 0.48275862068965525], [1.60385862E12, 0.2380952380952381], [1.60385832E12, 0.6190476190476191], [1.60385802E12, 0.5454545454545454], [1.60385742E12, 0.41666666666666663], [1.60385772E12, 0.6190476190476191], [1.60385904E12, 0.46428571428571436], [1.60385874E12, 0.5238095238095238], [1.60385844E12, 0.19047619047619052], [1.60385814E12, 0.39999999999999997], [1.60385754E12, 0.4], [1.60385784E12, 0.5909090909090912], [1.60385724E12, 0.5806451612903224], [1.60385886E12, 0.34615384615384615], [1.60385856E12, 0.6363636363636365], [1.60385826E12, 0.391304347826087], [1.60385766E12, 0.6666666666666667], [1.60385796E12, 0.41935483870967744], [1.60385736E12, 0.8500000000000002], [1.60385898E12, 0.5], [1.60385868E12, 0.45000000000000007], [1.60385838E12, 0.5789473684210527], [1.60385778E12, 0.1], [1.60385808E12, 0.37037037037037035], [1.60385718E12, 4.315789473684211], [1.60385748E12, 0.7272727272727272], [1.6038588E12, 0.391304347826087], [1.6038585E12, 0.65], [1.6038582E12, 0.11538461538461539], [1.6038579E12, 0.5000000000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385904E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2356.0, "minX": 1.60385718E12, "maxY": 44403.0, "series": [{"data": [[1.6038573E12, 40848.0], [1.6038576E12, 29059.0], [1.60385892E12, 27613.0], [1.60385862E12, 29229.0], [1.60385832E12, 35156.0], [1.60385802E12, 31016.0], [1.60385742E12, 28297.0], [1.60385772E12, 29145.0], [1.60385904E12, 37559.0], [1.60385874E12, 29145.0], [1.60385844E12, 29181.0], [1.60385814E12, 28405.0], [1.60385754E12, 29579.0], [1.60385784E12, 29144.0], [1.60385724E12, 28214.0], [1.60385886E12, 28284.0], [1.60385856E12, 29020.0], [1.60385826E12, 28297.0], [1.60385766E12, 29444.0], [1.60385796E12, 21989.0], [1.60385736E12, 44403.0], [1.60385898E12, 33569.0], [1.60385868E12, 29159.0], [1.60385838E12, 42737.0], [1.60385778E12, 29393.0], [1.60385808E12, 25212.0], [1.60385718E12, 28483.0], [1.60385748E12, 30235.0], [1.6038588E12, 28738.0], [1.6038585E12, 29797.0], [1.6038582E12, 31920.0], [1.6038579E12, 28338.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6038573E12, 21001.0], [1.6038576E12, 28517.0], [1.60385892E12, 18672.0], [1.60385862E12, 27383.0], [1.60385832E12, 22013.0], [1.60385802E12, 17913.0], [1.60385742E12, 21926.0], [1.60385772E12, 28131.0], [1.60385904E12, 16730.0], [1.60385874E12, 28641.0], [1.60385844E12, 28485.0], [1.60385814E12, 17518.0], [1.60385754E12, 28588.0], [1.60385784E12, 25250.0], [1.60385724E12, 17209.0], [1.60385886E12, 20708.0], [1.60385856E12, 26965.0], [1.60385826E12, 22236.0], [1.60385766E12, 28787.0], [1.60385796E12, 16729.0], [1.60385736E12, 25525.0], [1.60385898E12, 22809.0], [1.60385868E12, 28488.0], [1.60385838E12, 25300.0], [1.60385778E12, 29036.0], [1.60385808E12, 19159.0], [1.60385718E12, 2356.0], [1.60385748E12, 24573.0], [1.6038588E12, 23776.0], [1.6038585E12, 28688.0], [1.6038582E12, 17295.0], [1.6038579E12, 16964.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6038573E12, 21001.0], [1.6038576E12, 28517.0], [1.60385892E12, 18672.0], [1.60385862E12, 27383.0], [1.60385832E12, 22013.0], [1.60385802E12, 17913.0], [1.60385742E12, 21926.0], [1.60385772E12, 28131.0], [1.60385904E12, 16730.0], [1.60385874E12, 28641.0], [1.60385844E12, 28485.0], [1.60385814E12, 17518.0], [1.60385754E12, 28588.0], [1.60385784E12, 25250.0], [1.60385724E12, 17209.0], [1.60385886E12, 20708.0], [1.60385856E12, 26965.0], [1.60385826E12, 22236.0], [1.60385766E12, 28787.0], [1.60385796E12, 16729.0], [1.60385736E12, 25525.0], [1.60385898E12, 22809.0], [1.60385868E12, 28488.0], [1.60385838E12, 25300.0], [1.60385778E12, 29036.0], [1.60385808E12, 19159.0], [1.60385718E12, 2356.0], [1.60385748E12, 24573.0], [1.6038588E12, 23776.0], [1.6038585E12, 28688.0], [1.6038582E12, 17295.0], [1.6038579E12, 16964.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6038573E12, 21001.0], [1.6038576E12, 28517.0], [1.60385892E12, 18672.0], [1.60385862E12, 27383.0], [1.60385832E12, 22013.0], [1.60385802E12, 17913.0], [1.60385742E12, 21926.0], [1.60385772E12, 28131.0], [1.60385904E12, 16730.0], [1.60385874E12, 28641.0], [1.60385844E12, 28485.0], [1.60385814E12, 17518.0], [1.60385754E12, 28588.0], [1.60385784E12, 25250.0], [1.60385724E12, 17209.0], [1.60385886E12, 20708.0], [1.60385856E12, 26965.0], [1.60385826E12, 22236.0], [1.60385766E12, 28787.0], [1.60385796E12, 16729.0], [1.60385736E12, 25525.0], [1.60385898E12, 22809.0], [1.60385868E12, 28488.0], [1.60385838E12, 25300.0], [1.60385778E12, 29036.0], [1.60385808E12, 19159.0], [1.60385718E12, 2356.0], [1.60385748E12, 24573.0], [1.6038588E12, 23776.0], [1.6038585E12, 28688.0], [1.6038582E12, 17295.0], [1.6038579E12, 16964.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6038573E12, 21001.0], [1.6038576E12, 28517.0], [1.60385892E12, 18672.0], [1.60385862E12, 27383.0], [1.60385832E12, 22013.0], [1.60385802E12, 17913.0], [1.60385742E12, 21926.0], [1.60385772E12, 28131.0], [1.60385904E12, 16730.0], [1.60385874E12, 28641.0], [1.60385844E12, 28485.0], [1.60385814E12, 17518.0], [1.60385754E12, 28588.0], [1.60385784E12, 25250.0], [1.60385724E12, 17209.0], [1.60385886E12, 20708.0], [1.60385856E12, 26965.0], [1.60385826E12, 22236.0], [1.60385766E12, 28787.0], [1.60385796E12, 16729.0], [1.60385736E12, 25525.0], [1.60385898E12, 22809.0], [1.60385868E12, 28488.0], [1.60385838E12, 25300.0], [1.60385778E12, 29036.0], [1.60385808E12, 19159.0], [1.60385718E12, 2356.0], [1.60385748E12, 24573.0], [1.6038588E12, 23776.0], [1.6038585E12, 28688.0], [1.6038582E12, 17295.0], [1.6038579E12, 16964.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6038573E12, 23807.5], [1.6038576E12, 28752.0], [1.60385892E12, 21853.0], [1.60385862E12, 28368.0], [1.60385832E12, 23983.0], [1.60385802E12, 24221.0], [1.60385742E12, 24321.5], [1.60385772E12, 28635.0], [1.60385904E12, 17435.5], [1.60385874E12, 28935.0], [1.60385844E12, 28798.0], [1.60385814E12, 19831.5], [1.60385754E12, 29276.0], [1.60385784E12, 28207.5], [1.60385724E12, 19681.0], [1.60385886E12, 23067.5], [1.60385856E12, 28497.0], [1.60385826E12, 24093.0], [1.60385766E12, 29068.0], [1.60385796E12, 18836.0], [1.60385736E12, 33377.0], [1.60385898E12, 28414.0], [1.60385868E12, 28758.0], [1.60385838E12, 33023.0], [1.60385778E12, 29259.5], [1.60385808E12, 23805.0], [1.60385718E12, 24905.0], [1.60385748E12, 27900.5], [1.6038588E12, 25933.0], [1.6038585E12, 29295.0], [1.6038582E12, 22482.5], [1.6038579E12, 24107.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385904E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26855.0, "minX": 1.0, "maxY": 26855.0, "series": [{"data": [[1.0, 26855.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26854.0, "minX": 1.0, "maxY": 26854.0, "series": [{"data": [[1.0, 26854.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60385718E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6038573E12, 0.3], [1.6038576E12, 0.35], [1.60385892E12, 0.48333333333333334], [1.60385862E12, 0.35], [1.60385832E12, 0.35], [1.60385802E12, 0.36666666666666664], [1.60385742E12, 0.4], [1.60385772E12, 0.35], [1.60385904E12, 0.3], [1.60385874E12, 0.35], [1.60385844E12, 0.35], [1.60385814E12, 0.5], [1.60385754E12, 0.3333333333333333], [1.60385784E12, 0.36666666666666664], [1.60385724E12, 0.5166666666666667], [1.60385886E12, 0.43333333333333335], [1.60385856E12, 0.36666666666666664], [1.60385826E12, 0.38333333333333336], [1.60385766E12, 0.35], [1.60385796E12, 0.5166666666666667], [1.60385736E12, 0.3333333333333333], [1.60385898E12, 0.3], [1.60385868E12, 0.3333333333333333], [1.60385838E12, 0.31666666666666665], [1.60385778E12, 0.3333333333333333], [1.60385808E12, 0.45], [1.60385718E12, 0.48333333333333334], [1.60385748E12, 0.36666666666666664], [1.6038588E12, 0.38333333333333336], [1.6038585E12, 0.3333333333333333], [1.6038582E12, 0.43333333333333335], [1.6038579E12, 0.4666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385904E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60385718E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6038573E12, 0.3], [1.6038576E12, 0.35], [1.60385892E12, 0.48333333333333334], [1.60385862E12, 0.35], [1.60385832E12, 0.35], [1.60385802E12, 0.36666666666666664], [1.60385742E12, 0.4], [1.60385772E12, 0.35], [1.60385904E12, 0.4666666666666667], [1.60385874E12, 0.35], [1.60385844E12, 0.35], [1.60385814E12, 0.5], [1.60385754E12, 0.3333333333333333], [1.60385784E12, 0.36666666666666664], [1.60385724E12, 0.5166666666666667], [1.60385886E12, 0.43333333333333335], [1.60385856E12, 0.36666666666666664], [1.60385826E12, 0.38333333333333336], [1.60385766E12, 0.35], [1.60385796E12, 0.5166666666666667], [1.60385736E12, 0.3333333333333333], [1.60385898E12, 0.3], [1.60385868E12, 0.3333333333333333], [1.60385838E12, 0.31666666666666665], [1.60385778E12, 0.3333333333333333], [1.60385808E12, 0.45], [1.60385718E12, 0.31666666666666665], [1.60385748E12, 0.36666666666666664], [1.6038588E12, 0.38333333333333336], [1.6038585E12, 0.3333333333333333], [1.6038582E12, 0.43333333333333335], [1.6038579E12, 0.4666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60385904E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60385718E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6038573E12, 0.3], [1.6038576E12, 0.35], [1.60385892E12, 0.48333333333333334], [1.60385862E12, 0.35], [1.60385832E12, 0.35], [1.60385802E12, 0.36666666666666664], [1.60385742E12, 0.4], [1.60385772E12, 0.35], [1.60385904E12, 0.4666666666666667], [1.60385874E12, 0.35], [1.60385844E12, 0.35], [1.60385814E12, 0.5], [1.60385754E12, 0.3333333333333333], [1.60385784E12, 0.36666666666666664], [1.60385724E12, 0.5166666666666667], [1.60385886E12, 0.43333333333333335], [1.60385856E12, 0.36666666666666664], [1.60385826E12, 0.38333333333333336], [1.60385766E12, 0.35], [1.60385796E12, 0.5166666666666667], [1.60385736E12, 0.3333333333333333], [1.60385898E12, 0.3], [1.60385868E12, 0.3333333333333333], [1.60385838E12, 0.31666666666666665], [1.60385778E12, 0.3333333333333333], [1.60385808E12, 0.45], [1.60385718E12, 0.31666666666666665], [1.60385748E12, 0.36666666666666664], [1.6038588E12, 0.38333333333333336], [1.6038585E12, 0.3333333333333333], [1.6038582E12, 0.43333333333333335], [1.6038579E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385904E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60385718E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.6038573E12, 0.3], [1.6038576E12, 0.35], [1.60385892E12, 0.48333333333333334], [1.60385862E12, 0.35], [1.60385832E12, 0.35], [1.60385802E12, 0.36666666666666664], [1.60385742E12, 0.4], [1.60385772E12, 0.35], [1.60385904E12, 0.4666666666666667], [1.60385874E12, 0.35], [1.60385844E12, 0.35], [1.60385814E12, 0.5], [1.60385754E12, 0.3333333333333333], [1.60385784E12, 0.36666666666666664], [1.60385724E12, 0.5166666666666667], [1.60385886E12, 0.43333333333333335], [1.60385856E12, 0.36666666666666664], [1.60385826E12, 0.38333333333333336], [1.60385766E12, 0.35], [1.60385796E12, 0.5166666666666667], [1.60385736E12, 0.3333333333333333], [1.60385898E12, 0.3], [1.60385868E12, 0.3333333333333333], [1.60385838E12, 0.31666666666666665], [1.60385778E12, 0.3333333333333333], [1.60385808E12, 0.45], [1.60385718E12, 0.31666666666666665], [1.60385748E12, 0.36666666666666664], [1.6038588E12, 0.38333333333333336], [1.6038585E12, 0.3333333333333333], [1.6038582E12, 0.43333333333333335], [1.6038579E12, 0.4666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60385904E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

