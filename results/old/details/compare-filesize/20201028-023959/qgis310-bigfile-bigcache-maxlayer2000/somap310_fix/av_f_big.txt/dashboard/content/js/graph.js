/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3060.0, "minX": 0.0, "maxY": 44890.0, "series": [{"data": [[0.0, 3060.0], [0.1, 3060.0], [0.2, 5873.0], [0.3, 8023.0], [0.4, 8023.0], [0.5, 10736.0], [0.6, 13301.0], [0.7, 15767.0], [0.8, 15767.0], [0.9, 16447.0], [1.0, 16471.0], [1.1, 16525.0], [1.2, 16525.0], [1.3, 16663.0], [1.4, 16773.0], [1.5, 16803.0], [1.6, 16803.0], [1.7, 16859.0], [1.8, 17023.0], [1.9, 17023.0], [2.0, 17079.0], [2.1, 17083.0], [2.2, 17090.0], [2.3, 17090.0], [2.4, 17092.0], [2.5, 17095.0], [2.6, 17109.0], [2.7, 17109.0], [2.8, 17119.0], [2.9, 17128.0], [3.0, 17134.0], [3.1, 17134.0], [3.2, 17137.0], [3.3, 17192.0], [3.4, 17192.0], [3.5, 17213.0], [3.6, 17273.0], [3.7, 17277.0], [3.8, 17277.0], [3.9, 17316.0], [4.0, 17325.0], [4.1, 17348.0], [4.2, 17348.0], [4.3, 17356.0], [4.4, 17361.0], [4.5, 17363.0], [4.6, 17363.0], [4.7, 17377.0], [4.8, 17380.0], [4.9, 17431.0], [5.0, 17431.0], [5.1, 17439.0], [5.2, 17469.0], [5.3, 17469.0], [5.4, 17485.0], [5.5, 17509.0], [5.6, 17533.0], [5.7, 17533.0], [5.8, 17534.0], [5.9, 17570.0], [6.0, 17574.0], [6.1, 17574.0], [6.2, 17588.0], [6.3, 17611.0], [6.4, 17613.0], [6.5, 17613.0], [6.6, 17672.0], [6.7, 17683.0], [6.8, 17683.0], [6.9, 17690.0], [7.0, 17747.0], [7.1, 17773.0], [7.2, 17773.0], [7.3, 17809.0], [7.4, 17845.0], [7.5, 17891.0], [7.6, 17891.0], [7.7, 17921.0], [7.8, 17923.0], [7.9, 17930.0], [8.0, 17930.0], [8.1, 17935.0], [8.2, 17964.0], [8.3, 17980.0], [8.4, 17980.0], [8.5, 18004.0], [8.6, 18149.0], [8.7, 18149.0], [8.8, 18172.0], [8.9, 18252.0], [9.0, 18282.0], [9.1, 18282.0], [9.2, 18284.0], [9.3, 18344.0], [9.4, 18366.0], [9.5, 18366.0], [9.6, 18528.0], [9.7, 18556.0], [9.8, 18588.0], [9.9, 18588.0], [10.0, 18598.0], [10.1, 18730.0], [10.2, 18730.0], [10.3, 18737.0], [10.4, 18774.0], [10.5, 18796.0], [10.6, 18796.0], [10.7, 18897.0], [10.8, 18921.0], [10.9, 19003.0], [11.0, 19003.0], [11.1, 19011.0], [11.2, 19036.0], [11.3, 19112.0], [11.4, 19112.0], [11.5, 19121.0], [11.6, 19169.0], [11.7, 19169.0], [11.8, 19222.0], [11.9, 19270.0], [12.0, 19305.0], [12.1, 19305.0], [12.2, 19327.0], [12.3, 19336.0], [12.4, 19401.0], [12.5, 19401.0], [12.6, 19454.0], [12.7, 19472.0], [12.8, 19553.0], [12.9, 19553.0], [13.0, 19572.0], [13.1, 19585.0], [13.2, 19621.0], [13.3, 19621.0], [13.4, 19710.0], [13.5, 19761.0], [13.6, 19761.0], [13.7, 19762.0], [13.8, 19782.0], [13.9, 19803.0], [14.0, 19803.0], [14.1, 19894.0], [14.2, 19912.0], [14.3, 19926.0], [14.4, 19926.0], [14.5, 19927.0], [14.6, 19968.0], [14.7, 19972.0], [14.8, 19972.0], [14.9, 19990.0], [15.0, 20007.0], [15.1, 20007.0], [15.2, 20024.0], [15.3, 20105.0], [15.4, 20110.0], [15.5, 20110.0], [15.6, 20135.0], [15.7, 20173.0], [15.8, 20222.0], [15.9, 20222.0], [16.0, 20233.0], [16.1, 20235.0], [16.2, 20270.0], [16.3, 20270.0], [16.4, 20279.0], [16.5, 20382.0], [16.6, 20404.0], [16.7, 20404.0], [16.8, 20560.0], [16.9, 20580.0], [17.0, 20580.0], [17.1, 20614.0], [17.2, 20680.0], [17.3, 20688.0], [17.4, 20688.0], [17.5, 20853.0], [17.6, 20992.0], [17.7, 21008.0], [17.8, 21008.0], [17.9, 21075.0], [18.0, 21152.0], [18.1, 21195.0], [18.2, 21195.0], [18.3, 21247.0], [18.4, 21252.0], [18.5, 21252.0], [18.6, 21253.0], [18.7, 21269.0], [18.8, 21295.0], [18.9, 21295.0], [19.0, 21296.0], [19.1, 21311.0], [19.2, 21401.0], [19.3, 21401.0], [19.4, 21424.0], [19.5, 21431.0], [19.6, 21436.0], [19.7, 21436.0], [19.8, 21469.0], [19.9, 21496.0], [20.0, 21551.0], [20.1, 21551.0], [20.2, 21625.0], [20.3, 21651.0], [20.4, 21651.0], [20.5, 21658.0], [20.6, 21671.0], [20.7, 21717.0], [20.8, 21717.0], [20.9, 21718.0], [21.0, 21736.0], [21.1, 21767.0], [21.2, 21767.0], [21.3, 21787.0], [21.4, 21811.0], [21.5, 21833.0], [21.6, 21833.0], [21.7, 21838.0], [21.8, 21852.0], [21.9, 21852.0], [22.0, 21855.0], [22.1, 21911.0], [22.2, 21933.0], [22.3, 21933.0], [22.4, 21992.0], [22.5, 22064.0], [22.6, 22123.0], [22.7, 22123.0], [22.8, 22263.0], [22.9, 22267.0], [23.0, 22307.0], [23.1, 22307.0], [23.2, 22309.0], [23.3, 22332.0], [23.4, 22332.0], [23.5, 22387.0], [23.6, 22461.0], [23.7, 22540.0], [23.8, 22540.0], [23.9, 22545.0], [24.0, 22574.0], [24.1, 22620.0], [24.2, 22620.0], [24.3, 22714.0], [24.4, 22753.0], [24.5, 22818.0], [24.6, 22818.0], [24.7, 22966.0], [24.8, 23001.0], [24.9, 23006.0], [25.0, 23006.0], [25.1, 23022.0], [25.2, 23027.0], [25.3, 23027.0], [25.4, 23038.0], [25.5, 23088.0], [25.6, 23091.0], [25.7, 23091.0], [25.8, 23102.0], [25.9, 23110.0], [26.0, 23132.0], [26.1, 23132.0], [26.2, 23175.0], [26.3, 23179.0], [26.4, 23181.0], [26.5, 23181.0], [26.6, 23229.0], [26.7, 23261.0], [26.8, 23261.0], [26.9, 23271.0], [27.0, 23322.0], [27.1, 23332.0], [27.2, 23332.0], [27.3, 23337.0], [27.4, 23383.0], [27.5, 23388.0], [27.6, 23388.0], [27.7, 23426.0], [27.8, 23427.0], [27.9, 23431.0], [28.0, 23431.0], [28.1, 23451.0], [28.2, 23451.0], [28.3, 23453.0], [28.4, 23453.0], [28.5, 23463.0], [28.6, 23499.0], [28.7, 23499.0], [28.8, 23503.0], [28.9, 23507.0], [29.0, 23564.0], [29.1, 23564.0], [29.2, 23570.0], [29.3, 23624.0], [29.4, 23626.0], [29.5, 23626.0], [29.6, 23629.0], [29.7, 23648.0], [29.8, 23672.0], [29.9, 23672.0], [30.0, 23699.0], [30.1, 23731.0], [30.2, 23731.0], [30.3, 23736.0], [30.4, 23759.0], [30.5, 23823.0], [30.6, 23823.0], [30.7, 23867.0], [30.8, 23905.0], [30.9, 23920.0], [31.0, 23920.0], [31.1, 23924.0], [31.2, 23951.0], [31.3, 23952.0], [31.4, 23952.0], [31.5, 23968.0], [31.6, 23998.0], [31.7, 23998.0], [31.8, 24000.0], [31.9, 24014.0], [32.0, 24027.0], [32.1, 24027.0], [32.2, 24031.0], [32.3, 24035.0], [32.4, 24037.0], [32.5, 24037.0], [32.6, 24061.0], [32.7, 24068.0], [32.8, 24069.0], [32.9, 24069.0], [33.0, 24079.0], [33.1, 24082.0], [33.2, 24115.0], [33.3, 24115.0], [33.4, 24152.0], [33.5, 24167.0], [33.6, 24167.0], [33.7, 24174.0], [33.8, 24183.0], [33.9, 24205.0], [34.0, 24205.0], [34.1, 24216.0], [34.2, 24218.0], [34.3, 24235.0], [34.4, 24235.0], [34.5, 24253.0], [34.6, 24285.0], [34.7, 24286.0], [34.8, 24286.0], [34.9, 24290.0], [35.0, 24297.0], [35.1, 24297.0], [35.2, 24315.0], [35.3, 24349.0], [35.4, 24381.0], [35.5, 24381.0], [35.6, 24396.0], [35.7, 24420.0], [35.8, 24455.0], [35.9, 24455.0], [36.0, 24486.0], [36.1, 24509.0], [36.2, 24527.0], [36.3, 24527.0], [36.4, 24569.0], [36.5, 24626.0], [36.6, 24664.0], [36.7, 24664.0], [36.8, 24710.0], [36.9, 24723.0], [37.0, 24723.0], [37.1, 24727.0], [37.2, 24730.0], [37.3, 24759.0], [37.4, 24759.0], [37.5, 24778.0], [37.6, 24782.0], [37.7, 24788.0], [37.8, 24788.0], [37.9, 24810.0], [38.0, 24829.0], [38.1, 24851.0], [38.2, 24851.0], [38.3, 24859.0], [38.4, 24870.0], [38.5, 24870.0], [38.6, 24897.0], [38.7, 24920.0], [38.8, 24921.0], [38.9, 24921.0], [39.0, 24949.0], [39.1, 25000.0], [39.2, 25004.0], [39.3, 25004.0], [39.4, 25024.0], [39.5, 25034.0], [39.6, 25047.0], [39.7, 25047.0], [39.8, 25061.0], [39.9, 25089.0], [40.0, 25097.0], [40.1, 25097.0], [40.2, 25101.0], [40.3, 25129.0], [40.4, 25129.0], [40.5, 25151.0], [40.6, 25153.0], [40.7, 25159.0], [40.8, 25159.0], [40.9, 25188.0], [41.0, 25200.0], [41.1, 25200.0], [41.2, 25200.0], [41.3, 25269.0], [41.4, 25272.0], [41.5, 25305.0], [41.6, 25305.0], [41.7, 25328.0], [41.8, 25340.0], [41.9, 25340.0], [42.0, 25350.0], [42.1, 25360.0], [42.2, 25440.0], [42.3, 25440.0], [42.4, 25441.0], [42.5, 25454.0], [42.6, 25464.0], [42.7, 25464.0], [42.8, 25464.0], [42.9, 25475.0], [43.0, 25531.0], [43.1, 25531.0], [43.2, 25545.0], [43.3, 25559.0], [43.4, 25559.0], [43.5, 25569.0], [43.6, 25649.0], [43.7, 25690.0], [43.8, 25690.0], [43.9, 25709.0], [44.0, 25725.0], [44.1, 25755.0], [44.2, 25755.0], [44.3, 25831.0], [44.4, 25845.0], [44.5, 25880.0], [44.6, 25880.0], [44.7, 25904.0], [44.8, 25905.0], [44.9, 25948.0], [45.0, 25948.0], [45.1, 25954.0], [45.2, 25977.0], [45.3, 25977.0], [45.4, 26004.0], [45.5, 26004.0], [45.6, 26023.0], [45.7, 26023.0], [45.8, 26027.0], [45.9, 26097.0], [46.0, 26099.0], [46.1, 26099.0], [46.2, 26118.0], [46.3, 26134.0], [46.4, 26143.0], [46.5, 26143.0], [46.6, 26162.0], [46.7, 26189.0], [46.8, 26189.0], [46.9, 26218.0], [47.0, 26225.0], [47.1, 26232.0], [47.2, 26232.0], [47.3, 26252.0], [47.4, 26254.0], [47.5, 26277.0], [47.6, 26277.0], [47.7, 26286.0], [47.8, 26334.0], [47.9, 26366.0], [48.0, 26366.0], [48.1, 26420.0], [48.2, 26426.0], [48.3, 26442.0], [48.4, 26442.0], [48.5, 26453.0], [48.6, 26468.0], [48.7, 26468.0], [48.8, 26497.0], [48.9, 26594.0], [49.0, 26595.0], [49.1, 26595.0], [49.2, 26701.0], [49.3, 26725.0], [49.4, 26738.0], [49.5, 26738.0], [49.6, 26796.0], [49.7, 26813.0], [49.8, 26887.0], [49.9, 26887.0], [50.0, 26933.0], [50.1, 26947.0], [50.2, 26947.0], [50.3, 26958.0], [50.4, 26960.0], [50.5, 26976.0], [50.6, 26976.0], [50.7, 26978.0], [50.8, 26983.0], [50.9, 26986.0], [51.0, 26986.0], [51.1, 26987.0], [51.2, 27001.0], [51.3, 27007.0], [51.4, 27007.0], [51.5, 27008.0], [51.6, 27012.0], [51.7, 27012.0], [51.8, 27021.0], [51.9, 27066.0], [52.0, 27084.0], [52.1, 27084.0], [52.2, 27085.0], [52.3, 27102.0], [52.4, 27124.0], [52.5, 27124.0], [52.6, 27134.0], [52.7, 27151.0], [52.8, 27172.0], [52.9, 27172.0], [53.0, 27225.0], [53.1, 27253.0], [53.2, 27289.0], [53.3, 27289.0], [53.4, 27305.0], [53.5, 27319.0], [53.6, 27319.0], [53.7, 27355.0], [53.8, 27376.0], [53.9, 27414.0], [54.0, 27414.0], [54.1, 27429.0], [54.2, 27444.0], [54.3, 27485.0], [54.4, 27485.0], [54.5, 27494.0], [54.6, 27527.0], [54.7, 27583.0], [54.8, 27583.0], [54.9, 27587.0], [55.0, 27631.0], [55.1, 27631.0], [55.2, 27654.0], [55.3, 27661.0], [55.4, 27663.0], [55.5, 27663.0], [55.6, 27668.0], [55.7, 27679.0], [55.8, 27707.0], [55.9, 27707.0], [56.0, 27748.0], [56.1, 27762.0], [56.2, 27774.0], [56.3, 27774.0], [56.4, 27785.0], [56.5, 27795.0], [56.6, 27800.0], [56.7, 27800.0], [56.8, 27804.0], [56.9, 27804.0], [57.0, 27804.0], [57.1, 27833.0], [57.2, 27839.0], [57.3, 27882.0], [57.4, 27882.0], [57.5, 27887.0], [57.6, 27955.0], [57.7, 27979.0], [57.8, 27979.0], [57.9, 27988.0], [58.0, 28001.0], [58.1, 28006.0], [58.2, 28006.0], [58.3, 28033.0], [58.4, 28034.0], [58.5, 28034.0], [58.6, 28053.0], [58.7, 28066.0], [58.8, 28071.0], [58.9, 28071.0], [59.0, 28087.0], [59.1, 28102.0], [59.2, 28188.0], [59.3, 28188.0], [59.4, 28195.0], [59.5, 28203.0], [59.6, 28222.0], [59.7, 28222.0], [59.8, 28240.0], [59.9, 28275.0], [60.0, 28314.0], [60.1, 28314.0], [60.2, 28333.0], [60.3, 28341.0], [60.4, 28341.0], [60.5, 28348.0], [60.6, 28365.0], [60.7, 28382.0], [60.8, 28382.0], [60.9, 28389.0], [61.0, 28389.0], [61.1, 28390.0], [61.2, 28390.0], [61.3, 28394.0], [61.4, 28397.0], [61.5, 28399.0], [61.6, 28399.0], [61.7, 28403.0], [61.8, 28414.0], [61.9, 28414.0], [62.0, 28421.0], [62.1, 28430.0], [62.2, 28431.0], [62.3, 28431.0], [62.4, 28435.0], [62.5, 28436.0], [62.6, 28441.0], [62.7, 28441.0], [62.8, 28444.0], [62.9, 28446.0], [63.0, 28460.0], [63.1, 28460.0], [63.2, 28471.0], [63.3, 28473.0], [63.4, 28473.0], [63.5, 28474.0], [63.6, 28476.0], [63.7, 28479.0], [63.8, 28479.0], [63.9, 28487.0], [64.0, 28487.0], [64.1, 28500.0], [64.2, 28500.0], [64.3, 28508.0], [64.4, 28524.0], [64.5, 28529.0], [64.6, 28529.0], [64.7, 28533.0], [64.8, 28535.0], [64.9, 28536.0], [65.0, 28536.0], [65.1, 28538.0], [65.2, 28550.0], [65.3, 28550.0], [65.4, 28557.0], [65.5, 28559.0], [65.6, 28569.0], [65.7, 28569.0], [65.8, 28571.0], [65.9, 28572.0], [66.0, 28572.0], [66.1, 28572.0], [66.2, 28574.0], [66.3, 28580.0], [66.4, 28585.0], [66.5, 28585.0], [66.6, 28591.0], [66.7, 28595.0], [66.8, 28595.0], [66.9, 28610.0], [67.0, 28614.0], [67.1, 28617.0], [67.2, 28617.0], [67.3, 28626.0], [67.4, 28634.0], [67.5, 28636.0], [67.6, 28636.0], [67.7, 28645.0], [67.8, 28659.0], [67.9, 28659.0], [68.0, 28659.0], [68.1, 28660.0], [68.2, 28663.0], [68.3, 28663.0], [68.4, 28663.0], [68.5, 28669.0], [68.6, 28671.0], [68.7, 28671.0], [68.8, 28676.0], [68.9, 28676.0], [69.0, 28682.0], [69.1, 28682.0], [69.2, 28682.0], [69.3, 28689.0], [69.4, 28689.0], [69.5, 28689.0], [69.6, 28692.0], [69.7, 28695.0], [69.8, 28696.0], [69.9, 28696.0], [70.0, 28696.0], [70.1, 28699.0], [70.2, 28699.0], [70.3, 28700.0], [70.4, 28704.0], [70.5, 28706.0], [70.6, 28706.0], [70.7, 28708.0], [70.8, 28719.0], [70.9, 28725.0], [71.0, 28725.0], [71.1, 28726.0], [71.2, 28729.0], [71.3, 28733.0], [71.4, 28733.0], [71.5, 28740.0], [71.6, 28744.0], [71.7, 28744.0], [71.8, 28746.0], [71.9, 28761.0], [72.0, 28764.0], [72.1, 28764.0], [72.2, 28767.0], [72.3, 28769.0], [72.4, 28769.0], [72.5, 28769.0], [72.6, 28771.0], [72.7, 28776.0], [72.8, 28783.0], [72.9, 28783.0], [73.0, 28789.0], [73.1, 28789.0], [73.2, 28791.0], [73.3, 28791.0], [73.4, 28793.0], [73.5, 28794.0], [73.6, 28794.0], [73.7, 28799.0], [73.8, 28800.0], [73.9, 28808.0], [74.0, 28808.0], [74.1, 28812.0], [74.2, 28813.0], [74.3, 28817.0], [74.4, 28817.0], [74.5, 28829.0], [74.6, 28831.0], [74.7, 28836.0], [74.8, 28836.0], [74.9, 28846.0], [75.0, 28847.0], [75.1, 28847.0], [75.2, 28851.0], [75.3, 28854.0], [75.4, 28855.0], [75.5, 28855.0], [75.6, 28859.0], [75.7, 28874.0], [75.8, 28875.0], [75.9, 28875.0], [76.0, 28887.0], [76.1, 28887.0], [76.2, 28893.0], [76.3, 28893.0], [76.4, 28893.0], [76.5, 28900.0], [76.6, 28903.0], [76.7, 28903.0], [76.8, 28907.0], [76.9, 28908.0], [77.0, 28908.0], [77.1, 28908.0], [77.2, 28918.0], [77.3, 28935.0], [77.4, 28935.0], [77.5, 28944.0], [77.6, 28946.0], [77.7, 28952.0], [77.8, 28952.0], [77.9, 28956.0], [78.0, 28960.0], [78.1, 28965.0], [78.2, 28965.0], [78.3, 28971.0], [78.4, 28981.0], [78.5, 28981.0], [78.6, 28985.0], [78.7, 28986.0], [78.8, 28988.0], [78.9, 28988.0], [79.0, 28988.0], [79.1, 28989.0], [79.2, 28992.0], [79.3, 28992.0], [79.4, 29004.0], [79.5, 29024.0], [79.6, 29030.0], [79.7, 29030.0], [79.8, 29034.0], [79.9, 29035.0], [80.0, 29044.0], [80.1, 29044.0], [80.2, 29045.0], [80.3, 29063.0], [80.4, 29063.0], [80.5, 29067.0], [80.6, 29069.0], [80.7, 29075.0], [80.8, 29075.0], [80.9, 29088.0], [81.0, 29100.0], [81.1, 29101.0], [81.2, 29101.0], [81.3, 29105.0], [81.4, 29105.0], [81.5, 29105.0], [81.6, 29105.0], [81.7, 29110.0], [81.8, 29119.0], [81.9, 29119.0], [82.0, 29122.0], [82.1, 29131.0], [82.2, 29134.0], [82.3, 29134.0], [82.4, 29136.0], [82.5, 29143.0], [82.6, 29144.0], [82.7, 29144.0], [82.8, 29145.0], [82.9, 29157.0], [83.0, 29188.0], [83.1, 29188.0], [83.2, 29188.0], [83.3, 29199.0], [83.4, 29199.0], [83.5, 29205.0], [83.6, 29217.0], [83.7, 29223.0], [83.8, 29223.0], [83.9, 29223.0], [84.0, 29244.0], [84.1, 29253.0], [84.2, 29253.0], [84.3, 29254.0], [84.4, 29266.0], [84.5, 29268.0], [84.6, 29268.0], [84.7, 29277.0], [84.8, 29278.0], [84.9, 29283.0], [85.0, 29283.0], [85.1, 29288.0], [85.2, 29333.0], [85.3, 29333.0], [85.4, 29342.0], [85.5, 29348.0], [85.6, 29355.0], [85.7, 29355.0], [85.8, 29370.0], [85.9, 29373.0], [86.0, 29417.0], [86.1, 29417.0], [86.2, 29435.0], [86.3, 29437.0], [86.4, 29442.0], [86.5, 29442.0], [86.6, 29445.0], [86.7, 29446.0], [86.8, 29446.0], [86.9, 29475.0], [87.0, 29480.0], [87.1, 29519.0], [87.2, 29519.0], [87.3, 29535.0], [87.4, 29551.0], [87.5, 29572.0], [87.6, 29572.0], [87.7, 29574.0], [87.8, 29578.0], [87.9, 29666.0], [88.0, 29666.0], [88.1, 29695.0], [88.2, 29697.0], [88.3, 29707.0], [88.4, 29707.0], [88.5, 29797.0], [88.6, 29813.0], [88.7, 29813.0], [88.8, 29837.0], [88.9, 29850.0], [89.0, 29860.0], [89.1, 29860.0], [89.2, 29869.0], [89.3, 29876.0], [89.4, 29878.0], [89.5, 29878.0], [89.6, 29907.0], [89.7, 29915.0], [89.8, 29915.0], [89.9, 29915.0], [90.0, 29929.0], [90.1, 29966.0], [90.2, 29966.0], [90.3, 29972.0], [90.4, 29979.0], [90.5, 29979.0], [90.6, 29979.0], [90.7, 30007.0], [90.8, 30017.0], [90.9, 30022.0], [91.0, 30022.0], [91.1, 30036.0], [91.2, 30049.0], [91.3, 30089.0], [91.4, 30089.0], [91.5, 30121.0], [91.6, 30142.0], [91.7, 30142.0], [91.8, 30158.0], [91.9, 30172.0], [92.0, 30198.0], [92.1, 30198.0], [92.2, 30228.0], [92.3, 30233.0], [92.4, 30311.0], [92.5, 30311.0], [92.6, 30331.0], [92.7, 30347.0], [92.8, 30349.0], [92.9, 30349.0], [93.0, 30399.0], [93.1, 30411.0], [93.2, 30509.0], [93.3, 30509.0], [93.4, 30561.0], [93.5, 30577.0], [93.6, 30577.0], [93.7, 30578.0], [93.8, 30605.0], [93.9, 30653.0], [94.0, 30653.0], [94.1, 31015.0], [94.2, 31179.0], [94.3, 31193.0], [94.4, 31193.0], [94.5, 31230.0], [94.6, 31275.0], [94.7, 31285.0], [94.8, 31285.0], [94.9, 31323.0], [95.0, 31567.0], [95.1, 31567.0], [95.2, 31700.0], [95.3, 31792.0], [95.4, 31843.0], [95.5, 31843.0], [95.6, 32109.0], [95.7, 32552.0], [95.8, 32659.0], [95.9, 32659.0], [96.0, 32820.0], [96.1, 33239.0], [96.2, 33239.0], [96.3, 33239.0], [96.4, 33391.0], [96.5, 33496.0], [96.6, 34110.0], [96.7, 34110.0], [96.8, 34681.0], [96.9, 34864.0], [97.0, 34864.0], [97.1, 34942.0], [97.2, 35927.0], [97.3, 36062.0], [97.4, 36062.0], [97.5, 36769.0], [97.6, 37494.0], [97.7, 37576.0], [97.8, 37576.0], [97.9, 38014.0], [98.0, 38331.0], [98.1, 39786.0], [98.2, 39786.0], [98.3, 40186.0], [98.4, 40405.0], [98.5, 40405.0], [98.6, 40870.0], [98.7, 41795.0], [98.8, 42259.0], [98.9, 42259.0], [99.0, 42553.0], [99.1, 42668.0], [99.2, 43309.0], [99.3, 43309.0], [99.4, 43958.0], [99.5, 43964.0], [99.6, 44405.0], [99.7, 44405.0], [99.8, 44483.0], [99.9, 44890.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 26.0, "series": [{"data": [[34100.0, 1.0], [33300.0, 1.0], [36700.0, 1.0], [34900.0, 1.0], [35900.0, 1.0], [37500.0, 1.0], [38300.0, 1.0], [40100.0, 1.0], [39700.0, 1.0], [42500.0, 1.0], [41700.0, 1.0], [43900.0, 2.0], [43300.0, 1.0], [3000.0, 1.0], [5800.0, 1.0], [8000.0, 1.0], [10700.0, 1.0], [13300.0, 1.0], [15700.0, 1.0], [16500.0, 1.0], [17300.0, 8.0], [17400.0, 4.0], [17200.0, 3.0], [16600.0, 1.0], [17100.0, 6.0], [17000.0, 6.0], [16800.0, 2.0], [16700.0, 1.0], [16400.0, 2.0], [17900.0, 6.0], [17800.0, 3.0], [18300.0, 2.0], [17600.0, 5.0], [18000.0, 1.0], [17500.0, 6.0], [18100.0, 2.0], [18200.0, 3.0], [17700.0, 2.0], [18500.0, 4.0], [19300.0, 3.0], [18700.0, 4.0], [18800.0, 1.0], [19000.0, 3.0], [19100.0, 3.0], [19200.0, 2.0], [18900.0, 1.0], [19400.0, 3.0], [20300.0, 1.0], [20200.0, 5.0], [20100.0, 4.0], [19900.0, 6.0], [19500.0, 3.0], [20400.0, 1.0], [19700.0, 4.0], [19600.0, 1.0], [19800.0, 2.0], [20000.0, 2.0], [21400.0, 6.0], [20600.0, 3.0], [21300.0, 1.0], [20500.0, 2.0], [20900.0, 1.0], [21200.0, 6.0], [20800.0, 1.0], [21500.0, 1.0], [21000.0, 2.0], [21100.0, 2.0], [21700.0, 5.0], [21600.0, 4.0], [22000.0, 1.0], [22500.0, 3.0], [22400.0, 1.0], [21800.0, 5.0], [22300.0, 4.0], [21900.0, 3.0], [22200.0, 2.0], [22100.0, 1.0], [23300.0, 5.0], [23000.0, 7.0], [23400.0, 8.0], [23500.0, 4.0], [23100.0, 6.0], [23200.0, 3.0], [22700.0, 2.0], [22600.0, 1.0], [22900.0, 1.0], [22800.0, 1.0], [23700.0, 3.0], [24100.0, 5.0], [24000.0, 11.0], [23900.0, 7.0], [23600.0, 6.0], [24500.0, 3.0], [24300.0, 4.0], [24200.0, 9.0], [24400.0, 3.0], [23800.0, 2.0], [25500.0, 4.0], [25100.0, 6.0], [24900.0, 3.0], [24800.0, 6.0], [24700.0, 8.0], [25000.0, 8.0], [25400.0, 6.0], [25300.0, 5.0], [25200.0, 4.0], [24600.0, 2.0], [25700.0, 3.0], [26000.0, 6.0], [26500.0, 2.0], [26400.0, 6.0], [25800.0, 3.0], [26200.0, 7.0], [25900.0, 5.0], [26100.0, 5.0], [25600.0, 2.0], [26300.0, 2.0], [27400.0, 5.0], [27500.0, 3.0], [27600.0, 6.0], [27000.0, 8.0], [26700.0, 4.0], [27100.0, 5.0], [27200.0, 3.0], [27300.0, 4.0], [26900.0, 9.0], [26800.0, 2.0], [27800.0, 7.0], [28600.0, 25.0], [27700.0, 6.0], [28000.0, 8.0], [28400.0, 18.0], [28500.0, 20.0], [27900.0, 3.0], [28300.0, 12.0], [28100.0, 3.0], [28200.0, 4.0], [29600.0, 3.0], [29500.0, 6.0], [29400.0, 8.0], [29300.0, 6.0], [29200.0, 13.0], [29100.0, 18.0], [28700.0, 26.0], [28800.0, 20.0], [28900.0, 21.0], [29000.0, 12.0], [29900.0, 8.0], [30600.0, 2.0], [29800.0, 7.0], [30100.0, 5.0], [30200.0, 2.0], [29700.0, 2.0], [30000.0, 6.0], [30400.0, 1.0], [30500.0, 4.0], [30300.0, 5.0], [31700.0, 2.0], [31100.0, 2.0], [31200.0, 3.0], [31300.0, 1.0], [31000.0, 1.0], [31500.0, 1.0], [32600.0, 1.0], [31800.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [33200.0, 2.0], [32800.0, 1.0], [34800.0, 1.0], [33400.0, 1.0], [34600.0, 1.0], [36000.0, 1.0], [38000.0, 1.0], [37400.0, 1.0], [40800.0, 1.0], [40400.0, 1.0], [42200.0, 1.0], [42600.0, 1.0], [44800.0, 1.0], [44400.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 735.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 735.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.60386138E12, "maxY": 10.0, "series": [{"data": [[1.60386156E12, 10.0], [1.60386318E12, 10.0], [1.60386186E12, 10.0], [1.60386216E12, 10.0], [1.60386276E12, 10.0], [1.60386246E12, 10.0], [1.60386144E12, 10.0], [1.60386306E12, 10.0], [1.603863E12, 10.0], [1.6038627E12, 10.0], [1.60386138E12, 10.0], [1.60386168E12, 10.0], [1.6038633E12, 2.5], [1.60386198E12, 10.0], [1.60386228E12, 10.0], [1.60386288E12, 10.0], [1.60386258E12, 10.0], [1.60386252E12, 10.0], [1.60386222E12, 10.0], [1.60386312E12, 10.0], [1.60386282E12, 10.0], [1.6038615E12, 10.0], [1.6038618E12, 10.0], [1.6038624E12, 10.0], [1.6038621E12, 10.0], [1.60386174E12, 10.0], [1.60386204E12, 10.0], [1.60386264E12, 10.0], [1.60386234E12, 10.0], [1.60386324E12, 9.464285714285715], [1.60386294E12, 10.0], [1.60386162E12, 10.0], [1.60386192E12, 10.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038633E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17079.0, "minX": 1.0, "maxY": 25935.69283746556, "series": [{"data": [[8.0, 17079.0], [4.0, 17348.0], [2.0, 17325.0], [1.0, 17690.0], [9.0, 17095.0], [10.0, 25935.69283746556], [5.0, 17273.0], [6.0, 17083.0], [3.0, 17377.0], [7.0, 17109.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.93877551020408, 25829.512925170064]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 26.15, "minX": 1.60386138E12, "maxY": 187941.7, "series": [{"data": [[1.60386156E12, 49852.8], [1.60386318E12, 172329.35], [1.60386186E12, 45769.316666666666], [1.60386216E12, 169052.2], [1.60386276E12, 45637.183333333334], [1.60386246E12, 66625.91666666667], [1.60386144E12, 82559.55], [1.60386306E12, 28707.633333333335], [1.603863E12, 38814.7], [1.6038627E12, 55270.416666666664], [1.60386138E12, 187941.7], [1.60386168E12, 46239.816666666666], [1.6038633E12, 1516.95], [1.60386198E12, 45964.566666666666], [1.60386228E12, 156526.1], [1.60386288E12, 45286.38333333333], [1.60386258E12, 34438.26666666667], [1.60386252E12, 72105.45], [1.60386222E12, 73242.33333333333], [1.60386312E12, 34302.916666666664], [1.60386282E12, 57487.35], [1.6038615E12, 152016.0], [1.6038618E12, 48722.96666666667], [1.6038624E12, 66032.65], [1.6038621E12, 32231.316666666666], [1.60386174E12, 47023.9], [1.60386204E12, 40924.566666666666], [1.60386264E12, 43630.61666666667], [1.60386234E12, 147209.91666666666], [1.60386324E12, 55224.86666666667], [1.60386294E12, 48568.35], [1.60386162E12, 77050.9], [1.60386192E12, 55154.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60386156E12, 132.51666666666668], [1.60386318E12, 160.75], [1.60386186E12, 146.11666666666667], [1.60386216E12, 224.81666666666666], [1.60386276E12, 146.13333333333333], [1.60386246E12, 178.15], [1.60386144E12, 214.83333333333334], [1.60386306E12, 189.7], [1.603863E12, 167.78333333333333], [1.6038627E12, 160.75], [1.60386138E12, 109.53333333333333], [1.60386168E12, 153.73333333333332], [1.6038633E12, 26.15], [1.60386198E12, 153.36666666666667], [1.60386228E12, 185.1], [1.60386288E12, 153.4], [1.60386258E12, 131.5], [1.60386252E12, 176.51666666666668], [1.60386222E12, 182.23333333333332], [1.60386312E12, 187.21666666666667], [1.60386282E12, 161.71666666666667], [1.6038615E12, 157.88333333333333], [1.6038618E12, 146.11666666666667], [1.6038624E12, 188.96666666666667], [1.6038621E12, 175.2], [1.60386174E12, 153.43333333333334], [1.60386204E12, 153.36666666666667], [1.60386264E12, 146.13333333333333], [1.60386234E12, 196.76666666666668], [1.60386324E12, 196.15], [1.60386294E12, 153.33333333333334], [1.60386162E12, 176.26666666666668], [1.60386192E12, 153.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038633E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17435.0, "minX": 1.60386138E12, "maxY": 37856.1111111111, "series": [{"data": [[1.60386156E12, 37856.1111111111], [1.60386318E12, 24194.590909090908], [1.60386186E12, 30225.549999999996], [1.60386216E12, 19473.09677419355], [1.60386276E12, 28595.600000000002], [1.60386246E12, 27252.291666666668], [1.60386144E12, 21899.799999999996], [1.60386306E12, 24560.038461538457], [1.603863E12, 26423.739130434784], [1.6038627E12, 28570.090909090908], [1.60386138E12, 17913.666666666668], [1.60386168E12, 27257.666666666664], [1.6038633E12, 17435.0], [1.60386198E12, 29002.80952380952], [1.60386228E12, 22026.84615384615], [1.60386288E12, 28785.190476190473], [1.60386258E12, 35060.50000000001], [1.60386252E12, 23824.291666666664], [1.60386222E12, 24362.19230769231], [1.60386312E12, 22958.884615384617], [1.60386282E12, 27552.818181818184], [1.6038615E12, 23097.38095238095], [1.6038618E12, 29530.45], [1.6038624E12, 18857.55555555555], [1.6038621E12, 25618.250000000004], [1.60386174E12, 28994.85714285714], [1.60386204E12, 28365.047619047615], [1.60386264E12, 28170.850000000002], [1.60386234E12, 23071.37037037037], [1.60386324E12, 23675.39285714286], [1.60386294E12, 29140.904761904763], [1.60386162E12, 24688.916666666668], [1.60386192E12, 29075.142857142855]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038633E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17433.25, "minX": 1.60386138E12, "maxY": 37854.666666666664, "series": [{"data": [[1.60386156E12, 37854.666666666664], [1.60386318E12, 24189.727272727272], [1.60386186E12, 30224.299999999996], [1.60386216E12, 19469.51612903226], [1.60386276E12, 28594.55], [1.60386246E12, 27250.75], [1.60386144E12, 21898.466666666667], [1.60386306E12, 24559.653846153848], [1.603863E12, 26423.21739130435], [1.6038627E12, 28568.818181818187], [1.60386138E12, 17908.0], [1.60386168E12, 27256.52380952381], [1.6038633E12, 17433.25], [1.60386198E12, 29001.666666666664], [1.60386228E12, 22023.307692307688], [1.60386288E12, 28784.047619047615], [1.60386258E12, 35059.444444444445], [1.60386252E12, 23822.625000000007], [1.60386222E12, 24359.769230769227], [1.60386312E12, 22957.96153846153], [1.60386282E12, 27551.590909090908], [1.6038615E12, 23093.952380952385], [1.6038618E12, 29529.250000000004], [1.6038624E12, 18855.592592592595], [1.6038621E12, 25617.833333333336], [1.60386174E12, 28993.809523809523], [1.60386204E12, 28364.09523809524], [1.60386264E12, 28169.850000000002], [1.60386234E12, 23068.444444444445], [1.60386324E12, 23673.428571428572], [1.60386294E12, 29139.57142857143], [1.60386162E12, 24687.208333333332], [1.60386192E12, 29073.809523809523]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038633E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60386138E12, "maxY": 5.466666666666667, "series": [{"data": [[1.60386156E12, 0.7777777777777779], [1.60386318E12, 0.45454545454545453], [1.60386186E12, 0.6000000000000001], [1.60386216E12, 0.41935483870967744], [1.60386276E12, 0.30000000000000004], [1.60386246E12, 0.5000000000000001], [1.60386144E12, 0.5000000000000001], [1.60386306E12, 0.4615384615384615], [1.603863E12, 0.21739130434782608], [1.6038627E12, 0.6363636363636365], [1.60386138E12, 5.466666666666667], [1.60386168E12, 0.7142857142857142], [1.6038633E12, 0.0], [1.60386198E12, 0.5714285714285714], [1.60386228E12, 0.34615384615384615], [1.60386288E12, 0.6190476190476191], [1.60386258E12, 0.16666666666666666], [1.60386252E12, 0.49999999999999994], [1.60386222E12, 0.3461538461538461], [1.60386312E12, 0.4615384615384615], [1.60386282E12, 0.3636363636363636], [1.6038615E12, 0.0], [1.6038618E12, 0.35000000000000003], [1.6038624E12, 0.40740740740740744], [1.6038621E12, 0.5833333333333334], [1.60386174E12, 0.3333333333333333], [1.60386204E12, 0.2857142857142857], [1.60386264E12, 0.39999999999999997], [1.60386234E12, 0.37037037037037046], [1.60386324E12, 0.42857142857142855], [1.60386294E12, 0.4761904761904762], [1.60386162E12, 0.6250000000000001], [1.60386192E12, 0.5714285714285714]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038633E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3060.0, "minX": 1.60386138E12, "maxY": 44890.0, "series": [{"data": [[1.60386156E12, 44890.0], [1.60386318E12, 28473.0], [1.60386186E12, 30578.0], [1.60386216E12, 24216.0], [1.60386276E12, 28887.0], [1.60386246E12, 31843.0], [1.60386144E12, 27839.0], [1.60386306E12, 28487.0], [1.603863E12, 28769.0], [1.6038627E12, 28875.0], [1.60386138E12, 26023.0], [1.60386168E12, 29979.0], [1.6038633E12, 17690.0], [1.60386198E12, 29475.0], [1.60386228E12, 25559.0], [1.60386288E12, 29266.0], [1.60386258E12, 42668.0], [1.60386252E12, 25441.0], [1.60386222E12, 31323.0], [1.60386312E12, 27785.0], [1.60386282E12, 28595.0], [1.6038615E12, 36769.0], [1.6038618E12, 30172.0], [1.6038624E12, 28006.0], [1.6038621E12, 28660.0], [1.60386174E12, 29445.0], [1.60386204E12, 29519.0], [1.60386264E12, 28903.0], [1.60386234E12, 27887.0], [1.60386324E12, 37494.0], [1.60386294E12, 29437.0], [1.60386162E12, 27707.0], [1.60386192E12, 30049.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60386156E12, 28636.0], [1.60386318E12, 18528.0], [1.60386186E12, 29797.0], [1.60386216E12, 17277.0], [1.60386276E12, 28275.0], [1.60386246E12, 23038.0], [1.60386144E12, 17588.0], [1.60386306E12, 20688.0], [1.603863E12, 23503.0], [1.6038627E12, 28195.0], [1.60386138E12, 3060.0], [1.60386168E12, 23731.0], [1.6038633E12, 17325.0], [1.60386198E12, 28692.0], [1.60386228E12, 17485.0], [1.60386288E12, 27305.0], [1.60386258E12, 27319.0], [1.60386252E12, 21992.0], [1.60386222E12, 17431.0], [1.60386312E12, 18796.0], [1.60386282E12, 26813.0], [1.6038615E12, 18149.0], [1.6038618E12, 28479.0], [1.6038624E12, 16803.0], [1.6038621E12, 23463.0], [1.60386174E12, 28671.0], [1.60386204E12, 26143.0], [1.60386264E12, 25269.0], [1.60386234E12, 19121.0], [1.60386324E12, 16447.0], [1.60386294E12, 28794.0], [1.60386162E12, 22574.0], [1.60386192E12, 28341.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60386156E12, 28636.0], [1.60386318E12, 18528.0], [1.60386186E12, 29797.0], [1.60386216E12, 17277.0], [1.60386276E12, 28275.0], [1.60386246E12, 23038.0], [1.60386144E12, 17588.0], [1.60386306E12, 20688.0], [1.603863E12, 23503.0], [1.6038627E12, 28195.0], [1.60386138E12, 3060.0], [1.60386168E12, 23731.0], [1.6038633E12, 17325.0], [1.60386198E12, 28692.0], [1.60386228E12, 17485.0], [1.60386288E12, 27305.0], [1.60386258E12, 27319.0], [1.60386252E12, 21992.0], [1.60386222E12, 17431.0], [1.60386312E12, 18796.0], [1.60386282E12, 26813.0], [1.6038615E12, 18149.0], [1.6038618E12, 28479.0], [1.6038624E12, 16803.0], [1.6038621E12, 23463.0], [1.60386174E12, 28671.0], [1.60386204E12, 26143.0], [1.60386264E12, 25269.0], [1.60386234E12, 19121.0], [1.60386324E12, 16447.0], [1.60386294E12, 28794.0], [1.60386162E12, 22574.0], [1.60386192E12, 28341.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60386156E12, 28636.0], [1.60386318E12, 18528.0], [1.60386186E12, 29797.0], [1.60386216E12, 17277.0], [1.60386276E12, 28275.0], [1.60386246E12, 23038.0], [1.60386144E12, 17588.0], [1.60386306E12, 20688.0], [1.603863E12, 23503.0], [1.6038627E12, 28195.0], [1.60386138E12, 3060.0], [1.60386168E12, 23731.0], [1.6038633E12, 17325.0], [1.60386198E12, 28692.0], [1.60386228E12, 17485.0], [1.60386288E12, 27305.0], [1.60386258E12, 27319.0], [1.60386252E12, 21992.0], [1.60386222E12, 17431.0], [1.60386312E12, 18796.0], [1.60386282E12, 26813.0], [1.6038615E12, 18149.0], [1.6038618E12, 28479.0], [1.6038624E12, 16803.0], [1.6038621E12, 23463.0], [1.60386174E12, 28671.0], [1.60386204E12, 26143.0], [1.60386264E12, 25269.0], [1.60386234E12, 19121.0], [1.60386324E12, 16447.0], [1.60386294E12, 28794.0], [1.60386162E12, 22574.0], [1.60386192E12, 28341.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60386156E12, 28636.0], [1.60386318E12, 18528.0], [1.60386186E12, 29797.0], [1.60386216E12, 17277.0], [1.60386276E12, 28275.0], [1.60386246E12, 23038.0], [1.60386144E12, 17588.0], [1.60386306E12, 20688.0], [1.603863E12, 23503.0], [1.6038627E12, 28195.0], [1.60386138E12, 3060.0], [1.60386168E12, 23731.0], [1.6038633E12, 17325.0], [1.60386198E12, 28692.0], [1.60386228E12, 17485.0], [1.60386288E12, 27305.0], [1.60386258E12, 27319.0], [1.60386252E12, 21992.0], [1.60386222E12, 17431.0], [1.60386312E12, 18796.0], [1.60386282E12, 26813.0], [1.6038615E12, 18149.0], [1.6038618E12, 28479.0], [1.6038624E12, 16803.0], [1.6038621E12, 23463.0], [1.60386174E12, 28671.0], [1.60386204E12, 26143.0], [1.60386264E12, 25269.0], [1.60386234E12, 19121.0], [1.60386324E12, 16447.0], [1.60386294E12, 28794.0], [1.60386162E12, 22574.0], [1.60386192E12, 28341.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60386156E12, 39100.0], [1.60386318E12, 26173.0], [1.60386186E12, 30230.5], [1.60386216E12, 19011.0], [1.60386276E12, 28563.0], [1.60386246E12, 27518.5], [1.60386144E12, 20429.5], [1.60386306E12, 24285.0], [1.603863E12, 26189.0], [1.6038627E12, 28534.5], [1.60386138E12, 20382.0], [1.60386168E12, 27124.0], [1.6038633E12, 17362.5], [1.60386198E12, 28907.0], [1.60386228E12, 22562.5], [1.60386288E12, 28874.0], [1.60386258E12, 34903.0], [1.60386252E12, 24033.0], [1.60386222E12, 21845.0], [1.60386312E12, 22359.5], [1.60386282E12, 27662.0], [1.6038615E12, 21767.0], [1.6038618E12, 29564.5], [1.6038624E12, 17509.0], [1.6038621E12, 25672.5], [1.60386174E12, 29034.0], [1.60386204E12, 28813.0], [1.60386264E12, 28517.5], [1.60386234E12, 23427.0], [1.60386324E12, 20824.5], [1.60386294E12, 29134.0], [1.60386162E12, 24725.0], [1.60386192E12, 28946.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038633E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26933.0, "minX": 1.0, "maxY": 26933.0, "series": [{"data": [[1.0, 26933.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26932.0, "minX": 1.0, "maxY": 26932.0, "series": [{"data": [[1.0, 26932.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.60386138E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60386156E12, 0.3], [1.60386318E12, 0.36666666666666664], [1.60386186E12, 0.3333333333333333], [1.60386216E12, 0.5166666666666667], [1.60386276E12, 0.3333333333333333], [1.60386246E12, 0.4], [1.60386144E12, 0.5], [1.60386306E12, 0.43333333333333335], [1.603863E12, 0.38333333333333336], [1.6038627E12, 0.36666666666666664], [1.60386138E12, 0.4166666666666667], [1.60386168E12, 0.35], [1.60386198E12, 0.35], [1.60386228E12, 0.43333333333333335], [1.60386288E12, 0.35], [1.60386258E12, 0.3], [1.60386252E12, 0.4], [1.60386222E12, 0.43333333333333335], [1.60386312E12, 0.43333333333333335], [1.60386282E12, 0.36666666666666664], [1.6038615E12, 0.35], [1.6038618E12, 0.3333333333333333], [1.6038624E12, 0.45], [1.6038621E12, 0.4], [1.60386174E12, 0.35], [1.60386204E12, 0.35], [1.60386264E12, 0.3333333333333333], [1.60386234E12, 0.45], [1.60386324E12, 0.36666666666666664], [1.60386294E12, 0.35], [1.60386162E12, 0.4], [1.60386192E12, 0.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60386324E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60386138E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60386156E12, 0.3], [1.60386318E12, 0.36666666666666664], [1.60386186E12, 0.3333333333333333], [1.60386216E12, 0.5166666666666667], [1.60386276E12, 0.3333333333333333], [1.60386246E12, 0.4], [1.60386144E12, 0.5], [1.60386306E12, 0.43333333333333335], [1.603863E12, 0.38333333333333336], [1.6038627E12, 0.36666666666666664], [1.60386138E12, 0.25], [1.60386168E12, 0.35], [1.6038633E12, 0.06666666666666667], [1.60386198E12, 0.35], [1.60386228E12, 0.43333333333333335], [1.60386288E12, 0.35], [1.60386258E12, 0.3], [1.60386252E12, 0.4], [1.60386222E12, 0.43333333333333335], [1.60386312E12, 0.43333333333333335], [1.60386282E12, 0.36666666666666664], [1.6038615E12, 0.35], [1.6038618E12, 0.3333333333333333], [1.6038624E12, 0.45], [1.6038621E12, 0.4], [1.60386174E12, 0.35], [1.60386204E12, 0.35], [1.60386264E12, 0.3333333333333333], [1.60386234E12, 0.45], [1.60386324E12, 0.4666666666666667], [1.60386294E12, 0.35], [1.60386162E12, 0.4], [1.60386192E12, 0.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6038633E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60386138E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60386156E12, 0.3], [1.60386318E12, 0.36666666666666664], [1.60386186E12, 0.3333333333333333], [1.60386216E12, 0.5166666666666667], [1.60386276E12, 0.3333333333333333], [1.60386246E12, 0.4], [1.60386144E12, 0.5], [1.60386306E12, 0.43333333333333335], [1.603863E12, 0.38333333333333336], [1.6038627E12, 0.36666666666666664], [1.60386138E12, 0.25], [1.60386168E12, 0.35], [1.6038633E12, 0.06666666666666667], [1.60386198E12, 0.35], [1.60386228E12, 0.43333333333333335], [1.60386288E12, 0.35], [1.60386258E12, 0.3], [1.60386252E12, 0.4], [1.60386222E12, 0.43333333333333335], [1.60386312E12, 0.43333333333333335], [1.60386282E12, 0.36666666666666664], [1.6038615E12, 0.35], [1.6038618E12, 0.3333333333333333], [1.6038624E12, 0.45], [1.6038621E12, 0.4], [1.60386174E12, 0.35], [1.60386204E12, 0.35], [1.60386264E12, 0.3333333333333333], [1.60386234E12, 0.45], [1.60386324E12, 0.4666666666666667], [1.60386294E12, 0.35], [1.60386162E12, 0.4], [1.60386192E12, 0.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038633E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.60386138E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.60386156E12, 0.3], [1.60386318E12, 0.36666666666666664], [1.60386186E12, 0.3333333333333333], [1.60386216E12, 0.5166666666666667], [1.60386276E12, 0.3333333333333333], [1.60386246E12, 0.4], [1.60386144E12, 0.5], [1.60386306E12, 0.43333333333333335], [1.603863E12, 0.38333333333333336], [1.6038627E12, 0.36666666666666664], [1.60386138E12, 0.25], [1.60386168E12, 0.35], [1.6038633E12, 0.06666666666666667], [1.60386198E12, 0.35], [1.60386228E12, 0.43333333333333335], [1.60386288E12, 0.35], [1.60386258E12, 0.3], [1.60386252E12, 0.4], [1.60386222E12, 0.43333333333333335], [1.60386312E12, 0.43333333333333335], [1.60386282E12, 0.36666666666666664], [1.6038615E12, 0.35], [1.6038618E12, 0.3333333333333333], [1.6038624E12, 0.45], [1.6038621E12, 0.4], [1.60386174E12, 0.35], [1.60386204E12, 0.35], [1.60386264E12, 0.3333333333333333], [1.60386234E12, 0.45], [1.60386324E12, 0.4666666666666667], [1.60386294E12, 0.35], [1.60386162E12, 0.4], [1.60386192E12, 0.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6038633E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

