/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 386.0, "minX": 0.0, "maxY": 23662.0, "series": [{"data": [[0.0, 386.0], [0.1, 2200.0], [0.2, 2250.0], [0.3, 2267.0], [0.4, 2286.0], [0.5, 2307.0], [0.6, 2330.0], [0.7, 2339.0], [0.8, 2349.0], [0.9, 2357.0], [1.0, 2363.0], [1.1, 2379.0], [1.2, 2387.0], [1.3, 2392.0], [1.4, 2398.0], [1.5, 2402.0], [1.6, 2409.0], [1.7, 2413.0], [1.8, 2415.0], [1.9, 2420.0], [2.0, 2426.0], [2.1, 2429.0], [2.2, 2437.0], [2.3, 2442.0], [2.4, 2446.0], [2.5, 2452.0], [2.6, 2455.0], [2.7, 2463.0], [2.8, 2470.0], [2.9, 2474.0], [3.0, 2479.0], [3.1, 2484.0], [3.2, 2487.0], [3.3, 2493.0], [3.4, 2497.0], [3.5, 2510.0], [3.6, 2520.0], [3.7, 2528.0], [3.8, 2532.0], [3.9, 2538.0], [4.0, 2543.0], [4.1, 2545.0], [4.2, 2547.0], [4.3, 2556.0], [4.4, 2561.0], [4.5, 2564.0], [4.6, 2569.0], [4.7, 2576.0], [4.8, 2588.0], [4.9, 2595.0], [5.0, 2597.0], [5.1, 2604.0], [5.2, 2609.0], [5.3, 2620.0], [5.4, 2630.0], [5.5, 2637.0], [5.6, 2646.0], [5.7, 2657.0], [5.8, 2665.0], [5.9, 2672.0], [6.0, 2682.0], [6.1, 2691.0], [6.2, 2702.0], [6.3, 2713.0], [6.4, 2739.0], [6.5, 2757.0], [6.6, 2766.0], [6.7, 2778.0], [6.8, 2783.0], [6.9, 2789.0], [7.0, 2792.0], [7.1, 2799.0], [7.2, 2816.0], [7.3, 2822.0], [7.4, 2831.0], [7.5, 2843.0], [7.6, 2860.0], [7.7, 2872.0], [7.8, 2884.0], [7.9, 2899.0], [8.0, 2915.0], [8.1, 2926.0], [8.2, 2932.0], [8.3, 2949.0], [8.4, 2956.0], [8.5, 2963.0], [8.6, 2972.0], [8.7, 2983.0], [8.8, 2995.0], [8.9, 3005.0], [9.0, 3019.0], [9.1, 3027.0], [9.2, 3039.0], [9.3, 3045.0], [9.4, 3065.0], [9.5, 3072.0], [9.6, 3083.0], [9.7, 3093.0], [9.8, 3100.0], [9.9, 3105.0], [10.0, 3116.0], [10.1, 3125.0], [10.2, 3133.0], [10.3, 3135.0], [10.4, 3151.0], [10.5, 3156.0], [10.6, 3164.0], [10.7, 3169.0], [10.8, 3182.0], [10.9, 3198.0], [11.0, 3204.0], [11.1, 3219.0], [11.2, 3230.0], [11.3, 3242.0], [11.4, 3261.0], [11.5, 3273.0], [11.6, 3283.0], [11.7, 3294.0], [11.8, 3296.0], [11.9, 3308.0], [12.0, 3311.0], [12.1, 3316.0], [12.2, 3322.0], [12.3, 3328.0], [12.4, 3332.0], [12.5, 3335.0], [12.6, 3337.0], [12.7, 3345.0], [12.8, 3350.0], [12.9, 3361.0], [13.0, 3368.0], [13.1, 3374.0], [13.2, 3386.0], [13.3, 3392.0], [13.4, 3400.0], [13.5, 3407.0], [13.6, 3411.0], [13.7, 3419.0], [13.8, 3423.0], [13.9, 3433.0], [14.0, 3439.0], [14.1, 3461.0], [14.2, 3469.0], [14.3, 3480.0], [14.4, 3485.0], [14.5, 3495.0], [14.6, 3508.0], [14.7, 3517.0], [14.8, 3528.0], [14.9, 3551.0], [15.0, 3572.0], [15.1, 3582.0], [15.2, 3600.0], [15.3, 3618.0], [15.4, 3636.0], [15.5, 3643.0], [15.6, 3648.0], [15.7, 3658.0], [15.8, 3678.0], [15.9, 3686.0], [16.0, 3696.0], [16.1, 3702.0], [16.2, 3713.0], [16.3, 3724.0], [16.4, 3741.0], [16.5, 3755.0], [16.6, 3763.0], [16.7, 3769.0], [16.8, 3781.0], [16.9, 3796.0], [17.0, 3808.0], [17.1, 3820.0], [17.2, 3833.0], [17.3, 3843.0], [17.4, 3858.0], [17.5, 3864.0], [17.6, 3870.0], [17.7, 3872.0], [17.8, 3878.0], [17.9, 3885.0], [18.0, 3903.0], [18.1, 3907.0], [18.2, 3913.0], [18.3, 3920.0], [18.4, 3923.0], [18.5, 3935.0], [18.6, 3946.0], [18.7, 3959.0], [18.8, 3968.0], [18.9, 3977.0], [19.0, 3989.0], [19.1, 4001.0], [19.2, 4005.0], [19.3, 4020.0], [19.4, 4023.0], [19.5, 4037.0], [19.6, 4041.0], [19.7, 4049.0], [19.8, 4057.0], [19.9, 4065.0], [20.0, 4068.0], [20.1, 4074.0], [20.2, 4090.0], [20.3, 4098.0], [20.4, 4102.0], [20.5, 4123.0], [20.6, 4128.0], [20.7, 4133.0], [20.8, 4140.0], [20.9, 4148.0], [21.0, 4153.0], [21.1, 4170.0], [21.2, 4177.0], [21.3, 4190.0], [21.4, 4198.0], [21.5, 4206.0], [21.6, 4221.0], [21.7, 4232.0], [21.8, 4235.0], [21.9, 4244.0], [22.0, 4249.0], [22.1, 4257.0], [22.2, 4271.0], [22.3, 4275.0], [22.4, 4281.0], [22.5, 4285.0], [22.6, 4296.0], [22.7, 4306.0], [22.8, 4314.0], [22.9, 4322.0], [23.0, 4324.0], [23.1, 4333.0], [23.2, 4342.0], [23.3, 4350.0], [23.4, 4359.0], [23.5, 4369.0], [23.6, 4380.0], [23.7, 4385.0], [23.8, 4394.0], [23.9, 4405.0], [24.0, 4414.0], [24.1, 4421.0], [24.2, 4429.0], [24.3, 4436.0], [24.4, 4447.0], [24.5, 4453.0], [24.6, 4462.0], [24.7, 4468.0], [24.8, 4481.0], [24.9, 4493.0], [25.0, 4505.0], [25.1, 4513.0], [25.2, 4525.0], [25.3, 4531.0], [25.4, 4537.0], [25.5, 4550.0], [25.6, 4556.0], [25.7, 4561.0], [25.8, 4565.0], [25.9, 4575.0], [26.0, 4585.0], [26.1, 4590.0], [26.2, 4602.0], [26.3, 4610.0], [26.4, 4615.0], [26.5, 4620.0], [26.6, 4627.0], [26.7, 4633.0], [26.8, 4641.0], [26.9, 4650.0], [27.0, 4661.0], [27.1, 4672.0], [27.2, 4679.0], [27.3, 4687.0], [27.4, 4697.0], [27.5, 4704.0], [27.6, 4708.0], [27.7, 4713.0], [27.8, 4717.0], [27.9, 4721.0], [28.0, 4724.0], [28.1, 4727.0], [28.2, 4733.0], [28.3, 4739.0], [28.4, 4746.0], [28.5, 4754.0], [28.6, 4762.0], [28.7, 4768.0], [28.8, 4773.0], [28.9, 4777.0], [29.0, 4788.0], [29.1, 4792.0], [29.2, 4798.0], [29.3, 4800.0], [29.4, 4802.0], [29.5, 4804.0], [29.6, 4810.0], [29.7, 4818.0], [29.8, 4822.0], [29.9, 4829.0], [30.0, 4836.0], [30.1, 4840.0], [30.2, 4848.0], [30.3, 4854.0], [30.4, 4857.0], [30.5, 4864.0], [30.6, 4869.0], [30.7, 4873.0], [30.8, 4875.0], [30.9, 4877.0], [31.0, 4884.0], [31.1, 4891.0], [31.2, 4895.0], [31.3, 4903.0], [31.4, 4906.0], [31.5, 4911.0], [31.6, 4916.0], [31.7, 4918.0], [31.8, 4921.0], [31.9, 4931.0], [32.0, 4938.0], [32.1, 4940.0], [32.2, 4943.0], [32.3, 4951.0], [32.4, 4956.0], [32.5, 4960.0], [32.6, 4965.0], [32.7, 4974.0], [32.8, 4983.0], [32.9, 4989.0], [33.0, 5002.0], [33.1, 5013.0], [33.2, 5018.0], [33.3, 5019.0], [33.4, 5023.0], [33.5, 5030.0], [33.6, 5033.0], [33.7, 5042.0], [33.8, 5045.0], [33.9, 5048.0], [34.0, 5053.0], [34.1, 5056.0], [34.2, 5058.0], [34.3, 5068.0], [34.4, 5072.0], [34.5, 5081.0], [34.6, 5082.0], [34.7, 5087.0], [34.8, 5093.0], [34.9, 5099.0], [35.0, 5105.0], [35.1, 5113.0], [35.2, 5116.0], [35.3, 5123.0], [35.4, 5132.0], [35.5, 5136.0], [35.6, 5137.0], [35.7, 5141.0], [35.8, 5146.0], [35.9, 5148.0], [36.0, 5150.0], [36.1, 5152.0], [36.2, 5156.0], [36.3, 5157.0], [36.4, 5164.0], [36.5, 5169.0], [36.6, 5172.0], [36.7, 5176.0], [36.8, 5181.0], [36.9, 5185.0], [37.0, 5191.0], [37.1, 5201.0], [37.2, 5204.0], [37.3, 5207.0], [37.4, 5213.0], [37.5, 5223.0], [37.6, 5227.0], [37.7, 5232.0], [37.8, 5239.0], [37.9, 5242.0], [38.0, 5246.0], [38.1, 5249.0], [38.2, 5251.0], [38.3, 5259.0], [38.4, 5263.0], [38.5, 5276.0], [38.6, 5278.0], [38.7, 5280.0], [38.8, 5285.0], [38.9, 5290.0], [39.0, 5295.0], [39.1, 5300.0], [39.2, 5305.0], [39.3, 5308.0], [39.4, 5311.0], [39.5, 5315.0], [39.6, 5318.0], [39.7, 5321.0], [39.8, 5326.0], [39.9, 5329.0], [40.0, 5342.0], [40.1, 5347.0], [40.2, 5353.0], [40.3, 5359.0], [40.4, 5363.0], [40.5, 5366.0], [40.6, 5371.0], [40.7, 5373.0], [40.8, 5379.0], [40.9, 5384.0], [41.0, 5389.0], [41.1, 5396.0], [41.2, 5399.0], [41.3, 5404.0], [41.4, 5410.0], [41.5, 5416.0], [41.6, 5420.0], [41.7, 5427.0], [41.8, 5434.0], [41.9, 5442.0], [42.0, 5444.0], [42.1, 5451.0], [42.2, 5455.0], [42.3, 5460.0], [42.4, 5464.0], [42.5, 5468.0], [42.6, 5471.0], [42.7, 5474.0], [42.8, 5479.0], [42.9, 5481.0], [43.0, 5486.0], [43.1, 5496.0], [43.2, 5502.0], [43.3, 5504.0], [43.4, 5510.0], [43.5, 5513.0], [43.6, 5517.0], [43.7, 5522.0], [43.8, 5528.0], [43.9, 5531.0], [44.0, 5535.0], [44.1, 5539.0], [44.2, 5543.0], [44.3, 5550.0], [44.4, 5554.0], [44.5, 5560.0], [44.6, 5564.0], [44.7, 5570.0], [44.8, 5572.0], [44.9, 5580.0], [45.0, 5583.0], [45.1, 5589.0], [45.2, 5599.0], [45.3, 5609.0], [45.4, 5611.0], [45.5, 5615.0], [45.6, 5618.0], [45.7, 5625.0], [45.8, 5628.0], [45.9, 5631.0], [46.0, 5635.0], [46.1, 5639.0], [46.2, 5644.0], [46.3, 5648.0], [46.4, 5653.0], [46.5, 5659.0], [46.6, 5665.0], [46.7, 5667.0], [46.8, 5670.0], [46.9, 5675.0], [47.0, 5676.0], [47.1, 5678.0], [47.2, 5682.0], [47.3, 5684.0], [47.4, 5689.0], [47.5, 5696.0], [47.6, 5702.0], [47.7, 5709.0], [47.8, 5714.0], [47.9, 5718.0], [48.0, 5723.0], [48.1, 5726.0], [48.2, 5729.0], [48.3, 5734.0], [48.4, 5740.0], [48.5, 5743.0], [48.6, 5749.0], [48.7, 5751.0], [48.8, 5756.0], [48.9, 5758.0], [49.0, 5761.0], [49.1, 5765.0], [49.2, 5767.0], [49.3, 5771.0], [49.4, 5775.0], [49.5, 5780.0], [49.6, 5782.0], [49.7, 5785.0], [49.8, 5789.0], [49.9, 5792.0], [50.0, 5794.0], [50.1, 5797.0], [50.2, 5801.0], [50.3, 5804.0], [50.4, 5806.0], [50.5, 5810.0], [50.6, 5817.0], [50.7, 5820.0], [50.8, 5829.0], [50.9, 5831.0], [51.0, 5833.0], [51.1, 5837.0], [51.2, 5840.0], [51.3, 5845.0], [51.4, 5849.0], [51.5, 5852.0], [51.6, 5858.0], [51.7, 5860.0], [51.8, 5862.0], [51.9, 5864.0], [52.0, 5869.0], [52.1, 5873.0], [52.2, 5877.0], [52.3, 5883.0], [52.4, 5884.0], [52.5, 5887.0], [52.6, 5890.0], [52.7, 5892.0], [52.8, 5894.0], [52.9, 5897.0], [53.0, 5898.0], [53.1, 5902.0], [53.2, 5906.0], [53.3, 5909.0], [53.4, 5912.0], [53.5, 5917.0], [53.6, 5922.0], [53.7, 5926.0], [53.8, 5931.0], [53.9, 5938.0], [54.0, 5941.0], [54.1, 5945.0], [54.2, 5951.0], [54.3, 5956.0], [54.4, 5959.0], [54.5, 5964.0], [54.6, 5965.0], [54.7, 5972.0], [54.8, 5976.0], [54.9, 5980.0], [55.0, 5983.0], [55.1, 5986.0], [55.2, 5992.0], [55.3, 5997.0], [55.4, 6006.0], [55.5, 6009.0], [55.6, 6013.0], [55.7, 6015.0], [55.8, 6020.0], [55.9, 6023.0], [56.0, 6027.0], [56.1, 6032.0], [56.2, 6038.0], [56.3, 6041.0], [56.4, 6048.0], [56.5, 6050.0], [56.6, 6053.0], [56.7, 6062.0], [56.8, 6066.0], [56.9, 6074.0], [57.0, 6079.0], [57.1, 6081.0], [57.2, 6087.0], [57.3, 6089.0], [57.4, 6092.0], [57.5, 6097.0], [57.6, 6103.0], [57.7, 6111.0], [57.8, 6116.0], [57.9, 6127.0], [58.0, 6130.0], [58.1, 6135.0], [58.2, 6140.0], [58.3, 6142.0], [58.4, 6150.0], [58.5, 6157.0], [58.6, 6161.0], [58.7, 6164.0], [58.8, 6166.0], [58.9, 6170.0], [59.0, 6173.0], [59.1, 6175.0], [59.2, 6179.0], [59.3, 6183.0], [59.4, 6186.0], [59.5, 6188.0], [59.6, 6193.0], [59.7, 6196.0], [59.8, 6201.0], [59.9, 6204.0], [60.0, 6209.0], [60.1, 6219.0], [60.2, 6229.0], [60.3, 6232.0], [60.4, 6234.0], [60.5, 6241.0], [60.6, 6246.0], [60.7, 6252.0], [60.8, 6256.0], [60.9, 6260.0], [61.0, 6265.0], [61.1, 6274.0], [61.2, 6282.0], [61.3, 6287.0], [61.4, 6293.0], [61.5, 6300.0], [61.6, 6306.0], [61.7, 6308.0], [61.8, 6312.0], [61.9, 6316.0], [62.0, 6320.0], [62.1, 6326.0], [62.2, 6332.0], [62.3, 6339.0], [62.4, 6344.0], [62.5, 6350.0], [62.6, 6356.0], [62.7, 6360.0], [62.8, 6366.0], [62.9, 6372.0], [63.0, 6376.0], [63.1, 6379.0], [63.2, 6386.0], [63.3, 6392.0], [63.4, 6400.0], [63.5, 6403.0], [63.6, 6413.0], [63.7, 6424.0], [63.8, 6431.0], [63.9, 6435.0], [64.0, 6439.0], [64.1, 6444.0], [64.2, 6453.0], [64.3, 6462.0], [64.4, 6467.0], [64.5, 6472.0], [64.6, 6478.0], [64.7, 6483.0], [64.8, 6487.0], [64.9, 6492.0], [65.0, 6496.0], [65.1, 6502.0], [65.2, 6503.0], [65.3, 6506.0], [65.4, 6514.0], [65.5, 6522.0], [65.6, 6524.0], [65.7, 6528.0], [65.8, 6533.0], [65.9, 6536.0], [66.0, 6540.0], [66.1, 6543.0], [66.2, 6548.0], [66.3, 6553.0], [66.4, 6556.0], [66.5, 6560.0], [66.6, 6563.0], [66.7, 6565.0], [66.8, 6569.0], [66.9, 6575.0], [67.0, 6580.0], [67.1, 6588.0], [67.2, 6592.0], [67.3, 6598.0], [67.4, 6603.0], [67.5, 6607.0], [67.6, 6612.0], [67.7, 6615.0], [67.8, 6620.0], [67.9, 6624.0], [68.0, 6628.0], [68.1, 6633.0], [68.2, 6636.0], [68.3, 6640.0], [68.4, 6649.0], [68.5, 6654.0], [68.6, 6657.0], [68.7, 6662.0], [68.8, 6666.0], [68.9, 6670.0], [69.0, 6678.0], [69.1, 6683.0], [69.2, 6687.0], [69.3, 6694.0], [69.4, 6701.0], [69.5, 6708.0], [69.6, 6715.0], [69.7, 6719.0], [69.8, 6727.0], [69.9, 6735.0], [70.0, 6740.0], [70.1, 6753.0], [70.2, 6758.0], [70.3, 6761.0], [70.4, 6769.0], [70.5, 6776.0], [70.6, 6788.0], [70.7, 6799.0], [70.8, 6803.0], [70.9, 6809.0], [71.0, 6816.0], [71.1, 6825.0], [71.2, 6832.0], [71.3, 6835.0], [71.4, 6840.0], [71.5, 6844.0], [71.6, 6852.0], [71.7, 6857.0], [71.8, 6863.0], [71.9, 6872.0], [72.0, 6875.0], [72.1, 6880.0], [72.2, 6892.0], [72.3, 6900.0], [72.4, 6907.0], [72.5, 6915.0], [72.6, 6920.0], [72.7, 6928.0], [72.8, 6933.0], [72.9, 6942.0], [73.0, 6946.0], [73.1, 6949.0], [73.2, 6954.0], [73.3, 6960.0], [73.4, 6968.0], [73.5, 6980.0], [73.6, 6988.0], [73.7, 6997.0], [73.8, 7000.0], [73.9, 7003.0], [74.0, 7010.0], [74.1, 7015.0], [74.2, 7025.0], [74.3, 7031.0], [74.4, 7036.0], [74.5, 7046.0], [74.6, 7053.0], [74.7, 7056.0], [74.8, 7062.0], [74.9, 7066.0], [75.0, 7067.0], [75.1, 7072.0], [75.2, 7076.0], [75.3, 7083.0], [75.4, 7090.0], [75.5, 7097.0], [75.6, 7105.0], [75.7, 7114.0], [75.8, 7123.0], [75.9, 7129.0], [76.0, 7142.0], [76.1, 7153.0], [76.2, 7161.0], [76.3, 7165.0], [76.4, 7181.0], [76.5, 7188.0], [76.6, 7193.0], [76.7, 7199.0], [76.8, 7206.0], [76.9, 7211.0], [77.0, 7215.0], [77.1, 7222.0], [77.2, 7224.0], [77.3, 7227.0], [77.4, 7234.0], [77.5, 7241.0], [77.6, 7248.0], [77.7, 7255.0], [77.8, 7258.0], [77.9, 7268.0], [78.0, 7272.0], [78.1, 7277.0], [78.2, 7281.0], [78.3, 7287.0], [78.4, 7297.0], [78.5, 7311.0], [78.6, 7315.0], [78.7, 7323.0], [78.8, 7328.0], [78.9, 7336.0], [79.0, 7340.0], [79.1, 7344.0], [79.2, 7346.0], [79.3, 7351.0], [79.4, 7363.0], [79.5, 7370.0], [79.6, 7378.0], [79.7, 7381.0], [79.8, 7383.0], [79.9, 7388.0], [80.0, 7403.0], [80.1, 7408.0], [80.2, 7416.0], [80.3, 7424.0], [80.4, 7428.0], [80.5, 7433.0], [80.6, 7438.0], [80.7, 7445.0], [80.8, 7452.0], [80.9, 7459.0], [81.0, 7465.0], [81.1, 7475.0], [81.2, 7493.0], [81.3, 7500.0], [81.4, 7505.0], [81.5, 7508.0], [81.6, 7517.0], [81.7, 7528.0], [81.8, 7531.0], [81.9, 7540.0], [82.0, 7548.0], [82.1, 7557.0], [82.2, 7564.0], [82.3, 7573.0], [82.4, 7581.0], [82.5, 7587.0], [82.6, 7598.0], [82.7, 7609.0], [82.8, 7615.0], [82.9, 7623.0], [83.0, 7636.0], [83.1, 7643.0], [83.2, 7649.0], [83.3, 7660.0], [83.4, 7665.0], [83.5, 7669.0], [83.6, 7682.0], [83.7, 7692.0], [83.8, 7698.0], [83.9, 7709.0], [84.0, 7721.0], [84.1, 7733.0], [84.2, 7756.0], [84.3, 7766.0], [84.4, 7774.0], [84.5, 7789.0], [84.6, 7800.0], [84.7, 7805.0], [84.8, 7819.0], [84.9, 7823.0], [85.0, 7836.0], [85.1, 7839.0], [85.2, 7845.0], [85.3, 7855.0], [85.4, 7864.0], [85.5, 7874.0], [85.6, 7879.0], [85.7, 7900.0], [85.8, 7919.0], [85.9, 7924.0], [86.0, 7930.0], [86.1, 7936.0], [86.2, 7943.0], [86.3, 7958.0], [86.4, 7961.0], [86.5, 7972.0], [86.6, 7981.0], [86.7, 7985.0], [86.8, 7989.0], [86.9, 7997.0], [87.0, 8010.0], [87.1, 8017.0], [87.2, 8023.0], [87.3, 8033.0], [87.4, 8056.0], [87.5, 8068.0], [87.6, 8077.0], [87.7, 8085.0], [87.8, 8098.0], [87.9, 8115.0], [88.0, 8129.0], [88.1, 8137.0], [88.2, 8144.0], [88.3, 8160.0], [88.4, 8171.0], [88.5, 8185.0], [88.6, 8197.0], [88.7, 8226.0], [88.8, 8240.0], [88.9, 8250.0], [89.0, 8281.0], [89.1, 8297.0], [89.2, 8307.0], [89.3, 8324.0], [89.4, 8343.0], [89.5, 8355.0], [89.6, 8368.0], [89.7, 8374.0], [89.8, 8381.0], [89.9, 8388.0], [90.0, 8399.0], [90.1, 8415.0], [90.2, 8435.0], [90.3, 8465.0], [90.4, 8481.0], [90.5, 8503.0], [90.6, 8524.0], [90.7, 8538.0], [90.8, 8555.0], [90.9, 8575.0], [91.0, 8597.0], [91.1, 8621.0], [91.2, 8649.0], [91.3, 8665.0], [91.4, 8671.0], [91.5, 8682.0], [91.6, 8722.0], [91.7, 8761.0], [91.8, 8779.0], [91.9, 8805.0], [92.0, 8821.0], [92.1, 8842.0], [92.2, 8902.0], [92.3, 8924.0], [92.4, 8932.0], [92.5, 8949.0], [92.6, 8982.0], [92.7, 9031.0], [92.8, 9057.0], [92.9, 9080.0], [93.0, 9101.0], [93.1, 9127.0], [93.2, 9138.0], [93.3, 9163.0], [93.4, 9199.0], [93.5, 9224.0], [93.6, 9243.0], [93.7, 9276.0], [93.8, 9290.0], [93.9, 9325.0], [94.0, 9339.0], [94.1, 9369.0], [94.2, 9400.0], [94.3, 9431.0], [94.4, 9461.0], [94.5, 9482.0], [94.6, 9509.0], [94.7, 9535.0], [94.8, 9572.0], [94.9, 9598.0], [95.0, 9645.0], [95.1, 9687.0], [95.2, 9745.0], [95.3, 9799.0], [95.4, 9836.0], [95.5, 9869.0], [95.6, 9943.0], [95.7, 9969.0], [95.8, 10038.0], [95.9, 10087.0], [96.0, 10120.0], [96.1, 10155.0], [96.2, 10191.0], [96.3, 10265.0], [96.4, 10326.0], [96.5, 10423.0], [96.6, 10456.0], [96.7, 10532.0], [96.8, 10602.0], [96.9, 10645.0], [97.0, 10705.0], [97.1, 10774.0], [97.2, 10858.0], [97.3, 10914.0], [97.4, 10995.0], [97.5, 11075.0], [97.6, 11180.0], [97.7, 11371.0], [97.8, 11488.0], [97.9, 11564.0], [98.0, 11748.0], [98.1, 11861.0], [98.2, 11918.0], [98.3, 12074.0], [98.4, 12215.0], [98.5, 12288.0], [98.6, 12431.0], [98.7, 12580.0], [98.8, 12812.0], [98.9, 12907.0], [99.0, 13284.0], [99.1, 13567.0], [99.2, 13730.0], [99.3, 13833.0], [99.4, 13996.0], [99.5, 14194.0], [99.6, 14479.0], [99.7, 15028.0], [99.8, 17881.0], [99.9, 19294.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 150.0, "series": [{"data": [[300.0, 1.0], [1400.0, 1.0], [2100.0, 3.0], [2300.0, 53.0], [2200.0, 17.0], [2400.0, 102.0], [2500.0, 85.0], [2600.0, 58.0], [2700.0, 49.0], [2800.0, 42.0], [2900.0, 48.0], [3000.0, 49.0], [3100.0, 62.0], [3300.0, 79.0], [3200.0, 45.0], [3400.0, 62.0], [3500.0, 32.0], [3700.0, 47.0], [3600.0, 44.0], [3800.0, 55.0], [3900.0, 57.0], [4000.0, 63.0], [4100.0, 58.0], [4200.0, 62.0], [4300.0, 63.0], [4600.0, 66.0], [4500.0, 62.0], [4400.0, 59.0], [4700.0, 96.0], [4800.0, 102.0], [4900.0, 90.0], [5000.0, 100.0], [5100.0, 112.0], [5300.0, 111.0], [5200.0, 105.0], [5600.0, 121.0], [5500.0, 106.0], [5400.0, 100.0], [5700.0, 135.0], [5800.0, 150.0], [6100.0, 116.0], [5900.0, 119.0], [6000.0, 114.0], [6200.0, 90.0], [6300.0, 99.0], [6500.0, 116.0], [6600.0, 107.0], [6400.0, 88.0], [6900.0, 77.0], [6700.0, 69.0], [6800.0, 82.0], [7100.0, 63.0], [7000.0, 90.0], [7300.0, 81.0], [7200.0, 87.0], [7400.0, 68.0], [7500.0, 70.0], [7600.0, 62.0], [7800.0, 57.0], [7700.0, 40.0], [7900.0, 64.0], [8000.0, 47.0], [8100.0, 41.0], [8500.0, 29.0], [8300.0, 46.0], [8400.0, 23.0], [8600.0, 29.0], [8200.0, 27.0], [8700.0, 14.0], [8800.0, 18.0], [8900.0, 22.0], [9200.0, 22.0], [9100.0, 22.0], [9000.0, 19.0], [9400.0, 19.0], [9600.0, 10.0], [9500.0, 19.0], [9700.0, 11.0], [9300.0, 18.0], [9800.0, 12.0], [10000.0, 12.0], [10100.0, 11.0], [9900.0, 11.0], [10200.0, 8.0], [10600.0, 11.0], [10500.0, 7.0], [10300.0, 6.0], [10700.0, 7.0], [10400.0, 9.0], [10800.0, 7.0], [10900.0, 8.0], [11000.0, 7.0], [11100.0, 3.0], [11200.0, 3.0], [11300.0, 4.0], [11700.0, 4.0], [11500.0, 5.0], [11400.0, 5.0], [11600.0, 1.0], [11900.0, 4.0], [12200.0, 8.0], [12000.0, 2.0], [11800.0, 8.0], [12100.0, 3.0], [12300.0, 3.0], [12500.0, 3.0], [12400.0, 4.0], [12700.0, 2.0], [12600.0, 2.0], [12800.0, 5.0], [12900.0, 2.0], [13200.0, 4.0], [13000.0, 1.0], [13300.0, 2.0], [13700.0, 5.0], [13800.0, 3.0], [13600.0, 1.0], [13500.0, 3.0], [13400.0, 1.0], [14300.0, 2.0], [14100.0, 4.0], [14200.0, 2.0], [13900.0, 5.0], [14000.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [14400.0, 2.0], [15000.0, 1.0], [15100.0, 2.0], [15600.0, 1.0], [17700.0, 1.0], [17800.0, 1.0], [18200.0, 1.0], [18100.0, 1.0], [18500.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [18700.0, 1.0], [19300.0, 1.0], [22800.0, 1.0], [22900.0, 1.0], [23600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5188.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5188.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.21621621621622, "minX": 1.60439898E12, "maxY": 12.0, "series": [{"data": [[1.60439916E12, 12.0], [1.60440138E12, 12.0], [1.60440078E12, 12.0], [1.60439976E12, 12.0], [1.60439946E12, 12.0], [1.60440108E12, 12.0], [1.60440036E12, 12.0], [1.60440006E12, 12.0], [1.60440096E12, 12.0], [1.60439904E12, 12.0], [1.60440066E12, 12.0], [1.6044006E12, 12.0], [1.6044003E12, 12.0], [1.6044012E12, 12.0], [1.60439928E12, 12.0], [1.6044009E12, 12.0], [1.60439898E12, 11.88888888888889], [1.60439988E12, 12.0], [1.60439958E12, 12.0], [1.60440048E12, 12.0], [1.6044015E12, 12.0], [1.60440018E12, 12.0], [1.60440012E12, 12.0], [1.60439982E12, 12.0], [1.60440072E12, 12.0], [1.60440042E12, 12.0], [1.6043994E12, 12.0], [1.6043991E12, 12.0], [1.6044E12, 12.0], [1.60440102E12, 12.0], [1.6043997E12, 12.0], [1.60440132E12, 12.0], [1.60439964E12, 12.0], [1.60439934E12, 12.0], [1.60440024E12, 12.0], [1.60440126E12, 12.0], [1.60439994E12, 12.0], [1.60440156E12, 10.21621621621622], [1.60440084E12, 12.0], [1.60440114E12, 12.0], [1.60440054E12, 12.0], [1.60440144E12, 12.0], [1.60439952E12, 12.0], [1.60439922E12, 12.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60440156E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3683.0, "minX": 1.0, "maxY": 7087.0, "series": [{"data": [[8.0, 5083.0], [4.0, 7087.0], [2.0, 7063.0], [1.0, 6802.0], [9.0, 6181.0], [10.0, 6480.0], [5.0, 7013.0], [11.0, 6522.0], [12.0, 5919.141753572801], [6.0, 6948.0], [3.0, 7067.0], [7.0, 3683.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.98631984585746, 5919.639306358375]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 288.65, "minX": 1.60439898E12, "maxY": 859294.55, "series": [{"data": [[1.60439916E12, 539816.05], [1.60440138E12, 549203.8], [1.60440078E12, 411108.31666666665], [1.60439976E12, 672577.0], [1.60439946E12, 445025.4], [1.60440108E12, 566840.6166666667], [1.60440036E12, 652392.6833333333], [1.60440006E12, 629049.6166666667], [1.60440096E12, 663762.95], [1.60439904E12, 697968.0833333334], [1.60440066E12, 339669.63333333336], [1.6044006E12, 477726.93333333335], [1.6044003E12, 621314.9166666666], [1.6044012E12, 509778.2833333333], [1.60439928E12, 556242.65], [1.6044009E12, 771979.2166666667], [1.60439898E12, 317818.0333333333], [1.60439988E12, 507268.2], [1.60439958E12, 859294.55], [1.60440048E12, 475447.4166666667], [1.6044015E12, 494924.18333333335], [1.60440018E12, 499344.2166666667], [1.60440012E12, 571117.6166666667], [1.60439982E12, 704878.3333333334], [1.60440072E12, 393691.81666666665], [1.60440042E12, 447540.95], [1.6043994E12, 277355.1], [1.6043991E12, 471183.68333333335], [1.6044E12, 566147.95], [1.60440102E12, 635894.5333333333], [1.6043997E12, 629632.9666666667], [1.60440132E12, 561056.4333333333], [1.60439964E12, 613468.4], [1.60439934E12, 372117.11666666664], [1.60440024E12, 537661.2666666667], [1.60440126E12, 568319.95], [1.60439994E12, 602142.1], [1.60440156E12, 160085.45], [1.60440084E12, 747461.6666666666], [1.60440114E12, 543947.6333333333], [1.60440054E12, 602935.45], [1.60440144E12, 478820.7833333333], [1.60439952E12, 646944.4], [1.60439922E12, 581936.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60439916E12, 920.7], [1.60440138E12, 1072.3166666666666], [1.60440078E12, 980.3333333333334], [1.60439976E12, 976.8], [1.60439946E12, 980.7666666666667], [1.60440108E12, 1090.4333333333334], [1.60440036E12, 561.7166666666667], [1.60440006E12, 1099.4], [1.60440096E12, 984.75], [1.60439904E12, 652.9], [1.60440066E12, 736.0833333333334], [1.6044006E12, 757.3166666666667], [1.6044003E12, 809.5333333333333], [1.6044012E12, 928.9833333333333], [1.60439928E12, 934.2666666666667], [1.6044009E12, 837.0], [1.60439898E12, 344.56666666666666], [1.60439988E12, 799.1333333333333], [1.60439958E12, 780.8666666666667], [1.60440048E12, 652.6166666666667], [1.6044015E12, 743.6333333333333], [1.60440018E12, 713.15], [1.60440012E12, 876.4666666666667], [1.60439982E12, 891.6833333333333], [1.60440072E12, 1362.1666666666667], [1.60440042E12, 1064.9333333333334], [1.6043994E12, 1344.5666666666666], [1.6043991E12, 815.15], [1.6044E12, 1164.2], [1.60440102E12, 1081.5666666666666], [1.6043997E12, 1089.0], [1.60440132E12, 988.3666666666667], [1.60439964E12, 1008.4166666666666], [1.60439934E12, 608.4333333333333], [1.60440024E12, 717.7833333333333], [1.60440126E12, 1032.75], [1.60439994E12, 853.95], [1.60440156E12, 288.65], [1.60440084E12, 710.7333333333333], [1.60440114E12, 885.2333333333333], [1.60440054E12, 990.9166666666666], [1.60440144E12, 747.8333333333334], [1.60439952E12, 803.5666666666667], [1.60439922E12, 893.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60440156E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3972.4371584699434, "minX": 1.60439898E12, "maxY": 9499.708860759496, "series": [{"data": [[1.60439916E12, 5303.153846153846], [1.60440138E12, 5041.99295774648], [1.60440078E12, 4941.2624113475185], [1.60439976E12, 5458.9457364341115], [1.60439946E12, 5061.661870503599], [1.60440108E12, 4986.854166666663], [1.60440036E12, 9499.708860759496], [1.60440006E12, 5151.500000000003], [1.60440096E12, 5790.346153846152], [1.60439904E12, 7645.685393258427], [1.60440066E12, 7440.320388349518], [1.6044006E12, 6703.805825242719], [1.6044003E12, 6507.972477064222], [1.6044012E12, 5835.491803278688], [1.60439928E12, 5577.000000000001], [1.6044009E12, 6523.663636363636], [1.60439898E12, 6086.7555555555555], [1.60439988E12, 6992.311320754718], [1.60439958E12, 7111.6504854368895], [1.60440048E12, 7677.510638297872], [1.6044015E12, 6976.75], [1.60440018E12, 7348.739583333335], [1.60440012E12, 6074.948275862067], [1.60439982E12, 6248.264957264956], [1.60440072E12, 3972.4371584699434], [1.60440042E12, 4662.506666666672], [1.6043994E12, 4002.267759562843], [1.6043991E12, 6551.26724137931], [1.6044E12, 4586.006493506493], [1.60440102E12, 4894.111888111888], [1.6043997E12, 4959.145833333334], [1.60440132E12, 5429.40769230769], [1.60439964E12, 5366.518796992485], [1.60439934E12, 8618.833333333332], [1.60440024E12, 7798.787234042553], [1.60440126E12, 5414.47794117647], [1.60439994E12, 6383.747747747748], [1.60440156E12, 6772.486486486484], [1.60440084E12, 7748.247311827958], [1.60440114E12, 6287.189655172414], [1.60440054E12, 5213.222222222223], [1.60440144E12, 7203.9], [1.60439952E12, 6829.17142857143], [1.60439922E12, 6050.7338709677415]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60440156E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3971.4808743169415, "minX": 1.60439898E12, "maxY": 9495.177215189873, "series": [{"data": [[1.60439916E12, 5301.046153846154], [1.60440138E12, 5040.542253521125], [1.60440078E12, 4940.014184397165], [1.60439976E12, 5456.612403100777], [1.60439946E12, 5059.92086330935], [1.60440108E12, 4985.4027777777765], [1.60440036E12, 9495.177215189873], [1.60440006E12, 5149.5821917808225], [1.60440096E12, 5788.515384615386], [1.60439904E12, 7642.011235955058], [1.60440066E12, 7438.902912621358], [1.6044006E12, 6701.92233009709], [1.6044003E12, 6505.339449541283], [1.6044012E12, 5833.94262295082], [1.60439928E12, 5574.126984126981], [1.6044009E12, 6521.136363636365], [1.60439898E12, 6083.755555555556], [1.60439988E12, 6989.877358490566], [1.60439958E12, 7107.106796116506], [1.60440048E12, 7675.340425531914], [1.6044015E12, 6974.800000000001], [1.60440018E12, 7346.04166666667], [1.60440012E12, 6072.56896551724], [1.60439982E12, 6245.478632478633], [1.60440072E12, 3971.4808743169415], [1.60440042E12, 4661.280000000002], [1.6043994E12, 4001.4863387978157], [1.6043991E12, 6549.060344827584], [1.6044E12, 4584.357142857145], [1.60440102E12, 4892.517482517481], [1.6043997E12, 4957.027777777779], [1.60440132E12, 5427.823076923077], [1.60439964E12, 5364.015037593986], [1.60439934E12, 8616.607142857145], [1.60440024E12, 7795.851063829789], [1.60440126E12, 5412.83088235294], [1.60439994E12, 6381.216216216217], [1.60440156E12, 6770.648648648649], [1.60440084E12, 7745.150537634409], [1.60440114E12, 6285.33620689655], [1.60440054E12, 5211.422222222224], [1.60440144E12, 7202.149999999999], [1.60439952E12, 6826.447619047618], [1.60439922E12, 6047.975806451612]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60440156E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06666666666666668, "minX": 1.60439898E12, "maxY": 3.244444444444444, "series": [{"data": [[1.60439916E12, 0.1076923076923077], [1.60440138E12, 0.07042253521126761], [1.60440078E12, 0.09219858156028371], [1.60439976E12, 0.10852713178294573], [1.60439946E12, 0.0863309352517986], [1.60440108E12, 0.09722222222222228], [1.60440036E12, 0.18987341772151903], [1.60440006E12, 0.10273972602739727], [1.60440096E12, 0.09230769230769234], [1.60439904E12, 0.17977528089887643], [1.60440066E12, 0.14563106796116498], [1.6044006E12, 0.10679611650485439], [1.6044003E12, 0.11926605504587152], [1.6044012E12, 0.10655737704918036], [1.60439928E12, 0.09523809523809522], [1.6044009E12, 0.10000000000000005], [1.60439898E12, 3.244444444444444], [1.60439988E12, 0.13207547169811326], [1.60439958E12, 0.11650485436893211], [1.60440048E12, 0.10638297872340426], [1.6044015E12, 0.10000000000000007], [1.60440018E12, 0.14583333333333334], [1.60440012E12, 0.08620689655172412], [1.60439982E12, 0.11111111111111116], [1.60440072E12, 0.07103825136612026], [1.60440042E12, 0.07333333333333336], [1.6043994E12, 0.087431693989071], [1.6043991E12, 0.1379310344827586], [1.6044E12, 0.09090909090909091], [1.60440102E12, 0.06993006993006992], [1.6043997E12, 0.125], [1.60440132E12, 0.08461538461538466], [1.60439964E12, 0.0902255639097745], [1.60439934E12, 0.11904761904761904], [1.60440024E12, 0.14893617021276603], [1.60440126E12, 0.10294117647058822], [1.60439994E12, 0.12612612612612617], [1.60440156E12, 0.2162162162162163], [1.60440084E12, 0.11827956989247312], [1.60440114E12, 0.08620689655172412], [1.60440054E12, 0.06666666666666668], [1.60440144E12, 0.06999999999999999], [1.60439952E12, 0.1523809523809524], [1.60439922E12, 0.10483870967741934]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60440156E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 386.0, "minX": 1.60439898E12, "maxY": 23662.0, "series": [{"data": [[1.60439916E12, 8757.0], [1.60440138E12, 11075.0], [1.60440078E12, 8178.0], [1.60439976E12, 10879.0], [1.60439946E12, 9304.0], [1.60440108E12, 8376.0], [1.60440036E12, 23662.0], [1.60440006E12, 12564.0], [1.60440096E12, 8874.0], [1.60439904E12, 10155.0], [1.60440066E12, 13801.0], [1.6044006E12, 13272.0], [1.6044003E12, 8090.0], [1.6044012E12, 8810.0], [1.60439928E12, 8007.0], [1.6044009E12, 8185.0], [1.60439898E12, 7560.0], [1.60439988E12, 10590.0], [1.60439958E12, 9162.0], [1.60440048E12, 14343.0], [1.6044015E12, 11448.0], [1.60440018E12, 14107.0], [1.60440012E12, 8406.0], [1.60439982E12, 10309.0], [1.60440072E12, 6565.0], [1.60440042E12, 6497.0], [1.6043994E12, 7666.0], [1.6043991E12, 15693.0], [1.6044E12, 8361.0], [1.60440102E12, 8668.0], [1.6043997E12, 8021.0], [1.60440132E12, 10914.0], [1.60439964E12, 7995.0], [1.60439934E12, 12202.0], [1.60440024E12, 14231.0], [1.60440126E12, 9347.0], [1.60439994E12, 8387.0], [1.60440156E12, 8968.0], [1.60440084E12, 9934.0], [1.60440114E12, 8918.0], [1.60440054E12, 7476.0], [1.60440144E12, 12708.0], [1.60439952E12, 10762.0], [1.60439922E12, 15154.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60439916E12, 2498.116999281645], [1.60440138E12, 2364.017999522686], [1.60440078E12, 2455.389999830723], [1.60439976E12, 2270.0599994421004], [1.60439946E12, 2552.659996962547], [1.60440108E12, 2385.844985169172], [1.60440036E12, 2684.0], [1.60440006E12, 2162.4599992990493], [1.60440096E12, 2279.4319997501375], [1.60439904E12, 4123.0], [1.60440066E12, 4127.0], [1.6044006E12, 3488.0], [1.6044003E12, 4641.0], [1.6044012E12, 2805.8439973020554], [1.60439928E12, 3387.571999878883], [1.6044009E12, 4822.0], [1.60439898E12, 386.0], [1.60439988E12, 4574.0], [1.60439958E12, 5114.0], [1.60440048E12, 5211.0], [1.6044015E12, 3703.0], [1.60440018E12, 3572.0], [1.60440012E12, 2916.589999163151], [1.60439982E12, 2634.623978843689], [1.60440072E12, 2342.4639991664885], [1.60440042E12, 2411.7179999279974], [1.6043994E12, 2258.527999429703], [1.6043991E12, 2404.1129994142057], [1.6044E12, 2542.0849991500377], [1.60440102E12, 2328.5519995880127], [1.6043997E12, 2382.3049999654295], [1.60440132E12, 2501.116999281645], [1.60439964E12, 2703.679991054535], [1.60439934E12, 5505.0], [1.60440024E12, 3872.0], [1.60440126E12, 2304.2329999673366], [1.60439994E12, 4491.47199842453], [1.60440156E12, 5083.0], [1.60440084E12, 5709.0], [1.60440114E12, 2722.1689951741696], [1.60440054E12, 3469.935993061066], [1.60440144E12, 3924.0], [1.60439952E12, 4232.0], [1.60439922E12, 3436.4999972581863]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60439916E12, 2500.828700287342], [1.60440138E12, 2365.8198001909254], [1.60440078E12, 2456.029000067711], [1.60439976E12, 2272.1660002231597], [1.60439946E12, 2564.126001214981], [1.60440108E12, 2441.829505932331], [1.60440036E12, 2684.0], [1.60440006E12, 2165.10600028038], [1.60440096E12, 2280.3752000999452], [1.60439904E12, 4123.0], [1.60440066E12, 4130.788801269531], [1.6044006E12, 3491.6704012298583], [1.6044003E12, 4664.0510027170185], [1.6044012E12, 2816.028401079178], [1.60439928E12, 3388.0292000484465], [1.6044009E12, 4823.285700137615], [1.60439898E12, 386.0], [1.60439988E12, 4582.65780148983], [1.60439958E12, 5115.124800376892], [1.60440048E12, 5211.0], [1.6044015E12, 3703.0], [1.60440018E12, 3572.0], [1.60440012E12, 2919.74900033474], [1.60439982E12, 2714.4864084625247], [1.60440072E12, 2345.6104003334044], [1.60440042E12, 2411.989800028801], [1.6043994E12, 2260.680800228119], [1.6043991E12, 2406.324300234318], [1.6044E12, 2545.293500339985], [1.60440102E12, 2330.107200164795], [1.6043997E12, 2382.4355000138285], [1.60440132E12, 2503.828700287342], [1.60439964E12, 2737.448003578186], [1.60439934E12, 5505.0], [1.60440024E12, 3872.0], [1.60440126E12, 2304.3563000130653], [1.60439994E12, 4497.419200630188], [1.60440156E12, 5083.0], [1.60440084E12, 5709.0], [1.60440114E12, 2740.3859019303322], [1.60440054E12, 3496.129602775574], [1.60440144E12, 3924.0], [1.60439952E12, 4232.197600040436], [1.60439922E12, 3446.8500010967255]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60439916E12, 2499.6234996408225], [1.60440138E12, 2365.018999761343], [1.60440078E12, 2455.7449999153614], [1.60439976E12, 2271.2299997210503], [1.60439946E12, 2559.0299984812737], [1.60440108E12, 2416.947492584586], [1.60440036E12, 2684.0], [1.60440006E12, 2163.9299996495247], [1.60440096E12, 2279.9559998750688], [1.60439904E12, 4123.0], [1.60440066E12, 4127.0], [1.6044006E12, 3488.0], [1.6044003E12, 4652.654996603727], [1.6044012E12, 2811.501998651028], [1.60439928E12, 3387.8259999394418], [1.6044009E12, 4822.708499827981], [1.60439898E12, 386.0], [1.60439988E12, 4576.408998137713], [1.60439958E12, 5114.0], [1.60440048E12, 5211.0], [1.6044015E12, 3703.0], [1.60440018E12, 3572.0], [1.60440012E12, 2918.3449995815754], [1.60439982E12, 2678.991989421844], [1.60440072E12, 2344.2119995832445], [1.60440042E12, 2411.8689999639987], [1.6043994E12, 2259.7239997148513], [1.6043991E12, 2405.3414997071027], [1.6044E12, 2543.867499575019], [1.60440102E12, 2329.4159997940064], [1.6043997E12, 2382.3774999827147], [1.60440132E12, 2502.6234996408225], [1.60439964E12, 2722.4399955272675], [1.60439934E12, 5505.0], [1.60440024E12, 3872.0], [1.60440126E12, 2304.3014999836682], [1.60439994E12, 4494.775999212265], [1.60440156E12, 5083.0], [1.60440084E12, 5709.0], [1.60440114E12, 2732.289497587085], [1.60440054E12, 3484.4879965305327], [1.60440144E12, 3924.0], [1.60439952E12, 4232.027999949455], [1.60439922E12, 3442.249998629093]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60439916E12, 2494.0], [1.60440138E12, 2360.0], [1.60440078E12, 2454.0], [1.60439976E12, 2267.0], [1.60439946E12, 2529.0], [1.60440108E12, 2255.0], [1.60440036E12, 2684.0], [1.60440006E12, 2156.0], [1.60440096E12, 2278.0], [1.60439904E12, 4123.0], [1.60440066E12, 4127.0], [1.6044006E12, 3488.0], [1.6044003E12, 4641.0], [1.6044012E12, 2796.0], [1.60439928E12, 3387.0], [1.6044009E12, 4822.0], [1.60439898E12, 386.0], [1.60439988E12, 4574.0], [1.60439958E12, 5114.0], [1.60440048E12, 5211.0], [1.6044015E12, 3703.0], [1.60440018E12, 3572.0], [1.60440012E12, 2915.0], [1.60439982E12, 2588.0], [1.60440072E12, 2330.0], [1.60440042E12, 2411.0], [1.6043994E12, 2250.0], [1.6043991E12, 2403.0], [1.6044E12, 2533.0], [1.60440102E12, 2325.0], [1.6043997E12, 2382.0], [1.60440132E12, 2497.0], [1.60439964E12, 2646.0], [1.60439934E12, 5505.0], [1.60440024E12, 3872.0], [1.60440126E12, 2304.0], [1.60439994E12, 4491.0], [1.60440156E12, 5083.0], [1.60440084E12, 5709.0], [1.60440114E12, 2713.0], [1.60440054E12, 3422.0], [1.60440144E12, 3924.0], [1.60439952E12, 4232.0], [1.60439922E12, 3425.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60439916E12, 5529.0], [1.60440138E12, 4799.0], [1.60440078E12, 4826.0], [1.60439976E12, 5644.0], [1.60439946E12, 4847.0], [1.60440108E12, 5018.5], [1.60440036E12, 7855.0], [1.60440006E12, 3722.5], [1.60440096E12, 6357.5], [1.60439904E12, 8089.0], [1.60440066E12, 7267.0], [1.6044006E12, 5178.0], [1.6044003E12, 6483.0], [1.6044012E12, 5903.5], [1.60439928E12, 5760.0], [1.6044009E12, 6562.5], [1.60439898E12, 6568.0], [1.60439988E12, 6791.5], [1.60439958E12, 7211.0], [1.60440048E12, 6109.5], [1.6044015E12, 7050.5], [1.60440018E12, 6795.0], [1.60440012E12, 6303.5], [1.60439982E12, 6040.0], [1.60440072E12, 3878.0], [1.60440042E12, 4840.5], [1.6043994E12, 3658.0], [1.6043991E12, 5543.5], [1.6044E12, 4067.0], [1.60440102E12, 5210.0], [1.6043997E12, 5261.0], [1.60440132E12, 5079.0], [1.60439964E12, 5305.0], [1.60439934E12, 8223.5], [1.60440024E12, 7380.0], [1.60440126E12, 5584.5], [1.60439994E12, 6326.0], [1.60440156E12, 6522.0], [1.60440084E12, 7808.0], [1.60440114E12, 6457.0], [1.60440054E12, 5080.0], [1.60440144E12, 7024.0], [1.60439952E12, 6470.0], [1.60439922E12, 5269.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60440156E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2568.5, "minX": 1.0, "maxY": 6993.0, "series": [{"data": [[1.0, 6993.0], [2.0, 6437.5], [4.0, 4312.0], [5.0, 3072.0], [3.0, 5684.5], [6.0, 2568.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2568.5, "minX": 1.0, "maxY": 6991.0, "series": [{"data": [[1.0, 6991.0], [2.0, 6430.5], [4.0, 4311.0], [5.0, 3072.0], [3.0, 5683.5], [6.0, 2568.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.60439898E12, "maxY": 3.05, "series": [{"data": [[1.60439916E12, 2.1666666666666665], [1.60440138E12, 2.3666666666666667], [1.60440078E12, 2.35], [1.60439976E12, 2.15], [1.60439946E12, 2.316666666666667], [1.60440108E12, 2.4], [1.60440036E12, 1.3166666666666667], [1.60440006E12, 2.433333333333333], [1.60440096E12, 2.1666666666666665], [1.60439904E12, 1.4833333333333334], [1.60440066E12, 1.7166666666666666], [1.6044006E12, 1.7166666666666666], [1.6044003E12, 1.8166666666666667], [1.6044012E12, 2.033333333333333], [1.60439928E12, 2.1], [1.6044009E12, 1.8333333333333333], [1.60439898E12, 0.95], [1.60439988E12, 1.7666666666666666], [1.60439958E12, 1.7166666666666666], [1.60440048E12, 1.5666666666666667], [1.6044015E12, 1.6666666666666667], [1.60440018E12, 1.6], [1.60440012E12, 1.9333333333333333], [1.60439982E12, 1.95], [1.60440072E12, 3.05], [1.60440042E12, 2.5], [1.6043994E12, 3.05], [1.6043991E12, 1.9333333333333333], [1.6044E12, 2.566666666666667], [1.60440102E12, 2.3833333333333333], [1.6043997E12, 2.4], [1.60440132E12, 2.1666666666666665], [1.60439964E12, 2.216666666666667], [1.60439934E12, 1.4], [1.60440024E12, 1.5666666666666667], [1.60440126E12, 2.2666666666666666], [1.60439994E12, 1.85], [1.60440156E12, 0.4166666666666667], [1.60440084E12, 1.55], [1.60440114E12, 1.9333333333333333], [1.60440054E12, 2.25], [1.60440144E12, 1.6666666666666667], [1.60439952E12, 1.75], [1.60439922E12, 2.066666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60440156E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.60439898E12, "maxY": 3.05, "series": [{"data": [[1.60439916E12, 2.1666666666666665], [1.60440138E12, 2.3666666666666667], [1.60440078E12, 2.35], [1.60439976E12, 2.15], [1.60439946E12, 2.316666666666667], [1.60440108E12, 2.4], [1.60440036E12, 1.3166666666666667], [1.60440006E12, 2.433333333333333], [1.60440096E12, 2.1666666666666665], [1.60439904E12, 1.4833333333333334], [1.60440066E12, 1.7166666666666666], [1.6044006E12, 1.7166666666666666], [1.6044003E12, 1.8166666666666667], [1.6044012E12, 2.033333333333333], [1.60439928E12, 2.1], [1.6044009E12, 1.8333333333333333], [1.60439898E12, 0.75], [1.60439988E12, 1.7666666666666666], [1.60439958E12, 1.7166666666666666], [1.60440048E12, 1.5666666666666667], [1.6044015E12, 1.6666666666666667], [1.60440018E12, 1.6], [1.60440012E12, 1.9333333333333333], [1.60439982E12, 1.95], [1.60440072E12, 3.05], [1.60440042E12, 2.5], [1.6043994E12, 3.05], [1.6043991E12, 1.9333333333333333], [1.6044E12, 2.566666666666667], [1.60440102E12, 2.3833333333333333], [1.6043997E12, 2.4], [1.60440132E12, 2.1666666666666665], [1.60439964E12, 2.216666666666667], [1.60439934E12, 1.4], [1.60440024E12, 1.5666666666666667], [1.60440126E12, 2.2666666666666666], [1.60439994E12, 1.85], [1.60440156E12, 0.6166666666666667], [1.60440084E12, 1.55], [1.60440114E12, 1.9333333333333333], [1.60440054E12, 2.25], [1.60440144E12, 1.6666666666666667], [1.60439952E12, 1.75], [1.60439922E12, 2.066666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60440156E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.60439898E12, "maxY": 3.05, "series": [{"data": [[1.60439916E12, 2.1666666666666665], [1.60440138E12, 2.3666666666666667], [1.60440078E12, 2.35], [1.60439976E12, 2.15], [1.60439946E12, 2.316666666666667], [1.60440108E12, 2.4], [1.60440036E12, 1.3166666666666667], [1.60440006E12, 2.433333333333333], [1.60440096E12, 2.1666666666666665], [1.60439904E12, 1.4833333333333334], [1.60440066E12, 1.7166666666666666], [1.6044006E12, 1.7166666666666666], [1.6044003E12, 1.8166666666666667], [1.6044012E12, 2.033333333333333], [1.60439928E12, 2.1], [1.6044009E12, 1.8333333333333333], [1.60439898E12, 0.75], [1.60439988E12, 1.7666666666666666], [1.60439958E12, 1.7166666666666666], [1.60440048E12, 1.5666666666666667], [1.6044015E12, 1.6666666666666667], [1.60440018E12, 1.6], [1.60440012E12, 1.9333333333333333], [1.60439982E12, 1.95], [1.60440072E12, 3.05], [1.60440042E12, 2.5], [1.6043994E12, 3.05], [1.6043991E12, 1.9333333333333333], [1.6044E12, 2.566666666666667], [1.60440102E12, 2.3833333333333333], [1.6043997E12, 2.4], [1.60440132E12, 2.1666666666666665], [1.60439964E12, 2.216666666666667], [1.60439934E12, 1.4], [1.60440024E12, 1.5666666666666667], [1.60440126E12, 2.2666666666666666], [1.60439994E12, 1.85], [1.60440156E12, 0.6166666666666667], [1.60440084E12, 1.55], [1.60440114E12, 1.9333333333333333], [1.60440054E12, 2.25], [1.60440144E12, 1.6666666666666667], [1.60439952E12, 1.75], [1.60439922E12, 2.066666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60440156E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.60439898E12, "maxY": 3.05, "series": [{"data": [[1.60439916E12, 2.1666666666666665], [1.60440138E12, 2.3666666666666667], [1.60440078E12, 2.35], [1.60439976E12, 2.15], [1.60439946E12, 2.316666666666667], [1.60440108E12, 2.4], [1.60440036E12, 1.3166666666666667], [1.60440006E12, 2.433333333333333], [1.60440096E12, 2.1666666666666665], [1.60439904E12, 1.4833333333333334], [1.60440066E12, 1.7166666666666666], [1.6044006E12, 1.7166666666666666], [1.6044003E12, 1.8166666666666667], [1.6044012E12, 2.033333333333333], [1.60439928E12, 2.1], [1.6044009E12, 1.8333333333333333], [1.60439898E12, 0.75], [1.60439988E12, 1.7666666666666666], [1.60439958E12, 1.7166666666666666], [1.60440048E12, 1.5666666666666667], [1.6044015E12, 1.6666666666666667], [1.60440018E12, 1.6], [1.60440012E12, 1.9333333333333333], [1.60439982E12, 1.95], [1.60440072E12, 3.05], [1.60440042E12, 2.5], [1.6043994E12, 3.05], [1.6043991E12, 1.9333333333333333], [1.6044E12, 2.566666666666667], [1.60440102E12, 2.3833333333333333], [1.6043997E12, 2.4], [1.60440132E12, 2.1666666666666665], [1.60439964E12, 2.216666666666667], [1.60439934E12, 1.4], [1.60440024E12, 1.5666666666666667], [1.60440126E12, 2.2666666666666666], [1.60439994E12, 1.85], [1.60440156E12, 0.6166666666666667], [1.60440084E12, 1.55], [1.60440114E12, 1.9333333333333333], [1.60440054E12, 2.25], [1.60440144E12, 1.6666666666666667], [1.60439952E12, 1.75], [1.60439922E12, 2.066666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60440156E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

