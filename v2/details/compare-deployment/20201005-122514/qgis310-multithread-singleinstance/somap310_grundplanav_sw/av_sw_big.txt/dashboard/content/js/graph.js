/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2533.0, "minX": 0.0, "maxY": 40891.0, "series": [{"data": [[0.0, 2533.0], [0.1, 6018.0], [0.2, 7274.0], [0.3, 7284.0], [0.4, 7339.0], [0.5, 7388.0], [0.6, 7462.0], [0.7, 7562.0], [0.8, 7572.0], [0.9, 7577.0], [1.0, 7584.0], [1.1, 7633.0], [1.2, 7893.0], [1.3, 7911.0], [1.4, 7985.0], [1.5, 8057.0], [1.6, 8217.0], [1.7, 8244.0], [1.8, 8347.0], [1.9, 8407.0], [2.0, 8448.0], [2.1, 8494.0], [2.2, 8633.0], [2.3, 8666.0], [2.4, 8736.0], [2.5, 8760.0], [2.6, 8782.0], [2.7, 8828.0], [2.8, 8907.0], [2.9, 8957.0], [3.0, 9028.0], [3.1, 9051.0], [3.2, 9092.0], [3.3, 9130.0], [3.4, 9159.0], [3.5, 9176.0], [3.6, 9193.0], [3.7, 9210.0], [3.8, 9243.0], [3.9, 9294.0], [4.0, 9336.0], [4.1, 9372.0], [4.2, 9437.0], [4.3, 9513.0], [4.4, 9583.0], [4.5, 9645.0], [4.6, 9665.0], [4.7, 9721.0], [4.8, 9768.0], [4.9, 9816.0], [5.0, 9829.0], [5.1, 9882.0], [5.2, 9930.0], [5.3, 10003.0], [5.4, 10076.0], [5.5, 10150.0], [5.6, 10177.0], [5.7, 10190.0], [5.8, 10299.0], [5.9, 10379.0], [6.0, 10395.0], [6.1, 10404.0], [6.2, 10417.0], [6.3, 10422.0], [6.4, 10438.0], [6.5, 10458.0], [6.6, 10466.0], [6.7, 10483.0], [6.8, 10494.0], [6.9, 10525.0], [7.0, 10546.0], [7.1, 10565.0], [7.2, 10581.0], [7.3, 10602.0], [7.4, 10709.0], [7.5, 10734.0], [7.6, 10778.0], [7.7, 10801.0], [7.8, 10840.0], [7.9, 10875.0], [8.0, 10904.0], [8.1, 10922.0], [8.2, 10996.0], [8.3, 11029.0], [8.4, 11059.0], [8.5, 11100.0], [8.6, 11121.0], [8.7, 11139.0], [8.8, 11166.0], [8.9, 11219.0], [9.0, 11255.0], [9.1, 11308.0], [9.2, 11366.0], [9.3, 11394.0], [9.4, 11437.0], [9.5, 11485.0], [9.6, 11499.0], [9.7, 11568.0], [9.8, 11584.0], [9.9, 11631.0], [10.0, 11682.0], [10.1, 11727.0], [10.2, 11774.0], [10.3, 11799.0], [10.4, 11864.0], [10.5, 11920.0], [10.6, 11976.0], [10.7, 11998.0], [10.8, 12037.0], [10.9, 12065.0], [11.0, 12090.0], [11.1, 12130.0], [11.2, 12146.0], [11.3, 12153.0], [11.4, 12182.0], [11.5, 12205.0], [11.6, 12215.0], [11.7, 12228.0], [11.8, 12235.0], [11.9, 12242.0], [12.0, 12272.0], [12.1, 12307.0], [12.2, 12370.0], [12.3, 12407.0], [12.4, 12440.0], [12.5, 12495.0], [12.6, 12539.0], [12.7, 12567.0], [12.8, 12586.0], [12.9, 12632.0], [13.0, 12677.0], [13.1, 12732.0], [13.2, 12798.0], [13.3, 12850.0], [13.4, 12887.0], [13.5, 12930.0], [13.6, 12970.0], [13.7, 13033.0], [13.8, 13050.0], [13.9, 13103.0], [14.0, 13149.0], [14.1, 13192.0], [14.2, 13223.0], [14.3, 13250.0], [14.4, 13260.0], [14.5, 13278.0], [14.6, 13341.0], [14.7, 13386.0], [14.8, 13439.0], [14.9, 13480.0], [15.0, 13500.0], [15.1, 13525.0], [15.2, 13536.0], [15.3, 13551.0], [15.4, 13600.0], [15.5, 13611.0], [15.6, 13631.0], [15.7, 13663.0], [15.8, 13681.0], [15.9, 13710.0], [16.0, 13715.0], [16.1, 13732.0], [16.2, 13740.0], [16.3, 13768.0], [16.4, 13779.0], [16.5, 13785.0], [16.6, 13809.0], [16.7, 13844.0], [16.8, 13873.0], [16.9, 13897.0], [17.0, 13920.0], [17.1, 13947.0], [17.2, 13976.0], [17.3, 14001.0], [17.4, 14020.0], [17.5, 14035.0], [17.6, 14053.0], [17.7, 14066.0], [17.8, 14076.0], [17.9, 14107.0], [18.0, 14125.0], [18.1, 14155.0], [18.2, 14180.0], [18.3, 14197.0], [18.4, 14214.0], [18.5, 14228.0], [18.6, 14245.0], [18.7, 14261.0], [18.8, 14292.0], [18.9, 14320.0], [19.0, 14330.0], [19.1, 14359.0], [19.2, 14373.0], [19.3, 14399.0], [19.4, 14411.0], [19.5, 14434.0], [19.6, 14454.0], [19.7, 14480.0], [19.8, 14496.0], [19.9, 14512.0], [20.0, 14531.0], [20.1, 14579.0], [20.2, 14591.0], [20.3, 14618.0], [20.4, 14625.0], [20.5, 14645.0], [20.6, 14665.0], [20.7, 14691.0], [20.8, 14721.0], [20.9, 14736.0], [21.0, 14761.0], [21.1, 14788.0], [21.2, 14819.0], [21.3, 14859.0], [21.4, 14875.0], [21.5, 14887.0], [21.6, 14913.0], [21.7, 14923.0], [21.8, 14944.0], [21.9, 14990.0], [22.0, 15012.0], [22.1, 15033.0], [22.2, 15088.0], [22.3, 15122.0], [22.4, 15130.0], [22.5, 15140.0], [22.6, 15156.0], [22.7, 15165.0], [22.8, 15186.0], [22.9, 15199.0], [23.0, 15222.0], [23.1, 15241.0], [23.2, 15246.0], [23.3, 15257.0], [23.4, 15275.0], [23.5, 15288.0], [23.6, 15317.0], [23.7, 15331.0], [23.8, 15343.0], [23.9, 15358.0], [24.0, 15371.0], [24.1, 15406.0], [24.2, 15420.0], [24.3, 15424.0], [24.4, 15449.0], [24.5, 15476.0], [24.6, 15484.0], [24.7, 15506.0], [24.8, 15522.0], [24.9, 15543.0], [25.0, 15550.0], [25.1, 15570.0], [25.2, 15592.0], [25.3, 15605.0], [25.4, 15626.0], [25.5, 15644.0], [25.6, 15669.0], [25.7, 15703.0], [25.8, 15748.0], [25.9, 15765.0], [26.0, 15778.0], [26.1, 15794.0], [26.2, 15815.0], [26.3, 15837.0], [26.4, 15847.0], [26.5, 15864.0], [26.6, 15879.0], [26.7, 15892.0], [26.8, 15907.0], [26.9, 15932.0], [27.0, 15939.0], [27.1, 15942.0], [27.2, 15967.0], [27.3, 16007.0], [27.4, 16015.0], [27.5, 16042.0], [27.6, 16063.0], [27.7, 16078.0], [27.8, 16095.0], [27.9, 16113.0], [28.0, 16127.0], [28.1, 16140.0], [28.2, 16159.0], [28.3, 16177.0], [28.4, 16190.0], [28.5, 16209.0], [28.6, 16231.0], [28.7, 16250.0], [28.8, 16273.0], [28.9, 16298.0], [29.0, 16313.0], [29.1, 16343.0], [29.2, 16364.0], [29.3, 16387.0], [29.4, 16445.0], [29.5, 16463.0], [29.6, 16492.0], [29.7, 16505.0], [29.8, 16515.0], [29.9, 16528.0], [30.0, 16541.0], [30.1, 16550.0], [30.2, 16561.0], [30.3, 16565.0], [30.4, 16590.0], [30.5, 16605.0], [30.6, 16622.0], [30.7, 16642.0], [30.8, 16657.0], [30.9, 16675.0], [31.0, 16679.0], [31.1, 16687.0], [31.2, 16718.0], [31.3, 16730.0], [31.4, 16738.0], [31.5, 16758.0], [31.6, 16770.0], [31.7, 16783.0], [31.8, 16794.0], [31.9, 16816.0], [32.0, 16835.0], [32.1, 16857.0], [32.2, 16868.0], [32.3, 16889.0], [32.4, 16903.0], [32.5, 16920.0], [32.6, 16930.0], [32.7, 16950.0], [32.8, 16958.0], [32.9, 16978.0], [33.0, 16998.0], [33.1, 17029.0], [33.2, 17043.0], [33.3, 17053.0], [33.4, 17067.0], [33.5, 17085.0], [33.6, 17107.0], [33.7, 17136.0], [33.8, 17146.0], [33.9, 17154.0], [34.0, 17176.0], [34.1, 17203.0], [34.2, 17229.0], [34.3, 17239.0], [34.4, 17251.0], [34.5, 17263.0], [34.6, 17290.0], [34.7, 17302.0], [34.8, 17315.0], [34.9, 17321.0], [35.0, 17337.0], [35.1, 17361.0], [35.2, 17378.0], [35.3, 17401.0], [35.4, 17407.0], [35.5, 17419.0], [35.6, 17428.0], [35.7, 17458.0], [35.8, 17475.0], [35.9, 17478.0], [36.0, 17495.0], [36.1, 17526.0], [36.2, 17541.0], [36.3, 17560.0], [36.4, 17574.0], [36.5, 17589.0], [36.6, 17604.0], [36.7, 17620.0], [36.8, 17631.0], [36.9, 17646.0], [37.0, 17662.0], [37.1, 17673.0], [37.2, 17679.0], [37.3, 17693.0], [37.4, 17704.0], [37.5, 17730.0], [37.6, 17743.0], [37.7, 17752.0], [37.8, 17771.0], [37.9, 17783.0], [38.0, 17793.0], [38.1, 17796.0], [38.2, 17806.0], [38.3, 17822.0], [38.4, 17830.0], [38.5, 17841.0], [38.6, 17862.0], [38.7, 17871.0], [38.8, 17876.0], [38.9, 17886.0], [39.0, 17892.0], [39.1, 17905.0], [39.2, 17912.0], [39.3, 17937.0], [39.4, 17945.0], [39.5, 17959.0], [39.6, 17974.0], [39.7, 17997.0], [39.8, 18013.0], [39.9, 18035.0], [40.0, 18046.0], [40.1, 18060.0], [40.2, 18068.0], [40.3, 18078.0], [40.4, 18089.0], [40.5, 18103.0], [40.6, 18118.0], [40.7, 18133.0], [40.8, 18156.0], [40.9, 18170.0], [41.0, 18187.0], [41.1, 18199.0], [41.2, 18216.0], [41.3, 18225.0], [41.4, 18243.0], [41.5, 18258.0], [41.6, 18271.0], [41.7, 18285.0], [41.8, 18292.0], [41.9, 18308.0], [42.0, 18316.0], [42.1, 18324.0], [42.2, 18337.0], [42.3, 18351.0], [42.4, 18360.0], [42.5, 18374.0], [42.6, 18388.0], [42.7, 18400.0], [42.8, 18417.0], [42.9, 18434.0], [43.0, 18452.0], [43.1, 18466.0], [43.2, 18480.0], [43.3, 18495.0], [43.4, 18509.0], [43.5, 18526.0], [43.6, 18531.0], [43.7, 18546.0], [43.8, 18565.0], [43.9, 18576.0], [44.0, 18596.0], [44.1, 18604.0], [44.2, 18610.0], [44.3, 18619.0], [44.4, 18639.0], [44.5, 18650.0], [44.6, 18662.0], [44.7, 18679.0], [44.8, 18695.0], [44.9, 18706.0], [45.0, 18721.0], [45.1, 18743.0], [45.2, 18759.0], [45.3, 18782.0], [45.4, 18791.0], [45.5, 18801.0], [45.6, 18817.0], [45.7, 18823.0], [45.8, 18837.0], [45.9, 18847.0], [46.0, 18860.0], [46.1, 18867.0], [46.2, 18882.0], [46.3, 18895.0], [46.4, 18900.0], [46.5, 18909.0], [46.6, 18920.0], [46.7, 18924.0], [46.8, 18928.0], [46.9, 18935.0], [47.0, 18944.0], [47.1, 18954.0], [47.2, 18959.0], [47.3, 18971.0], [47.4, 18978.0], [47.5, 18982.0], [47.6, 18996.0], [47.7, 19004.0], [47.8, 19022.0], [47.9, 19029.0], [48.0, 19032.0], [48.1, 19041.0], [48.2, 19049.0], [48.3, 19056.0], [48.4, 19068.0], [48.5, 19086.0], [48.6, 19096.0], [48.7, 19112.0], [48.8, 19122.0], [48.9, 19125.0], [49.0, 19144.0], [49.1, 19150.0], [49.2, 19164.0], [49.3, 19171.0], [49.4, 19179.0], [49.5, 19190.0], [49.6, 19195.0], [49.7, 19208.0], [49.8, 19220.0], [49.9, 19246.0], [50.0, 19258.0], [50.1, 19272.0], [50.2, 19281.0], [50.3, 19305.0], [50.4, 19309.0], [50.5, 19314.0], [50.6, 19321.0], [50.7, 19332.0], [50.8, 19342.0], [50.9, 19351.0], [51.0, 19358.0], [51.1, 19367.0], [51.2, 19379.0], [51.3, 19390.0], [51.4, 19398.0], [51.5, 19408.0], [51.6, 19419.0], [51.7, 19424.0], [51.8, 19444.0], [51.9, 19456.0], [52.0, 19477.0], [52.1, 19499.0], [52.2, 19516.0], [52.3, 19524.0], [52.4, 19533.0], [52.5, 19548.0], [52.6, 19558.0], [52.7, 19563.0], [52.8, 19574.0], [52.9, 19584.0], [53.0, 19590.0], [53.1, 19602.0], [53.2, 19614.0], [53.3, 19628.0], [53.4, 19641.0], [53.5, 19653.0], [53.6, 19664.0], [53.7, 19672.0], [53.8, 19681.0], [53.9, 19698.0], [54.0, 19703.0], [54.1, 19715.0], [54.2, 19741.0], [54.3, 19746.0], [54.4, 19757.0], [54.5, 19765.0], [54.6, 19773.0], [54.7, 19787.0], [54.8, 19795.0], [54.9, 19802.0], [55.0, 19817.0], [55.1, 19822.0], [55.2, 19834.0], [55.3, 19843.0], [55.4, 19856.0], [55.5, 19868.0], [55.6, 19875.0], [55.7, 19884.0], [55.8, 19896.0], [55.9, 19908.0], [56.0, 19913.0], [56.1, 19922.0], [56.2, 19927.0], [56.3, 19936.0], [56.4, 19948.0], [56.5, 19957.0], [56.6, 19965.0], [56.7, 19969.0], [56.8, 19974.0], [56.9, 19981.0], [57.0, 19992.0], [57.1, 20005.0], [57.2, 20018.0], [57.3, 20025.0], [57.4, 20035.0], [57.5, 20044.0], [57.6, 20058.0], [57.7, 20066.0], [57.8, 20077.0], [57.9, 20084.0], [58.0, 20089.0], [58.1, 20095.0], [58.2, 20108.0], [58.3, 20127.0], [58.4, 20139.0], [58.5, 20147.0], [58.6, 20149.0], [58.7, 20172.0], [58.8, 20186.0], [58.9, 20189.0], [59.0, 20196.0], [59.1, 20215.0], [59.2, 20232.0], [59.3, 20249.0], [59.4, 20252.0], [59.5, 20265.0], [59.6, 20287.0], [59.7, 20294.0], [59.8, 20302.0], [59.9, 20315.0], [60.0, 20323.0], [60.1, 20332.0], [60.2, 20335.0], [60.3, 20345.0], [60.4, 20355.0], [60.5, 20363.0], [60.6, 20368.0], [60.7, 20376.0], [60.8, 20400.0], [60.9, 20408.0], [61.0, 20419.0], [61.1, 20427.0], [61.2, 20438.0], [61.3, 20451.0], [61.4, 20460.0], [61.5, 20464.0], [61.6, 20477.0], [61.7, 20483.0], [61.8, 20498.0], [61.9, 20505.0], [62.0, 20509.0], [62.1, 20518.0], [62.2, 20528.0], [62.3, 20535.0], [62.4, 20552.0], [62.5, 20571.0], [62.6, 20581.0], [62.7, 20592.0], [62.8, 20598.0], [62.9, 20612.0], [63.0, 20619.0], [63.1, 20632.0], [63.2, 20641.0], [63.3, 20659.0], [63.4, 20666.0], [63.5, 20673.0], [63.6, 20675.0], [63.7, 20682.0], [63.8, 20689.0], [63.9, 20703.0], [64.0, 20722.0], [64.1, 20727.0], [64.2, 20739.0], [64.3, 20743.0], [64.4, 20752.0], [64.5, 20765.0], [64.6, 20779.0], [64.7, 20793.0], [64.8, 20805.0], [64.9, 20814.0], [65.0, 20824.0], [65.1, 20830.0], [65.2, 20839.0], [65.3, 20846.0], [65.4, 20850.0], [65.5, 20863.0], [65.6, 20873.0], [65.7, 20894.0], [65.8, 20903.0], [65.9, 20917.0], [66.0, 20937.0], [66.1, 20957.0], [66.2, 20971.0], [66.3, 20990.0], [66.4, 20997.0], [66.5, 21005.0], [66.6, 21020.0], [66.7, 21029.0], [66.8, 21042.0], [66.9, 21057.0], [67.0, 21068.0], [67.1, 21087.0], [67.2, 21115.0], [67.3, 21127.0], [67.4, 21154.0], [67.5, 21167.0], [67.6, 21182.0], [67.7, 21193.0], [67.8, 21209.0], [67.9, 21226.0], [68.0, 21241.0], [68.1, 21269.0], [68.2, 21277.0], [68.3, 21290.0], [68.4, 21295.0], [68.5, 21308.0], [68.6, 21315.0], [68.7, 21330.0], [68.8, 21347.0], [68.9, 21375.0], [69.0, 21389.0], [69.1, 21410.0], [69.2, 21425.0], [69.3, 21434.0], [69.4, 21446.0], [69.5, 21456.0], [69.6, 21469.0], [69.7, 21483.0], [69.8, 21495.0], [69.9, 21520.0], [70.0, 21528.0], [70.1, 21544.0], [70.2, 21563.0], [70.3, 21573.0], [70.4, 21581.0], [70.5, 21599.0], [70.6, 21623.0], [70.7, 21647.0], [70.8, 21663.0], [70.9, 21673.0], [71.0, 21705.0], [71.1, 21731.0], [71.2, 21768.0], [71.3, 21787.0], [71.4, 21793.0], [71.5, 21806.0], [71.6, 21865.0], [71.7, 21895.0], [71.8, 21926.0], [71.9, 21935.0], [72.0, 21955.0], [72.1, 21985.0], [72.2, 22006.0], [72.3, 22017.0], [72.4, 22021.0], [72.5, 22033.0], [72.6, 22036.0], [72.7, 22044.0], [72.8, 22052.0], [72.9, 22066.0], [73.0, 22074.0], [73.1, 22089.0], [73.2, 22097.0], [73.3, 22107.0], [73.4, 22115.0], [73.5, 22125.0], [73.6, 22146.0], [73.7, 22154.0], [73.8, 22163.0], [73.9, 22171.0], [74.0, 22180.0], [74.1, 22216.0], [74.2, 22232.0], [74.3, 22243.0], [74.4, 22255.0], [74.5, 22273.0], [74.6, 22306.0], [74.7, 22324.0], [74.8, 22333.0], [74.9, 22354.0], [75.0, 22373.0], [75.1, 22390.0], [75.2, 22413.0], [75.3, 22437.0], [75.4, 22473.0], [75.5, 22490.0], [75.6, 22513.0], [75.7, 22534.0], [75.8, 22545.0], [75.9, 22557.0], [76.0, 22581.0], [76.1, 22597.0], [76.2, 22607.0], [76.3, 22628.0], [76.4, 22655.0], [76.5, 22671.0], [76.6, 22685.0], [76.7, 22699.0], [76.8, 22718.0], [76.9, 22740.0], [77.0, 22762.0], [77.1, 22771.0], [77.2, 22776.0], [77.3, 22799.0], [77.4, 22807.0], [77.5, 22815.0], [77.6, 22821.0], [77.7, 22830.0], [77.8, 22835.0], [77.9, 22848.0], [78.0, 22861.0], [78.1, 22896.0], [78.2, 22910.0], [78.3, 22925.0], [78.4, 22942.0], [78.5, 22957.0], [78.6, 22992.0], [78.7, 23011.0], [78.8, 23024.0], [78.9, 23041.0], [79.0, 23055.0], [79.1, 23075.0], [79.2, 23083.0], [79.3, 23102.0], [79.4, 23111.0], [79.5, 23136.0], [79.6, 23151.0], [79.7, 23172.0], [79.8, 23192.0], [79.9, 23215.0], [80.0, 23239.0], [80.1, 23270.0], [80.2, 23295.0], [80.3, 23318.0], [80.4, 23333.0], [80.5, 23343.0], [80.6, 23380.0], [80.7, 23402.0], [80.8, 23428.0], [80.9, 23439.0], [81.0, 23468.0], [81.1, 23494.0], [81.2, 23525.0], [81.3, 23540.0], [81.4, 23546.0], [81.5, 23559.0], [81.6, 23611.0], [81.7, 23621.0], [81.8, 23627.0], [81.9, 23660.0], [82.0, 23680.0], [82.1, 23703.0], [82.2, 23729.0], [82.3, 23748.0], [82.4, 23762.0], [82.5, 23786.0], [82.6, 23799.0], [82.7, 23811.0], [82.8, 23837.0], [82.9, 23849.0], [83.0, 23866.0], [83.1, 23885.0], [83.2, 23902.0], [83.3, 23921.0], [83.4, 23930.0], [83.5, 23935.0], [83.6, 23968.0], [83.7, 23977.0], [83.8, 24000.0], [83.9, 24026.0], [84.0, 24037.0], [84.1, 24050.0], [84.2, 24063.0], [84.3, 24085.0], [84.4, 24109.0], [84.5, 24141.0], [84.6, 24172.0], [84.7, 24180.0], [84.8, 24193.0], [84.9, 24206.0], [85.0, 24227.0], [85.1, 24242.0], [85.2, 24275.0], [85.3, 24329.0], [85.4, 24372.0], [85.5, 24380.0], [85.6, 24393.0], [85.7, 24445.0], [85.8, 24472.0], [85.9, 24489.0], [86.0, 24525.0], [86.1, 24540.0], [86.2, 24548.0], [86.3, 24565.0], [86.4, 24582.0], [86.5, 24600.0], [86.6, 24624.0], [86.7, 24637.0], [86.8, 24661.0], [86.9, 24690.0], [87.0, 24716.0], [87.1, 24738.0], [87.2, 24759.0], [87.3, 24778.0], [87.4, 24835.0], [87.5, 24914.0], [87.6, 24929.0], [87.7, 24954.0], [87.8, 24987.0], [87.9, 25021.0], [88.0, 25055.0], [88.1, 25069.0], [88.2, 25108.0], [88.3, 25129.0], [88.4, 25184.0], [88.5, 25228.0], [88.6, 25306.0], [88.7, 25323.0], [88.8, 25361.0], [88.9, 25403.0], [89.0, 25465.0], [89.1, 25565.0], [89.2, 25616.0], [89.3, 25688.0], [89.4, 25704.0], [89.5, 25733.0], [89.6, 25762.0], [89.7, 25810.0], [89.8, 25837.0], [89.9, 25885.0], [90.0, 25965.0], [90.1, 25992.0], [90.2, 26020.0], [90.3, 26058.0], [90.4, 26110.0], [90.5, 26172.0], [90.6, 26215.0], [90.7, 26239.0], [90.8, 26340.0], [90.9, 26368.0], [91.0, 26398.0], [91.1, 26451.0], [91.2, 26515.0], [91.3, 26586.0], [91.4, 26684.0], [91.5, 26747.0], [91.6, 26815.0], [91.7, 26929.0], [91.8, 27029.0], [91.9, 27187.0], [92.0, 27228.0], [92.1, 27288.0], [92.2, 27362.0], [92.3, 27437.0], [92.4, 27476.0], [92.5, 27569.0], [92.6, 27687.0], [92.7, 27706.0], [92.8, 27765.0], [92.9, 27834.0], [93.0, 27908.0], [93.1, 27951.0], [93.2, 28007.0], [93.3, 28028.0], [93.4, 28087.0], [93.5, 28118.0], [93.6, 28220.0], [93.7, 28317.0], [93.8, 28374.0], [93.9, 28418.0], [94.0, 28481.0], [94.1, 28519.0], [94.2, 28584.0], [94.3, 28653.0], [94.4, 28712.0], [94.5, 28761.0], [94.6, 28863.0], [94.7, 28924.0], [94.8, 28997.0], [94.9, 29065.0], [95.0, 29092.0], [95.1, 29259.0], [95.2, 29306.0], [95.3, 29387.0], [95.4, 29432.0], [95.5, 29494.0], [95.6, 29603.0], [95.7, 29655.0], [95.8, 29798.0], [95.9, 29906.0], [96.0, 29982.0], [96.1, 30116.0], [96.2, 30189.0], [96.3, 30315.0], [96.4, 30443.0], [96.5, 30604.0], [96.6, 30650.0], [96.7, 30737.0], [96.8, 31043.0], [96.9, 31265.0], [97.0, 31478.0], [97.1, 31682.0], [97.2, 31852.0], [97.3, 32005.0], [97.4, 32081.0], [97.5, 32316.0], [97.6, 32409.0], [97.7, 32488.0], [97.8, 32570.0], [97.9, 32664.0], [98.0, 32793.0], [98.1, 32932.0], [98.2, 33044.0], [98.3, 33187.0], [98.4, 33367.0], [98.5, 33719.0], [98.6, 33833.0], [98.7, 34324.0], [98.8, 35146.0], [98.9, 35403.0], [99.0, 35498.0], [99.1, 36250.0], [99.2, 36987.0], [99.3, 37727.0], [99.4, 39000.0], [99.5, 39584.0], [99.6, 39967.0], [99.7, 40224.0], [99.8, 40408.0], [99.9, 40581.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2500.0, "maxY": 66.0, "series": [{"data": [[33300.0, 3.0], [33700.0, 4.0], [32900.0, 3.0], [34100.0, 1.0], [36100.0, 1.0], [35300.0, 2.0], [35700.0, 2.0], [34900.0, 1.0], [38900.0, 1.0], [37300.0, 1.0], [36900.0, 2.0], [37700.0, 1.0], [38100.0, 1.0], [40500.0, 5.0], [39700.0, 2.0], [40100.0, 3.0], [2500.0, 1.0], [2800.0, 1.0], [3200.0, 1.0], [4500.0, 1.0], [5500.0, 1.0], [6000.0, 1.0], [6400.0, 1.0], [6900.0, 1.0], [7200.0, 9.0], [7300.0, 13.0], [7400.0, 5.0], [7600.0, 2.0], [7500.0, 22.0], [7900.0, 12.0], [7800.0, 4.0], [8000.0, 5.0], [8100.0, 3.0], [8600.0, 10.0], [8400.0, 12.0], [8200.0, 7.0], [8700.0, 16.0], [8300.0, 8.0], [8500.0, 2.0], [8800.0, 7.0], [8900.0, 8.0], [9200.0, 16.0], [9000.0, 15.0], [9100.0, 20.0], [9600.0, 9.0], [9700.0, 14.0], [9300.0, 10.0], [9500.0, 8.0], [9400.0, 9.0], [9900.0, 10.0], [10100.0, 15.0], [10200.0, 6.0], [9800.0, 11.0], [10000.0, 6.0], [10600.0, 7.0], [10400.0, 38.0], [10300.0, 13.0], [10700.0, 13.0], [10500.0, 24.0], [11100.0, 19.0], [11200.0, 10.0], [11000.0, 15.0], [10800.0, 18.0], [10900.0, 11.0], [11400.0, 15.0], [11700.0, 14.0], [11500.0, 11.0], [11300.0, 14.0], [11600.0, 11.0], [11800.0, 10.0], [11900.0, 12.0], [12200.0, 31.0], [12000.0, 16.0], [12100.0, 22.0], [12600.0, 12.0], [12400.0, 13.0], [12300.0, 11.0], [12500.0, 16.0], [12700.0, 8.0], [12800.0, 10.0], [13100.0, 12.0], [13000.0, 13.0], [13300.0, 10.0], [13200.0, 22.0], [12900.0, 12.0], [13400.0, 13.0], [13700.0, 37.0], [13500.0, 21.0], [13600.0, 24.0], [13800.0, 18.0], [14000.0, 32.0], [14100.0, 22.0], [14200.0, 25.0], [14300.0, 27.0], [13900.0, 19.0], [14400.0, 26.0], [14600.0, 24.0], [14800.0, 23.0], [14500.0, 22.0], [14700.0, 21.0], [14900.0, 21.0], [15200.0, 32.0], [15100.0, 34.0], [15300.0, 28.0], [15000.0, 15.0], [15400.0, 33.0], [15600.0, 23.0], [15800.0, 27.0], [15700.0, 25.0], [15500.0, 29.0], [15900.0, 30.0], [16100.0, 32.0], [16300.0, 21.0], [16200.0, 23.0], [16000.0, 30.0], [16800.0, 26.0], [16400.0, 18.0], [17000.0, 29.0], [17400.0, 39.0], [17200.0, 30.0], [16600.0, 36.0], [18200.0, 39.0], [17800.0, 51.0], [17600.0, 43.0], [18000.0, 39.0], [18400.0, 33.0], [19200.0, 33.0], [19400.0, 36.0], [19000.0, 52.0], [18800.0, 46.0], [18600.0, 42.0], [20200.0, 40.0], [20000.0, 56.0], [20400.0, 55.0], [19800.0, 53.0], [19600.0, 45.0], [21400.0, 41.0], [20600.0, 55.0], [20800.0, 51.0], [21000.0, 37.0], [21200.0, 36.0], [22200.0, 25.0], [21800.0, 13.0], [22400.0, 21.0], [22000.0, 56.0], [21600.0, 24.0], [22600.0, 30.0], [22800.0, 45.0], [23200.0, 20.0], [23400.0, 23.0], [23000.0, 33.0], [23600.0, 25.0], [23800.0, 28.0], [24400.0, 17.0], [24000.0, 30.0], [24200.0, 21.0], [24800.0, 7.0], [24600.0, 21.0], [25000.0, 18.0], [25400.0, 6.0], [25200.0, 7.0], [26000.0, 13.0], [26200.0, 13.0], [25800.0, 11.0], [25600.0, 9.0], [26400.0, 7.0], [26600.0, 5.0], [27400.0, 9.0], [27000.0, 8.0], [27600.0, 6.0], [26800.0, 5.0], [27200.0, 9.0], [27800.0, 6.0], [28000.0, 14.0], [28600.0, 9.0], [28200.0, 7.0], [28400.0, 9.0], [29600.0, 7.0], [29000.0, 10.0], [28800.0, 5.0], [29400.0, 9.0], [29200.0, 7.0], [30200.0, 3.0], [30600.0, 9.0], [29800.0, 5.0], [30400.0, 3.0], [30000.0, 1.0], [30800.0, 3.0], [31000.0, 3.0], [31600.0, 2.0], [31200.0, 4.0], [31400.0, 4.0], [32200.0, 1.0], [32400.0, 6.0], [32600.0, 3.0], [31800.0, 3.0], [32000.0, 7.0], [33600.0, 1.0], [32800.0, 3.0], [33200.0, 2.0], [35600.0, 1.0], [38400.0, 1.0], [38000.0, 1.0], [40800.0, 2.0], [40400.0, 2.0], [39200.0, 1.0], [33100.0, 2.0], [33500.0, 1.0], [34300.0, 1.0], [34700.0, 1.0], [33900.0, 1.0], [35100.0, 4.0], [36700.0, 2.0], [39500.0, 2.0], [40300.0, 3.0], [39900.0, 2.0], [39100.0, 1.0], [17300.0, 31.0], [16700.0, 35.0], [16900.0, 35.0], [17100.0, 27.0], [16500.0, 42.0], [17500.0, 27.0], [18300.0, 43.0], [17700.0, 38.0], [18100.0, 34.0], [17900.0, 32.0], [19300.0, 59.0], [18500.0, 36.0], [18900.0, 66.0], [19100.0, 52.0], [18700.0, 34.0], [20300.0, 53.0], [19900.0, 63.0], [20100.0, 45.0], [19700.0, 46.0], [19500.0, 50.0], [20900.0, 36.0], [20500.0, 49.0], [20700.0, 46.0], [21300.0, 30.0], [21500.0, 36.0], [21100.0, 32.0], [21700.0, 25.0], [21900.0, 24.0], [22500.0, 30.0], [22100.0, 42.0], [22300.0, 32.0], [22900.0, 24.0], [23100.0, 30.0], [22700.0, 31.0], [23500.0, 24.0], [23300.0, 23.0], [23700.0, 28.0], [24100.0, 24.0], [24300.0, 19.0], [23900.0, 34.0], [24500.0, 29.0], [25500.0, 10.0], [25100.0, 15.0], [25300.0, 16.0], [24700.0, 22.0], [24900.0, 18.0], [26100.0, 7.0], [25700.0, 17.0], [25900.0, 12.0], [26500.0, 10.0], [26300.0, 12.0], [26900.0, 5.0], [27500.0, 6.0], [27300.0, 7.0], [26700.0, 6.0], [27100.0, 2.0], [27900.0, 9.0], [28500.0, 9.0], [27700.0, 12.0], [28100.0, 6.0], [28300.0, 9.0], [29500.0, 4.0], [29300.0, 8.0], [28700.0, 10.0], [28900.0, 8.0], [29100.0, 2.0], [30700.0, 4.0], [30100.0, 9.0], [29900.0, 6.0], [30300.0, 7.0], [29700.0, 4.0], [30500.0, 1.0], [31500.0, 2.0], [31700.0, 3.0], [31300.0, 2.0], [32700.0, 5.0], [32500.0, 8.0], [32300.0, 6.0], [32100.0, 2.0], [31900.0, 3.0], [33400.0, 2.0], [33000.0, 8.0], [34200.0, 2.0], [33800.0, 2.0], [36600.0, 1.0], [35400.0, 8.0], [36200.0, 1.0], [37000.0, 2.0], [37400.0, 1.0], [39400.0, 1.0], [39800.0, 2.0], [40200.0, 2.0], [40600.0, 2.0], [39000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 40800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5190.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5190.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 28.857142857142836, "minX": 1.6019028E12, "maxY": 40.0, "series": [{"data": [[1.60190298E12, 40.0], [1.6019052E12, 40.0], [1.60190328E12, 40.0], [1.6019049E12, 40.0], [1.6019046E12, 40.0], [1.6019043E12, 40.0], [1.60190448E12, 40.0], [1.60190418E12, 40.0], [1.60190388E12, 40.0], [1.60190358E12, 40.0], [1.60190376E12, 40.0], [1.60190346E12, 40.0], [1.60190286E12, 40.0], [1.60190508E12, 40.0], [1.60190316E12, 40.0], [1.60190478E12, 40.0], [1.60190496E12, 40.0], [1.60190304E12, 40.0], [1.60190466E12, 40.0], [1.60190436E12, 40.0], [1.60190406E12, 40.0], [1.60190424E12, 40.0], [1.60190394E12, 40.0], [1.60190364E12, 40.0], [1.60190526E12, 40.0], [1.60190334E12, 40.0], [1.60190322E12, 40.0], [1.60190352E12, 40.0], [1.60190514E12, 40.0], [1.60190484E12, 40.0], [1.60190292E12, 40.0], [1.60190454E12, 40.0], [1.60190472E12, 40.0], [1.6019028E12, 40.0], [1.60190442E12, 40.0], [1.60190412E12, 40.0], [1.60190382E12, 40.0], [1.601904E12, 40.0], [1.6019037E12, 40.0], [1.6019031E12, 40.0], [1.60190532E12, 28.857142857142836], [1.6019034E12, 40.0], [1.60190502E12, 40.0]], "isOverall": false, "label": "JMeter Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190532E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19179.46001552798, "minX": 1.0, "maxY": 27092.0, "series": [{"data": [[33.0, 27092.0], [32.0, 25798.0], [2.0, 22114.0], [35.0, 26925.0], [34.0, 26778.0], [37.0, 26667.0], [36.0, 26637.0], [39.0, 26929.0], [38.0, 26716.0], [40.0, 19179.46001552798], [3.0, 22801.0], [4.0, 23496.0], [5.0, 23732.0], [6.0, 24513.0], [7.0, 24391.0], [8.0, 22599.0], [9.0, 23041.0], [10.0, 22817.0], [11.0, 23074.0], [12.0, 22851.0], [13.0, 23108.0], [14.0, 23545.0], [15.0, 23683.0], [16.0, 24014.0], [1.0, 21003.0], [17.0, 24462.0], [18.0, 25094.0], [19.0, 25056.0], [20.0, 25306.0], [21.0, 24524.0], [22.0, 23836.0], [23.0, 24026.0], [24.0, 24461.0], [25.0, 24445.0], [26.0, 24485.0], [27.0, 24755.0], [28.0, 25055.0], [29.0, 25164.0], [30.0, 25551.0], [31.0, 26451.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[39.84973993450205, 19219.72124831442]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 40.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23.083333333333332, "minX": 1.6019028E12, "maxY": 867993.3, "series": [{"data": [[1.60190298E12, 493731.86666666664], [1.6019052E12, 614289.4166666666], [1.60190328E12, 416229.51666666666], [1.6019049E12, 558650.65], [1.6019046E12, 525890.1666666666], [1.6019043E12, 448661.26666666666], [1.60190448E12, 268154.93333333335], [1.60190418E12, 578854.3], [1.60190388E12, 556379.7333333333], [1.60190358E12, 700062.2], [1.60190376E12, 638321.0833333334], [1.60190346E12, 651425.7666666667], [1.60190286E12, 738272.6166666667], [1.60190508E12, 517505.1], [1.60190316E12, 318016.8], [1.60190478E12, 574071.4666666667], [1.60190496E12, 530182.7666666667], [1.60190304E12, 516588.68333333335], [1.60190466E12, 742668.5166666667], [1.60190436E12, 658452.8833333333], [1.60190406E12, 559163.5666666667], [1.60190424E12, 487423.98333333334], [1.60190394E12, 531697.5833333334], [1.60190364E12, 723712.15], [1.60190526E12, 487488.56666666665], [1.60190334E12, 648985.35], [1.60190322E12, 390844.0], [1.60190352E12, 675546.85], [1.60190514E12, 551979.85], [1.60190484E12, 617705.3166666667], [1.60190292E12, 609848.4333333333], [1.60190454E12, 500461.1666666667], [1.60190472E12, 867993.3], [1.6019028E12, 14667.716666666667], [1.60190442E12, 423684.11666666664], [1.60190412E12, 672447.9166666666], [1.60190382E12, 663989.05], [1.601904E12, 565682.9833333333], [1.6019037E12, 533922.7666666667], [1.6019031E12, 658890.5333333333], [1.60190532E12, 303597.9], [1.6019034E12, 829256.6666666666], [1.60190502E12, 607295.1166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60190298E12, 975.05], [1.6019052E12, 785.6666666666666], [1.60190328E12, 1096.7166666666667], [1.6019049E12, 1149.9166666666667], [1.6019046E12, 899.7333333333333], [1.6019043E12, 718.9666666666667], [1.60190448E12, 988.2166666666667], [1.60190418E12, 734.5666666666667], [1.60190388E12, 1219.2], [1.60190358E12, 1014.7666666666667], [1.60190376E12, 877.1], [1.60190346E12, 1041.5], [1.60190286E12, 769.5], [1.60190508E12, 1224.9666666666667], [1.60190316E12, 652.3], [1.60190478E12, 1113.5666666666666], [1.60190496E12, 880.05], [1.60190304E12, 748.4333333333333], [1.60190466E12, 809.8833333333333], [1.60190436E12, 983.8], [1.60190406E12, 743.45], [1.60190424E12, 1015.0166666666667], [1.60190394E12, 746.35], [1.60190364E12, 899.1], [1.60190526E12, 772.4166666666666], [1.60190334E12, 823.9166666666666], [1.60190322E12, 1245.25], [1.60190352E12, 1162.7], [1.60190514E12, 1090.8333333333333], [1.60190484E12, 1047.1833333333334], [1.60190292E12, 699.6333333333333], [1.60190454E12, 1221.4], [1.60190472E12, 842.9333333333333], [1.6019028E12, 23.083333333333332], [1.60190442E12, 636.3833333333333], [1.60190412E12, 753.9333333333333], [1.60190382E12, 1187.4166666666667], [1.601904E12, 790.1666666666666], [1.6019037E12, 844.1666666666666], [1.6019031E12, 1073.45], [1.60190532E12, 534.3166666666667], [1.6019034E12, 819.9833333333333], [1.60190502E12, 927.0666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190532E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2874.0, "minX": 1.6019028E12, "maxY": 26818.602040816328, "series": [{"data": [[1.60190298E12, 16828.007194244612], [1.6019052E12, 21101.807692307684], [1.60190328E12, 14857.886666666664], [1.6019049E12, 15408.651315789473], [1.6019046E12, 17270.16923076923], [1.6019043E12, 24089.376237623765], [1.60190448E12, 20377.840579710137], [1.60190418E12, 25719.451923076915], [1.60190388E12, 15910.092592592579], [1.60190358E12, 16361.044776119408], [1.60190376E12, 20456.263157894733], [1.60190346E12, 19198.576642335756], [1.60190286E12, 19617.352941176476], [1.60190508E12, 14540.629629629637], [1.60190316E12, 22970.999999999996], [1.60190478E12, 16470.65986394557], [1.60190496E12, 21442.879310344826], [1.60190304E12, 22308.179245283023], [1.60190466E12, 23962.11320754716], [1.60190436E12, 18344.353383458645], [1.60190406E12, 25418.886597938144], [1.60190424E12, 16554.145833333336], [1.60190394E12, 20757.12121212122], [1.60190364E12, 19265.11864406779], [1.60190526E12, 24201.057692307695], [1.60190334E12, 19721.669642857138], [1.60190322E12, 17058.660818713463], [1.60190352E12, 15728.1038961039], [1.60190514E12, 16968.32638888888], [1.60190484E12, 17575.608695652176], [1.60190292E12, 26818.602040816328], [1.60190454E12, 13375.271604938278], [1.60190472E12, 21634.29729729729], [1.6019028E12, 2874.0], [1.60190442E12, 24723.37931034483], [1.60190412E12, 21231.640776699034], [1.60190382E12, 15120.292993630577], [1.601904E12, 24027.990566037734], [1.6019037E12, 22584.026785714297], [1.6019031E12, 16982.089655172418], [1.60190532E12, 24564.457142857143], [1.6019034E12, 22854.138888888894], [1.60190502E12, 19308.190082644636]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60190532E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2870.6666666666665, "minX": 1.6019028E12, "maxY": 26815.551020408166, "series": [{"data": [[1.60190298E12, 16826.316546762584], [1.6019052E12, 21098.961538461546], [1.60190328E12, 14856.40666666667], [1.6019049E12, 15406.769736842101], [1.6019046E12, 17268.18461538462], [1.6019043E12, 24087.227722772277], [1.60190448E12, 20376.94927536232], [1.60190418E12, 25716.576923076937], [1.60190388E12, 15908.481481481487], [1.60190358E12, 16358.46268656717], [1.60190376E12, 20453.456140350878], [1.60190346E12, 19196.16788321167], [1.60190286E12, 19613.980392156853], [1.60190508E12, 14539.216049382723], [1.60190316E12, 22969.23333333333], [1.60190478E12, 16468.843537414963], [1.60190496E12, 21440.577586206902], [1.60190304E12, 22305.877358490572], [1.60190466E12, 23958.537735849055], [1.60190436E12, 18341.86466165414], [1.60190406E12, 25416.01030927835], [1.60190424E12, 16552.451388888887], [1.60190394E12, 20754.595959595947], [1.60190364E12, 19262.08474576271], [1.60190526E12, 24198.50961538461], [1.60190334E12, 19718.678571428576], [1.60190322E12, 17057.53216374269], [1.60190352E12, 15725.785714285716], [1.60190514E12, 16966.3263888889], [1.60190484E12, 17573.594202898552], [1.60190292E12, 26815.551020408166], [1.60190454E12, 13373.814814814818], [1.60190472E12, 21630.342342342337], [1.6019028E12, 2870.6666666666665], [1.60190442E12, 24720.908045977027], [1.60190412E12, 21228.310679611655], [1.60190382E12, 15118.203821656054], [1.601904E12, 24025.24528301887], [1.6019037E12, 22581.633928571435], [1.6019031E12, 16979.779310344835], [1.60190532E12, 24562.257142857146], [1.6019034E12, 22850.09259259259], [1.60190502E12, 19305.776859504134]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60190532E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11864406779661014, "minX": 1.6019028E12, "maxY": 59.0, "series": [{"data": [[1.60190298E12, 0.38848920863309355], [1.6019052E12, 0.32692307692307687], [1.60190328E12, 0.20666666666666653], [1.6019049E12, 0.19736842105263153], [1.6019046E12, 0.24615384615384614], [1.6019043E12, 0.3168316831683167], [1.60190448E12, 0.2536231884057972], [1.60190418E12, 0.31730769230769235], [1.60190388E12, 0.21604938271604934], [1.60190358E12, 0.21641791044776118], [1.60190376E12, 0.2894736842105263], [1.60190346E12, 0.2846715328467154], [1.60190286E12, 5.921568627450982], [1.60190508E12, 0.20370370370370378], [1.60190316E12, 0.3444444444444443], [1.60190478E12, 0.1496598639455782], [1.60190496E12, 0.25000000000000017], [1.60190304E12, 0.3113207547169812], [1.60190466E12, 0.2924528301886793], [1.60190436E12, 0.13533834586466156], [1.60190406E12, 0.22680412371134026], [1.60190424E12, 0.21527777777777785], [1.60190394E12, 0.27272727272727276], [1.60190364E12, 0.11864406779661014], [1.60190526E12, 0.21153846153846154], [1.60190334E12, 0.37500000000000017], [1.60190322E12, 0.3274853801169592], [1.60190352E12, 0.2597402597402596], [1.60190514E12, 0.2291666666666667], [1.60190484E12, 0.23913043478260881], [1.60190292E12, 0.489795918367347], [1.60190454E12, 0.19753086419753088], [1.60190472E12, 0.24324324324324326], [1.6019028E12, 59.0], [1.60190442E12, 0.19540229885057472], [1.60190412E12, 0.3689320388349513], [1.60190382E12, 0.22929936305732487], [1.601904E12, 0.18867924528301894], [1.6019037E12, 0.3660714285714285], [1.6019031E12, 0.2000000000000001], [1.60190532E12, 0.18571428571428572], [1.6019034E12, 0.3611111111111112], [1.60190502E12, 0.14876033057851248]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60190532E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2533.0, "minX": 1.6019028E12, "maxY": 40891.0, "series": [{"data": [[1.60190298E12, 20379.0], [1.6019052E12, 25878.0], [1.60190328E12, 23762.0], [1.6019049E12, 21647.0], [1.6019046E12, 26020.0], [1.6019043E12, 33367.0], [1.60190448E12, 32648.0], [1.60190418E12, 40891.0], [1.60190388E12, 30618.0], [1.60190358E12, 25106.0], [1.60190376E12, 25197.0], [1.60190346E12, 22837.0], [1.60190286E12, 27438.0], [1.60190508E12, 23187.0], [1.60190316E12, 33253.0], [1.60190478E12, 23170.0], [1.60190496E12, 25026.0], [1.60190304E12, 29134.0], [1.60190466E12, 27459.0], [1.60190436E12, 21285.0], [1.60190406E12, 32324.0], [1.60190424E12, 20769.0], [1.60190394E12, 28933.0], [1.60190364E12, 24096.0], [1.60190526E12, 29709.0], [1.60190334E12, 23876.0], [1.60190322E12, 33551.0], [1.60190352E12, 21630.0], [1.60190514E12, 27338.0], [1.60190484E12, 23561.0], [1.60190292E12, 36654.0], [1.60190454E12, 18394.0], [1.60190472E12, 24241.0], [1.6019028E12, 3258.0], [1.60190442E12, 39135.0], [1.60190412E12, 28543.0], [1.60190382E12, 23839.0], [1.601904E12, 30535.0], [1.6019037E12, 27233.0], [1.6019031E12, 20148.0], [1.60190532E12, 27092.0], [1.6019034E12, 25361.0], [1.60190502E12, 20859.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60190298E12, 13521.339994692802], [1.6019052E12, 15579.0], [1.60190328E12, 7747.879988479614], [1.6019049E12, 10523.130999890565], [1.6019046E12, 12819.756994284391], [1.6019043E12, 15844.0], [1.60190448E12, 9415.262999569177], [1.60190418E12, 12128.0], [1.60190388E12, 7854.283997979164], [1.60190358E12, 9909.239963436126], [1.60190376E12, 17180.67499163747], [1.60190346E12, 12893.347987036705], [1.60190286E12, 4554.0], [1.60190508E12, 8572.916986359358], [1.60190316E12, 16197.0], [1.60190478E12, 9688.199996471405], [1.60190496E12, 17820.055995759965], [1.60190304E12, 15300.0], [1.60190466E12, 21083.0], [1.60190436E12, 14974.89599629402], [1.60190406E12, 19983.0], [1.60190424E12, 14020.634996300936], [1.60190394E12, 13251.0], [1.60190364E12, 13468.45999262333], [1.60190526E12, 19169.0], [1.60190334E12, 15233.0], [1.60190322E12, 7272.643999876976], [1.60190352E12, 8417.144998115302], [1.60190514E12, 8173.909997856617], [1.60190484E12, 9171.50199993372], [1.60190292E12, 13511.0], [1.60190454E12, 8036.466999961138], [1.60190472E12, 18881.207999305727], [1.6019028E12, 2533.0], [1.60190442E12, 13960.0], [1.60190412E12, 18362.0], [1.60190382E12, 8511.91599706173], [1.601904E12, 20089.0], [1.6019037E12, 17806.375998744963], [1.6019031E12, 13458.771996588706], [1.60190532E12, 21003.0], [1.6019034E12, 19549.0], [1.60190502E12, 16579.281991012096]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60190298E12, 13541.374002122879], [1.6019052E12, 15596.41950441599], [1.60190328E12, 7791.3680046081545], [1.6019049E12, 10523.544100043773], [1.6019046E12, 12841.332702286243], [1.6019043E12, 15844.911400904655], [1.60190448E12, 9416.889300172328], [1.60190418E12, 12130.133000540733], [1.60190388E12, 7861.9124008083345], [1.60190358E12, 10047.264014625549], [1.60190376E12, 17212.242503345013], [1.60190346E12, 12942.282805185318], [1.60190286E12, 4574.172810058593], [1.60190508E12, 8624.408705456257], [1.60190316E12, 16197.0], [1.60190478E12, 9701.520001411438], [1.60190496E12, 17836.061601696016], [1.60190304E12, 15318.086503112316], [1.60190466E12, 21090.709001326562], [1.60190436E12, 14988.88560148239], [1.60190406E12, 19983.0], [1.60190424E12, 14034.598501479626], [1.60190394E12, 13251.0], [1.60190364E12, 13496.306002950669], [1.60190526E12, 19169.039500010014], [1.60190334E12, 15233.0], [1.60190322E12, 7273.108400049209], [1.60190352E12, 8424.25950075388], [1.60190514E12, 8182.001000857354], [1.60190484E12, 9171.752200026513], [1.60190292E12, 13511.0], [1.60190454E12, 8036.613700015545], [1.60190472E12, 18883.82880027771], [1.6019028E12, 2533.0], [1.60190442E12, 13960.0], [1.60190412E12, 18362.6512002182], [1.60190382E12, 8523.007601175308], [1.601904E12, 20094.811401000024], [1.6019037E12, 17811.113600502013], [1.6019031E12, 13471.649201364517], [1.60190532E12, 21003.0], [1.6019034E12, 19560.78590154886], [1.60190502E12, 16613.21020359516]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60190298E12, 13532.469997346401], [1.6019052E12, 15579.0], [1.60190328E12, 7772.039994239807], [1.6019049E12, 10523.360499945284], [1.6019046E12, 12831.743497142195], [1.6019043E12, 15844.0], [1.60190448E12, 9416.16649978459], [1.60190418E12, 12128.0], [1.60190388E12, 7858.521998989582], [1.60190358E12, 9985.919981718063], [1.60190376E12, 17198.212495818734], [1.60190346E12, 12920.533993518353], [1.60190286E12, 4554.0], [1.60190508E12, 8601.523493179679], [1.60190316E12, 16197.0], [1.60190478E12, 9695.599998235703], [1.60190496E12, 17828.947997879983], [1.60190304E12, 15305.032496109605], [1.60190466E12, 21085.1449983418], [1.60190436E12, 14982.667998147012], [1.60190406E12, 19983.0], [1.60190424E12, 14028.392498150468], [1.60190394E12, 13251.0], [1.60190364E12, 13483.929996311665], [1.60190526E12, 19169.0], [1.60190334E12, 15233.0], [1.60190322E12, 7272.901999938488], [1.60190352E12, 8421.09749905765], [1.60190514E12, 8178.4049989283085], [1.60190484E12, 9171.64099996686], [1.60190292E12, 13511.0], [1.60190454E12, 8036.5484999805685], [1.60190472E12, 18882.66399965286], [1.6019028E12, 2533.0], [1.60190442E12, 13960.0], [1.60190412E12, 18362.0], [1.60190382E12, 8518.077998530865], [1.601904E12, 20090.61699874997], [1.6019037E12, 17809.007999372483], [1.6019031E12, 13465.925998294353], [1.60190532E12, 21003.0], [1.6019034E12, 19554.28949806392], [1.60190502E12, 16598.13099550605]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60190298E12, 13480.0], [1.6019052E12, 15579.0], [1.60190328E12, 7633.0], [1.6019049E12, 10522.0], [1.6019046E12, 12787.0], [1.6019043E12, 15844.0], [1.60190448E12, 9412.0], [1.60190418E12, 12128.0], [1.60190388E12, 7830.0], [1.60190358E12, 9665.0], [1.60190376E12, 17170.0], [1.60190346E12, 12798.0], [1.60190286E12, 4554.0], [1.60190508E12, 8409.0], [1.60190316E12, 16197.0], [1.60190478E12, 9655.0], [1.60190496E12, 17812.0], [1.60190304E12, 15300.0], [1.60190466E12, 21083.0], [1.60190436E12, 14951.0], [1.60190406E12, 19983.0], [1.60190424E12, 13988.0], [1.60190394E12, 13251.0], [1.60190364E12, 13450.0], [1.60190526E12, 19169.0], [1.60190334E12, 15233.0], [1.60190322E12, 7271.0], [1.60190352E12, 8397.0], [1.60190514E12, 8155.0], [1.60190484E12, 9171.0], [1.60190292E12, 13511.0], [1.60190454E12, 8036.0], [1.60190472E12, 18881.0], [1.6019028E12, 2533.0], [1.60190442E12, 13960.0], [1.60190412E12, 18362.0], [1.60190382E12, 8479.0], [1.601904E12, 20089.0], [1.6019037E12, 17806.0], [1.6019031E12, 13428.0], [1.60190532E12, 21003.0], [1.6019034E12, 19549.0], [1.60190502E12, 16549.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60190298E12, 17403.0], [1.6019052E12, 21497.5], [1.60190328E12, 13763.5], [1.6019049E12, 15791.0], [1.6019046E12, 16719.0], [1.6019043E12, 23885.0], [1.60190448E12, 19209.0], [1.60190418E12, 22515.5], [1.60190388E12, 11272.0], [1.60190358E12, 15284.5], [1.60190376E12, 19666.5], [1.60190346E12, 19046.0], [1.60190286E12, 21109.5], [1.60190508E12, 13348.0], [1.60190316E12, 22287.5], [1.60190478E12, 17426.0], [1.60190496E12, 20982.5], [1.60190304E12, 20012.5], [1.60190466E12, 23867.5], [1.60190436E12, 17878.0], [1.60190406E12, 23707.0], [1.60190424E12, 16274.0], [1.60190394E12, 20665.0], [1.60190364E12, 19822.0], [1.60190526E12, 24945.0], [1.60190334E12, 19927.0], [1.60190322E12, 18576.0], [1.60190352E12, 15581.0], [1.60190514E12, 15493.0], [1.60190484E12, 17908.0], [1.60190292E12, 28090.0], [1.60190454E12, 14853.0], [1.60190472E12, 21668.0], [1.6019028E12, 2831.0], [1.60190442E12, 22573.0], [1.60190412E12, 20841.0], [1.60190382E12, 14254.0], [1.601904E12, 22871.5], [1.6019037E12, 22528.0], [1.6019031E12, 17069.0], [1.60190532E12, 24473.5], [1.6019034E12, 23006.5], [1.60190502E12, 19628.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190532E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12325.0, "minX": 1.0, "maxY": 22080.0, "series": [{"data": [[1.0, 21516.0], [2.0, 20204.5], [4.0, 18548.5], [5.0, 12325.0], [3.0, 19146.5], [6.0, 14515.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 22080.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12325.0, "minX": 1.0, "maxY": 22080.0, "series": [{"data": [[1.0, 21504.0], [2.0, 20203.0], [4.0, 18547.0], [5.0, 12325.0], [3.0, 19145.0], [6.0, 14515.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 22080.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.6019028E12, "maxY": 2.85, "series": [{"data": [[1.60190298E12, 2.316666666666667], [1.6019052E12, 1.7333333333333334], [1.60190328E12, 2.5], [1.6019049E12, 2.533333333333333], [1.6019046E12, 2.1666666666666665], [1.6019043E12, 1.6833333333333333], [1.60190448E12, 2.3], [1.60190418E12, 1.7333333333333334], [1.60190388E12, 2.7], [1.60190358E12, 2.2333333333333334], [1.60190376E12, 1.9], [1.60190346E12, 2.283333333333333], [1.60190286E12, 1.7], [1.60190508E12, 2.7], [1.60190316E12, 1.5], [1.60190478E12, 2.45], [1.60190496E12, 1.9333333333333333], [1.60190304E12, 1.7666666666666666], [1.60190466E12, 1.7666666666666666], [1.60190436E12, 2.216666666666667], [1.60190406E12, 1.6166666666666667], [1.60190424E12, 2.4], [1.60190394E12, 1.65], [1.60190364E12, 1.9666666666666666], [1.60190526E12, 1.7333333333333334], [1.60190334E12, 1.8666666666666667], [1.60190322E12, 2.85], [1.60190352E12, 2.566666666666667], [1.60190514E12, 2.4], [1.60190484E12, 2.3], [1.60190292E12, 1.6333333333333333], [1.60190454E12, 2.7], [1.60190472E12, 1.85], [1.6019028E12, 0.7166666666666667], [1.60190442E12, 1.45], [1.60190412E12, 1.7166666666666666], [1.60190382E12, 2.6166666666666667], [1.601904E12, 1.7666666666666666], [1.6019037E12, 1.8666666666666667], [1.6019031E12, 2.4166666666666665], [1.60190532E12, 0.5], [1.6019034E12, 1.8], [1.60190502E12, 2.0166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190532E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6019028E12, "maxY": 2.85, "series": [{"data": [[1.60190298E12, 2.316666666666667], [1.6019052E12, 1.7333333333333334], [1.60190328E12, 2.5], [1.6019049E12, 2.533333333333333], [1.6019046E12, 2.1666666666666665], [1.6019043E12, 1.6833333333333333], [1.60190448E12, 2.3], [1.60190418E12, 1.7333333333333334], [1.60190388E12, 2.7], [1.60190358E12, 2.2333333333333334], [1.60190376E12, 1.9], [1.60190346E12, 2.283333333333333], [1.60190286E12, 1.7], [1.60190508E12, 2.7], [1.60190316E12, 1.5], [1.60190478E12, 2.45], [1.60190496E12, 1.9333333333333333], [1.60190304E12, 1.7666666666666666], [1.60190466E12, 1.7666666666666666], [1.60190436E12, 2.216666666666667], [1.60190406E12, 1.6166666666666667], [1.60190424E12, 2.4], [1.60190394E12, 1.65], [1.60190364E12, 1.9666666666666666], [1.60190526E12, 1.7333333333333334], [1.60190334E12, 1.8666666666666667], [1.60190322E12, 2.85], [1.60190352E12, 2.566666666666667], [1.60190514E12, 2.4], [1.60190484E12, 2.3], [1.60190292E12, 1.6333333333333333], [1.60190454E12, 2.7], [1.60190472E12, 1.85], [1.6019028E12, 0.05], [1.60190442E12, 1.45], [1.60190412E12, 1.7166666666666666], [1.60190382E12, 2.6166666666666667], [1.601904E12, 1.7666666666666666], [1.6019037E12, 1.85], [1.6019031E12, 2.4166666666666665], [1.60190532E12, 1.1666666666666667], [1.6019034E12, 1.8], [1.60190502E12, 2.0166666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6019037E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60190532E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6019028E12, "maxY": 2.85, "series": [{"data": [[1.60190298E12, 2.316666666666667], [1.6019052E12, 1.7333333333333334], [1.60190328E12, 2.5], [1.6019049E12, 2.533333333333333], [1.6019046E12, 2.1666666666666665], [1.6019043E12, 1.6833333333333333], [1.60190448E12, 2.3], [1.60190418E12, 1.7333333333333334], [1.60190388E12, 2.7], [1.60190358E12, 2.2333333333333334], [1.60190376E12, 1.9], [1.60190346E12, 2.283333333333333], [1.60190286E12, 1.7], [1.60190508E12, 2.7], [1.60190316E12, 1.5], [1.60190478E12, 2.45], [1.60190496E12, 1.9333333333333333], [1.60190304E12, 1.7666666666666666], [1.60190466E12, 1.7666666666666666], [1.60190436E12, 2.216666666666667], [1.60190406E12, 1.6166666666666667], [1.60190424E12, 2.4], [1.60190394E12, 1.65], [1.60190364E12, 1.9666666666666666], [1.60190526E12, 1.7333333333333334], [1.60190334E12, 1.8666666666666667], [1.60190322E12, 2.85], [1.60190352E12, 2.566666666666667], [1.60190514E12, 2.4], [1.60190484E12, 2.3], [1.60190292E12, 1.6333333333333333], [1.60190454E12, 2.7], [1.60190472E12, 1.85], [1.6019028E12, 0.05], [1.60190442E12, 1.45], [1.60190412E12, 1.7166666666666666], [1.60190382E12, 2.6166666666666667], [1.601904E12, 1.7666666666666666], [1.6019037E12, 1.85], [1.6019031E12, 2.4166666666666665], [1.60190532E12, 1.1666666666666667], [1.6019034E12, 1.8], [1.60190502E12, 2.0166666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6019037E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60190532E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6019028E12, "maxY": 2.85, "series": [{"data": [[1.60190298E12, 2.316666666666667], [1.6019052E12, 1.7333333333333334], [1.60190328E12, 2.5], [1.6019049E12, 2.533333333333333], [1.6019046E12, 2.1666666666666665], [1.6019043E12, 1.6833333333333333], [1.60190448E12, 2.3], [1.60190418E12, 1.7333333333333334], [1.60190388E12, 2.7], [1.60190358E12, 2.2333333333333334], [1.60190376E12, 1.9], [1.60190346E12, 2.283333333333333], [1.60190286E12, 1.7], [1.60190508E12, 2.7], [1.60190316E12, 1.5], [1.60190478E12, 2.45], [1.60190496E12, 1.9333333333333333], [1.60190304E12, 1.7666666666666666], [1.60190466E12, 1.7666666666666666], [1.60190436E12, 2.216666666666667], [1.60190406E12, 1.6166666666666667], [1.60190424E12, 2.4], [1.60190394E12, 1.65], [1.60190364E12, 1.9666666666666666], [1.60190526E12, 1.7333333333333334], [1.60190334E12, 1.8666666666666667], [1.60190322E12, 2.85], [1.60190352E12, 2.566666666666667], [1.60190514E12, 2.4], [1.60190484E12, 2.3], [1.60190292E12, 1.6333333333333333], [1.60190454E12, 2.7], [1.60190472E12, 1.85], [1.6019028E12, 0.05], [1.60190442E12, 1.45], [1.60190412E12, 1.7166666666666666], [1.60190382E12, 2.6166666666666667], [1.601904E12, 1.7666666666666666], [1.6019037E12, 1.85], [1.6019031E12, 2.4166666666666665], [1.60190532E12, 1.1666666666666667], [1.6019034E12, 1.8], [1.60190502E12, 2.0166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6019037E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60190532E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

